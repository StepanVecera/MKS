
cv12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019fa8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e144  0801a158  0801a158  0002a158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802829c  0802829c  00040090  2**0
                  CONTENTS
  4 .ARM          00000008  0802829c  0802829c  0003829c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080282a4  080282a4  00040090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080282a4  080282a4  000382a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080282a8  080282a8  000382a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080282ac  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040090  2**0
                  CONTENTS
 10 .bss          000111c0  20000090  20000090  00040090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20011250  20011250  00040090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040090  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000400c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00034c25  00000000  00000000  00040103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008610  00000000  00000000  00074d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000025b8  00000000  00000000  0007d338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001dd2  00000000  00000000  0007f8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000378d2  00000000  00000000  000816c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003daf3  00000000  00000000  000b8f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00102814  00000000  00000000  000f6a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000a610  00000000  00000000  001f929c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  002038ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801a140 	.word	0x0801a140

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	0801a140 	.word	0x0801a140

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4a06      	ldr	r2, [pc, #24]	; (80005ec <vApplicationGetIdleTaskMemory+0x30>)
 80005d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	200000ac 	.word	0x200000ac
 80005ec:	2000014c 	.word	0x2000014c

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f001 f881 	bl	80016fc <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f81f 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f8c5 	bl	800078c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000602:	f000 f899 	bl	8000738 <MX_USART3_UART_Init>
  MX_RNG_Init();
 8000606:	f000 f883 	bl	8000710 <MX_RNG_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <main+0x44>)
 800060c:	1d3c      	adds	r4, r7, #4
 800060e:	461d      	mov	r5, r3
 8000610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000614:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000618:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f004 fdff 	bl	8005224 <osThreadCreate>
 8000626:	4603      	mov	r3, r0
 8000628:	4a03      	ldr	r2, [pc, #12]	; (8000638 <main+0x48>)
 800062a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800062c:	f004 fde3 	bl	80051f6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	e7fe      	b.n	8000630 <main+0x40>
 8000632:	bf00      	nop
 8000634:	0801a164 	.word	0x0801a164
 8000638:	200003a0 	.word	0x200003a0

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	; 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f018 fc53 	bl	8018ef6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b28      	ldr	r3, [pc, #160]	; (8000708 <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a27      	ldr	r2, [pc, #156]	; (8000708 <SystemClock_Config+0xcc>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b25      	ldr	r3, [pc, #148]	; (8000708 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b22      	ldr	r3, [pc, #136]	; (800070c <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a21      	ldr	r2, [pc, #132]	; (800070c <SystemClock_Config+0xd0>)
 8000686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000698:	2301      	movs	r3, #1
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800069c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b0:	23a8      	movs	r3, #168	; 0xa8
 80006b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b8:	2307      	movs	r3, #7
 80006ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 fd91 	bl	80031e8 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006cc:	f000 f95a 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d4:	2302      	movs	r3, #2
 80006d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2105      	movs	r1, #5
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 fff2 	bl	80036d8 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fa:	f000 f943 	bl	8000984 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	; 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_RNG_Init+0x20>)
 8000716:	4a07      	ldr	r2, [pc, #28]	; (8000734 <MX_RNG_Init+0x24>)
 8000718:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_RNG_Init+0x20>)
 800071c:	f003 fa2e 	bl	8003b7c <HAL_RNG_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000726:	f000 f92d 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000034c 	.word	0x2000034c
 8000734:	50060800 	.word	0x50060800

08000738 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_USART3_UART_Init+0x4c>)
 800073e:	4a12      	ldr	r2, [pc, #72]	; (8000788 <MX_USART3_UART_Init+0x50>)
 8000740:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_USART3_UART_Init+0x4c>)
 8000744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000748:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_USART3_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_USART3_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_USART3_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_USART3_UART_Init+0x4c>)
 800075e:	220c      	movs	r2, #12
 8000760:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_USART3_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_USART3_UART_Init+0x4c>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_USART3_UART_Init+0x4c>)
 8000770:	f003 fd32 	bl	80041d8 <HAL_UART_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800077a:	f000 f903 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	2000035c 	.word	0x2000035c
 8000788:	40004800 	.word	0x40004800

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08c      	sub	sp, #48	; 0x30
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
 80007a6:	4b5b      	ldr	r3, [pc, #364]	; (8000914 <MX_GPIO_Init+0x188>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a5a      	ldr	r2, [pc, #360]	; (8000914 <MX_GPIO_Init+0x188>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b58      	ldr	r3, [pc, #352]	; (8000914 <MX_GPIO_Init+0x188>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	61bb      	str	r3, [r7, #24]
 80007bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	4b54      	ldr	r3, [pc, #336]	; (8000914 <MX_GPIO_Init+0x188>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a53      	ldr	r2, [pc, #332]	; (8000914 <MX_GPIO_Init+0x188>)
 80007c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b51      	ldr	r3, [pc, #324]	; (8000914 <MX_GPIO_Init+0x188>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b4d      	ldr	r3, [pc, #308]	; (8000914 <MX_GPIO_Init+0x188>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a4c      	ldr	r2, [pc, #304]	; (8000914 <MX_GPIO_Init+0x188>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b4a      	ldr	r3, [pc, #296]	; (8000914 <MX_GPIO_Init+0x188>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b46      	ldr	r3, [pc, #280]	; (8000914 <MX_GPIO_Init+0x188>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a45      	ldr	r2, [pc, #276]	; (8000914 <MX_GPIO_Init+0x188>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b43      	ldr	r3, [pc, #268]	; (8000914 <MX_GPIO_Init+0x188>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b3f      	ldr	r3, [pc, #252]	; (8000914 <MX_GPIO_Init+0x188>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a3e      	ldr	r2, [pc, #248]	; (8000914 <MX_GPIO_Init+0x188>)
 800081c:	f043 0308 	orr.w	r3, r3, #8
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b3c      	ldr	r3, [pc, #240]	; (8000914 <MX_GPIO_Init+0x188>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0308 	and.w	r3, r3, #8
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b38      	ldr	r3, [pc, #224]	; (8000914 <MX_GPIO_Init+0x188>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a37      	ldr	r2, [pc, #220]	; (8000914 <MX_GPIO_Init+0x188>)
 8000838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b35      	ldr	r3, [pc, #212]	; (8000914 <MX_GPIO_Init+0x188>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led1_Pin|led3_Pin|led2_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000850:	4831      	ldr	r0, [pc, #196]	; (8000918 <MX_GPIO_Init+0x18c>)
 8000852:	f002 fcaf 	bl	80031b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2140      	movs	r1, #64	; 0x40
 800085a:	4830      	ldr	r0, [pc, #192]	; (800091c <MX_GPIO_Init+0x190>)
 800085c:	f002 fcaa 	bl	80031b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000866:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	482a      	ldr	r0, [pc, #168]	; (8000920 <MX_GPIO_Init+0x194>)
 8000878:	f002 fad8 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : led1_Pin led3_Pin led2_Pin */
  GPIO_InitStruct.Pin = led1_Pin|led3_Pin|led2_Pin;
 800087c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	4820      	ldr	r0, [pc, #128]	; (8000918 <MX_GPIO_Init+0x18c>)
 8000896:	f002 fac9 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800089a:	2340      	movs	r3, #64	; 0x40
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	481a      	ldr	r0, [pc, #104]	; (800091c <MX_GPIO_Init+0x190>)
 80008b2:	f002 fabb 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008b6:	2380      	movs	r3, #128	; 0x80
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ba:	2300      	movs	r3, #0
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4814      	ldr	r0, [pc, #80]	; (800091c <MX_GPIO_Init+0x190>)
 80008ca:	f002 faaf 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008ce:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008dc:	2303      	movs	r3, #3
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008e0:	230a      	movs	r3, #10
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	480e      	ldr	r0, [pc, #56]	; (8000924 <MX_GPIO_Init+0x198>)
 80008ec:	f002 fa9e 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4807      	ldr	r0, [pc, #28]	; (8000924 <MX_GPIO_Init+0x198>)
 8000906:	f002 fa91 	bl	8002e2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800090a:	bf00      	nop
 800090c:	3730      	adds	r7, #48	; 0x30
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800
 8000918:	40020400 	.word	0x40020400
 800091c:	40021800 	.word	0x40021800
 8000920:	40020800 	.word	0x40020800
 8000924:	40020000 	.word	0x40020000

08000928 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
	uint32_t rnd;
	HAL_RNG_GenerateRandomNumber(&hrng, &rnd);
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	4619      	mov	r1, r3
 8000936:	4809      	ldr	r0, [pc, #36]	; (800095c <StartDefaultTask+0x34>)
 8000938:	f003 f94a 	bl	8003bd0 <HAL_RNG_GenerateRandomNumber>
	srand(rnd);
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	4618      	mov	r0, r3
 8000940:	f018 f91e 	bl	8018b80 <srand>

  MX_LWIP_Init();
 8000944:	f003 ff0a 	bl	800475c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
	tcpecho_init();
 8000948:	f000 fa9a 	bl	8000e80 <tcpecho_init>
	telnet_init();
 800094c:	f000 fd38 	bl	80013c0 <telnet_init>
	/* Initialize HTTP server */
	httpd_init();
 8000950:	f00a feac 	bl	800b6ac <httpd_init>

	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000954:	2001      	movs	r0, #1
 8000956:	f004 fcb1 	bl	80052bc <osDelay>
 800095a:	e7fb      	b.n	8000954 <StartDefaultTask+0x2c>
 800095c:	2000034c 	.word	0x2000034c

08000960 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d101      	bne.n	8000976 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000972:	f000 fee5 	bl	8001740 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40002000 	.word	0x40002000

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>
	...

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <HAL_MspInit+0x54>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	4a11      	ldr	r2, [pc, #68]	; (80009e4 <HAL_MspInit+0x54>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	; 0x44
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <HAL_MspInit+0x54>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <HAL_MspInit+0x54>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <HAL_MspInit+0x54>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c0:	6413      	str	r3, [r2, #64]	; 0x40
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <HAL_MspInit+0x54>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	210f      	movs	r1, #15
 80009d2:	f06f 0001 	mvn.w	r0, #1
 80009d6:	f000 ffaf 	bl	8001938 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800

080009e8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <HAL_RNG_MspInit+0x3c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d10d      	bne.n	8000a16 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <HAL_RNG_MspInit+0x40>)
 8000a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a02:	4a09      	ldr	r2, [pc, #36]	; (8000a28 <HAL_RNG_MspInit+0x40>)
 8000a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a08:	6353      	str	r3, [r2, #52]	; 0x34
 8000a0a:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <HAL_RNG_MspInit+0x40>)
 8000a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000a16:	bf00      	nop
 8000a18:	3714      	adds	r7, #20
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	50060800 	.word	0x50060800
 8000a28:	40023800 	.word	0x40023800

08000a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a19      	ldr	r2, [pc, #100]	; (8000ab0 <HAL_UART_MspInit+0x84>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d12c      	bne.n	8000aa8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a10      	ldr	r2, [pc, #64]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a74:	f043 0308 	orr.w	r3, r3, #8
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0308 	and.w	r3, r3, #8
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a94:	2303      	movs	r3, #3
 8000a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a98:	2307      	movs	r3, #7
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <HAL_UART_MspInit+0x8c>)
 8000aa4:	f002 f9c2 	bl	8002e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000aa8:	bf00      	nop
 8000aaa:	3728      	adds	r7, #40	; 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40004800 	.word	0x40004800
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020c00 	.word	0x40020c00

08000abc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08e      	sub	sp, #56	; 0x38
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	4b33      	ldr	r3, [pc, #204]	; (8000ba0 <HAL_InitTick+0xe4>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	4a32      	ldr	r2, [pc, #200]	; (8000ba0 <HAL_InitTick+0xe4>)
 8000ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ada:	6413      	str	r3, [r2, #64]	; 0x40
 8000adc:	4b30      	ldr	r3, [pc, #192]	; (8000ba0 <HAL_InitTick+0xe4>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ae8:	f107 0210 	add.w	r2, r7, #16
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4611      	mov	r1, r2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f003 f810 	bl	8003b18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d103      	bne.n	8000b0a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b02:	f002 ffe1 	bl	8003ac8 <HAL_RCC_GetPCLK1Freq>
 8000b06:	6378      	str	r0, [r7, #52]	; 0x34
 8000b08:	e004      	b.n	8000b14 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b0a:	f002 ffdd 	bl	8003ac8 <HAL_RCC_GetPCLK1Freq>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b16:	4a23      	ldr	r2, [pc, #140]	; (8000ba4 <HAL_InitTick+0xe8>)
 8000b18:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1c:	0c9b      	lsrs	r3, r3, #18
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b24:	4a21      	ldr	r2, [pc, #132]	; (8000bac <HAL_InitTick+0xf0>)
 8000b26:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000b28:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b2e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000b30:	4a1d      	ldr	r2, [pc, #116]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b34:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000b48:	4817      	ldr	r0, [pc, #92]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b4a:	f003 f897 	bl	8003c7c <HAL_TIM_Base_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d11b      	bne.n	8000b94 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000b5c:	4812      	ldr	r0, [pc, #72]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b5e:	f003 f8e7 	bl	8003d30 <HAL_TIM_Base_Start_IT>
 8000b62:	4603      	mov	r3, r0
 8000b64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d111      	bne.n	8000b94 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000b70:	202d      	movs	r0, #45	; 0x2d
 8000b72:	f000 fefd 	bl	8001970 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b0f      	cmp	r3, #15
 8000b7a:	d808      	bhi.n	8000b8e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	202d      	movs	r0, #45	; 0x2d
 8000b82:	f000 fed9 	bl	8001938 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b86:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <HAL_InitTick+0xf4>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6013      	str	r3, [r2, #0]
 8000b8c:	e002      	b.n	8000b94 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3738      	adds	r7, #56	; 0x38
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	431bde83 	.word	0x431bde83
 8000ba8:	200003a4 	.word	0x200003a4
 8000bac:	40002000 	.word	0x40002000
 8000bb0:	20000004 	.word	0x20000004

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <NMI_Handler+0x4>

08000bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <HardFault_Handler+0x4>

08000bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <MemManage_Handler+0x4>

08000bc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <BusFault_Handler+0x4>

08000bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <UsageFault_Handler+0x4>

08000bd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000be6:	f003 f913 	bl	8003e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200003a4 	.word	0x200003a4

08000bf4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <ETH_IRQHandler+0x10>)
 8000bfa:	f001 fa41 	bl	8002080 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20005110 	.word	0x20005110

08000c08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return 1;
 8000c0c:	2301      	movs	r3, #1
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <_kill>:

int _kill(int pid, int sig)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <_kill+0x20>)
 8000c24:	2216      	movs	r2, #22
 8000c26:	601a      	str	r2, [r3, #0]
  return -1;
 8000c28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	20011240 	.word	0x20011240

08000c3c <_exit>:

void _exit (int status)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff ffe5 	bl	8000c18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c4e:	e7fe      	b.n	8000c4e <_exit+0x12>

08000c50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	e00a      	b.n	8000c78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c62:	f3af 8000 	nop.w
 8000c66:	4601      	mov	r1, r0
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	1c5a      	adds	r2, r3, #1
 8000c6c:	60ba      	str	r2, [r7, #8]
 8000c6e:	b2ca      	uxtb	r2, r1
 8000c70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3301      	adds	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	dbf0      	blt.n	8000c62 <_read+0x12>
  }

  return len;
 8000c80:	687b      	ldr	r3, [r7, #4]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	60f8      	str	r0, [r7, #12]
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	e009      	b.n	8000cb0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	1c5a      	adds	r2, r3, #1
 8000ca0:	60ba      	str	r2, [r7, #8]
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3301      	adds	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	dbf1      	blt.n	8000c9c <_write+0x12>
  }
  return len;
 8000cb8:	687b      	ldr	r3, [r7, #4]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <_close>:

int _close(int file)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cea:	605a      	str	r2, [r3, #4]
  return 0;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <_isatty>:

int _isatty(int file)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d34:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <_sbrk+0x5c>)
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <_sbrk+0x60>)
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <_sbrk+0x64>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <_sbrk+0x68>)
 8000d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d205      	bcs.n	8000d68 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <_sbrk+0x6c>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a06      	ldr	r2, [pc, #24]	; (8000d90 <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	371c      	adds	r7, #28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	20030000 	.word	0x20030000
 8000d8c:	00000400 	.word	0x00000400
 8000d90:	200003ec 	.word	0x200003ec
 8000d94:	20011250 	.word	0x20011250
 8000d98:	20011240 	.word	0x20011240

08000d9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <SystemInit+0x20>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <SystemInit+0x20>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af02      	add	r7, sp, #8
 8000dc6:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2010      	movs	r0, #16
 8000dce:	f007 f9fb 	bl	80081c8 <netconn_new_with_proto_and_callback>
 8000dd2:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d04e      	beq.n	8000e78 <tcpecho_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000dda:	2207      	movs	r2, #7
 8000ddc:	2100      	movs	r1, #0
 8000dde:	69f8      	ldr	r0, [r7, #28]
 8000de0:	f007 faac 	bl	800833c <netconn_bind>
 8000de4:	4603      	mov	r3, r0
 8000de6:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000de8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d13f      	bne.n	8000e70 <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000df0:	21ff      	movs	r1, #255	; 0xff
 8000df2:	69f8      	ldr	r0, [r7, #28]
 8000df4:	f007 fb12 	bl	800841c <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	69f8      	ldr	r0, [r7, #28]
 8000e00:	f007 fb38 	bl	8008474 <netconn_accept>
 8000e04:	4603      	mov	r3, r0
 8000e06:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000e08:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1f3      	bne.n	8000df8 <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000e10:	e01b      	b.n	8000e4a <tcpecho_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	f107 020a 	add.w	r2, r7, #10
 8000e18:	f107 010c 	add.w	r1, r7, #12
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f009 fc19 	bl	800a654 <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000e22:	6978      	ldr	r0, [r7, #20]
 8000e24:	68f9      	ldr	r1, [r7, #12]
 8000e26:	897b      	ldrh	r3, [r7, #10]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	2301      	movs	r3, #1
 8000e30:	f007 fda2 	bl	8008978 <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f009 fc56 	bl	800a6e8 <netbuf_next>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	dae7      	bge.n	8000e12 <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f009 fbe5 	bl	800a614 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	f107 0210 	add.w	r2, r7, #16
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f007 fd16 	bl	8008884 <netconn_recv>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d0d9      	beq.n	8000e12 <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f007 fe8b 	bl	8008b7c <netconn_close>
          netconn_delete(newconn);
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f007 fa4b 	bl	8008304 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000e6e:	e7c3      	b.n	8000df8 <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f007 fa46 	bl	8008304 <netconn_delete>
    }
  }
}
 8000e78:	bf00      	nop
 8000e7a:	3720      	adds	r7, #32
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000e86:	2304      	movs	r3, #4
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e8e:	2200      	movs	r2, #0
 8000e90:	4903      	ldr	r1, [pc, #12]	; (8000ea0 <tcpecho_init+0x20>)
 8000e92:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <tcpecho_init+0x24>)
 8000e94:	f017 fe30 	bl	8018af8 <sys_thread_new>
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	08000dc1 	.word	0x08000dc1
 8000ea4:	0801a180 	.word	0x0801a180

08000ea8 <http_client>:
#define TCPECHO_THREAD_PRIO  ( tskIDLE_PRIORITY + 4 )
#define CMD_BUFFER_LEN 512


static void http_client(char *s, uint16_t size)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	807b      	strh	r3, [r7, #2]
	struct netconn *client;
	struct netbuf *buf;
	ip_addr_t ip;
	uint16_t len = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	83fb      	strh	r3, [r7, #30]
	IP_ADDR4(&ip, 147,229,144,124);
 8000eb8:	4b2a      	ldr	r3, [pc, #168]	; (8000f64 <http_client+0xbc>)
 8000eba:	60fb      	str	r3, [r7, #12]
	const char *request = "GET /ip.php HTTP/1.1\r\n"
 8000ebc:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <http_client+0xc0>)
 8000ebe:	61bb      	str	r3, [r7, #24]
			"Host: www.urel.feec.vutbr.cz\r\n"
			"Connection: close\r\n"
			"\r\n\r\n";
	client = netconn_new(NETCONN_TCP);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2010      	movs	r0, #16
 8000ec6:	f007 f97f 	bl	80081c8 <netconn_new_with_proto_and_callback>
 8000eca:	6178      	str	r0, [r7, #20]
	if (netconn_connect(client, &ip, 80) == ERR_OK) {
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2250      	movs	r2, #80	; 0x50
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	6978      	ldr	r0, [r7, #20]
 8000ed6:	f007 fa69 	bl	80083ac <netconn_connect>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d136      	bne.n	8000f4e <http_client+0xa6>
		netconn_write(client, request, strlen(request), NETCONN_COPY);
 8000ee0:	69b8      	ldr	r0, [r7, #24]
 8000ee2:	f7ff f98f 	bl	8000204 <strlen>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	2300      	movs	r3, #0
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2301      	movs	r3, #1
 8000eee:	69b9      	ldr	r1, [r7, #24]
 8000ef0:	6978      	ldr	r0, [r7, #20]
 8000ef2:	f007 fd41 	bl	8008978 <netconn_write_partly>
		// Receive the HTTP response
		s[0] = 0;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
		while (len < size && netconn_recv(client, &buf) == ERR_OK) {
 8000efc:	e019      	b.n	8000f32 <http_client+0x8a>
			len += netbuf_copy(buf, &s[len], size-len);
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	6818      	ldr	r0, [r3, #0]
 8000f02:	8bfb      	ldrh	r3, [r7, #30]
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	18d1      	adds	r1, r2, r3
 8000f08:	887a      	ldrh	r2, [r7, #2]
 8000f0a:	8bfb      	ldrh	r3, [r7, #30]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	2300      	movs	r3, #0
 8000f12:	f00c fa25 	bl	800d360 <pbuf_copy_partial>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	8bfb      	ldrh	r3, [r7, #30]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	83fb      	strh	r3, [r7, #30]
			s[len] = 0;
 8000f20:	8bfb      	ldrh	r3, [r7, #30]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
			netbuf_delete(buf);
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f009 fb71 	bl	800a614 <netbuf_delete>
		while (len < size && netconn_recv(client, &buf) == ERR_OK) {
 8000f32:	8bfa      	ldrh	r2, [r7, #30]
 8000f34:	887b      	ldrh	r3, [r7, #2]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d20d      	bcs.n	8000f56 <http_client+0xae>
 8000f3a:	f107 0310 	add.w	r3, r7, #16
 8000f3e:	4619      	mov	r1, r3
 8000f40:	6978      	ldr	r0, [r7, #20]
 8000f42:	f007 fc9f 	bl	8008884 <netconn_recv>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0d8      	beq.n	8000efe <http_client+0x56>
 8000f4c:	e003      	b.n	8000f56 <http_client+0xae>
		}
	} else {
		sprintf(s, "Chyba pripojeni\n");
 8000f4e:	4907      	ldr	r1, [pc, #28]	; (8000f6c <http_client+0xc4>)
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f017 ff43 	bl	8018ddc <siprintf>
	}
	netconn_delete(client);
 8000f56:	6978      	ldr	r0, [r7, #20]
 8000f58:	f007 f9d4 	bl	8008304 <netconn_delete>
}
 8000f5c:	bf00      	nop
 8000f5e:	3720      	adds	r7, #32
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	7c90e593 	.word	0x7c90e593
 8000f68:	0801a190 	.word	0x0801a190
 8000f6c:	0801a1dc 	.word	0x0801a1dc

08000f70 <telnet_process_command>:



static void telnet_process_command(char *cmd, struct netconn *conn){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8000f76:	af02      	add	r7, sp, #8
 8000f78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000f7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8000f80:	6018      	str	r0, [r3, #0]
 8000f82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000f86:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8000f8a:	6019      	str	r1, [r3, #0]
	char *token;
	char output_msg_buffer[CMD_BUFFER_LEN];

	if(strlen(cmd)==0){
 8000f8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000f90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f000 8150 	beq.w	800123e <telnet_process_command+0x2ce>
		return;
	}

	// HELLO
	token = strtok(cmd, " ");
 8000f9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000fa2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8000fa6:	49a8      	ldr	r1, [pc, #672]	; (8001248 <telnet_process_command+0x2d8>)
 8000fa8:	6818      	ldr	r0, [r3, #0]
 8000faa:	f017 ffe7 	bl	8018f7c <strtok>
 8000fae:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
	if (strcasecmp(token, "HELLO") == 0) {
 8000fb2:	49a6      	ldr	r1, [pc, #664]	; (800124c <telnet_process_command+0x2dc>)
 8000fb4:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 8000fb8:	f017 ffa6 	bl	8018f08 <strcasecmp>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d106      	bne.n	8000fd0 <telnet_process_command+0x60>
		sprintf(output_msg_buffer, "Komunikace OK\n\r");
 8000fc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fc6:	49a2      	ldr	r1, [pc, #648]	; (8001250 <telnet_process_command+0x2e0>)
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f017 ff07 	bl	8018ddc <siprintf>
 8000fce:	e123      	b.n	8001218 <telnet_process_command+0x2a8>
		// netconn_write(conn, output_msg_buffer, strlen(output_msg_buffer), NETCONN_COPY);
		// LED1
	} else if (strcasecmp(token, "LED1") == 0) {
 8000fd0:	49a0      	ldr	r1, [pc, #640]	; (8001254 <telnet_process_command+0x2e4>)
 8000fd2:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 8000fd6:	f017 ff97 	bl	8018f08 <strcasecmp>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d12e      	bne.n	800103e <telnet_process_command+0xce>
		token = strtok(NULL, " ");
 8000fe0:	4999      	ldr	r1, [pc, #612]	; (8001248 <telnet_process_command+0x2d8>)
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f017 ffca 	bl	8018f7c <strtok>
 8000fe8:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
		if (strcasecmp(token, "ON") == 0) {
 8000fec:	499a      	ldr	r1, [pc, #616]	; (8001258 <telnet_process_command+0x2e8>)
 8000fee:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 8000ff2:	f017 ff89 	bl	8018f08 <strcasecmp>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d10b      	bne.n	8001014 <telnet_process_command+0xa4>
			HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2101      	movs	r1, #1
 8001000:	4896      	ldr	r0, [pc, #600]	; (800125c <telnet_process_command+0x2ec>)
 8001002:	f002 f8d7 	bl	80031b4 <HAL_GPIO_WritePin>
			sprintf(output_msg_buffer, "Done\n\r");
 8001006:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800100a:	4995      	ldr	r1, [pc, #596]	; (8001260 <telnet_process_command+0x2f0>)
 800100c:	4618      	mov	r0, r3
 800100e:	f017 fee5 	bl	8018ddc <siprintf>
 8001012:	e101      	b.n	8001218 <telnet_process_command+0x2a8>

		} else if (strcasecmp(token, "OFF") == 0) {
 8001014:	4993      	ldr	r1, [pc, #588]	; (8001264 <telnet_process_command+0x2f4>)
 8001016:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 800101a:	f017 ff75 	bl	8018f08 <strcasecmp>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	f040 80f9 	bne.w	8001218 <telnet_process_command+0x2a8>
			HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	2101      	movs	r1, #1
 800102a:	488c      	ldr	r0, [pc, #560]	; (800125c <telnet_process_command+0x2ec>)
 800102c:	f002 f8c2 	bl	80031b4 <HAL_GPIO_WritePin>
			sprintf(output_msg_buffer, "Done\n\r");
 8001030:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001034:	498a      	ldr	r1, [pc, #552]	; (8001260 <telnet_process_command+0x2f0>)
 8001036:	4618      	mov	r0, r3
 8001038:	f017 fed0 	bl	8018ddc <siprintf>
 800103c:	e0ec      	b.n	8001218 <telnet_process_command+0x2a8>
		}
	}
	// LED2
	else if (strcasecmp(token, "LED2") == 0) {
 800103e:	498a      	ldr	r1, [pc, #552]	; (8001268 <telnet_process_command+0x2f8>)
 8001040:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 8001044:	f017 ff60 	bl	8018f08 <strcasecmp>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d12e      	bne.n	80010ac <telnet_process_command+0x13c>
		token = strtok(NULL, " ");
 800104e:	497e      	ldr	r1, [pc, #504]	; (8001248 <telnet_process_command+0x2d8>)
 8001050:	2000      	movs	r0, #0
 8001052:	f017 ff93 	bl	8018f7c <strtok>
 8001056:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
		if (strcasecmp(token, "ON") == 0) {
 800105a:	497f      	ldr	r1, [pc, #508]	; (8001258 <telnet_process_command+0x2e8>)
 800105c:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 8001060:	f017 ff52 	bl	8018f08 <strcasecmp>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d10b      	bne.n	8001082 <telnet_process_command+0x112>
			HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 800106a:	2201      	movs	r2, #1
 800106c:	2180      	movs	r1, #128	; 0x80
 800106e:	487b      	ldr	r0, [pc, #492]	; (800125c <telnet_process_command+0x2ec>)
 8001070:	f002 f8a0 	bl	80031b4 <HAL_GPIO_WritePin>
			sprintf(output_msg_buffer, "Done\n\r");
 8001074:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001078:	4979      	ldr	r1, [pc, #484]	; (8001260 <telnet_process_command+0x2f0>)
 800107a:	4618      	mov	r0, r3
 800107c:	f017 feae 	bl	8018ddc <siprintf>
 8001080:	e0ca      	b.n	8001218 <telnet_process_command+0x2a8>
		} else if (strcasecmp(token, "OFF") == 0) {
 8001082:	4978      	ldr	r1, [pc, #480]	; (8001264 <telnet_process_command+0x2f4>)
 8001084:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 8001088:	f017 ff3e 	bl	8018f08 <strcasecmp>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	f040 80c2 	bne.w	8001218 <telnet_process_command+0x2a8>
			HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	2180      	movs	r1, #128	; 0x80
 8001098:	4870      	ldr	r0, [pc, #448]	; (800125c <telnet_process_command+0x2ec>)
 800109a:	f002 f88b 	bl	80031b4 <HAL_GPIO_WritePin>
			sprintf(output_msg_buffer, "Done\n\r");
 800109e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010a2:	496f      	ldr	r1, [pc, #444]	; (8001260 <telnet_process_command+0x2f0>)
 80010a4:	4618      	mov	r0, r3
 80010a6:	f017 fe99 	bl	8018ddc <siprintf>
 80010aa:	e0b5      	b.n	8001218 <telnet_process_command+0x2a8>
		}
	}

	// LED3
	else if (strcasecmp(token, "LED3") == 0) {
 80010ac:	496f      	ldr	r1, [pc, #444]	; (800126c <telnet_process_command+0x2fc>)
 80010ae:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 80010b2:	f017 ff29 	bl	8018f08 <strcasecmp>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d130      	bne.n	800111e <telnet_process_command+0x1ae>
		token = strtok(NULL, " ");
 80010bc:	4962      	ldr	r1, [pc, #392]	; (8001248 <telnet_process_command+0x2d8>)
 80010be:	2000      	movs	r0, #0
 80010c0:	f017 ff5c 	bl	8018f7c <strtok>
 80010c4:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
		if (strcasecmp(token, "ON") == 0) {
 80010c8:	4963      	ldr	r1, [pc, #396]	; (8001258 <telnet_process_command+0x2e8>)
 80010ca:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 80010ce:	f017 ff1b 	bl	8018f08 <strcasecmp>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d10c      	bne.n	80010f2 <telnet_process_command+0x182>
			HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010de:	485f      	ldr	r0, [pc, #380]	; (800125c <telnet_process_command+0x2ec>)
 80010e0:	f002 f868 	bl	80031b4 <HAL_GPIO_WritePin>
			sprintf(output_msg_buffer, "Done\n\r");
 80010e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010e8:	495d      	ldr	r1, [pc, #372]	; (8001260 <telnet_process_command+0x2f0>)
 80010ea:	4618      	mov	r0, r3
 80010ec:	f017 fe76 	bl	8018ddc <siprintf>
 80010f0:	e092      	b.n	8001218 <telnet_process_command+0x2a8>
		} else if (strcasecmp(token, "OFF") == 0) {
 80010f2:	495c      	ldr	r1, [pc, #368]	; (8001264 <telnet_process_command+0x2f4>)
 80010f4:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 80010f8:	f017 ff06 	bl	8018f08 <strcasecmp>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f040 808a 	bne.w	8001218 <telnet_process_command+0x2a8>
			HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800110a:	4854      	ldr	r0, [pc, #336]	; (800125c <telnet_process_command+0x2ec>)
 800110c:	f002 f852 	bl	80031b4 <HAL_GPIO_WritePin>
			sprintf(output_msg_buffer, "Done\n\r");
 8001110:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001114:	4952      	ldr	r1, [pc, #328]	; (8001260 <telnet_process_command+0x2f0>)
 8001116:	4618      	mov	r0, r3
 8001118:	f017 fe60 	bl	8018ddc <siprintf>
 800111c:	e07c      	b.n	8001218 <telnet_process_command+0x2a8>
		}
	}
	// CLIENT
	else if (strcasecmp(token, "CLIENT") == 0) {
 800111e:	4954      	ldr	r1, [pc, #336]	; (8001270 <telnet_process_command+0x300>)
 8001120:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 8001124:	f017 fef0 	bl	8018f08 <strcasecmp>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d107      	bne.n	800113e <telnet_process_command+0x1ce>

		http_client(output_msg_buffer, CMD_BUFFER_LEN);
 800112e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001132:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff feb6 	bl	8000ea8 <http_client>
 800113c:	e06c      	b.n	8001218 <telnet_process_command+0x2a8>
	}


	// STATUS
	else if (strcasecmp(token, "STATUS") == 0) {
 800113e:	494d      	ldr	r1, [pc, #308]	; (8001274 <telnet_process_command+0x304>)
 8001140:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 8001144:	f017 fee0 	bl	8018f08 <strcasecmp>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d164      	bne.n	8001218 <telnet_process_command+0x2a8>
		uint8_t LED1 = HAL_GPIO_ReadPin(led1_GPIO_Port, led1_Pin);
 800114e:	2101      	movs	r1, #1
 8001150:	4842      	ldr	r0, [pc, #264]	; (800125c <telnet_process_command+0x2ec>)
 8001152:	f002 f817 	bl	8003184 <HAL_GPIO_ReadPin>
 8001156:	4603      	mov	r3, r0
 8001158:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
		uint8_t LED2 = HAL_GPIO_ReadPin(led2_GPIO_Port, led2_Pin);
 800115c:	2180      	movs	r1, #128	; 0x80
 800115e:	483f      	ldr	r0, [pc, #252]	; (800125c <telnet_process_command+0x2ec>)
 8001160:	f002 f810 	bl	8003184 <HAL_GPIO_ReadPin>
 8001164:	4603      	mov	r3, r0
 8001166:	f887 324a 	strb.w	r3, [r7, #586]	; 0x24a
		uint8_t LED3 = HAL_GPIO_ReadPin(led3_GPIO_Port, led3_Pin);
 800116a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800116e:	483b      	ldr	r0, [pc, #236]	; (800125c <telnet_process_command+0x2ec>)
 8001170:	f002 f808 	bl	8003184 <HAL_GPIO_ReadPin>
 8001174:	4603      	mov	r3, r0
 8001176:	f887 3249 	strb.w	r3, [r7, #585]	; 0x249
		char LED1_text[18];
		char LED2_text[18];
		char LED3_text[18];
		if (LED1 == 0) {
 800117a:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 800117e:	2b00      	cmp	r3, #0
 8001180:	d104      	bne.n	800118c <telnet_process_command+0x21c>
			strcpy(LED1_text, "OFF");
 8001182:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001186:	4a3c      	ldr	r2, [pc, #240]	; (8001278 <telnet_process_command+0x308>)
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	e00c      	b.n	80011a6 <telnet_process_command+0x236>
		} else if (LED1 == 1) {
 800118c:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8001190:	2b01      	cmp	r3, #1
 8001192:	d108      	bne.n	80011a6 <telnet_process_command+0x236>
			strcpy(LED1_text, "ON");
 8001194:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001198:	4a2f      	ldr	r2, [pc, #188]	; (8001258 <telnet_process_command+0x2e8>)
 800119a:	6812      	ldr	r2, [r2, #0]
 800119c:	4611      	mov	r1, r2
 800119e:	8019      	strh	r1, [r3, #0]
 80011a0:	3302      	adds	r3, #2
 80011a2:	0c12      	lsrs	r2, r2, #16
 80011a4:	701a      	strb	r2, [r3, #0]
		}
		if (LED2 == 0) {
 80011a6:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d104      	bne.n	80011b8 <telnet_process_command+0x248>
			strcpy(LED2_text, "OFF");
 80011ae:	f107 0320 	add.w	r3, r7, #32
 80011b2:	4a31      	ldr	r2, [pc, #196]	; (8001278 <telnet_process_command+0x308>)
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	e00c      	b.n	80011d2 <telnet_process_command+0x262>
		} else if (LED2 == 1) {
 80011b8:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d108      	bne.n	80011d2 <telnet_process_command+0x262>
			strcpy(LED2_text, "ON");
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4a24      	ldr	r2, [pc, #144]	; (8001258 <telnet_process_command+0x2e8>)
 80011c6:	6812      	ldr	r2, [r2, #0]
 80011c8:	4611      	mov	r1, r2
 80011ca:	8019      	strh	r1, [r3, #0]
 80011cc:	3302      	adds	r3, #2
 80011ce:	0c12      	lsrs	r2, r2, #16
 80011d0:	701a      	strb	r2, [r3, #0]
		}
		if (LED3 == 0) {
 80011d2:	f897 3249 	ldrb.w	r3, [r7, #585]	; 0x249
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d104      	bne.n	80011e4 <telnet_process_command+0x274>
			strcpy(LED3_text, "OFF");
 80011da:	f107 030c 	add.w	r3, r7, #12
 80011de:	4a26      	ldr	r2, [pc, #152]	; (8001278 <telnet_process_command+0x308>)
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	e00c      	b.n	80011fe <telnet_process_command+0x28e>
		} else if (LED3 == 1) {
 80011e4:	f897 3249 	ldrb.w	r3, [r7, #585]	; 0x249
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d108      	bne.n	80011fe <telnet_process_command+0x28e>
			strcpy(LED3_text, "ON");
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	4a19      	ldr	r2, [pc, #100]	; (8001258 <telnet_process_command+0x2e8>)
 80011f2:	6812      	ldr	r2, [r2, #0]
 80011f4:	4611      	mov	r1, r2
 80011f6:	8019      	strh	r1, [r3, #0]
 80011f8:	3302      	adds	r3, #2
 80011fa:	0c12      	lsrs	r2, r2, #16
 80011fc:	701a      	strb	r2, [r3, #0]

		}
		sprintf(output_msg_buffer, "LED 1 STATUS:'%s' LED 2 STATUS:'%s' LED 3 STATUS:'%s'\n\r", LED1_text, LED2_text, LED3_text);
 80011fe:	f107 0120 	add.w	r1, r7, #32
 8001202:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001206:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	460b      	mov	r3, r1
 8001212:	491a      	ldr	r1, [pc, #104]	; (800127c <telnet_process_command+0x30c>)
 8001214:	f017 fde2 	bl	8018ddc <siprintf>
	}
	netconn_write(conn, output_msg_buffer, strlen(output_msg_buffer), NETCONN_COPY);
 8001218:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800121c:	4618      	mov	r0, r3
 800121e:	f7fe fff1 	bl	8000204 <strlen>
 8001222:	4602      	mov	r2, r0
 8001224:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001228:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800122c:	f5a3 7014 	sub.w	r0, r3, #592	; 0x250
 8001230:	2300      	movs	r3, #0
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2301      	movs	r3, #1
 8001236:	6800      	ldr	r0, [r0, #0]
 8001238:	f007 fb9e 	bl	8008978 <netconn_write_partly>
 800123c:	e000      	b.n	8001240 <telnet_process_command+0x2d0>
		return;
 800123e:	bf00      	nop
}
 8001240:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	0801a1f0 	.word	0x0801a1f0
 800124c:	0801a1f4 	.word	0x0801a1f4
 8001250:	0801a1fc 	.word	0x0801a1fc
 8001254:	0801a20c 	.word	0x0801a20c
 8001258:	0801a214 	.word	0x0801a214
 800125c:	40020400 	.word	0x40020400
 8001260:	0801a218 	.word	0x0801a218
 8001264:	0801a220 	.word	0x0801a220
 8001268:	0801a224 	.word	0x0801a224
 800126c:	0801a22c 	.word	0x0801a22c
 8001270:	0801a234 	.word	0x0801a234
 8001274:	0801a23c 	.word	0x0801a23c
 8001278:	0046464f 	.word	0x0046464f
 800127c:	0801a244 	.word	0x0801a244

08001280 <telnet_byte_available>:



static void telnet_byte_available(uint8_t c, struct netconn *conn)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];
	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 127) data[cnt++] = c;
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <telnet_byte_available+0x68>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001294:	d210      	bcs.n	80012b8 <telnet_byte_available+0x38>
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b1f      	cmp	r3, #31
 800129a:	d90d      	bls.n	80012b8 <telnet_byte_available+0x38>
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	db09      	blt.n	80012b8 <telnet_byte_available+0x38>
 80012a4:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <telnet_byte_available+0x68>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	1c5a      	adds	r2, r3, #1
 80012aa:	b291      	uxth	r1, r2
 80012ac:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <telnet_byte_available+0x68>)
 80012ae:	8011      	strh	r1, [r2, #0]
 80012b0:	4619      	mov	r1, r3
 80012b2:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <telnet_byte_available+0x6c>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	5453      	strb	r3, [r2, r1]
	if (c == '\n' || c == '\r') {
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	2b0a      	cmp	r3, #10
 80012bc:	d002      	beq.n	80012c4 <telnet_byte_available+0x44>
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	2b0d      	cmp	r3, #13
 80012c2:	d10c      	bne.n	80012de <telnet_byte_available+0x5e>
		data[cnt] = '\0';
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <telnet_byte_available+0x68>)
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <telnet_byte_available+0x6c>)
 80012cc:	2100      	movs	r1, #0
 80012ce:	5499      	strb	r1, [r3, r2]
		telnet_process_command(data, conn);
 80012d0:	6839      	ldr	r1, [r7, #0]
 80012d2:	4806      	ldr	r0, [pc, #24]	; (80012ec <telnet_byte_available+0x6c>)
 80012d4:	f7ff fe4c 	bl	8000f70 <telnet_process_command>
		cnt = 0;
 80012d8:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <telnet_byte_available+0x68>)
 80012da:	2200      	movs	r2, #0
 80012dc:	801a      	strh	r2, [r3, #0]
	}
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200003f0 	.word	0x200003f0
 80012ec:	200003f4 	.word	0x200003f4

080012f0 <telnet_thread>:



/*-----------------------------------------------------------------------------------*/
static void telnet_thread(void *arg)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	u16_t len;

	LWIP_UNUSED_ARG(arg);

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2100      	movs	r1, #0
 80012fc:	2010      	movs	r0, #16
 80012fe:	f006 ff63 	bl	80081c8 <netconn_new_with_proto_and_callback>
 8001302:	61f8      	str	r0, [r7, #28]

	if (conn!=NULL)
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d055      	beq.n	80013b6 <telnet_thread+0xc6>
	{
		/* Bind connection to well known port number 23. */
		err = netconn_bind(conn, NULL, 23);
 800130a:	2217      	movs	r2, #23
 800130c:	2100      	movs	r1, #0
 800130e:	69f8      	ldr	r0, [r7, #28]
 8001310:	f007 f814 	bl	800833c <netconn_bind>
 8001314:	4603      	mov	r3, r0
 8001316:	76fb      	strb	r3, [r7, #27]

		if (err == ERR_OK)
 8001318:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d146      	bne.n	80013ae <telnet_thread+0xbe>
		{
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);
 8001320:	21ff      	movs	r1, #255	; 0xff
 8001322:	69f8      	ldr	r0, [r7, #28]
 8001324:	f007 f87a 	bl	800841c <netconn_listen_with_backlog>

			while (1)
			{
				/* Grab new connection. */
				accept_err = netconn_accept(conn, &newconn);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	69f8      	ldr	r0, [r7, #28]
 8001330:	f007 f8a0 	bl	8008474 <netconn_accept>
 8001334:	4603      	mov	r3, r0
 8001336:	76bb      	strb	r3, [r7, #26]

				/* Process the new connection. */
				if (accept_err == ERR_OK)
 8001338:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1f3      	bne.n	8001328 <telnet_thread+0x38>
				{

					while (netconn_recv(newconn, &buf) == ERR_OK)
 8001340:	e022      	b.n	8001388 <telnet_thread+0x98>
					{
						do
						{
							netbuf_data(buf, (void**)&data, &len);
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	f107 020a 	add.w	r2, r7, #10
 8001348:	f107 010c 	add.w	r1, r7, #12
 800134c:	4618      	mov	r0, r3
 800134e:	f009 f981 	bl	800a654 <netbuf_data>
							while (len--) telnet_byte_available(*data++, newconn);
 8001352:	e008      	b.n	8001366 <telnet_thread+0x76>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	60fa      	str	r2, [r7, #12]
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff8d 	bl	8001280 <telnet_byte_available>
 8001366:	897b      	ldrh	r3, [r7, #10]
 8001368:	1e5a      	subs	r2, r3, #1
 800136a:	b292      	uxth	r2, r2
 800136c:	817a      	strh	r2, [r7, #10]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <telnet_thread+0x64>
						}
						while (netbuf_next(buf) >= 0);
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4618      	mov	r0, r3
 8001376:	f009 f9b7 	bl	800a6e8 <netbuf_next>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	dae0      	bge.n	8001342 <telnet_thread+0x52>

						netbuf_delete(buf);
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4618      	mov	r0, r3
 8001384:	f009 f946 	bl	800a614 <netbuf_delete>
					while (netconn_recv(newconn, &buf) == ERR_OK)
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f107 0210 	add.w	r2, r7, #16
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f007 fa77 	bl	8008884 <netconn_recv>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0d2      	beq.n	8001342 <telnet_thread+0x52>
					}

					/* Close connection and discard connection identifier. */
					netconn_close(newconn);
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	4618      	mov	r0, r3
 80013a0:	f007 fbec 	bl	8008b7c <netconn_close>
					netconn_delete(newconn);
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f006 ffac 	bl	8008304 <netconn_delete>
				accept_err = netconn_accept(conn, &newconn);
 80013ac:	e7bc      	b.n	8001328 <telnet_thread+0x38>
				}
			}
		}
		else
		{
			netconn_delete(newconn);
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f006 ffa7 	bl	8008304 <netconn_delete>
		}
	}
}
 80013b6:	bf00      	nop
 80013b8:	3720      	adds	r7, #32
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <telnet_init>:
/*-----------------------------------------------------------------------------------*/

void telnet_init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af02      	add	r7, sp, #8
	sys_thread_new("telnet_thread", telnet_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 80013c6:	2304      	movs	r3, #4
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ce:	2200      	movs	r2, #0
 80013d0:	4903      	ldr	r1, [pc, #12]	; (80013e0 <telnet_init+0x20>)
 80013d2:	4804      	ldr	r0, [pc, #16]	; (80013e4 <telnet_init+0x24>)
 80013d4:	f017 fb90 	bl	8018af8 <sys_thread_new>
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	080012f1 	.word	0x080012f1
 80013e4:	0801a27c 	.word	0x0801a27c

080013e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80013e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001420 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013ec:	480d      	ldr	r0, [pc, #52]	; (8001424 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013ee:	490e      	ldr	r1, [pc, #56]	; (8001428 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013f0:	4a0e      	ldr	r2, [pc, #56]	; (800142c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f4:	e002      	b.n	80013fc <LoopCopyDataInit>

080013f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013fa:	3304      	adds	r3, #4

080013fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001400:	d3f9      	bcc.n	80013f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001402:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001404:	4c0b      	ldr	r4, [pc, #44]	; (8001434 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001408:	e001      	b.n	800140e <LoopFillZerobss>

0800140a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800140a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800140c:	3204      	adds	r2, #4

0800140e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001410:	d3fb      	bcc.n	800140a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001412:	f7ff fcc3 	bl	8000d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001416:	f017 fea9 	bl	801916c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800141a:	f7ff f8e9 	bl	80005f0 <main>
  bx  lr    
 800141e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001420:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001428:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800142c:	080282ac 	.word	0x080282ac
  ldr r2, =_sbss
 8001430:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001434:	20011250 	.word	0x20011250

08001438 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001438:	e7fe      	b.n	8001438 <ADC_IRQHandler>

0800143a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
 8001442:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00b      	beq.n	8001462 <LAN8742_RegisterBusIO+0x28>
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d007      	beq.n	8001462 <LAN8742_RegisterBusIO+0x28>
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <LAN8742_RegisterBusIO+0x28>
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d102      	bne.n	8001468 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	e014      	b.n	8001492 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d17c      	bne.n	80015b8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d002      	beq.n	80014cc <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2220      	movs	r2, #32
 80014d0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	e01c      	b.n	8001512 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	f107 0208 	add.w	r2, r7, #8
 80014e0:	2112      	movs	r1, #18
 80014e2:	6978      	ldr	r0, [r7, #20]
 80014e4:	4798      	blx	r3
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	da03      	bge.n	80014f4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80014ec:	f06f 0304 	mvn.w	r3, #4
 80014f0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80014f2:	e00b      	b.n	800150c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	f003 031f 	and.w	r3, r3, #31
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d105      	bne.n	800150c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
         break;
 800150a:	e005      	b.n	8001518 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	3301      	adds	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	2b1f      	cmp	r3, #31
 8001516:	d9df      	bls.n	80014d8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b1f      	cmp	r3, #31
 800151e:	d902      	bls.n	8001526 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001520:	f06f 0302 	mvn.w	r3, #2
 8001524:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d145      	bne.n	80015b8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6810      	ldr	r0, [r2, #0]
 8001534:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001538:	2100      	movs	r1, #0
 800153a:	4798      	blx	r3
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	db37      	blt.n	80015b2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	6810      	ldr	r0, [r2, #0]
 800154a:	f107 0208 	add.w	r2, r7, #8
 800154e:	2100      	movs	r1, #0
 8001550:	4798      	blx	r3
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	db28      	blt.n	80015aa <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	4798      	blx	r3
 800155e:	4603      	mov	r3, r0
 8001560:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001562:	e01c      	b.n	800159e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	4798      	blx	r3
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001576:	d80e      	bhi.n	8001596 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	6810      	ldr	r0, [r2, #0]
 8001580:	f107 0208 	add.w	r2, r7, #8
 8001584:	2100      	movs	r1, #0
 8001586:	4798      	blx	r3
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	da07      	bge.n	800159e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800158e:	f06f 0304 	mvn.w	r3, #4
 8001592:	613b      	str	r3, [r7, #16]
                 break;
 8001594:	e010      	b.n	80015b8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001596:	f06f 0301 	mvn.w	r3, #1
 800159a:	613b      	str	r3, [r7, #16]
               break;
 800159c:	e00c      	b.n	80015b8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1dd      	bne.n	8001564 <LAN8742_Init+0xc6>
 80015a8:	e006      	b.n	80015b8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80015aa:	f06f 0304 	mvn.w	r3, #4
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	e002      	b.n	80015b8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80015b2:	f06f 0303 	mvn.w	r3, #3
 80015b6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d112      	bne.n	80015e4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	4798      	blx	r3
 80015c4:	4603      	mov	r3, r0
 80015c6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80015c8:	bf00      	nop
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	4798      	blx	r3
 80015d0:	4603      	mov	r3, r0
 80015d2:	461a      	mov	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80015dc:	d9f5      	bls.n	80015ca <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80015e4:	693b      	ldr	r3, [r7, #16]
 }
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b084      	sub	sp, #16
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6810      	ldr	r0, [r2, #0]
 8001602:	f107 020c 	add.w	r2, r7, #12
 8001606:	2101      	movs	r1, #1
 8001608:	4798      	blx	r3
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	da02      	bge.n	8001616 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001610:	f06f 0304 	mvn.w	r3, #4
 8001614:	e06e      	b.n	80016f4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6810      	ldr	r0, [r2, #0]
 800161e:	f107 020c 	add.w	r2, r7, #12
 8001622:	2101      	movs	r1, #1
 8001624:	4798      	blx	r3
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	da02      	bge.n	8001632 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800162c:	f06f 0304 	mvn.w	r3, #4
 8001630:	e060      	b.n	80016f4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800163c:	2301      	movs	r3, #1
 800163e:	e059      	b.n	80016f4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6810      	ldr	r0, [r2, #0]
 8001648:	f107 020c 	add.w	r2, r7, #12
 800164c:	2100      	movs	r1, #0
 800164e:	4798      	blx	r3
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	da02      	bge.n	800165c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001656:	f06f 0304 	mvn.w	r3, #4
 800165a:	e04b      	b.n	80016f4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d11b      	bne.n	800169e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d006      	beq.n	800167e <LAN8742_GetLinkState+0x90>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800167a:	2302      	movs	r3, #2
 800167c:	e03a      	b.n	80016f4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001688:	2303      	movs	r3, #3
 800168a:	e033      	b.n	80016f4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001696:	2304      	movs	r3, #4
 8001698:	e02c      	b.n	80016f4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800169a:	2305      	movs	r3, #5
 800169c:	e02a      	b.n	80016f4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6810      	ldr	r0, [r2, #0]
 80016a6:	f107 020c 	add.w	r2, r7, #12
 80016aa:	211f      	movs	r1, #31
 80016ac:	4798      	blx	r3
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	da02      	bge.n	80016ba <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80016b4:	f06f 0304 	mvn.w	r3, #4
 80016b8:	e01c      	b.n	80016f4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80016c4:	2306      	movs	r3, #6
 80016c6:	e015      	b.n	80016f4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 031c 	and.w	r3, r3, #28
 80016ce:	2b18      	cmp	r3, #24
 80016d0:	d101      	bne.n	80016d6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80016d2:	2302      	movs	r3, #2
 80016d4:	e00e      	b.n	80016f4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f003 031c 	and.w	r3, r3, #28
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d101      	bne.n	80016e4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e007      	b.n	80016f4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 031c 	and.w	r3, r3, #28
 80016ea:	2b14      	cmp	r3, #20
 80016ec:	d101      	bne.n	80016f2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80016ee:	2304      	movs	r3, #4
 80016f0:	e000      	b.n	80016f4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80016f2:	2305      	movs	r3, #5
    }				
  }
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001700:	4b0e      	ldr	r3, [pc, #56]	; (800173c <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0d      	ldr	r2, [pc, #52]	; (800173c <HAL_Init+0x40>)
 8001706:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800170a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <HAL_Init+0x40>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0a      	ldr	r2, [pc, #40]	; (800173c <HAL_Init+0x40>)
 8001712:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001716:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <HAL_Init+0x40>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a07      	ldr	r2, [pc, #28]	; (800173c <HAL_Init+0x40>)
 800171e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001722:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001724:	2003      	movs	r0, #3
 8001726:	f000 f8fc 	bl	8001922 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800172a:	200f      	movs	r0, #15
 800172c:	f7ff f9c6 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001730:	f7ff f92e 	bl	8000990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023c00 	.word	0x40023c00

08001740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_IncTick+0x20>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_IncTick+0x24>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a04      	ldr	r2, [pc, #16]	; (8001764 <HAL_IncTick+0x24>)
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000008 	.word	0x20000008
 8001764:	200005f4 	.word	0x200005f4

08001768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <HAL_GetTick+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	200005f4 	.word	0x200005f4

08001780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001788:	f7ff ffee 	bl	8001768 <HAL_GetTick>
 800178c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001798:	d005      	beq.n	80017a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_Delay+0x44>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017a6:	bf00      	nop
 80017a8:	f7ff ffde 	bl	8001768 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d8f7      	bhi.n	80017a8 <HAL_Delay+0x28>
  {
  }
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000008 	.word	0x20000008

080017c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e4:	4013      	ands	r3, r2
 80017e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fa:	4a04      	ldr	r2, [pc, #16]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	60d3      	str	r3, [r2, #12]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <__NVIC_GetPriorityGrouping+0x18>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	f003 0307 	and.w	r3, r3, #7
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	2b00      	cmp	r3, #0
 800183c:	db0b      	blt.n	8001856 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	f003 021f 	and.w	r2, r3, #31
 8001844:	4907      	ldr	r1, [pc, #28]	; (8001864 <__NVIC_EnableIRQ+0x38>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	2001      	movs	r0, #1
 800184e:	fa00 f202 	lsl.w	r2, r0, r2
 8001852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000e100 	.word	0xe000e100

08001868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	6039      	str	r1, [r7, #0]
 8001872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	2b00      	cmp	r3, #0
 800187a:	db0a      	blt.n	8001892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	490c      	ldr	r1, [pc, #48]	; (80018b4 <__NVIC_SetPriority+0x4c>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	0112      	lsls	r2, r2, #4
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	440b      	add	r3, r1
 800188c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001890:	e00a      	b.n	80018a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4908      	ldr	r1, [pc, #32]	; (80018b8 <__NVIC_SetPriority+0x50>)
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	3b04      	subs	r3, #4
 80018a0:	0112      	lsls	r2, r2, #4
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	440b      	add	r3, r1
 80018a6:	761a      	strb	r2, [r3, #24]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000e100 	.word	0xe000e100
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b089      	sub	sp, #36	; 0x24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f1c3 0307 	rsb	r3, r3, #7
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	bf28      	it	cs
 80018da:	2304      	movcs	r3, #4
 80018dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3304      	adds	r3, #4
 80018e2:	2b06      	cmp	r3, #6
 80018e4:	d902      	bls.n	80018ec <NVIC_EncodePriority+0x30>
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3b03      	subs	r3, #3
 80018ea:	e000      	b.n	80018ee <NVIC_EncodePriority+0x32>
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	f04f 32ff 	mov.w	r2, #4294967295
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43da      	mvns	r2, r3
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	401a      	ands	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001904:	f04f 31ff 	mov.w	r1, #4294967295
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa01 f303 	lsl.w	r3, r1, r3
 800190e:	43d9      	mvns	r1, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	4313      	orrs	r3, r2
         );
}
 8001916:	4618      	mov	r0, r3
 8001918:	3724      	adds	r7, #36	; 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff ff4c 	bl	80017c8 <__NVIC_SetPriorityGrouping>
}
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
 8001944:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800194a:	f7ff ff61 	bl	8001810 <__NVIC_GetPriorityGrouping>
 800194e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	68b9      	ldr	r1, [r7, #8]
 8001954:	6978      	ldr	r0, [r7, #20]
 8001956:	f7ff ffb1 	bl	80018bc <NVIC_EncodePriority>
 800195a:	4602      	mov	r2, r0
 800195c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001960:	4611      	mov	r1, r2
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff ff80 	bl	8001868 <__NVIC_SetPriority>
}
 8001968:	bf00      	nop
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff ff54 	bl	800182c <__NVIC_EnableIRQ>
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e06c      	b.n	8001a78 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d106      	bne.n	80019b6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2223      	movs	r2, #35	; 0x23
 80019ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f003 f9d1 	bl	8004d58 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	4b31      	ldr	r3, [pc, #196]	; (8001a80 <HAL_ETH_Init+0xf4>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	4a30      	ldr	r2, [pc, #192]	; (8001a80 <HAL_ETH_Init+0xf4>)
 80019c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c4:	6453      	str	r3, [r2, #68]	; 0x44
 80019c6:	4b2e      	ldr	r3, [pc, #184]	; (8001a80 <HAL_ETH_Init+0xf4>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80019d2:	4b2c      	ldr	r3, [pc, #176]	; (8001a84 <HAL_ETH_Init+0xf8>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	4a2b      	ldr	r2, [pc, #172]	; (8001a84 <HAL_ETH_Init+0xf8>)
 80019d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80019dc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80019de:	4b29      	ldr	r3, [pc, #164]	; (8001a84 <HAL_ETH_Init+0xf8>)
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	4927      	ldr	r1, [pc, #156]	; (8001a84 <HAL_ETH_Init+0xf8>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80019ec:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <HAL_ETH_Init+0xf8>)
 80019ee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6812      	ldr	r2, [r2, #0]
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a06:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a08:	f7ff feae 	bl	8001768 <HAL_GetTick>
 8001a0c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a0e:	e011      	b.n	8001a34 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001a10:	f7ff feaa 	bl	8001768 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a1e:	d909      	bls.n	8001a34 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2204      	movs	r2, #4
 8001a24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	22e0      	movs	r2, #224	; 0xe0
 8001a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e021      	b.n	8001a78 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1e4      	bne.n	8001a10 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 ff4a 	bl	80028e0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 fff1 	bl	8002a34 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f001 f847 	bl	8002ae6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	2100      	movs	r1, #0
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 ffaf 	bl	80029c4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2210      	movs	r2, #16
 8001a72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40013800 	.word	0x40013800

08001a88 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a96:	2b10      	cmp	r3, #16
 8001a98:	d17f      	bne.n	8001b9a <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2223      	movs	r2, #35	; 0x23
 8001a9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001ab6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6812      	ldr	r2, [r2, #0]
 8001ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001acc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001ae0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f9f8 	bl	8001ee0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0208 	orr.w	r2, r2, #8
 8001afe:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b08:	2001      	movs	r0, #1
 8001b0a:	f7ff fe39 	bl	8001780 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f042 0204 	orr.w	r2, r2, #4
 8001b24:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b2e:	2001      	movs	r0, #1
 8001b30:	f7ff fe26 	bl	8001780 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 fd70 	bl	8002622 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b58:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	f043 0302 	orr.w	r3, r3, #2
 8001b6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b70:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8001b84:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8001b88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b8c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2223      	movs	r2, #35	; 0x23
 8001b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	e000      	b.n	8001b9c <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
  }
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bb2:	2b23      	cmp	r3, #35	; 0x23
 8001bb4:	d170      	bne.n	8001c98 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2223      	movs	r2, #35	; 0x23
 8001bba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 8001bd0:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8001bd4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bd8:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6812      	ldr	r2, [r2, #0]
 8001be8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001bec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bf0:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	f023 0302 	bic.w	r3, r3, #2
 8001c04:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c08:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0204 	bic.w	r2, r2, #4
 8001c18:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c22:	2001      	movs	r0, #1
 8001c24:	f7ff fdac 	bl	8001780 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 fcf6 	bl	8002622 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0208 	bic.w	r2, r2, #8
 8001c44:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c4e:	2001      	movs	r0, #1
 8001c50:	f7ff fd96 	bl	8001780 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	e00e      	b.n	8001c80 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	3212      	adds	r2, #18
 8001c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	2b03      	cmp	r3, #3
 8001c84:	d9ed      	bls.n	8001c62 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2210      	movs	r2, #16
 8001c90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	e000      	b.n	8001c9a <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
  }
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d109      	bne.n	8001cc6 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb8:	f043 0201 	orr.w	r2, r3, #1
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e045      	b.n	8001d52 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ccc:	2b23      	cmp	r3, #35	; 0x23
 8001cce:	d13f      	bne.n	8001d50 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	6839      	ldr	r1, [r7, #0]
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 ff6f 	bl	8002bc0 <ETH_Prepare_Tx_Descriptors>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d009      	beq.n	8001cfc <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cee:	f043 0202 	orr.w	r2, r3, #2
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e02a      	b.n	8001d52 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001cfc:	f3bf 8f4f 	dsb	sy
}
 8001d00:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	629a      	str	r2, [r3, #40]	; 0x28
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d904      	bls.n	8001d1e <HAL_ETH_Transmit_IT+0x7c>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d18:	1f1a      	subs	r2, r3, #4
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00d      	beq.n	8001d4c <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d38:	461a      	mov	r2, r3
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d46:	461a      	mov	r2, r3
 8001d48:	2300      	movs	r3, #0
 8001d4a:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	e000      	b.n	8001d52 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
  }
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b088      	sub	sp, #32
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d109      	bne.n	8001d86 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d78:	f043 0201 	orr.w	r2, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e0a8      	b.n	8001ed8 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d8c:	2b23      	cmp	r3, #35	; 0x23
 8001d8e:	d001      	beq.n	8001d94 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0a1      	b.n	8001ed8 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d98:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69fa      	ldr	r2, [r7, #28]
 8001d9e:	3212      	adds	r2, #18
 8001da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da4:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001daa:	f1c3 0304 	rsb	r3, r3, #4
 8001dae:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001db0:	e06a      	b.n	8001e88 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d007      	beq.n	8001dce <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	699a      	ldr	r2, [r3, #24]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	69da      	ldr	r2, [r3, #28]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d103      	bne.n	8001de2 <HAL_ETH_ReadData+0x88>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d040      	beq.n	8001e64 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d005      	beq.n	8001dfa <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00c      	beq.n	8001e26 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	0c1b      	lsrs	r3, r3, #16
 8001e12:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001e16:	3b04      	subs	r3, #4
 8001e18:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001e22:	2301      	movs	r3, #1
 8001e24:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001e3e:	461a      	mov	r2, r3
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	f003 f962 	bl	800510c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4c:	1c5a      	adds	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	441a      	add	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	2200      	movs	r2, #0
 8001e62:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	3301      	adds	r3, #1
 8001e68:	61fb      	str	r3, [r7, #28]
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d902      	bls.n	8001e76 <HAL_ETH_ReadData+0x11c>
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	3b04      	subs	r3, #4
 8001e74:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69fa      	ldr	r2, [r7, #28]
 8001e7a:	3212      	adds	r2, #18
 8001e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e80:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	3301      	adds	r3, #1
 8001e86:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	db06      	blt.n	8001e9e <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d202      	bcs.n	8001e9e <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d089      	beq.n	8001db2 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	441a      	add	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f814 	bl	8001ee0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69fa      	ldr	r2, [r7, #28]
 8001ebc:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d108      	bne.n	8001ed6 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e000      	b.n	8001ed8 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3720      	adds	r7, #32
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001eec:	2301      	movs	r3, #1
 8001eee:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ef4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69fa      	ldr	r2, [r7, #28]
 8001efa:	3212      	adds	r2, #18
 8001efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f00:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f06:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001f08:	e040      	b.n	8001f8c <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d112      	bne.n	8001f38 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001f12:	f107 030c 	add.w	r3, r7, #12
 8001f16:	4618      	mov	r0, r3
 8001f18:	f003 f8c8 	bl	80050ac <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d102      	bne.n	8001f28 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	74fb      	strb	r3, [r7, #19]
 8001f26:	e007      	b.n	8001f38 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	461a      	mov	r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001f38:	7cfb      	ldrb	r3, [r7, #19]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d026      	beq.n	8001f8c <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d103      	bne.n	8001f4e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	4a1e      	ldr	r2, [pc, #120]	; (8001fc4 <ETH_UpdateDescriptor+0xe4>)
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	e003      	b.n	8001f56 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001f54:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001f56:	f3bf 8f5f 	dmb	sy
}
 8001f5a:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	d902      	bls.n	8001f7a <ETH_UpdateDescriptor+0x9a>
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	3b04      	subs	r3, #4
 8001f78:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69fa      	ldr	r2, [r7, #28]
 8001f7e:	3212      	adds	r2, #18
 8001f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f84:	617b      	str	r3, [r7, #20]
      desccount--;
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d002      	beq.n	8001f98 <ETH_UpdateDescriptor+0xb8>
 8001f92:	7cfb      	ldrb	r3, [r7, #19]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1b8      	bne.n	8001f0a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d00c      	beq.n	8001fbc <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001faa:	461a      	mov	r2, r3
 8001fac:	2300      	movs	r3, #0
 8001fae:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	3720      	adds	r7, #32
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	80004600 	.word	0x80004600

08001fc8 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3318      	adds	r3, #24
 8001fd4:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fda:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe0:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001fe6:	e03f      	b.n	8002068 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d106      	bne.n	8002010 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	3301      	adds	r3, #1
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800200c:	2300      	movs	r3, #0
 800200e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002010:	7bbb      	ldrb	r3, [r7, #14]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d028      	beq.n	8002068 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68d9      	ldr	r1, [r3, #12]
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	440b      	add	r3, r1
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	db1b      	blt.n	8002064 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	3304      	adds	r3, #4
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	4618      	mov	r0, r3
 800203a:	f003 f8a7 	bl	800518c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	3304      	adds	r3, #4
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	2200      	movs	r2, #0
 800204a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	3301      	adds	r3, #1
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	62da      	str	r2, [r3, #44]	; 0x2c
 8002062:	e001      	b.n	8002068 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d002      	beq.n	8002074 <HAL_ETH_ReleaseTxPacket+0xac>
 800206e:	7bfb      	ldrb	r3, [r7, #15]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1b9      	bne.n	8001fe8 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002096:	2b40      	cmp	r3, #64	; 0x40
 8002098:	d112      	bne.n	80020c0 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a8:	2b40      	cmp	r3, #64	; 0x40
 80020aa:	d109      	bne.n	80020c0 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b50      	ldr	r3, [pc, #320]	; (80021f8 <HAL_ETH_IRQHandler+0x178>)
 80020b8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f002 fbb0 	bl	8004820 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d113      	bne.n	80020fa <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d10a      	bne.n	80020fa <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ec:	461a      	mov	r2, r3
 80020ee:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80020f2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f002 fba3 	bl	8004840 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800210c:	d14c      	bne.n	80021a8 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800211c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002120:	d142      	bne.n	80021a8 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002128:	f043 0208 	orr.w	r2, r3, #8
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002140:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002144:	d11a      	bne.n	800217c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800214e:	695a      	ldr	r2, [r3, #20]
 8002150:	4b2a      	ldr	r3, [pc, #168]	; (80021fc <HAL_ETH_IRQHandler+0x17c>)
 8002152:	4013      	ands	r3, r2
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 800216c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002170:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	22e0      	movs	r2, #224	; 0xe0
 8002176:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800217a:	e012      	b.n	80021a2 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002184:	695a      	ldr	r2, [r3, #20]
 8002186:	f248 6380 	movw	r3, #34432	; 0x8680
 800218a:	4013      	ands	r3, r2
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800219a:	461a      	mov	r2, r3
 800219c:	f248 6380 	movw	r3, #34432	; 0x8680
 80021a0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f002 fb5c 	bl	8004860 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d10e      	bne.n	80021d4 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f81c 	bl	8002204 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80021d4:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <HAL_ETH_IRQHandler+0x180>)
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d006      	beq.n	80021ee <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80021e0:	4b07      	ldr	r3, [pc, #28]	; (8002200 <HAL_ETH_IRQHandler+0x180>)
 80021e2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80021e6:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f815 	bl	8002218 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	00010040 	.word	0x00010040
 80021fc:	007e2000 	.word	0x007e2000
 8002200:	40013c00 	.word	0x40013c00

08002204 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f003 031c 	and.w	r3, r3, #28
 8002248:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	02db      	lsls	r3, r3, #11
 800224e:	b29b      	uxth	r3, r3
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	4313      	orrs	r3, r2
 8002254:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	019b      	lsls	r3, r3, #6
 800225a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	4313      	orrs	r3, r2
 8002262:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f023 0302 	bic.w	r3, r3, #2
 800226a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800227c:	f7ff fa74 	bl	8001768 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002282:	e00d      	b.n	80022a0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002284:	f7ff fa70 	bl	8001768 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002292:	d301      	bcc.n	8002298 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e010      	b.n	80022ba <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1ec      	bne.n	8002284 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	461a      	mov	r2, r3
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b086      	sub	sp, #24
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	60f8      	str	r0, [r7, #12]
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f003 031c 	and.w	r3, r3, #28
 80022de:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	02db      	lsls	r3, r3, #11
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	019b      	lsls	r3, r3, #6
 80022f0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f043 0302 	orr.w	r3, r3, #2
 8002300:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800231c:	f7ff fa24 	bl	8001768 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002322:	e00d      	b.n	8002340 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002324:	f7ff fa20 	bl	8001768 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002332:	d301      	bcc.n	8002338 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e009      	b.n	800234c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1ec      	bne.n	8002324 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0d9      	b.n	800251c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0310 	and.w	r3, r3, #16
 8002372:	2b00      	cmp	r3, #0
 8002374:	bf14      	ite	ne
 8002376:	2301      	movne	r3, #1
 8002378:	2300      	moveq	r3, #0
 800237a:	b2db      	uxtb	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf0c      	ite	eq
 80023a0:	2301      	moveq	r3, #1
 80023a2:	2300      	movne	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	461a      	mov	r2, r3
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf14      	ite	ne
 80023bc:	2301      	movne	r3, #1
 80023be:	2300      	moveq	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	bf0c      	ite	eq
 80023d6:	2301      	moveq	r3, #1
 80023d8:	2300      	movne	r3, #0
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	bf14      	ite	ne
 80023f0:	2301      	movne	r3, #1
 80023f2:	2300      	moveq	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	461a      	mov	r2, r3
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002422:	2b00      	cmp	r3, #0
 8002424:	bf0c      	ite	eq
 8002426:	2301      	moveq	r3, #1
 8002428:	2300      	movne	r3, #0
 800242a:	b2db      	uxtb	r3, r3
 800242c:	461a      	mov	r2, r3
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800243c:	2b00      	cmp	r3, #0
 800243e:	bf0c      	ite	eq
 8002440:	2301      	moveq	r3, #1
 8002442:	2300      	movne	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	461a      	mov	r2, r3
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002456:	2b00      	cmp	r3, #0
 8002458:	bf14      	ite	ne
 800245a:	2301      	movne	r3, #1
 800245c:	2300      	moveq	r3, #0
 800245e:	b2db      	uxtb	r3, r3
 8002460:	461a      	mov	r2, r3
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247e:	2b00      	cmp	r3, #0
 8002480:	bf14      	ite	ne
 8002482:	2301      	movne	r3, #1
 8002484:	2300      	moveq	r3, #0
 8002486:	b2db      	uxtb	r3, r3
 8002488:	461a      	mov	r2, r3
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	bf14      	ite	ne
 800249c:	2301      	movne	r3, #1
 800249e:	2300      	moveq	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	bf0c      	ite	eq
 80024b8:	2301      	moveq	r3, #1
 80024ba:	2300      	movne	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	461a      	mov	r2, r3
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	0c1b      	lsrs	r3, r3, #16
 80024dc:	b29a      	uxth	r2, r3
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	bf14      	ite	ne
 80024f0:	2301      	movne	r3, #1
 80024f2:	2300      	moveq	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf14      	ite	ne
 800250c:	2301      	movne	r3, #1
 800250e:	2300      	moveq	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e00b      	b.n	8002554 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002542:	2b10      	cmp	r3, #16
 8002544:	d105      	bne.n	8002552 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002546:	6839      	ldr	r1, [r7, #0]
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f88f 	bl	800266c <ETH_SetMACConfig>

    return HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	e000      	b.n	8002554 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
  }
}
 8002554:	4618      	mov	r0, r3
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f023 031c 	bic.w	r3, r3, #28
 8002572:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002574:	f001 fa9c 	bl	8003ab0 <HAL_RCC_GetHCLKFreq>
 8002578:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	4a1d      	ldr	r2, [pc, #116]	; (80025f4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d908      	bls.n	8002594 <HAL_ETH_SetMDIOClockRange+0x38>
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	4a1c      	ldr	r2, [pc, #112]	; (80025f8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d804      	bhi.n	8002594 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f043 0308 	orr.w	r3, r3, #8
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	e027      	b.n	80025e4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	4a18      	ldr	r2, [pc, #96]	; (80025f8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d908      	bls.n	80025ae <HAL_ETH_SetMDIOClockRange+0x52>
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	4a17      	ldr	r2, [pc, #92]	; (80025fc <HAL_ETH_SetMDIOClockRange+0xa0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d204      	bcs.n	80025ae <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f043 030c 	orr.w	r3, r3, #12
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	e01a      	b.n	80025e4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	4a12      	ldr	r2, [pc, #72]	; (80025fc <HAL_ETH_SetMDIOClockRange+0xa0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d303      	bcc.n	80025be <HAL_ETH_SetMDIOClockRange+0x62>
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	4a11      	ldr	r2, [pc, #68]	; (8002600 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d911      	bls.n	80025e2 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	4a0f      	ldr	r2, [pc, #60]	; (8002600 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d908      	bls.n	80025d8 <HAL_ETH_SetMDIOClockRange+0x7c>
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	4a0e      	ldr	r2, [pc, #56]	; (8002604 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d804      	bhi.n	80025d8 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f043 0304 	orr.w	r3, r3, #4
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	e005      	b.n	80025e4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f043 0310 	orr.w	r3, r3, #16
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	e000      	b.n	80025e4 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80025e2:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	611a      	str	r2, [r3, #16]
}
 80025ec:	bf00      	nop
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	01312cff 	.word	0x01312cff
 80025f8:	02160ebf 	.word	0x02160ebf
 80025fc:	03938700 	.word	0x03938700
 8002600:	05f5e0ff 	.word	0x05f5e0ff
 8002604:	08f0d17f 	.word	0x08f0d17f

08002608 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002616:	4618      	mov	r0, r3
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b084      	sub	sp, #16
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800262a:	2300      	movs	r3, #0
 800262c:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6812      	ldr	r2, [r2, #0]
 800263c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002640:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002644:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002652:	2001      	movs	r0, #1
 8002654:	f7ff f894 	bl	8001780 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002662:	6193      	str	r3, [r2, #24]
}
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4b51      	ldr	r3, [pc, #324]	; (80027c8 <ETH_SetMACConfig+0x15c>)
 8002682:	4013      	ands	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	7c1b      	ldrb	r3, [r3, #16]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d102      	bne.n	8002694 <ETH_SetMACConfig+0x28>
 800268e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002692:	e000      	b.n	8002696 <ETH_SetMACConfig+0x2a>
 8002694:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	7c5b      	ldrb	r3, [r3, #17]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d102      	bne.n	80026a4 <ETH_SetMACConfig+0x38>
 800269e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026a2:	e000      	b.n	80026a6 <ETH_SetMACConfig+0x3a>
 80026a4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026a6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80026ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	7fdb      	ldrb	r3, [r3, #31]
 80026b2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80026b4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80026ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	7f92      	ldrb	r2, [r2, #30]
 80026c0:	2a00      	cmp	r2, #0
 80026c2:	d102      	bne.n	80026ca <ETH_SetMACConfig+0x5e>
 80026c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026c8:	e000      	b.n	80026cc <ETH_SetMACConfig+0x60>
 80026ca:	2200      	movs	r2, #0
                        macconf->Speed |
 80026cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	7f1b      	ldrb	r3, [r3, #28]
 80026d2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80026d4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	791b      	ldrb	r3, [r3, #4]
 80026e0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80026e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80026ea:	2a00      	cmp	r2, #0
 80026ec:	d102      	bne.n	80026f4 <ETH_SetMACConfig+0x88>
 80026ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026f2:	e000      	b.n	80026f6 <ETH_SetMACConfig+0x8a>
 80026f4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	7bdb      	ldrb	r3, [r3, #15]
 80026fc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026fe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002704:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800270c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800270e:	4313      	orrs	r3, r2
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002726:	2001      	movs	r0, #1
 8002728:	f7ff f82a 	bl	8001780 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002742:	4013      	ands	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800274a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002752:	2a00      	cmp	r2, #0
 8002754:	d101      	bne.n	800275a <ETH_SetMACConfig+0xee>
 8002756:	2280      	movs	r2, #128	; 0x80
 8002758:	e000      	b.n	800275c <ETH_SetMACConfig+0xf0>
 800275a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800275c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002762:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800276a:	2a01      	cmp	r2, #1
 800276c:	d101      	bne.n	8002772 <ETH_SetMACConfig+0x106>
 800276e:	2208      	movs	r2, #8
 8002770:	e000      	b.n	8002774 <ETH_SetMACConfig+0x108>
 8002772:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002774:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800277c:	2a01      	cmp	r2, #1
 800277e:	d101      	bne.n	8002784 <ETH_SetMACConfig+0x118>
 8002780:	2204      	movs	r2, #4
 8002782:	e000      	b.n	8002786 <ETH_SetMACConfig+0x11a>
 8002784:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002786:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800278e:	2a01      	cmp	r2, #1
 8002790:	d101      	bne.n	8002796 <ETH_SetMACConfig+0x12a>
 8002792:	2202      	movs	r2, #2
 8002794:	e000      	b.n	8002798 <ETH_SetMACConfig+0x12c>
 8002796:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002798:	4313      	orrs	r3, r2
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	4313      	orrs	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027b0:	2001      	movs	r0, #1
 80027b2:	f7fe ffe5 	bl	8001780 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	619a      	str	r2, [r3, #24]
}
 80027be:	bf00      	nop
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	ff20810f 	.word	0xff20810f

080027cc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4b3d      	ldr	r3, [pc, #244]	; (80028dc <ETH_SetDMAConfig+0x110>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	7b1b      	ldrb	r3, [r3, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d102      	bne.n	80027f8 <ETH_SetDMAConfig+0x2c>
 80027f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027f6:	e000      	b.n	80027fa <ETH_SetDMAConfig+0x2e>
 80027f8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	7b5b      	ldrb	r3, [r3, #13]
 80027fe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002800:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	7f52      	ldrb	r2, [r2, #29]
 8002806:	2a00      	cmp	r2, #0
 8002808:	d102      	bne.n	8002810 <ETH_SetDMAConfig+0x44>
 800280a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800280e:	e000      	b.n	8002812 <ETH_SetDMAConfig+0x46>
 8002810:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002812:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	7b9b      	ldrb	r3, [r3, #14]
 8002818:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800281a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002820:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	7f1b      	ldrb	r3, [r3, #28]
 8002826:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002828:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	7f9b      	ldrb	r3, [r3, #30]
 800282e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002830:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002836:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800283e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002840:	4313      	orrs	r3, r2
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4313      	orrs	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002850:	461a      	mov	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002862:	2001      	movs	r0, #1
 8002864:	f7fe ff8c 	bl	8001780 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002870:	461a      	mov	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	791b      	ldrb	r3, [r3, #4]
 800287a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002880:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002886:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800288c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002894:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002896:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800289e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80028a4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028b2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028c0:	2001      	movs	r0, #1
 80028c2:	f7fe ff5d 	bl	8001780 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ce:	461a      	mov	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6013      	str	r3, [r2, #0]
}
 80028d4:	bf00      	nop
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	f8de3f23 	.word	0xf8de3f23

080028e0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b0a6      	sub	sp, #152	; 0x98
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80028e8:	2301      	movs	r3, #1
 80028ea:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80028ee:	2301      	movs	r3, #1
 80028f0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80028f4:	2300      	movs	r3, #0
 80028f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80028f8:	2300      	movs	r3, #0
 80028fa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80028fe:	2301      	movs	r3, #1
 8002900:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002904:	2300      	movs	r3, #0
 8002906:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800290a:	2301      	movs	r3, #1
 800290c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002910:	2300      	movs	r3, #0
 8002912:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002916:	2300      	movs	r3, #0
 8002918:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800291c:	2300      	movs	r3, #0
 800291e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002920:	2300      	movs	r3, #0
 8002922:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002926:	2300      	movs	r3, #0
 8002928:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800292a:	2300      	movs	r3, #0
 800292c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002930:	2300      	movs	r3, #0
 8002932:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002936:	2300      	movs	r3, #0
 8002938:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800293c:	2300      	movs	r3, #0
 800293e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002942:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002946:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002948:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800294c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800294e:	2300      	movs	r3, #0
 8002950:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002954:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002958:	4619      	mov	r1, r3
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff fe86 	bl	800266c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002960:	2301      	movs	r3, #1
 8002962:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002964:	2301      	movs	r3, #1
 8002966:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002968:	2301      	movs	r3, #1
 800296a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800296e:	2301      	movs	r3, #1
 8002970:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002976:	2300      	movs	r3, #0
 8002978:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800297c:	2300      	movs	r3, #0
 800297e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002982:	2300      	movs	r3, #0
 8002984:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002986:	2301      	movs	r3, #1
 8002988:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800298c:	2301      	movs	r3, #1
 800298e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002990:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002994:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002996:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800299a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800299c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029a0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80029a2:	2301      	movs	r3, #1
 80029a4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80029b0:	f107 0308 	add.w	r3, r7, #8
 80029b4:	4619      	mov	r1, r3
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff ff08 	bl	80027cc <ETH_SetDMAConfig>
}
 80029bc:	bf00      	nop
 80029be:	3798      	adds	r7, #152	; 0x98
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3305      	adds	r3, #5
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	021b      	lsls	r3, r3, #8
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	3204      	adds	r2, #4
 80029dc:	7812      	ldrb	r2, [r2, #0]
 80029de:	4313      	orrs	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <ETH_MACAddressConfig+0x68>)
 80029e6:	4413      	add	r3, r2
 80029e8:	461a      	mov	r2, r3
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3303      	adds	r3, #3
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	061a      	lsls	r2, r3, #24
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3302      	adds	r3, #2
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	041b      	lsls	r3, r3, #16
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3301      	adds	r3, #1
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	7812      	ldrb	r2, [r2, #0]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <ETH_MACAddressConfig+0x6c>)
 8002a16:	4413      	add	r3, r2
 8002a18:	461a      	mov	r2, r3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	6013      	str	r3, [r2, #0]
}
 8002a1e:	bf00      	nop
 8002a20:	371c      	adds	r7, #28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40028040 	.word	0x40028040
 8002a30:	40028044 	.word	0x40028044

08002a34 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	e03e      	b.n	8002ac0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68d9      	ldr	r1, [r3, #12]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	440b      	add	r3, r1
 8002a52:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	3206      	adds	r2, #6
 8002a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d80c      	bhi.n	8002aa4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68d9      	ldr	r1, [r3, #12]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	440b      	add	r3, r1
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	e004      	b.n	8002aae <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	3301      	adds	r3, #1
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d9bd      	bls.n	8002a42 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ad8:	611a      	str	r2, [r3, #16]
}
 8002ada:	bf00      	nop
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b085      	sub	sp, #20
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	e046      	b.n	8002b82 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6919      	ldr	r1, [r3, #16]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	440b      	add	r3, r1
 8002b04:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2200      	movs	r2, #0
 8002b16:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2200      	movs	r2, #0
 8002b22:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2200      	movs	r2, #0
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002b30:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002b38:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b46:	68b9      	ldr	r1, [r7, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	3212      	adds	r2, #18
 8002b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d80c      	bhi.n	8002b72 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6919      	ldr	r1, [r3, #16]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	1c5a      	adds	r2, r3, #1
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	440b      	add	r3, r1
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	60da      	str	r2, [r3, #12]
 8002b70:	e004      	b.n	8002b7c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	461a      	mov	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d9b5      	bls.n	8002af4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bb2:	60da      	str	r2, [r3, #12]
}
 8002bb4:	bf00      	nop
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b08d      	sub	sp, #52	; 0x34
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	3318      	adds	r3, #24
 8002bd0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bea:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c02:	d007      	beq.n	8002c14 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c08:	3304      	adds	r3, #4
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002c14:	2302      	movs	r3, #2
 8002c16:	e103      	b.n	8002e20 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002c30:	f023 031f 	bic.w	r3, r3, #31
 8002c34:	69fa      	ldr	r2, [r7, #28]
 8002c36:	6852      	ldr	r2, [r2, #4]
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d008      	beq.n	8002c5c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	431a      	orrs	r2, r3
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0320 	and.w	r3, r3, #32
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	431a      	orrs	r2, r3
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d005      	beq.n	8002c92 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002c9e:	f3bf 8f5f 	dmb	sy
}
 8002ca2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002cb0:	e084      	b.n	8002dbc <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d006      	beq.n	8002cd2 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	e005      	b.n	8002cde <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	d902      	bls.n	8002cf0 <ETH_Prepare_Tx_Descriptors+0x130>
 8002cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cec:	3b04      	subs	r3, #4
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d12:	d007      	beq.n	8002d24 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d18:	3304      	adds	r3, #4
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d029      	beq.n	8002d78 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d30:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002d32:	2300      	movs	r3, #0
 8002d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d36:	e019      	b.n	8002d6c <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002d38:	f3bf 8f5f 	dmb	sy
}
 8002d3c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d902      	bls.n	8002d5c <ETH_Prepare_Tx_Descriptors+0x19c>
 8002d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d58:	3b04      	subs	r3, #4
 8002d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d64:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d68:	3301      	adds	r3, #1
 8002d6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d3e1      	bcc.n	8002d38 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002d74:	2302      	movs	r3, #2
 8002d76:	e053      	b.n	8002e20 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002d96:	f023 031f 	bic.w	r3, r3, #31
 8002d9a:	69fa      	ldr	r2, [r7, #28]
 8002d9c:	6852      	ldr	r2, [r2, #4]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	3301      	adds	r3, #1
 8002da8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002daa:	f3bf 8f5f 	dmb	sy
}
 8002dae:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f47f af76 	bne.w	8002cb2 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d006      	beq.n	8002dda <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	e005      	b.n	8002de6 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002df6:	6979      	ldr	r1, [r7, #20]
 8002df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e06:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e08:	b672      	cpsid	i
}
 8002e0a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	4413      	add	r3, r2
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002e1a:	b662      	cpsie	i
}
 8002e1c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3734      	adds	r7, #52	; 0x34
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b089      	sub	sp, #36	; 0x24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e42:	2300      	movs	r3, #0
 8002e44:	61fb      	str	r3, [r7, #28]
 8002e46:	e177      	b.n	8003138 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e48:	2201      	movs	r2, #1
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	f040 8166 	bne.w	8003132 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d005      	beq.n	8002e7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d130      	bne.n	8002ee0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	2203      	movs	r2, #3
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4013      	ands	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f003 0201 	and.w	r2, r3, #1
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 0303 	and.w	r3, r3, #3
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d017      	beq.n	8002f1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d123      	bne.n	8002f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	08da      	lsrs	r2, r3, #3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3208      	adds	r2, #8
 8002f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	220f      	movs	r2, #15
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	08da      	lsrs	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3208      	adds	r2, #8
 8002f6a:	69b9      	ldr	r1, [r7, #24]
 8002f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 0203 	and.w	r2, r3, #3
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80c0 	beq.w	8003132 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	4b66      	ldr	r3, [pc, #408]	; (8003150 <HAL_GPIO_Init+0x324>)
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	4a65      	ldr	r2, [pc, #404]	; (8003150 <HAL_GPIO_Init+0x324>)
 8002fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fc2:	4b63      	ldr	r3, [pc, #396]	; (8003150 <HAL_GPIO_Init+0x324>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fce:	4a61      	ldr	r2, [pc, #388]	; (8003154 <HAL_GPIO_Init+0x328>)
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	089b      	lsrs	r3, r3, #2
 8002fd4:	3302      	adds	r3, #2
 8002fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	220f      	movs	r2, #15
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a58      	ldr	r2, [pc, #352]	; (8003158 <HAL_GPIO_Init+0x32c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d037      	beq.n	800306a <HAL_GPIO_Init+0x23e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a57      	ldr	r2, [pc, #348]	; (800315c <HAL_GPIO_Init+0x330>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d031      	beq.n	8003066 <HAL_GPIO_Init+0x23a>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a56      	ldr	r2, [pc, #344]	; (8003160 <HAL_GPIO_Init+0x334>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d02b      	beq.n	8003062 <HAL_GPIO_Init+0x236>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a55      	ldr	r2, [pc, #340]	; (8003164 <HAL_GPIO_Init+0x338>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d025      	beq.n	800305e <HAL_GPIO_Init+0x232>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a54      	ldr	r2, [pc, #336]	; (8003168 <HAL_GPIO_Init+0x33c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d01f      	beq.n	800305a <HAL_GPIO_Init+0x22e>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a53      	ldr	r2, [pc, #332]	; (800316c <HAL_GPIO_Init+0x340>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d019      	beq.n	8003056 <HAL_GPIO_Init+0x22a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a52      	ldr	r2, [pc, #328]	; (8003170 <HAL_GPIO_Init+0x344>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d013      	beq.n	8003052 <HAL_GPIO_Init+0x226>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a51      	ldr	r2, [pc, #324]	; (8003174 <HAL_GPIO_Init+0x348>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d00d      	beq.n	800304e <HAL_GPIO_Init+0x222>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a50      	ldr	r2, [pc, #320]	; (8003178 <HAL_GPIO_Init+0x34c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d007      	beq.n	800304a <HAL_GPIO_Init+0x21e>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a4f      	ldr	r2, [pc, #316]	; (800317c <HAL_GPIO_Init+0x350>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d101      	bne.n	8003046 <HAL_GPIO_Init+0x21a>
 8003042:	2309      	movs	r3, #9
 8003044:	e012      	b.n	800306c <HAL_GPIO_Init+0x240>
 8003046:	230a      	movs	r3, #10
 8003048:	e010      	b.n	800306c <HAL_GPIO_Init+0x240>
 800304a:	2308      	movs	r3, #8
 800304c:	e00e      	b.n	800306c <HAL_GPIO_Init+0x240>
 800304e:	2307      	movs	r3, #7
 8003050:	e00c      	b.n	800306c <HAL_GPIO_Init+0x240>
 8003052:	2306      	movs	r3, #6
 8003054:	e00a      	b.n	800306c <HAL_GPIO_Init+0x240>
 8003056:	2305      	movs	r3, #5
 8003058:	e008      	b.n	800306c <HAL_GPIO_Init+0x240>
 800305a:	2304      	movs	r3, #4
 800305c:	e006      	b.n	800306c <HAL_GPIO_Init+0x240>
 800305e:	2303      	movs	r3, #3
 8003060:	e004      	b.n	800306c <HAL_GPIO_Init+0x240>
 8003062:	2302      	movs	r3, #2
 8003064:	e002      	b.n	800306c <HAL_GPIO_Init+0x240>
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <HAL_GPIO_Init+0x240>
 800306a:	2300      	movs	r3, #0
 800306c:	69fa      	ldr	r2, [r7, #28]
 800306e:	f002 0203 	and.w	r2, r2, #3
 8003072:	0092      	lsls	r2, r2, #2
 8003074:	4093      	lsls	r3, r2
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4313      	orrs	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800307c:	4935      	ldr	r1, [pc, #212]	; (8003154 <HAL_GPIO_Init+0x328>)
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	089b      	lsrs	r3, r3, #2
 8003082:	3302      	adds	r3, #2
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800308a:	4b3d      	ldr	r3, [pc, #244]	; (8003180 <HAL_GPIO_Init+0x354>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	43db      	mvns	r3, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4013      	ands	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030ae:	4a34      	ldr	r2, [pc, #208]	; (8003180 <HAL_GPIO_Init+0x354>)
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030b4:	4b32      	ldr	r3, [pc, #200]	; (8003180 <HAL_GPIO_Init+0x354>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030d8:	4a29      	ldr	r2, [pc, #164]	; (8003180 <HAL_GPIO_Init+0x354>)
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030de:	4b28      	ldr	r3, [pc, #160]	; (8003180 <HAL_GPIO_Init+0x354>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	43db      	mvns	r3, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4013      	ands	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003102:	4a1f      	ldr	r2, [pc, #124]	; (8003180 <HAL_GPIO_Init+0x354>)
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003108:	4b1d      	ldr	r3, [pc, #116]	; (8003180 <HAL_GPIO_Init+0x354>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	43db      	mvns	r3, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4013      	ands	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800312c:	4a14      	ldr	r2, [pc, #80]	; (8003180 <HAL_GPIO_Init+0x354>)
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3301      	adds	r3, #1
 8003136:	61fb      	str	r3, [r7, #28]
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	2b0f      	cmp	r3, #15
 800313c:	f67f ae84 	bls.w	8002e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003140:	bf00      	nop
 8003142:	bf00      	nop
 8003144:	3724      	adds	r7, #36	; 0x24
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40023800 	.word	0x40023800
 8003154:	40013800 	.word	0x40013800
 8003158:	40020000 	.word	0x40020000
 800315c:	40020400 	.word	0x40020400
 8003160:	40020800 	.word	0x40020800
 8003164:	40020c00 	.word	0x40020c00
 8003168:	40021000 	.word	0x40021000
 800316c:	40021400 	.word	0x40021400
 8003170:	40021800 	.word	0x40021800
 8003174:	40021c00 	.word	0x40021c00
 8003178:	40022000 	.word	0x40022000
 800317c:	40022400 	.word	0x40022400
 8003180:	40013c00 	.word	0x40013c00

08003184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	887b      	ldrh	r3, [r7, #2]
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800319c:	2301      	movs	r3, #1
 800319e:	73fb      	strb	r3, [r7, #15]
 80031a0:	e001      	b.n	80031a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031a2:	2300      	movs	r3, #0
 80031a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	807b      	strh	r3, [r7, #2]
 80031c0:	4613      	mov	r3, r2
 80031c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031c4:	787b      	ldrb	r3, [r7, #1]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031ca:	887a      	ldrh	r2, [r7, #2]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031d0:	e003      	b.n	80031da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031d2:	887b      	ldrh	r3, [r7, #2]
 80031d4:	041a      	lsls	r2, r3, #16
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	619a      	str	r2, [r3, #24]
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
	...

080031e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e267      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d075      	beq.n	80032f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003206:	4b88      	ldr	r3, [pc, #544]	; (8003428 <HAL_RCC_OscConfig+0x240>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	2b04      	cmp	r3, #4
 8003210:	d00c      	beq.n	800322c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003212:	4b85      	ldr	r3, [pc, #532]	; (8003428 <HAL_RCC_OscConfig+0x240>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800321a:	2b08      	cmp	r3, #8
 800321c:	d112      	bne.n	8003244 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800321e:	4b82      	ldr	r3, [pc, #520]	; (8003428 <HAL_RCC_OscConfig+0x240>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003226:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800322a:	d10b      	bne.n	8003244 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322c:	4b7e      	ldr	r3, [pc, #504]	; (8003428 <HAL_RCC_OscConfig+0x240>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d05b      	beq.n	80032f0 <HAL_RCC_OscConfig+0x108>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d157      	bne.n	80032f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e242      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800324c:	d106      	bne.n	800325c <HAL_RCC_OscConfig+0x74>
 800324e:	4b76      	ldr	r3, [pc, #472]	; (8003428 <HAL_RCC_OscConfig+0x240>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a75      	ldr	r2, [pc, #468]	; (8003428 <HAL_RCC_OscConfig+0x240>)
 8003254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	e01d      	b.n	8003298 <HAL_RCC_OscConfig+0xb0>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003264:	d10c      	bne.n	8003280 <HAL_RCC_OscConfig+0x98>
 8003266:	4b70      	ldr	r3, [pc, #448]	; (8003428 <HAL_RCC_OscConfig+0x240>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a6f      	ldr	r2, [pc, #444]	; (8003428 <HAL_RCC_OscConfig+0x240>)
 800326c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	4b6d      	ldr	r3, [pc, #436]	; (8003428 <HAL_RCC_OscConfig+0x240>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a6c      	ldr	r2, [pc, #432]	; (8003428 <HAL_RCC_OscConfig+0x240>)
 8003278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	e00b      	b.n	8003298 <HAL_RCC_OscConfig+0xb0>
 8003280:	4b69      	ldr	r3, [pc, #420]	; (8003428 <HAL_RCC_OscConfig+0x240>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a68      	ldr	r2, [pc, #416]	; (8003428 <HAL_RCC_OscConfig+0x240>)
 8003286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800328a:	6013      	str	r3, [r2, #0]
 800328c:	4b66      	ldr	r3, [pc, #408]	; (8003428 <HAL_RCC_OscConfig+0x240>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a65      	ldr	r2, [pc, #404]	; (8003428 <HAL_RCC_OscConfig+0x240>)
 8003292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d013      	beq.n	80032c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a0:	f7fe fa62 	bl	8001768 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a8:	f7fe fa5e 	bl	8001768 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b64      	cmp	r3, #100	; 0x64
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e207      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ba:	4b5b      	ldr	r3, [pc, #364]	; (8003428 <HAL_RCC_OscConfig+0x240>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0f0      	beq.n	80032a8 <HAL_RCC_OscConfig+0xc0>
 80032c6:	e014      	b.n	80032f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c8:	f7fe fa4e 	bl	8001768 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032d0:	f7fe fa4a 	bl	8001768 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b64      	cmp	r3, #100	; 0x64
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e1f3      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e2:	4b51      	ldr	r3, [pc, #324]	; (8003428 <HAL_RCC_OscConfig+0x240>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0xe8>
 80032ee:	e000      	b.n	80032f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d063      	beq.n	80033c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032fe:	4b4a      	ldr	r3, [pc, #296]	; (8003428 <HAL_RCC_OscConfig+0x240>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00b      	beq.n	8003322 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800330a:	4b47      	ldr	r3, [pc, #284]	; (8003428 <HAL_RCC_OscConfig+0x240>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003312:	2b08      	cmp	r3, #8
 8003314:	d11c      	bne.n	8003350 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003316:	4b44      	ldr	r3, [pc, #272]	; (8003428 <HAL_RCC_OscConfig+0x240>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d116      	bne.n	8003350 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003322:	4b41      	ldr	r3, [pc, #260]	; (8003428 <HAL_RCC_OscConfig+0x240>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d005      	beq.n	800333a <HAL_RCC_OscConfig+0x152>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d001      	beq.n	800333a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e1c7      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333a:	4b3b      	ldr	r3, [pc, #236]	; (8003428 <HAL_RCC_OscConfig+0x240>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	4937      	ldr	r1, [pc, #220]	; (8003428 <HAL_RCC_OscConfig+0x240>)
 800334a:	4313      	orrs	r3, r2
 800334c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800334e:	e03a      	b.n	80033c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d020      	beq.n	800339a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003358:	4b34      	ldr	r3, [pc, #208]	; (800342c <HAL_RCC_OscConfig+0x244>)
 800335a:	2201      	movs	r2, #1
 800335c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335e:	f7fe fa03 	bl	8001768 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003366:	f7fe f9ff 	bl	8001768 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e1a8      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003378:	4b2b      	ldr	r3, [pc, #172]	; (8003428 <HAL_RCC_OscConfig+0x240>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f0      	beq.n	8003366 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003384:	4b28      	ldr	r3, [pc, #160]	; (8003428 <HAL_RCC_OscConfig+0x240>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4925      	ldr	r1, [pc, #148]	; (8003428 <HAL_RCC_OscConfig+0x240>)
 8003394:	4313      	orrs	r3, r2
 8003396:	600b      	str	r3, [r1, #0]
 8003398:	e015      	b.n	80033c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800339a:	4b24      	ldr	r3, [pc, #144]	; (800342c <HAL_RCC_OscConfig+0x244>)
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a0:	f7fe f9e2 	bl	8001768 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033a8:	f7fe f9de 	bl	8001768 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e187      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ba:	4b1b      	ldr	r3, [pc, #108]	; (8003428 <HAL_RCC_OscConfig+0x240>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d036      	beq.n	8003440 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d016      	beq.n	8003408 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033da:	4b15      	ldr	r3, [pc, #84]	; (8003430 <HAL_RCC_OscConfig+0x248>)
 80033dc:	2201      	movs	r2, #1
 80033de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e0:	f7fe f9c2 	bl	8001768 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033e8:	f7fe f9be 	bl	8001768 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e167      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033fa:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <HAL_RCC_OscConfig+0x240>)
 80033fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0f0      	beq.n	80033e8 <HAL_RCC_OscConfig+0x200>
 8003406:	e01b      	b.n	8003440 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003408:	4b09      	ldr	r3, [pc, #36]	; (8003430 <HAL_RCC_OscConfig+0x248>)
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800340e:	f7fe f9ab 	bl	8001768 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003414:	e00e      	b.n	8003434 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003416:	f7fe f9a7 	bl	8001768 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d907      	bls.n	8003434 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e150      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
 8003428:	40023800 	.word	0x40023800
 800342c:	42470000 	.word	0x42470000
 8003430:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003434:	4b88      	ldr	r3, [pc, #544]	; (8003658 <HAL_RCC_OscConfig+0x470>)
 8003436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1ea      	bne.n	8003416 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 8097 	beq.w	800357c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800344e:	2300      	movs	r3, #0
 8003450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003452:	4b81      	ldr	r3, [pc, #516]	; (8003658 <HAL_RCC_OscConfig+0x470>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10f      	bne.n	800347e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	4b7d      	ldr	r3, [pc, #500]	; (8003658 <HAL_RCC_OscConfig+0x470>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	4a7c      	ldr	r2, [pc, #496]	; (8003658 <HAL_RCC_OscConfig+0x470>)
 8003468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800346c:	6413      	str	r3, [r2, #64]	; 0x40
 800346e:	4b7a      	ldr	r3, [pc, #488]	; (8003658 <HAL_RCC_OscConfig+0x470>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003476:	60bb      	str	r3, [r7, #8]
 8003478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800347a:	2301      	movs	r3, #1
 800347c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347e:	4b77      	ldr	r3, [pc, #476]	; (800365c <HAL_RCC_OscConfig+0x474>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003486:	2b00      	cmp	r3, #0
 8003488:	d118      	bne.n	80034bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800348a:	4b74      	ldr	r3, [pc, #464]	; (800365c <HAL_RCC_OscConfig+0x474>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a73      	ldr	r2, [pc, #460]	; (800365c <HAL_RCC_OscConfig+0x474>)
 8003490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003496:	f7fe f967 	bl	8001768 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800349e:	f7fe f963 	bl	8001768 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e10c      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b0:	4b6a      	ldr	r3, [pc, #424]	; (800365c <HAL_RCC_OscConfig+0x474>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d106      	bne.n	80034d2 <HAL_RCC_OscConfig+0x2ea>
 80034c4:	4b64      	ldr	r3, [pc, #400]	; (8003658 <HAL_RCC_OscConfig+0x470>)
 80034c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c8:	4a63      	ldr	r2, [pc, #396]	; (8003658 <HAL_RCC_OscConfig+0x470>)
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	6713      	str	r3, [r2, #112]	; 0x70
 80034d0:	e01c      	b.n	800350c <HAL_RCC_OscConfig+0x324>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2b05      	cmp	r3, #5
 80034d8:	d10c      	bne.n	80034f4 <HAL_RCC_OscConfig+0x30c>
 80034da:	4b5f      	ldr	r3, [pc, #380]	; (8003658 <HAL_RCC_OscConfig+0x470>)
 80034dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034de:	4a5e      	ldr	r2, [pc, #376]	; (8003658 <HAL_RCC_OscConfig+0x470>)
 80034e0:	f043 0304 	orr.w	r3, r3, #4
 80034e4:	6713      	str	r3, [r2, #112]	; 0x70
 80034e6:	4b5c      	ldr	r3, [pc, #368]	; (8003658 <HAL_RCC_OscConfig+0x470>)
 80034e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ea:	4a5b      	ldr	r2, [pc, #364]	; (8003658 <HAL_RCC_OscConfig+0x470>)
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	6713      	str	r3, [r2, #112]	; 0x70
 80034f2:	e00b      	b.n	800350c <HAL_RCC_OscConfig+0x324>
 80034f4:	4b58      	ldr	r3, [pc, #352]	; (8003658 <HAL_RCC_OscConfig+0x470>)
 80034f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f8:	4a57      	ldr	r2, [pc, #348]	; (8003658 <HAL_RCC_OscConfig+0x470>)
 80034fa:	f023 0301 	bic.w	r3, r3, #1
 80034fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003500:	4b55      	ldr	r3, [pc, #340]	; (8003658 <HAL_RCC_OscConfig+0x470>)
 8003502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003504:	4a54      	ldr	r2, [pc, #336]	; (8003658 <HAL_RCC_OscConfig+0x470>)
 8003506:	f023 0304 	bic.w	r3, r3, #4
 800350a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d015      	beq.n	8003540 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003514:	f7fe f928 	bl	8001768 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800351a:	e00a      	b.n	8003532 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800351c:	f7fe f924 	bl	8001768 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f241 3288 	movw	r2, #5000	; 0x1388
 800352a:	4293      	cmp	r3, r2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e0cb      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003532:	4b49      	ldr	r3, [pc, #292]	; (8003658 <HAL_RCC_OscConfig+0x470>)
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0ee      	beq.n	800351c <HAL_RCC_OscConfig+0x334>
 800353e:	e014      	b.n	800356a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003540:	f7fe f912 	bl	8001768 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003546:	e00a      	b.n	800355e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003548:	f7fe f90e 	bl	8001768 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	f241 3288 	movw	r2, #5000	; 0x1388
 8003556:	4293      	cmp	r3, r2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e0b5      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800355e:	4b3e      	ldr	r3, [pc, #248]	; (8003658 <HAL_RCC_OscConfig+0x470>)
 8003560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1ee      	bne.n	8003548 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800356a:	7dfb      	ldrb	r3, [r7, #23]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d105      	bne.n	800357c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003570:	4b39      	ldr	r3, [pc, #228]	; (8003658 <HAL_RCC_OscConfig+0x470>)
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	4a38      	ldr	r2, [pc, #224]	; (8003658 <HAL_RCC_OscConfig+0x470>)
 8003576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800357a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 80a1 	beq.w	80036c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003586:	4b34      	ldr	r3, [pc, #208]	; (8003658 <HAL_RCC_OscConfig+0x470>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 030c 	and.w	r3, r3, #12
 800358e:	2b08      	cmp	r3, #8
 8003590:	d05c      	beq.n	800364c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	2b02      	cmp	r3, #2
 8003598:	d141      	bne.n	800361e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359a:	4b31      	ldr	r3, [pc, #196]	; (8003660 <HAL_RCC_OscConfig+0x478>)
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a0:	f7fe f8e2 	bl	8001768 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a8:	f7fe f8de 	bl	8001768 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e087      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ba:	4b27      	ldr	r3, [pc, #156]	; (8003658 <HAL_RCC_OscConfig+0x470>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69da      	ldr	r2, [r3, #28]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	019b      	lsls	r3, r3, #6
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035dc:	085b      	lsrs	r3, r3, #1
 80035de:	3b01      	subs	r3, #1
 80035e0:	041b      	lsls	r3, r3, #16
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	061b      	lsls	r3, r3, #24
 80035ea:	491b      	ldr	r1, [pc, #108]	; (8003658 <HAL_RCC_OscConfig+0x470>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035f0:	4b1b      	ldr	r3, [pc, #108]	; (8003660 <HAL_RCC_OscConfig+0x478>)
 80035f2:	2201      	movs	r2, #1
 80035f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f6:	f7fe f8b7 	bl	8001768 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035fe:	f7fe f8b3 	bl	8001768 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e05c      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003610:	4b11      	ldr	r3, [pc, #68]	; (8003658 <HAL_RCC_OscConfig+0x470>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f0      	beq.n	80035fe <HAL_RCC_OscConfig+0x416>
 800361c:	e054      	b.n	80036c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361e:	4b10      	ldr	r3, [pc, #64]	; (8003660 <HAL_RCC_OscConfig+0x478>)
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003624:	f7fe f8a0 	bl	8001768 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800362c:	f7fe f89c 	bl	8001768 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e045      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800363e:	4b06      	ldr	r3, [pc, #24]	; (8003658 <HAL_RCC_OscConfig+0x470>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0x444>
 800364a:	e03d      	b.n	80036c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d107      	bne.n	8003664 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e038      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
 8003658:	40023800 	.word	0x40023800
 800365c:	40007000 	.word	0x40007000
 8003660:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003664:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <HAL_RCC_OscConfig+0x4ec>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d028      	beq.n	80036c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800367c:	429a      	cmp	r2, r3
 800367e:	d121      	bne.n	80036c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368a:	429a      	cmp	r2, r3
 800368c:	d11a      	bne.n	80036c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003694:	4013      	ands	r3, r2
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800369a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800369c:	4293      	cmp	r3, r2
 800369e:	d111      	bne.n	80036c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036aa:	085b      	lsrs	r3, r3, #1
 80036ac:	3b01      	subs	r3, #1
 80036ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d107      	bne.n	80036c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d001      	beq.n	80036c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e000      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40023800 	.word	0x40023800

080036d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0cc      	b.n	8003886 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036ec:	4b68      	ldr	r3, [pc, #416]	; (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 030f 	and.w	r3, r3, #15
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d90c      	bls.n	8003714 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fa:	4b65      	ldr	r3, [pc, #404]	; (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003702:	4b63      	ldr	r3, [pc, #396]	; (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d001      	beq.n	8003714 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e0b8      	b.n	8003886 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d020      	beq.n	8003762 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800372c:	4b59      	ldr	r3, [pc, #356]	; (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	4a58      	ldr	r2, [pc, #352]	; (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003736:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b00      	cmp	r3, #0
 8003742:	d005      	beq.n	8003750 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003744:	4b53      	ldr	r3, [pc, #332]	; (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	4a52      	ldr	r2, [pc, #328]	; (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800374e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003750:	4b50      	ldr	r3, [pc, #320]	; (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	494d      	ldr	r1, [pc, #308]	; (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	4313      	orrs	r3, r2
 8003760:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d044      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d107      	bne.n	8003786 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003776:	4b47      	ldr	r3, [pc, #284]	; (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d119      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e07f      	b.n	8003886 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b02      	cmp	r3, #2
 800378c:	d003      	beq.n	8003796 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003792:	2b03      	cmp	r3, #3
 8003794:	d107      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003796:	4b3f      	ldr	r3, [pc, #252]	; (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d109      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e06f      	b.n	8003886 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a6:	4b3b      	ldr	r3, [pc, #236]	; (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e067      	b.n	8003886 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037b6:	4b37      	ldr	r3, [pc, #220]	; (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 0203 	bic.w	r2, r3, #3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	4934      	ldr	r1, [pc, #208]	; (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037c8:	f7fd ffce 	bl	8001768 <HAL_GetTick>
 80037cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ce:	e00a      	b.n	80037e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d0:	f7fd ffca 	bl	8001768 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	f241 3288 	movw	r2, #5000	; 0x1388
 80037de:	4293      	cmp	r3, r2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e04f      	b.n	8003886 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e6:	4b2b      	ldr	r3, [pc, #172]	; (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 020c 	and.w	r2, r3, #12
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d1eb      	bne.n	80037d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037f8:	4b25      	ldr	r3, [pc, #148]	; (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d20c      	bcs.n	8003820 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003806:	4b22      	ldr	r3, [pc, #136]	; (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800380e:	4b20      	ldr	r3, [pc, #128]	; (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d001      	beq.n	8003820 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e032      	b.n	8003886 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0304 	and.w	r3, r3, #4
 8003828:	2b00      	cmp	r3, #0
 800382a:	d008      	beq.n	800383e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800382c:	4b19      	ldr	r3, [pc, #100]	; (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	4916      	ldr	r1, [pc, #88]	; (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	4313      	orrs	r3, r2
 800383c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b00      	cmp	r3, #0
 8003848:	d009      	beq.n	800385e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800384a:	4b12      	ldr	r3, [pc, #72]	; (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	490e      	ldr	r1, [pc, #56]	; (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	4313      	orrs	r3, r2
 800385c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800385e:	f000 f821 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 8003862:	4602      	mov	r2, r0
 8003864:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	091b      	lsrs	r3, r3, #4
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	490a      	ldr	r1, [pc, #40]	; (8003898 <HAL_RCC_ClockConfig+0x1c0>)
 8003870:	5ccb      	ldrb	r3, [r1, r3]
 8003872:	fa22 f303 	lsr.w	r3, r2, r3
 8003876:	4a09      	ldr	r2, [pc, #36]	; (800389c <HAL_RCC_ClockConfig+0x1c4>)
 8003878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800387a:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <HAL_RCC_ClockConfig+0x1c8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f7fd f91c 	bl	8000abc <HAL_InitTick>

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40023c00 	.word	0x40023c00
 8003894:	40023800 	.word	0x40023800
 8003898:	0801ddc0 	.word	0x0801ddc0
 800389c:	20000000 	.word	0x20000000
 80038a0:	20000004 	.word	0x20000004

080038a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038a8:	b094      	sub	sp, #80	; 0x50
 80038aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	647b      	str	r3, [r7, #68]	; 0x44
 80038b0:	2300      	movs	r3, #0
 80038b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038b4:	2300      	movs	r3, #0
 80038b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038bc:	4b79      	ldr	r3, [pc, #484]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 030c 	and.w	r3, r3, #12
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d00d      	beq.n	80038e4 <HAL_RCC_GetSysClockFreq+0x40>
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	f200 80e1 	bhi.w	8003a90 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <HAL_RCC_GetSysClockFreq+0x34>
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d003      	beq.n	80038de <HAL_RCC_GetSysClockFreq+0x3a>
 80038d6:	e0db      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038d8:	4b73      	ldr	r3, [pc, #460]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x204>)
 80038da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80038dc:	e0db      	b.n	8003a96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038de:	4b73      	ldr	r3, [pc, #460]	; (8003aac <HAL_RCC_GetSysClockFreq+0x208>)
 80038e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038e2:	e0d8      	b.n	8003a96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038e4:	4b6f      	ldr	r3, [pc, #444]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038ee:	4b6d      	ldr	r3, [pc, #436]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d063      	beq.n	80039c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038fa:	4b6a      	ldr	r3, [pc, #424]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	099b      	lsrs	r3, r3, #6
 8003900:	2200      	movs	r2, #0
 8003902:	63bb      	str	r3, [r7, #56]	; 0x38
 8003904:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800390c:	633b      	str	r3, [r7, #48]	; 0x30
 800390e:	2300      	movs	r3, #0
 8003910:	637b      	str	r3, [r7, #52]	; 0x34
 8003912:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003916:	4622      	mov	r2, r4
 8003918:	462b      	mov	r3, r5
 800391a:	f04f 0000 	mov.w	r0, #0
 800391e:	f04f 0100 	mov.w	r1, #0
 8003922:	0159      	lsls	r1, r3, #5
 8003924:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003928:	0150      	lsls	r0, r2, #5
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	4621      	mov	r1, r4
 8003930:	1a51      	subs	r1, r2, r1
 8003932:	6139      	str	r1, [r7, #16]
 8003934:	4629      	mov	r1, r5
 8003936:	eb63 0301 	sbc.w	r3, r3, r1
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	f04f 0200 	mov.w	r2, #0
 8003940:	f04f 0300 	mov.w	r3, #0
 8003944:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003948:	4659      	mov	r1, fp
 800394a:	018b      	lsls	r3, r1, #6
 800394c:	4651      	mov	r1, sl
 800394e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003952:	4651      	mov	r1, sl
 8003954:	018a      	lsls	r2, r1, #6
 8003956:	4651      	mov	r1, sl
 8003958:	ebb2 0801 	subs.w	r8, r2, r1
 800395c:	4659      	mov	r1, fp
 800395e:	eb63 0901 	sbc.w	r9, r3, r1
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	f04f 0300 	mov.w	r3, #0
 800396a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800396e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003972:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003976:	4690      	mov	r8, r2
 8003978:	4699      	mov	r9, r3
 800397a:	4623      	mov	r3, r4
 800397c:	eb18 0303 	adds.w	r3, r8, r3
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	462b      	mov	r3, r5
 8003984:	eb49 0303 	adc.w	r3, r9, r3
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003996:	4629      	mov	r1, r5
 8003998:	024b      	lsls	r3, r1, #9
 800399a:	4621      	mov	r1, r4
 800399c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039a0:	4621      	mov	r1, r4
 80039a2:	024a      	lsls	r2, r1, #9
 80039a4:	4610      	mov	r0, r2
 80039a6:	4619      	mov	r1, r3
 80039a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039aa:	2200      	movs	r2, #0
 80039ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80039ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039b4:	f7fc fc84 	bl	80002c0 <__aeabi_uldivmod>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4613      	mov	r3, r2
 80039be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039c0:	e058      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039c2:	4b38      	ldr	r3, [pc, #224]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	099b      	lsrs	r3, r3, #6
 80039c8:	2200      	movs	r2, #0
 80039ca:	4618      	mov	r0, r3
 80039cc:	4611      	mov	r1, r2
 80039ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039d2:	623b      	str	r3, [r7, #32]
 80039d4:	2300      	movs	r3, #0
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
 80039d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039dc:	4642      	mov	r2, r8
 80039de:	464b      	mov	r3, r9
 80039e0:	f04f 0000 	mov.w	r0, #0
 80039e4:	f04f 0100 	mov.w	r1, #0
 80039e8:	0159      	lsls	r1, r3, #5
 80039ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039ee:	0150      	lsls	r0, r2, #5
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4641      	mov	r1, r8
 80039f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80039fa:	4649      	mov	r1, r9
 80039fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a14:	ebb2 040a 	subs.w	r4, r2, sl
 8003a18:	eb63 050b 	sbc.w	r5, r3, fp
 8003a1c:	f04f 0200 	mov.w	r2, #0
 8003a20:	f04f 0300 	mov.w	r3, #0
 8003a24:	00eb      	lsls	r3, r5, #3
 8003a26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a2a:	00e2      	lsls	r2, r4, #3
 8003a2c:	4614      	mov	r4, r2
 8003a2e:	461d      	mov	r5, r3
 8003a30:	4643      	mov	r3, r8
 8003a32:	18e3      	adds	r3, r4, r3
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	464b      	mov	r3, r9
 8003a38:	eb45 0303 	adc.w	r3, r5, r3
 8003a3c:	607b      	str	r3, [r7, #4]
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	f04f 0300 	mov.w	r3, #0
 8003a46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a4a:	4629      	mov	r1, r5
 8003a4c:	028b      	lsls	r3, r1, #10
 8003a4e:	4621      	mov	r1, r4
 8003a50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a54:	4621      	mov	r1, r4
 8003a56:	028a      	lsls	r2, r1, #10
 8003a58:	4610      	mov	r0, r2
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a5e:	2200      	movs	r2, #0
 8003a60:	61bb      	str	r3, [r7, #24]
 8003a62:	61fa      	str	r2, [r7, #28]
 8003a64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a68:	f7fc fc2a 	bl	80002c0 <__aeabi_uldivmod>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4613      	mov	r3, r2
 8003a72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a74:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	0c1b      	lsrs	r3, r3, #16
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	3301      	adds	r3, #1
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a8e:	e002      	b.n	8003a96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a90:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3750      	adds	r7, #80	; 0x50
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	00f42400 	.word	0x00f42400
 8003aac:	007a1200 	.word	0x007a1200

08003ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ab4:	4b03      	ldr	r3, [pc, #12]	; (8003ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	20000000 	.word	0x20000000

08003ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003acc:	f7ff fff0 	bl	8003ab0 <HAL_RCC_GetHCLKFreq>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	0a9b      	lsrs	r3, r3, #10
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	4903      	ldr	r1, [pc, #12]	; (8003aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ade:	5ccb      	ldrb	r3, [r1, r3]
 8003ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	0801ddd0 	.word	0x0801ddd0

08003af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003af4:	f7ff ffdc 	bl	8003ab0 <HAL_RCC_GetHCLKFreq>
 8003af8:	4602      	mov	r2, r0
 8003afa:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	0b5b      	lsrs	r3, r3, #13
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	4903      	ldr	r1, [pc, #12]	; (8003b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b06:	5ccb      	ldrb	r3, [r1, r3]
 8003b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40023800 	.word	0x40023800
 8003b14:	0801ddd0 	.word	0x0801ddd0

08003b18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	220f      	movs	r2, #15
 8003b26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b28:	4b12      	ldr	r3, [pc, #72]	; (8003b74 <HAL_RCC_GetClockConfig+0x5c>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f003 0203 	and.w	r2, r3, #3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b34:	4b0f      	ldr	r3, [pc, #60]	; (8003b74 <HAL_RCC_GetClockConfig+0x5c>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b40:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <HAL_RCC_GetClockConfig+0x5c>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003b4c:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <HAL_RCC_GetClockConfig+0x5c>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	08db      	lsrs	r3, r3, #3
 8003b52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b5a:	4b07      	ldr	r3, [pc, #28]	; (8003b78 <HAL_RCC_GetClockConfig+0x60>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 020f 	and.w	r2, r3, #15
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	601a      	str	r2, [r3, #0]
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40023800 	.word	0x40023800
 8003b78:	40023c00 	.word	0x40023c00

08003b7c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e01c      	b.n	8003bc8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	795b      	ldrb	r3, [r3, #5]
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d105      	bne.n	8003ba4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7fc ff22 	bl	80009e8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f042 0204 	orr.w	r2, r2, #4
 8003bb8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	791b      	ldrb	r3, [r3, #4]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <HAL_RNG_GenerateRandomNumber+0x1a>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e044      	b.n	8003c74 <HAL_RNG_GenerateRandomNumber+0xa4>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	795b      	ldrb	r3, [r3, #5]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d133      	bne.n	8003c62 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c00:	f7fd fdb2 	bl	8001768 <HAL_GetTick>
 8003c04:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003c06:	e018      	b.n	8003c3a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003c08:	f7fd fdae 	bl	8001768 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d911      	bls.n	8003c3a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d00a      	beq.n	8003c3a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e01c      	b.n	8003c74 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d1df      	bne.n	8003c08 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	715a      	strb	r2, [r3, #5]
 8003c60:	e004      	b.n	8003c6c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2204      	movs	r2, #4
 8003c66:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	711a      	strb	r2, [r3, #4]

  return status;
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e041      	b.n	8003d12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f839 	bl	8003d1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4610      	mov	r0, r2
 8003cbc:	f000 f9d8 	bl	8004070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
	...

08003d30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d001      	beq.n	8003d48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e04e      	b.n	8003de6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a23      	ldr	r2, [pc, #140]	; (8003df4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d022      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0x80>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d72:	d01d      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0x80>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a1f      	ldr	r2, [pc, #124]	; (8003df8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d018      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0x80>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a1e      	ldr	r2, [pc, #120]	; (8003dfc <HAL_TIM_Base_Start_IT+0xcc>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d013      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0x80>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a1c      	ldr	r2, [pc, #112]	; (8003e00 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00e      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0x80>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a1b      	ldr	r2, [pc, #108]	; (8003e04 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d009      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0x80>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a19      	ldr	r2, [pc, #100]	; (8003e08 <HAL_TIM_Base_Start_IT+0xd8>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d004      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0x80>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a18      	ldr	r2, [pc, #96]	; (8003e0c <HAL_TIM_Base_Start_IT+0xdc>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d111      	bne.n	8003dd4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b06      	cmp	r3, #6
 8003dc0:	d010      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0201 	orr.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd2:	e007      	b.n	8003de4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0201 	orr.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	40010000 	.word	0x40010000
 8003df8:	40000400 	.word	0x40000400
 8003dfc:	40000800 	.word	0x40000800
 8003e00:	40000c00 	.word	0x40000c00
 8003e04:	40010400 	.word	0x40010400
 8003e08:	40014000 	.word	0x40014000
 8003e0c:	40001800 	.word	0x40001800

08003e10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d122      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d11b      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f06f 0202 	mvn.w	r2, #2
 8003e3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f8ee 	bl	8004034 <HAL_TIM_IC_CaptureCallback>
 8003e58:	e005      	b.n	8003e66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f8e0 	bl	8004020 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f8f1 	bl	8004048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f003 0304 	and.w	r3, r3, #4
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d122      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d11b      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 0204 	mvn.w	r2, #4
 8003e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2202      	movs	r2, #2
 8003e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f8c4 	bl	8004034 <HAL_TIM_IC_CaptureCallback>
 8003eac:	e005      	b.n	8003eba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f8b6 	bl	8004020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f8c7 	bl	8004048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d122      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d11b      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0208 	mvn.w	r2, #8
 8003ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2204      	movs	r2, #4
 8003eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f89a 	bl	8004034 <HAL_TIM_IC_CaptureCallback>
 8003f00:	e005      	b.n	8003f0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f88c 	bl	8004020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f89d 	bl	8004048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f003 0310 	and.w	r3, r3, #16
 8003f1e:	2b10      	cmp	r3, #16
 8003f20:	d122      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0310 	and.w	r3, r3, #16
 8003f2c:	2b10      	cmp	r3, #16
 8003f2e:	d11b      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0210 	mvn.w	r2, #16
 8003f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2208      	movs	r2, #8
 8003f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f870 	bl	8004034 <HAL_TIM_IC_CaptureCallback>
 8003f54:	e005      	b.n	8003f62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f862 	bl	8004020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f873 	bl	8004048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d10e      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d107      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f06f 0201 	mvn.w	r2, #1
 8003f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7fc fce6 	bl	8000960 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f9e:	2b80      	cmp	r3, #128	; 0x80
 8003fa0:	d10e      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fac:	2b80      	cmp	r3, #128	; 0x80
 8003fae:	d107      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f902 	bl	80041c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fca:	2b40      	cmp	r3, #64	; 0x40
 8003fcc:	d10e      	bne.n	8003fec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd8:	2b40      	cmp	r3, #64	; 0x40
 8003fda:	d107      	bne.n	8003fec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f838 	bl	800405c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f003 0320 	and.w	r3, r3, #32
 8003ff6:	2b20      	cmp	r3, #32
 8003ff8:	d10e      	bne.n	8004018 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f003 0320 	and.w	r3, r3, #32
 8004004:	2b20      	cmp	r3, #32
 8004006:	d107      	bne.n	8004018 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f06f 0220 	mvn.w	r2, #32
 8004010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f8cc 	bl	80041b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004018:	bf00      	nop
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a40      	ldr	r2, [pc, #256]	; (8004184 <TIM_Base_SetConfig+0x114>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d013      	beq.n	80040b0 <TIM_Base_SetConfig+0x40>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800408e:	d00f      	beq.n	80040b0 <TIM_Base_SetConfig+0x40>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a3d      	ldr	r2, [pc, #244]	; (8004188 <TIM_Base_SetConfig+0x118>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00b      	beq.n	80040b0 <TIM_Base_SetConfig+0x40>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a3c      	ldr	r2, [pc, #240]	; (800418c <TIM_Base_SetConfig+0x11c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d007      	beq.n	80040b0 <TIM_Base_SetConfig+0x40>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a3b      	ldr	r2, [pc, #236]	; (8004190 <TIM_Base_SetConfig+0x120>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d003      	beq.n	80040b0 <TIM_Base_SetConfig+0x40>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a3a      	ldr	r2, [pc, #232]	; (8004194 <TIM_Base_SetConfig+0x124>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d108      	bne.n	80040c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a2f      	ldr	r2, [pc, #188]	; (8004184 <TIM_Base_SetConfig+0x114>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d02b      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d0:	d027      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a2c      	ldr	r2, [pc, #176]	; (8004188 <TIM_Base_SetConfig+0x118>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d023      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a2b      	ldr	r2, [pc, #172]	; (800418c <TIM_Base_SetConfig+0x11c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d01f      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a2a      	ldr	r2, [pc, #168]	; (8004190 <TIM_Base_SetConfig+0x120>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d01b      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a29      	ldr	r2, [pc, #164]	; (8004194 <TIM_Base_SetConfig+0x124>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d017      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a28      	ldr	r2, [pc, #160]	; (8004198 <TIM_Base_SetConfig+0x128>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d013      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a27      	ldr	r2, [pc, #156]	; (800419c <TIM_Base_SetConfig+0x12c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d00f      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a26      	ldr	r2, [pc, #152]	; (80041a0 <TIM_Base_SetConfig+0x130>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d00b      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a25      	ldr	r2, [pc, #148]	; (80041a4 <TIM_Base_SetConfig+0x134>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d007      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a24      	ldr	r2, [pc, #144]	; (80041a8 <TIM_Base_SetConfig+0x138>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d003      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a23      	ldr	r2, [pc, #140]	; (80041ac <TIM_Base_SetConfig+0x13c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d108      	bne.n	8004134 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	4313      	orrs	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a0a      	ldr	r2, [pc, #40]	; (8004184 <TIM_Base_SetConfig+0x114>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d003      	beq.n	8004168 <TIM_Base_SetConfig+0xf8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a0c      	ldr	r2, [pc, #48]	; (8004194 <TIM_Base_SetConfig+0x124>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d103      	bne.n	8004170 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	615a      	str	r2, [r3, #20]
}
 8004176:	bf00      	nop
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40010000 	.word	0x40010000
 8004188:	40000400 	.word	0x40000400
 800418c:	40000800 	.word	0x40000800
 8004190:	40000c00 	.word	0x40000c00
 8004194:	40010400 	.word	0x40010400
 8004198:	40014000 	.word	0x40014000
 800419c:	40014400 	.word	0x40014400
 80041a0:	40014800 	.word	0x40014800
 80041a4:	40001800 	.word	0x40001800
 80041a8:	40001c00 	.word	0x40001c00
 80041ac:	40002000 	.word	0x40002000

080041b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e03f      	b.n	800426a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d106      	bne.n	8004204 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fc fc14 	bl	8000a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2224      	movs	r2, #36	; 0x24
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800421a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f829 	bl	8004274 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004230:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695a      	ldr	r2, [r3, #20]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004240:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68da      	ldr	r2, [r3, #12]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004250:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004278:	b0c0      	sub	sp, #256	; 0x100
 800427a:	af00      	add	r7, sp, #0
 800427c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800428c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004290:	68d9      	ldr	r1, [r3, #12]
 8004292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	ea40 0301 	orr.w	r3, r0, r1
 800429c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800429e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	431a      	orrs	r2, r3
 80042b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042cc:	f021 010c 	bic.w	r1, r1, #12
 80042d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042da:	430b      	orrs	r3, r1
 80042dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ee:	6999      	ldr	r1, [r3, #24]
 80042f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	ea40 0301 	orr.w	r3, r0, r1
 80042fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	4b8f      	ldr	r3, [pc, #572]	; (8004540 <UART_SetConfig+0x2cc>)
 8004304:	429a      	cmp	r2, r3
 8004306:	d005      	beq.n	8004314 <UART_SetConfig+0xa0>
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	4b8d      	ldr	r3, [pc, #564]	; (8004544 <UART_SetConfig+0x2d0>)
 8004310:	429a      	cmp	r2, r3
 8004312:	d104      	bne.n	800431e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004314:	f7ff fbec 	bl	8003af0 <HAL_RCC_GetPCLK2Freq>
 8004318:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800431c:	e003      	b.n	8004326 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800431e:	f7ff fbd3 	bl	8003ac8 <HAL_RCC_GetPCLK1Freq>
 8004322:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004330:	f040 810c 	bne.w	800454c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004338:	2200      	movs	r2, #0
 800433a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800433e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004342:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004346:	4622      	mov	r2, r4
 8004348:	462b      	mov	r3, r5
 800434a:	1891      	adds	r1, r2, r2
 800434c:	65b9      	str	r1, [r7, #88]	; 0x58
 800434e:	415b      	adcs	r3, r3
 8004350:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004352:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004356:	4621      	mov	r1, r4
 8004358:	eb12 0801 	adds.w	r8, r2, r1
 800435c:	4629      	mov	r1, r5
 800435e:	eb43 0901 	adc.w	r9, r3, r1
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	f04f 0300 	mov.w	r3, #0
 800436a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800436e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004372:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004376:	4690      	mov	r8, r2
 8004378:	4699      	mov	r9, r3
 800437a:	4623      	mov	r3, r4
 800437c:	eb18 0303 	adds.w	r3, r8, r3
 8004380:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004384:	462b      	mov	r3, r5
 8004386:	eb49 0303 	adc.w	r3, r9, r3
 800438a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800438e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800439a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800439e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043a2:	460b      	mov	r3, r1
 80043a4:	18db      	adds	r3, r3, r3
 80043a6:	653b      	str	r3, [r7, #80]	; 0x50
 80043a8:	4613      	mov	r3, r2
 80043aa:	eb42 0303 	adc.w	r3, r2, r3
 80043ae:	657b      	str	r3, [r7, #84]	; 0x54
 80043b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80043b8:	f7fb ff82 	bl	80002c0 <__aeabi_uldivmod>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4b61      	ldr	r3, [pc, #388]	; (8004548 <UART_SetConfig+0x2d4>)
 80043c2:	fba3 2302 	umull	r2, r3, r3, r2
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	011c      	lsls	r4, r3, #4
 80043ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043ce:	2200      	movs	r2, #0
 80043d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80043d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80043dc:	4642      	mov	r2, r8
 80043de:	464b      	mov	r3, r9
 80043e0:	1891      	adds	r1, r2, r2
 80043e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80043e4:	415b      	adcs	r3, r3
 80043e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043ec:	4641      	mov	r1, r8
 80043ee:	eb12 0a01 	adds.w	sl, r2, r1
 80043f2:	4649      	mov	r1, r9
 80043f4:	eb43 0b01 	adc.w	fp, r3, r1
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004404:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004408:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800440c:	4692      	mov	sl, r2
 800440e:	469b      	mov	fp, r3
 8004410:	4643      	mov	r3, r8
 8004412:	eb1a 0303 	adds.w	r3, sl, r3
 8004416:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800441a:	464b      	mov	r3, r9
 800441c:	eb4b 0303 	adc.w	r3, fp, r3
 8004420:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004430:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004434:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004438:	460b      	mov	r3, r1
 800443a:	18db      	adds	r3, r3, r3
 800443c:	643b      	str	r3, [r7, #64]	; 0x40
 800443e:	4613      	mov	r3, r2
 8004440:	eb42 0303 	adc.w	r3, r2, r3
 8004444:	647b      	str	r3, [r7, #68]	; 0x44
 8004446:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800444a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800444e:	f7fb ff37 	bl	80002c0 <__aeabi_uldivmod>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	4611      	mov	r1, r2
 8004458:	4b3b      	ldr	r3, [pc, #236]	; (8004548 <UART_SetConfig+0x2d4>)
 800445a:	fba3 2301 	umull	r2, r3, r3, r1
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	2264      	movs	r2, #100	; 0x64
 8004462:	fb02 f303 	mul.w	r3, r2, r3
 8004466:	1acb      	subs	r3, r1, r3
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800446e:	4b36      	ldr	r3, [pc, #216]	; (8004548 <UART_SetConfig+0x2d4>)
 8004470:	fba3 2302 	umull	r2, r3, r3, r2
 8004474:	095b      	lsrs	r3, r3, #5
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800447c:	441c      	add	r4, r3
 800447e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004482:	2200      	movs	r2, #0
 8004484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004488:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800448c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004490:	4642      	mov	r2, r8
 8004492:	464b      	mov	r3, r9
 8004494:	1891      	adds	r1, r2, r2
 8004496:	63b9      	str	r1, [r7, #56]	; 0x38
 8004498:	415b      	adcs	r3, r3
 800449a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800449c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044a0:	4641      	mov	r1, r8
 80044a2:	1851      	adds	r1, r2, r1
 80044a4:	6339      	str	r1, [r7, #48]	; 0x30
 80044a6:	4649      	mov	r1, r9
 80044a8:	414b      	adcs	r3, r1
 80044aa:	637b      	str	r3, [r7, #52]	; 0x34
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80044b8:	4659      	mov	r1, fp
 80044ba:	00cb      	lsls	r3, r1, #3
 80044bc:	4651      	mov	r1, sl
 80044be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044c2:	4651      	mov	r1, sl
 80044c4:	00ca      	lsls	r2, r1, #3
 80044c6:	4610      	mov	r0, r2
 80044c8:	4619      	mov	r1, r3
 80044ca:	4603      	mov	r3, r0
 80044cc:	4642      	mov	r2, r8
 80044ce:	189b      	adds	r3, r3, r2
 80044d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044d4:	464b      	mov	r3, r9
 80044d6:	460a      	mov	r2, r1
 80044d8:	eb42 0303 	adc.w	r3, r2, r3
 80044dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80044f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80044f4:	460b      	mov	r3, r1
 80044f6:	18db      	adds	r3, r3, r3
 80044f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044fa:	4613      	mov	r3, r2
 80044fc:	eb42 0303 	adc.w	r3, r2, r3
 8004500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004502:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004506:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800450a:	f7fb fed9 	bl	80002c0 <__aeabi_uldivmod>
 800450e:	4602      	mov	r2, r0
 8004510:	460b      	mov	r3, r1
 8004512:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <UART_SetConfig+0x2d4>)
 8004514:	fba3 1302 	umull	r1, r3, r3, r2
 8004518:	095b      	lsrs	r3, r3, #5
 800451a:	2164      	movs	r1, #100	; 0x64
 800451c:	fb01 f303 	mul.w	r3, r1, r3
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	3332      	adds	r3, #50	; 0x32
 8004526:	4a08      	ldr	r2, [pc, #32]	; (8004548 <UART_SetConfig+0x2d4>)
 8004528:	fba2 2303 	umull	r2, r3, r2, r3
 800452c:	095b      	lsrs	r3, r3, #5
 800452e:	f003 0207 	and.w	r2, r3, #7
 8004532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4422      	add	r2, r4
 800453a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800453c:	e106      	b.n	800474c <UART_SetConfig+0x4d8>
 800453e:	bf00      	nop
 8004540:	40011000 	.word	0x40011000
 8004544:	40011400 	.word	0x40011400
 8004548:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800454c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004550:	2200      	movs	r2, #0
 8004552:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004556:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800455a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800455e:	4642      	mov	r2, r8
 8004560:	464b      	mov	r3, r9
 8004562:	1891      	adds	r1, r2, r2
 8004564:	6239      	str	r1, [r7, #32]
 8004566:	415b      	adcs	r3, r3
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
 800456a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800456e:	4641      	mov	r1, r8
 8004570:	1854      	adds	r4, r2, r1
 8004572:	4649      	mov	r1, r9
 8004574:	eb43 0501 	adc.w	r5, r3, r1
 8004578:	f04f 0200 	mov.w	r2, #0
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	00eb      	lsls	r3, r5, #3
 8004582:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004586:	00e2      	lsls	r2, r4, #3
 8004588:	4614      	mov	r4, r2
 800458a:	461d      	mov	r5, r3
 800458c:	4643      	mov	r3, r8
 800458e:	18e3      	adds	r3, r4, r3
 8004590:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004594:	464b      	mov	r3, r9
 8004596:	eb45 0303 	adc.w	r3, r5, r3
 800459a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800459e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045ba:	4629      	mov	r1, r5
 80045bc:	008b      	lsls	r3, r1, #2
 80045be:	4621      	mov	r1, r4
 80045c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045c4:	4621      	mov	r1, r4
 80045c6:	008a      	lsls	r2, r1, #2
 80045c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80045cc:	f7fb fe78 	bl	80002c0 <__aeabi_uldivmod>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4b60      	ldr	r3, [pc, #384]	; (8004758 <UART_SetConfig+0x4e4>)
 80045d6:	fba3 2302 	umull	r2, r3, r3, r2
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	011c      	lsls	r4, r3, #4
 80045de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045e2:	2200      	movs	r2, #0
 80045e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80045f0:	4642      	mov	r2, r8
 80045f2:	464b      	mov	r3, r9
 80045f4:	1891      	adds	r1, r2, r2
 80045f6:	61b9      	str	r1, [r7, #24]
 80045f8:	415b      	adcs	r3, r3
 80045fa:	61fb      	str	r3, [r7, #28]
 80045fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004600:	4641      	mov	r1, r8
 8004602:	1851      	adds	r1, r2, r1
 8004604:	6139      	str	r1, [r7, #16]
 8004606:	4649      	mov	r1, r9
 8004608:	414b      	adcs	r3, r1
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	f04f 0300 	mov.w	r3, #0
 8004614:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004618:	4659      	mov	r1, fp
 800461a:	00cb      	lsls	r3, r1, #3
 800461c:	4651      	mov	r1, sl
 800461e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004622:	4651      	mov	r1, sl
 8004624:	00ca      	lsls	r2, r1, #3
 8004626:	4610      	mov	r0, r2
 8004628:	4619      	mov	r1, r3
 800462a:	4603      	mov	r3, r0
 800462c:	4642      	mov	r2, r8
 800462e:	189b      	adds	r3, r3, r2
 8004630:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004634:	464b      	mov	r3, r9
 8004636:	460a      	mov	r2, r1
 8004638:	eb42 0303 	adc.w	r3, r2, r3
 800463c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	67bb      	str	r3, [r7, #120]	; 0x78
 800464a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004658:	4649      	mov	r1, r9
 800465a:	008b      	lsls	r3, r1, #2
 800465c:	4641      	mov	r1, r8
 800465e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004662:	4641      	mov	r1, r8
 8004664:	008a      	lsls	r2, r1, #2
 8004666:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800466a:	f7fb fe29 	bl	80002c0 <__aeabi_uldivmod>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4611      	mov	r1, r2
 8004674:	4b38      	ldr	r3, [pc, #224]	; (8004758 <UART_SetConfig+0x4e4>)
 8004676:	fba3 2301 	umull	r2, r3, r3, r1
 800467a:	095b      	lsrs	r3, r3, #5
 800467c:	2264      	movs	r2, #100	; 0x64
 800467e:	fb02 f303 	mul.w	r3, r2, r3
 8004682:	1acb      	subs	r3, r1, r3
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	3332      	adds	r3, #50	; 0x32
 8004688:	4a33      	ldr	r2, [pc, #204]	; (8004758 <UART_SetConfig+0x4e4>)
 800468a:	fba2 2303 	umull	r2, r3, r2, r3
 800468e:	095b      	lsrs	r3, r3, #5
 8004690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004694:	441c      	add	r4, r3
 8004696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800469a:	2200      	movs	r2, #0
 800469c:	673b      	str	r3, [r7, #112]	; 0x70
 800469e:	677a      	str	r2, [r7, #116]	; 0x74
 80046a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80046a4:	4642      	mov	r2, r8
 80046a6:	464b      	mov	r3, r9
 80046a8:	1891      	adds	r1, r2, r2
 80046aa:	60b9      	str	r1, [r7, #8]
 80046ac:	415b      	adcs	r3, r3
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046b4:	4641      	mov	r1, r8
 80046b6:	1851      	adds	r1, r2, r1
 80046b8:	6039      	str	r1, [r7, #0]
 80046ba:	4649      	mov	r1, r9
 80046bc:	414b      	adcs	r3, r1
 80046be:	607b      	str	r3, [r7, #4]
 80046c0:	f04f 0200 	mov.w	r2, #0
 80046c4:	f04f 0300 	mov.w	r3, #0
 80046c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046cc:	4659      	mov	r1, fp
 80046ce:	00cb      	lsls	r3, r1, #3
 80046d0:	4651      	mov	r1, sl
 80046d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046d6:	4651      	mov	r1, sl
 80046d8:	00ca      	lsls	r2, r1, #3
 80046da:	4610      	mov	r0, r2
 80046dc:	4619      	mov	r1, r3
 80046de:	4603      	mov	r3, r0
 80046e0:	4642      	mov	r2, r8
 80046e2:	189b      	adds	r3, r3, r2
 80046e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80046e6:	464b      	mov	r3, r9
 80046e8:	460a      	mov	r2, r1
 80046ea:	eb42 0303 	adc.w	r3, r2, r3
 80046ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	663b      	str	r3, [r7, #96]	; 0x60
 80046fa:	667a      	str	r2, [r7, #100]	; 0x64
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004708:	4649      	mov	r1, r9
 800470a:	008b      	lsls	r3, r1, #2
 800470c:	4641      	mov	r1, r8
 800470e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004712:	4641      	mov	r1, r8
 8004714:	008a      	lsls	r2, r1, #2
 8004716:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800471a:	f7fb fdd1 	bl	80002c0 <__aeabi_uldivmod>
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	4b0d      	ldr	r3, [pc, #52]	; (8004758 <UART_SetConfig+0x4e4>)
 8004724:	fba3 1302 	umull	r1, r3, r3, r2
 8004728:	095b      	lsrs	r3, r3, #5
 800472a:	2164      	movs	r1, #100	; 0x64
 800472c:	fb01 f303 	mul.w	r3, r1, r3
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	3332      	adds	r3, #50	; 0x32
 8004736:	4a08      	ldr	r2, [pc, #32]	; (8004758 <UART_SetConfig+0x4e4>)
 8004738:	fba2 2303 	umull	r2, r3, r2, r3
 800473c:	095b      	lsrs	r3, r3, #5
 800473e:	f003 020f 	and.w	r2, r3, #15
 8004742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4422      	add	r2, r4
 800474a:	609a      	str	r2, [r3, #8]
}
 800474c:	bf00      	nop
 800474e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004752:	46bd      	mov	sp, r7
 8004754:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004758:	51eb851f 	.word	0x51eb851f

0800475c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800475c:	b5b0      	push	{r4, r5, r7, lr}
 800475e:	b08c      	sub	sp, #48	; 0x30
 8004760:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004762:	2100      	movs	r1, #0
 8004764:	2000      	movs	r0, #0
 8004766:	f006 f95d 	bl	800aa24 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800476a:	4b20      	ldr	r3, [pc, #128]	; (80047ec <MX_LWIP_Init+0x90>)
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004770:	4b1f      	ldr	r3, [pc, #124]	; (80047f0 <MX_LWIP_Init+0x94>)
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8004776:	4b1f      	ldr	r3, [pc, #124]	; (80047f4 <MX_LWIP_Init+0x98>)
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800477c:	4b1e      	ldr	r3, [pc, #120]	; (80047f8 <MX_LWIP_Init+0x9c>)
 800477e:	9302      	str	r3, [sp, #8]
 8004780:	4b1e      	ldr	r3, [pc, #120]	; (80047fc <MX_LWIP_Init+0xa0>)
 8004782:	9301      	str	r3, [sp, #4]
 8004784:	2300      	movs	r3, #0
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	4b1a      	ldr	r3, [pc, #104]	; (80047f4 <MX_LWIP_Init+0x98>)
 800478a:	4a19      	ldr	r2, [pc, #100]	; (80047f0 <MX_LWIP_Init+0x94>)
 800478c:	4917      	ldr	r1, [pc, #92]	; (80047ec <MX_LWIP_Init+0x90>)
 800478e:	481c      	ldr	r0, [pc, #112]	; (8004800 <MX_LWIP_Init+0xa4>)
 8004790:	f007 fd62 	bl	800c258 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004794:	481a      	ldr	r0, [pc, #104]	; (8004800 <MX_LWIP_Init+0xa4>)
 8004796:	f007 ff19 	bl	800c5cc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800479a:	4b19      	ldr	r3, [pc, #100]	; (8004800 <MX_LWIP_Init+0xa4>)
 800479c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80047a0:	089b      	lsrs	r3, r3, #2
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80047ac:	4814      	ldr	r0, [pc, #80]	; (8004800 <MX_LWIP_Init+0xa4>)
 80047ae:	f007 ff1d 	bl	800c5ec <netif_set_up>
 80047b2:	e002      	b.n	80047ba <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80047b4:	4812      	ldr	r0, [pc, #72]	; (8004800 <MX_LWIP_Init+0xa4>)
 80047b6:	f007 ff85 	bl	800c6c4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80047ba:	4912      	ldr	r1, [pc, #72]	; (8004804 <MX_LWIP_Init+0xa8>)
 80047bc:	4810      	ldr	r0, [pc, #64]	; (8004800 <MX_LWIP_Init+0xa4>)
 80047be:	f008 f81b 	bl	800c7f8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 80047c2:	4b11      	ldr	r3, [pc, #68]	; (8004808 <MX_LWIP_Init+0xac>)
 80047c4:	1d3c      	adds	r4, r7, #4
 80047c6:	461d      	mov	r5, r3
 80047c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80047d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 80047d4:	1d3b      	adds	r3, r7, #4
 80047d6:	490a      	ldr	r1, [pc, #40]	; (8004800 <MX_LWIP_Init+0xa4>)
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 fd23 	bl	8005224 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80047de:	4808      	ldr	r0, [pc, #32]	; (8004800 <MX_LWIP_Init+0xa4>)
 80047e0:	f010 f9ee 	bl	8014bc0 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80047e4:	bf00      	nop
 80047e6:	3720      	adds	r7, #32
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bdb0      	pop	{r4, r5, r7, pc}
 80047ec:	20000630 	.word	0x20000630
 80047f0:	20000634 	.word	0x20000634
 80047f4:	20000638 	.word	0x20000638
 80047f8:	0800a935 	.word	0x0800a935
 80047fc:	08004cad 	.word	0x08004cad
 8004800:	200005f8 	.word	0x200005f8
 8004804:	0800480d 	.word	0x0800480d
 8004808:	0801a294 	.word	0x0801a294

0800480c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004828:	4b04      	ldr	r3, [pc, #16]	; (800483c <HAL_ETH_RxCpltCallback+0x1c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4618      	mov	r0, r3
 800482e:	f000 fe75 	bl	800551c <osSemaphoreRelease>
}
 8004832:	bf00      	nop
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20005108 	.word	0x20005108

08004840 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004848:	4b04      	ldr	r3, [pc, #16]	; (800485c <HAL_ETH_TxCpltCallback+0x1c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4618      	mov	r0, r3
 800484e:	f000 fe65 	bl	800551c <osSemaphoreRelease>
}
 8004852:	bf00      	nop
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	2000510c 	.word	0x2000510c

08004860 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7fd fecd 	bl	8002608 <HAL_ETH_GetDMAError>
 800486e:	4603      	mov	r3, r0
 8004870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004874:	2b80      	cmp	r3, #128	; 0x80
 8004876:	d104      	bne.n	8004882 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004878:	4b04      	ldr	r3, [pc, #16]	; (800488c <HAL_ETH_ErrorCallback+0x2c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4618      	mov	r0, r3
 800487e:	f000 fe4d 	bl	800551c <osSemaphoreRelease>
  }
}
 8004882:	bf00      	nop
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	20005108 	.word	0x20005108

08004890 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004890:	b5b0      	push	{r4, r5, r7, lr}
 8004892:	b0a8      	sub	sp, #160	; 0xa0
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 800489e:	2300      	movs	r3, #0
 80048a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 80048a4:	2300      	movs	r3, #0
 80048a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 80048aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048ae:	2264      	movs	r2, #100	; 0x64
 80048b0:	2100      	movs	r1, #0
 80048b2:	4618      	mov	r0, r3
 80048b4:	f014 fb1f 	bl	8018ef6 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80048b8:	4b85      	ldr	r3, [pc, #532]	; (8004ad0 <low_level_init+0x240>)
 80048ba:	4a86      	ldr	r2, [pc, #536]	; (8004ad4 <low_level_init+0x244>)
 80048bc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80048be:	2300      	movs	r3, #0
 80048c0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 80048c4:	2380      	movs	r3, #128	; 0x80
 80048c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 80048ca:	23e1      	movs	r3, #225	; 0xe1
 80048cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0xFE;
 80048d0:	23fe      	movs	r3, #254	; 0xfe
 80048d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0xEC;
 80048d6:	23ec      	movs	r3, #236	; 0xec
 80048d8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x79;
 80048dc:	2379      	movs	r3, #121	; 0x79
 80048de:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 80048e2:	4a7b      	ldr	r2, [pc, #492]	; (8004ad0 <low_level_init+0x240>)
 80048e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048e8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80048ea:	4b79      	ldr	r3, [pc, #484]	; (8004ad0 <low_level_init+0x240>)
 80048ec:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80048f0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80048f2:	4b77      	ldr	r3, [pc, #476]	; (8004ad0 <low_level_init+0x240>)
 80048f4:	4a78      	ldr	r2, [pc, #480]	; (8004ad8 <low_level_init+0x248>)
 80048f6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80048f8:	4b75      	ldr	r3, [pc, #468]	; (8004ad0 <low_level_init+0x240>)
 80048fa:	4a78      	ldr	r2, [pc, #480]	; (8004adc <low_level_init+0x24c>)
 80048fc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80048fe:	4b74      	ldr	r3, [pc, #464]	; (8004ad0 <low_level_init+0x240>)
 8004900:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004904:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004906:	4872      	ldr	r0, [pc, #456]	; (8004ad0 <low_level_init+0x240>)
 8004908:	f7fd f840 	bl	800198c <HAL_ETH_Init>
 800490c:	4603      	mov	r3, r0
 800490e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004912:	2238      	movs	r2, #56	; 0x38
 8004914:	2100      	movs	r1, #0
 8004916:	4872      	ldr	r0, [pc, #456]	; (8004ae0 <low_level_init+0x250>)
 8004918:	f014 faed 	bl	8018ef6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800491c:	4b70      	ldr	r3, [pc, #448]	; (8004ae0 <low_level_init+0x250>)
 800491e:	2221      	movs	r2, #33	; 0x21
 8004920:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004922:	4b6f      	ldr	r3, [pc, #444]	; (8004ae0 <low_level_init+0x250>)
 8004924:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8004928:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800492a:	4b6d      	ldr	r3, [pc, #436]	; (8004ae0 <low_level_init+0x250>)
 800492c:	2200      	movs	r2, #0
 800492e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004930:	486c      	ldr	r0, [pc, #432]	; (8004ae4 <low_level_init+0x254>)
 8004932:	f007 fb4b 	bl	800bfcc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2206      	movs	r2, #6
 800493a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800493e:	4b64      	ldr	r3, [pc, #400]	; (8004ad0 <low_level_init+0x240>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	781a      	ldrb	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800494a:	4b61      	ldr	r3, [pc, #388]	; (8004ad0 <low_level_init+0x240>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	785a      	ldrb	r2, [r3, #1]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004956:	4b5e      	ldr	r3, [pc, #376]	; (8004ad0 <low_level_init+0x240>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	789a      	ldrb	r2, [r3, #2]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004962:	4b5b      	ldr	r3, [pc, #364]	; (8004ad0 <low_level_init+0x240>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	78da      	ldrb	r2, [r3, #3]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800496e:	4b58      	ldr	r3, [pc, #352]	; (8004ad0 <low_level_init+0x240>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	791a      	ldrb	r2, [r3, #4]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800497a:	4b55      	ldr	r3, [pc, #340]	; (8004ad0 <low_level_init+0x240>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	795a      	ldrb	r2, [r3, #5]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800498c:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004994:	f043 030a 	orr.w	r3, r3, #10
 8004998:	b2da      	uxtb	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 80049a0:	2203      	movs	r2, #3
 80049a2:	2100      	movs	r1, #0
 80049a4:	2001      	movs	r0, #1
 80049a6:	f001 f89d 	bl	8005ae4 <xQueueGenericCreate>
 80049aa:	4603      	mov	r3, r0
 80049ac:	4a4e      	ldr	r2, [pc, #312]	; (8004ae8 <low_level_init+0x258>)
 80049ae:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 80049b0:	2203      	movs	r2, #3
 80049b2:	2100      	movs	r1, #0
 80049b4:	2001      	movs	r0, #1
 80049b6:	f001 f895 	bl	8005ae4 <xQueueGenericCreate>
 80049ba:	4603      	mov	r3, r0
 80049bc:	4a4b      	ldr	r2, [pc, #300]	; (8004aec <low_level_init+0x25c>)
 80049be:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80049c0:	4b4b      	ldr	r3, [pc, #300]	; (8004af0 <low_level_init+0x260>)
 80049c2:	f107 0408 	add.w	r4, r7, #8
 80049c6:	461d      	mov	r5, r3
 80049c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80049d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80049d4:	f107 0308 	add.w	r3, r7, #8
 80049d8:	6879      	ldr	r1, [r7, #4]
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fc22 	bl	8005224 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80049e0:	4944      	ldr	r1, [pc, #272]	; (8004af4 <low_level_init+0x264>)
 80049e2:	4845      	ldr	r0, [pc, #276]	; (8004af8 <low_level_init+0x268>)
 80049e4:	f7fc fd29 	bl	800143a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80049e8:	4843      	ldr	r0, [pc, #268]	; (8004af8 <low_level_init+0x268>)
 80049ea:	f7fc fd58 	bl	800149e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80049ee:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d165      	bne.n	8004ac2 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80049f6:	4840      	ldr	r0, [pc, #256]	; (8004af8 <low_level_init+0x268>)
 80049f8:	f7fc fdf9 	bl	80015ee <LAN8742_GetLinkState>
 80049fc:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004a00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	dc06      	bgt.n	8004a16 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f007 fec5 	bl	800c798 <netif_set_link_down>
      netif_set_down(netif);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f007 fe58 	bl	800c6c4 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004a14:	e057      	b.n	8004ac6 <low_level_init+0x236>
      switch (PHYLinkState)
 8004a16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a1a:	3b02      	subs	r3, #2
 8004a1c:	2b03      	cmp	r3, #3
 8004a1e:	d82b      	bhi.n	8004a78 <low_level_init+0x1e8>
 8004a20:	a201      	add	r2, pc, #4	; (adr r2, 8004a28 <low_level_init+0x198>)
 8004a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a26:	bf00      	nop
 8004a28:	08004a39 	.word	0x08004a39
 8004a2c:	08004a4b 	.word	0x08004a4b
 8004a30:	08004a5b 	.word	0x08004a5b
 8004a34:	08004a6b 	.word	0x08004a6b
        duplex = ETH_FULLDUPLEX_MODE;
 8004a38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004a40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004a48:	e01f      	b.n	8004a8a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004a50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004a58:	e017      	b.n	8004a8a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004a5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004a62:	2300      	movs	r3, #0
 8004a64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004a68:	e00f      	b.n	8004a8a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004a70:	2300      	movs	r3, #0
 8004a72:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004a76:	e008      	b.n	8004a8a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004a78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004a80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004a88:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a8e:	4619      	mov	r1, r3
 8004a90:	480f      	ldr	r0, [pc, #60]	; (8004ad0 <low_level_init+0x240>)
 8004a92:	f7fd fc5f 	bl	8002354 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004a96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a9a:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8004a9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004aa0:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4809      	ldr	r0, [pc, #36]	; (8004ad0 <low_level_init+0x240>)
 8004aaa:	f7fd fd3d 	bl	8002528 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004aae:	4808      	ldr	r0, [pc, #32]	; (8004ad0 <low_level_init+0x240>)
 8004ab0:	f7fc ffea 	bl	8001a88 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f007 fd99 	bl	800c5ec <netif_set_up>
    netif_set_link_up(netif);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f007 fe34 	bl	800c728 <netif_set_link_up>
}
 8004ac0:	e001      	b.n	8004ac6 <low_level_init+0x236>
    Error_Handler();
 8004ac2:	f7fb ff5f 	bl	8000984 <Error_Handler>
}
 8004ac6:	bf00      	nop
 8004ac8:	37a0      	adds	r7, #160	; 0xa0
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bdb0      	pop	{r4, r5, r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20005110 	.word	0x20005110
 8004ad4:	40028000 	.word	0x40028000
 8004ad8:	20005068 	.word	0x20005068
 8004adc:	20004fc8 	.word	0x20004fc8
 8004ae0:	200051c0 	.word	0x200051c0
 8004ae4:	0801ddd8 	.word	0x0801ddd8
 8004ae8:	20005108 	.word	0x20005108
 8004aec:	2000510c 	.word	0x2000510c
 8004af0:	0801a2b8 	.word	0x0801a2b8
 8004af4:	2000000c 	.word	0x2000000c
 8004af8:	200051f8 	.word	0x200051f8

08004afc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b092      	sub	sp, #72	; 0x48
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004b14:	f107 030c 	add.w	r3, r7, #12
 8004b18:	2230      	movs	r2, #48	; 0x30
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f014 f9ea 	bl	8018ef6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004b22:	f107 030c 	add.w	r3, r7, #12
 8004b26:	2230      	movs	r2, #48	; 0x30
 8004b28:	2100      	movs	r1, #0
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f014 f9e3 	bl	8018ef6 <memset>

  for(q = p; q != NULL; q = q->next)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	643b      	str	r3, [r7, #64]	; 0x40
 8004b34:	e045      	b.n	8004bc2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b38:	2b03      	cmp	r3, #3
 8004b3a:	d902      	bls.n	8004b42 <low_level_output+0x46>
      return ERR_IF;
 8004b3c:	f06f 030b 	mvn.w	r3, #11
 8004b40:	e065      	b.n	8004c0e <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8004b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b44:	6859      	ldr	r1, [r3, #4]
 8004b46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b48:	4613      	mov	r3, r2
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	3348      	adds	r3, #72	; 0x48
 8004b52:	443b      	add	r3, r7
 8004b54:	3b3c      	subs	r3, #60	; 0x3c
 8004b56:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b5a:	895b      	ldrh	r3, [r3, #10]
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b60:	4613      	mov	r3, r2
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	4413      	add	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	3348      	adds	r3, #72	; 0x48
 8004b6a:	443b      	add	r3, r7
 8004b6c:	3b38      	subs	r3, #56	; 0x38
 8004b6e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d011      	beq.n	8004b9a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b78:	1e5a      	subs	r2, r3, #1
 8004b7a:	f107 000c 	add.w	r0, r7, #12
 8004b7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b80:	460b      	mov	r3, r1
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	440b      	add	r3, r1
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	18c1      	adds	r1, r0, r3
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	4413      	add	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	3348      	adds	r3, #72	; 0x48
 8004b94:	443b      	add	r3, r7
 8004b96:	3b34      	subs	r3, #52	; 0x34
 8004b98:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d109      	bne.n	8004bb6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004ba2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	4413      	add	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	3348      	adds	r3, #72	; 0x48
 8004bae:	443b      	add	r3, r7
 8004bb0:	3b34      	subs	r3, #52	; 0x34
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bb8:	3301      	adds	r3, #1
 8004bba:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	643b      	str	r3, [r7, #64]	; 0x40
 8004bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1b6      	bne.n	8004b36 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	891b      	ldrh	r3, [r3, #8]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <low_level_output+0x11c>)
 8004bd0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004bd2:	4a11      	ldr	r2, [pc, #68]	; (8004c18 <low_level_output+0x11c>)
 8004bd4:	f107 030c 	add.w	r3, r7, #12
 8004bd8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004bda:	4a0f      	ldr	r2, [pc, #60]	; (8004c18 <low_level_output+0x11c>)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8004be0:	6838      	ldr	r0, [r7, #0]
 8004be2:	f008 fa5d 	bl	800d0a0 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8004be6:	490c      	ldr	r1, [pc, #48]	; (8004c18 <low_level_output+0x11c>)
 8004be8:	480c      	ldr	r0, [pc, #48]	; (8004c1c <low_level_output+0x120>)
 8004bea:	f7fd f85a 	bl	8001ca2 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8004bee:	bf00      	nop
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <low_level_output+0x124>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 fc41 	bl	8005480 <osSemaphoreWait>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1f5      	bne.n	8004bf0 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8004c04:	4805      	ldr	r0, [pc, #20]	; (8004c1c <low_level_output+0x120>)
 8004c06:	f7fd f9df 	bl	8001fc8 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8004c0a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3748      	adds	r7, #72	; 0x48
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	200051c0 	.word	0x200051c0
 8004c1c:	20005110 	.word	0x20005110
 8004c20:	2000510c 	.word	0x2000510c

08004c24 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004c30:	4b07      	ldr	r3, [pc, #28]	; (8004c50 <low_level_input+0x2c>)
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d105      	bne.n	8004c44 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004c38:	f107 030c 	add.w	r3, r7, #12
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4805      	ldr	r0, [pc, #20]	; (8004c54 <low_level_input+0x30>)
 8004c40:	f7fd f88b 	bl	8001d5a <HAL_ETH_ReadData>
  }

  return p;
 8004c44:	68fb      	ldr	r3, [r7, #12]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20004fc4 	.word	0x20004fc4
 8004c54:	20005110 	.word	0x20005110

08004c58 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004c60:	2300      	movs	r3, #0
 8004c62:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004c68:	4b0f      	ldr	r3, [pc, #60]	; (8004ca8 <ethernetif_input+0x50>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 fc05 	bl	8005480 <osSemaphoreWait>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1f5      	bne.n	8004c68 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004c7c:	68b8      	ldr	r0, [r7, #8]
 8004c7e:	f7ff ffd1 	bl	8004c24 <low_level_input>
 8004c82:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	68b9      	ldr	r1, [r7, #8]
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	4798      	blx	r3
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f008 f95a 	bl	800cf54 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1ea      	bne.n	8004c7c <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004ca6:	e7df      	b.n	8004c68 <ethernetif_input+0x10>
 8004ca8:	20005108 	.word	0x20005108

08004cac <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d106      	bne.n	8004cc8 <ethernetif_init+0x1c>
 8004cba:	4b0e      	ldr	r3, [pc, #56]	; (8004cf4 <ethernetif_init+0x48>)
 8004cbc:	f240 12df 	movw	r2, #479	; 0x1df
 8004cc0:	490d      	ldr	r1, [pc, #52]	; (8004cf8 <ethernetif_init+0x4c>)
 8004cc2:	480e      	ldr	r0, [pc, #56]	; (8004cfc <ethernetif_init+0x50>)
 8004cc4:	f014 f878 	bl	8018db8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2273      	movs	r2, #115	; 0x73
 8004ccc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2274      	movs	r2, #116	; 0x74
 8004cd4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a09      	ldr	r2, [pc, #36]	; (8004d00 <ethernetif_init+0x54>)
 8004cdc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a08      	ldr	r2, [pc, #32]	; (8004d04 <ethernetif_init+0x58>)
 8004ce2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7ff fdd3 	bl	8004890 <low_level_init>

  return ERR_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	0801a2d4 	.word	0x0801a2d4
 8004cf8:	0801a2f0 	.word	0x0801a2f0
 8004cfc:	0801a300 	.word	0x0801a300
 8004d00:	08016a8d 	.word	0x08016a8d
 8004d04:	08004afd 	.word	0x08004afd

08004d08 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004d14:	68f9      	ldr	r1, [r7, #12]
 8004d16:	4809      	ldr	r0, [pc, #36]	; (8004d3c <pbuf_free_custom+0x34>)
 8004d18:	f007 fa48 	bl	800c1ac <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004d1c:	4b08      	ldr	r3, [pc, #32]	; (8004d40 <pbuf_free_custom+0x38>)
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d107      	bne.n	8004d34 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004d24:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <pbuf_free_custom+0x38>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004d2a:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <pbuf_free_custom+0x3c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 fbf4 	bl	800551c <osSemaphoreRelease>
  }
}
 8004d34:	bf00      	nop
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	0801ddd8 	.word	0x0801ddd8
 8004d40:	20004fc4 	.word	0x20004fc4
 8004d44:	20005108 	.word	0x20005108

08004d48 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004d4c:	f7fc fd0c 	bl	8001768 <HAL_GetTick>
 8004d50:	4603      	mov	r3, r0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	bd80      	pop	{r7, pc}
	...

08004d58 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b08e      	sub	sp, #56	; 0x38
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	605a      	str	r2, [r3, #4]
 8004d6a:	609a      	str	r2, [r3, #8]
 8004d6c:	60da      	str	r2, [r3, #12]
 8004d6e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a59      	ldr	r2, [pc, #356]	; (8004edc <HAL_ETH_MspInit+0x184>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	f040 80ac 	bne.w	8004ed4 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	623b      	str	r3, [r7, #32]
 8004d80:	4b57      	ldr	r3, [pc, #348]	; (8004ee0 <HAL_ETH_MspInit+0x188>)
 8004d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d84:	4a56      	ldr	r2, [pc, #344]	; (8004ee0 <HAL_ETH_MspInit+0x188>)
 8004d86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8004d8c:	4b54      	ldr	r3, [pc, #336]	; (8004ee0 <HAL_ETH_MspInit+0x188>)
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d94:	623b      	str	r3, [r7, #32]
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	61fb      	str	r3, [r7, #28]
 8004d9c:	4b50      	ldr	r3, [pc, #320]	; (8004ee0 <HAL_ETH_MspInit+0x188>)
 8004d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da0:	4a4f      	ldr	r2, [pc, #316]	; (8004ee0 <HAL_ETH_MspInit+0x188>)
 8004da2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004da6:	6313      	str	r3, [r2, #48]	; 0x30
 8004da8:	4b4d      	ldr	r3, [pc, #308]	; (8004ee0 <HAL_ETH_MspInit+0x188>)
 8004daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004db0:	61fb      	str	r3, [r7, #28]
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	2300      	movs	r3, #0
 8004db6:	61bb      	str	r3, [r7, #24]
 8004db8:	4b49      	ldr	r3, [pc, #292]	; (8004ee0 <HAL_ETH_MspInit+0x188>)
 8004dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbc:	4a48      	ldr	r2, [pc, #288]	; (8004ee0 <HAL_ETH_MspInit+0x188>)
 8004dbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8004dc4:	4b46      	ldr	r3, [pc, #280]	; (8004ee0 <HAL_ETH_MspInit+0x188>)
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dcc:	61bb      	str	r3, [r7, #24]
 8004dce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	4b42      	ldr	r3, [pc, #264]	; (8004ee0 <HAL_ETH_MspInit+0x188>)
 8004dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd8:	4a41      	ldr	r2, [pc, #260]	; (8004ee0 <HAL_ETH_MspInit+0x188>)
 8004dda:	f043 0304 	orr.w	r3, r3, #4
 8004dde:	6313      	str	r3, [r2, #48]	; 0x30
 8004de0:	4b3f      	ldr	r3, [pc, #252]	; (8004ee0 <HAL_ETH_MspInit+0x188>)
 8004de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dec:	2300      	movs	r3, #0
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	4b3b      	ldr	r3, [pc, #236]	; (8004ee0 <HAL_ETH_MspInit+0x188>)
 8004df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df4:	4a3a      	ldr	r2, [pc, #232]	; (8004ee0 <HAL_ETH_MspInit+0x188>)
 8004df6:	f043 0301 	orr.w	r3, r3, #1
 8004dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8004dfc:	4b38      	ldr	r3, [pc, #224]	; (8004ee0 <HAL_ETH_MspInit+0x188>)
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	613b      	str	r3, [r7, #16]
 8004e06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	4b34      	ldr	r3, [pc, #208]	; (8004ee0 <HAL_ETH_MspInit+0x188>)
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e10:	4a33      	ldr	r2, [pc, #204]	; (8004ee0 <HAL_ETH_MspInit+0x188>)
 8004e12:	f043 0302 	orr.w	r3, r3, #2
 8004e16:	6313      	str	r3, [r2, #48]	; 0x30
 8004e18:	4b31      	ldr	r3, [pc, #196]	; (8004ee0 <HAL_ETH_MspInit+0x188>)
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004e24:	2300      	movs	r3, #0
 8004e26:	60bb      	str	r3, [r7, #8]
 8004e28:	4b2d      	ldr	r3, [pc, #180]	; (8004ee0 <HAL_ETH_MspInit+0x188>)
 8004e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2c:	4a2c      	ldr	r2, [pc, #176]	; (8004ee0 <HAL_ETH_MspInit+0x188>)
 8004e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e32:	6313      	str	r3, [r2, #48]	; 0x30
 8004e34:	4b2a      	ldr	r3, [pc, #168]	; (8004ee0 <HAL_ETH_MspInit+0x188>)
 8004e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3c:	60bb      	str	r3, [r7, #8]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004e40:	2332      	movs	r3, #50	; 0x32
 8004e42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e44:	2302      	movs	r3, #2
 8004e46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e50:	230b      	movs	r3, #11
 8004e52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4822      	ldr	r0, [pc, #136]	; (8004ee4 <HAL_ETH_MspInit+0x18c>)
 8004e5c:	f7fd ffe6 	bl	8002e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004e60:	2386      	movs	r3, #134	; 0x86
 8004e62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e64:	2302      	movs	r3, #2
 8004e66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e70:	230b      	movs	r3, #11
 8004e72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e78:	4619      	mov	r1, r3
 8004e7a:	481b      	ldr	r0, [pc, #108]	; (8004ee8 <HAL_ETH_MspInit+0x190>)
 8004e7c:	f7fd ffd6 	bl	8002e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004e80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e86:	2302      	movs	r3, #2
 8004e88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e92:	230b      	movs	r3, #11
 8004e94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4813      	ldr	r0, [pc, #76]	; (8004eec <HAL_ETH_MspInit+0x194>)
 8004e9e:	f7fd ffc5 	bl	8002e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004ea2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004ea6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eac:	2300      	movs	r3, #0
 8004eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004eb4:	230b      	movs	r3, #11
 8004eb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	480c      	ldr	r0, [pc, #48]	; (8004ef0 <HAL_ETH_MspInit+0x198>)
 8004ec0:	f7fd ffb4 	bl	8002e2c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	2105      	movs	r1, #5
 8004ec8:	203d      	movs	r0, #61	; 0x3d
 8004eca:	f7fc fd35 	bl	8001938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004ece:	203d      	movs	r0, #61	; 0x3d
 8004ed0:	f7fc fd4e 	bl	8001970 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004ed4:	bf00      	nop
 8004ed6:	3738      	adds	r7, #56	; 0x38
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40028000 	.word	0x40028000
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	40020800 	.word	0x40020800
 8004ee8:	40020000 	.word	0x40020000
 8004eec:	40020400 	.word	0x40020400
 8004ef0:	40021800 	.word	0x40021800

08004ef4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004ef8:	4802      	ldr	r0, [pc, #8]	; (8004f04 <ETH_PHY_IO_Init+0x10>)
 8004efa:	f7fd fb2f 	bl	800255c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	20005110 	.word	0x20005110

08004f08 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  return 0;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	68f9      	ldr	r1, [r7, #12]
 8004f2a:	4807      	ldr	r0, [pc, #28]	; (8004f48 <ETH_PHY_IO_ReadReg+0x30>)
 8004f2c:	f7fd f97e 	bl	800222c <HAL_ETH_ReadPHYRegister>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d002      	beq.n	8004f3c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004f36:	f04f 33ff 	mov.w	r3, #4294967295
 8004f3a:	e000      	b.n	8004f3e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	20005110 	.word	0x20005110

08004f4c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	68f9      	ldr	r1, [r7, #12]
 8004f5e:	4807      	ldr	r0, [pc, #28]	; (8004f7c <ETH_PHY_IO_WriteReg+0x30>)
 8004f60:	f7fd f9af 	bl	80022c2 <HAL_ETH_WritePHYRegister>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f6e:	e000      	b.n	8004f72 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	20005110 	.word	0x20005110

08004f80 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004f84:	f7fc fbf0 	bl	8001768 <HAL_GetTick>
 8004f88:	4603      	mov	r3, r0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b0a0      	sub	sp, #128	; 0x80
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004f98:	f107 0308 	add.w	r3, r7, #8
 8004f9c:	2264      	movs	r2, #100	; 0x64
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f013 ffa8 	bl	8018ef6 <memset>
  int32_t PHYLinkState = 0;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004fae:	2300      	movs	r3, #0
 8004fb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004fba:	483a      	ldr	r0, [pc, #232]	; (80050a4 <ethernet_link_thread+0x114>)
 8004fbc:	f7fc fb17 	bl	80015ee <LAN8742_GetLinkState>
 8004fc0:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004fc8:	089b      	lsrs	r3, r3, #2
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00c      	beq.n	8004fee <ethernet_link_thread+0x5e>
 8004fd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	dc09      	bgt.n	8004fee <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8004fda:	4833      	ldr	r0, [pc, #204]	; (80050a8 <ethernet_link_thread+0x118>)
 8004fdc:	f7fc fde2 	bl	8001ba4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004fe0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004fe2:	f007 fb6f 	bl	800c6c4 <netif_set_down>
    netif_set_link_down(netif);
 8004fe6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004fe8:	f007 fbd6 	bl	800c798 <netif_set_link_down>
 8004fec:	e055      	b.n	800509a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d14e      	bne.n	800509a <ethernet_link_thread+0x10a>
 8004ffc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	dd4b      	ble.n	800509a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8005002:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005004:	3b02      	subs	r3, #2
 8005006:	2b03      	cmp	r3, #3
 8005008:	d82a      	bhi.n	8005060 <ethernet_link_thread+0xd0>
 800500a:	a201      	add	r2, pc, #4	; (adr r2, 8005010 <ethernet_link_thread+0x80>)
 800500c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005010:	08005021 	.word	0x08005021
 8005014:	08005033 	.word	0x08005033
 8005018:	08005043 	.word	0x08005043
 800501c:	08005053 	.word	0x08005053
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005020:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005024:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005026:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800502a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800502c:	2301      	movs	r3, #1
 800502e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005030:	e017      	b.n	8005062 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005032:	2300      	movs	r3, #0
 8005034:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005036:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800503a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800503c:	2301      	movs	r3, #1
 800503e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005040:	e00f      	b.n	8005062 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005042:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005046:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005048:	2300      	movs	r3, #0
 800504a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800504c:	2301      	movs	r3, #1
 800504e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005050:	e007      	b.n	8005062 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005052:	2300      	movs	r3, #0
 8005054:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005056:	2300      	movs	r3, #0
 8005058:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800505a:	2301      	movs	r3, #1
 800505c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800505e:	e000      	b.n	8005062 <ethernet_link_thread+0xd2>
    default:
      break;
 8005060:	bf00      	nop
    }

    if(linkchanged)
 8005062:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005064:	2b00      	cmp	r3, #0
 8005066:	d018      	beq.n	800509a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005068:	f107 0308 	add.w	r3, r7, #8
 800506c:	4619      	mov	r1, r3
 800506e:	480e      	ldr	r0, [pc, #56]	; (80050a8 <ethernet_link_thread+0x118>)
 8005070:	f7fd f970 	bl	8002354 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005076:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005078:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800507a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800507c:	f107 0308 	add.w	r3, r7, #8
 8005080:	4619      	mov	r1, r3
 8005082:	4809      	ldr	r0, [pc, #36]	; (80050a8 <ethernet_link_thread+0x118>)
 8005084:	f7fd fa50 	bl	8002528 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8005088:	4807      	ldr	r0, [pc, #28]	; (80050a8 <ethernet_link_thread+0x118>)
 800508a:	f7fc fcfd 	bl	8001a88 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800508e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005090:	f007 faac 	bl	800c5ec <netif_set_up>
      netif_set_link_up(netif);
 8005094:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005096:	f007 fb47 	bl	800c728 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800509a:	2064      	movs	r0, #100	; 0x64
 800509c:	f000 f90e 	bl	80052bc <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80050a0:	e78b      	b.n	8004fba <ethernet_link_thread+0x2a>
 80050a2:	bf00      	nop
 80050a4:	200051f8 	.word	0x200051f8
 80050a8:	20005110 	.word	0x20005110

080050ac <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af02      	add	r7, sp, #8
 80050b2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80050b4:	4812      	ldr	r0, [pc, #72]	; (8005100 <HAL_ETH_RxAllocateCallback+0x54>)
 80050b6:	f007 f805 	bl	800c0c4 <memp_malloc_pool>
 80050ba:	60f8      	str	r0, [r7, #12]
  if (p)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d014      	beq.n	80050ec <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f103 0220 	add.w	r2, r3, #32
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4a0d      	ldr	r2, [pc, #52]	; (8005104 <HAL_ETH_RxAllocateCallback+0x58>)
 80050d0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80050da:	9201      	str	r2, [sp, #4]
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2241      	movs	r2, #65	; 0x41
 80050e2:	2100      	movs	r1, #0
 80050e4:	2000      	movs	r0, #0
 80050e6:	f007 fd7b 	bl	800cbe0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80050ea:	e005      	b.n	80050f8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80050ec:	4b06      	ldr	r3, [pc, #24]	; (8005108 <HAL_ETH_RxAllocateCallback+0x5c>)
 80050ee:	2201      	movs	r2, #1
 80050f0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]
}
 80050f8:	bf00      	nop
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	0801ddd8 	.word	0x0801ddd8
 8005104:	08004d09 	.word	0x08004d09
 8005108:	20004fc4 	.word	0x20004fc4

0800510c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800510c:	b480      	push	{r7}
 800510e:	b089      	sub	sp, #36	; 0x24
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8005122:	2300      	movs	r3, #0
 8005124:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	3b20      	subs	r3, #32
 800512a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	2200      	movs	r2, #0
 8005130:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	2200      	movs	r2, #0
 8005136:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	887a      	ldrh	r2, [r7, #2]
 800513c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d103      	bne.n	800514e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	69fa      	ldr	r2, [r7, #28]
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	e003      	b.n	8005156 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	69fa      	ldr	r2, [r7, #28]
 8005154:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	69fa      	ldr	r2, [r7, #28]
 800515a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	61fb      	str	r3, [r7, #28]
 8005162:	e009      	b.n	8005178 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	891a      	ldrh	r2, [r3, #8]
 8005168:	887b      	ldrh	r3, [r7, #2]
 800516a:	4413      	add	r3, r2
 800516c:	b29a      	uxth	r2, r3
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	61fb      	str	r3, [r7, #28]
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1f2      	bne.n	8005164 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800517e:	bf00      	nop
 8005180:	bf00      	nop
 8005182:	3724      	adds	r7, #36	; 0x24
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f007 fedd 	bl	800cf54 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800519a:	bf00      	nop
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b085      	sub	sp, #20
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	4603      	mov	r3, r0
 80051aa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80051ac:	2300      	movs	r3, #0
 80051ae:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80051b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051b4:	2b84      	cmp	r3, #132	; 0x84
 80051b6:	d005      	beq.n	80051c4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80051b8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4413      	add	r3, r2
 80051c0:	3303      	adds	r3, #3
 80051c2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80051c4:	68fb      	ldr	r3, [r7, #12]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b083      	sub	sp, #12
 80051d6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051d8:	f3ef 8305 	mrs	r3, IPSR
 80051dc:	607b      	str	r3, [r7, #4]
  return(result);
 80051de:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	bf14      	ite	ne
 80051e4:	2301      	movne	r3, #1
 80051e6:	2300      	moveq	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80051fa:	f001 fd3b 	bl	8006c74 <vTaskStartScheduler>
  
  return osOK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	bd80      	pop	{r7, pc}

08005204 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005208:	f7ff ffe3 	bl	80051d2 <inHandlerMode>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005212:	f001 fe53 	bl	8006ebc <xTaskGetTickCountFromISR>
 8005216:	4603      	mov	r3, r0
 8005218:	e002      	b.n	8005220 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800521a:	f001 fe3f 	bl	8006e9c <xTaskGetTickCount>
 800521e:	4603      	mov	r3, r0
  }
}
 8005220:	4618      	mov	r0, r3
 8005222:	bd80      	pop	{r7, pc}

08005224 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005226:	b089      	sub	sp, #36	; 0x24
 8005228:	af04      	add	r7, sp, #16
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d020      	beq.n	8005278 <osThreadCreate+0x54>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d01c      	beq.n	8005278 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685c      	ldr	r4, [r3, #4]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691e      	ldr	r6, [r3, #16]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005250:	4618      	mov	r0, r3
 8005252:	f7ff ffa6 	bl	80051a2 <makeFreeRtosPriority>
 8005256:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005260:	9202      	str	r2, [sp, #8]
 8005262:	9301      	str	r3, [sp, #4]
 8005264:	9100      	str	r1, [sp, #0]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	4632      	mov	r2, r6
 800526a:	4629      	mov	r1, r5
 800526c:	4620      	mov	r0, r4
 800526e:	f001 fb23 	bl	80068b8 <xTaskCreateStatic>
 8005272:	4603      	mov	r3, r0
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	e01c      	b.n	80052b2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685c      	ldr	r4, [r3, #4]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005284:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff ff88 	bl	80051a2 <makeFreeRtosPriority>
 8005292:	4602      	mov	r2, r0
 8005294:	f107 030c 	add.w	r3, r7, #12
 8005298:	9301      	str	r3, [sp, #4]
 800529a:	9200      	str	r2, [sp, #0]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	4632      	mov	r2, r6
 80052a0:	4629      	mov	r1, r5
 80052a2:	4620      	mov	r0, r4
 80052a4:	f001 fb65 	bl	8006972 <xTaskCreate>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d001      	beq.n	80052b2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	e000      	b.n	80052b4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80052b2:	68fb      	ldr	r3, [r7, #12]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052bc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <osDelay+0x16>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	e000      	b.n	80052d4 <osDelay+0x18>
 80052d2:	2301      	movs	r3, #1
 80052d4:	4618      	mov	r0, r3
 80052d6:	f001 fc99 	bl	8006c0c <vTaskDelay>
  
  return osOK;
 80052da:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d007      	beq.n	8005304 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	4619      	mov	r1, r3
 80052fa:	2001      	movs	r0, #1
 80052fc:	f000 fc7d 	bl	8005bfa <xQueueCreateMutexStatic>
 8005300:	4603      	mov	r3, r0
 8005302:	e003      	b.n	800530c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005304:	2001      	movs	r0, #1
 8005306:	f000 fc60 	bl	8005bca <xQueueCreateMutex>
 800530a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800530c:	4618      	mov	r0, r3
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800531e:	2300      	movs	r3, #0
 8005320:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <osMutexWait+0x18>
    return osErrorParameter;
 8005328:	2380      	movs	r3, #128	; 0x80
 800532a:	e03a      	b.n	80053a2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800532c:	2300      	movs	r3, #0
 800532e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005336:	d103      	bne.n	8005340 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005338:	f04f 33ff 	mov.w	r3, #4294967295
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	e009      	b.n	8005354 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d006      	beq.n	8005354 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <osMutexWait+0x40>
      ticks = 1;
 8005350:	2301      	movs	r3, #1
 8005352:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005354:	f7ff ff3d 	bl	80051d2 <inHandlerMode>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d017      	beq.n	800538e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800535e:	f107 0308 	add.w	r3, r7, #8
 8005362:	461a      	mov	r2, r3
 8005364:	2100      	movs	r1, #0
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f001 f874 	bl	8006454 <xQueueReceiveFromISR>
 800536c:	4603      	mov	r3, r0
 800536e:	2b01      	cmp	r3, #1
 8005370:	d001      	beq.n	8005376 <osMutexWait+0x62>
      return osErrorOS;
 8005372:	23ff      	movs	r3, #255	; 0xff
 8005374:	e015      	b.n	80053a2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d011      	beq.n	80053a0 <osMutexWait+0x8c>
 800537c:	4b0b      	ldr	r3, [pc, #44]	; (80053ac <osMutexWait+0x98>)
 800537e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	e008      	b.n	80053a0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800538e:	68f9      	ldr	r1, [r7, #12]
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 ff53 	bl	800623c <xQueueSemaphoreTake>
 8005396:	4603      	mov	r3, r0
 8005398:	2b01      	cmp	r3, #1
 800539a:	d001      	beq.n	80053a0 <osMutexWait+0x8c>
    return osErrorOS;
 800539c:	23ff      	movs	r3, #255	; 0xff
 800539e:	e000      	b.n	80053a2 <osMutexWait+0x8e>
  }
  
  return osOK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	e000ed04 	.word	0xe000ed04

080053b0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80053bc:	2300      	movs	r3, #0
 80053be:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80053c0:	f7ff ff07 	bl	80051d2 <inHandlerMode>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d016      	beq.n	80053f8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80053ca:	f107 0308 	add.w	r3, r7, #8
 80053ce:	4619      	mov	r1, r3
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fdc6 	bl	8005f62 <xQueueGiveFromISR>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d001      	beq.n	80053e0 <osMutexRelease+0x30>
      return osErrorOS;
 80053dc:	23ff      	movs	r3, #255	; 0xff
 80053de:	e017      	b.n	8005410 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d013      	beq.n	800540e <osMutexRelease+0x5e>
 80053e6:	4b0c      	ldr	r3, [pc, #48]	; (8005418 <osMutexRelease+0x68>)
 80053e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	e00a      	b.n	800540e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80053f8:	2300      	movs	r3, #0
 80053fa:	2200      	movs	r2, #0
 80053fc:	2100      	movs	r1, #0
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fc16 	bl	8005c30 <xQueueGenericSend>
 8005404:	4603      	mov	r3, r0
 8005406:	2b01      	cmp	r3, #1
 8005408:	d001      	beq.n	800540e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800540a:	23ff      	movs	r3, #255	; 0xff
 800540c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800540e:	68fb      	ldr	r3, [r7, #12]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	e000ed04 	.word	0xe000ed04

0800541c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af02      	add	r7, sp, #8
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00f      	beq.n	800544e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d10a      	bne.n	800544a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2203      	movs	r2, #3
 800543a:	9200      	str	r2, [sp, #0]
 800543c:	2200      	movs	r2, #0
 800543e:	2100      	movs	r1, #0
 8005440:	2001      	movs	r0, #1
 8005442:	f000 fad7 	bl	80059f4 <xQueueGenericCreateStatic>
 8005446:	4603      	mov	r3, r0
 8005448:	e016      	b.n	8005478 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800544a:	2300      	movs	r3, #0
 800544c:	e014      	b.n	8005478 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d110      	bne.n	8005476 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005454:	2203      	movs	r2, #3
 8005456:	2100      	movs	r1, #0
 8005458:	2001      	movs	r0, #1
 800545a:	f000 fb43 	bl	8005ae4 <xQueueGenericCreate>
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d005      	beq.n	8005472 <osSemaphoreCreate+0x56>
 8005466:	2300      	movs	r3, #0
 8005468:	2200      	movs	r2, #0
 800546a:	2100      	movs	r1, #0
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 fbdf 	bl	8005c30 <xQueueGenericSend>
      return sema;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	e000      	b.n	8005478 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005476:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800548a:	2300      	movs	r3, #0
 800548c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005494:	2380      	movs	r3, #128	; 0x80
 8005496:	e03a      	b.n	800550e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005498:	2300      	movs	r3, #0
 800549a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a2:	d103      	bne.n	80054ac <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80054a4:	f04f 33ff 	mov.w	r3, #4294967295
 80054a8:	60fb      	str	r3, [r7, #12]
 80054aa:	e009      	b.n	80054c0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d006      	beq.n	80054c0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <osSemaphoreWait+0x40>
      ticks = 1;
 80054bc:	2301      	movs	r3, #1
 80054be:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80054c0:	f7ff fe87 	bl	80051d2 <inHandlerMode>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d017      	beq.n	80054fa <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80054ca:	f107 0308 	add.w	r3, r7, #8
 80054ce:	461a      	mov	r2, r3
 80054d0:	2100      	movs	r1, #0
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 ffbe 	bl	8006454 <xQueueReceiveFromISR>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d001      	beq.n	80054e2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80054de:	23ff      	movs	r3, #255	; 0xff
 80054e0:	e015      	b.n	800550e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d011      	beq.n	800550c <osSemaphoreWait+0x8c>
 80054e8:	4b0b      	ldr	r3, [pc, #44]	; (8005518 <osSemaphoreWait+0x98>)
 80054ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	e008      	b.n	800550c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80054fa:	68f9      	ldr	r1, [r7, #12]
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fe9d 	bl	800623c <xQueueSemaphoreTake>
 8005502:	4603      	mov	r3, r0
 8005504:	2b01      	cmp	r3, #1
 8005506:	d001      	beq.n	800550c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005508:	23ff      	movs	r3, #255	; 0xff
 800550a:	e000      	b.n	800550e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	e000ed04 	.word	0xe000ed04

0800551c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005524:	2300      	movs	r3, #0
 8005526:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005528:	2300      	movs	r3, #0
 800552a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800552c:	f7ff fe51 	bl	80051d2 <inHandlerMode>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d016      	beq.n	8005564 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005536:	f107 0308 	add.w	r3, r7, #8
 800553a:	4619      	mov	r1, r3
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fd10 	bl	8005f62 <xQueueGiveFromISR>
 8005542:	4603      	mov	r3, r0
 8005544:	2b01      	cmp	r3, #1
 8005546:	d001      	beq.n	800554c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005548:	23ff      	movs	r3, #255	; 0xff
 800554a:	e017      	b.n	800557c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d013      	beq.n	800557a <osSemaphoreRelease+0x5e>
 8005552:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <osSemaphoreRelease+0x68>)
 8005554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	e00a      	b.n	800557a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005564:	2300      	movs	r3, #0
 8005566:	2200      	movs	r2, #0
 8005568:	2100      	movs	r1, #0
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fb60 	bl	8005c30 <xQueueGenericSend>
 8005570:	4603      	mov	r3, r0
 8005572:	2b01      	cmp	r3, #1
 8005574:	d001      	beq.n	800557a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005576:	23ff      	movs	r3, #255	; 0xff
 8005578:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800557a:	68fb      	ldr	r3, [r7, #12]
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	e000ed04 	.word	0xe000ed04

08005588 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005590:	f7ff fe1f 	bl	80051d2 <inHandlerMode>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800559a:	2382      	movs	r3, #130	; 0x82
 800559c:	e003      	b.n	80055a6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f001 f814 	bl	80065cc <vQueueDelete>

  return osOK; 
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80055ae:	b590      	push	{r4, r7, lr}
 80055b0:	b085      	sub	sp, #20
 80055b2:	af02      	add	r7, sp, #8
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d011      	beq.n	80055e4 <osMessageCreate+0x36>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00d      	beq.n	80055e4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6818      	ldr	r0, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6859      	ldr	r1, [r3, #4]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	2400      	movs	r4, #0
 80055da:	9400      	str	r4, [sp, #0]
 80055dc:	f000 fa0a 	bl	80059f4 <xQueueGenericCreateStatic>
 80055e0:	4603      	mov	r3, r0
 80055e2:	e008      	b.n	80055f6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6818      	ldr	r0, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	4619      	mov	r1, r3
 80055f0:	f000 fa78 	bl	8005ae4 <xQueueGenericCreate>
 80055f4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd90      	pop	{r4, r7, pc}
	...

08005600 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800560c:	2300      	movs	r3, #0
 800560e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <osMessagePut+0x1e>
    ticks = 1;
 800561a:	2301      	movs	r3, #1
 800561c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800561e:	f7ff fdd8 	bl	80051d2 <inHandlerMode>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d018      	beq.n	800565a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005628:	f107 0210 	add.w	r2, r7, #16
 800562c:	f107 0108 	add.w	r1, r7, #8
 8005630:	2300      	movs	r3, #0
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f000 fbfa 	bl	8005e2c <xQueueGenericSendFromISR>
 8005638:	4603      	mov	r3, r0
 800563a:	2b01      	cmp	r3, #1
 800563c:	d001      	beq.n	8005642 <osMessagePut+0x42>
      return osErrorOS;
 800563e:	23ff      	movs	r3, #255	; 0xff
 8005640:	e018      	b.n	8005674 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d014      	beq.n	8005672 <osMessagePut+0x72>
 8005648:	4b0c      	ldr	r3, [pc, #48]	; (800567c <osMessagePut+0x7c>)
 800564a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	e00b      	b.n	8005672 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800565a:	f107 0108 	add.w	r1, r7, #8
 800565e:	2300      	movs	r3, #0
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 fae4 	bl	8005c30 <xQueueGenericSend>
 8005668:	4603      	mov	r3, r0
 800566a:	2b01      	cmp	r3, #1
 800566c:	d001      	beq.n	8005672 <osMessagePut+0x72>
      return osErrorOS;
 800566e:	23ff      	movs	r3, #255	; 0xff
 8005670:	e000      	b.n	8005674 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3718      	adds	r7, #24
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	e000ed04 	.word	0xe000ed04

08005680 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005680:	b590      	push	{r4, r7, lr}
 8005682:	b08b      	sub	sp, #44	; 0x2c
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005690:	2300      	movs	r3, #0
 8005692:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10a      	bne.n	80056b0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800569a:	2380      	movs	r3, #128	; 0x80
 800569c:	617b      	str	r3, [r7, #20]
    return event;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	461c      	mov	r4, r3
 80056a2:	f107 0314 	add.w	r3, r7, #20
 80056a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80056aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80056ae:	e054      	b.n	800575a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80056b0:	2300      	movs	r3, #0
 80056b2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056be:	d103      	bne.n	80056c8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80056c0:	f04f 33ff 	mov.w	r3, #4294967295
 80056c4:	627b      	str	r3, [r7, #36]	; 0x24
 80056c6:	e009      	b.n	80056dc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d006      	beq.n	80056dc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <osMessageGet+0x5c>
      ticks = 1;
 80056d8:	2301      	movs	r3, #1
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80056dc:	f7ff fd79 	bl	80051d2 <inHandlerMode>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d01c      	beq.n	8005720 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80056e6:	f107 0220 	add.w	r2, r7, #32
 80056ea:	f107 0314 	add.w	r3, r7, #20
 80056ee:	3304      	adds	r3, #4
 80056f0:	4619      	mov	r1, r3
 80056f2:	68b8      	ldr	r0, [r7, #8]
 80056f4:	f000 feae 	bl	8006454 <xQueueReceiveFromISR>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d102      	bne.n	8005704 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80056fe:	2310      	movs	r3, #16
 8005700:	617b      	str	r3, [r7, #20]
 8005702:	e001      	b.n	8005708 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005704:	2300      	movs	r3, #0
 8005706:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d01d      	beq.n	800574a <osMessageGet+0xca>
 800570e:	4b15      	ldr	r3, [pc, #84]	; (8005764 <osMessageGet+0xe4>)
 8005710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	e014      	b.n	800574a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005720:	f107 0314 	add.w	r3, r7, #20
 8005724:	3304      	adds	r3, #4
 8005726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005728:	4619      	mov	r1, r3
 800572a:	68b8      	ldr	r0, [r7, #8]
 800572c:	f000 fca6 	bl	800607c <xQueueReceive>
 8005730:	4603      	mov	r3, r0
 8005732:	2b01      	cmp	r3, #1
 8005734:	d102      	bne.n	800573c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005736:	2310      	movs	r3, #16
 8005738:	617b      	str	r3, [r7, #20]
 800573a:	e006      	b.n	800574a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <osMessageGet+0xc6>
 8005742:	2300      	movs	r3, #0
 8005744:	e000      	b.n	8005748 <osMessageGet+0xc8>
 8005746:	2340      	movs	r3, #64	; 0x40
 8005748:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	461c      	mov	r4, r3
 800574e:	f107 0314 	add.w	r3, r7, #20
 8005752:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005756:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	372c      	adds	r7, #44	; 0x2c
 800575e:	46bd      	mov	sp, r7
 8005760:	bd90      	pop	{r4, r7, pc}
 8005762:	bf00      	nop
 8005764:	e000ed04 	.word	0xe000ed04

08005768 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005770:	f7ff fd2f 	bl	80051d2 <inHandlerMode>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d004      	beq.n	8005784 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 ff08 	bl	8006590 <uxQueueMessagesWaitingFromISR>
 8005780:	4603      	mov	r3, r0
 8005782:	e003      	b.n	800578c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fee5 	bl	8006554 <uxQueueMessagesWaiting>
 800578a:	4603      	mov	r3, r0
  }
}
 800578c:	4618      	mov	r0, r3
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800579c:	f7ff fd19 	bl	80051d2 <inHandlerMode>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <osMessageDelete+0x16>
    return osErrorISR;
 80057a6:	2382      	movs	r3, #130	; 0x82
 80057a8:	e003      	b.n	80057b2 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 ff0e 	bl	80065cc <vQueueDelete>

  return osOK; 
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f103 0208 	add.w	r2, r3, #8
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f04f 32ff 	mov.w	r2, #4294967295
 80057d2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f103 0208 	add.w	r2, r3, #8
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f103 0208 	add.w	r2, r3, #8
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	689a      	ldr	r2, [r3, #8]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	1c5a      	adds	r2, r3, #1
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	601a      	str	r2, [r3, #0]
}
 8005850:	bf00      	nop
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005872:	d103      	bne.n	800587c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	60fb      	str	r3, [r7, #12]
 800587a:	e00c      	b.n	8005896 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3308      	adds	r3, #8
 8005880:	60fb      	str	r3, [r7, #12]
 8005882:	e002      	b.n	800588a <vListInsert+0x2e>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	429a      	cmp	r2, r3
 8005894:	d2f6      	bcs.n	8005884 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	601a      	str	r2, [r3, #0]
}
 80058c2:	bf00      	nop
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058ce:	b480      	push	{r7}
 80058d0:	b085      	sub	sp, #20
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6892      	ldr	r2, [r2, #8]
 80058e4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	6852      	ldr	r2, [r2, #4]
 80058ee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d103      	bne.n	8005902 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689a      	ldr	r2, [r3, #8]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	1e5a      	subs	r2, r3, #1
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
	...

08005924 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10a      	bne.n	800594e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800594a:	bf00      	nop
 800594c:	e7fe      	b.n	800594c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800594e:	f002 f911 	bl	8007b74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800595a:	68f9      	ldr	r1, [r7, #12]
 800595c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800595e:	fb01 f303 	mul.w	r3, r1, r3
 8005962:	441a      	add	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597e:	3b01      	subs	r3, #1
 8005980:	68f9      	ldr	r1, [r7, #12]
 8005982:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005984:	fb01 f303 	mul.w	r3, r1, r3
 8005988:	441a      	add	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	22ff      	movs	r2, #255	; 0xff
 8005992:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	22ff      	movs	r2, #255	; 0xff
 800599a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d114      	bne.n	80059ce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01a      	beq.n	80059e2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	3310      	adds	r3, #16
 80059b0:	4618      	mov	r0, r3
 80059b2:	f001 fbd3 	bl	800715c <xTaskRemoveFromEventList>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d012      	beq.n	80059e2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80059bc:	4b0c      	ldr	r3, [pc, #48]	; (80059f0 <xQueueGenericReset+0xcc>)
 80059be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	f3bf 8f6f 	isb	sy
 80059cc:	e009      	b.n	80059e2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	3310      	adds	r3, #16
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7ff fef1 	bl	80057ba <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	3324      	adds	r3, #36	; 0x24
 80059dc:	4618      	mov	r0, r3
 80059de:	f7ff feec 	bl	80057ba <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80059e2:	f002 f8f7 	bl	8007bd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80059e6:	2301      	movs	r3, #1
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	e000ed04 	.word	0xe000ed04

080059f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08e      	sub	sp, #56	; 0x38
 80059f8:	af02      	add	r7, sp, #8
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
 8005a00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10a      	bne.n	8005a1e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0c:	f383 8811 	msr	BASEPRI, r3
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a1a:	bf00      	nop
 8005a1c:	e7fe      	b.n	8005a1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10a      	bne.n	8005a3a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a36:	bf00      	nop
 8005a38:	e7fe      	b.n	8005a38 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d002      	beq.n	8005a46 <xQueueGenericCreateStatic+0x52>
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <xQueueGenericCreateStatic+0x56>
 8005a46:	2301      	movs	r3, #1
 8005a48:	e000      	b.n	8005a4c <xQueueGenericCreateStatic+0x58>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10a      	bne.n	8005a66 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	623b      	str	r3, [r7, #32]
}
 8005a62:	bf00      	nop
 8005a64:	e7fe      	b.n	8005a64 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d102      	bne.n	8005a72 <xQueueGenericCreateStatic+0x7e>
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d101      	bne.n	8005a76 <xQueueGenericCreateStatic+0x82>
 8005a72:	2301      	movs	r3, #1
 8005a74:	e000      	b.n	8005a78 <xQueueGenericCreateStatic+0x84>
 8005a76:	2300      	movs	r3, #0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10a      	bne.n	8005a92 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	61fb      	str	r3, [r7, #28]
}
 8005a8e:	bf00      	nop
 8005a90:	e7fe      	b.n	8005a90 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a92:	2348      	movs	r3, #72	; 0x48
 8005a94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	2b48      	cmp	r3, #72	; 0x48
 8005a9a:	d00a      	beq.n	8005ab2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa0:	f383 8811 	msr	BASEPRI, r3
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	61bb      	str	r3, [r7, #24]
}
 8005aae:	bf00      	nop
 8005ab0:	e7fe      	b.n	8005ab0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005ab2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00d      	beq.n	8005ada <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ac6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	68b9      	ldr	r1, [r7, #8]
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 f83f 	bl	8005b58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3730      	adds	r7, #48	; 0x30
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b08a      	sub	sp, #40	; 0x28
 8005ae8:	af02      	add	r7, sp, #8
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	4613      	mov	r3, r2
 8005af0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10a      	bne.n	8005b0e <xQueueGenericCreate+0x2a>
	__asm volatile
 8005af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	613b      	str	r3, [r7, #16]
}
 8005b0a:	bf00      	nop
 8005b0c:	e7fe      	b.n	8005b0c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	fb02 f303 	mul.w	r3, r2, r3
 8005b16:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	3348      	adds	r3, #72	; 0x48
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f002 f94b 	bl	8007db8 <pvPortMalloc>
 8005b22:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d011      	beq.n	8005b4e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	3348      	adds	r3, #72	; 0x48
 8005b32:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b3c:	79fa      	ldrb	r2, [r7, #7]
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	4613      	mov	r3, r2
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	68b9      	ldr	r1, [r7, #8]
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 f805 	bl	8005b58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b4e:	69bb      	ldr	r3, [r7, #24]
	}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3720      	adds	r7, #32
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
 8005b64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d103      	bne.n	8005b74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	69ba      	ldr	r2, [r7, #24]
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	e002      	b.n	8005b7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b86:	2101      	movs	r1, #1
 8005b88:	69b8      	ldr	r0, [r7, #24]
 8005b8a:	f7ff fecb 	bl	8005924 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b8e:	bf00      	nop
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b082      	sub	sp, #8
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00e      	beq.n	8005bc2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	2200      	movs	r2, #0
 8005bba:	2100      	movs	r1, #0
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f837 	bl	8005c30 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005bc2:	bf00      	nop
 8005bc4:	3708      	adds	r7, #8
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b086      	sub	sp, #24
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	2300      	movs	r3, #0
 8005bda:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005bdc:	79fb      	ldrb	r3, [r7, #7]
 8005bde:	461a      	mov	r2, r3
 8005be0:	6939      	ldr	r1, [r7, #16]
 8005be2:	6978      	ldr	r0, [r7, #20]
 8005be4:	f7ff ff7e 	bl	8005ae4 <xQueueGenericCreate>
 8005be8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f7ff ffd3 	bl	8005b96 <prvInitialiseMutex>

		return xNewQueue;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
	}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3718      	adds	r7, #24
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b088      	sub	sp, #32
 8005bfe:	af02      	add	r7, sp, #8
 8005c00:	4603      	mov	r3, r0
 8005c02:	6039      	str	r1, [r7, #0]
 8005c04:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005c06:	2301      	movs	r3, #1
 8005c08:	617b      	str	r3, [r7, #20]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005c0e:	79fb      	ldrb	r3, [r7, #7]
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2200      	movs	r2, #0
 8005c16:	6939      	ldr	r1, [r7, #16]
 8005c18:	6978      	ldr	r0, [r7, #20]
 8005c1a:	f7ff feeb 	bl	80059f4 <xQueueGenericCreateStatic>
 8005c1e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f7ff ffb8 	bl	8005b96 <prvInitialiseMutex>

		return xNewQueue;
 8005c26:	68fb      	ldr	r3, [r7, #12]
	}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3718      	adds	r7, #24
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b08e      	sub	sp, #56	; 0x38
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
 8005c3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10a      	bne.n	8005c62 <xQueueGenericSend+0x32>
	__asm volatile
 8005c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c50:	f383 8811 	msr	BASEPRI, r3
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c5e:	bf00      	nop
 8005c60:	e7fe      	b.n	8005c60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d103      	bne.n	8005c70 <xQueueGenericSend+0x40>
 8005c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <xQueueGenericSend+0x44>
 8005c70:	2301      	movs	r3, #1
 8005c72:	e000      	b.n	8005c76 <xQueueGenericSend+0x46>
 8005c74:	2300      	movs	r3, #0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10a      	bne.n	8005c90 <xQueueGenericSend+0x60>
	__asm volatile
 8005c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c8c:	bf00      	nop
 8005c8e:	e7fe      	b.n	8005c8e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d103      	bne.n	8005c9e <xQueueGenericSend+0x6e>
 8005c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d101      	bne.n	8005ca2 <xQueueGenericSend+0x72>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e000      	b.n	8005ca4 <xQueueGenericSend+0x74>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10a      	bne.n	8005cbe <xQueueGenericSend+0x8e>
	__asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	623b      	str	r3, [r7, #32]
}
 8005cba:	bf00      	nop
 8005cbc:	e7fe      	b.n	8005cbc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cbe:	f001 fc0d 	bl	80074dc <xTaskGetSchedulerState>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d102      	bne.n	8005cce <xQueueGenericSend+0x9e>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <xQueueGenericSend+0xa2>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e000      	b.n	8005cd4 <xQueueGenericSend+0xa4>
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10a      	bne.n	8005cee <xQueueGenericSend+0xbe>
	__asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	61fb      	str	r3, [r7, #28]
}
 8005cea:	bf00      	nop
 8005cec:	e7fe      	b.n	8005cec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cee:	f001 ff41 	bl	8007b74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d302      	bcc.n	8005d04 <xQueueGenericSend+0xd4>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d129      	bne.n	8005d58 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	68b9      	ldr	r1, [r7, #8]
 8005d08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d0a:	f000 fc9a 	bl	8006642 <prvCopyDataToQueue>
 8005d0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d010      	beq.n	8005d3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1a:	3324      	adds	r3, #36	; 0x24
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f001 fa1d 	bl	800715c <xTaskRemoveFromEventList>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d013      	beq.n	8005d50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d28:	4b3f      	ldr	r3, [pc, #252]	; (8005e28 <xQueueGenericSend+0x1f8>)
 8005d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	f3bf 8f4f 	dsb	sy
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	e00a      	b.n	8005d50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d007      	beq.n	8005d50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d40:	4b39      	ldr	r3, [pc, #228]	; (8005e28 <xQueueGenericSend+0x1f8>)
 8005d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d50:	f001 ff40 	bl	8007bd4 <vPortExitCritical>
				return pdPASS;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e063      	b.n	8005e20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d103      	bne.n	8005d66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d5e:	f001 ff39 	bl	8007bd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d62:	2300      	movs	r3, #0
 8005d64:	e05c      	b.n	8005e20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d106      	bne.n	8005d7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d6c:	f107 0314 	add.w	r3, r7, #20
 8005d70:	4618      	mov	r0, r3
 8005d72:	f001 fa55 	bl	8007220 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d76:	2301      	movs	r3, #1
 8005d78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d7a:	f001 ff2b 	bl	8007bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d7e:	f000 ffe3 	bl	8006d48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d82:	f001 fef7 	bl	8007b74 <vPortEnterCritical>
 8005d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d8c:	b25b      	sxtb	r3, r3
 8005d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d92:	d103      	bne.n	8005d9c <xQueueGenericSend+0x16c>
 8005d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005da2:	b25b      	sxtb	r3, r3
 8005da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da8:	d103      	bne.n	8005db2 <xQueueGenericSend+0x182>
 8005daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005db2:	f001 ff0f 	bl	8007bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005db6:	1d3a      	adds	r2, r7, #4
 8005db8:	f107 0314 	add.w	r3, r7, #20
 8005dbc:	4611      	mov	r1, r2
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f001 fa44 	bl	800724c <xTaskCheckForTimeOut>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d124      	bne.n	8005e14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005dca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dcc:	f000 fd31 	bl	8006832 <prvIsQueueFull>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d018      	beq.n	8005e08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd8:	3310      	adds	r3, #16
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	4611      	mov	r1, r2
 8005dde:	4618      	mov	r0, r3
 8005de0:	f001 f998 	bl	8007114 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005de4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005de6:	f000 fcbc 	bl	8006762 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005dea:	f000 ffbb 	bl	8006d64 <xTaskResumeAll>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f47f af7c 	bne.w	8005cee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005df6:	4b0c      	ldr	r3, [pc, #48]	; (8005e28 <xQueueGenericSend+0x1f8>)
 8005df8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dfc:	601a      	str	r2, [r3, #0]
 8005dfe:	f3bf 8f4f 	dsb	sy
 8005e02:	f3bf 8f6f 	isb	sy
 8005e06:	e772      	b.n	8005cee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e0a:	f000 fcaa 	bl	8006762 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e0e:	f000 ffa9 	bl	8006d64 <xTaskResumeAll>
 8005e12:	e76c      	b.n	8005cee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e16:	f000 fca4 	bl	8006762 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e1a:	f000 ffa3 	bl	8006d64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3738      	adds	r7, #56	; 0x38
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	e000ed04 	.word	0xe000ed04

08005e2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b090      	sub	sp, #64	; 0x40
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
 8005e38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10a      	bne.n	8005e5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e56:	bf00      	nop
 8005e58:	e7fe      	b.n	8005e58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d103      	bne.n	8005e68 <xQueueGenericSendFromISR+0x3c>
 8005e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <xQueueGenericSendFromISR+0x40>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e000      	b.n	8005e6e <xQueueGenericSendFromISR+0x42>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10a      	bne.n	8005e88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e84:	bf00      	nop
 8005e86:	e7fe      	b.n	8005e86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d103      	bne.n	8005e96 <xQueueGenericSendFromISR+0x6a>
 8005e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d101      	bne.n	8005e9a <xQueueGenericSendFromISR+0x6e>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e000      	b.n	8005e9c <xQueueGenericSendFromISR+0x70>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10a      	bne.n	8005eb6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	623b      	str	r3, [r7, #32]
}
 8005eb2:	bf00      	nop
 8005eb4:	e7fe      	b.n	8005eb4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005eb6:	f001 ff3f 	bl	8007d38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005eba:	f3ef 8211 	mrs	r2, BASEPRI
 8005ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	61fa      	str	r2, [r7, #28]
 8005ed0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ed2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ed4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d302      	bcc.n	8005ee8 <xQueueGenericSendFromISR+0xbc>
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d12f      	bne.n	8005f48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	68b9      	ldr	r1, [r7, #8]
 8005efc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005efe:	f000 fba0 	bl	8006642 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0a:	d112      	bne.n	8005f32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d016      	beq.n	8005f42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f16:	3324      	adds	r3, #36	; 0x24
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f001 f91f 	bl	800715c <xTaskRemoveFromEventList>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00e      	beq.n	8005f42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00b      	beq.n	8005f42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	e007      	b.n	8005f42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005f36:	3301      	adds	r3, #1
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	b25a      	sxtb	r2, r3
 8005f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f42:	2301      	movs	r3, #1
 8005f44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005f46:	e001      	b.n	8005f4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3740      	adds	r7, #64	; 0x40
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b08e      	sub	sp, #56	; 0x38
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
 8005f6a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10a      	bne.n	8005f8c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	623b      	str	r3, [r7, #32]
}
 8005f88:	bf00      	nop
 8005f8a:	e7fe      	b.n	8005f8a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00a      	beq.n	8005faa <xQueueGiveFromISR+0x48>
	__asm volatile
 8005f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f98:	f383 8811 	msr	BASEPRI, r3
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	61fb      	str	r3, [r7, #28]
}
 8005fa6:	bf00      	nop
 8005fa8:	e7fe      	b.n	8005fa8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d103      	bne.n	8005fba <xQueueGiveFromISR+0x58>
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <xQueueGiveFromISR+0x5c>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e000      	b.n	8005fc0 <xQueueGiveFromISR+0x5e>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10a      	bne.n	8005fda <xQueueGiveFromISR+0x78>
	__asm volatile
 8005fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	61bb      	str	r3, [r7, #24]
}
 8005fd6:	bf00      	nop
 8005fd8:	e7fe      	b.n	8005fd8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fda:	f001 fead 	bl	8007d38 <vPortValidateInterruptPriority>
	__asm volatile
 8005fde:	f3ef 8211 	mrs	r2, BASEPRI
 8005fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	617a      	str	r2, [r7, #20]
 8005ff4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005ff6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006004:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006006:	429a      	cmp	r2, r3
 8006008:	d22b      	bcs.n	8006062 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800600a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006016:	1c5a      	adds	r2, r3, #1
 8006018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800601c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006024:	d112      	bne.n	800604c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	2b00      	cmp	r3, #0
 800602c:	d016      	beq.n	800605c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800602e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006030:	3324      	adds	r3, #36	; 0x24
 8006032:	4618      	mov	r0, r3
 8006034:	f001 f892 	bl	800715c <xTaskRemoveFromEventList>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00e      	beq.n	800605c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00b      	beq.n	800605c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	2201      	movs	r2, #1
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	e007      	b.n	800605c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800604c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006050:	3301      	adds	r3, #1
 8006052:	b2db      	uxtb	r3, r3
 8006054:	b25a      	sxtb	r2, r3
 8006056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800605c:	2301      	movs	r3, #1
 800605e:	637b      	str	r3, [r7, #52]	; 0x34
 8006060:	e001      	b.n	8006066 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006062:	2300      	movs	r3, #0
 8006064:	637b      	str	r3, [r7, #52]	; 0x34
 8006066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006068:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f383 8811 	msr	BASEPRI, r3
}
 8006070:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006074:	4618      	mov	r0, r3
 8006076:	3738      	adds	r7, #56	; 0x38
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b08c      	sub	sp, #48	; 0x30
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006088:	2300      	movs	r3, #0
 800608a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10a      	bne.n	80060ac <xQueueReceive+0x30>
	__asm volatile
 8006096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	623b      	str	r3, [r7, #32]
}
 80060a8:	bf00      	nop
 80060aa:	e7fe      	b.n	80060aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d103      	bne.n	80060ba <xQueueReceive+0x3e>
 80060b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <xQueueReceive+0x42>
 80060ba:	2301      	movs	r3, #1
 80060bc:	e000      	b.n	80060c0 <xQueueReceive+0x44>
 80060be:	2300      	movs	r3, #0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10a      	bne.n	80060da <xQueueReceive+0x5e>
	__asm volatile
 80060c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	61fb      	str	r3, [r7, #28]
}
 80060d6:	bf00      	nop
 80060d8:	e7fe      	b.n	80060d8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060da:	f001 f9ff 	bl	80074dc <xTaskGetSchedulerState>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d102      	bne.n	80060ea <xQueueReceive+0x6e>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <xQueueReceive+0x72>
 80060ea:	2301      	movs	r3, #1
 80060ec:	e000      	b.n	80060f0 <xQueueReceive+0x74>
 80060ee:	2300      	movs	r3, #0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10a      	bne.n	800610a <xQueueReceive+0x8e>
	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	61bb      	str	r3, [r7, #24]
}
 8006106:	bf00      	nop
 8006108:	e7fe      	b.n	8006108 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800610a:	f001 fd33 	bl	8007b74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800610e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006112:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	2b00      	cmp	r3, #0
 8006118:	d01f      	beq.n	800615a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800611a:	68b9      	ldr	r1, [r7, #8]
 800611c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800611e:	f000 fafa 	bl	8006716 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	1e5a      	subs	r2, r3, #1
 8006126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006128:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800612a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00f      	beq.n	8006152 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006134:	3310      	adds	r3, #16
 8006136:	4618      	mov	r0, r3
 8006138:	f001 f810 	bl	800715c <xTaskRemoveFromEventList>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d007      	beq.n	8006152 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006142:	4b3d      	ldr	r3, [pc, #244]	; (8006238 <xQueueReceive+0x1bc>)
 8006144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006152:	f001 fd3f 	bl	8007bd4 <vPortExitCritical>
				return pdPASS;
 8006156:	2301      	movs	r3, #1
 8006158:	e069      	b.n	800622e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d103      	bne.n	8006168 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006160:	f001 fd38 	bl	8007bd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006164:	2300      	movs	r3, #0
 8006166:	e062      	b.n	800622e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616a:	2b00      	cmp	r3, #0
 800616c:	d106      	bne.n	800617c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800616e:	f107 0310 	add.w	r3, r7, #16
 8006172:	4618      	mov	r0, r3
 8006174:	f001 f854 	bl	8007220 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006178:	2301      	movs	r3, #1
 800617a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800617c:	f001 fd2a 	bl	8007bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006180:	f000 fde2 	bl	8006d48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006184:	f001 fcf6 	bl	8007b74 <vPortEnterCritical>
 8006188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800618e:	b25b      	sxtb	r3, r3
 8006190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006194:	d103      	bne.n	800619e <xQueueReceive+0x122>
 8006196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006198:	2200      	movs	r2, #0
 800619a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800619e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061a4:	b25b      	sxtb	r3, r3
 80061a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061aa:	d103      	bne.n	80061b4 <xQueueReceive+0x138>
 80061ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061b4:	f001 fd0e 	bl	8007bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061b8:	1d3a      	adds	r2, r7, #4
 80061ba:	f107 0310 	add.w	r3, r7, #16
 80061be:	4611      	mov	r1, r2
 80061c0:	4618      	mov	r0, r3
 80061c2:	f001 f843 	bl	800724c <xTaskCheckForTimeOut>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d123      	bne.n	8006214 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061ce:	f000 fb1a 	bl	8006806 <prvIsQueueEmpty>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d017      	beq.n	8006208 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061da:	3324      	adds	r3, #36	; 0x24
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	4611      	mov	r1, r2
 80061e0:	4618      	mov	r0, r3
 80061e2:	f000 ff97 	bl	8007114 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061e8:	f000 fabb 	bl	8006762 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061ec:	f000 fdba 	bl	8006d64 <xTaskResumeAll>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d189      	bne.n	800610a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80061f6:	4b10      	ldr	r3, [pc, #64]	; (8006238 <xQueueReceive+0x1bc>)
 80061f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061fc:	601a      	str	r2, [r3, #0]
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	e780      	b.n	800610a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006208:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800620a:	f000 faaa 	bl	8006762 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800620e:	f000 fda9 	bl	8006d64 <xTaskResumeAll>
 8006212:	e77a      	b.n	800610a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006216:	f000 faa4 	bl	8006762 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800621a:	f000 fda3 	bl	8006d64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800621e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006220:	f000 faf1 	bl	8006806 <prvIsQueueEmpty>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	f43f af6f 	beq.w	800610a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800622c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800622e:	4618      	mov	r0, r3
 8006230:	3730      	adds	r7, #48	; 0x30
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	e000ed04 	.word	0xe000ed04

0800623c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b08e      	sub	sp, #56	; 0x38
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006246:	2300      	movs	r3, #0
 8006248:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800624e:	2300      	movs	r3, #0
 8006250:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10a      	bne.n	800626e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625c:	f383 8811 	msr	BASEPRI, r3
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	623b      	str	r3, [r7, #32]
}
 800626a:	bf00      	nop
 800626c:	e7fe      	b.n	800626c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800626e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00a      	beq.n	800628c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	61fb      	str	r3, [r7, #28]
}
 8006288:	bf00      	nop
 800628a:	e7fe      	b.n	800628a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800628c:	f001 f926 	bl	80074dc <xTaskGetSchedulerState>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d102      	bne.n	800629c <xQueueSemaphoreTake+0x60>
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <xQueueSemaphoreTake+0x64>
 800629c:	2301      	movs	r3, #1
 800629e:	e000      	b.n	80062a2 <xQueueSemaphoreTake+0x66>
 80062a0:	2300      	movs	r3, #0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10a      	bne.n	80062bc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80062a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062aa:	f383 8811 	msr	BASEPRI, r3
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	61bb      	str	r3, [r7, #24]
}
 80062b8:	bf00      	nop
 80062ba:	e7fe      	b.n	80062ba <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062bc:	f001 fc5a 	bl	8007b74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80062c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80062c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d024      	beq.n	8006316 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80062cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ce:	1e5a      	subs	r2, r3, #1
 80062d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d104      	bne.n	80062e6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80062dc:	f001 faa6 	bl	800782c <pvTaskIncrementMutexHeldCount>
 80062e0:	4602      	mov	r2, r0
 80062e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00f      	beq.n	800630e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f0:	3310      	adds	r3, #16
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 ff32 	bl	800715c <xTaskRemoveFromEventList>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d007      	beq.n	800630e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062fe:	4b54      	ldr	r3, [pc, #336]	; (8006450 <xQueueSemaphoreTake+0x214>)
 8006300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800630e:	f001 fc61 	bl	8007bd4 <vPortExitCritical>
				return pdPASS;
 8006312:	2301      	movs	r3, #1
 8006314:	e097      	b.n	8006446 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d111      	bne.n	8006340 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800631c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00a      	beq.n	8006338 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006326:	f383 8811 	msr	BASEPRI, r3
 800632a:	f3bf 8f6f 	isb	sy
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	617b      	str	r3, [r7, #20]
}
 8006334:	bf00      	nop
 8006336:	e7fe      	b.n	8006336 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006338:	f001 fc4c 	bl	8007bd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800633c:	2300      	movs	r3, #0
 800633e:	e082      	b.n	8006446 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006342:	2b00      	cmp	r3, #0
 8006344:	d106      	bne.n	8006354 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006346:	f107 030c 	add.w	r3, r7, #12
 800634a:	4618      	mov	r0, r3
 800634c:	f000 ff68 	bl	8007220 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006350:	2301      	movs	r3, #1
 8006352:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006354:	f001 fc3e 	bl	8007bd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006358:	f000 fcf6 	bl	8006d48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800635c:	f001 fc0a 	bl	8007b74 <vPortEnterCritical>
 8006360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006362:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006366:	b25b      	sxtb	r3, r3
 8006368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800636c:	d103      	bne.n	8006376 <xQueueSemaphoreTake+0x13a>
 800636e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006378:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800637c:	b25b      	sxtb	r3, r3
 800637e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006382:	d103      	bne.n	800638c <xQueueSemaphoreTake+0x150>
 8006384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800638c:	f001 fc22 	bl	8007bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006390:	463a      	mov	r2, r7
 8006392:	f107 030c 	add.w	r3, r7, #12
 8006396:	4611      	mov	r1, r2
 8006398:	4618      	mov	r0, r3
 800639a:	f000 ff57 	bl	800724c <xTaskCheckForTimeOut>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d132      	bne.n	800640a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063a6:	f000 fa2e 	bl	8006806 <prvIsQueueEmpty>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d026      	beq.n	80063fe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d109      	bne.n	80063cc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80063b8:	f001 fbdc 	bl	8007b74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f001 f8a9 	bl	8007518 <xTaskPriorityInherit>
 80063c6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80063c8:	f001 fc04 	bl	8007bd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80063cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ce:	3324      	adds	r3, #36	; 0x24
 80063d0:	683a      	ldr	r2, [r7, #0]
 80063d2:	4611      	mov	r1, r2
 80063d4:	4618      	mov	r0, r3
 80063d6:	f000 fe9d 	bl	8007114 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80063da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063dc:	f000 f9c1 	bl	8006762 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80063e0:	f000 fcc0 	bl	8006d64 <xTaskResumeAll>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f47f af68 	bne.w	80062bc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80063ec:	4b18      	ldr	r3, [pc, #96]	; (8006450 <xQueueSemaphoreTake+0x214>)
 80063ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	e75e      	b.n	80062bc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80063fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006400:	f000 f9af 	bl	8006762 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006404:	f000 fcae 	bl	8006d64 <xTaskResumeAll>
 8006408:	e758      	b.n	80062bc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800640a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800640c:	f000 f9a9 	bl	8006762 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006410:	f000 fca8 	bl	8006d64 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006414:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006416:	f000 f9f6 	bl	8006806 <prvIsQueueEmpty>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	f43f af4d 	beq.w	80062bc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00d      	beq.n	8006444 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006428:	f001 fba4 	bl	8007b74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800642c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800642e:	f000 f8f0 	bl	8006612 <prvGetDisinheritPriorityAfterTimeout>
 8006432:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800643a:	4618      	mov	r0, r3
 800643c:	f001 f968 	bl	8007710 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006440:	f001 fbc8 	bl	8007bd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006444:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006446:	4618      	mov	r0, r3
 8006448:	3738      	adds	r7, #56	; 0x38
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	e000ed04 	.word	0xe000ed04

08006454 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b08e      	sub	sp, #56	; 0x38
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10a      	bne.n	8006480 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800646a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646e:	f383 8811 	msr	BASEPRI, r3
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	f3bf 8f4f 	dsb	sy
 800647a:	623b      	str	r3, [r7, #32]
}
 800647c:	bf00      	nop
 800647e:	e7fe      	b.n	800647e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d103      	bne.n	800648e <xQueueReceiveFromISR+0x3a>
 8006486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <xQueueReceiveFromISR+0x3e>
 800648e:	2301      	movs	r3, #1
 8006490:	e000      	b.n	8006494 <xQueueReceiveFromISR+0x40>
 8006492:	2300      	movs	r3, #0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10a      	bne.n	80064ae <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649c:	f383 8811 	msr	BASEPRI, r3
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	61fb      	str	r3, [r7, #28]
}
 80064aa:	bf00      	nop
 80064ac:	e7fe      	b.n	80064ac <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064ae:	f001 fc43 	bl	8007d38 <vPortValidateInterruptPriority>
	__asm volatile
 80064b2:	f3ef 8211 	mrs	r2, BASEPRI
 80064b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	61ba      	str	r2, [r7, #24]
 80064c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80064ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d02f      	beq.n	800653a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80064da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80064e4:	68b9      	ldr	r1, [r7, #8]
 80064e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064e8:	f000 f915 	bl	8006716 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ee:	1e5a      	subs	r2, r3, #1
 80064f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80064f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80064f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fc:	d112      	bne.n	8006524 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d016      	beq.n	8006534 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006508:	3310      	adds	r3, #16
 800650a:	4618      	mov	r0, r3
 800650c:	f000 fe26 	bl	800715c <xTaskRemoveFromEventList>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00e      	beq.n	8006534 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00b      	beq.n	8006534 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	e007      	b.n	8006534 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006528:	3301      	adds	r3, #1
 800652a:	b2db      	uxtb	r3, r3
 800652c:	b25a      	sxtb	r2, r3
 800652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006534:	2301      	movs	r3, #1
 8006536:	637b      	str	r3, [r7, #52]	; 0x34
 8006538:	e001      	b.n	800653e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800653a:	2300      	movs	r3, #0
 800653c:	637b      	str	r3, [r7, #52]	; 0x34
 800653e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006540:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	f383 8811 	msr	BASEPRI, r3
}
 8006548:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800654a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800654c:	4618      	mov	r0, r3
 800654e:	3738      	adds	r7, #56	; 0x38
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10a      	bne.n	8006578 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8006562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	60bb      	str	r3, [r7, #8]
}
 8006574:	bf00      	nop
 8006576:	e7fe      	b.n	8006576 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006578:	f001 fafc 	bl	8007b74 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006580:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006582:	f001 fb27 	bl	8007bd4 <vPortExitCritical>

	return uxReturn;
 8006586:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006588:	4618      	mov	r0, r3
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10a      	bne.n	80065b8 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80065a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	60fb      	str	r3, [r7, #12]
}
 80065b4:	bf00      	nop
 80065b6:	e7fe      	b.n	80065b6 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065bc:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80065be:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80065c0:	4618      	mov	r0, r3
 80065c2:	371c      	adds	r7, #28
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10a      	bne.n	80065f4 <vQueueDelete+0x28>
	__asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	60bb      	str	r3, [r7, #8]
}
 80065f0:	bf00      	nop
 80065f2:	e7fe      	b.n	80065f2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 f935 	bl	8006864 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006600:	2b00      	cmp	r3, #0
 8006602:	d102      	bne.n	800660a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f001 fca3 	bl	8007f50 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800660a:	bf00      	nop
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006612:	b480      	push	{r7}
 8006614:	b085      	sub	sp, #20
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	2b00      	cmp	r3, #0
 8006620:	d006      	beq.n	8006630 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f1c3 0307 	rsb	r3, r3, #7
 800662c:	60fb      	str	r3, [r7, #12]
 800662e:	e001      	b.n	8006634 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006630:	2300      	movs	r3, #0
 8006632:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006634:	68fb      	ldr	r3, [r7, #12]
	}
 8006636:	4618      	mov	r0, r3
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b086      	sub	sp, #24
 8006646:	af00      	add	r7, sp, #0
 8006648:	60f8      	str	r0, [r7, #12]
 800664a:	60b9      	str	r1, [r7, #8]
 800664c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800664e:	2300      	movs	r3, #0
 8006650:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006656:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10d      	bne.n	800667c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d14d      	bne.n	8006704 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	4618      	mov	r0, r3
 800666e:	f000 ffc9 	bl	8007604 <xTaskPriorityDisinherit>
 8006672:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	609a      	str	r2, [r3, #8]
 800667a:	e043      	b.n	8006704 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d119      	bne.n	80066b6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6858      	ldr	r0, [r3, #4]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668a:	461a      	mov	r2, r3
 800668c:	68b9      	ldr	r1, [r7, #8]
 800668e:	f012 fd93 	bl	80191b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669a:	441a      	add	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d32b      	bcc.n	8006704 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	605a      	str	r2, [r3, #4]
 80066b4:	e026      	b.n	8006704 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	68d8      	ldr	r0, [r3, #12]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	461a      	mov	r2, r3
 80066c0:	68b9      	ldr	r1, [r7, #8]
 80066c2:	f012 fd79 	bl	80191b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	68da      	ldr	r2, [r3, #12]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ce:	425b      	negs	r3, r3
 80066d0:	441a      	add	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	68da      	ldr	r2, [r3, #12]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d207      	bcs.n	80066f2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	689a      	ldr	r2, [r3, #8]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ea:	425b      	negs	r3, r3
 80066ec:	441a      	add	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d105      	bne.n	8006704 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d002      	beq.n	8006704 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	3b01      	subs	r3, #1
 8006702:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	1c5a      	adds	r2, r3, #1
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800670c:	697b      	ldr	r3, [r7, #20]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b082      	sub	sp, #8
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006724:	2b00      	cmp	r3, #0
 8006726:	d018      	beq.n	800675a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68da      	ldr	r2, [r3, #12]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006730:	441a      	add	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68da      	ldr	r2, [r3, #12]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	429a      	cmp	r2, r3
 8006740:	d303      	bcc.n	800674a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68d9      	ldr	r1, [r3, #12]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006752:	461a      	mov	r2, r3
 8006754:	6838      	ldr	r0, [r7, #0]
 8006756:	f012 fd2f 	bl	80191b8 <memcpy>
	}
}
 800675a:	bf00      	nop
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b084      	sub	sp, #16
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800676a:	f001 fa03 	bl	8007b74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006774:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006776:	e011      	b.n	800679c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677c:	2b00      	cmp	r3, #0
 800677e:	d012      	beq.n	80067a6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3324      	adds	r3, #36	; 0x24
 8006784:	4618      	mov	r0, r3
 8006786:	f000 fce9 	bl	800715c <xTaskRemoveFromEventList>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006790:	f000 fdbe 	bl	8007310 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006794:	7bfb      	ldrb	r3, [r7, #15]
 8006796:	3b01      	subs	r3, #1
 8006798:	b2db      	uxtb	r3, r3
 800679a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800679c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	dce9      	bgt.n	8006778 <prvUnlockQueue+0x16>
 80067a4:	e000      	b.n	80067a8 <prvUnlockQueue+0x46>
					break;
 80067a6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	22ff      	movs	r2, #255	; 0xff
 80067ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80067b0:	f001 fa10 	bl	8007bd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067b4:	f001 f9de 	bl	8007b74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067be:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067c0:	e011      	b.n	80067e6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d012      	beq.n	80067f0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	3310      	adds	r3, #16
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 fcc4 	bl	800715c <xTaskRemoveFromEventList>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d001      	beq.n	80067de <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80067da:	f000 fd99 	bl	8007310 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80067de:	7bbb      	ldrb	r3, [r7, #14]
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	dce9      	bgt.n	80067c2 <prvUnlockQueue+0x60>
 80067ee:	e000      	b.n	80067f2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80067f0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	22ff      	movs	r2, #255	; 0xff
 80067f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80067fa:	f001 f9eb 	bl	8007bd4 <vPortExitCritical>
}
 80067fe:	bf00      	nop
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b084      	sub	sp, #16
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800680e:	f001 f9b1 	bl	8007b74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006816:	2b00      	cmp	r3, #0
 8006818:	d102      	bne.n	8006820 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800681a:	2301      	movs	r3, #1
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	e001      	b.n	8006824 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006820:	2300      	movs	r3, #0
 8006822:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006824:	f001 f9d6 	bl	8007bd4 <vPortExitCritical>

	return xReturn;
 8006828:	68fb      	ldr	r3, [r7, #12]
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b084      	sub	sp, #16
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800683a:	f001 f99b 	bl	8007b74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006846:	429a      	cmp	r2, r3
 8006848:	d102      	bne.n	8006850 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800684a:	2301      	movs	r3, #1
 800684c:	60fb      	str	r3, [r7, #12]
 800684e:	e001      	b.n	8006854 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006850:	2300      	movs	r3, #0
 8006852:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006854:	f001 f9be 	bl	8007bd4 <vPortExitCritical>

	return xReturn;
 8006858:	68fb      	ldr	r3, [r7, #12]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
	...

08006864 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800686c:	2300      	movs	r3, #0
 800686e:	60fb      	str	r3, [r7, #12]
 8006870:	e016      	b.n	80068a0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006872:	4a10      	ldr	r2, [pc, #64]	; (80068b4 <vQueueUnregisterQueue+0x50>)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	4413      	add	r3, r2
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	429a      	cmp	r2, r3
 8006880:	d10b      	bne.n	800689a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006882:	4a0c      	ldr	r2, [pc, #48]	; (80068b4 <vQueueUnregisterQueue+0x50>)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2100      	movs	r1, #0
 8006888:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800688c:	4a09      	ldr	r2, [pc, #36]	; (80068b4 <vQueueUnregisterQueue+0x50>)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	00db      	lsls	r3, r3, #3
 8006892:	4413      	add	r3, r2
 8006894:	2200      	movs	r2, #0
 8006896:	605a      	str	r2, [r3, #4]
				break;
 8006898:	e006      	b.n	80068a8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	3301      	adds	r3, #1
 800689e:	60fb      	str	r3, [r7, #12]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2b07      	cmp	r3, #7
 80068a4:	d9e5      	bls.n	8006872 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80068a6:	bf00      	nop
 80068a8:	bf00      	nop
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	20005218 	.word	0x20005218

080068b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b08e      	sub	sp, #56	; 0x38
 80068bc:	af04      	add	r7, sp, #16
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
 80068c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80068c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10a      	bne.n	80068e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80068cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d0:	f383 8811 	msr	BASEPRI, r3
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	623b      	str	r3, [r7, #32]
}
 80068de:	bf00      	nop
 80068e0:	e7fe      	b.n	80068e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80068e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10a      	bne.n	80068fe <xTaskCreateStatic+0x46>
	__asm volatile
 80068e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ec:	f383 8811 	msr	BASEPRI, r3
 80068f0:	f3bf 8f6f 	isb	sy
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	61fb      	str	r3, [r7, #28]
}
 80068fa:	bf00      	nop
 80068fc:	e7fe      	b.n	80068fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80068fe:	23a0      	movs	r3, #160	; 0xa0
 8006900:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	2ba0      	cmp	r3, #160	; 0xa0
 8006906:	d00a      	beq.n	800691e <xTaskCreateStatic+0x66>
	__asm volatile
 8006908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690c:	f383 8811 	msr	BASEPRI, r3
 8006910:	f3bf 8f6f 	isb	sy
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	61bb      	str	r3, [r7, #24]
}
 800691a:	bf00      	nop
 800691c:	e7fe      	b.n	800691c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800691e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006922:	2b00      	cmp	r3, #0
 8006924:	d01e      	beq.n	8006964 <xTaskCreateStatic+0xac>
 8006926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006928:	2b00      	cmp	r3, #0
 800692a:	d01b      	beq.n	8006964 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800692c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006934:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006938:	2202      	movs	r2, #2
 800693a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800693e:	2300      	movs	r3, #0
 8006940:	9303      	str	r3, [sp, #12]
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	9302      	str	r3, [sp, #8]
 8006946:	f107 0314 	add.w	r3, r7, #20
 800694a:	9301      	str	r3, [sp, #4]
 800694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	68b9      	ldr	r1, [r7, #8]
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f000 f850 	bl	80069fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800695c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800695e:	f000 f8eb 	bl	8006b38 <prvAddNewTaskToReadyList>
 8006962:	e001      	b.n	8006968 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006964:	2300      	movs	r3, #0
 8006966:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006968:	697b      	ldr	r3, [r7, #20]
	}
 800696a:	4618      	mov	r0, r3
 800696c:	3728      	adds	r7, #40	; 0x28
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006972:	b580      	push	{r7, lr}
 8006974:	b08c      	sub	sp, #48	; 0x30
 8006976:	af04      	add	r7, sp, #16
 8006978:	60f8      	str	r0, [r7, #12]
 800697a:	60b9      	str	r1, [r7, #8]
 800697c:	603b      	str	r3, [r7, #0]
 800697e:	4613      	mov	r3, r2
 8006980:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006982:	88fb      	ldrh	r3, [r7, #6]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4618      	mov	r0, r3
 8006988:	f001 fa16 	bl	8007db8 <pvPortMalloc>
 800698c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00e      	beq.n	80069b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006994:	20a0      	movs	r0, #160	; 0xa0
 8006996:	f001 fa0f 	bl	8007db8 <pvPortMalloc>
 800699a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	631a      	str	r2, [r3, #48]	; 0x30
 80069a8:	e005      	b.n	80069b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80069aa:	6978      	ldr	r0, [r7, #20]
 80069ac:	f001 fad0 	bl	8007f50 <vPortFree>
 80069b0:	e001      	b.n	80069b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80069b2:	2300      	movs	r3, #0
 80069b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d017      	beq.n	80069ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80069c4:	88fa      	ldrh	r2, [r7, #6]
 80069c6:	2300      	movs	r3, #0
 80069c8:	9303      	str	r3, [sp, #12]
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	9302      	str	r3, [sp, #8]
 80069ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d0:	9301      	str	r3, [sp, #4]
 80069d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	68b9      	ldr	r1, [r7, #8]
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f000 f80e 	bl	80069fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069e0:	69f8      	ldr	r0, [r7, #28]
 80069e2:	f000 f8a9 	bl	8006b38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80069e6:	2301      	movs	r3, #1
 80069e8:	61bb      	str	r3, [r7, #24]
 80069ea:	e002      	b.n	80069f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80069ec:	f04f 33ff 	mov.w	r3, #4294967295
 80069f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80069f2:	69bb      	ldr	r3, [r7, #24]
	}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3720      	adds	r7, #32
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b088      	sub	sp, #32
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
 8006a08:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a14:	3b01      	subs	r3, #1
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	f023 0307 	bic.w	r3, r3, #7
 8006a22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	f003 0307 	and.w	r3, r3, #7
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00a      	beq.n	8006a44 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	617b      	str	r3, [r7, #20]
}
 8006a40:	bf00      	nop
 8006a42:	e7fe      	b.n	8006a42 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d01f      	beq.n	8006a8a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	61fb      	str	r3, [r7, #28]
 8006a4e:	e012      	b.n	8006a76 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	4413      	add	r3, r2
 8006a56:	7819      	ldrb	r1, [r3, #0]
 8006a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	3334      	adds	r3, #52	; 0x34
 8006a60:	460a      	mov	r2, r1
 8006a62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	4413      	add	r3, r2
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d006      	beq.n	8006a7e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	3301      	adds	r3, #1
 8006a74:	61fb      	str	r3, [r7, #28]
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	2b0f      	cmp	r3, #15
 8006a7a:	d9e9      	bls.n	8006a50 <prvInitialiseNewTask+0x54>
 8006a7c:	e000      	b.n	8006a80 <prvInitialiseNewTask+0x84>
			{
				break;
 8006a7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a88:	e003      	b.n	8006a92 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a94:	2b06      	cmp	r3, #6
 8006a96:	d901      	bls.n	8006a9c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a98:	2306      	movs	r3, #6
 8006a9a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aa0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aa6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aaa:	2200      	movs	r2, #0
 8006aac:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fe fea1 	bl	80057fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aba:	3318      	adds	r3, #24
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7fe fe9c 	bl	80057fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ac6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aca:	f1c3 0207 	rsb	r2, r3, #7
 8006ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ad6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ada:	2200      	movs	r2, #0
 8006adc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aea:	334c      	adds	r3, #76	; 0x4c
 8006aec:	224c      	movs	r2, #76	; 0x4c
 8006aee:	2100      	movs	r1, #0
 8006af0:	4618      	mov	r0, r3
 8006af2:	f012 fa00 	bl	8018ef6 <memset>
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	4a0c      	ldr	r2, [pc, #48]	; (8006b2c <prvInitialiseNewTask+0x130>)
 8006afa:	651a      	str	r2, [r3, #80]	; 0x50
 8006afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afe:	4a0c      	ldr	r2, [pc, #48]	; (8006b30 <prvInitialiseNewTask+0x134>)
 8006b00:	655a      	str	r2, [r3, #84]	; 0x54
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	4a0b      	ldr	r2, [pc, #44]	; (8006b34 <prvInitialiseNewTask+0x138>)
 8006b06:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	68f9      	ldr	r1, [r7, #12]
 8006b0c:	69b8      	ldr	r0, [r7, #24]
 8006b0e:	f000 ff07 	bl	8007920 <pxPortInitialiseStack>
 8006b12:	4602      	mov	r2, r0
 8006b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b16:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d002      	beq.n	8006b24 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b22:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b24:	bf00      	nop
 8006b26:	3720      	adds	r7, #32
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	20011104 	.word	0x20011104
 8006b30:	2001116c 	.word	0x2001116c
 8006b34:	200111d4 	.word	0x200111d4

08006b38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b40:	f001 f818 	bl	8007b74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b44:	4b2a      	ldr	r3, [pc, #168]	; (8006bf0 <prvAddNewTaskToReadyList+0xb8>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	4a29      	ldr	r2, [pc, #164]	; (8006bf0 <prvAddNewTaskToReadyList+0xb8>)
 8006b4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b4e:	4b29      	ldr	r3, [pc, #164]	; (8006bf4 <prvAddNewTaskToReadyList+0xbc>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d109      	bne.n	8006b6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b56:	4a27      	ldr	r2, [pc, #156]	; (8006bf4 <prvAddNewTaskToReadyList+0xbc>)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b5c:	4b24      	ldr	r3, [pc, #144]	; (8006bf0 <prvAddNewTaskToReadyList+0xb8>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d110      	bne.n	8006b86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006b64:	f000 fbf8 	bl	8007358 <prvInitialiseTaskLists>
 8006b68:	e00d      	b.n	8006b86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006b6a:	4b23      	ldr	r3, [pc, #140]	; (8006bf8 <prvAddNewTaskToReadyList+0xc0>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d109      	bne.n	8006b86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b72:	4b20      	ldr	r3, [pc, #128]	; (8006bf4 <prvAddNewTaskToReadyList+0xbc>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d802      	bhi.n	8006b86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006b80:	4a1c      	ldr	r2, [pc, #112]	; (8006bf4 <prvAddNewTaskToReadyList+0xbc>)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006b86:	4b1d      	ldr	r3, [pc, #116]	; (8006bfc <prvAddNewTaskToReadyList+0xc4>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	4a1b      	ldr	r2, [pc, #108]	; (8006bfc <prvAddNewTaskToReadyList+0xc4>)
 8006b8e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b94:	2201      	movs	r2, #1
 8006b96:	409a      	lsls	r2, r3
 8006b98:	4b19      	ldr	r3, [pc, #100]	; (8006c00 <prvAddNewTaskToReadyList+0xc8>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	4a18      	ldr	r2, [pc, #96]	; (8006c00 <prvAddNewTaskToReadyList+0xc8>)
 8006ba0:	6013      	str	r3, [r2, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4a15      	ldr	r2, [pc, #84]	; (8006c04 <prvAddNewTaskToReadyList+0xcc>)
 8006bb0:	441a      	add	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	4610      	mov	r0, r2
 8006bba:	f7fe fe2b 	bl	8005814 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006bbe:	f001 f809 	bl	8007bd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006bc2:	4b0d      	ldr	r3, [pc, #52]	; (8006bf8 <prvAddNewTaskToReadyList+0xc0>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00e      	beq.n	8006be8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006bca:	4b0a      	ldr	r3, [pc, #40]	; (8006bf4 <prvAddNewTaskToReadyList+0xbc>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d207      	bcs.n	8006be8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006bd8:	4b0b      	ldr	r3, [pc, #44]	; (8006c08 <prvAddNewTaskToReadyList+0xd0>)
 8006bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bde:	601a      	str	r2, [r3, #0]
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006be8:	bf00      	nop
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	20005358 	.word	0x20005358
 8006bf4:	20005258 	.word	0x20005258
 8006bf8:	20005364 	.word	0x20005364
 8006bfc:	20005374 	.word	0x20005374
 8006c00:	20005360 	.word	0x20005360
 8006c04:	2000525c 	.word	0x2000525c
 8006c08:	e000ed04 	.word	0xe000ed04

08006c0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c14:	2300      	movs	r3, #0
 8006c16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d017      	beq.n	8006c4e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c1e:	4b13      	ldr	r3, [pc, #76]	; (8006c6c <vTaskDelay+0x60>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00a      	beq.n	8006c3c <vTaskDelay+0x30>
	__asm volatile
 8006c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	60bb      	str	r3, [r7, #8]
}
 8006c38:	bf00      	nop
 8006c3a:	e7fe      	b.n	8006c3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006c3c:	f000 f884 	bl	8006d48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c40:	2100      	movs	r1, #0
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fe06 	bl	8007854 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c48:	f000 f88c 	bl	8006d64 <xTaskResumeAll>
 8006c4c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d107      	bne.n	8006c64 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006c54:	4b06      	ldr	r3, [pc, #24]	; (8006c70 <vTaskDelay+0x64>)
 8006c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c5a:	601a      	str	r2, [r3, #0]
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c64:	bf00      	nop
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	20005380 	.word	0x20005380
 8006c70:	e000ed04 	.word	0xe000ed04

08006c74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b08a      	sub	sp, #40	; 0x28
 8006c78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c82:	463a      	mov	r2, r7
 8006c84:	1d39      	adds	r1, r7, #4
 8006c86:	f107 0308 	add.w	r3, r7, #8
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7f9 fc96 	bl	80005bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	9202      	str	r2, [sp, #8]
 8006c98:	9301      	str	r3, [sp, #4]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	460a      	mov	r2, r1
 8006ca2:	4921      	ldr	r1, [pc, #132]	; (8006d28 <vTaskStartScheduler+0xb4>)
 8006ca4:	4821      	ldr	r0, [pc, #132]	; (8006d2c <vTaskStartScheduler+0xb8>)
 8006ca6:	f7ff fe07 	bl	80068b8 <xTaskCreateStatic>
 8006caa:	4603      	mov	r3, r0
 8006cac:	4a20      	ldr	r2, [pc, #128]	; (8006d30 <vTaskStartScheduler+0xbc>)
 8006cae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006cb0:	4b1f      	ldr	r3, [pc, #124]	; (8006d30 <vTaskStartScheduler+0xbc>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d002      	beq.n	8006cbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	617b      	str	r3, [r7, #20]
 8006cbc:	e001      	b.n	8006cc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d11b      	bne.n	8006d00 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ccc:	f383 8811 	msr	BASEPRI, r3
 8006cd0:	f3bf 8f6f 	isb	sy
 8006cd4:	f3bf 8f4f 	dsb	sy
 8006cd8:	613b      	str	r3, [r7, #16]
}
 8006cda:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006cdc:	4b15      	ldr	r3, [pc, #84]	; (8006d34 <vTaskStartScheduler+0xc0>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	334c      	adds	r3, #76	; 0x4c
 8006ce2:	4a15      	ldr	r2, [pc, #84]	; (8006d38 <vTaskStartScheduler+0xc4>)
 8006ce4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006ce6:	4b15      	ldr	r3, [pc, #84]	; (8006d3c <vTaskStartScheduler+0xc8>)
 8006ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006cee:	4b14      	ldr	r3, [pc, #80]	; (8006d40 <vTaskStartScheduler+0xcc>)
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006cf4:	4b13      	ldr	r3, [pc, #76]	; (8006d44 <vTaskStartScheduler+0xd0>)
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006cfa:	f000 fe99 	bl	8007a30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006cfe:	e00e      	b.n	8006d1e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d06:	d10a      	bne.n	8006d1e <vTaskStartScheduler+0xaa>
	__asm volatile
 8006d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0c:	f383 8811 	msr	BASEPRI, r3
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	60fb      	str	r3, [r7, #12]
}
 8006d1a:	bf00      	nop
 8006d1c:	e7fe      	b.n	8006d1c <vTaskStartScheduler+0xa8>
}
 8006d1e:	bf00      	nop
 8006d20:	3718      	adds	r7, #24
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	0801a328 	.word	0x0801a328
 8006d2c:	08007329 	.word	0x08007329
 8006d30:	2000537c 	.word	0x2000537c
 8006d34:	20005258 	.word	0x20005258
 8006d38:	2000008c 	.word	0x2000008c
 8006d3c:	20005378 	.word	0x20005378
 8006d40:	20005364 	.word	0x20005364
 8006d44:	2000535c 	.word	0x2000535c

08006d48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d48:	b480      	push	{r7}
 8006d4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006d4c:	4b04      	ldr	r3, [pc, #16]	; (8006d60 <vTaskSuspendAll+0x18>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	3301      	adds	r3, #1
 8006d52:	4a03      	ldr	r2, [pc, #12]	; (8006d60 <vTaskSuspendAll+0x18>)
 8006d54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006d56:	bf00      	nop
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	20005380 	.word	0x20005380

08006d64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d72:	4b41      	ldr	r3, [pc, #260]	; (8006e78 <xTaskResumeAll+0x114>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10a      	bne.n	8006d90 <xTaskResumeAll+0x2c>
	__asm volatile
 8006d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	603b      	str	r3, [r7, #0]
}
 8006d8c:	bf00      	nop
 8006d8e:	e7fe      	b.n	8006d8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d90:	f000 fef0 	bl	8007b74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d94:	4b38      	ldr	r3, [pc, #224]	; (8006e78 <xTaskResumeAll+0x114>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	4a37      	ldr	r2, [pc, #220]	; (8006e78 <xTaskResumeAll+0x114>)
 8006d9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d9e:	4b36      	ldr	r3, [pc, #216]	; (8006e78 <xTaskResumeAll+0x114>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d161      	bne.n	8006e6a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006da6:	4b35      	ldr	r3, [pc, #212]	; (8006e7c <xTaskResumeAll+0x118>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d05d      	beq.n	8006e6a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006dae:	e02e      	b.n	8006e0e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006db0:	4b33      	ldr	r3, [pc, #204]	; (8006e80 <xTaskResumeAll+0x11c>)
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	3318      	adds	r3, #24
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7fe fd86 	bl	80058ce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7fe fd81 	bl	80058ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	409a      	lsls	r2, r3
 8006dd4:	4b2b      	ldr	r3, [pc, #172]	; (8006e84 <xTaskResumeAll+0x120>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	4a2a      	ldr	r2, [pc, #168]	; (8006e84 <xTaskResumeAll+0x120>)
 8006ddc:	6013      	str	r3, [r2, #0]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de2:	4613      	mov	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4a27      	ldr	r2, [pc, #156]	; (8006e88 <xTaskResumeAll+0x124>)
 8006dec:	441a      	add	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	3304      	adds	r3, #4
 8006df2:	4619      	mov	r1, r3
 8006df4:	4610      	mov	r0, r2
 8006df6:	f7fe fd0d 	bl	8005814 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dfe:	4b23      	ldr	r3, [pc, #140]	; (8006e8c <xTaskResumeAll+0x128>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d302      	bcc.n	8006e0e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006e08:	4b21      	ldr	r3, [pc, #132]	; (8006e90 <xTaskResumeAll+0x12c>)
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e0e:	4b1c      	ldr	r3, [pc, #112]	; (8006e80 <xTaskResumeAll+0x11c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1cc      	bne.n	8006db0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e1c:	f000 fb3e 	bl	800749c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006e20:	4b1c      	ldr	r3, [pc, #112]	; (8006e94 <xTaskResumeAll+0x130>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d010      	beq.n	8006e4e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e2c:	f000 f858 	bl	8006ee0 <xTaskIncrementTick>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d002      	beq.n	8006e3c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006e36:	4b16      	ldr	r3, [pc, #88]	; (8006e90 <xTaskResumeAll+0x12c>)
 8006e38:	2201      	movs	r2, #1
 8006e3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1f1      	bne.n	8006e2c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006e48:	4b12      	ldr	r3, [pc, #72]	; (8006e94 <xTaskResumeAll+0x130>)
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006e4e:	4b10      	ldr	r3, [pc, #64]	; (8006e90 <xTaskResumeAll+0x12c>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d009      	beq.n	8006e6a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006e56:	2301      	movs	r3, #1
 8006e58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e5a:	4b0f      	ldr	r3, [pc, #60]	; (8006e98 <xTaskResumeAll+0x134>)
 8006e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e60:	601a      	str	r2, [r3, #0]
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e6a:	f000 feb3 	bl	8007bd4 <vPortExitCritical>

	return xAlreadyYielded;
 8006e6e:	68bb      	ldr	r3, [r7, #8]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	20005380 	.word	0x20005380
 8006e7c:	20005358 	.word	0x20005358
 8006e80:	20005318 	.word	0x20005318
 8006e84:	20005360 	.word	0x20005360
 8006e88:	2000525c 	.word	0x2000525c
 8006e8c:	20005258 	.word	0x20005258
 8006e90:	2000536c 	.word	0x2000536c
 8006e94:	20005368 	.word	0x20005368
 8006e98:	e000ed04 	.word	0xe000ed04

08006e9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006ea2:	4b05      	ldr	r3, [pc, #20]	; (8006eb8 <xTaskGetTickCount+0x1c>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ea8:	687b      	ldr	r3, [r7, #4]
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	2000535c 	.word	0x2000535c

08006ebc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ec2:	f000 ff39 	bl	8007d38 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006eca:	4b04      	ldr	r3, [pc, #16]	; (8006edc <xTaskGetTickCountFromISR+0x20>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ed0:	683b      	ldr	r3, [r7, #0]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	2000535c 	.word	0x2000535c

08006ee0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006eea:	4b4e      	ldr	r3, [pc, #312]	; (8007024 <xTaskIncrementTick+0x144>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f040 808e 	bne.w	8007010 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ef4:	4b4c      	ldr	r3, [pc, #304]	; (8007028 <xTaskIncrementTick+0x148>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006efc:	4a4a      	ldr	r2, [pc, #296]	; (8007028 <xTaskIncrementTick+0x148>)
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d120      	bne.n	8006f4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f08:	4b48      	ldr	r3, [pc, #288]	; (800702c <xTaskIncrementTick+0x14c>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00a      	beq.n	8006f28 <xTaskIncrementTick+0x48>
	__asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	603b      	str	r3, [r7, #0]
}
 8006f24:	bf00      	nop
 8006f26:	e7fe      	b.n	8006f26 <xTaskIncrementTick+0x46>
 8006f28:	4b40      	ldr	r3, [pc, #256]	; (800702c <xTaskIncrementTick+0x14c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	60fb      	str	r3, [r7, #12]
 8006f2e:	4b40      	ldr	r3, [pc, #256]	; (8007030 <xTaskIncrementTick+0x150>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a3e      	ldr	r2, [pc, #248]	; (800702c <xTaskIncrementTick+0x14c>)
 8006f34:	6013      	str	r3, [r2, #0]
 8006f36:	4a3e      	ldr	r2, [pc, #248]	; (8007030 <xTaskIncrementTick+0x150>)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6013      	str	r3, [r2, #0]
 8006f3c:	4b3d      	ldr	r3, [pc, #244]	; (8007034 <xTaskIncrementTick+0x154>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3301      	adds	r3, #1
 8006f42:	4a3c      	ldr	r2, [pc, #240]	; (8007034 <xTaskIncrementTick+0x154>)
 8006f44:	6013      	str	r3, [r2, #0]
 8006f46:	f000 faa9 	bl	800749c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f4a:	4b3b      	ldr	r3, [pc, #236]	; (8007038 <xTaskIncrementTick+0x158>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d348      	bcc.n	8006fe6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f54:	4b35      	ldr	r3, [pc, #212]	; (800702c <xTaskIncrementTick+0x14c>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d104      	bne.n	8006f68 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f5e:	4b36      	ldr	r3, [pc, #216]	; (8007038 <xTaskIncrementTick+0x158>)
 8006f60:	f04f 32ff 	mov.w	r2, #4294967295
 8006f64:	601a      	str	r2, [r3, #0]
					break;
 8006f66:	e03e      	b.n	8006fe6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f68:	4b30      	ldr	r3, [pc, #192]	; (800702c <xTaskIncrementTick+0x14c>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d203      	bcs.n	8006f88 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f80:	4a2d      	ldr	r2, [pc, #180]	; (8007038 <xTaskIncrementTick+0x158>)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f86:	e02e      	b.n	8006fe6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fe fc9e 	bl	80058ce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d004      	beq.n	8006fa4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	3318      	adds	r3, #24
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7fe fc95 	bl	80058ce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa8:	2201      	movs	r2, #1
 8006faa:	409a      	lsls	r2, r3
 8006fac:	4b23      	ldr	r3, [pc, #140]	; (800703c <xTaskIncrementTick+0x15c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	4a22      	ldr	r2, [pc, #136]	; (800703c <xTaskIncrementTick+0x15c>)
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fba:	4613      	mov	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4a1f      	ldr	r2, [pc, #124]	; (8007040 <xTaskIncrementTick+0x160>)
 8006fc4:	441a      	add	r2, r3
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	3304      	adds	r3, #4
 8006fca:	4619      	mov	r1, r3
 8006fcc:	4610      	mov	r0, r2
 8006fce:	f7fe fc21 	bl	8005814 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd6:	4b1b      	ldr	r3, [pc, #108]	; (8007044 <xTaskIncrementTick+0x164>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d3b9      	bcc.n	8006f54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fe4:	e7b6      	b.n	8006f54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006fe6:	4b17      	ldr	r3, [pc, #92]	; (8007044 <xTaskIncrementTick+0x164>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fec:	4914      	ldr	r1, [pc, #80]	; (8007040 <xTaskIncrementTick+0x160>)
 8006fee:	4613      	mov	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	440b      	add	r3, r1
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d901      	bls.n	8007002 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006ffe:	2301      	movs	r3, #1
 8007000:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007002:	4b11      	ldr	r3, [pc, #68]	; (8007048 <xTaskIncrementTick+0x168>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d007      	beq.n	800701a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800700a:	2301      	movs	r3, #1
 800700c:	617b      	str	r3, [r7, #20]
 800700e:	e004      	b.n	800701a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007010:	4b0e      	ldr	r3, [pc, #56]	; (800704c <xTaskIncrementTick+0x16c>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	3301      	adds	r3, #1
 8007016:	4a0d      	ldr	r2, [pc, #52]	; (800704c <xTaskIncrementTick+0x16c>)
 8007018:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800701a:	697b      	ldr	r3, [r7, #20]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3718      	adds	r7, #24
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	20005380 	.word	0x20005380
 8007028:	2000535c 	.word	0x2000535c
 800702c:	20005310 	.word	0x20005310
 8007030:	20005314 	.word	0x20005314
 8007034:	20005370 	.word	0x20005370
 8007038:	20005378 	.word	0x20005378
 800703c:	20005360 	.word	0x20005360
 8007040:	2000525c 	.word	0x2000525c
 8007044:	20005258 	.word	0x20005258
 8007048:	2000536c 	.word	0x2000536c
 800704c:	20005368 	.word	0x20005368

08007050 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007056:	4b29      	ldr	r3, [pc, #164]	; (80070fc <vTaskSwitchContext+0xac>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d003      	beq.n	8007066 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800705e:	4b28      	ldr	r3, [pc, #160]	; (8007100 <vTaskSwitchContext+0xb0>)
 8007060:	2201      	movs	r2, #1
 8007062:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007064:	e044      	b.n	80070f0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007066:	4b26      	ldr	r3, [pc, #152]	; (8007100 <vTaskSwitchContext+0xb0>)
 8007068:	2200      	movs	r2, #0
 800706a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800706c:	4b25      	ldr	r3, [pc, #148]	; (8007104 <vTaskSwitchContext+0xb4>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	fab3 f383 	clz	r3, r3
 8007078:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800707a:	7afb      	ldrb	r3, [r7, #11]
 800707c:	f1c3 031f 	rsb	r3, r3, #31
 8007080:	617b      	str	r3, [r7, #20]
 8007082:	4921      	ldr	r1, [pc, #132]	; (8007108 <vTaskSwitchContext+0xb8>)
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	4613      	mov	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	440b      	add	r3, r1
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10a      	bne.n	80070ac <vTaskSwitchContext+0x5c>
	__asm volatile
 8007096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709a:	f383 8811 	msr	BASEPRI, r3
 800709e:	f3bf 8f6f 	isb	sy
 80070a2:	f3bf 8f4f 	dsb	sy
 80070a6:	607b      	str	r3, [r7, #4]
}
 80070a8:	bf00      	nop
 80070aa:	e7fe      	b.n	80070aa <vTaskSwitchContext+0x5a>
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	4613      	mov	r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4413      	add	r3, r2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4a14      	ldr	r2, [pc, #80]	; (8007108 <vTaskSwitchContext+0xb8>)
 80070b8:	4413      	add	r3, r2
 80070ba:	613b      	str	r3, [r7, #16]
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	685a      	ldr	r2, [r3, #4]
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	605a      	str	r2, [r3, #4]
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	3308      	adds	r3, #8
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d104      	bne.n	80070dc <vTaskSwitchContext+0x8c>
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	605a      	str	r2, [r3, #4]
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	4a0a      	ldr	r2, [pc, #40]	; (800710c <vTaskSwitchContext+0xbc>)
 80070e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80070e6:	4b09      	ldr	r3, [pc, #36]	; (800710c <vTaskSwitchContext+0xbc>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	334c      	adds	r3, #76	; 0x4c
 80070ec:	4a08      	ldr	r2, [pc, #32]	; (8007110 <vTaskSwitchContext+0xc0>)
 80070ee:	6013      	str	r3, [r2, #0]
}
 80070f0:	bf00      	nop
 80070f2:	371c      	adds	r7, #28
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	20005380 	.word	0x20005380
 8007100:	2000536c 	.word	0x2000536c
 8007104:	20005360 	.word	0x20005360
 8007108:	2000525c 	.word	0x2000525c
 800710c:	20005258 	.word	0x20005258
 8007110:	2000008c 	.word	0x2000008c

08007114 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10a      	bne.n	800713a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007128:	f383 8811 	msr	BASEPRI, r3
 800712c:	f3bf 8f6f 	isb	sy
 8007130:	f3bf 8f4f 	dsb	sy
 8007134:	60fb      	str	r3, [r7, #12]
}
 8007136:	bf00      	nop
 8007138:	e7fe      	b.n	8007138 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800713a:	4b07      	ldr	r3, [pc, #28]	; (8007158 <vTaskPlaceOnEventList+0x44>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	3318      	adds	r3, #24
 8007140:	4619      	mov	r1, r3
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7fe fb8a 	bl	800585c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007148:	2101      	movs	r1, #1
 800714a:	6838      	ldr	r0, [r7, #0]
 800714c:	f000 fb82 	bl	8007854 <prvAddCurrentTaskToDelayedList>
}
 8007150:	bf00      	nop
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	20005258 	.word	0x20005258

0800715c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b086      	sub	sp, #24
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10a      	bne.n	8007188 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	60fb      	str	r3, [r7, #12]
}
 8007184:	bf00      	nop
 8007186:	e7fe      	b.n	8007186 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	3318      	adds	r3, #24
 800718c:	4618      	mov	r0, r3
 800718e:	f7fe fb9e 	bl	80058ce <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007192:	4b1d      	ldr	r3, [pc, #116]	; (8007208 <xTaskRemoveFromEventList+0xac>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d11c      	bne.n	80071d4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	3304      	adds	r3, #4
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fe fb95 	bl	80058ce <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a8:	2201      	movs	r2, #1
 80071aa:	409a      	lsls	r2, r3
 80071ac:	4b17      	ldr	r3, [pc, #92]	; (800720c <xTaskRemoveFromEventList+0xb0>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	4a16      	ldr	r2, [pc, #88]	; (800720c <xTaskRemoveFromEventList+0xb0>)
 80071b4:	6013      	str	r3, [r2, #0]
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ba:	4613      	mov	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	4413      	add	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4a13      	ldr	r2, [pc, #76]	; (8007210 <xTaskRemoveFromEventList+0xb4>)
 80071c4:	441a      	add	r2, r3
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	3304      	adds	r3, #4
 80071ca:	4619      	mov	r1, r3
 80071cc:	4610      	mov	r0, r2
 80071ce:	f7fe fb21 	bl	8005814 <vListInsertEnd>
 80071d2:	e005      	b.n	80071e0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	3318      	adds	r3, #24
 80071d8:	4619      	mov	r1, r3
 80071da:	480e      	ldr	r0, [pc, #56]	; (8007214 <xTaskRemoveFromEventList+0xb8>)
 80071dc:	f7fe fb1a 	bl	8005814 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e4:	4b0c      	ldr	r3, [pc, #48]	; (8007218 <xTaskRemoveFromEventList+0xbc>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d905      	bls.n	80071fa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80071ee:	2301      	movs	r3, #1
 80071f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80071f2:	4b0a      	ldr	r3, [pc, #40]	; (800721c <xTaskRemoveFromEventList+0xc0>)
 80071f4:	2201      	movs	r2, #1
 80071f6:	601a      	str	r2, [r3, #0]
 80071f8:	e001      	b.n	80071fe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80071fa:	2300      	movs	r3, #0
 80071fc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80071fe:	697b      	ldr	r3, [r7, #20]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3718      	adds	r7, #24
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	20005380 	.word	0x20005380
 800720c:	20005360 	.word	0x20005360
 8007210:	2000525c 	.word	0x2000525c
 8007214:	20005318 	.word	0x20005318
 8007218:	20005258 	.word	0x20005258
 800721c:	2000536c 	.word	0x2000536c

08007220 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007228:	4b06      	ldr	r3, [pc, #24]	; (8007244 <vTaskInternalSetTimeOutState+0x24>)
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007230:	4b05      	ldr	r3, [pc, #20]	; (8007248 <vTaskInternalSetTimeOutState+0x28>)
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	605a      	str	r2, [r3, #4]
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr
 8007244:	20005370 	.word	0x20005370
 8007248:	2000535c 	.word	0x2000535c

0800724c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b088      	sub	sp, #32
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10a      	bne.n	8007272 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800725c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007260:	f383 8811 	msr	BASEPRI, r3
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	613b      	str	r3, [r7, #16]
}
 800726e:	bf00      	nop
 8007270:	e7fe      	b.n	8007270 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10a      	bne.n	800728e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727c:	f383 8811 	msr	BASEPRI, r3
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	60fb      	str	r3, [r7, #12]
}
 800728a:	bf00      	nop
 800728c:	e7fe      	b.n	800728c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800728e:	f000 fc71 	bl	8007b74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007292:	4b1d      	ldr	r3, [pc, #116]	; (8007308 <xTaskCheckForTimeOut+0xbc>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	69ba      	ldr	r2, [r7, #24]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072aa:	d102      	bne.n	80072b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80072ac:	2300      	movs	r3, #0
 80072ae:	61fb      	str	r3, [r7, #28]
 80072b0:	e023      	b.n	80072fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	4b15      	ldr	r3, [pc, #84]	; (800730c <xTaskCheckForTimeOut+0xc0>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d007      	beq.n	80072ce <xTaskCheckForTimeOut+0x82>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	69ba      	ldr	r2, [r7, #24]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d302      	bcc.n	80072ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80072c8:	2301      	movs	r3, #1
 80072ca:	61fb      	str	r3, [r7, #28]
 80072cc:	e015      	b.n	80072fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d20b      	bcs.n	80072f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	1ad2      	subs	r2, r2, r3
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f7ff ff9b 	bl	8007220 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80072ea:	2300      	movs	r3, #0
 80072ec:	61fb      	str	r3, [r7, #28]
 80072ee:	e004      	b.n	80072fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	2200      	movs	r2, #0
 80072f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80072f6:	2301      	movs	r3, #1
 80072f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80072fa:	f000 fc6b 	bl	8007bd4 <vPortExitCritical>

	return xReturn;
 80072fe:	69fb      	ldr	r3, [r7, #28]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3720      	adds	r7, #32
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	2000535c 	.word	0x2000535c
 800730c:	20005370 	.word	0x20005370

08007310 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007310:	b480      	push	{r7}
 8007312:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007314:	4b03      	ldr	r3, [pc, #12]	; (8007324 <vTaskMissedYield+0x14>)
 8007316:	2201      	movs	r2, #1
 8007318:	601a      	str	r2, [r3, #0]
}
 800731a:	bf00      	nop
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr
 8007324:	2000536c 	.word	0x2000536c

08007328 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007330:	f000 f852 	bl	80073d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007334:	4b06      	ldr	r3, [pc, #24]	; (8007350 <prvIdleTask+0x28>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d9f9      	bls.n	8007330 <prvIdleTask+0x8>
			{
				taskYIELD();
 800733c:	4b05      	ldr	r3, [pc, #20]	; (8007354 <prvIdleTask+0x2c>)
 800733e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800734c:	e7f0      	b.n	8007330 <prvIdleTask+0x8>
 800734e:	bf00      	nop
 8007350:	2000525c 	.word	0x2000525c
 8007354:	e000ed04 	.word	0xe000ed04

08007358 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800735e:	2300      	movs	r3, #0
 8007360:	607b      	str	r3, [r7, #4]
 8007362:	e00c      	b.n	800737e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	4613      	mov	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4a12      	ldr	r2, [pc, #72]	; (80073b8 <prvInitialiseTaskLists+0x60>)
 8007370:	4413      	add	r3, r2
 8007372:	4618      	mov	r0, r3
 8007374:	f7fe fa21 	bl	80057ba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	3301      	adds	r3, #1
 800737c:	607b      	str	r3, [r7, #4]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b06      	cmp	r3, #6
 8007382:	d9ef      	bls.n	8007364 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007384:	480d      	ldr	r0, [pc, #52]	; (80073bc <prvInitialiseTaskLists+0x64>)
 8007386:	f7fe fa18 	bl	80057ba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800738a:	480d      	ldr	r0, [pc, #52]	; (80073c0 <prvInitialiseTaskLists+0x68>)
 800738c:	f7fe fa15 	bl	80057ba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007390:	480c      	ldr	r0, [pc, #48]	; (80073c4 <prvInitialiseTaskLists+0x6c>)
 8007392:	f7fe fa12 	bl	80057ba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007396:	480c      	ldr	r0, [pc, #48]	; (80073c8 <prvInitialiseTaskLists+0x70>)
 8007398:	f7fe fa0f 	bl	80057ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800739c:	480b      	ldr	r0, [pc, #44]	; (80073cc <prvInitialiseTaskLists+0x74>)
 800739e:	f7fe fa0c 	bl	80057ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80073a2:	4b0b      	ldr	r3, [pc, #44]	; (80073d0 <prvInitialiseTaskLists+0x78>)
 80073a4:	4a05      	ldr	r2, [pc, #20]	; (80073bc <prvInitialiseTaskLists+0x64>)
 80073a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80073a8:	4b0a      	ldr	r3, [pc, #40]	; (80073d4 <prvInitialiseTaskLists+0x7c>)
 80073aa:	4a05      	ldr	r2, [pc, #20]	; (80073c0 <prvInitialiseTaskLists+0x68>)
 80073ac:	601a      	str	r2, [r3, #0]
}
 80073ae:	bf00      	nop
 80073b0:	3708      	adds	r7, #8
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	2000525c 	.word	0x2000525c
 80073bc:	200052e8 	.word	0x200052e8
 80073c0:	200052fc 	.word	0x200052fc
 80073c4:	20005318 	.word	0x20005318
 80073c8:	2000532c 	.word	0x2000532c
 80073cc:	20005344 	.word	0x20005344
 80073d0:	20005310 	.word	0x20005310
 80073d4:	20005314 	.word	0x20005314

080073d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073de:	e019      	b.n	8007414 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80073e0:	f000 fbc8 	bl	8007b74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e4:	4b10      	ldr	r3, [pc, #64]	; (8007428 <prvCheckTasksWaitingTermination+0x50>)
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	3304      	adds	r3, #4
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7fe fa6c 	bl	80058ce <uxListRemove>
				--uxCurrentNumberOfTasks;
 80073f6:	4b0d      	ldr	r3, [pc, #52]	; (800742c <prvCheckTasksWaitingTermination+0x54>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3b01      	subs	r3, #1
 80073fc:	4a0b      	ldr	r2, [pc, #44]	; (800742c <prvCheckTasksWaitingTermination+0x54>)
 80073fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007400:	4b0b      	ldr	r3, [pc, #44]	; (8007430 <prvCheckTasksWaitingTermination+0x58>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	3b01      	subs	r3, #1
 8007406:	4a0a      	ldr	r2, [pc, #40]	; (8007430 <prvCheckTasksWaitingTermination+0x58>)
 8007408:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800740a:	f000 fbe3 	bl	8007bd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f810 	bl	8007434 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007414:	4b06      	ldr	r3, [pc, #24]	; (8007430 <prvCheckTasksWaitingTermination+0x58>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1e1      	bne.n	80073e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800741c:	bf00      	nop
 800741e:	bf00      	nop
 8007420:	3708      	adds	r7, #8
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	2000532c 	.word	0x2000532c
 800742c:	20005358 	.word	0x20005358
 8007430:	20005340 	.word	0x20005340

08007434 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	334c      	adds	r3, #76	; 0x4c
 8007440:	4618      	mov	r0, r3
 8007442:	f011 fe07 	bl	8019054 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800744c:	2b00      	cmp	r3, #0
 800744e:	d108      	bne.n	8007462 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007454:	4618      	mov	r0, r3
 8007456:	f000 fd7b 	bl	8007f50 <vPortFree>
				vPortFree( pxTCB );
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fd78 	bl	8007f50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007460:	e018      	b.n	8007494 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007468:	2b01      	cmp	r3, #1
 800746a:	d103      	bne.n	8007474 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fd6f 	bl	8007f50 <vPortFree>
	}
 8007472:	e00f      	b.n	8007494 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800747a:	2b02      	cmp	r3, #2
 800747c:	d00a      	beq.n	8007494 <prvDeleteTCB+0x60>
	__asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	60fb      	str	r3, [r7, #12]
}
 8007490:	bf00      	nop
 8007492:	e7fe      	b.n	8007492 <prvDeleteTCB+0x5e>
	}
 8007494:	bf00      	nop
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074a2:	4b0c      	ldr	r3, [pc, #48]	; (80074d4 <prvResetNextTaskUnblockTime+0x38>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d104      	bne.n	80074b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80074ac:	4b0a      	ldr	r3, [pc, #40]	; (80074d8 <prvResetNextTaskUnblockTime+0x3c>)
 80074ae:	f04f 32ff 	mov.w	r2, #4294967295
 80074b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80074b4:	e008      	b.n	80074c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074b6:	4b07      	ldr	r3, [pc, #28]	; (80074d4 <prvResetNextTaskUnblockTime+0x38>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	4a04      	ldr	r2, [pc, #16]	; (80074d8 <prvResetNextTaskUnblockTime+0x3c>)
 80074c6:	6013      	str	r3, [r2, #0]
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr
 80074d4:	20005310 	.word	0x20005310
 80074d8:	20005378 	.word	0x20005378

080074dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80074e2:	4b0b      	ldr	r3, [pc, #44]	; (8007510 <xTaskGetSchedulerState+0x34>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d102      	bne.n	80074f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80074ea:	2301      	movs	r3, #1
 80074ec:	607b      	str	r3, [r7, #4]
 80074ee:	e008      	b.n	8007502 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074f0:	4b08      	ldr	r3, [pc, #32]	; (8007514 <xTaskGetSchedulerState+0x38>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d102      	bne.n	80074fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80074f8:	2302      	movs	r3, #2
 80074fa:	607b      	str	r3, [r7, #4]
 80074fc:	e001      	b.n	8007502 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80074fe:	2300      	movs	r3, #0
 8007500:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007502:	687b      	ldr	r3, [r7, #4]
	}
 8007504:	4618      	mov	r0, r3
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr
 8007510:	20005364 	.word	0x20005364
 8007514:	20005380 	.word	0x20005380

08007518 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007524:	2300      	movs	r3, #0
 8007526:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d05e      	beq.n	80075ec <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007532:	4b31      	ldr	r3, [pc, #196]	; (80075f8 <xTaskPriorityInherit+0xe0>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007538:	429a      	cmp	r2, r3
 800753a:	d24e      	bcs.n	80075da <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	2b00      	cmp	r3, #0
 8007542:	db06      	blt.n	8007552 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007544:	4b2c      	ldr	r3, [pc, #176]	; (80075f8 <xTaskPriorityInherit+0xe0>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754a:	f1c3 0207 	rsb	r2, r3, #7
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	6959      	ldr	r1, [r3, #20]
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800755a:	4613      	mov	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	4413      	add	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4a26      	ldr	r2, [pc, #152]	; (80075fc <xTaskPriorityInherit+0xe4>)
 8007564:	4413      	add	r3, r2
 8007566:	4299      	cmp	r1, r3
 8007568:	d12f      	bne.n	80075ca <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	3304      	adds	r3, #4
 800756e:	4618      	mov	r0, r3
 8007570:	f7fe f9ad 	bl	80058ce <uxListRemove>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10a      	bne.n	8007590 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757e:	2201      	movs	r2, #1
 8007580:	fa02 f303 	lsl.w	r3, r2, r3
 8007584:	43da      	mvns	r2, r3
 8007586:	4b1e      	ldr	r3, [pc, #120]	; (8007600 <xTaskPriorityInherit+0xe8>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4013      	ands	r3, r2
 800758c:	4a1c      	ldr	r2, [pc, #112]	; (8007600 <xTaskPriorityInherit+0xe8>)
 800758e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007590:	4b19      	ldr	r3, [pc, #100]	; (80075f8 <xTaskPriorityInherit+0xe0>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759e:	2201      	movs	r2, #1
 80075a0:	409a      	lsls	r2, r3
 80075a2:	4b17      	ldr	r3, [pc, #92]	; (8007600 <xTaskPriorityInherit+0xe8>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	4a15      	ldr	r2, [pc, #84]	; (8007600 <xTaskPriorityInherit+0xe8>)
 80075aa:	6013      	str	r3, [r2, #0]
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b0:	4613      	mov	r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4413      	add	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4a10      	ldr	r2, [pc, #64]	; (80075fc <xTaskPriorityInherit+0xe4>)
 80075ba:	441a      	add	r2, r3
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	3304      	adds	r3, #4
 80075c0:	4619      	mov	r1, r3
 80075c2:	4610      	mov	r0, r2
 80075c4:	f7fe f926 	bl	8005814 <vListInsertEnd>
 80075c8:	e004      	b.n	80075d4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80075ca:	4b0b      	ldr	r3, [pc, #44]	; (80075f8 <xTaskPriorityInherit+0xe0>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80075d4:	2301      	movs	r3, #1
 80075d6:	60fb      	str	r3, [r7, #12]
 80075d8:	e008      	b.n	80075ec <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075de:	4b06      	ldr	r3, [pc, #24]	; (80075f8 <xTaskPriorityInherit+0xe0>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d201      	bcs.n	80075ec <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80075e8:	2301      	movs	r3, #1
 80075ea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075ec:	68fb      	ldr	r3, [r7, #12]
	}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	20005258 	.word	0x20005258
 80075fc:	2000525c 	.word	0x2000525c
 8007600:	20005360 	.word	0x20005360

08007604 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007610:	2300      	movs	r3, #0
 8007612:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d06e      	beq.n	80076f8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800761a:	4b3a      	ldr	r3, [pc, #232]	; (8007704 <xTaskPriorityDisinherit+0x100>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	429a      	cmp	r2, r3
 8007622:	d00a      	beq.n	800763a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007628:	f383 8811 	msr	BASEPRI, r3
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	60fb      	str	r3, [r7, #12]
}
 8007636:	bf00      	nop
 8007638:	e7fe      	b.n	8007638 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10a      	bne.n	8007658 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007646:	f383 8811 	msr	BASEPRI, r3
 800764a:	f3bf 8f6f 	isb	sy
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	60bb      	str	r3, [r7, #8]
}
 8007654:	bf00      	nop
 8007656:	e7fe      	b.n	8007656 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800765c:	1e5a      	subs	r2, r3, #1
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766a:	429a      	cmp	r2, r3
 800766c:	d044      	beq.n	80076f8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007672:	2b00      	cmp	r3, #0
 8007674:	d140      	bne.n	80076f8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	3304      	adds	r3, #4
 800767a:	4618      	mov	r0, r3
 800767c:	f7fe f927 	bl	80058ce <uxListRemove>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d115      	bne.n	80076b2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800768a:	491f      	ldr	r1, [pc, #124]	; (8007708 <xTaskPriorityDisinherit+0x104>)
 800768c:	4613      	mov	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4413      	add	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	440b      	add	r3, r1
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d10a      	bne.n	80076b2 <xTaskPriorityDisinherit+0xae>
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a0:	2201      	movs	r2, #1
 80076a2:	fa02 f303 	lsl.w	r3, r2, r3
 80076a6:	43da      	mvns	r2, r3
 80076a8:	4b18      	ldr	r3, [pc, #96]	; (800770c <xTaskPriorityDisinherit+0x108>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4013      	ands	r3, r2
 80076ae:	4a17      	ldr	r2, [pc, #92]	; (800770c <xTaskPriorityDisinherit+0x108>)
 80076b0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076be:	f1c3 0207 	rsb	r2, r3, #7
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ca:	2201      	movs	r2, #1
 80076cc:	409a      	lsls	r2, r3
 80076ce:	4b0f      	ldr	r3, [pc, #60]	; (800770c <xTaskPriorityDisinherit+0x108>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	4a0d      	ldr	r2, [pc, #52]	; (800770c <xTaskPriorityDisinherit+0x108>)
 80076d6:	6013      	str	r3, [r2, #0]
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076dc:	4613      	mov	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4413      	add	r3, r2
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	4a08      	ldr	r2, [pc, #32]	; (8007708 <xTaskPriorityDisinherit+0x104>)
 80076e6:	441a      	add	r2, r3
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	3304      	adds	r3, #4
 80076ec:	4619      	mov	r1, r3
 80076ee:	4610      	mov	r0, r2
 80076f0:	f7fe f890 	bl	8005814 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80076f4:	2301      	movs	r3, #1
 80076f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076f8:	697b      	ldr	r3, [r7, #20]
	}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3718      	adds	r7, #24
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	20005258 	.word	0x20005258
 8007708:	2000525c 	.word	0x2000525c
 800770c:	20005360 	.word	0x20005360

08007710 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007710:	b580      	push	{r7, lr}
 8007712:	b088      	sub	sp, #32
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800771e:	2301      	movs	r3, #1
 8007720:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d077      	beq.n	8007818 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10a      	bne.n	8007746 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007734:	f383 8811 	msr	BASEPRI, r3
 8007738:	f3bf 8f6f 	isb	sy
 800773c:	f3bf 8f4f 	dsb	sy
 8007740:	60fb      	str	r3, [r7, #12]
}
 8007742:	bf00      	nop
 8007744:	e7fe      	b.n	8007744 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	429a      	cmp	r2, r3
 800774e:	d902      	bls.n	8007756 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	61fb      	str	r3, [r7, #28]
 8007754:	e002      	b.n	800775c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800775a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007760:	69fa      	ldr	r2, [r7, #28]
 8007762:	429a      	cmp	r2, r3
 8007764:	d058      	beq.n	8007818 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	429a      	cmp	r2, r3
 800776e:	d153      	bne.n	8007818 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007770:	4b2b      	ldr	r3, [pc, #172]	; (8007820 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	429a      	cmp	r2, r3
 8007778:	d10a      	bne.n	8007790 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800777a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777e:	f383 8811 	msr	BASEPRI, r3
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	60bb      	str	r3, [r7, #8]
}
 800778c:	bf00      	nop
 800778e:	e7fe      	b.n	800778e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	69fa      	ldr	r2, [r7, #28]
 800779a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	db04      	blt.n	80077ae <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	f1c3 0207 	rsb	r2, r3, #7
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	6959      	ldr	r1, [r3, #20]
 80077b2:	693a      	ldr	r2, [r7, #16]
 80077b4:	4613      	mov	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4a19      	ldr	r2, [pc, #100]	; (8007824 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80077be:	4413      	add	r3, r2
 80077c0:	4299      	cmp	r1, r3
 80077c2:	d129      	bne.n	8007818 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	3304      	adds	r3, #4
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7fe f880 	bl	80058ce <uxListRemove>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d10a      	bne.n	80077ea <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d8:	2201      	movs	r2, #1
 80077da:	fa02 f303 	lsl.w	r3, r2, r3
 80077de:	43da      	mvns	r2, r3
 80077e0:	4b11      	ldr	r3, [pc, #68]	; (8007828 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4013      	ands	r3, r2
 80077e6:	4a10      	ldr	r2, [pc, #64]	; (8007828 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80077e8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ee:	2201      	movs	r2, #1
 80077f0:	409a      	lsls	r2, r3
 80077f2:	4b0d      	ldr	r3, [pc, #52]	; (8007828 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	4a0b      	ldr	r2, [pc, #44]	; (8007828 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007800:	4613      	mov	r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4413      	add	r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	4a06      	ldr	r2, [pc, #24]	; (8007824 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800780a:	441a      	add	r2, r3
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	3304      	adds	r3, #4
 8007810:	4619      	mov	r1, r3
 8007812:	4610      	mov	r0, r2
 8007814:	f7fd fffe 	bl	8005814 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007818:	bf00      	nop
 800781a:	3720      	adds	r7, #32
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	20005258 	.word	0x20005258
 8007824:	2000525c 	.word	0x2000525c
 8007828:	20005360 	.word	0x20005360

0800782c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800782c:	b480      	push	{r7}
 800782e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007830:	4b07      	ldr	r3, [pc, #28]	; (8007850 <pvTaskIncrementMutexHeldCount+0x24>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d004      	beq.n	8007842 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007838:	4b05      	ldr	r3, [pc, #20]	; (8007850 <pvTaskIncrementMutexHeldCount+0x24>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800783e:	3201      	adds	r2, #1
 8007840:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007842:	4b03      	ldr	r3, [pc, #12]	; (8007850 <pvTaskIncrementMutexHeldCount+0x24>)
 8007844:	681b      	ldr	r3, [r3, #0]
	}
 8007846:	4618      	mov	r0, r3
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr
 8007850:	20005258 	.word	0x20005258

08007854 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800785e:	4b29      	ldr	r3, [pc, #164]	; (8007904 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007864:	4b28      	ldr	r3, [pc, #160]	; (8007908 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	3304      	adds	r3, #4
 800786a:	4618      	mov	r0, r3
 800786c:	f7fe f82f 	bl	80058ce <uxListRemove>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10b      	bne.n	800788e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007876:	4b24      	ldr	r3, [pc, #144]	; (8007908 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787c:	2201      	movs	r2, #1
 800787e:	fa02 f303 	lsl.w	r3, r2, r3
 8007882:	43da      	mvns	r2, r3
 8007884:	4b21      	ldr	r3, [pc, #132]	; (800790c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4013      	ands	r3, r2
 800788a:	4a20      	ldr	r2, [pc, #128]	; (800790c <prvAddCurrentTaskToDelayedList+0xb8>)
 800788c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007894:	d10a      	bne.n	80078ac <prvAddCurrentTaskToDelayedList+0x58>
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d007      	beq.n	80078ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800789c:	4b1a      	ldr	r3, [pc, #104]	; (8007908 <prvAddCurrentTaskToDelayedList+0xb4>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	3304      	adds	r3, #4
 80078a2:	4619      	mov	r1, r3
 80078a4:	481a      	ldr	r0, [pc, #104]	; (8007910 <prvAddCurrentTaskToDelayedList+0xbc>)
 80078a6:	f7fd ffb5 	bl	8005814 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80078aa:	e026      	b.n	80078fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4413      	add	r3, r2
 80078b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80078b4:	4b14      	ldr	r3, [pc, #80]	; (8007908 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d209      	bcs.n	80078d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078c4:	4b13      	ldr	r3, [pc, #76]	; (8007914 <prvAddCurrentTaskToDelayedList+0xc0>)
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	4b0f      	ldr	r3, [pc, #60]	; (8007908 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	3304      	adds	r3, #4
 80078ce:	4619      	mov	r1, r3
 80078d0:	4610      	mov	r0, r2
 80078d2:	f7fd ffc3 	bl	800585c <vListInsert>
}
 80078d6:	e010      	b.n	80078fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078d8:	4b0f      	ldr	r3, [pc, #60]	; (8007918 <prvAddCurrentTaskToDelayedList+0xc4>)
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	4b0a      	ldr	r3, [pc, #40]	; (8007908 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	3304      	adds	r3, #4
 80078e2:	4619      	mov	r1, r3
 80078e4:	4610      	mov	r0, r2
 80078e6:	f7fd ffb9 	bl	800585c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80078ea:	4b0c      	ldr	r3, [pc, #48]	; (800791c <prvAddCurrentTaskToDelayedList+0xc8>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d202      	bcs.n	80078fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80078f4:	4a09      	ldr	r2, [pc, #36]	; (800791c <prvAddCurrentTaskToDelayedList+0xc8>)
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	6013      	str	r3, [r2, #0]
}
 80078fa:	bf00      	nop
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	2000535c 	.word	0x2000535c
 8007908:	20005258 	.word	0x20005258
 800790c:	20005360 	.word	0x20005360
 8007910:	20005344 	.word	0x20005344
 8007914:	20005314 	.word	0x20005314
 8007918:	20005310 	.word	0x20005310
 800791c:	20005378 	.word	0x20005378

08007920 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	3b04      	subs	r3, #4
 8007930:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007938:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	3b04      	subs	r3, #4
 800793e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	f023 0201 	bic.w	r2, r3, #1
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	3b04      	subs	r3, #4
 800794e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007950:	4a0c      	ldr	r2, [pc, #48]	; (8007984 <pxPortInitialiseStack+0x64>)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	3b14      	subs	r3, #20
 800795a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	3b04      	subs	r3, #4
 8007966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f06f 0202 	mvn.w	r2, #2
 800796e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	3b20      	subs	r3, #32
 8007974:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007976:	68fb      	ldr	r3, [r7, #12]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr
 8007984:	08007989 	.word	0x08007989

08007988 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800798e:	2300      	movs	r3, #0
 8007990:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007992:	4b12      	ldr	r3, [pc, #72]	; (80079dc <prvTaskExitError+0x54>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799a:	d00a      	beq.n	80079b2 <prvTaskExitError+0x2a>
	__asm volatile
 800799c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a0:	f383 8811 	msr	BASEPRI, r3
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	60fb      	str	r3, [r7, #12]
}
 80079ae:	bf00      	nop
 80079b0:	e7fe      	b.n	80079b0 <prvTaskExitError+0x28>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	60bb      	str	r3, [r7, #8]
}
 80079c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80079c6:	bf00      	nop
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d0fc      	beq.n	80079c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80079ce:	bf00      	nop
 80079d0:	bf00      	nop
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	20000020 	.word	0x20000020

080079e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80079e0:	4b07      	ldr	r3, [pc, #28]	; (8007a00 <pxCurrentTCBConst2>)
 80079e2:	6819      	ldr	r1, [r3, #0]
 80079e4:	6808      	ldr	r0, [r1, #0]
 80079e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ea:	f380 8809 	msr	PSP, r0
 80079ee:	f3bf 8f6f 	isb	sy
 80079f2:	f04f 0000 	mov.w	r0, #0
 80079f6:	f380 8811 	msr	BASEPRI, r0
 80079fa:	4770      	bx	lr
 80079fc:	f3af 8000 	nop.w

08007a00 <pxCurrentTCBConst2>:
 8007a00:	20005258 	.word	0x20005258
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a04:	bf00      	nop
 8007a06:	bf00      	nop

08007a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a08:	4808      	ldr	r0, [pc, #32]	; (8007a2c <prvPortStartFirstTask+0x24>)
 8007a0a:	6800      	ldr	r0, [r0, #0]
 8007a0c:	6800      	ldr	r0, [r0, #0]
 8007a0e:	f380 8808 	msr	MSP, r0
 8007a12:	f04f 0000 	mov.w	r0, #0
 8007a16:	f380 8814 	msr	CONTROL, r0
 8007a1a:	b662      	cpsie	i
 8007a1c:	b661      	cpsie	f
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	df00      	svc	0
 8007a28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a2a:	bf00      	nop
 8007a2c:	e000ed08 	.word	0xe000ed08

08007a30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a36:	4b46      	ldr	r3, [pc, #280]	; (8007b50 <xPortStartScheduler+0x120>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a46      	ldr	r2, [pc, #280]	; (8007b54 <xPortStartScheduler+0x124>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d10a      	bne.n	8007a56 <xPortStartScheduler+0x26>
	__asm volatile
 8007a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	613b      	str	r3, [r7, #16]
}
 8007a52:	bf00      	nop
 8007a54:	e7fe      	b.n	8007a54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a56:	4b3e      	ldr	r3, [pc, #248]	; (8007b50 <xPortStartScheduler+0x120>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a3f      	ldr	r2, [pc, #252]	; (8007b58 <xPortStartScheduler+0x128>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d10a      	bne.n	8007a76 <xPortStartScheduler+0x46>
	__asm volatile
 8007a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	60fb      	str	r3, [r7, #12]
}
 8007a72:	bf00      	nop
 8007a74:	e7fe      	b.n	8007a74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a76:	4b39      	ldr	r3, [pc, #228]	; (8007b5c <xPortStartScheduler+0x12c>)
 8007a78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	22ff      	movs	r2, #255	; 0xff
 8007a86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a90:	78fb      	ldrb	r3, [r7, #3]
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a98:	b2da      	uxtb	r2, r3
 8007a9a:	4b31      	ldr	r3, [pc, #196]	; (8007b60 <xPortStartScheduler+0x130>)
 8007a9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a9e:	4b31      	ldr	r3, [pc, #196]	; (8007b64 <xPortStartScheduler+0x134>)
 8007aa0:	2207      	movs	r2, #7
 8007aa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007aa4:	e009      	b.n	8007aba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007aa6:	4b2f      	ldr	r3, [pc, #188]	; (8007b64 <xPortStartScheduler+0x134>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	4a2d      	ldr	r2, [pc, #180]	; (8007b64 <xPortStartScheduler+0x134>)
 8007aae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ab0:	78fb      	ldrb	r3, [r7, #3]
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	005b      	lsls	r3, r3, #1
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007aba:	78fb      	ldrb	r3, [r7, #3]
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ac2:	2b80      	cmp	r3, #128	; 0x80
 8007ac4:	d0ef      	beq.n	8007aa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ac6:	4b27      	ldr	r3, [pc, #156]	; (8007b64 <xPortStartScheduler+0x134>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f1c3 0307 	rsb	r3, r3, #7
 8007ace:	2b04      	cmp	r3, #4
 8007ad0:	d00a      	beq.n	8007ae8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	60bb      	str	r3, [r7, #8]
}
 8007ae4:	bf00      	nop
 8007ae6:	e7fe      	b.n	8007ae6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ae8:	4b1e      	ldr	r3, [pc, #120]	; (8007b64 <xPortStartScheduler+0x134>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	021b      	lsls	r3, r3, #8
 8007aee:	4a1d      	ldr	r2, [pc, #116]	; (8007b64 <xPortStartScheduler+0x134>)
 8007af0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007af2:	4b1c      	ldr	r3, [pc, #112]	; (8007b64 <xPortStartScheduler+0x134>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007afa:	4a1a      	ldr	r2, [pc, #104]	; (8007b64 <xPortStartScheduler+0x134>)
 8007afc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b06:	4b18      	ldr	r3, [pc, #96]	; (8007b68 <xPortStartScheduler+0x138>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a17      	ldr	r2, [pc, #92]	; (8007b68 <xPortStartScheduler+0x138>)
 8007b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b12:	4b15      	ldr	r3, [pc, #84]	; (8007b68 <xPortStartScheduler+0x138>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a14      	ldr	r2, [pc, #80]	; (8007b68 <xPortStartScheduler+0x138>)
 8007b18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007b1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b1e:	f000 f8dd 	bl	8007cdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b22:	4b12      	ldr	r3, [pc, #72]	; (8007b6c <xPortStartScheduler+0x13c>)
 8007b24:	2200      	movs	r2, #0
 8007b26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b28:	f000 f8fc 	bl	8007d24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b2c:	4b10      	ldr	r3, [pc, #64]	; (8007b70 <xPortStartScheduler+0x140>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a0f      	ldr	r2, [pc, #60]	; (8007b70 <xPortStartScheduler+0x140>)
 8007b32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007b36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b38:	f7ff ff66 	bl	8007a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b3c:	f7ff fa88 	bl	8007050 <vTaskSwitchContext>
	prvTaskExitError();
 8007b40:	f7ff ff22 	bl	8007988 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3718      	adds	r7, #24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	e000ed00 	.word	0xe000ed00
 8007b54:	410fc271 	.word	0x410fc271
 8007b58:	410fc270 	.word	0x410fc270
 8007b5c:	e000e400 	.word	0xe000e400
 8007b60:	20005384 	.word	0x20005384
 8007b64:	20005388 	.word	0x20005388
 8007b68:	e000ed20 	.word	0xe000ed20
 8007b6c:	20000020 	.word	0x20000020
 8007b70:	e000ef34 	.word	0xe000ef34

08007b74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
	__asm volatile
 8007b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7e:	f383 8811 	msr	BASEPRI, r3
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	f3bf 8f4f 	dsb	sy
 8007b8a:	607b      	str	r3, [r7, #4]
}
 8007b8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b8e:	4b0f      	ldr	r3, [pc, #60]	; (8007bcc <vPortEnterCritical+0x58>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3301      	adds	r3, #1
 8007b94:	4a0d      	ldr	r2, [pc, #52]	; (8007bcc <vPortEnterCritical+0x58>)
 8007b96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b98:	4b0c      	ldr	r3, [pc, #48]	; (8007bcc <vPortEnterCritical+0x58>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d10f      	bne.n	8007bc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ba0:	4b0b      	ldr	r3, [pc, #44]	; (8007bd0 <vPortEnterCritical+0x5c>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00a      	beq.n	8007bc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	603b      	str	r3, [r7, #0]
}
 8007bbc:	bf00      	nop
 8007bbe:	e7fe      	b.n	8007bbe <vPortEnterCritical+0x4a>
	}
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr
 8007bcc:	20000020 	.word	0x20000020
 8007bd0:	e000ed04 	.word	0xe000ed04

08007bd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007bda:	4b12      	ldr	r3, [pc, #72]	; (8007c24 <vPortExitCritical+0x50>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10a      	bne.n	8007bf8 <vPortExitCritical+0x24>
	__asm volatile
 8007be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be6:	f383 8811 	msr	BASEPRI, r3
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	607b      	str	r3, [r7, #4]
}
 8007bf4:	bf00      	nop
 8007bf6:	e7fe      	b.n	8007bf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007bf8:	4b0a      	ldr	r3, [pc, #40]	; (8007c24 <vPortExitCritical+0x50>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	4a09      	ldr	r2, [pc, #36]	; (8007c24 <vPortExitCritical+0x50>)
 8007c00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c02:	4b08      	ldr	r3, [pc, #32]	; (8007c24 <vPortExitCritical+0x50>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d105      	bne.n	8007c16 <vPortExitCritical+0x42>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	f383 8811 	msr	BASEPRI, r3
}
 8007c14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c16:	bf00      	nop
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	20000020 	.word	0x20000020
	...

08007c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c30:	f3ef 8009 	mrs	r0, PSP
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	4b15      	ldr	r3, [pc, #84]	; (8007c90 <pxCurrentTCBConst>)
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	f01e 0f10 	tst.w	lr, #16
 8007c40:	bf08      	it	eq
 8007c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c4a:	6010      	str	r0, [r2, #0]
 8007c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c54:	f380 8811 	msr	BASEPRI, r0
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f7ff f9f6 	bl	8007050 <vTaskSwitchContext>
 8007c64:	f04f 0000 	mov.w	r0, #0
 8007c68:	f380 8811 	msr	BASEPRI, r0
 8007c6c:	bc09      	pop	{r0, r3}
 8007c6e:	6819      	ldr	r1, [r3, #0]
 8007c70:	6808      	ldr	r0, [r1, #0]
 8007c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c76:	f01e 0f10 	tst.w	lr, #16
 8007c7a:	bf08      	it	eq
 8007c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c80:	f380 8809 	msr	PSP, r0
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	f3af 8000 	nop.w

08007c90 <pxCurrentTCBConst>:
 8007c90:	20005258 	.word	0x20005258
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c94:	bf00      	nop
 8007c96:	bf00      	nop

08007c98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca2:	f383 8811 	msr	BASEPRI, r3
 8007ca6:	f3bf 8f6f 	isb	sy
 8007caa:	f3bf 8f4f 	dsb	sy
 8007cae:	607b      	str	r3, [r7, #4]
}
 8007cb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007cb2:	f7ff f915 	bl	8006ee0 <xTaskIncrementTick>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d003      	beq.n	8007cc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007cbc:	4b06      	ldr	r3, [pc, #24]	; (8007cd8 <SysTick_Handler+0x40>)
 8007cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cc2:	601a      	str	r2, [r3, #0]
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	f383 8811 	msr	BASEPRI, r3
}
 8007cce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007cd0:	bf00      	nop
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	e000ed04 	.word	0xe000ed04

08007cdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007cdc:	b480      	push	{r7}
 8007cde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ce0:	4b0b      	ldr	r3, [pc, #44]	; (8007d10 <vPortSetupTimerInterrupt+0x34>)
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ce6:	4b0b      	ldr	r3, [pc, #44]	; (8007d14 <vPortSetupTimerInterrupt+0x38>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007cec:	4b0a      	ldr	r3, [pc, #40]	; (8007d18 <vPortSetupTimerInterrupt+0x3c>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a0a      	ldr	r2, [pc, #40]	; (8007d1c <vPortSetupTimerInterrupt+0x40>)
 8007cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf6:	099b      	lsrs	r3, r3, #6
 8007cf8:	4a09      	ldr	r2, [pc, #36]	; (8007d20 <vPortSetupTimerInterrupt+0x44>)
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007cfe:	4b04      	ldr	r3, [pc, #16]	; (8007d10 <vPortSetupTimerInterrupt+0x34>)
 8007d00:	2207      	movs	r2, #7
 8007d02:	601a      	str	r2, [r3, #0]
}
 8007d04:	bf00      	nop
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	e000e010 	.word	0xe000e010
 8007d14:	e000e018 	.word	0xe000e018
 8007d18:	20000000 	.word	0x20000000
 8007d1c:	10624dd3 	.word	0x10624dd3
 8007d20:	e000e014 	.word	0xe000e014

08007d24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007d34 <vPortEnableVFP+0x10>
 8007d28:	6801      	ldr	r1, [r0, #0]
 8007d2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007d2e:	6001      	str	r1, [r0, #0]
 8007d30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d32:	bf00      	nop
 8007d34:	e000ed88 	.word	0xe000ed88

08007d38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d3e:	f3ef 8305 	mrs	r3, IPSR
 8007d42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2b0f      	cmp	r3, #15
 8007d48:	d914      	bls.n	8007d74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d4a:	4a17      	ldr	r2, [pc, #92]	; (8007da8 <vPortValidateInterruptPriority+0x70>)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	4413      	add	r3, r2
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d54:	4b15      	ldr	r3, [pc, #84]	; (8007dac <vPortValidateInterruptPriority+0x74>)
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	7afa      	ldrb	r2, [r7, #11]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d20a      	bcs.n	8007d74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	607b      	str	r3, [r7, #4]
}
 8007d70:	bf00      	nop
 8007d72:	e7fe      	b.n	8007d72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d74:	4b0e      	ldr	r3, [pc, #56]	; (8007db0 <vPortValidateInterruptPriority+0x78>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d7c:	4b0d      	ldr	r3, [pc, #52]	; (8007db4 <vPortValidateInterruptPriority+0x7c>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d90a      	bls.n	8007d9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d88:	f383 8811 	msr	BASEPRI, r3
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	603b      	str	r3, [r7, #0]
}
 8007d96:	bf00      	nop
 8007d98:	e7fe      	b.n	8007d98 <vPortValidateInterruptPriority+0x60>
	}
 8007d9a:	bf00      	nop
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	e000e3f0 	.word	0xe000e3f0
 8007dac:	20005384 	.word	0x20005384
 8007db0:	e000ed0c 	.word	0xe000ed0c
 8007db4:	20005388 	.word	0x20005388

08007db8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08a      	sub	sp, #40	; 0x28
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007dc4:	f7fe ffc0 	bl	8006d48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007dc8:	4b5b      	ldr	r3, [pc, #364]	; (8007f38 <pvPortMalloc+0x180>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d101      	bne.n	8007dd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007dd0:	f000 f920 	bl	8008014 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007dd4:	4b59      	ldr	r3, [pc, #356]	; (8007f3c <pvPortMalloc+0x184>)
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4013      	ands	r3, r2
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f040 8093 	bne.w	8007f08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d01d      	beq.n	8007e24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007de8:	2208      	movs	r2, #8
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4413      	add	r3, r2
 8007dee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f003 0307 	and.w	r3, r3, #7
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d014      	beq.n	8007e24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f023 0307 	bic.w	r3, r3, #7
 8007e00:	3308      	adds	r3, #8
 8007e02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f003 0307 	and.w	r3, r3, #7
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00a      	beq.n	8007e24 <pvPortMalloc+0x6c>
	__asm volatile
 8007e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	617b      	str	r3, [r7, #20]
}
 8007e20:	bf00      	nop
 8007e22:	e7fe      	b.n	8007e22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d06e      	beq.n	8007f08 <pvPortMalloc+0x150>
 8007e2a:	4b45      	ldr	r3, [pc, #276]	; (8007f40 <pvPortMalloc+0x188>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d869      	bhi.n	8007f08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e34:	4b43      	ldr	r3, [pc, #268]	; (8007f44 <pvPortMalloc+0x18c>)
 8007e36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e38:	4b42      	ldr	r3, [pc, #264]	; (8007f44 <pvPortMalloc+0x18c>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e3e:	e004      	b.n	8007e4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d903      	bls.n	8007e5c <pvPortMalloc+0xa4>
 8007e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1f1      	bne.n	8007e40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e5c:	4b36      	ldr	r3, [pc, #216]	; (8007f38 <pvPortMalloc+0x180>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d050      	beq.n	8007f08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e66:	6a3b      	ldr	r3, [r7, #32]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2208      	movs	r2, #8
 8007e6c:	4413      	add	r3, r2
 8007e6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	6a3b      	ldr	r3, [r7, #32]
 8007e76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	1ad2      	subs	r2, r2, r3
 8007e80:	2308      	movs	r3, #8
 8007e82:	005b      	lsls	r3, r3, #1
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d91f      	bls.n	8007ec8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	f003 0307 	and.w	r3, r3, #7
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00a      	beq.n	8007eb0 <pvPortMalloc+0xf8>
	__asm volatile
 8007e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9e:	f383 8811 	msr	BASEPRI, r3
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	f3bf 8f4f 	dsb	sy
 8007eaa:	613b      	str	r3, [r7, #16]
}
 8007eac:	bf00      	nop
 8007eae:	e7fe      	b.n	8007eae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb2:	685a      	ldr	r2, [r3, #4]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	1ad2      	subs	r2, r2, r3
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ec2:	69b8      	ldr	r0, [r7, #24]
 8007ec4:	f000 f908 	bl	80080d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ec8:	4b1d      	ldr	r3, [pc, #116]	; (8007f40 <pvPortMalloc+0x188>)
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	4a1b      	ldr	r2, [pc, #108]	; (8007f40 <pvPortMalloc+0x188>)
 8007ed4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ed6:	4b1a      	ldr	r3, [pc, #104]	; (8007f40 <pvPortMalloc+0x188>)
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	4b1b      	ldr	r3, [pc, #108]	; (8007f48 <pvPortMalloc+0x190>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d203      	bcs.n	8007eea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ee2:	4b17      	ldr	r3, [pc, #92]	; (8007f40 <pvPortMalloc+0x188>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a18      	ldr	r2, [pc, #96]	; (8007f48 <pvPortMalloc+0x190>)
 8007ee8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eec:	685a      	ldr	r2, [r3, #4]
 8007eee:	4b13      	ldr	r3, [pc, #76]	; (8007f3c <pvPortMalloc+0x184>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	431a      	orrs	r2, r3
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	2200      	movs	r2, #0
 8007efc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007efe:	4b13      	ldr	r3, [pc, #76]	; (8007f4c <pvPortMalloc+0x194>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	3301      	adds	r3, #1
 8007f04:	4a11      	ldr	r2, [pc, #68]	; (8007f4c <pvPortMalloc+0x194>)
 8007f06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f08:	f7fe ff2c 	bl	8006d64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	f003 0307 	and.w	r3, r3, #7
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00a      	beq.n	8007f2c <pvPortMalloc+0x174>
	__asm volatile
 8007f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1a:	f383 8811 	msr	BASEPRI, r3
 8007f1e:	f3bf 8f6f 	isb	sy
 8007f22:	f3bf 8f4f 	dsb	sy
 8007f26:	60fb      	str	r3, [r7, #12]
}
 8007f28:	bf00      	nop
 8007f2a:	e7fe      	b.n	8007f2a <pvPortMalloc+0x172>
	return pvReturn;
 8007f2c:	69fb      	ldr	r3, [r7, #28]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3728      	adds	r7, #40	; 0x28
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	2000d394 	.word	0x2000d394
 8007f3c:	2000d3a8 	.word	0x2000d3a8
 8007f40:	2000d398 	.word	0x2000d398
 8007f44:	2000d38c 	.word	0x2000d38c
 8007f48:	2000d39c 	.word	0x2000d39c
 8007f4c:	2000d3a0 	.word	0x2000d3a0

08007f50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d04d      	beq.n	8007ffe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f62:	2308      	movs	r3, #8
 8007f64:	425b      	negs	r3, r3
 8007f66:	697a      	ldr	r2, [r7, #20]
 8007f68:	4413      	add	r3, r2
 8007f6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	685a      	ldr	r2, [r3, #4]
 8007f74:	4b24      	ldr	r3, [pc, #144]	; (8008008 <vPortFree+0xb8>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4013      	ands	r3, r2
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10a      	bne.n	8007f94 <vPortFree+0x44>
	__asm volatile
 8007f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f82:	f383 8811 	msr	BASEPRI, r3
 8007f86:	f3bf 8f6f 	isb	sy
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	60fb      	str	r3, [r7, #12]
}
 8007f90:	bf00      	nop
 8007f92:	e7fe      	b.n	8007f92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00a      	beq.n	8007fb2 <vPortFree+0x62>
	__asm volatile
 8007f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa0:	f383 8811 	msr	BASEPRI, r3
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	60bb      	str	r3, [r7, #8]
}
 8007fae:	bf00      	nop
 8007fb0:	e7fe      	b.n	8007fb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	685a      	ldr	r2, [r3, #4]
 8007fb6:	4b14      	ldr	r3, [pc, #80]	; (8008008 <vPortFree+0xb8>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4013      	ands	r3, r2
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d01e      	beq.n	8007ffe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d11a      	bne.n	8007ffe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	685a      	ldr	r2, [r3, #4]
 8007fcc:	4b0e      	ldr	r3, [pc, #56]	; (8008008 <vPortFree+0xb8>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	43db      	mvns	r3, r3
 8007fd2:	401a      	ands	r2, r3
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007fd8:	f7fe feb6 	bl	8006d48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	685a      	ldr	r2, [r3, #4]
 8007fe0:	4b0a      	ldr	r3, [pc, #40]	; (800800c <vPortFree+0xbc>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	4a09      	ldr	r2, [pc, #36]	; (800800c <vPortFree+0xbc>)
 8007fe8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007fea:	6938      	ldr	r0, [r7, #16]
 8007fec:	f000 f874 	bl	80080d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ff0:	4b07      	ldr	r3, [pc, #28]	; (8008010 <vPortFree+0xc0>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	4a06      	ldr	r2, [pc, #24]	; (8008010 <vPortFree+0xc0>)
 8007ff8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007ffa:	f7fe feb3 	bl	8006d64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ffe:	bf00      	nop
 8008000:	3718      	adds	r7, #24
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	2000d3a8 	.word	0x2000d3a8
 800800c:	2000d398 	.word	0x2000d398
 8008010:	2000d3a4 	.word	0x2000d3a4

08008014 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800801a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800801e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008020:	4b27      	ldr	r3, [pc, #156]	; (80080c0 <prvHeapInit+0xac>)
 8008022:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f003 0307 	and.w	r3, r3, #7
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00c      	beq.n	8008048 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	3307      	adds	r3, #7
 8008032:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f023 0307 	bic.w	r3, r3, #7
 800803a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	4a1f      	ldr	r2, [pc, #124]	; (80080c0 <prvHeapInit+0xac>)
 8008044:	4413      	add	r3, r2
 8008046:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800804c:	4a1d      	ldr	r2, [pc, #116]	; (80080c4 <prvHeapInit+0xb0>)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008052:	4b1c      	ldr	r3, [pc, #112]	; (80080c4 <prvHeapInit+0xb0>)
 8008054:	2200      	movs	r2, #0
 8008056:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	4413      	add	r3, r2
 800805e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008060:	2208      	movs	r2, #8
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	1a9b      	subs	r3, r3, r2
 8008066:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f023 0307 	bic.w	r3, r3, #7
 800806e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	4a15      	ldr	r2, [pc, #84]	; (80080c8 <prvHeapInit+0xb4>)
 8008074:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008076:	4b14      	ldr	r3, [pc, #80]	; (80080c8 <prvHeapInit+0xb4>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2200      	movs	r2, #0
 800807c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800807e:	4b12      	ldr	r3, [pc, #72]	; (80080c8 <prvHeapInit+0xb4>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2200      	movs	r2, #0
 8008084:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	1ad2      	subs	r2, r2, r3
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008094:	4b0c      	ldr	r3, [pc, #48]	; (80080c8 <prvHeapInit+0xb4>)
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	4a0a      	ldr	r2, [pc, #40]	; (80080cc <prvHeapInit+0xb8>)
 80080a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	4a09      	ldr	r2, [pc, #36]	; (80080d0 <prvHeapInit+0xbc>)
 80080aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80080ac:	4b09      	ldr	r3, [pc, #36]	; (80080d4 <prvHeapInit+0xc0>)
 80080ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80080b2:	601a      	str	r2, [r3, #0]
}
 80080b4:	bf00      	nop
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	2000538c 	.word	0x2000538c
 80080c4:	2000d38c 	.word	0x2000d38c
 80080c8:	2000d394 	.word	0x2000d394
 80080cc:	2000d39c 	.word	0x2000d39c
 80080d0:	2000d398 	.word	0x2000d398
 80080d4:	2000d3a8 	.word	0x2000d3a8

080080d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80080e0:	4b28      	ldr	r3, [pc, #160]	; (8008184 <prvInsertBlockIntoFreeList+0xac>)
 80080e2:	60fb      	str	r3, [r7, #12]
 80080e4:	e002      	b.n	80080ec <prvInsertBlockIntoFreeList+0x14>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	60fb      	str	r3, [r7, #12]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d8f7      	bhi.n	80080e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	4413      	add	r3, r2
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	429a      	cmp	r2, r3
 8008106:	d108      	bne.n	800811a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	685a      	ldr	r2, [r3, #4]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	441a      	add	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	441a      	add	r2, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	429a      	cmp	r2, r3
 800812c:	d118      	bne.n	8008160 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	4b15      	ldr	r3, [pc, #84]	; (8008188 <prvInsertBlockIntoFreeList+0xb0>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	429a      	cmp	r2, r3
 8008138:	d00d      	beq.n	8008156 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	441a      	add	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	e008      	b.n	8008168 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008156:	4b0c      	ldr	r3, [pc, #48]	; (8008188 <prvInsertBlockIntoFreeList+0xb0>)
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	601a      	str	r2, [r3, #0]
 800815e:	e003      	b.n	8008168 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	429a      	cmp	r2, r3
 800816e:	d002      	beq.n	8008176 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008176:	bf00      	nop
 8008178:	3714      	adds	r7, #20
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	2000d38c 	.word	0x2000d38c
 8008188:	2000d394 	.word	0x2000d394

0800818c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	330c      	adds	r3, #12
 800819c:	461a      	mov	r2, r3
 800819e:	6839      	ldr	r1, [r7, #0]
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f002 fc29 	bl	800a9f8 <tcpip_send_msg_wait_sem>
 80081a6:	4603      	mov	r3, r0
 80081a8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80081aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d103      	bne.n	80081ba <netconn_apimsg+0x2e>
    return apimsg->err;
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80081b8:	e001      	b.n	80081be <netconn_apimsg+0x32>
  }
  return err;
 80081ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08c      	sub	sp, #48	; 0x30
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	4603      	mov	r3, r0
 80081d0:	603a      	str	r2, [r7, #0]
 80081d2:	71fb      	strb	r3, [r7, #7]
 80081d4:	460b      	mov	r3, r1
 80081d6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80081d8:	79fb      	ldrb	r3, [r7, #7]
 80081da:	6839      	ldr	r1, [r7, #0]
 80081dc:	4618      	mov	r0, r3
 80081de:	f001 f95b 	bl	8009498 <netconn_alloc>
 80081e2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 80081e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d054      	beq.n	8008294 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80081ea:	79bb      	ldrb	r3, [r7, #6]
 80081ec:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80081ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80081f2:	f107 0308 	add.w	r3, r7, #8
 80081f6:	4619      	mov	r1, r3
 80081f8:	4829      	ldr	r0, [pc, #164]	; (80082a0 <netconn_new_with_proto_and_callback+0xd8>)
 80081fa:	f7ff ffc7 	bl	800818c <netconn_apimsg>
 80081fe:	4603      	mov	r3, r0
 8008200:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8008204:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008208:	2b00      	cmp	r3, #0
 800820a:	d043      	beq.n	8008294 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800820c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d005      	beq.n	8008220 <netconn_new_with_proto_and_callback+0x58>
 8008214:	4b23      	ldr	r3, [pc, #140]	; (80082a4 <netconn_new_with_proto_and_callback+0xdc>)
 8008216:	22a3      	movs	r2, #163	; 0xa3
 8008218:	4923      	ldr	r1, [pc, #140]	; (80082a8 <netconn_new_with_proto_and_callback+0xe0>)
 800821a:	4824      	ldr	r0, [pc, #144]	; (80082ac <netconn_new_with_proto_and_callback+0xe4>)
 800821c:	f010 fdcc 	bl	8018db8 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008222:	3310      	adds	r3, #16
 8008224:	4618      	mov	r0, r3
 8008226:	f010 fb72 	bl	801890e <sys_mbox_valid>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d105      	bne.n	800823c <netconn_new_with_proto_and_callback+0x74>
 8008230:	4b1c      	ldr	r3, [pc, #112]	; (80082a4 <netconn_new_with_proto_and_callback+0xdc>)
 8008232:	22a4      	movs	r2, #164	; 0xa4
 8008234:	491e      	ldr	r1, [pc, #120]	; (80082b0 <netconn_new_with_proto_and_callback+0xe8>)
 8008236:	481d      	ldr	r0, [pc, #116]	; (80082ac <netconn_new_with_proto_and_callback+0xe4>)
 8008238:	f010 fdbe 	bl	8018db8 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800823c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823e:	3314      	adds	r3, #20
 8008240:	4618      	mov	r0, r3
 8008242:	f010 fb64 	bl	801890e <sys_mbox_valid>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d005      	beq.n	8008258 <netconn_new_with_proto_and_callback+0x90>
 800824c:	4b15      	ldr	r3, [pc, #84]	; (80082a4 <netconn_new_with_proto_and_callback+0xdc>)
 800824e:	22a6      	movs	r2, #166	; 0xa6
 8008250:	4918      	ldr	r1, [pc, #96]	; (80082b4 <netconn_new_with_proto_and_callback+0xec>)
 8008252:	4816      	ldr	r0, [pc, #88]	; (80082ac <netconn_new_with_proto_and_callback+0xe4>)
 8008254:	f010 fdb0 	bl	8018db8 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825a:	330c      	adds	r3, #12
 800825c:	4618      	mov	r0, r3
 800825e:	f010 fbe7 	bl	8018a30 <sys_sem_valid>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d105      	bne.n	8008274 <netconn_new_with_proto_and_callback+0xac>
 8008268:	4b0e      	ldr	r3, [pc, #56]	; (80082a4 <netconn_new_with_proto_and_callback+0xdc>)
 800826a:	22a9      	movs	r2, #169	; 0xa9
 800826c:	4912      	ldr	r1, [pc, #72]	; (80082b8 <netconn_new_with_proto_and_callback+0xf0>)
 800826e:	480f      	ldr	r0, [pc, #60]	; (80082ac <netconn_new_with_proto_and_callback+0xe4>)
 8008270:	f010 fda2 	bl	8018db8 <iprintf>
      sys_sem_free(&conn->op_completed);
 8008274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008276:	330c      	adds	r3, #12
 8008278:	4618      	mov	r0, r3
 800827a:	f010 fbcc 	bl	8018a16 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800827e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008280:	3310      	adds	r3, #16
 8008282:	4618      	mov	r0, r3
 8008284:	f010 fabc 	bl	8018800 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008288:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800828a:	2007      	movs	r0, #7
 800828c:	f003 ffb2 	bl	800c1f4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008290:	2300      	movs	r3, #0
 8008292:	e000      	b.n	8008296 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008296:	4618      	mov	r0, r3
 8008298:	3730      	adds	r7, #48	; 0x30
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	0800946d 	.word	0x0800946d
 80082a4:	0801a330 	.word	0x0801a330
 80082a8:	0801a364 	.word	0x0801a364
 80082ac:	0801a388 	.word	0x0801a388
 80082b0:	0801a3b0 	.word	0x0801a3b0
 80082b4:	0801a3c8 	.word	0x0801a3c8
 80082b8:	0801a3ec 	.word	0x0801a3ec

080082bc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b08c      	sub	sp, #48	; 0x30
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <netconn_prepare_delete+0x12>
    return ERR_OK;
 80082ca:	2300      	movs	r3, #0
 80082cc:	e014      	b.n	80082f8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80082d2:	2329      	movs	r3, #41	; 0x29
 80082d4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80082d6:	f107 030c 	add.w	r3, r7, #12
 80082da:	4619      	mov	r1, r3
 80082dc:	4808      	ldr	r0, [pc, #32]	; (8008300 <netconn_prepare_delete+0x44>)
 80082de:	f7ff ff55 	bl	800818c <netconn_apimsg>
 80082e2:	4603      	mov	r3, r0
 80082e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80082e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d002      	beq.n	80082f6 <netconn_prepare_delete+0x3a>
    return err;
 80082f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80082f4:	e000      	b.n	80082f8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3730      	adds	r7, #48	; 0x30
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	080099d9 	.word	0x080099d9

08008304 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d101      	bne.n	8008316 <netconn_delete+0x12>
    return ERR_OK;
 8008312:	2300      	movs	r3, #0
 8008314:	e00d      	b.n	8008332 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f7ff ffd0 	bl	80082bc <netconn_prepare_delete>
 800831c:	4603      	mov	r3, r0
 800831e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d102      	bne.n	800832e <netconn_delete+0x2a>
    netconn_free(conn);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f001 f923 	bl	8009574 <netconn_free>
  }
  return err;
 800832e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
	...

0800833c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b08e      	sub	sp, #56	; 0x38
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	4613      	mov	r3, r2
 8008348:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d109      	bne.n	8008364 <netconn_bind+0x28>
 8008350:	4b11      	ldr	r3, [pc, #68]	; (8008398 <netconn_bind+0x5c>)
 8008352:	f44f 729c 	mov.w	r2, #312	; 0x138
 8008356:	4911      	ldr	r1, [pc, #68]	; (800839c <netconn_bind+0x60>)
 8008358:	4811      	ldr	r0, [pc, #68]	; (80083a0 <netconn_bind+0x64>)
 800835a:	f010 fd2d 	bl	8018db8 <iprintf>
 800835e:	f06f 030f 	mvn.w	r3, #15
 8008362:	e015      	b.n	8008390 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d101      	bne.n	800836e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800836a:	4b0e      	ldr	r3, [pc, #56]	; (80083a4 <netconn_bind+0x68>)
 800836c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008376:	88fb      	ldrh	r3, [r7, #6]
 8008378:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800837a:	f107 0314 	add.w	r3, r7, #20
 800837e:	4619      	mov	r1, r3
 8008380:	4809      	ldr	r0, [pc, #36]	; (80083a8 <netconn_bind+0x6c>)
 8008382:	f7ff ff03 	bl	800818c <netconn_apimsg>
 8008386:	4603      	mov	r3, r0
 8008388:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800838c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008390:	4618      	mov	r0, r3
 8008392:	3738      	adds	r7, #56	; 0x38
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	0801a330 	.word	0x0801a330
 800839c:	0801a468 	.word	0x0801a468
 80083a0:	0801a388 	.word	0x0801a388
 80083a4:	08028040 	.word	0x08028040
 80083a8:	08009ba1 	.word	0x08009ba1

080083ac <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b08e      	sub	sp, #56	; 0x38
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	4613      	mov	r3, r2
 80083b8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d109      	bne.n	80083d4 <netconn_connect+0x28>
 80083c0:	4b11      	ldr	r3, [pc, #68]	; (8008408 <netconn_connect+0x5c>)
 80083c2:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 80083c6:	4911      	ldr	r1, [pc, #68]	; (800840c <netconn_connect+0x60>)
 80083c8:	4811      	ldr	r0, [pc, #68]	; (8008410 <netconn_connect+0x64>)
 80083ca:	f010 fcf5 	bl	8018db8 <iprintf>
 80083ce:	f06f 030f 	mvn.w	r3, #15
 80083d2:	e015      	b.n	8008400 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d101      	bne.n	80083de <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 80083da:	4b0e      	ldr	r3, [pc, #56]	; (8008414 <netconn_connect+0x68>)
 80083dc:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80083e6:	88fb      	ldrh	r3, [r7, #6]
 80083e8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 80083ea:	f107 0314 	add.w	r3, r7, #20
 80083ee:	4619      	mov	r1, r3
 80083f0:	4809      	ldr	r0, [pc, #36]	; (8008418 <netconn_connect+0x6c>)
 80083f2:	f7ff fecb 	bl	800818c <netconn_apimsg>
 80083f6:	4603      	mov	r3, r0
 80083f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80083fc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008400:	4618      	mov	r0, r3
 8008402:	3738      	adds	r7, #56	; 0x38
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	0801a330 	.word	0x0801a330
 800840c:	0801a4a4 	.word	0x0801a4a4
 8008410:	0801a388 	.word	0x0801a388
 8008414:	08028040 	.word	0x08028040
 8008418:	08009d35 	.word	0x08009d35

0800841c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b08c      	sub	sp, #48	; 0x30
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	460b      	mov	r3, r1
 8008426:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d109      	bne.n	8008442 <netconn_listen_with_backlog+0x26>
 800842e:	4b0d      	ldr	r3, [pc, #52]	; (8008464 <netconn_listen_with_backlog+0x48>)
 8008430:	f240 12bb 	movw	r2, #443	; 0x1bb
 8008434:	490c      	ldr	r1, [pc, #48]	; (8008468 <netconn_listen_with_backlog+0x4c>)
 8008436:	480d      	ldr	r0, [pc, #52]	; (800846c <netconn_listen_with_backlog+0x50>)
 8008438:	f010 fcbe 	bl	8018db8 <iprintf>
 800843c:	f06f 030f 	mvn.w	r3, #15
 8008440:	e00c      	b.n	800845c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008446:	f107 030c 	add.w	r3, r7, #12
 800844a:	4619      	mov	r1, r3
 800844c:	4808      	ldr	r0, [pc, #32]	; (8008470 <netconn_listen_with_backlog+0x54>)
 800844e:	f7ff fe9d 	bl	800818c <netconn_apimsg>
 8008452:	4603      	mov	r3, r0
 8008454:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008458:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800845c:	4618      	mov	r0, r3
 800845e:	3730      	adds	r7, #48	; 0x30
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	0801a330 	.word	0x0801a330
 8008468:	0801a4e8 	.word	0x0801a4e8
 800846c:	0801a388 	.word	0x0801a388
 8008470:	08009eb1 	.word	0x08009eb1

08008474 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d109      	bne.n	8008498 <netconn_accept+0x24>
 8008484:	4b3d      	ldr	r3, [pc, #244]	; (800857c <netconn_accept+0x108>)
 8008486:	f240 12e1 	movw	r2, #481	; 0x1e1
 800848a:	493d      	ldr	r1, [pc, #244]	; (8008580 <netconn_accept+0x10c>)
 800848c:	483d      	ldr	r0, [pc, #244]	; (8008584 <netconn_accept+0x110>)
 800848e:	f010 fc93 	bl	8018db8 <iprintf>
 8008492:	f06f 030f 	mvn.w	r3, #15
 8008496:	e06c      	b.n	8008572 <netconn_accept+0xfe>
  *new_conn = NULL;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	2200      	movs	r2, #0
 800849c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d109      	bne.n	80084b8 <netconn_accept+0x44>
 80084a4:	4b35      	ldr	r3, [pc, #212]	; (800857c <netconn_accept+0x108>)
 80084a6:	f240 12e3 	movw	r2, #483	; 0x1e3
 80084aa:	4937      	ldr	r1, [pc, #220]	; (8008588 <netconn_accept+0x114>)
 80084ac:	4835      	ldr	r0, [pc, #212]	; (8008584 <netconn_accept+0x110>)
 80084ae:	f010 fc83 	bl	8018db8 <iprintf>
 80084b2:	f06f 030f 	mvn.w	r3, #15
 80084b6:	e05c      	b.n	8008572 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fb6c 	bl	8008b96 <netconn_err>
 80084be:	4603      	mov	r3, r0
 80084c0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 80084c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d002      	beq.n	80084d0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80084ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80084ce:	e050      	b.n	8008572 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	3314      	adds	r3, #20
 80084d4:	4618      	mov	r0, r3
 80084d6:	f010 fa1a 	bl	801890e <sys_mbox_valid>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d005      	beq.n	80084ec <netconn_accept+0x78>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	7f1b      	ldrb	r3, [r3, #28]
 80084e4:	f003 0301 	and.w	r3, r3, #1
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d002      	beq.n	80084f2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 80084ec:	f06f 030e 	mvn.w	r3, #14
 80084f0:	e03f      	b.n	8008572 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	7f1b      	ldrb	r3, [r3, #28]
 80084f6:	f003 0302 	and.w	r3, r3, #2
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00e      	beq.n	800851c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	3314      	adds	r3, #20
 8008502:	f107 020c 	add.w	r2, r7, #12
 8008506:	4611      	mov	r1, r2
 8008508:	4618      	mov	r0, r3
 800850a:	f010 f9e4 	bl	80188d6 <sys_arch_mbox_tryfetch>
 800850e:	4603      	mov	r3, r0
 8008510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008514:	d10a      	bne.n	800852c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8008516:	f06f 0306 	mvn.w	r3, #6
 800851a:	e02a      	b.n	8008572 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	3314      	adds	r3, #20
 8008520:	f107 010c 	add.w	r1, r7, #12
 8008524:	2200      	movs	r2, #0
 8008526:	4618      	mov	r0, r3
 8008528:	f010 f996 	bl	8018858 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008530:	2b00      	cmp	r3, #0
 8008532:	d005      	beq.n	8008540 <netconn_accept+0xcc>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008538:	2200      	movs	r2, #0
 800853a:	2101      	movs	r1, #1
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f107 0213 	add.w	r2, r7, #19
 8008546:	4611      	mov	r1, r2
 8008548:	4618      	mov	r0, r3
 800854a:	f000 fb75 	bl	8008c38 <lwip_netconn_is_err_msg>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d002      	beq.n	800855a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8008554:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008558:	e00b      	b.n	8008572 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d102      	bne.n	8008566 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8008560:	f06f 030e 	mvn.w	r3, #14
 8008564:	e005      	b.n	8008572 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	697a      	ldr	r2, [r7, #20]
 800856e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008570:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008572:	4618      	mov	r0, r3
 8008574:	3718      	adds	r7, #24
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	0801a330 	.word	0x0801a330
 8008580:	0801a508 	.word	0x0801a508
 8008584:	0801a388 	.word	0x0801a388
 8008588:	0801a528 	.word	0x0801a528

0800858c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b088      	sub	sp, #32
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	4613      	mov	r3, r2
 8008598:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800859a:	2300      	movs	r3, #0
 800859c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d109      	bne.n	80085b8 <netconn_recv_data+0x2c>
 80085a4:	4b58      	ldr	r3, [pc, #352]	; (8008708 <netconn_recv_data+0x17c>)
 80085a6:	f44f 7212 	mov.w	r2, #584	; 0x248
 80085aa:	4958      	ldr	r1, [pc, #352]	; (800870c <netconn_recv_data+0x180>)
 80085ac:	4858      	ldr	r0, [pc, #352]	; (8008710 <netconn_recv_data+0x184>)
 80085ae:	f010 fc03 	bl	8018db8 <iprintf>
 80085b2:	f06f 030f 	mvn.w	r3, #15
 80085b6:	e0a2      	b.n	80086fe <netconn_recv_data+0x172>
  *new_buf = NULL;
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	2200      	movs	r2, #0
 80085bc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d109      	bne.n	80085d8 <netconn_recv_data+0x4c>
 80085c4:	4b50      	ldr	r3, [pc, #320]	; (8008708 <netconn_recv_data+0x17c>)
 80085c6:	f240 224a 	movw	r2, #586	; 0x24a
 80085ca:	4952      	ldr	r1, [pc, #328]	; (8008714 <netconn_recv_data+0x188>)
 80085cc:	4850      	ldr	r0, [pc, #320]	; (8008710 <netconn_recv_data+0x184>)
 80085ce:	f010 fbf3 	bl	8018db8 <iprintf>
 80085d2:	f06f 030f 	mvn.w	r3, #15
 80085d6:	e092      	b.n	80086fe <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	3310      	adds	r3, #16
 80085dc:	4618      	mov	r0, r3
 80085de:	f010 f996 	bl	801890e <sys_mbox_valid>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10e      	bne.n	8008606 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f000 fad4 	bl	8008b96 <netconn_err>
 80085ee:	4603      	mov	r3, r0
 80085f0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 80085f2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d002      	beq.n	8008600 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80085fa:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80085fe:	e07e      	b.n	80086fe <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8008600:	f06f 030a 	mvn.w	r3, #10
 8008604:	e07b      	b.n	80086fe <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	7f1b      	ldrb	r3, [r3, #28]
 800860a:	f003 0302 	and.w	r3, r3, #2
 800860e:	2b00      	cmp	r3, #0
 8008610:	d10f      	bne.n	8008632 <netconn_recv_data+0xa6>
 8008612:	79fb      	ldrb	r3, [r7, #7]
 8008614:	f003 0304 	and.w	r3, r3, #4
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10a      	bne.n	8008632 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	7f1b      	ldrb	r3, [r3, #28]
 8008620:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008624:	2b00      	cmp	r3, #0
 8008626:	d104      	bne.n	8008632 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d023      	beq.n	800867a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	3310      	adds	r3, #16
 8008636:	f107 0218 	add.w	r2, r7, #24
 800863a:	4611      	mov	r1, r2
 800863c:	4618      	mov	r0, r3
 800863e:	f010 f94a 	bl	80188d6 <sys_arch_mbox_tryfetch>
 8008642:	4603      	mov	r3, r0
 8008644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008648:	d11f      	bne.n	800868a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f000 faa3 	bl	8008b96 <netconn_err>
 8008650:	4603      	mov	r3, r0
 8008652:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8008654:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d002      	beq.n	8008662 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800865c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008660:	e04d      	b.n	80086fe <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	7f1b      	ldrb	r3, [r3, #28]
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b00      	cmp	r3, #0
 800866c:	d002      	beq.n	8008674 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800866e:	f06f 030a 	mvn.w	r3, #10
 8008672:	e044      	b.n	80086fe <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8008674:	f06f 0306 	mvn.w	r3, #6
 8008678:	e041      	b.n	80086fe <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	3310      	adds	r3, #16
 800867e:	f107 0118 	add.w	r1, r7, #24
 8008682:	2200      	movs	r2, #0
 8008684:	4618      	mov	r0, r3
 8008686:	f010 f8e7 	bl	8018858 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008692:	2b10      	cmp	r3, #16
 8008694:	d117      	bne.n	80086c6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	f107 0217 	add.w	r2, r7, #23
 800869c:	4611      	mov	r1, r2
 800869e:	4618      	mov	r0, r3
 80086a0:	f000 faca 	bl	8008c38 <lwip_netconn_is_err_msg>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d009      	beq.n	80086be <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80086aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80086ae:	f113 0f0f 	cmn.w	r3, #15
 80086b2:	d101      	bne.n	80086b8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80086b4:	2300      	movs	r3, #0
 80086b6:	e022      	b.n	80086fe <netconn_recv_data+0x172>
      }
      return err;
 80086b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80086bc:	e01f      	b.n	80086fe <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	891b      	ldrh	r3, [r3, #8]
 80086c2:	83fb      	strh	r3, [r7, #30]
 80086c4:	e00d      	b.n	80086e2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d106      	bne.n	80086da <netconn_recv_data+0x14e>
 80086cc:	4b0e      	ldr	r3, [pc, #56]	; (8008708 <netconn_recv_data+0x17c>)
 80086ce:	f240 2291 	movw	r2, #657	; 0x291
 80086d2:	4911      	ldr	r1, [pc, #68]	; (8008718 <netconn_recv_data+0x18c>)
 80086d4:	480e      	ldr	r0, [pc, #56]	; (8008710 <netconn_recv_data+0x184>)
 80086d6:	f010 fb6f 	bl	8018db8 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	891b      	ldrh	r3, [r3, #8]
 80086e0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d005      	beq.n	80086f6 <netconn_recv_data+0x16a>
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ee:	8bfa      	ldrh	r2, [r7, #30]
 80086f0:	2101      	movs	r1, #1
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80086f6:	69ba      	ldr	r2, [r7, #24]
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3720      	adds	r7, #32
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	0801a330 	.word	0x0801a330
 800870c:	0801a548 	.word	0x0801a548
 8008710:	0801a388 	.word	0x0801a388
 8008714:	0801a568 	.word	0x0801a568
 8008718:	0801a584 	.word	0x0801a584

0800871c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d005      	beq.n	800873a <netconn_tcp_recvd_msg+0x1e>
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008736:	2b10      	cmp	r3, #16
 8008738:	d009      	beq.n	800874e <netconn_tcp_recvd_msg+0x32>
 800873a:	4b0c      	ldr	r3, [pc, #48]	; (800876c <netconn_tcp_recvd_msg+0x50>)
 800873c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8008740:	490b      	ldr	r1, [pc, #44]	; (8008770 <netconn_tcp_recvd_msg+0x54>)
 8008742:	480c      	ldr	r0, [pc, #48]	; (8008774 <netconn_tcp_recvd_msg+0x58>)
 8008744:	f010 fb38 	bl	8018db8 <iprintf>
 8008748:	f06f 030f 	mvn.w	r3, #15
 800874c:	e00a      	b.n	8008764 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	68ba      	ldr	r2, [r7, #8]
 8008758:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800875a:	6879      	ldr	r1, [r7, #4]
 800875c:	4806      	ldr	r0, [pc, #24]	; (8008778 <netconn_tcp_recvd_msg+0x5c>)
 800875e:	f7ff fd15 	bl	800818c <netconn_apimsg>
 8008762:	4603      	mov	r3, r0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	0801a330 	.word	0x0801a330
 8008770:	0801a590 	.word	0x0801a590
 8008774:	0801a388 	.word	0x0801a388
 8008778:	08009fe1 	.word	0x08009fe1

0800877c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b090      	sub	sp, #64	; 0x40
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	4613      	mov	r3, r2
 8008788:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	3310      	adds	r3, #16
 800878e:	4618      	mov	r0, r3
 8008790:	f010 f8bd 	bl	801890e <sys_mbox_valid>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d102      	bne.n	80087a0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800879a:	f06f 030a 	mvn.w	r3, #10
 800879e:	e06d      	b.n	800887c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	7f1b      	ldrb	r3, [r3, #28]
 80087a4:	b25b      	sxtb	r3, r3
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	da07      	bge.n	80087ba <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	7f1b      	ldrb	r3, [r3, #28]
 80087ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80087b8:	e039      	b.n	800882e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80087ba:	79fb      	ldrb	r3, [r7, #7]
 80087bc:	461a      	mov	r2, r3
 80087be:	68b9      	ldr	r1, [r7, #8]
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f7ff fee3 	bl	800858c <netconn_recv_data>
 80087c6:	4603      	mov	r3, r0
 80087c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80087cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d002      	beq.n	80087da <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80087d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80087d8:	e050      	b.n	800887c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80087e0:	79fb      	ldrb	r3, [r7, #7]
 80087e2:	f003 0308 	and.w	r3, r3, #8
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d10e      	bne.n	8008808 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80087ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d002      	beq.n	80087f6 <netconn_recv_data_tcp+0x7a>
 80087f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f2:	891b      	ldrh	r3, [r3, #8]
 80087f4:	e000      	b.n	80087f8 <netconn_recv_data_tcp+0x7c>
 80087f6:	2301      	movs	r3, #1
 80087f8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80087fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80087fc:	f107 0214 	add.w	r2, r7, #20
 8008800:	4619      	mov	r1, r3
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f7ff ff8a 	bl	800871c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8008808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880a:	2b00      	cmp	r3, #0
 800880c:	d134      	bne.n	8008878 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800880e:	79fb      	ldrb	r3, [r7, #7]
 8008810:	f003 0310 	and.w	r3, r3, #16
 8008814:	2b00      	cmp	r3, #0
 8008816:	d009      	beq.n	800882c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	7f1b      	ldrb	r3, [r3, #28]
 800881c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008820:	b2da      	uxtb	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8008826:	f06f 0306 	mvn.w	r3, #6
 800882a:	e027      	b.n	800887c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800882c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008832:	2b00      	cmp	r3, #0
 8008834:	d005      	beq.n	8008842 <netconn_recv_data_tcp+0xc6>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883a:	2200      	movs	r2, #0
 800883c:	2101      	movs	r1, #1
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d10f      	bne.n	800886a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f000 f9a3 	bl	8008b96 <netconn_err>
 8008850:	4603      	mov	r3, r0
 8008852:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8008856:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800885a:	2b00      	cmp	r3, #0
 800885c:	d002      	beq.n	8008864 <netconn_recv_data_tcp+0xe8>
          return err;
 800885e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008862:	e00b      	b.n	800887c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8008864:	f06f 030d 	mvn.w	r3, #13
 8008868:	e008      	b.n	800887c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800886a:	2101      	movs	r1, #1
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f000 f955 	bl	8008b1c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008872:	f06f 030e 	mvn.w	r3, #14
 8008876:	e001      	b.n	800887c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8008878:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800887c:	4618      	mov	r0, r3
 800887e:	3740      	adds	r7, #64	; 0x40
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b086      	sub	sp, #24
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800888e:	2300      	movs	r3, #0
 8008890:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d109      	bne.n	80088ac <netconn_recv+0x28>
 8008898:	4b32      	ldr	r3, [pc, #200]	; (8008964 <netconn_recv+0xe0>)
 800889a:	f240 3263 	movw	r2, #867	; 0x363
 800889e:	4932      	ldr	r1, [pc, #200]	; (8008968 <netconn_recv+0xe4>)
 80088a0:	4832      	ldr	r0, [pc, #200]	; (800896c <netconn_recv+0xe8>)
 80088a2:	f010 fa89 	bl	8018db8 <iprintf>
 80088a6:	f06f 030f 	mvn.w	r3, #15
 80088aa:	e056      	b.n	800895a <netconn_recv+0xd6>
  *new_buf = NULL;
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	2200      	movs	r2, #0
 80088b0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d109      	bne.n	80088cc <netconn_recv+0x48>
 80088b8:	4b2a      	ldr	r3, [pc, #168]	; (8008964 <netconn_recv+0xe0>)
 80088ba:	f240 3265 	movw	r2, #869	; 0x365
 80088be:	492c      	ldr	r1, [pc, #176]	; (8008970 <netconn_recv+0xec>)
 80088c0:	482a      	ldr	r0, [pc, #168]	; (800896c <netconn_recv+0xe8>)
 80088c2:	f010 fa79 	bl	8018db8 <iprintf>
 80088c6:	f06f 030f 	mvn.w	r3, #15
 80088ca:	e046      	b.n	800895a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088d4:	2b10      	cmp	r3, #16
 80088d6:	d13a      	bne.n	800894e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80088d8:	2300      	movs	r3, #0
 80088da:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80088dc:	2006      	movs	r0, #6
 80088de:	f003 fc13 	bl	800c108 <memp_malloc>
 80088e2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d102      	bne.n	80088f0 <netconn_recv+0x6c>
      return ERR_MEM;
 80088ea:	f04f 33ff 	mov.w	r3, #4294967295
 80088ee:	e034      	b.n	800895a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 80088f0:	f107 030c 	add.w	r3, r7, #12
 80088f4:	2200      	movs	r2, #0
 80088f6:	4619      	mov	r1, r3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f7ff ff3f 	bl	800877c <netconn_recv_data_tcp>
 80088fe:	4603      	mov	r3, r0
 8008900:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8008902:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d006      	beq.n	8008918 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800890a:	6979      	ldr	r1, [r7, #20]
 800890c:	2006      	movs	r0, #6
 800890e:	f003 fc71 	bl	800c1f4 <memp_free>
      return err;
 8008912:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008916:	e020      	b.n	800895a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d106      	bne.n	800892c <netconn_recv+0xa8>
 800891e:	4b11      	ldr	r3, [pc, #68]	; (8008964 <netconn_recv+0xe0>)
 8008920:	f240 3279 	movw	r2, #889	; 0x379
 8008924:	4913      	ldr	r1, [pc, #76]	; (8008974 <netconn_recv+0xf0>)
 8008926:	4811      	ldr	r0, [pc, #68]	; (800896c <netconn_recv+0xe8>)
 8008928:	f010 fa46 	bl	8018db8 <iprintf>

    buf->p = p;
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	2200      	movs	r2, #0
 800893c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	2200      	movs	r2, #0
 8008942:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800894a:	2300      	movs	r3, #0
 800894c:	e005      	b.n	800895a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800894e:	2200      	movs	r2, #0
 8008950:	6839      	ldr	r1, [r7, #0]
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f7ff fe1a 	bl	800858c <netconn_recv_data>
 8008958:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800895a:	4618      	mov	r0, r3
 800895c:	3718      	adds	r7, #24
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	0801a330 	.word	0x0801a330
 8008968:	0801a548 	.word	0x0801a548
 800896c:	0801a388 	.word	0x0801a388
 8008970:	0801a568 	.word	0x0801a568
 8008974:	0801a5e0 	.word	0x0801a5e0

08008978 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b088      	sub	sp, #32
 800897c:	af02      	add	r7, sp, #8
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]
 8008984:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800898e:	78fa      	ldrb	r2, [r7, #3]
 8008990:	f107 0110 	add.w	r1, r7, #16
 8008994:	6a3b      	ldr	r3, [r7, #32]
 8008996:	9300      	str	r3, [sp, #0]
 8008998:	4613      	mov	r3, r2
 800899a:	2201      	movs	r2, #1
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f000 f805 	bl	80089ac <netconn_write_vectors_partly>
 80089a2:	4603      	mov	r3, r0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3718      	adds	r7, #24
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b092      	sub	sp, #72	; 0x48
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	4611      	mov	r1, r2
 80089b8:	461a      	mov	r2, r3
 80089ba:	460b      	mov	r3, r1
 80089bc:	80fb      	strh	r3, [r7, #6]
 80089be:	4613      	mov	r3, r2
 80089c0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d109      	bne.n	80089dc <netconn_write_vectors_partly+0x30>
 80089c8:	4b4e      	ldr	r3, [pc, #312]	; (8008b04 <netconn_write_vectors_partly+0x158>)
 80089ca:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80089ce:	494e      	ldr	r1, [pc, #312]	; (8008b08 <netconn_write_vectors_partly+0x15c>)
 80089d0:	484e      	ldr	r0, [pc, #312]	; (8008b0c <netconn_write_vectors_partly+0x160>)
 80089d2:	f010 f9f1 	bl	8018db8 <iprintf>
 80089d6:	f06f 030f 	mvn.w	r3, #15
 80089da:	e08e      	b.n	8008afa <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089e4:	2b10      	cmp	r3, #16
 80089e6:	d009      	beq.n	80089fc <netconn_write_vectors_partly+0x50>
 80089e8:	4b46      	ldr	r3, [pc, #280]	; (8008b04 <netconn_write_vectors_partly+0x158>)
 80089ea:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80089ee:	4948      	ldr	r1, [pc, #288]	; (8008b10 <netconn_write_vectors_partly+0x164>)
 80089f0:	4846      	ldr	r0, [pc, #280]	; (8008b0c <netconn_write_vectors_partly+0x160>)
 80089f2:	f010 f9e1 	bl	8018db8 <iprintf>
 80089f6:	f06f 0305 	mvn.w	r3, #5
 80089fa:	e07e      	b.n	8008afa <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	7f1b      	ldrb	r3, [r3, #28]
 8008a00:	f003 0302 	and.w	r3, r3, #2
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d104      	bne.n	8008a12 <netconn_write_vectors_partly+0x66>
 8008a08:	797b      	ldrb	r3, [r7, #5]
 8008a0a:	f003 0304 	and.w	r3, r3, #4
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d001      	beq.n	8008a16 <netconn_write_vectors_partly+0x6a>
 8008a12:	2301      	movs	r3, #1
 8008a14:	e000      	b.n	8008a18 <netconn_write_vectors_partly+0x6c>
 8008a16:	2300      	movs	r3, #0
 8008a18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8008a1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d005      	beq.n	8008a30 <netconn_write_vectors_partly+0x84>
 8008a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d102      	bne.n	8008a30 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8008a2a:	f06f 0305 	mvn.w	r3, #5
 8008a2e:	e064      	b.n	8008afa <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008a30:	2300      	movs	r3, #0
 8008a32:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008a34:	2300      	movs	r3, #0
 8008a36:	643b      	str	r3, [r7, #64]	; 0x40
 8008a38:	e015      	b.n	8008a66 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8008a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a3c:	00db      	lsls	r3, r3, #3
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	4413      	add	r3, r2
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a46:	4413      	add	r3, r2
 8008a48:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8008a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a4c:	00db      	lsls	r3, r3, #3
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	4413      	add	r3, r2
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d202      	bcs.n	8008a60 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8008a5a:	f06f 0305 	mvn.w	r3, #5
 8008a5e:	e04c      	b.n	8008afa <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a62:	3301      	adds	r3, #1
 8008a64:	643b      	str	r3, [r7, #64]	; 0x40
 8008a66:	88fb      	ldrh	r3, [r7, #6]
 8008a68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	dbe5      	blt.n	8008a3a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8008a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d101      	bne.n	8008a78 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8008a74:	2300      	movs	r3, #0
 8008a76:	e040      	b.n	8008afa <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	da0a      	bge.n	8008a94 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8008a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d102      	bne.n	8008a8a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8008a84:	f06f 0305 	mvn.w	r3, #5
 8008a88:	e037      	b.n	8008afa <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8008a8a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008a8e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8008a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a92:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8008a9c:	88fb      	ldrh	r3, [r7, #6]
 8008a9e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008aa4:	797b      	ldrb	r3, [r7, #5]
 8008aa6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8008aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aac:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008ab2:	f107 0314 	add.w	r3, r7, #20
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	4816      	ldr	r0, [pc, #88]	; (8008b14 <netconn_write_vectors_partly+0x168>)
 8008aba:	f7ff fb67 	bl	800818c <netconn_apimsg>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8008ac4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d114      	bne.n	8008af6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8008acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d002      	beq.n	8008ad8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ad6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008ad8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d10a      	bne.n	8008af6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d006      	beq.n	8008af6 <netconn_write_vectors_partly+0x14a>
 8008ae8:	4b06      	ldr	r3, [pc, #24]	; (8008b04 <netconn_write_vectors_partly+0x158>)
 8008aea:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008aee:	490a      	ldr	r1, [pc, #40]	; (8008b18 <netconn_write_vectors_partly+0x16c>)
 8008af0:	4806      	ldr	r0, [pc, #24]	; (8008b0c <netconn_write_vectors_partly+0x160>)
 8008af2:	f010 f961 	bl	8018db8 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008af6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3748      	adds	r7, #72	; 0x48
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	0801a330 	.word	0x0801a330
 8008b08:	0801a608 	.word	0x0801a608
 8008b0c:	0801a388 	.word	0x0801a388
 8008b10:	0801a624 	.word	0x0801a624
 8008b14:	0800a3e5 	.word	0x0800a3e5
 8008b18:	0801a648 	.word	0x0801a648

08008b1c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b08c      	sub	sp, #48	; 0x30
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	460b      	mov	r3, r1
 8008b26:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d109      	bne.n	8008b42 <netconn_close_shutdown+0x26>
 8008b2e:	4b0f      	ldr	r3, [pc, #60]	; (8008b6c <netconn_close_shutdown+0x50>)
 8008b30:	f240 4247 	movw	r2, #1095	; 0x447
 8008b34:	490e      	ldr	r1, [pc, #56]	; (8008b70 <netconn_close_shutdown+0x54>)
 8008b36:	480f      	ldr	r0, [pc, #60]	; (8008b74 <netconn_close_shutdown+0x58>)
 8008b38:	f010 f93e 	bl	8018db8 <iprintf>
 8008b3c:	f06f 030f 	mvn.w	r3, #15
 8008b40:	e010      	b.n	8008b64 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008b46:	78fb      	ldrb	r3, [r7, #3]
 8008b48:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008b4a:	2329      	movs	r3, #41	; 0x29
 8008b4c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8008b4e:	f107 030c 	add.w	r3, r7, #12
 8008b52:	4619      	mov	r1, r3
 8008b54:	4808      	ldr	r0, [pc, #32]	; (8008b78 <netconn_close_shutdown+0x5c>)
 8008b56:	f7ff fb19 	bl	800818c <netconn_apimsg>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008b60:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3730      	adds	r7, #48	; 0x30
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	0801a330 	.word	0x0801a330
 8008b70:	0801a66c 	.word	0x0801a66c
 8008b74:	0801a388 	.word	0x0801a388
 8008b78:	0800a4fd 	.word	0x0800a4fd

08008b7c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008b84:	2103      	movs	r1, #3
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f7ff ffc8 	bl	8008b1c <netconn_close_shutdown>
 8008b8c:	4603      	mov	r3, r0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b084      	sub	sp, #16
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d101      	bne.n	8008ba8 <netconn_err+0x12>
    return ERR_OK;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	e00d      	b.n	8008bc4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008ba8:	f00f ffcc 	bl	8018b44 <sys_arch_protect>
 8008bac:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	7a1b      	ldrb	r3, [r3, #8]
 8008bb2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f00f ffd0 	bl	8018b60 <sys_arch_unprotect>
  return err;
 8008bc0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bda:	f113 0f0d 	cmn.w	r3, #13
 8008bde:	d009      	beq.n	8008bf4 <lwip_netconn_err_to_msg+0x28>
 8008be0:	f113 0f0d 	cmn.w	r3, #13
 8008be4:	dc0c      	bgt.n	8008c00 <lwip_netconn_err_to_msg+0x34>
 8008be6:	f113 0f0f 	cmn.w	r3, #15
 8008bea:	d007      	beq.n	8008bfc <lwip_netconn_err_to_msg+0x30>
 8008bec:	f113 0f0e 	cmn.w	r3, #14
 8008bf0:	d002      	beq.n	8008bf8 <lwip_netconn_err_to_msg+0x2c>
 8008bf2:	e005      	b.n	8008c00 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008bf4:	4b0a      	ldr	r3, [pc, #40]	; (8008c20 <lwip_netconn_err_to_msg+0x54>)
 8008bf6:	e00e      	b.n	8008c16 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008bf8:	4b0a      	ldr	r3, [pc, #40]	; (8008c24 <lwip_netconn_err_to_msg+0x58>)
 8008bfa:	e00c      	b.n	8008c16 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8008bfc:	4b0a      	ldr	r3, [pc, #40]	; (8008c28 <lwip_netconn_err_to_msg+0x5c>)
 8008bfe:	e00a      	b.n	8008c16 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8008c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d005      	beq.n	8008c14 <lwip_netconn_err_to_msg+0x48>
 8008c08:	4b08      	ldr	r3, [pc, #32]	; (8008c2c <lwip_netconn_err_to_msg+0x60>)
 8008c0a:	227d      	movs	r2, #125	; 0x7d
 8008c0c:	4908      	ldr	r1, [pc, #32]	; (8008c30 <lwip_netconn_err_to_msg+0x64>)
 8008c0e:	4809      	ldr	r0, [pc, #36]	; (8008c34 <lwip_netconn_err_to_msg+0x68>)
 8008c10:	f010 f8d2 	bl	8018db8 <iprintf>
      return NULL;
 8008c14:	2300      	movs	r3, #0
  }
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3708      	adds	r7, #8
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	0801dde4 	.word	0x0801dde4
 8008c24:	0801dde5 	.word	0x0801dde5
 8008c28:	0801dde6 	.word	0x0801dde6
 8008c2c:	0801a688 	.word	0x0801a688
 8008c30:	0801a6bc 	.word	0x0801a6bc
 8008c34:	0801a6cc 	.word	0x0801a6cc

08008c38 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d105      	bne.n	8008c54 <lwip_netconn_is_err_msg+0x1c>
 8008c48:	4b12      	ldr	r3, [pc, #72]	; (8008c94 <lwip_netconn_is_err_msg+0x5c>)
 8008c4a:	2285      	movs	r2, #133	; 0x85
 8008c4c:	4912      	ldr	r1, [pc, #72]	; (8008c98 <lwip_netconn_is_err_msg+0x60>)
 8008c4e:	4813      	ldr	r0, [pc, #76]	; (8008c9c <lwip_netconn_is_err_msg+0x64>)
 8008c50:	f010 f8b2 	bl	8018db8 <iprintf>

  if (msg == &netconn_aborted) {
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a12      	ldr	r2, [pc, #72]	; (8008ca0 <lwip_netconn_is_err_msg+0x68>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d104      	bne.n	8008c66 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	22f3      	movs	r2, #243	; 0xf3
 8008c60:	701a      	strb	r2, [r3, #0]
    return 1;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e012      	b.n	8008c8c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a0e      	ldr	r2, [pc, #56]	; (8008ca4 <lwip_netconn_is_err_msg+0x6c>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d104      	bne.n	8008c78 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	22f2      	movs	r2, #242	; 0xf2
 8008c72:	701a      	strb	r2, [r3, #0]
    return 1;
 8008c74:	2301      	movs	r3, #1
 8008c76:	e009      	b.n	8008c8c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4a0b      	ldr	r2, [pc, #44]	; (8008ca8 <lwip_netconn_is_err_msg+0x70>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d104      	bne.n	8008c8a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	22f1      	movs	r2, #241	; 0xf1
 8008c84:	701a      	strb	r2, [r3, #0]
    return 1;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e000      	b.n	8008c8c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3708      	adds	r7, #8
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	0801a688 	.word	0x0801a688
 8008c98:	0801a6f4 	.word	0x0801a6f4
 8008c9c:	0801a6cc 	.word	0x0801a6cc
 8008ca0:	0801dde4 	.word	0x0801dde4
 8008ca4:	0801dde5 	.word	0x0801dde5
 8008ca8:	0801dde6 	.word	0x0801dde6

08008cac <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b088      	sub	sp, #32
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
 8008cb8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d105      	bne.n	8008ccc <recv_udp+0x20>
 8008cc0:	4b34      	ldr	r3, [pc, #208]	; (8008d94 <recv_udp+0xe8>)
 8008cc2:	22e5      	movs	r2, #229	; 0xe5
 8008cc4:	4934      	ldr	r1, [pc, #208]	; (8008d98 <recv_udp+0xec>)
 8008cc6:	4835      	ldr	r0, [pc, #212]	; (8008d9c <recv_udp+0xf0>)
 8008cc8:	f010 f876 	bl	8018db8 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d105      	bne.n	8008cde <recv_udp+0x32>
 8008cd2:	4b30      	ldr	r3, [pc, #192]	; (8008d94 <recv_udp+0xe8>)
 8008cd4:	22e6      	movs	r2, #230	; 0xe6
 8008cd6:	4932      	ldr	r1, [pc, #200]	; (8008da0 <recv_udp+0xf4>)
 8008cd8:	4830      	ldr	r0, [pc, #192]	; (8008d9c <recv_udp+0xf0>)
 8008cda:	f010 f86d 	bl	8018db8 <iprintf>
  conn = (struct netconn *)arg;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d103      	bne.n	8008cf0 <recv_udp+0x44>
    pbuf_free(p);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f004 f933 	bl	800cf54 <pbuf_free>
    return;
 8008cee:	e04d      	b.n	8008d8c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	68ba      	ldr	r2, [r7, #8]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d005      	beq.n	8008d06 <recv_udp+0x5a>
 8008cfa:	4b26      	ldr	r3, [pc, #152]	; (8008d94 <recv_udp+0xe8>)
 8008cfc:	22ee      	movs	r2, #238	; 0xee
 8008cfe:	4929      	ldr	r1, [pc, #164]	; (8008da4 <recv_udp+0xf8>)
 8008d00:	4826      	ldr	r0, [pc, #152]	; (8008d9c <recv_udp+0xf0>)
 8008d02:	f010 f859 	bl	8018db8 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	3310      	adds	r3, #16
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f00f fdff 	bl	801890e <sys_mbox_valid>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d103      	bne.n	8008d1e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f004 f91c 	bl	800cf54 <pbuf_free>
    return;
 8008d1c:	e036      	b.n	8008d8c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008d1e:	2006      	movs	r0, #6
 8008d20:	f003 f9f2 	bl	800c108 <memp_malloc>
 8008d24:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d103      	bne.n	8008d34 <recv_udp+0x88>
    pbuf_free(p);
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f004 f911 	bl	800cf54 <pbuf_free>
    return;
 8008d32:	e02b      	b.n	8008d8c <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d002      	beq.n	8008d4c <recv_udp+0xa0>
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	e000      	b.n	8008d4e <recv_udp+0xa2>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	69ba      	ldr	r2, [r7, #24]
 8008d50:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008d56:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	891b      	ldrh	r3, [r3, #8]
 8008d5c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	3310      	adds	r3, #16
 8008d62:	69b9      	ldr	r1, [r7, #24]
 8008d64:	4618      	mov	r0, r3
 8008d66:	f00f fd5d 	bl	8018824 <sys_mbox_trypost>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d003      	beq.n	8008d78 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008d70:	69b8      	ldr	r0, [r7, #24]
 8008d72:	f001 fc4f 	bl	800a614 <netbuf_delete>
    return;
 8008d76:	e009      	b.n	8008d8c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d005      	beq.n	8008d8c <recv_udp+0xe0>
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d84:	8afa      	ldrh	r2, [r7, #22]
 8008d86:	2100      	movs	r1, #0
 8008d88:	69f8      	ldr	r0, [r7, #28]
 8008d8a:	4798      	blx	r3
  }
}
 8008d8c:	3720      	adds	r7, #32
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	0801a688 	.word	0x0801a688
 8008d98:	0801a700 	.word	0x0801a700
 8008d9c:	0801a6cc 	.word	0x0801a6cc
 8008da0:	0801a724 	.word	0x0801a724
 8008da4:	0801a744 	.word	0x0801a744

08008da8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b088      	sub	sp, #32
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
 8008db4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d106      	bne.n	8008dca <recv_tcp+0x22>
 8008dbc:	4b36      	ldr	r3, [pc, #216]	; (8008e98 <recv_tcp+0xf0>)
 8008dbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008dc2:	4936      	ldr	r1, [pc, #216]	; (8008e9c <recv_tcp+0xf4>)
 8008dc4:	4836      	ldr	r0, [pc, #216]	; (8008ea0 <recv_tcp+0xf8>)
 8008dc6:	f00f fff7 	bl	8018db8 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d106      	bne.n	8008dde <recv_tcp+0x36>
 8008dd0:	4b31      	ldr	r3, [pc, #196]	; (8008e98 <recv_tcp+0xf0>)
 8008dd2:	f240 122d 	movw	r2, #301	; 0x12d
 8008dd6:	4933      	ldr	r1, [pc, #204]	; (8008ea4 <recv_tcp+0xfc>)
 8008dd8:	4831      	ldr	r0, [pc, #196]	; (8008ea0 <recv_tcp+0xf8>)
 8008dda:	f00f ffed 	bl	8018db8 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8008dde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d006      	beq.n	8008df4 <recv_tcp+0x4c>
 8008de6:	4b2c      	ldr	r3, [pc, #176]	; (8008e98 <recv_tcp+0xf0>)
 8008de8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8008dec:	492e      	ldr	r1, [pc, #184]	; (8008ea8 <recv_tcp+0x100>)
 8008dee:	482c      	ldr	r0, [pc, #176]	; (8008ea0 <recv_tcp+0xf8>)
 8008df0:	f00f ffe2 	bl	8018db8 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d102      	bne.n	8008e04 <recv_tcp+0x5c>
    return ERR_VAL;
 8008dfe:	f06f 0305 	mvn.w	r3, #5
 8008e02:	e045      	b.n	8008e90 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	68ba      	ldr	r2, [r7, #8]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d006      	beq.n	8008e1c <recv_tcp+0x74>
 8008e0e:	4b22      	ldr	r3, [pc, #136]	; (8008e98 <recv_tcp+0xf0>)
 8008e10:	f240 1235 	movw	r2, #309	; 0x135
 8008e14:	4925      	ldr	r1, [pc, #148]	; (8008eac <recv_tcp+0x104>)
 8008e16:	4822      	ldr	r0, [pc, #136]	; (8008ea0 <recv_tcp+0xf8>)
 8008e18:	f00f ffce 	bl	8018db8 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	3310      	adds	r3, #16
 8008e20:	4618      	mov	r0, r3
 8008e22:	f00f fd74 	bl	801890e <sys_mbox_valid>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d10d      	bne.n	8008e48 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d008      	beq.n	8008e44 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	891b      	ldrh	r3, [r3, #8]
 8008e36:	4619      	mov	r1, r3
 8008e38:	68b8      	ldr	r0, [r7, #8]
 8008e3a:	f005 f865 	bl	800df08 <tcp_recved>
      pbuf_free(p);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f004 f888 	bl	800cf54 <pbuf_free>
    }
    return ERR_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	e023      	b.n	8008e90 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d005      	beq.n	8008e5a <recv_tcp+0xb2>
    msg = p;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	891b      	ldrh	r3, [r3, #8]
 8008e56:	83fb      	strh	r3, [r7, #30]
 8008e58:	e003      	b.n	8008e62 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8008e5a:	4b15      	ldr	r3, [pc, #84]	; (8008eb0 <recv_tcp+0x108>)
 8008e5c:	61bb      	str	r3, [r7, #24]
    len = 0;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	3310      	adds	r3, #16
 8008e66:	69b9      	ldr	r1, [r7, #24]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f00f fcdb 	bl	8018824 <sys_mbox_trypost>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d002      	beq.n	8008e7a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008e74:	f04f 33ff 	mov.w	r3, #4294967295
 8008e78:	e00a      	b.n	8008e90 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d005      	beq.n	8008e8e <recv_tcp+0xe6>
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e86:	8bfa      	ldrh	r2, [r7, #30]
 8008e88:	2100      	movs	r1, #0
 8008e8a:	6978      	ldr	r0, [r7, #20]
 8008e8c:	4798      	blx	r3
  }

  return ERR_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3720      	adds	r7, #32
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	0801a688 	.word	0x0801a688
 8008e9c:	0801a764 	.word	0x0801a764
 8008ea0:	0801a6cc 	.word	0x0801a6cc
 8008ea4:	0801a788 	.word	0x0801a788
 8008ea8:	0801a7a8 	.word	0x0801a7a8
 8008eac:	0801a7c0 	.word	0x0801a7c0
 8008eb0:	0801dde6 	.word	0x0801dde6

08008eb4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d106      	bne.n	8008ed6 <poll_tcp+0x22>
 8008ec8:	4b29      	ldr	r3, [pc, #164]	; (8008f70 <poll_tcp+0xbc>)
 8008eca:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8008ece:	4929      	ldr	r1, [pc, #164]	; (8008f74 <poll_tcp+0xc0>)
 8008ed0:	4829      	ldr	r0, [pc, #164]	; (8008f78 <poll_tcp+0xc4>)
 8008ed2:	f00f ff71 	bl	8018db8 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	785b      	ldrb	r3, [r3, #1]
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d104      	bne.n	8008ee8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008ede:	2101      	movs	r1, #1
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f001 f8b3 	bl	800a04c <lwip_netconn_do_writemore>
 8008ee6:	e016      	b.n	8008f16 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	785b      	ldrb	r3, [r3, #1]
 8008eec:	2b04      	cmp	r3, #4
 8008eee:	d112      	bne.n	8008f16 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6a1b      	ldr	r3, [r3, #32]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00a      	beq.n	8008f0e <poll_tcp+0x5a>
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6a1b      	ldr	r3, [r3, #32]
 8008efc:	7a5b      	ldrb	r3, [r3, #9]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d005      	beq.n	8008f0e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	7a5a      	ldrb	r2, [r3, #9]
 8008f08:	3a01      	subs	r2, #1
 8008f0a:	b2d2      	uxtb	r2, r2
 8008f0c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008f0e:	2101      	movs	r1, #1
 8008f10:	68f8      	ldr	r0, [r7, #12]
 8008f12:	f000 fbf7 	bl	8009704 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	7f1b      	ldrb	r3, [r3, #28]
 8008f1a:	f003 0310 	and.w	r3, r3, #16
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d021      	beq.n	8008f66 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d01d      	beq.n	8008f66 <poll_tcp+0xb2>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008f32:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008f36:	d316      	bcc.n	8008f66 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008f40:	2b04      	cmp	r3, #4
 8008f42:	d810      	bhi.n	8008f66 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	7f1b      	ldrb	r3, [r3, #28]
 8008f48:	f023 0310 	bic.w	r3, r3, #16
 8008f4c:	b2da      	uxtb	r2, r3
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d005      	beq.n	8008f66 <poll_tcp+0xb2>
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5e:	2200      	movs	r2, #0
 8008f60:	2102      	movs	r1, #2
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	0801a688 	.word	0x0801a688
 8008f74:	0801a7e0 	.word	0x0801a7e0
 8008f78:	0801a6cc 	.word	0x0801a6cc

08008f7c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b086      	sub	sp, #24
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	4613      	mov	r3, r2
 8008f88:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d106      	bne.n	8008fa2 <sent_tcp+0x26>
 8008f94:	4b20      	ldr	r3, [pc, #128]	; (8009018 <sent_tcp+0x9c>)
 8008f96:	f240 1293 	movw	r2, #403	; 0x193
 8008f9a:	4920      	ldr	r1, [pc, #128]	; (800901c <sent_tcp+0xa0>)
 8008f9c:	4820      	ldr	r0, [pc, #128]	; (8009020 <sent_tcp+0xa4>)
 8008f9e:	f00f ff0b 	bl	8018db8 <iprintf>

  if (conn) {
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d032      	beq.n	800900e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	785b      	ldrb	r3, [r3, #1]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d104      	bne.n	8008fba <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008fb0:	2101      	movs	r1, #1
 8008fb2:	6978      	ldr	r0, [r7, #20]
 8008fb4:	f001 f84a 	bl	800a04c <lwip_netconn_do_writemore>
 8008fb8:	e007      	b.n	8008fca <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	785b      	ldrb	r3, [r3, #1]
 8008fbe:	2b04      	cmp	r3, #4
 8008fc0:	d103      	bne.n	8008fca <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008fc2:	2101      	movs	r1, #1
 8008fc4:	6978      	ldr	r0, [r7, #20]
 8008fc6:	f000 fb9d 	bl	8009704 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d01d      	beq.n	800900e <sent_tcp+0x92>
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008fda:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008fde:	d316      	bcc.n	800900e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008fe8:	2b04      	cmp	r3, #4
 8008fea:	d810      	bhi.n	800900e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	7f1b      	ldrb	r3, [r3, #28]
 8008ff0:	f023 0310 	bic.w	r3, r3, #16
 8008ff4:	b2da      	uxtb	r2, r3
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d005      	beq.n	800900e <sent_tcp+0x92>
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009006:	88fa      	ldrh	r2, [r7, #6]
 8009008:	2102      	movs	r1, #2
 800900a:	6978      	ldr	r0, [r7, #20]
 800900c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	3718      	adds	r7, #24
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	0801a688 	.word	0x0801a688
 800901c:	0801a7e0 	.word	0x0801a7e0
 8009020:	0801a6cc 	.word	0x0801a6cc

08009024 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b088      	sub	sp, #32
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	460b      	mov	r3, r1
 800902e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d106      	bne.n	8009048 <err_tcp+0x24>
 800903a:	4b5f      	ldr	r3, [pc, #380]	; (80091b8 <err_tcp+0x194>)
 800903c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009040:	495e      	ldr	r1, [pc, #376]	; (80091bc <err_tcp+0x198>)
 8009042:	485f      	ldr	r0, [pc, #380]	; (80091c0 <err_tcp+0x19c>)
 8009044:	f00f feb8 	bl	8018db8 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009048:	f00f fd7c 	bl	8018b44 <sys_arch_protect>
 800904c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	2200      	movs	r2, #0
 8009052:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	78fa      	ldrb	r2, [r7, #3]
 8009058:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	7f1b      	ldrb	r3, [r3, #28]
 800905e:	f043 0301 	orr.w	r3, r3, #1
 8009062:	b2da      	uxtb	r2, r3
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	785b      	ldrb	r3, [r3, #1]
 800906c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	2200      	movs	r2, #0
 8009072:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009074:	69b8      	ldr	r0, [r7, #24]
 8009076:	f00f fd73 	bl	8018b60 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907e:	2b00      	cmp	r3, #0
 8009080:	d005      	beq.n	800908e <err_tcp+0x6a>
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009086:	2200      	movs	r2, #0
 8009088:	2104      	movs	r1, #4
 800908a:	69f8      	ldr	r0, [r7, #28]
 800908c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009092:	2b00      	cmp	r3, #0
 8009094:	d005      	beq.n	80090a2 <err_tcp+0x7e>
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909a:	2200      	movs	r2, #0
 800909c:	2100      	movs	r1, #0
 800909e:	69f8      	ldr	r0, [r7, #28]
 80090a0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d005      	beq.n	80090b6 <err_tcp+0x92>
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ae:	2200      	movs	r2, #0
 80090b0:	2102      	movs	r1, #2
 80090b2:	69f8      	ldr	r0, [r7, #28]
 80090b4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 80090b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7ff fd86 	bl	8008bcc <lwip_netconn_err_to_msg>
 80090c0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	3310      	adds	r3, #16
 80090c6:	4618      	mov	r0, r3
 80090c8:	f00f fc21 	bl	801890e <sys_mbox_valid>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d005      	beq.n	80090de <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	3310      	adds	r3, #16
 80090d6:	6939      	ldr	r1, [r7, #16]
 80090d8:	4618      	mov	r0, r3
 80090da:	f00f fba3 	bl	8018824 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	3314      	adds	r3, #20
 80090e2:	4618      	mov	r0, r3
 80090e4:	f00f fc13 	bl	801890e <sys_mbox_valid>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d005      	beq.n	80090fa <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	3314      	adds	r3, #20
 80090f2:	6939      	ldr	r1, [r7, #16]
 80090f4:	4618      	mov	r0, r3
 80090f6:	f00f fb95 	bl	8018824 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80090fa:	7dfb      	ldrb	r3, [r7, #23]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d005      	beq.n	800910c <err_tcp+0xe8>
 8009100:	7dfb      	ldrb	r3, [r7, #23]
 8009102:	2b04      	cmp	r3, #4
 8009104:	d002      	beq.n	800910c <err_tcp+0xe8>
 8009106:	7dfb      	ldrb	r3, [r7, #23]
 8009108:	2b03      	cmp	r3, #3
 800910a:	d143      	bne.n	8009194 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	7f1b      	ldrb	r3, [r3, #28]
 8009110:	f003 0304 	and.w	r3, r3, #4
 8009114:	2b00      	cmp	r3, #0
 8009116:	bf14      	ite	ne
 8009118:	2301      	movne	r3, #1
 800911a:	2300      	moveq	r3, #0
 800911c:	b2db      	uxtb	r3, r3
 800911e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	7f1b      	ldrb	r3, [r3, #28]
 8009124:	f023 0304 	bic.w	r3, r3, #4
 8009128:	b2da      	uxtb	r2, r3
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d13b      	bne.n	80091ac <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	6a1b      	ldr	r3, [r3, #32]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d106      	bne.n	800914a <err_tcp+0x126>
 800913c:	4b1e      	ldr	r3, [pc, #120]	; (80091b8 <err_tcp+0x194>)
 800913e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009142:	4920      	ldr	r1, [pc, #128]	; (80091c4 <err_tcp+0x1a0>)
 8009144:	481e      	ldr	r0, [pc, #120]	; (80091c0 <err_tcp+0x19c>)
 8009146:	f00f fe37 	bl	8018db8 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800914a:	7dfb      	ldrb	r3, [r7, #23]
 800914c:	2b04      	cmp	r3, #4
 800914e:	d104      	bne.n	800915a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	6a1b      	ldr	r3, [r3, #32]
 8009154:	2200      	movs	r2, #0
 8009156:	711a      	strb	r2, [r3, #4]
 8009158:	e003      	b.n	8009162 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	6a1b      	ldr	r3, [r3, #32]
 800915e:	78fa      	ldrb	r2, [r7, #3]
 8009160:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	6a1b      	ldr	r3, [r3, #32]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	330c      	adds	r3, #12
 800916a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800916c:	68b8      	ldr	r0, [r7, #8]
 800916e:	f00f fc5f 	bl	8018a30 <sys_sem_valid>
 8009172:	4603      	mov	r3, r0
 8009174:	2b00      	cmp	r3, #0
 8009176:	d106      	bne.n	8009186 <err_tcp+0x162>
 8009178:	4b0f      	ldr	r3, [pc, #60]	; (80091b8 <err_tcp+0x194>)
 800917a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800917e:	4912      	ldr	r1, [pc, #72]	; (80091c8 <err_tcp+0x1a4>)
 8009180:	480f      	ldr	r0, [pc, #60]	; (80091c0 <err_tcp+0x19c>)
 8009182:	f00f fe19 	bl	8018db8 <iprintf>
      conn->current_msg = NULL;
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	2200      	movs	r2, #0
 800918a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800918c:	68b8      	ldr	r0, [r7, #8]
 800918e:	f00f fc35 	bl	80189fc <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8009192:	e00b      	b.n	80091ac <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	6a1b      	ldr	r3, [r3, #32]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d008      	beq.n	80091ae <err_tcp+0x18a>
 800919c:	4b06      	ldr	r3, [pc, #24]	; (80091b8 <err_tcp+0x194>)
 800919e:	f240 12f7 	movw	r2, #503	; 0x1f7
 80091a2:	490a      	ldr	r1, [pc, #40]	; (80091cc <err_tcp+0x1a8>)
 80091a4:	4806      	ldr	r0, [pc, #24]	; (80091c0 <err_tcp+0x19c>)
 80091a6:	f00f fe07 	bl	8018db8 <iprintf>
  }
}
 80091aa:	e000      	b.n	80091ae <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 80091ac:	bf00      	nop
}
 80091ae:	bf00      	nop
 80091b0:	3720      	adds	r7, #32
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	0801a688 	.word	0x0801a688
 80091bc:	0801a7e0 	.word	0x0801a7e0
 80091c0:	0801a6cc 	.word	0x0801a6cc
 80091c4:	0801a7f0 	.word	0x0801a7f0
 80091c8:	0801a80c 	.word	0x0801a80c
 80091cc:	0801a828 	.word	0x0801a828

080091d0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80091de:	6879      	ldr	r1, [r7, #4]
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	f005 fe8d 	bl	800ef00 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80091e6:	490a      	ldr	r1, [pc, #40]	; (8009210 <setup_tcp+0x40>)
 80091e8:	68f8      	ldr	r0, [r7, #12]
 80091ea:	f005 fe9b 	bl	800ef24 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80091ee:	4909      	ldr	r1, [pc, #36]	; (8009214 <setup_tcp+0x44>)
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	f005 feb9 	bl	800ef68 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80091f6:	2202      	movs	r2, #2
 80091f8:	4907      	ldr	r1, [pc, #28]	; (8009218 <setup_tcp+0x48>)
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	f005 ff10 	bl	800f020 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009200:	4906      	ldr	r1, [pc, #24]	; (800921c <setup_tcp+0x4c>)
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f005 fed2 	bl	800efac <tcp_err>
}
 8009208:	bf00      	nop
 800920a:	3710      	adds	r7, #16
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	08008da9 	.word	0x08008da9
 8009214:	08008f7d 	.word	0x08008f7d
 8009218:	08008eb5 	.word	0x08008eb5
 800921c:	08009025 	.word	0x08009025

08009220 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8009220:	b590      	push	{r4, r7, lr}
 8009222:	b089      	sub	sp, #36	; 0x24
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	4613      	mov	r3, r2
 800922c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d102      	bne.n	800923e <accept_function+0x1e>
    return ERR_VAL;
 8009238:	f06f 0305 	mvn.w	r3, #5
 800923c:	e0a1      	b.n	8009382 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	3314      	adds	r3, #20
 8009242:	4618      	mov	r0, r3
 8009244:	f00f fb63 	bl	801890e <sys_mbox_valid>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d102      	bne.n	8009254 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800924e:	f06f 0305 	mvn.w	r3, #5
 8009252:	e096      	b.n	8009382 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d11b      	bne.n	8009292 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	f103 0414 	add.w	r4, r3, #20
 8009260:	f06f 000c 	mvn.w	r0, #12
 8009264:	f7ff fcb2 	bl	8008bcc <lwip_netconn_err_to_msg>
 8009268:	4603      	mov	r3, r0
 800926a:	4619      	mov	r1, r3
 800926c:	4620      	mov	r0, r4
 800926e:	f00f fad9 	bl	8018824 <sys_mbox_trypost>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d109      	bne.n	800928c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927c:	2b00      	cmp	r3, #0
 800927e:	d005      	beq.n	800928c <accept_function+0x6c>
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009284:	2200      	movs	r2, #0
 8009286:	2100      	movs	r1, #0
 8009288:	69f8      	ldr	r0, [r7, #28]
 800928a:	4798      	blx	r3
    }
    return ERR_VAL;
 800928c:	f06f 0305 	mvn.w	r3, #5
 8009290:	e077      	b.n	8009382 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8009292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d006      	beq.n	80092a8 <accept_function+0x88>
 800929a:	4b3c      	ldr	r3, [pc, #240]	; (800938c <accept_function+0x16c>)
 800929c:	f240 222a 	movw	r2, #554	; 0x22a
 80092a0:	493b      	ldr	r1, [pc, #236]	; (8009390 <accept_function+0x170>)
 80092a2:	483c      	ldr	r0, [pc, #240]	; (8009394 <accept_function+0x174>)
 80092a4:	f00f fd88 	bl	8018db8 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	781a      	ldrb	r2, [r3, #0]
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b0:	4619      	mov	r1, r3
 80092b2:	4610      	mov	r0, r2
 80092b4:	f000 f8f0 	bl	8009498 <netconn_alloc>
 80092b8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d11b      	bne.n	80092f8 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80092c0:	69fb      	ldr	r3, [r7, #28]
 80092c2:	f103 0414 	add.w	r4, r3, #20
 80092c6:	f06f 000c 	mvn.w	r0, #12
 80092ca:	f7ff fc7f 	bl	8008bcc <lwip_netconn_err_to_msg>
 80092ce:	4603      	mov	r3, r0
 80092d0:	4619      	mov	r1, r3
 80092d2:	4620      	mov	r0, r4
 80092d4:	f00f faa6 	bl	8018824 <sys_mbox_trypost>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d109      	bne.n	80092f2 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d005      	beq.n	80092f2 <accept_function+0xd2>
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ea:	2200      	movs	r2, #0
 80092ec:	2100      	movs	r1, #0
 80092ee:	69f8      	ldr	r0, [r7, #28]
 80092f0:	4798      	blx	r3
    }
    return ERR_MEM;
 80092f2:	f04f 33ff 	mov.w	r3, #4294967295
 80092f6:	e044      	b.n	8009382 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 80092f8:	69bb      	ldr	r3, [r7, #24]
 80092fa:	68ba      	ldr	r2, [r7, #8]
 80092fc:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 80092fe:	69b8      	ldr	r0, [r7, #24]
 8009300:	f7ff ff66 	bl	80091d0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	3314      	adds	r3, #20
 8009308:	69b9      	ldr	r1, [r7, #24]
 800930a:	4618      	mov	r0, r3
 800930c:	f00f fa8a 	bl	8018824 <sys_mbox_trypost>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d02a      	beq.n	800936c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800931c:	2100      	movs	r1, #0
 800931e:	6978      	ldr	r0, [r7, #20]
 8009320:	f005 fdee 	bl	800ef00 <tcp_arg>
    tcp_recv(pcb, NULL);
 8009324:	2100      	movs	r1, #0
 8009326:	6978      	ldr	r0, [r7, #20]
 8009328:	f005 fdfc 	bl	800ef24 <tcp_recv>
    tcp_sent(pcb, NULL);
 800932c:	2100      	movs	r1, #0
 800932e:	6978      	ldr	r0, [r7, #20]
 8009330:	f005 fe1a 	bl	800ef68 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8009334:	2200      	movs	r2, #0
 8009336:	2100      	movs	r1, #0
 8009338:	6978      	ldr	r0, [r7, #20]
 800933a:	f005 fe71 	bl	800f020 <tcp_poll>
    tcp_err(pcb, NULL);
 800933e:	2100      	movs	r1, #0
 8009340:	6978      	ldr	r0, [r7, #20]
 8009342:	f005 fe33 	bl	800efac <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	2200      	movs	r2, #0
 800934a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	3310      	adds	r3, #16
 8009350:	4618      	mov	r0, r3
 8009352:	f00f fa55 	bl	8018800 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	3310      	adds	r3, #16
 800935a:	4618      	mov	r0, r3
 800935c:	f00f fae8 	bl	8018930 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8009360:	69b8      	ldr	r0, [r7, #24]
 8009362:	f000 f907 	bl	8009574 <netconn_free>
    return ERR_MEM;
 8009366:	f04f 33ff 	mov.w	r3, #4294967295
 800936a:	e00a      	b.n	8009382 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009370:	2b00      	cmp	r3, #0
 8009372:	d005      	beq.n	8009380 <accept_function+0x160>
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009378:	2200      	movs	r2, #0
 800937a:	2100      	movs	r1, #0
 800937c:	69f8      	ldr	r0, [r7, #28]
 800937e:	4798      	blx	r3
  }

  return ERR_OK;
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3724      	adds	r7, #36	; 0x24
 8009386:	46bd      	mov	sp, r7
 8009388:	bd90      	pop	{r4, r7, pc}
 800938a:	bf00      	nop
 800938c:	0801a688 	.word	0x0801a688
 8009390:	0801a844 	.word	0x0801a844
 8009394:	0801a6cc 	.word	0x0801a6cc

08009398 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009398:	b590      	push	{r4, r7, lr}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 80093a0:	2300      	movs	r3, #0
 80093a2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d006      	beq.n	80093bc <pcb_new+0x24>
 80093ae:	4b2b      	ldr	r3, [pc, #172]	; (800945c <pcb_new+0xc4>)
 80093b0:	f240 2265 	movw	r2, #613	; 0x265
 80093b4:	492a      	ldr	r1, [pc, #168]	; (8009460 <pcb_new+0xc8>)
 80093b6:	482b      	ldr	r0, [pc, #172]	; (8009464 <pcb_new+0xcc>)
 80093b8:	f00f fcfe 	bl	8018db8 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093c6:	2b10      	cmp	r3, #16
 80093c8:	d022      	beq.n	8009410 <pcb_new+0x78>
 80093ca:	2b20      	cmp	r3, #32
 80093cc:	d133      	bne.n	8009436 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681c      	ldr	r4, [r3, #0]
 80093d2:	7bfb      	ldrb	r3, [r7, #15]
 80093d4:	4618      	mov	r0, r3
 80093d6:	f00b f83a 	bl	801444e <udp_new_ip_type>
 80093da:	4603      	mov	r3, r0
 80093dc:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d02a      	beq.n	800943e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	2b22      	cmp	r3, #34	; 0x22
 80093f0:	d104      	bne.n	80093fc <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	2201      	movs	r2, #1
 80093fa:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	6858      	ldr	r0, [r3, #4]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	461a      	mov	r2, r3
 8009408:	4917      	ldr	r1, [pc, #92]	; (8009468 <pcb_new+0xd0>)
 800940a:	f00a ffa7 	bl	801435c <udp_recv>
      }
      break;
 800940e:	e016      	b.n	800943e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681c      	ldr	r4, [r3, #0]
 8009414:	7bfb      	ldrb	r3, [r7, #15]
 8009416:	4618      	mov	r0, r3
 8009418:	f005 fd64 	bl	800eee4 <tcp_new_ip_type>
 800941c:	4603      	mov	r3, r0
 800941e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00b      	beq.n	8009442 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4618      	mov	r0, r3
 8009430:	f7ff fece 	bl	80091d0 <setup_tcp>
      }
      break;
 8009434:	e005      	b.n	8009442 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	22fa      	movs	r2, #250	; 0xfa
 800943a:	711a      	strb	r2, [r3, #4]
      return;
 800943c:	e00a      	b.n	8009454 <pcb_new+0xbc>
      break;
 800943e:	bf00      	nop
 8009440:	e000      	b.n	8009444 <pcb_new+0xac>
      break;
 8009442:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d102      	bne.n	8009454 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	22ff      	movs	r2, #255	; 0xff
 8009452:	711a      	strb	r2, [r3, #4]
  }
}
 8009454:	3714      	adds	r7, #20
 8009456:	46bd      	mov	sp, r7
 8009458:	bd90      	pop	{r4, r7, pc}
 800945a:	bf00      	nop
 800945c:	0801a688 	.word	0x0801a688
 8009460:	0801a86c 	.word	0x0801a86c
 8009464:	0801a6cc 	.word	0x0801a6cc
 8009468:	08008cad 	.word	0x08008cad

0800946c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2200      	movs	r2, #0
 800947c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d102      	bne.n	800948e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009488:	68f8      	ldr	r0, [r7, #12]
 800948a:	f7ff ff85 	bl	8009398 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800948e:	bf00      	nop
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
	...

08009498 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b086      	sub	sp, #24
 800949c:	af00      	add	r7, sp, #0
 800949e:	4603      	mov	r3, r0
 80094a0:	6039      	str	r1, [r7, #0]
 80094a2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 80094a4:	2300      	movs	r3, #0
 80094a6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80094a8:	2007      	movs	r0, #7
 80094aa:	f002 fe2d 	bl	800c108 <memp_malloc>
 80094ae:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d101      	bne.n	80094ba <netconn_alloc+0x22>
    return NULL;
 80094b6:	2300      	movs	r3, #0
 80094b8:	e052      	b.n	8009560 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2200      	movs	r2, #0
 80094be:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	79fa      	ldrb	r2, [r7, #7]
 80094c4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2200      	movs	r2, #0
 80094ca:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80094cc:	79fb      	ldrb	r3, [r7, #7]
 80094ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094d2:	2b10      	cmp	r3, #16
 80094d4:	d004      	beq.n	80094e0 <netconn_alloc+0x48>
 80094d6:	2b20      	cmp	r3, #32
 80094d8:	d105      	bne.n	80094e6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80094da:	2306      	movs	r3, #6
 80094dc:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80094de:	e00a      	b.n	80094f6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80094e0:	2306      	movs	r3, #6
 80094e2:	617b      	str	r3, [r7, #20]
      break;
 80094e4:	e007      	b.n	80094f6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80094e6:	4b20      	ldr	r3, [pc, #128]	; (8009568 <netconn_alloc+0xd0>)
 80094e8:	f240 22e5 	movw	r2, #741	; 0x2e5
 80094ec:	491f      	ldr	r1, [pc, #124]	; (800956c <netconn_alloc+0xd4>)
 80094ee:	4820      	ldr	r0, [pc, #128]	; (8009570 <netconn_alloc+0xd8>)
 80094f0:	f00f fc62 	bl	8018db8 <iprintf>
      goto free_and_return;
 80094f4:	e02f      	b.n	8009556 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	3310      	adds	r3, #16
 80094fa:	6979      	ldr	r1, [r7, #20]
 80094fc:	4618      	mov	r0, r3
 80094fe:	f00f f95d 	bl	80187bc <sys_mbox_new>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d125      	bne.n	8009554 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	330c      	adds	r3, #12
 800950c:	2100      	movs	r1, #0
 800950e:	4618      	mov	r0, r3
 8009510:	f00f fa1b 	bl	801894a <sys_sem_new>
 8009514:	4603      	mov	r3, r0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d005      	beq.n	8009526 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	3310      	adds	r3, #16
 800951e:	4618      	mov	r0, r3
 8009520:	f00f f96e 	bl	8018800 <sys_mbox_free>
    goto free_and_return;
 8009524:	e017      	b.n	8009556 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	3314      	adds	r3, #20
 800952a:	4618      	mov	r0, r3
 800952c:	f00f fa00 	bl	8018930 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2200      	movs	r2, #0
 8009534:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f04f 32ff 	mov.w	r2, #4294967295
 800953c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	683a      	ldr	r2, [r7, #0]
 8009542:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2200      	movs	r2, #0
 8009548:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	7cfa      	ldrb	r2, [r7, #19]
 800954e:	771a      	strb	r2, [r3, #28]
  return conn;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	e005      	b.n	8009560 <netconn_alloc+0xc8>
    goto free_and_return;
 8009554:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009556:	68f9      	ldr	r1, [r7, #12]
 8009558:	2007      	movs	r0, #7
 800955a:	f002 fe4b 	bl	800c1f4 <memp_free>
  return NULL;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3718      	adds	r7, #24
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	0801a688 	.word	0x0801a688
 800956c:	0801a88c 	.word	0x0801a88c
 8009570:	0801a6cc 	.word	0x0801a6cc

08009574 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d006      	beq.n	8009592 <netconn_free+0x1e>
 8009584:	4b1b      	ldr	r3, [pc, #108]	; (80095f4 <netconn_free+0x80>)
 8009586:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800958a:	491b      	ldr	r1, [pc, #108]	; (80095f8 <netconn_free+0x84>)
 800958c:	481b      	ldr	r0, [pc, #108]	; (80095fc <netconn_free+0x88>)
 800958e:	f00f fc13 	bl	8018db8 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	3310      	adds	r3, #16
 8009596:	4618      	mov	r0, r3
 8009598:	f00f f9b9 	bl	801890e <sys_mbox_valid>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d006      	beq.n	80095b0 <netconn_free+0x3c>
 80095a2:	4b14      	ldr	r3, [pc, #80]	; (80095f4 <netconn_free+0x80>)
 80095a4:	f240 3223 	movw	r2, #803	; 0x323
 80095a8:	4915      	ldr	r1, [pc, #84]	; (8009600 <netconn_free+0x8c>)
 80095aa:	4814      	ldr	r0, [pc, #80]	; (80095fc <netconn_free+0x88>)
 80095ac:	f00f fc04 	bl	8018db8 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	3314      	adds	r3, #20
 80095b4:	4618      	mov	r0, r3
 80095b6:	f00f f9aa 	bl	801890e <sys_mbox_valid>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d006      	beq.n	80095ce <netconn_free+0x5a>
 80095c0:	4b0c      	ldr	r3, [pc, #48]	; (80095f4 <netconn_free+0x80>)
 80095c2:	f240 3226 	movw	r2, #806	; 0x326
 80095c6:	490f      	ldr	r1, [pc, #60]	; (8009604 <netconn_free+0x90>)
 80095c8:	480c      	ldr	r0, [pc, #48]	; (80095fc <netconn_free+0x88>)
 80095ca:	f00f fbf5 	bl	8018db8 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	330c      	adds	r3, #12
 80095d2:	4618      	mov	r0, r3
 80095d4:	f00f fa1f 	bl	8018a16 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	330c      	adds	r3, #12
 80095dc:	4618      	mov	r0, r3
 80095de:	f00f fa38 	bl	8018a52 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80095e2:	6879      	ldr	r1, [r7, #4]
 80095e4:	2007      	movs	r0, #7
 80095e6:	f002 fe05 	bl	800c1f4 <memp_free>
}
 80095ea:	bf00      	nop
 80095ec:	3708      	adds	r7, #8
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	0801a688 	.word	0x0801a688
 80095f8:	0801a8b4 	.word	0x0801a8b4
 80095fc:	0801a6cc 	.word	0x0801a6cc
 8009600:	0801a8e4 	.word	0x0801a8e4
 8009604:	0801a920 	.word	0x0801a920

08009608 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	3310      	adds	r3, #16
 8009614:	4618      	mov	r0, r3
 8009616:	f00f f97a 	bl	801890e <sys_mbox_valid>
 800961a:	4603      	mov	r3, r0
 800961c:	2b00      	cmp	r3, #0
 800961e:	d02f      	beq.n	8009680 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009620:	e018      	b.n	8009654 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800962a:	2b10      	cmp	r3, #16
 800962c:	d10e      	bne.n	800964c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	f107 020f 	add.w	r2, r7, #15
 8009634:	4611      	mov	r1, r2
 8009636:	4618      	mov	r0, r3
 8009638:	f7ff fafe 	bl	8008c38 <lwip_netconn_is_err_msg>
 800963c:	4603      	mov	r3, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d108      	bne.n	8009654 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	4618      	mov	r0, r3
 8009646:	f003 fc85 	bl	800cf54 <pbuf_free>
 800964a:	e003      	b.n	8009654 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	4618      	mov	r0, r3
 8009650:	f000 ffe0 	bl	800a614 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	3310      	adds	r3, #16
 8009658:	f107 0210 	add.w	r2, r7, #16
 800965c:	4611      	mov	r1, r2
 800965e:	4618      	mov	r0, r3
 8009660:	f00f f939 	bl	80188d6 <sys_arch_mbox_tryfetch>
 8009664:	4603      	mov	r3, r0
 8009666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800966a:	d1da      	bne.n	8009622 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	3310      	adds	r3, #16
 8009670:	4618      	mov	r0, r3
 8009672:	f00f f8c5 	bl	8018800 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	3310      	adds	r3, #16
 800967a:	4618      	mov	r0, r3
 800967c:	f00f f958 	bl	8018930 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	3314      	adds	r3, #20
 8009684:	4618      	mov	r0, r3
 8009686:	f00f f942 	bl	801890e <sys_mbox_valid>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d034      	beq.n	80096fa <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009690:	e01d      	b.n	80096ce <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	f107 020e 	add.w	r2, r7, #14
 8009698:	4611      	mov	r1, r2
 800969a:	4618      	mov	r0, r3
 800969c:	f7ff facc 	bl	8008c38 <lwip_netconn_is_err_msg>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d113      	bne.n	80096ce <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80096aa:	6978      	ldr	r0, [r7, #20]
 80096ac:	f7ff ffac 	bl	8009608 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d007      	beq.n	80096c8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	4618      	mov	r0, r3
 80096be:	f004 fa49 	bl	800db54 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	2200      	movs	r2, #0
 80096c6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80096c8:	6978      	ldr	r0, [r7, #20]
 80096ca:	f7ff ff53 	bl	8009574 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	3314      	adds	r3, #20
 80096d2:	f107 0210 	add.w	r2, r7, #16
 80096d6:	4611      	mov	r1, r2
 80096d8:	4618      	mov	r0, r3
 80096da:	f00f f8fc 	bl	80188d6 <sys_arch_mbox_tryfetch>
 80096de:	4603      	mov	r3, r0
 80096e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e4:	d1d5      	bne.n	8009692 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	3314      	adds	r3, #20
 80096ea:	4618      	mov	r0, r3
 80096ec:	f00f f888 	bl	8018800 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	3314      	adds	r3, #20
 80096f4:	4618      	mov	r0, r3
 80096f6:	f00f f91b 	bl	8018930 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80096fa:	bf00      	nop
 80096fc:	3718      	adds	r7, #24
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
	...

08009704 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b086      	sub	sp, #24
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	460b      	mov	r3, r1
 800970e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8009710:	2300      	movs	r3, #0
 8009712:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d106      	bne.n	8009728 <lwip_netconn_do_close_internal+0x24>
 800971a:	4b87      	ldr	r3, [pc, #540]	; (8009938 <lwip_netconn_do_close_internal+0x234>)
 800971c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8009720:	4986      	ldr	r1, [pc, #536]	; (800993c <lwip_netconn_do_close_internal+0x238>)
 8009722:	4887      	ldr	r0, [pc, #540]	; (8009940 <lwip_netconn_do_close_internal+0x23c>)
 8009724:	f00f fb48 	bl	8018db8 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009730:	2b10      	cmp	r3, #16
 8009732:	d006      	beq.n	8009742 <lwip_netconn_do_close_internal+0x3e>
 8009734:	4b80      	ldr	r3, [pc, #512]	; (8009938 <lwip_netconn_do_close_internal+0x234>)
 8009736:	f240 32a3 	movw	r2, #931	; 0x3a3
 800973a:	4982      	ldr	r1, [pc, #520]	; (8009944 <lwip_netconn_do_close_internal+0x240>)
 800973c:	4880      	ldr	r0, [pc, #512]	; (8009940 <lwip_netconn_do_close_internal+0x23c>)
 800973e:	f00f fb3b 	bl	8018db8 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	785b      	ldrb	r3, [r3, #1]
 8009746:	2b04      	cmp	r3, #4
 8009748:	d006      	beq.n	8009758 <lwip_netconn_do_close_internal+0x54>
 800974a:	4b7b      	ldr	r3, [pc, #492]	; (8009938 <lwip_netconn_do_close_internal+0x234>)
 800974c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8009750:	497d      	ldr	r1, [pc, #500]	; (8009948 <lwip_netconn_do_close_internal+0x244>)
 8009752:	487b      	ldr	r0, [pc, #492]	; (8009940 <lwip_netconn_do_close_internal+0x23c>)
 8009754:	f00f fb30 	bl	8018db8 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d106      	bne.n	800976e <lwip_netconn_do_close_internal+0x6a>
 8009760:	4b75      	ldr	r3, [pc, #468]	; (8009938 <lwip_netconn_do_close_internal+0x234>)
 8009762:	f240 32a5 	movw	r2, #933	; 0x3a5
 8009766:	4979      	ldr	r1, [pc, #484]	; (800994c <lwip_netconn_do_close_internal+0x248>)
 8009768:	4875      	ldr	r0, [pc, #468]	; (8009940 <lwip_netconn_do_close_internal+0x23c>)
 800976a:	f00f fb25 	bl	8018db8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a1b      	ldr	r3, [r3, #32]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d106      	bne.n	8009784 <lwip_netconn_do_close_internal+0x80>
 8009776:	4b70      	ldr	r3, [pc, #448]	; (8009938 <lwip_netconn_do_close_internal+0x234>)
 8009778:	f240 32a6 	movw	r2, #934	; 0x3a6
 800977c:	4974      	ldr	r1, [pc, #464]	; (8009950 <lwip_netconn_do_close_internal+0x24c>)
 800977e:	4870      	ldr	r0, [pc, #448]	; (8009940 <lwip_netconn_do_close_internal+0x23c>)
 8009780:	f00f fb1a 	bl	8018db8 <iprintf>

  tpcb = conn->pcb.tcp;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a1b      	ldr	r3, [r3, #32]
 800978e:	7a1b      	ldrb	r3, [r3, #8]
 8009790:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8009792:	7bfb      	ldrb	r3, [r7, #15]
 8009794:	f003 0301 	and.w	r3, r3, #1
 8009798:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800979a:	7bfb      	ldrb	r3, [r7, #15]
 800979c:	f003 0302 	and.w	r3, r3, #2
 80097a0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80097a2:	7bfb      	ldrb	r3, [r7, #15]
 80097a4:	2b03      	cmp	r3, #3
 80097a6:	d102      	bne.n	80097ae <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80097a8:	2301      	movs	r3, #1
 80097aa:	75bb      	strb	r3, [r7, #22]
 80097ac:	e01f      	b.n	80097ee <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80097ae:	7bbb      	ldrb	r3, [r7, #14]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00e      	beq.n	80097d2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80097b8:	2b05      	cmp	r3, #5
 80097ba:	d007      	beq.n	80097cc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80097c0:	2b06      	cmp	r3, #6
 80097c2:	d003      	beq.n	80097cc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80097c8:	2b08      	cmp	r3, #8
 80097ca:	d102      	bne.n	80097d2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80097cc:	2301      	movs	r3, #1
 80097ce:	75bb      	strb	r3, [r7, #22]
 80097d0:	e00d      	b.n	80097ee <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80097d2:	7b7b      	ldrb	r3, [r7, #13]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d008      	beq.n	80097ea <lwip_netconn_do_close_internal+0xe6>
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	8b5b      	ldrh	r3, [r3, #26]
 80097dc:	f003 0310 	and.w	r3, r3, #16
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d002      	beq.n	80097ea <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80097e4:	2301      	movs	r3, #1
 80097e6:	75bb      	strb	r3, [r7, #22]
 80097e8:	e001      	b.n	80097ee <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80097ea:	2300      	movs	r3, #0
 80097ec:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 80097ee:	7dbb      	ldrb	r3, [r7, #22]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d003      	beq.n	80097fc <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80097f4:	2100      	movs	r1, #0
 80097f6:	6938      	ldr	r0, [r7, #16]
 80097f8:	f005 fb82 	bl	800ef00 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	7d1b      	ldrb	r3, [r3, #20]
 8009800:	2b01      	cmp	r3, #1
 8009802:	d104      	bne.n	800980e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009804:	2100      	movs	r1, #0
 8009806:	6938      	ldr	r0, [r7, #16]
 8009808:	f005 fbf2 	bl	800eff0 <tcp_accept>
 800980c:	e01d      	b.n	800984a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800980e:	7bbb      	ldrb	r3, [r7, #14]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d007      	beq.n	8009824 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8009814:	2100      	movs	r1, #0
 8009816:	6938      	ldr	r0, [r7, #16]
 8009818:	f005 fb84 	bl	800ef24 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800981c:	2100      	movs	r1, #0
 800981e:	6938      	ldr	r0, [r7, #16]
 8009820:	f005 fbe6 	bl	800eff0 <tcp_accept>
    }
    if (shut_tx) {
 8009824:	7b7b      	ldrb	r3, [r7, #13]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d003      	beq.n	8009832 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800982a:	2100      	movs	r1, #0
 800982c:	6938      	ldr	r0, [r7, #16]
 800982e:	f005 fb9b 	bl	800ef68 <tcp_sent>
    }
    if (shut_close) {
 8009832:	7dbb      	ldrb	r3, [r7, #22]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d008      	beq.n	800984a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009838:	2200      	movs	r2, #0
 800983a:	2100      	movs	r1, #0
 800983c:	6938      	ldr	r0, [r7, #16]
 800983e:	f005 fbef 	bl	800f020 <tcp_poll>
      tcp_err(tpcb, NULL);
 8009842:	2100      	movs	r1, #0
 8009844:	6938      	ldr	r0, [r7, #16]
 8009846:	f005 fbb1 	bl	800efac <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800984a:	7dbb      	ldrb	r3, [r7, #22]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d005      	beq.n	800985c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009850:	6938      	ldr	r0, [r7, #16]
 8009852:	f004 f839 	bl	800d8c8 <tcp_close>
 8009856:	4603      	mov	r3, r0
 8009858:	75fb      	strb	r3, [r7, #23]
 800985a:	e007      	b.n	800986c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800985c:	7bbb      	ldrb	r3, [r7, #14]
 800985e:	7b7a      	ldrb	r2, [r7, #13]
 8009860:	4619      	mov	r1, r3
 8009862:	6938      	ldr	r0, [r7, #16]
 8009864:	f004 f85c 	bl	800d920 <tcp_shutdown>
 8009868:	4603      	mov	r3, r0
 800986a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800986c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d102      	bne.n	800987a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009874:	2301      	movs	r3, #1
 8009876:	757b      	strb	r3, [r7, #21]
 8009878:	e016      	b.n	80098a8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800987a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800987e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009882:	d10f      	bne.n	80098a4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6a1b      	ldr	r3, [r3, #32]
 8009888:	7a5b      	ldrb	r3, [r3, #9]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d10c      	bne.n	80098a8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800988e:	2301      	movs	r3, #1
 8009890:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8009892:	7dbb      	ldrb	r3, [r7, #22]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d007      	beq.n	80098a8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009898:	6938      	ldr	r0, [r7, #16]
 800989a:	f004 f95b 	bl	800db54 <tcp_abort>
          err = ERR_OK;
 800989e:	2300      	movs	r3, #0
 80098a0:	75fb      	strb	r3, [r7, #23]
 80098a2:	e001      	b.n	80098a8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80098a4:	2301      	movs	r3, #1
 80098a6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80098a8:	7d7b      	ldrb	r3, [r7, #21]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d052      	beq.n	8009954 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6a1b      	ldr	r3, [r3, #32]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	330c      	adds	r3, #12
 80098b6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6a1b      	ldr	r3, [r3, #32]
 80098bc:	7dfa      	ldrb	r2, [r7, #23]
 80098be:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80098cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d129      	bne.n	8009928 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80098d4:	7dbb      	ldrb	r3, [r7, #22]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00c      	beq.n	80098f4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d005      	beq.n	80098f4 <lwip_netconn_do_close_internal+0x1f0>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ec:	2200      	movs	r2, #0
 80098ee:	2104      	movs	r1, #4
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	4798      	blx	r3
      }
      if (shut_rx) {
 80098f4:	7bbb      	ldrb	r3, [r7, #14]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d009      	beq.n	800990e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d005      	beq.n	800990e <lwip_netconn_do_close_internal+0x20a>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009906:	2200      	movs	r2, #0
 8009908:	2100      	movs	r1, #0
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	4798      	blx	r3
      }
      if (shut_tx) {
 800990e:	7b7b      	ldrb	r3, [r7, #13]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d009      	beq.n	8009928 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009918:	2b00      	cmp	r3, #0
 800991a:	d005      	beq.n	8009928 <lwip_netconn_do_close_internal+0x224>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009920:	2200      	movs	r2, #0
 8009922:	2102      	movs	r1, #2
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009928:	78fb      	ldrb	r3, [r7, #3]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d002      	beq.n	8009934 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800992e:	68b8      	ldr	r0, [r7, #8]
 8009930:	f00f f864 	bl	80189fc <sys_sem_signal>
    }
    return ERR_OK;
 8009934:	2300      	movs	r3, #0
 8009936:	e03c      	b.n	80099b2 <lwip_netconn_do_close_internal+0x2ae>
 8009938:	0801a688 	.word	0x0801a688
 800993c:	0801a95c 	.word	0x0801a95c
 8009940:	0801a6cc 	.word	0x0801a6cc
 8009944:	0801a96c 	.word	0x0801a96c
 8009948:	0801a98c 	.word	0x0801a98c
 800994c:	0801a9b0 	.word	0x0801a9b0
 8009950:	0801a7f0 	.word	0x0801a7f0
  }
  if (!close_finished) {
 8009954:	7d7b      	ldrb	r3, [r7, #21]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d11e      	bne.n	8009998 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	7d1b      	ldrb	r3, [r3, #20]
 800995e:	2b01      	cmp	r3, #1
 8009960:	d106      	bne.n	8009970 <lwip_netconn_do_close_internal+0x26c>
 8009962:	4b16      	ldr	r3, [pc, #88]	; (80099bc <lwip_netconn_do_close_internal+0x2b8>)
 8009964:	f240 4241 	movw	r2, #1089	; 0x441
 8009968:	4915      	ldr	r1, [pc, #84]	; (80099c0 <lwip_netconn_do_close_internal+0x2bc>)
 800996a:	4816      	ldr	r0, [pc, #88]	; (80099c4 <lwip_netconn_do_close_internal+0x2c0>)
 800996c:	f00f fa24 	bl	8018db8 <iprintf>
    if (shut_tx) {
 8009970:	7b7b      	ldrb	r3, [r7, #13]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d003      	beq.n	800997e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8009976:	4914      	ldr	r1, [pc, #80]	; (80099c8 <lwip_netconn_do_close_internal+0x2c4>)
 8009978:	6938      	ldr	r0, [r7, #16]
 800997a:	f005 faf5 	bl	800ef68 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800997e:	2201      	movs	r2, #1
 8009980:	4912      	ldr	r1, [pc, #72]	; (80099cc <lwip_netconn_do_close_internal+0x2c8>)
 8009982:	6938      	ldr	r0, [r7, #16]
 8009984:	f005 fb4c 	bl	800f020 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009988:	4911      	ldr	r1, [pc, #68]	; (80099d0 <lwip_netconn_do_close_internal+0x2cc>)
 800998a:	6938      	ldr	r0, [r7, #16]
 800998c:	f005 fb0e 	bl	800efac <tcp_err>
    tcp_arg(tpcb, conn);
 8009990:	6879      	ldr	r1, [r7, #4]
 8009992:	6938      	ldr	r0, [r7, #16]
 8009994:	f005 fab4 	bl	800ef00 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009998:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d106      	bne.n	80099ae <lwip_netconn_do_close_internal+0x2aa>
 80099a0:	4b06      	ldr	r3, [pc, #24]	; (80099bc <lwip_netconn_do_close_internal+0x2b8>)
 80099a2:	f240 424d 	movw	r2, #1101	; 0x44d
 80099a6:	490b      	ldr	r1, [pc, #44]	; (80099d4 <lwip_netconn_do_close_internal+0x2d0>)
 80099a8:	4806      	ldr	r0, [pc, #24]	; (80099c4 <lwip_netconn_do_close_internal+0x2c0>)
 80099aa:	f00f fa05 	bl	8018db8 <iprintf>
  return err;
 80099ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3718      	adds	r7, #24
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	0801a688 	.word	0x0801a688
 80099c0:	0801a9c4 	.word	0x0801a9c4
 80099c4:	0801a6cc 	.word	0x0801a6cc
 80099c8:	08008f7d 	.word	0x08008f7d
 80099cc:	08008eb5 	.word	0x08008eb5
 80099d0:	08009025 	.word	0x08009025
 80099d4:	0801a9e8 	.word	0x0801a9e8

080099d8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	785b      	ldrb	r3, [r3, #1]
 80099ea:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80099ec:	7afb      	ldrb	r3, [r7, #11]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00d      	beq.n	8009a0e <lwip_netconn_do_delconn+0x36>
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099fc:	2b10      	cmp	r3, #16
 80099fe:	d006      	beq.n	8009a0e <lwip_netconn_do_delconn+0x36>
 8009a00:	4b60      	ldr	r3, [pc, #384]	; (8009b84 <lwip_netconn_do_delconn+0x1ac>)
 8009a02:	f240 425e 	movw	r2, #1118	; 0x45e
 8009a06:	4960      	ldr	r1, [pc, #384]	; (8009b88 <lwip_netconn_do_delconn+0x1b0>)
 8009a08:	4860      	ldr	r0, [pc, #384]	; (8009b8c <lwip_netconn_do_delconn+0x1b4>)
 8009a0a:	f00f f9d5 	bl	8018db8 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8009a0e:	7afb      	ldrb	r3, [r7, #11]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d005      	beq.n	8009a20 <lwip_netconn_do_delconn+0x48>
 8009a14:	7afb      	ldrb	r3, [r7, #11]
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d002      	beq.n	8009a20 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8009a1a:	7afb      	ldrb	r3, [r7, #11]
 8009a1c:	2b03      	cmp	r3, #3
 8009a1e:	d109      	bne.n	8009a34 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009a20:	7afb      	ldrb	r3, [r7, #11]
 8009a22:	2b03      	cmp	r3, #3
 8009a24:	d10a      	bne.n	8009a3c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	7f1b      	ldrb	r3, [r3, #28]
 8009a2c:	f003 0304 	and.w	r3, r3, #4
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d103      	bne.n	8009a3c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	22fb      	movs	r2, #251	; 0xfb
 8009a38:	711a      	strb	r2, [r3, #4]
 8009a3a:	e097      	b.n	8009b6c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009a3c:	7afb      	ldrb	r3, [r7, #11]
 8009a3e:	2b03      	cmp	r3, #3
 8009a40:	d10d      	bne.n	8009a5e <lwip_netconn_do_delconn+0x86>
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	7f1b      	ldrb	r3, [r3, #28]
 8009a48:	f003 0304 	and.w	r3, r3, #4
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d106      	bne.n	8009a5e <lwip_netconn_do_delconn+0x86>
 8009a50:	4b4c      	ldr	r3, [pc, #304]	; (8009b84 <lwip_netconn_do_delconn+0x1ac>)
 8009a52:	f240 427a 	movw	r2, #1146	; 0x47a
 8009a56:	494e      	ldr	r1, [pc, #312]	; (8009b90 <lwip_netconn_do_delconn+0x1b8>)
 8009a58:	484c      	ldr	r0, [pc, #304]	; (8009b8c <lwip_netconn_do_delconn+0x1b4>)
 8009a5a:	f00f f9ad 	bl	8018db8 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2200      	movs	r2, #0
 8009a62:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7ff fdcd 	bl	8009608 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d05f      	beq.n	8009b38 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a82:	2b10      	cmp	r3, #16
 8009a84:	d00d      	beq.n	8009aa2 <lwip_netconn_do_delconn+0xca>
 8009a86:	2b20      	cmp	r3, #32
 8009a88:	d151      	bne.n	8009b2e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f00a fc7e 	bl	801439c <udp_remove>
          break;
 8009aa0:	e046      	b.n	8009b30 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	6a1b      	ldr	r3, [r3, #32]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d006      	beq.n	8009aba <lwip_netconn_do_delconn+0xe2>
 8009aac:	4b35      	ldr	r3, [pc, #212]	; (8009b84 <lwip_netconn_do_delconn+0x1ac>)
 8009aae:	f240 4294 	movw	r2, #1172	; 0x494
 8009ab2:	4938      	ldr	r1, [pc, #224]	; (8009b94 <lwip_netconn_do_delconn+0x1bc>)
 8009ab4:	4835      	ldr	r0, [pc, #212]	; (8009b8c <lwip_netconn_do_delconn+0x1b4>)
 8009ab6:	f00f f97f 	bl	8018db8 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2204      	movs	r2, #4
 8009ac0:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2203      	movs	r2, #3
 8009ac6:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7ff fe14 	bl	8009704 <lwip_netconn_do_close_internal>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d04b      	beq.n	8009b7a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	785b      	ldrb	r3, [r3, #1]
 8009ae8:	2b04      	cmp	r3, #4
 8009aea:	d006      	beq.n	8009afa <lwip_netconn_do_delconn+0x122>
 8009aec:	4b25      	ldr	r3, [pc, #148]	; (8009b84 <lwip_netconn_do_delconn+0x1ac>)
 8009aee:	f240 429a 	movw	r2, #1178	; 0x49a
 8009af2:	4929      	ldr	r1, [pc, #164]	; (8009b98 <lwip_netconn_do_delconn+0x1c0>)
 8009af4:	4825      	ldr	r0, [pc, #148]	; (8009b8c <lwip_netconn_do_delconn+0x1b4>)
 8009af6:	f00f f95f 	bl	8018db8 <iprintf>
            UNLOCK_TCPIP_CORE();
 8009afa:	4828      	ldr	r0, [pc, #160]	; (8009b9c <lwip_netconn_do_delconn+0x1c4>)
 8009afc:	f00e ffef 	bl	8018ade <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	330c      	adds	r3, #12
 8009b06:	2100      	movs	r1, #0
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f00e ff46 	bl	801899a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8009b0e:	4823      	ldr	r0, [pc, #140]	; (8009b9c <lwip_netconn_do_delconn+0x1c4>)
 8009b10:	f00e ffd6 	bl	8018ac0 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	785b      	ldrb	r3, [r3, #1]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d02d      	beq.n	8009b7a <lwip_netconn_do_delconn+0x1a2>
 8009b1e:	4b19      	ldr	r3, [pc, #100]	; (8009b84 <lwip_netconn_do_delconn+0x1ac>)
 8009b20:	f240 429e 	movw	r2, #1182	; 0x49e
 8009b24:	491c      	ldr	r1, [pc, #112]	; (8009b98 <lwip_netconn_do_delconn+0x1c0>)
 8009b26:	4819      	ldr	r0, [pc, #100]	; (8009b8c <lwip_netconn_do_delconn+0x1b4>)
 8009b28:	f00f f946 	bl	8018db8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8009b2c:	e025      	b.n	8009b7a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8009b2e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2200      	movs	r2, #0
 8009b36:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d007      	beq.n	8009b52 <lwip_netconn_do_delconn+0x17a>
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	6810      	ldr	r0, [r2, #0]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	2100      	movs	r1, #0
 8009b50:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d007      	beq.n	8009b6c <lwip_netconn_do_delconn+0x194>
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	6810      	ldr	r0, [r2, #0]
 8009b66:	2200      	movs	r2, #0
 8009b68:	2102      	movs	r1, #2
 8009b6a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	330c      	adds	r3, #12
 8009b72:	4618      	mov	r0, r3
 8009b74:	f00e ff5c 	bl	8018a30 <sys_sem_valid>
 8009b78:	e000      	b.n	8009b7c <lwip_netconn_do_delconn+0x1a4>
          return;
 8009b7a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	0801a688 	.word	0x0801a688
 8009b88:	0801a9f8 	.word	0x0801a9f8
 8009b8c:	0801a6cc 	.word	0x0801a6cc
 8009b90:	0801aa0c 	.word	0x0801aa0c
 8009b94:	0801aa2c 	.word	0x0801aa2c
 8009b98:	0801aa48 	.word	0x0801aa48
 8009b9c:	2000d3b8 	.word	0x2000d3b8

08009ba0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d025      	beq.n	8009c02 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009bc0:	2b10      	cmp	r3, #16
 8009bc2:	d00e      	beq.n	8009be2 <lwip_netconn_do_bind+0x42>
 8009bc4:	2b20      	cmp	r3, #32
 8009bc6:	d119      	bne.n	8009bfc <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	6858      	ldr	r0, [r3, #4]
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	6899      	ldr	r1, [r3, #8]
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	899b      	ldrh	r3, [r3, #12]
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	f00a faca 	bl	8014170 <udp_bind>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	73fb      	strb	r3, [r7, #15]
        break;
 8009be0:	e011      	b.n	8009c06 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	6858      	ldr	r0, [r3, #4]
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	6899      	ldr	r1, [r3, #8]
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	899b      	ldrh	r3, [r3, #12]
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	f003 ffbb 	bl	800db6c <tcp_bind>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	73fb      	strb	r3, [r7, #15]
        break;
 8009bfa:	e004      	b.n	8009c06 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8009bfc:	23fa      	movs	r3, #250	; 0xfa
 8009bfe:	73fb      	strb	r3, [r7, #15]
        break;
 8009c00:	e001      	b.n	8009c06 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8009c02:	23fa      	movs	r3, #250	; 0xfa
 8009c04:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	7bfa      	ldrb	r2, [r7, #15]
 8009c0a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009c0c:	bf00      	nop
 8009c0e:	3710      	adds	r7, #16
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b088      	sub	sp, #32
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	4613      	mov	r3, r2
 8009c20:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 8009c22:	2300      	movs	r3, #0
 8009c24:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d102      	bne.n	8009c36 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8009c30:	f06f 0305 	mvn.w	r3, #5
 8009c34:	e070      	b.n	8009d18 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	785b      	ldrb	r3, [r3, #1]
 8009c3a:	2b03      	cmp	r3, #3
 8009c3c:	d006      	beq.n	8009c4c <lwip_netconn_do_connected+0x38>
 8009c3e:	4b38      	ldr	r3, [pc, #224]	; (8009d20 <lwip_netconn_do_connected+0x10c>)
 8009c40:	f240 5223 	movw	r2, #1315	; 0x523
 8009c44:	4937      	ldr	r1, [pc, #220]	; (8009d24 <lwip_netconn_do_connected+0x110>)
 8009c46:	4838      	ldr	r0, [pc, #224]	; (8009d28 <lwip_netconn_do_connected+0x114>)
 8009c48:	f00f f8b6 	bl	8018db8 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	6a1b      	ldr	r3, [r3, #32]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d10c      	bne.n	8009c6e <lwip_netconn_do_connected+0x5a>
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	7f1b      	ldrb	r3, [r3, #28]
 8009c58:	f003 0304 	and.w	r3, r3, #4
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d106      	bne.n	8009c6e <lwip_netconn_do_connected+0x5a>
 8009c60:	4b2f      	ldr	r3, [pc, #188]	; (8009d20 <lwip_netconn_do_connected+0x10c>)
 8009c62:	f240 5224 	movw	r2, #1316	; 0x524
 8009c66:	4931      	ldr	r1, [pc, #196]	; (8009d2c <lwip_netconn_do_connected+0x118>)
 8009c68:	482f      	ldr	r0, [pc, #188]	; (8009d28 <lwip_netconn_do_connected+0x114>)
 8009c6a:	f00f f8a5 	bl	8018db8 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	6a1b      	ldr	r3, [r3, #32]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d008      	beq.n	8009c88 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	6a1b      	ldr	r3, [r3, #32]
 8009c7a:	79fa      	ldrb	r2, [r7, #7]
 8009c7c:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009c7e:	69bb      	ldr	r3, [r7, #24]
 8009c80:	6a1b      	ldr	r3, [r3, #32]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	330c      	adds	r3, #12
 8009c86:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c90:	2b10      	cmp	r3, #16
 8009c92:	d106      	bne.n	8009ca2 <lwip_netconn_do_connected+0x8e>
 8009c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d102      	bne.n	8009ca2 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8009c9c:	69b8      	ldr	r0, [r7, #24]
 8009c9e:	f7ff fa97 	bl	80091d0 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	7f1b      	ldrb	r3, [r3, #28]
 8009ca6:	f003 0304 	and.w	r3, r3, #4
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	bf0c      	ite	eq
 8009cae:	2301      	moveq	r3, #1
 8009cb0:	2300      	movne	r3, #0
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	7f1b      	ldrb	r3, [r3, #28]
 8009cba:	f023 0304 	bic.w	r3, r3, #4
 8009cbe:	b2da      	uxtb	r2, r3
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d002      	beq.n	8009cd0 <lwip_netconn_do_connected+0xbc>
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d10c      	bne.n	8009cea <lwip_netconn_do_connected+0xd6>
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d102      	bne.n	8009cdc <lwip_netconn_do_connected+0xc8>
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d006      	beq.n	8009cea <lwip_netconn_do_connected+0xd6>
 8009cdc:	4b10      	ldr	r3, [pc, #64]	; (8009d20 <lwip_netconn_do_connected+0x10c>)
 8009cde:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 8009ce2:	4913      	ldr	r1, [pc, #76]	; (8009d30 <lwip_netconn_do_connected+0x11c>)
 8009ce4:	4810      	ldr	r0, [pc, #64]	; (8009d28 <lwip_netconn_do_connected+0x114>)
 8009ce6:	f00f f867 	bl	8018db8 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	2200      	movs	r2, #0
 8009cee:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d005      	beq.n	8009d0a <lwip_netconn_do_connected+0xf6>
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d02:	2200      	movs	r2, #0
 8009d04:	2102      	movs	r1, #2
 8009d06:	69b8      	ldr	r0, [r7, #24]
 8009d08:	4798      	blx	r3

  if (was_blocking) {
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d002      	beq.n	8009d16 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 8009d10:	69f8      	ldr	r0, [r7, #28]
 8009d12:	f00e fe73 	bl	80189fc <sys_sem_signal>
  }
  return ERR_OK;
 8009d16:	2300      	movs	r3, #0
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3720      	adds	r7, #32
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}
 8009d20:	0801a688 	.word	0x0801a688
 8009d24:	0801aa50 	.word	0x0801aa50
 8009d28:	0801a6cc 	.word	0x0801a6cc
 8009d2c:	0801aa70 	.word	0x0801aa70
 8009d30:	0801aab0 	.word	0x0801aab0

08009d34 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b086      	sub	sp, #24
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d102      	bne.n	8009d50 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8009d4a:	23f1      	movs	r3, #241	; 0xf1
 8009d4c:	75fb      	strb	r3, [r7, #23]
 8009d4e:	e09b      	b.n	8009e88 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d5a:	2b10      	cmp	r3, #16
 8009d5c:	d00f      	beq.n	8009d7e <lwip_netconn_do_connect+0x4a>
 8009d5e:	2b20      	cmp	r3, #32
 8009d60:	f040 8087 	bne.w	8009e72 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	6858      	ldr	r0, [r3, #4]
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	6899      	ldr	r1, [r3, #8]
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	899b      	ldrh	r3, [r3, #12]
 8009d72:	461a      	mov	r2, r3
 8009d74:	f00a fa84 	bl	8014280 <udp_connect>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	75fb      	strb	r3, [r7, #23]
        break;
 8009d7c:	e084      	b.n	8009e88 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	785b      	ldrb	r3, [r3, #1]
 8009d84:	2b03      	cmp	r3, #3
 8009d86:	d102      	bne.n	8009d8e <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8009d88:	23f7      	movs	r3, #247	; 0xf7
 8009d8a:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8009d8c:	e07b      	b.n	8009e86 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	785b      	ldrb	r3, [r3, #1]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d002      	beq.n	8009d9e <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8009d98:	23f6      	movs	r3, #246	; 0xf6
 8009d9a:	75fb      	strb	r3, [r7, #23]
        break;
 8009d9c:	e073      	b.n	8009e86 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7ff fa14 	bl	80091d0 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	6858      	ldr	r0, [r3, #4]
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	6899      	ldr	r1, [r3, #8]
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	899a      	ldrh	r2, [r3, #12]
 8009db6:	4b38      	ldr	r3, [pc, #224]	; (8009e98 <lwip_netconn_do_connect+0x164>)
 8009db8:	f004 f93c 	bl	800e034 <tcp_connect>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8009dc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d15e      	bne.n	8009e86 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	7f1b      	ldrb	r3, [r3, #28]
 8009dce:	f003 0302 	and.w	r3, r3, #2
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	bf14      	ite	ne
 8009dd6:	2301      	movne	r3, #1
 8009dd8:	2300      	moveq	r3, #0
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2203      	movs	r2, #3
 8009de4:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8009de6:	7bfb      	ldrb	r3, [r7, #15]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d009      	beq.n	8009e00 <lwip_netconn_do_connect+0xcc>
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	7f1a      	ldrb	r2, [r3, #28]
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f042 0204 	orr.w	r2, r2, #4
 8009dfa:	b2d2      	uxtb	r2, r2
 8009dfc:	771a      	strb	r2, [r3, #28]
 8009dfe:	e008      	b.n	8009e12 <lwip_netconn_do_connect+0xde>
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	7f1a      	ldrb	r2, [r3, #28]
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f022 0204 	bic.w	r2, r2, #4
 8009e0e:	b2d2      	uxtb	r2, r2
 8009e10:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 8009e12:	7bfb      	ldrb	r3, [r7, #15]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d002      	beq.n	8009e1e <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 8009e18:	23fb      	movs	r3, #251	; 0xfb
 8009e1a:	75fb      	strb	r3, [r7, #23]
        break;
 8009e1c:	e033      	b.n	8009e86 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	693a      	ldr	r2, [r7, #16]
 8009e24:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	785b      	ldrb	r3, [r3, #1]
 8009e2c:	2b03      	cmp	r3, #3
 8009e2e:	d006      	beq.n	8009e3e <lwip_netconn_do_connect+0x10a>
 8009e30:	4b1a      	ldr	r3, [pc, #104]	; (8009e9c <lwip_netconn_do_connect+0x168>)
 8009e32:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8009e36:	491a      	ldr	r1, [pc, #104]	; (8009ea0 <lwip_netconn_do_connect+0x16c>)
 8009e38:	481a      	ldr	r0, [pc, #104]	; (8009ea4 <lwip_netconn_do_connect+0x170>)
 8009e3a:	f00e ffbd 	bl	8018db8 <iprintf>
              UNLOCK_TCPIP_CORE();
 8009e3e:	481a      	ldr	r0, [pc, #104]	; (8009ea8 <lwip_netconn_do_connect+0x174>)
 8009e40:	f00e fe4d 	bl	8018ade <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	330c      	adds	r3, #12
 8009e4a:	2100      	movs	r1, #0
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f00e fda4 	bl	801899a <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8009e52:	4815      	ldr	r0, [pc, #84]	; (8009ea8 <lwip_netconn_do_connect+0x174>)
 8009e54:	f00e fe34 	bl	8018ac0 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	785b      	ldrb	r3, [r3, #1]
 8009e5e:	2b03      	cmp	r3, #3
 8009e60:	d116      	bne.n	8009e90 <lwip_netconn_do_connect+0x15c>
 8009e62:	4b0e      	ldr	r3, [pc, #56]	; (8009e9c <lwip_netconn_do_connect+0x168>)
 8009e64:	f240 5274 	movw	r2, #1396	; 0x574
 8009e68:	490d      	ldr	r1, [pc, #52]	; (8009ea0 <lwip_netconn_do_connect+0x16c>)
 8009e6a:	480e      	ldr	r0, [pc, #56]	; (8009ea4 <lwip_netconn_do_connect+0x170>)
 8009e6c:	f00e ffa4 	bl	8018db8 <iprintf>
              return;
 8009e70:	e00e      	b.n	8009e90 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8009e72:	4b0a      	ldr	r3, [pc, #40]	; (8009e9c <lwip_netconn_do_connect+0x168>)
 8009e74:	f240 527d 	movw	r2, #1405	; 0x57d
 8009e78:	490c      	ldr	r1, [pc, #48]	; (8009eac <lwip_netconn_do_connect+0x178>)
 8009e7a:	480a      	ldr	r0, [pc, #40]	; (8009ea4 <lwip_netconn_do_connect+0x170>)
 8009e7c:	f00e ff9c 	bl	8018db8 <iprintf>
 8009e80:	23fa      	movs	r3, #250	; 0xfa
 8009e82:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8009e84:	e000      	b.n	8009e88 <lwip_netconn_do_connect+0x154>
        break;
 8009e86:	bf00      	nop
    }
  }
  msg->err = err;
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	7dfa      	ldrb	r2, [r7, #23]
 8009e8c:	711a      	strb	r2, [r3, #4]
 8009e8e:	e000      	b.n	8009e92 <lwip_netconn_do_connect+0x15e>
              return;
 8009e90:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8009e92:	3718      	adds	r7, #24
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	08009c15 	.word	0x08009c15
 8009e9c:	0801a688 	.word	0x0801a688
 8009ea0:	0801aa48 	.word	0x0801aa48
 8009ea4:	0801a6cc 	.word	0x0801a6cc
 8009ea8:	2000d3b8 	.word	0x2000d3b8
 8009eac:	0801aad0 	.word	0x0801aad0

08009eb0 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b086      	sub	sp, #24
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d07f      	beq.n	8009fc6 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ed0:	2b10      	cmp	r3, #16
 8009ed2:	d175      	bne.n	8009fc0 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	785b      	ldrb	r3, [r3, #1]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d165      	bne.n	8009faa <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	7d1b      	ldrb	r3, [r3, #20]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d002      	beq.n	8009ef0 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8009eea:	23fa      	movs	r3, #250	; 0xfa
 8009eec:	72fb      	strb	r3, [r7, #11]
 8009eee:	e06c      	b.n	8009fca <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8009ef0:	23ff      	movs	r3, #255	; 0xff
 8009ef2:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	f107 020b 	add.w	r2, r7, #11
 8009efe:	7cf9      	ldrb	r1, [r7, #19]
 8009f00:	4618      	mov	r0, r3
 8009f02:	f003 fefd 	bl	800dd00 <tcp_listen_with_backlog_and_err>
 8009f06:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d05d      	beq.n	8009fca <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	3310      	adds	r3, #16
 8009f14:	4618      	mov	r0, r3
 8009f16:	f00e fcfa 	bl	801890e <sys_mbox_valid>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d00b      	beq.n	8009f38 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	3310      	adds	r3, #16
 8009f26:	4618      	mov	r0, r3
 8009f28:	f00e fc6a 	bl	8018800 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	3310      	adds	r3, #16
 8009f32:	4618      	mov	r0, r3
 8009f34:	f00e fcfc 	bl	8018930 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	3314      	adds	r3, #20
 8009f42:	4618      	mov	r0, r3
 8009f44:	f00e fce3 	bl	801890e <sys_mbox_valid>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d108      	bne.n	8009f60 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	3314      	adds	r3, #20
 8009f54:	2106      	movs	r1, #6
 8009f56:	4618      	mov	r0, r3
 8009f58:	f00e fc30 	bl	80187bc <sys_mbox_new>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8009f60:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d118      	bne.n	8009f9a <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	2202      	movs	r2, #2
 8009f6e:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	685a      	ldr	r2, [r3, #4]
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4619      	mov	r1, r3
 8009f84:	4610      	mov	r0, r2
 8009f86:	f004 ffbb 	bl	800ef00 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	4912      	ldr	r1, [pc, #72]	; (8009fdc <lwip_netconn_do_listen+0x12c>)
 8009f92:	4618      	mov	r0, r3
 8009f94:	f005 f82c 	bl	800eff0 <tcp_accept>
 8009f98:	e017      	b.n	8009fca <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f003 fc94 	bl	800d8c8 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	605a      	str	r2, [r3, #4]
 8009fa8:	e00f      	b.n	8009fca <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	785b      	ldrb	r3, [r3, #1]
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d102      	bne.n	8009fba <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	72fb      	strb	r3, [r7, #11]
 8009fb8:	e007      	b.n	8009fca <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8009fba:	23f5      	movs	r3, #245	; 0xf5
 8009fbc:	72fb      	strb	r3, [r7, #11]
 8009fbe:	e004      	b.n	8009fca <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8009fc0:	23f0      	movs	r3, #240	; 0xf0
 8009fc2:	72fb      	strb	r3, [r7, #11]
 8009fc4:	e001      	b.n	8009fca <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8009fc6:	23f5      	movs	r3, #245	; 0xf5
 8009fc8:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8009fca:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009fd2:	bf00      	nop
 8009fd4:	3718      	adds	r7, #24
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	08009221 	.word	0x08009221

08009fe0 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b086      	sub	sp, #24
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d022      	beq.n	800a042 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a006:	2b10      	cmp	r3, #16
 800a008:	d11b      	bne.n	800a042 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a016:	d202      	bcs.n	800a01e <lwip_netconn_do_recv+0x3e>
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	e001      	b.n	800a022 <lwip_netconn_do_recv+0x42>
 800a01e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a022:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	89fa      	ldrh	r2, [r7, #14]
 800a02c:	4611      	mov	r1, r2
 800a02e:	4618      	mov	r0, r3
 800a030:	f003 ff6a 	bl	800df08 <tcp_recved>
        remaining -= recved;
 800a034:	89fb      	ldrh	r3, [r7, #14]
 800a036:	697a      	ldr	r2, [r7, #20]
 800a038:	1ad3      	subs	r3, r2, r3
 800a03a:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d1e6      	bne.n	800a010 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a042:	bf00      	nop
 800a044:	3718      	adds	r7, #24
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
	...

0800a04c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b088      	sub	sp, #32
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	460b      	mov	r3, r1
 800a056:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800a058:	2300      	movs	r3, #0
 800a05a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d106      	bne.n	800a070 <lwip_netconn_do_writemore+0x24>
 800a062:	4b96      	ldr	r3, [pc, #600]	; (800a2bc <lwip_netconn_do_writemore+0x270>)
 800a064:	f240 6273 	movw	r2, #1651	; 0x673
 800a068:	4995      	ldr	r1, [pc, #596]	; (800a2c0 <lwip_netconn_do_writemore+0x274>)
 800a06a:	4896      	ldr	r0, [pc, #600]	; (800a2c4 <lwip_netconn_do_writemore+0x278>)
 800a06c:	f00e fea4 	bl	8018db8 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	785b      	ldrb	r3, [r3, #1]
 800a074:	2b01      	cmp	r3, #1
 800a076:	d006      	beq.n	800a086 <lwip_netconn_do_writemore+0x3a>
 800a078:	4b90      	ldr	r3, [pc, #576]	; (800a2bc <lwip_netconn_do_writemore+0x270>)
 800a07a:	f240 6274 	movw	r2, #1652	; 0x674
 800a07e:	4992      	ldr	r1, [pc, #584]	; (800a2c8 <lwip_netconn_do_writemore+0x27c>)
 800a080:	4890      	ldr	r0, [pc, #576]	; (800a2c4 <lwip_netconn_do_writemore+0x278>)
 800a082:	f00e fe99 	bl	8018db8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a1b      	ldr	r3, [r3, #32]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d106      	bne.n	800a09c <lwip_netconn_do_writemore+0x50>
 800a08e:	4b8b      	ldr	r3, [pc, #556]	; (800a2bc <lwip_netconn_do_writemore+0x270>)
 800a090:	f240 6275 	movw	r2, #1653	; 0x675
 800a094:	498d      	ldr	r1, [pc, #564]	; (800a2cc <lwip_netconn_do_writemore+0x280>)
 800a096:	488b      	ldr	r0, [pc, #556]	; (800a2c4 <lwip_netconn_do_writemore+0x278>)
 800a098:	f00e fe8e 	bl	8018db8 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d106      	bne.n	800a0b2 <lwip_netconn_do_writemore+0x66>
 800a0a4:	4b85      	ldr	r3, [pc, #532]	; (800a2bc <lwip_netconn_do_writemore+0x270>)
 800a0a6:	f240 6276 	movw	r2, #1654	; 0x676
 800a0aa:	4989      	ldr	r1, [pc, #548]	; (800a2d0 <lwip_netconn_do_writemore+0x284>)
 800a0ac:	4885      	ldr	r0, [pc, #532]	; (800a2c4 <lwip_netconn_do_writemore+0x278>)
 800a0ae:	f00e fe83 	bl	8018db8 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6a1b      	ldr	r3, [r3, #32]
 800a0b6:	699a      	ldr	r2, [r3, #24]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6a1b      	ldr	r3, [r3, #32]
 800a0bc:	695b      	ldr	r3, [r3, #20]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d306      	bcc.n	800a0d0 <lwip_netconn_do_writemore+0x84>
 800a0c2:	4b7e      	ldr	r3, [pc, #504]	; (800a2bc <lwip_netconn_do_writemore+0x270>)
 800a0c4:	f240 6277 	movw	r2, #1655	; 0x677
 800a0c8:	4982      	ldr	r1, [pc, #520]	; (800a2d4 <lwip_netconn_do_writemore+0x288>)
 800a0ca:	487e      	ldr	r0, [pc, #504]	; (800a2c4 <lwip_netconn_do_writemore+0x278>)
 800a0cc:	f00e fe74 	bl	8018db8 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6a1b      	ldr	r3, [r3, #32]
 800a0d4:	899b      	ldrh	r3, [r3, #12]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d106      	bne.n	800a0e8 <lwip_netconn_do_writemore+0x9c>
 800a0da:	4b78      	ldr	r3, [pc, #480]	; (800a2bc <lwip_netconn_do_writemore+0x270>)
 800a0dc:	f240 6279 	movw	r2, #1657	; 0x679
 800a0e0:	497d      	ldr	r1, [pc, #500]	; (800a2d8 <lwip_netconn_do_writemore+0x28c>)
 800a0e2:	4878      	ldr	r0, [pc, #480]	; (800a2c4 <lwip_netconn_do_writemore+0x278>)
 800a0e4:	f00e fe68 	bl	8018db8 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6a1b      	ldr	r3, [r3, #32]
 800a0ec:	7f1b      	ldrb	r3, [r3, #28]
 800a0ee:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	7f1b      	ldrb	r3, [r3, #28]
 800a0f4:	f003 0302 	and.w	r3, r3, #2
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d104      	bne.n	800a106 <lwip_netconn_do_writemore+0xba>
 800a0fc:	7ebb      	ldrb	r3, [r7, #26]
 800a0fe:	f003 0304 	and.w	r3, r3, #4
 800a102:	2b00      	cmp	r3, #0
 800a104:	d001      	beq.n	800a10a <lwip_netconn_do_writemore+0xbe>
 800a106:	2301      	movs	r3, #1
 800a108:	e000      	b.n	800a10c <lwip_netconn_do_writemore+0xc0>
 800a10a:	2300      	movs	r3, #0
 800a10c:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a1b      	ldr	r3, [r3, #32]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6a1b      	ldr	r3, [r3, #32]
 800a11a:	691b      	ldr	r3, [r3, #16]
 800a11c:	4413      	add	r3, r2
 800a11e:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6a1b      	ldr	r3, [r3, #32]
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	685a      	ldr	r2, [r3, #4]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6a1b      	ldr	r3, [r3, #32]
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	1ad3      	subs	r3, r2, r3
 800a130:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a138:	d307      	bcc.n	800a14a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800a13a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a13e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a140:	7ebb      	ldrb	r3, [r7, #26]
 800a142:	f043 0302 	orr.w	r3, r3, #2
 800a146:	76bb      	strb	r3, [r7, #26]
 800a148:	e001      	b.n	800a14e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a156:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800a158:	89fa      	ldrh	r2, [r7, #14]
 800a15a:	8bbb      	ldrh	r3, [r7, #28]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d216      	bcs.n	800a18e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800a160:	89fb      	ldrh	r3, [r7, #14]
 800a162:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800a164:	7e3b      	ldrb	r3, [r7, #24]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d00d      	beq.n	800a186 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800a16a:	8bbb      	ldrh	r3, [r7, #28]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d10e      	bne.n	800a18e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6a1b      	ldr	r3, [r3, #32]
 800a174:	699b      	ldr	r3, [r3, #24]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d102      	bne.n	800a180 <lwip_netconn_do_writemore+0x134>
 800a17a:	f06f 0306 	mvn.w	r3, #6
 800a17e:	e000      	b.n	800a182 <lwip_netconn_do_writemore+0x136>
 800a180:	2300      	movs	r3, #0
 800a182:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800a184:	e07d      	b.n	800a282 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800a186:	7ebb      	ldrb	r3, [r7, #26]
 800a188:	f043 0302 	orr.w	r3, r3, #2
 800a18c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a1b      	ldr	r3, [r3, #32]
 800a192:	691a      	ldr	r2, [r3, #16]
 800a194:	8bbb      	ldrh	r3, [r7, #28]
 800a196:	441a      	add	r2, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6a1b      	ldr	r3, [r3, #32]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d906      	bls.n	800a1b2 <lwip_netconn_do_writemore+0x166>
 800a1a4:	4b45      	ldr	r3, [pc, #276]	; (800a2bc <lwip_netconn_do_writemore+0x270>)
 800a1a6:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800a1aa:	494c      	ldr	r1, [pc, #304]	; (800a2dc <lwip_netconn_do_writemore+0x290>)
 800a1ac:	4845      	ldr	r0, [pc, #276]	; (800a2c4 <lwip_netconn_do_writemore+0x278>)
 800a1ae:	f00e fe03 	bl	8018db8 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a1b2:	8bbb      	ldrh	r3, [r7, #28]
 800a1b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d103      	bne.n	800a1c4 <lwip_netconn_do_writemore+0x178>
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1c2:	d209      	bcs.n	800a1d8 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a1c8:	8bba      	ldrh	r2, [r7, #28]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d10b      	bne.n	800a1e6 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6a1b      	ldr	r3, [r3, #32]
 800a1d2:	899b      	ldrh	r3, [r3, #12]
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d906      	bls.n	800a1e6 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a1dc:	7ebb      	ldrb	r3, [r7, #26]
 800a1de:	f043 0302 	orr.w	r3, r3, #2
 800a1e2:	76bb      	strb	r3, [r7, #26]
 800a1e4:	e001      	b.n	800a1ea <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6858      	ldr	r0, [r3, #4]
 800a1ee:	7ebb      	ldrb	r3, [r7, #26]
 800a1f0:	8bba      	ldrh	r2, [r7, #28]
 800a1f2:	6979      	ldr	r1, [r7, #20]
 800a1f4:	f007 fdc6 	bl	8011d84 <tcp_write>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800a1fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d12c      	bne.n	800a25e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6a1b      	ldr	r3, [r3, #32]
 800a208:	6999      	ldr	r1, [r3, #24]
 800a20a:	8bba      	ldrh	r2, [r7, #28]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a1b      	ldr	r3, [r3, #32]
 800a210:	440a      	add	r2, r1
 800a212:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a1b      	ldr	r3, [r3, #32]
 800a218:	6919      	ldr	r1, [r3, #16]
 800a21a:	8bba      	ldrh	r2, [r7, #28]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6a1b      	ldr	r3, [r3, #32]
 800a220:	440a      	add	r2, r1
 800a222:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6a1b      	ldr	r3, [r3, #32]
 800a228:	691a      	ldr	r2, [r3, #16]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a1b      	ldr	r3, [r3, #32]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	429a      	cmp	r2, r3
 800a234:	d113      	bne.n	800a25e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	899a      	ldrh	r2, [r3, #12]
 800a23c:	3a01      	subs	r2, #1
 800a23e:	b292      	uxth	r2, r2
 800a240:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a1b      	ldr	r3, [r3, #32]
 800a246:	899b      	ldrh	r3, [r3, #12]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d008      	beq.n	800a25e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6a1b      	ldr	r3, [r3, #32]
 800a250:	689a      	ldr	r2, [r3, #8]
 800a252:	3208      	adds	r2, #8
 800a254:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a1b      	ldr	r3, [r3, #32]
 800a25a:	2200      	movs	r2, #0
 800a25c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a25e:	7e7b      	ldrb	r3, [r7, #25]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d004      	beq.n	800a26e <lwip_netconn_do_writemore+0x222>
 800a264:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f43f af50 	beq.w	800a10e <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a26e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d004      	beq.n	800a280 <lwip_netconn_do_writemore+0x234>
 800a276:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a27a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a27e:	d146      	bne.n	800a30e <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800a280:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a282:	7e3b      	ldrb	r3, [r7, #24]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d02b      	beq.n	800a2e0 <lwip_netconn_do_writemore+0x294>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6a1b      	ldr	r3, [r3, #32]
 800a28c:	699a      	ldr	r2, [r3, #24]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a1b      	ldr	r3, [r3, #32]
 800a292:	695b      	ldr	r3, [r3, #20]
 800a294:	429a      	cmp	r2, r3
 800a296:	d223      	bcs.n	800a2e0 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d005      	beq.n	800a2ac <lwip_netconn_do_writemore+0x260>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	2103      	movs	r1, #3
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	7f1b      	ldrb	r3, [r3, #28]
 800a2b0:	f043 0310 	orr.w	r3, r3, #16
 800a2b4:	b2da      	uxtb	r2, r3
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	771a      	strb	r2, [r3, #28]
 800a2ba:	e028      	b.n	800a30e <lwip_netconn_do_writemore+0x2c2>
 800a2bc:	0801a688 	.word	0x0801a688
 800a2c0:	0801a7e0 	.word	0x0801a7e0
 800a2c4:	0801a6cc 	.word	0x0801a6cc
 800a2c8:	0801aae8 	.word	0x0801aae8
 800a2cc:	0801a7f0 	.word	0x0801a7f0
 800a2d0:	0801ab08 	.word	0x0801ab08
 800a2d4:	0801ab20 	.word	0x0801ab20
 800a2d8:	0801ab60 	.word	0x0801ab60
 800a2dc:	0801ab88 	.word	0x0801ab88
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a2e8:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a2ec:	d305      	bcc.n	800a2fa <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a2f6:	2b04      	cmp	r3, #4
 800a2f8:	d909      	bls.n	800a30e <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d005      	beq.n	800a30e <lwip_netconn_do_writemore+0x2c2>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a306:	2200      	movs	r2, #0
 800a308:	2103      	movs	r1, #3
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a30e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d11d      	bne.n	800a352 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6a1b      	ldr	r3, [r3, #32]
 800a31a:	699a      	ldr	r2, [r3, #24]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6a1b      	ldr	r3, [r3, #32]
 800a320:	695b      	ldr	r3, [r3, #20]
 800a322:	429a      	cmp	r2, r3
 800a324:	d002      	beq.n	800a32c <lwip_netconn_do_writemore+0x2e0>
 800a326:	7e3b      	ldrb	r3, [r7, #24]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d001      	beq.n	800a330 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800a32c:	2301      	movs	r3, #1
 800a32e:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	4618      	mov	r0, r3
 800a336:	f008 fb0f 	bl	8012958 <tcp_output>
 800a33a:	4603      	mov	r3, r0
 800a33c:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800a33e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a342:	f113 0f04 	cmn.w	r3, #4
 800a346:	d12c      	bne.n	800a3a2 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a348:	7b3b      	ldrb	r3, [r7, #12]
 800a34a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a34c:	2301      	movs	r3, #1
 800a34e:	76fb      	strb	r3, [r7, #27]
 800a350:	e027      	b.n	800a3a2 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800a352:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a35a:	d120      	bne.n	800a39e <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	4618      	mov	r0, r3
 800a362:	f008 faf9 	bl	8012958 <tcp_output>
 800a366:	4603      	mov	r3, r0
 800a368:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800a36a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a36e:	f113 0f04 	cmn.w	r3, #4
 800a372:	d104      	bne.n	800a37e <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a374:	7b7b      	ldrb	r3, [r7, #13]
 800a376:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a378:	2301      	movs	r3, #1
 800a37a:	76fb      	strb	r3, [r7, #27]
 800a37c:	e011      	b.n	800a3a2 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800a37e:	7e3b      	ldrb	r3, [r7, #24]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d00e      	beq.n	800a3a2 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6a1b      	ldr	r3, [r3, #32]
 800a388:	699b      	ldr	r3, [r3, #24]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d102      	bne.n	800a394 <lwip_netconn_do_writemore+0x348>
 800a38e:	f06f 0306 	mvn.w	r3, #6
 800a392:	e000      	b.n	800a396 <lwip_netconn_do_writemore+0x34a>
 800a394:	2300      	movs	r3, #0
 800a396:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a398:	2301      	movs	r3, #1
 800a39a:	76fb      	strb	r3, [r7, #27]
 800a39c:	e001      	b.n	800a3a2 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800a3a2:	7efb      	ldrb	r3, [r7, #27]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d015      	beq.n	800a3d4 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6a1b      	ldr	r3, [r3, #32]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	330c      	adds	r3, #12
 800a3b0:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6a1b      	ldr	r3, [r3, #32]
 800a3b6:	7ffa      	ldrb	r2, [r7, #31]
 800a3b8:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a3c6:	78fb      	ldrb	r3, [r7, #3]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d006      	beq.n	800a3da <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a3cc:	68b8      	ldr	r0, [r7, #8]
 800a3ce:	f00e fb15 	bl	80189fc <sys_sem_signal>
 800a3d2:	e002      	b.n	800a3da <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a3d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a3d8:	e000      	b.n	800a3dc <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800a3da:	2300      	movs	r3, #0
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3720      	adds	r7, #32
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7fe fbce 	bl	8008b96 <netconn_err>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a3fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d166      	bne.n	800a4d4 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a410:	2b10      	cmp	r3, #16
 800a412:	d15d      	bne.n	800a4d0 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	785b      	ldrb	r3, [r3, #1]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d002      	beq.n	800a424 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800a41e:	23fb      	movs	r3, #251	; 0xfb
 800a420:	73fb      	strb	r3, [r7, #15]
 800a422:	e057      	b.n	800a4d4 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d04d      	beq.n	800a4ca <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2201      	movs	r2, #1
 800a434:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	6a1b      	ldr	r3, [r3, #32]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d006      	beq.n	800a44e <lwip_netconn_do_write+0x6a>
 800a440:	4b28      	ldr	r3, [pc, #160]	; (800a4e4 <lwip_netconn_do_write+0x100>)
 800a442:	f240 7223 	movw	r2, #1827	; 0x723
 800a446:	4928      	ldr	r1, [pc, #160]	; (800a4e8 <lwip_netconn_do_write+0x104>)
 800a448:	4828      	ldr	r0, [pc, #160]	; (800a4ec <lwip_netconn_do_write+0x108>)
 800a44a:	f00e fcb5 	bl	8018db8 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	695b      	ldr	r3, [r3, #20]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d106      	bne.n	800a464 <lwip_netconn_do_write+0x80>
 800a456:	4b23      	ldr	r3, [pc, #140]	; (800a4e4 <lwip_netconn_do_write+0x100>)
 800a458:	f240 7224 	movw	r2, #1828	; 0x724
 800a45c:	4924      	ldr	r1, [pc, #144]	; (800a4f0 <lwip_netconn_do_write+0x10c>)
 800a45e:	4823      	ldr	r0, [pc, #140]	; (800a4ec <lwip_netconn_do_write+0x108>)
 800a460:	f00e fcaa 	bl	8018db8 <iprintf>
        msg->conn->current_msg = msg;
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	68ba      	ldr	r2, [r7, #8]
 800a46a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2100      	movs	r1, #0
 800a472:	4618      	mov	r0, r3
 800a474:	f7ff fdea 	bl	800a04c <lwip_netconn_do_writemore>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d02e      	beq.n	800a4dc <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	785b      	ldrb	r3, [r3, #1]
 800a484:	2b01      	cmp	r3, #1
 800a486:	d006      	beq.n	800a496 <lwip_netconn_do_write+0xb2>
 800a488:	4b16      	ldr	r3, [pc, #88]	; (800a4e4 <lwip_netconn_do_write+0x100>)
 800a48a:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800a48e:	4919      	ldr	r1, [pc, #100]	; (800a4f4 <lwip_netconn_do_write+0x110>)
 800a490:	4816      	ldr	r0, [pc, #88]	; (800a4ec <lwip_netconn_do_write+0x108>)
 800a492:	f00e fc91 	bl	8018db8 <iprintf>
          UNLOCK_TCPIP_CORE();
 800a496:	4818      	ldr	r0, [pc, #96]	; (800a4f8 <lwip_netconn_do_write+0x114>)
 800a498:	f00e fb21 	bl	8018ade <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	330c      	adds	r3, #12
 800a4a2:	2100      	movs	r1, #0
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f00e fa78 	bl	801899a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a4aa:	4813      	ldr	r0, [pc, #76]	; (800a4f8 <lwip_netconn_do_write+0x114>)
 800a4ac:	f00e fb08 	bl	8018ac0 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	785b      	ldrb	r3, [r3, #1]
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d110      	bne.n	800a4dc <lwip_netconn_do_write+0xf8>
 800a4ba:	4b0a      	ldr	r3, [pc, #40]	; (800a4e4 <lwip_netconn_do_write+0x100>)
 800a4bc:	f240 722c 	movw	r2, #1836	; 0x72c
 800a4c0:	490c      	ldr	r1, [pc, #48]	; (800a4f4 <lwip_netconn_do_write+0x110>)
 800a4c2:	480a      	ldr	r0, [pc, #40]	; (800a4ec <lwip_netconn_do_write+0x108>)
 800a4c4:	f00e fc78 	bl	8018db8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a4c8:	e008      	b.n	800a4dc <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800a4ca:	23f5      	movs	r3, #245	; 0xf5
 800a4cc:	73fb      	strb	r3, [r7, #15]
 800a4ce:	e001      	b.n	800a4d4 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800a4d0:	23fa      	movs	r3, #250	; 0xfa
 800a4d2:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	7bfa      	ldrb	r2, [r7, #15]
 800a4d8:	711a      	strb	r2, [r3, #4]
 800a4da:	e000      	b.n	800a4de <lwip_netconn_do_write+0xfa>
        return;
 800a4dc:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800a4de:	3710      	adds	r7, #16
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}
 800a4e4:	0801a688 	.word	0x0801a688
 800a4e8:	0801aa2c 	.word	0x0801aa2c
 800a4ec:	0801a6cc 	.word	0x0801a6cc
 800a4f0:	0801abb4 	.word	0x0801abb4
 800a4f4:	0801aa48 	.word	0x0801aa48
 800a4f8:	2000d3b8 	.word	0x2000d3b8

0800a4fc <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	785b      	ldrb	r3, [r3, #1]
 800a50e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d069      	beq.n	800a5ee <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800a524:	2b10      	cmp	r3, #16
 800a526:	d162      	bne.n	800a5ee <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a52c:	2b03      	cmp	r3, #3
 800a52e:	d002      	beq.n	800a536 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a530:	7afb      	ldrb	r3, [r7, #11]
 800a532:	2b02      	cmp	r3, #2
 800a534:	d05b      	beq.n	800a5ee <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800a536:	7afb      	ldrb	r3, [r7, #11]
 800a538:	2b03      	cmp	r3, #3
 800a53a:	d103      	bne.n	800a544 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	22f5      	movs	r2, #245	; 0xf5
 800a540:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a542:	e059      	b.n	800a5f8 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800a544:	7afb      	ldrb	r3, [r7, #11]
 800a546:	2b01      	cmp	r3, #1
 800a548:	d103      	bne.n	800a552 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	22fb      	movs	r2, #251	; 0xfb
 800a54e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a550:	e052      	b.n	800a5f8 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	7a1b      	ldrb	r3, [r3, #8]
 800a556:	f003 0301 	and.w	r3, r3, #1
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d004      	beq.n	800a568 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4618      	mov	r0, r3
 800a564:	f7ff f850 	bl	8009608 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	6a1b      	ldr	r3, [r3, #32]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d006      	beq.n	800a580 <lwip_netconn_do_close+0x84>
 800a572:	4b23      	ldr	r3, [pc, #140]	; (800a600 <lwip_netconn_do_close+0x104>)
 800a574:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800a578:	4922      	ldr	r1, [pc, #136]	; (800a604 <lwip_netconn_do_close+0x108>)
 800a57a:	4823      	ldr	r0, [pc, #140]	; (800a608 <lwip_netconn_do_close+0x10c>)
 800a57c:	f00e fc1c 	bl	8018db8 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2204      	movs	r2, #4
 800a586:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	2100      	movs	r1, #0
 800a596:	4618      	mov	r0, r3
 800a598:	f7ff f8b4 	bl	8009704 <lwip_netconn_do_close_internal>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d029      	beq.n	800a5f6 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	785b      	ldrb	r3, [r3, #1]
 800a5a8:	2b04      	cmp	r3, #4
 800a5aa:	d006      	beq.n	800a5ba <lwip_netconn_do_close+0xbe>
 800a5ac:	4b14      	ldr	r3, [pc, #80]	; (800a600 <lwip_netconn_do_close+0x104>)
 800a5ae:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800a5b2:	4916      	ldr	r1, [pc, #88]	; (800a60c <lwip_netconn_do_close+0x110>)
 800a5b4:	4814      	ldr	r0, [pc, #80]	; (800a608 <lwip_netconn_do_close+0x10c>)
 800a5b6:	f00e fbff 	bl	8018db8 <iprintf>
        UNLOCK_TCPIP_CORE();
 800a5ba:	4815      	ldr	r0, [pc, #84]	; (800a610 <lwip_netconn_do_close+0x114>)
 800a5bc:	f00e fa8f 	bl	8018ade <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	330c      	adds	r3, #12
 800a5c6:	2100      	movs	r1, #0
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f00e f9e6 	bl	801899a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800a5ce:	4810      	ldr	r0, [pc, #64]	; (800a610 <lwip_netconn_do_close+0x114>)
 800a5d0:	f00e fa76 	bl	8018ac0 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	785b      	ldrb	r3, [r3, #1]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d00b      	beq.n	800a5f6 <lwip_netconn_do_close+0xfa>
 800a5de:	4b08      	ldr	r3, [pc, #32]	; (800a600 <lwip_netconn_do_close+0x104>)
 800a5e0:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800a5e4:	4909      	ldr	r1, [pc, #36]	; (800a60c <lwip_netconn_do_close+0x110>)
 800a5e6:	4808      	ldr	r0, [pc, #32]	; (800a608 <lwip_netconn_do_close+0x10c>)
 800a5e8:	f00e fbe6 	bl	8018db8 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800a5ec:	e003      	b.n	800a5f6 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	22f5      	movs	r2, #245	; 0xf5
 800a5f2:	711a      	strb	r2, [r3, #4]
 800a5f4:	e000      	b.n	800a5f8 <lwip_netconn_do_close+0xfc>
      return;
 800a5f6:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a5f8:	3710      	adds	r7, #16
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	0801a688 	.word	0x0801a688
 800a604:	0801aa2c 	.word	0x0801aa2c
 800a608:	0801a6cc 	.word	0x0801a6cc
 800a60c:	0801aa48 	.word	0x0801aa48
 800a610:	2000d3b8 	.word	0x2000d3b8

0800a614 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d013      	beq.n	800a64a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00b      	beq.n	800a642 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4618      	mov	r0, r3
 800a630:	f002 fc90 	bl	800cf54 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	605a      	str	r2, [r3, #4]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	685a      	ldr	r2, [r3, #4]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800a642:	6879      	ldr	r1, [r7, #4]
 800a644:	2006      	movs	r0, #6
 800a646:	f001 fdd5 	bl	800c1f4 <memp_free>
  }
}
 800a64a:	bf00      	nop
 800a64c:	3708      	adds	r7, #8
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
	...

0800a654 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d108      	bne.n	800a678 <netbuf_data+0x24>
 800a666:	4b1b      	ldr	r3, [pc, #108]	; (800a6d4 <netbuf_data+0x80>)
 800a668:	22c6      	movs	r2, #198	; 0xc6
 800a66a:	491b      	ldr	r1, [pc, #108]	; (800a6d8 <netbuf_data+0x84>)
 800a66c:	481b      	ldr	r0, [pc, #108]	; (800a6dc <netbuf_data+0x88>)
 800a66e:	f00e fba3 	bl	8018db8 <iprintf>
 800a672:	f06f 030f 	mvn.w	r3, #15
 800a676:	e029      	b.n	800a6cc <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d108      	bne.n	800a690 <netbuf_data+0x3c>
 800a67e:	4b15      	ldr	r3, [pc, #84]	; (800a6d4 <netbuf_data+0x80>)
 800a680:	22c7      	movs	r2, #199	; 0xc7
 800a682:	4917      	ldr	r1, [pc, #92]	; (800a6e0 <netbuf_data+0x8c>)
 800a684:	4815      	ldr	r0, [pc, #84]	; (800a6dc <netbuf_data+0x88>)
 800a686:	f00e fb97 	bl	8018db8 <iprintf>
 800a68a:	f06f 030f 	mvn.w	r3, #15
 800a68e:	e01d      	b.n	800a6cc <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d108      	bne.n	800a6a8 <netbuf_data+0x54>
 800a696:	4b0f      	ldr	r3, [pc, #60]	; (800a6d4 <netbuf_data+0x80>)
 800a698:	22c8      	movs	r2, #200	; 0xc8
 800a69a:	4912      	ldr	r1, [pc, #72]	; (800a6e4 <netbuf_data+0x90>)
 800a69c:	480f      	ldr	r0, [pc, #60]	; (800a6dc <netbuf_data+0x88>)
 800a69e:	f00e fb8b 	bl	8018db8 <iprintf>
 800a6a2:	f06f 030f 	mvn.w	r3, #15
 800a6a6:	e011      	b.n	800a6cc <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d102      	bne.n	800a6b6 <netbuf_data+0x62>
    return ERR_BUF;
 800a6b0:	f06f 0301 	mvn.w	r3, #1
 800a6b4:	e00a      	b.n	800a6cc <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	685a      	ldr	r2, [r3, #4]
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	895a      	ldrh	r2, [r3, #10]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800a6ca:	2300      	movs	r3, #0
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3710      	adds	r7, #16
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	0801abe0 	.word	0x0801abe0
 800a6d8:	0801ace8 	.word	0x0801ace8
 800a6dc:	0801ac30 	.word	0x0801ac30
 800a6e0:	0801ad04 	.word	0x0801ad04
 800a6e4:	0801ad24 	.word	0x0801ad24

0800a6e8 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d108      	bne.n	800a708 <netbuf_next+0x20>
 800a6f6:	4b11      	ldr	r3, [pc, #68]	; (800a73c <netbuf_next+0x54>)
 800a6f8:	22e0      	movs	r2, #224	; 0xe0
 800a6fa:	4911      	ldr	r1, [pc, #68]	; (800a740 <netbuf_next+0x58>)
 800a6fc:	4811      	ldr	r0, [pc, #68]	; (800a744 <netbuf_next+0x5c>)
 800a6fe:	f00e fb5b 	bl	8018db8 <iprintf>
 800a702:	f04f 33ff 	mov.w	r3, #4294967295
 800a706:	e014      	b.n	800a732 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d102      	bne.n	800a718 <netbuf_next+0x30>
    return -1;
 800a712:	f04f 33ff 	mov.w	r3, #4294967295
 800a716:	e00c      	b.n	800a732 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d101      	bne.n	800a730 <netbuf_next+0x48>
    return 1;
 800a72c:	2301      	movs	r3, #1
 800a72e:	e000      	b.n	800a732 <netbuf_next+0x4a>
  }
  return 0;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3708      	adds	r7, #8
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	0801abe0 	.word	0x0801abe0
 800a740:	0801ad40 	.word	0x0801ad40
 800a744:	0801ac30 	.word	0x0801ac30

0800a748 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a752:	f009 f9b9 	bl	8013ac8 <sys_timeouts_sleeptime>
 800a756:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a75e:	d10b      	bne.n	800a778 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a760:	4813      	ldr	r0, [pc, #76]	; (800a7b0 <tcpip_timeouts_mbox_fetch+0x68>)
 800a762:	f00e f9bc 	bl	8018ade <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a766:	2200      	movs	r2, #0
 800a768:	6839      	ldr	r1, [r7, #0]
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f00e f874 	bl	8018858 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a770:	480f      	ldr	r0, [pc, #60]	; (800a7b0 <tcpip_timeouts_mbox_fetch+0x68>)
 800a772:	f00e f9a5 	bl	8018ac0 <sys_mutex_lock>
    return;
 800a776:	e018      	b.n	800a7aa <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d102      	bne.n	800a784 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a77e:	f009 f969 	bl	8013a54 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a782:	e7e6      	b.n	800a752 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a784:	480a      	ldr	r0, [pc, #40]	; (800a7b0 <tcpip_timeouts_mbox_fetch+0x68>)
 800a786:	f00e f9aa 	bl	8018ade <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a78a:	68fa      	ldr	r2, [r7, #12]
 800a78c:	6839      	ldr	r1, [r7, #0]
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f00e f862 	bl	8018858 <sys_arch_mbox_fetch>
 800a794:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a796:	4806      	ldr	r0, [pc, #24]	; (800a7b0 <tcpip_timeouts_mbox_fetch+0x68>)
 800a798:	f00e f992 	bl	8018ac0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a2:	d102      	bne.n	800a7aa <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a7a4:	f009 f956 	bl	8013a54 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a7a8:	e7d3      	b.n	800a752 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a7aa:	3710      	adds	r7, #16
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	2000d3b8 	.word	0x2000d3b8

0800a7b4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a7bc:	4810      	ldr	r0, [pc, #64]	; (800a800 <tcpip_thread+0x4c>)
 800a7be:	f00e f97f 	bl	8018ac0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a7c2:	4b10      	ldr	r3, [pc, #64]	; (800a804 <tcpip_thread+0x50>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d005      	beq.n	800a7d6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a7ca:	4b0e      	ldr	r3, [pc, #56]	; (800a804 <tcpip_thread+0x50>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a0e      	ldr	r2, [pc, #56]	; (800a808 <tcpip_thread+0x54>)
 800a7d0:	6812      	ldr	r2, [r2, #0]
 800a7d2:	4610      	mov	r0, r2
 800a7d4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a7d6:	f107 030c 	add.w	r3, r7, #12
 800a7da:	4619      	mov	r1, r3
 800a7dc:	480b      	ldr	r0, [pc, #44]	; (800a80c <tcpip_thread+0x58>)
 800a7de:	f7ff ffb3 	bl	800a748 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d106      	bne.n	800a7f6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a7e8:	4b09      	ldr	r3, [pc, #36]	; (800a810 <tcpip_thread+0x5c>)
 800a7ea:	2291      	movs	r2, #145	; 0x91
 800a7ec:	4909      	ldr	r1, [pc, #36]	; (800a814 <tcpip_thread+0x60>)
 800a7ee:	480a      	ldr	r0, [pc, #40]	; (800a818 <tcpip_thread+0x64>)
 800a7f0:	f00e fae2 	bl	8018db8 <iprintf>
      continue;
 800a7f4:	e003      	b.n	800a7fe <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f000 f80f 	bl	800a81c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a7fe:	e7ea      	b.n	800a7d6 <tcpip_thread+0x22>
 800a800:	2000d3b8 	.word	0x2000d3b8
 800a804:	2000d3ac 	.word	0x2000d3ac
 800a808:	2000d3b0 	.word	0x2000d3b0
 800a80c:	2000d3b4 	.word	0x2000d3b4
 800a810:	0801ad78 	.word	0x0801ad78
 800a814:	0801ada8 	.word	0x0801ada8
 800a818:	0801adc8 	.word	0x0801adc8

0800a81c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	2b02      	cmp	r3, #2
 800a82a:	d026      	beq.n	800a87a <tcpip_thread_handle_msg+0x5e>
 800a82c:	2b02      	cmp	r3, #2
 800a82e:	dc2b      	bgt.n	800a888 <tcpip_thread_handle_msg+0x6c>
 800a830:	2b00      	cmp	r3, #0
 800a832:	d002      	beq.n	800a83a <tcpip_thread_handle_msg+0x1e>
 800a834:	2b01      	cmp	r3, #1
 800a836:	d015      	beq.n	800a864 <tcpip_thread_handle_msg+0x48>
 800a838:	e026      	b.n	800a888 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	6850      	ldr	r0, [r2, #4]
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	6892      	ldr	r2, [r2, #8]
 800a846:	4611      	mov	r1, r2
 800a848:	4798      	blx	r3
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d004      	beq.n	800a85a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	4618      	mov	r0, r3
 800a856:	f002 fb7d 	bl	800cf54 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a85a:	6879      	ldr	r1, [r7, #4]
 800a85c:	2009      	movs	r0, #9
 800a85e:	f001 fcc9 	bl	800c1f4 <memp_free>
      break;
 800a862:	e018      	b.n	800a896 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	6892      	ldr	r2, [r2, #8]
 800a86c:	4610      	mov	r0, r2
 800a86e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a870:	6879      	ldr	r1, [r7, #4]
 800a872:	2008      	movs	r0, #8
 800a874:	f001 fcbe 	bl	800c1f4 <memp_free>
      break;
 800a878:	e00d      	b.n	800a896 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	6892      	ldr	r2, [r2, #8]
 800a882:	4610      	mov	r0, r2
 800a884:	4798      	blx	r3
      break;
 800a886:	e006      	b.n	800a896 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a888:	4b05      	ldr	r3, [pc, #20]	; (800a8a0 <tcpip_thread_handle_msg+0x84>)
 800a88a:	22cf      	movs	r2, #207	; 0xcf
 800a88c:	4905      	ldr	r1, [pc, #20]	; (800a8a4 <tcpip_thread_handle_msg+0x88>)
 800a88e:	4806      	ldr	r0, [pc, #24]	; (800a8a8 <tcpip_thread_handle_msg+0x8c>)
 800a890:	f00e fa92 	bl	8018db8 <iprintf>
      break;
 800a894:	bf00      	nop
  }
}
 800a896:	bf00      	nop
 800a898:	3708      	adds	r7, #8
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	0801ad78 	.word	0x0801ad78
 800a8a4:	0801ada8 	.word	0x0801ada8
 800a8a8:	0801adc8 	.word	0x0801adc8

0800a8ac <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b086      	sub	sp, #24
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a8b8:	481a      	ldr	r0, [pc, #104]	; (800a924 <tcpip_inpkt+0x78>)
 800a8ba:	f00e f828 	bl	801890e <sys_mbox_valid>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d105      	bne.n	800a8d0 <tcpip_inpkt+0x24>
 800a8c4:	4b18      	ldr	r3, [pc, #96]	; (800a928 <tcpip_inpkt+0x7c>)
 800a8c6:	22fc      	movs	r2, #252	; 0xfc
 800a8c8:	4918      	ldr	r1, [pc, #96]	; (800a92c <tcpip_inpkt+0x80>)
 800a8ca:	4819      	ldr	r0, [pc, #100]	; (800a930 <tcpip_inpkt+0x84>)
 800a8cc:	f00e fa74 	bl	8018db8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a8d0:	2009      	movs	r0, #9
 800a8d2:	f001 fc19 	bl	800c108 <memp_malloc>
 800a8d6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d102      	bne.n	800a8e4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a8de:	f04f 33ff 	mov.w	r3, #4294967295
 800a8e2:	e01a      	b.n	800a91a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	68fa      	ldr	r2, [r7, #12]
 800a8ee:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	68ba      	ldr	r2, [r7, #8]
 800a8f4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a8fc:	6979      	ldr	r1, [r7, #20]
 800a8fe:	4809      	ldr	r0, [pc, #36]	; (800a924 <tcpip_inpkt+0x78>)
 800a900:	f00d ff90 	bl	8018824 <sys_mbox_trypost>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d006      	beq.n	800a918 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a90a:	6979      	ldr	r1, [r7, #20]
 800a90c:	2009      	movs	r0, #9
 800a90e:	f001 fc71 	bl	800c1f4 <memp_free>
    return ERR_MEM;
 800a912:	f04f 33ff 	mov.w	r3, #4294967295
 800a916:	e000      	b.n	800a91a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a918:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3718      	adds	r7, #24
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	2000d3b4 	.word	0x2000d3b4
 800a928:	0801ad78 	.word	0x0801ad78
 800a92c:	0801adf0 	.word	0x0801adf0
 800a930:	0801adc8 	.word	0x0801adc8

0800a934 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a944:	f003 0318 	and.w	r3, r3, #24
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d006      	beq.n	800a95a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a94c:	4a08      	ldr	r2, [pc, #32]	; (800a970 <tcpip_input+0x3c>)
 800a94e:	6839      	ldr	r1, [r7, #0]
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f7ff ffab 	bl	800a8ac <tcpip_inpkt>
 800a956:	4603      	mov	r3, r0
 800a958:	e005      	b.n	800a966 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a95a:	4a06      	ldr	r2, [pc, #24]	; (800a974 <tcpip_input+0x40>)
 800a95c:	6839      	ldr	r1, [r7, #0]
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f7ff ffa4 	bl	800a8ac <tcpip_inpkt>
 800a964:	4603      	mov	r3, r0
}
 800a966:	4618      	mov	r0, r3
 800a968:	3708      	adds	r7, #8
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	08018611 	.word	0x08018611
 800a974:	080174dd 	.word	0x080174dd

0800a978 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a982:	4819      	ldr	r0, [pc, #100]	; (800a9e8 <tcpip_try_callback+0x70>)
 800a984:	f00d ffc3 	bl	801890e <sys_mbox_valid>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d106      	bne.n	800a99c <tcpip_try_callback+0x24>
 800a98e:	4b17      	ldr	r3, [pc, #92]	; (800a9ec <tcpip_try_callback+0x74>)
 800a990:	f240 125d 	movw	r2, #349	; 0x15d
 800a994:	4916      	ldr	r1, [pc, #88]	; (800a9f0 <tcpip_try_callback+0x78>)
 800a996:	4817      	ldr	r0, [pc, #92]	; (800a9f4 <tcpip_try_callback+0x7c>)
 800a998:	f00e fa0e 	bl	8018db8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a99c:	2008      	movs	r0, #8
 800a99e:	f001 fbb3 	bl	800c108 <memp_malloc>
 800a9a2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d102      	bne.n	800a9b0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a9aa:	f04f 33ff 	mov.w	r3, #4294967295
 800a9ae:	e017      	b.n	800a9e0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	683a      	ldr	r2, [r7, #0]
 800a9c0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a9c2:	68f9      	ldr	r1, [r7, #12]
 800a9c4:	4808      	ldr	r0, [pc, #32]	; (800a9e8 <tcpip_try_callback+0x70>)
 800a9c6:	f00d ff2d 	bl	8018824 <sys_mbox_trypost>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d006      	beq.n	800a9de <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a9d0:	68f9      	ldr	r1, [r7, #12]
 800a9d2:	2008      	movs	r0, #8
 800a9d4:	f001 fc0e 	bl	800c1f4 <memp_free>
    return ERR_MEM;
 800a9d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a9dc:	e000      	b.n	800a9e0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a9de:	2300      	movs	r3, #0
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3710      	adds	r7, #16
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	2000d3b4 	.word	0x2000d3b4
 800a9ec:	0801ad78 	.word	0x0801ad78
 800a9f0:	0801adf0 	.word	0x0801adf0
 800a9f4:	0801adc8 	.word	0x0801adc8

0800a9f8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800aa04:	4806      	ldr	r0, [pc, #24]	; (800aa20 <tcpip_send_msg_wait_sem+0x28>)
 800aa06:	f00e f85b 	bl	8018ac0 <sys_mutex_lock>
  fn(apimsg);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	68b8      	ldr	r0, [r7, #8]
 800aa0e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800aa10:	4803      	ldr	r0, [pc, #12]	; (800aa20 <tcpip_send_msg_wait_sem+0x28>)
 800aa12:	f00e f864 	bl	8018ade <sys_mutex_unlock>
  return ERR_OK;
 800aa16:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3710      	adds	r7, #16
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}
 800aa20:	2000d3b8 	.word	0x2000d3b8

0800aa24 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b084      	sub	sp, #16
 800aa28:	af02      	add	r7, sp, #8
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800aa2e:	f000 fec1 	bl	800b7b4 <lwip_init>

  tcpip_init_done = initfunc;
 800aa32:	4a17      	ldr	r2, [pc, #92]	; (800aa90 <tcpip_init+0x6c>)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800aa38:	4a16      	ldr	r2, [pc, #88]	; (800aa94 <tcpip_init+0x70>)
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800aa3e:	2106      	movs	r1, #6
 800aa40:	4815      	ldr	r0, [pc, #84]	; (800aa98 <tcpip_init+0x74>)
 800aa42:	f00d febb 	bl	80187bc <sys_mbox_new>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d006      	beq.n	800aa5a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800aa4c:	4b13      	ldr	r3, [pc, #76]	; (800aa9c <tcpip_init+0x78>)
 800aa4e:	f240 2261 	movw	r2, #609	; 0x261
 800aa52:	4913      	ldr	r1, [pc, #76]	; (800aaa0 <tcpip_init+0x7c>)
 800aa54:	4813      	ldr	r0, [pc, #76]	; (800aaa4 <tcpip_init+0x80>)
 800aa56:	f00e f9af 	bl	8018db8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800aa5a:	4813      	ldr	r0, [pc, #76]	; (800aaa8 <tcpip_init+0x84>)
 800aa5c:	f00e f814 	bl	8018a88 <sys_mutex_new>
 800aa60:	4603      	mov	r3, r0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d006      	beq.n	800aa74 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800aa66:	4b0d      	ldr	r3, [pc, #52]	; (800aa9c <tcpip_init+0x78>)
 800aa68:	f240 2265 	movw	r2, #613	; 0x265
 800aa6c:	490f      	ldr	r1, [pc, #60]	; (800aaac <tcpip_init+0x88>)
 800aa6e:	480d      	ldr	r0, [pc, #52]	; (800aaa4 <tcpip_init+0x80>)
 800aa70:	f00e f9a2 	bl	8018db8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800aa74:	2300      	movs	r3, #0
 800aa76:	9300      	str	r3, [sp, #0]
 800aa78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	490c      	ldr	r1, [pc, #48]	; (800aab0 <tcpip_init+0x8c>)
 800aa80:	480c      	ldr	r0, [pc, #48]	; (800aab4 <tcpip_init+0x90>)
 800aa82:	f00e f839 	bl	8018af8 <sys_thread_new>
}
 800aa86:	bf00      	nop
 800aa88:	3708      	adds	r7, #8
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	2000d3ac 	.word	0x2000d3ac
 800aa94:	2000d3b0 	.word	0x2000d3b0
 800aa98:	2000d3b4 	.word	0x2000d3b4
 800aa9c:	0801ad78 	.word	0x0801ad78
 800aaa0:	0801ae00 	.word	0x0801ae00
 800aaa4:	0801adc8 	.word	0x0801adc8
 800aaa8:	2000d3b8 	.word	0x2000d3b8
 800aaac:	0801ae24 	.word	0x0801ae24
 800aab0:	0800a7b5 	.word	0x0800a7b5
 800aab4:	0801ae48 	.word	0x0801ae48

0800aab8 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d002      	beq.n	800aace <fs_open+0x16>
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d102      	bne.n	800aad4 <fs_open+0x1c>
    return ERR_ARG;
 800aace:	f06f 030f 	mvn.w	r3, #15
 800aad2:	e028      	b.n	800ab26 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800aad4:	4b16      	ldr	r3, [pc, #88]	; (800ab30 <fs_open+0x78>)
 800aad6:	60fb      	str	r3, [r7, #12]
 800aad8:	e020      	b.n	800ab1c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	4619      	mov	r1, r3
 800aae0:	6838      	ldr	r0, [r7, #0]
 800aae2:	f7f5 fb85 	bl	80001f0 <strcmp>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d114      	bne.n	800ab16 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	689a      	ldr	r2, [r3, #8]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	68da      	ldr	r2, [r3, #12]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	68da      	ldr	r2, [r3, #12]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	7c1a      	ldrb	r2, [r3, #16]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800ab12:	2300      	movs	r3, #0
 800ab14:	e007      	b.n	800ab26 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	60fb      	str	r3, [r7, #12]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d1db      	bne.n	800aada <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800ab22:	f06f 0305 	mvn.w	r3, #5
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3710      	adds	r7, #16
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	bf00      	nop
 800ab30:	08027ee4 	.word	0x08027ee4

0800ab34 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800ab3c:	bf00      	nop
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	685a      	ldr	r2, [r3, #4]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	1ad3      	subs	r3, r2, r3
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	370c      	adds	r7, #12
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr

0800ab66 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b082      	sub	sp, #8
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800ab6e:	222c      	movs	r2, #44	; 0x2c
 800ab70:	2100      	movs	r1, #0
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f00e f9bf 	bl	8018ef6 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800ab78:	bf00      	nop
 800ab7a:	3708      	adds	r7, #8
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800ab86:	202c      	movs	r0, #44	; 0x2c
 800ab88:	f001 f91a 	bl	800bdc0 <mem_malloc>
 800ab8c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d002      	beq.n	800ab9a <http_state_alloc+0x1a>
    http_state_init(ret);
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f7ff ffe6 	bl	800ab66 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800ab9a:	687b      	ldr	r3, [r7, #4]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3708      	adds	r7, #8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	695b      	ldr	r3, [r3, #20]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d007      	beq.n	800abc4 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	695b      	ldr	r3, [r3, #20]
 800abb8:	4618      	mov	r0, r3
 800abba:	f7ff ffbb 	bl	800ab34 <fs_close>
    hs->handle = NULL;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6a1b      	ldr	r3, [r3, #32]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d007      	beq.n	800abdc <http_state_eof+0x38>
    pbuf_free(hs->req);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6a1b      	ldr	r3, [r3, #32]
 800abd0:	4618      	mov	r0, r3
 800abd2:	f002 f9bf 	bl	800cf54 <pbuf_free>
    hs->req = NULL;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800abdc:	bf00      	nop
 800abde:	3708      	adds	r7, #8
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d005      	beq.n	800abfe <http_state_free+0x1a>
    http_state_eof(hs);
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f7ff ffd6 	bl	800aba4 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 ff47 	bl	800ba8c <mem_free>
  }
}
 800abfe:	bf00      	nop
 800ac00:	3708      	adds	r7, #8
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
	...

0800ac08 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b086      	sub	sp, #24
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	607a      	str	r2, [r7, #4]
 800ac14:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d106      	bne.n	800ac2a <http_write+0x22>
 800ac1c:	4b2c      	ldr	r3, [pc, #176]	; (800acd0 <http_write+0xc8>)
 800ac1e:	f240 2219 	movw	r2, #537	; 0x219
 800ac22:	492c      	ldr	r1, [pc, #176]	; (800acd4 <http_write+0xcc>)
 800ac24:	482c      	ldr	r0, [pc, #176]	; (800acd8 <http_write+0xd0>)
 800ac26:	f00e f8c7 	bl	8018db8 <iprintf>
  len = *length;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	881b      	ldrh	r3, [r3, #0]
 800ac2e:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800ac30:	8afb      	ldrh	r3, [r7, #22]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d101      	bne.n	800ac3a <http_write+0x32>
    return ERR_OK;
 800ac36:	2300      	movs	r3, #0
 800ac38:	e045      	b.n	800acc6 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ac40:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800ac42:	8aba      	ldrh	r2, [r7, #20]
 800ac44:	8afb      	ldrh	r3, [r7, #22]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d201      	bcs.n	800ac4e <http_write+0x46>
    len = max_len;
 800ac4a:	8abb      	ldrh	r3, [r7, #20]
 800ac4c:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac52:	005b      	lsls	r3, r3, #1
 800ac54:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800ac56:	8afa      	ldrh	r2, [r7, #22]
 800ac58:	8abb      	ldrh	r3, [r7, #20]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d901      	bls.n	800ac62 <http_write+0x5a>
    len = max_len;
 800ac5e:	8abb      	ldrh	r3, [r7, #20]
 800ac60:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800ac62:	78fb      	ldrb	r3, [r7, #3]
 800ac64:	8afa      	ldrh	r2, [r7, #22]
 800ac66:	68b9      	ldr	r1, [r7, #8]
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f007 f88b 	bl	8011d84 <tcp_write>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800ac72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac7a:	d10f      	bne.n	800ac9c <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d004      	beq.n	800ac90 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800ac8c:	2b08      	cmp	r3, #8
 800ac8e:	d902      	bls.n	800ac96 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800ac90:	2301      	movs	r3, #1
 800ac92:	82fb      	strh	r3, [r7, #22]
 800ac94:	e002      	b.n	800ac9c <http_write+0x94>
      } else {
        len /= 2;
 800ac96:	8afb      	ldrh	r3, [r7, #22]
 800ac98:	085b      	lsrs	r3, r3, #1
 800ac9a:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800ac9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aca4:	d102      	bne.n	800acac <http_write+0xa4>
 800aca6:	8afb      	ldrh	r3, [r7, #22]
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d8da      	bhi.n	800ac62 <http_write+0x5a>

  if (err == ERR_OK) {
 800acac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d103      	bne.n	800acbc <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	8afa      	ldrh	r2, [r7, #22]
 800acb8:	801a      	strh	r2, [r3, #0]
 800acba:	e002      	b.n	800acc2 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2200      	movs	r2, #0
 800acc0:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800acc2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3718      	adds	r7, #24
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	0801ae98 	.word	0x0801ae98
 800acd4:	0801aed0 	.word	0x0801aed0
 800acd8:	0801aee0 	.word	0x0801aee0

0800acdc <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b086      	sub	sp, #24
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	4613      	mov	r3, r2
 800ace8:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800acea:	2100      	movs	r1, #0
 800acec:	68f8      	ldr	r0, [r7, #12]
 800acee:	f004 f907 	bl	800ef00 <tcp_arg>
  altcp_recv(pcb, NULL);
 800acf2:	2100      	movs	r1, #0
 800acf4:	68f8      	ldr	r0, [r7, #12]
 800acf6:	f004 f915 	bl	800ef24 <tcp_recv>
  altcp_err(pcb, NULL);
 800acfa:	2100      	movs	r1, #0
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	f004 f955 	bl	800efac <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800ad02:	2200      	movs	r2, #0
 800ad04:	2100      	movs	r1, #0
 800ad06:	68f8      	ldr	r0, [r7, #12]
 800ad08:	f004 f98a 	bl	800f020 <tcp_poll>
  altcp_sent(pcb, NULL);
 800ad0c:	2100      	movs	r1, #0
 800ad0e:	68f8      	ldr	r0, [r7, #12]
 800ad10:	f004 f92a 	bl	800ef68 <tcp_sent>
  if (hs != NULL) {
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d002      	beq.n	800ad20 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800ad1a:	68b8      	ldr	r0, [r7, #8]
 800ad1c:	f7ff ff62 	bl	800abe4 <http_state_free>
  }

  if (abort_conn) {
 800ad20:	79fb      	ldrb	r3, [r7, #7]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d004      	beq.n	800ad30 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800ad26:	68f8      	ldr	r0, [r7, #12]
 800ad28:	f002 ff14 	bl	800db54 <tcp_abort>
    return ERR_OK;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	e00f      	b.n	800ad50 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800ad30:	68f8      	ldr	r0, [r7, #12]
 800ad32:	f002 fdc9 	bl	800d8c8 <tcp_close>
 800ad36:	4603      	mov	r3, r0
 800ad38:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800ad3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d004      	beq.n	800ad4c <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800ad42:	2204      	movs	r2, #4
 800ad44:	4904      	ldr	r1, [pc, #16]	; (800ad58 <http_close_or_abort_conn+0x7c>)
 800ad46:	68f8      	ldr	r0, [r7, #12]
 800ad48:	f004 f96a 	bl	800f020 <tcp_poll>
  }
  return err;
 800ad4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3718      	adds	r7, #24
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	0800b41f 	.word	0x0800b41f

0800ad5c <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800ad66:	2200      	movs	r2, #0
 800ad68:	6839      	ldr	r1, [r7, #0]
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f7ff ffb6 	bl	800acdc <http_close_or_abort_conn>
 800ad70:	4603      	mov	r3, r0
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3708      	adds	r7, #8
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}

0800ad7a <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ad7a:	b580      	push	{r7, lr}
 800ad7c:	b082      	sub	sp, #8
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
 800ad82:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800ad84:	6839      	ldr	r1, [r7, #0]
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f7ff ffe8 	bl	800ad5c <http_close_conn>
  }
}
 800ad8c:	bf00      	nop
 800ad8e:	3708      	adds	r7, #8
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	695b      	ldr	r3, [r3, #20]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d105      	bne.n	800adb2 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800ada6:	6839      	ldr	r1, [r7, #0]
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f7ff ffe6 	bl	800ad7a <http_eof>
    return 0;
 800adae:	2300      	movs	r3, #0
 800adb0:	e016      	b.n	800ade0 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	695b      	ldr	r3, [r3, #20]
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7ff fec6 	bl	800ab48 <fs_bytes_left>
 800adbc:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	dc05      	bgt.n	800add0 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800adc4:	6839      	ldr	r1, [r7, #0]
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f7ff ffd7 	bl	800ad7a <http_eof>
    return 0;
 800adcc:	2300      	movs	r3, #0
 800adce:	e007      	b.n	800ade0 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800add0:	4b05      	ldr	r3, [pc, #20]	; (800ade8 <http_check_eof+0x54>)
 800add2:	f240 429d 	movw	r2, #1181	; 0x49d
 800add6:	4905      	ldr	r1, [pc, #20]	; (800adec <http_check_eof+0x58>)
 800add8:	4805      	ldr	r0, [pc, #20]	; (800adf0 <http_check_eof+0x5c>)
 800adda:	f00d ffed 	bl	8018db8 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800adde:	2301      	movs	r3, #1
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3710      	adds	r7, #16
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}
 800ade8:	0801ae98 	.word	0x0801ae98
 800adec:	0801af08 	.word	0x0801af08
 800adf0:	0801aee0 	.word	0x0801aee0

0800adf4 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800adfe:	2300      	movs	r3, #0
 800ae00:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae06:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d803      	bhi.n	800ae16 <http_send_data_nonssi+0x22>
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	e001      	b.n	800ae1a <http_send_data_nonssi+0x26>
 800ae16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae1a:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	6999      	ldr	r1, [r3, #24]
 800ae20:	f107 020c 	add.w	r2, r7, #12
 800ae24:	2300      	movs	r3, #0
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f7ff feee 	bl	800ac08 <http_write>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800ae30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d10d      	bne.n	800ae54 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	699b      	ldr	r3, [r3, #24]
 800ae40:	89ba      	ldrh	r2, [r7, #12]
 800ae42:	441a      	add	r2, r3
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4c:	89ba      	ldrh	r2, [r7, #12]
 800ae4e:	1a9a      	subs	r2, r3, r2
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800ae54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3710      	adds	r7, #16
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b084      	sub	sp, #16
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
 800ae66:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d101      	bne.n	800ae76 <http_send+0x18>
    return 0;
 800ae72:	2300      	movs	r3, #0
 800ae74:	e025      	b.n	800aec2 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d108      	bne.n	800ae90 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800ae7e:	6839      	ldr	r1, [r7, #0]
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f7ff ff87 	bl	800ad94 <http_check_eof>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d101      	bne.n	800ae90 <http_send+0x32>
      return 0;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	e018      	b.n	800aec2 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800ae90:	6839      	ldr	r1, [r7, #0]
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f7ff ffae 	bl	800adf4 <http_send_data_nonssi>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d10d      	bne.n	800aec0 <http_send+0x62>
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	695b      	ldr	r3, [r3, #20]
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7ff fe4d 	bl	800ab48 <fs_bytes_left>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	dc05      	bgt.n	800aec0 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800aeb4:	6839      	ldr	r1, [r7, #0]
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f7ff ff5f 	bl	800ad7a <http_eof>
    return 0;
 800aebc:	2300      	movs	r3, #0
 800aebe:	e000      	b.n	800aec2 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800aec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3710      	adds	r7, #16
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
	...

0800aecc <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	4a1c      	ldr	r2, [pc, #112]	; (800af4c <http_get_404_file+0x80>)
 800aeda:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4619      	mov	r1, r3
 800aee4:	4610      	mov	r0, r2
 800aee6:	f7ff fde7 	bl	800aab8 <fs_open>
 800aeea:	4603      	mov	r3, r0
 800aeec:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800aeee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d024      	beq.n	800af40 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	4a15      	ldr	r2, [pc, #84]	; (800af50 <http_get_404_file+0x84>)
 800aefa:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4619      	mov	r1, r3
 800af04:	4610      	mov	r0, r2
 800af06:	f7ff fdd7 	bl	800aab8 <fs_open>
 800af0a:	4603      	mov	r3, r0
 800af0c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800af0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d014      	beq.n	800af40 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	4a0e      	ldr	r2, [pc, #56]	; (800af54 <http_get_404_file+0x88>)
 800af1a:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4619      	mov	r1, r3
 800af24:	4610      	mov	r0, r2
 800af26:	f7ff fdc7 	bl	800aab8 <fs_open>
 800af2a:	4603      	mov	r3, r0
 800af2c:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800af2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d004      	beq.n	800af40 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	2200      	movs	r2, #0
 800af3a:	601a      	str	r2, [r3, #0]
        return NULL;
 800af3c:	2300      	movs	r3, #0
 800af3e:	e000      	b.n	800af42 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800af40:	687b      	ldr	r3, [r7, #4]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	0801af40 	.word	0x0801af40
 800af50:	0801af4c 	.word	0x0801af4c
 800af54:	0801af58 	.word	0x0801af58

0800af58 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b08e      	sub	sp, #56	; 0x38
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800af68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d106      	bne.n	800af7c <http_parse_request+0x24>
 800af6e:	4b65      	ldr	r3, [pc, #404]	; (800b104 <http_parse_request+0x1ac>)
 800af70:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800af74:	4964      	ldr	r1, [pc, #400]	; (800b108 <http_parse_request+0x1b0>)
 800af76:	4865      	ldr	r0, [pc, #404]	; (800b10c <http_parse_request+0x1b4>)
 800af78:	f00d ff1e 	bl	8018db8 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d106      	bne.n	800af90 <http_parse_request+0x38>
 800af82:	4b60      	ldr	r3, [pc, #384]	; (800b104 <http_parse_request+0x1ac>)
 800af84:	f240 72af 	movw	r2, #1967	; 0x7af
 800af88:	4961      	ldr	r1, [pc, #388]	; (800b110 <http_parse_request+0x1b8>)
 800af8a:	4860      	ldr	r0, [pc, #384]	; (800b10c <http_parse_request+0x1b4>)
 800af8c:	f00d ff14 	bl	8018db8 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	695b      	ldr	r3, [r3, #20]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d103      	bne.n	800afa0 <http_parse_request+0x48>
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	699b      	ldr	r3, [r3, #24]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d002      	beq.n	800afa6 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800afa0:	f06f 0307 	mvn.w	r3, #7
 800afa4:	e0a9      	b.n	800b0fa <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	6a1b      	ldr	r3, [r3, #32]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d103      	bne.n	800afb6 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afb2:	621a      	str	r2, [r3, #32]
 800afb4:	e005      	b.n	800afc2 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	6a1b      	ldr	r3, [r3, #32]
 800afba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800afbc:	4618      	mov	r0, r3
 800afbe:	f002 f897 	bl	800d0f0 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800afc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afc4:	f002 f86c 	bl	800d0a0 <pbuf_ref>

  if (hs->req->next != NULL) {
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	6a1b      	ldr	r3, [r3, #32]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d012      	beq.n	800aff8 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	6a1b      	ldr	r3, [r3, #32]
 800afd6:	891b      	ldrh	r3, [r3, #8]
 800afd8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800afdc:	4293      	cmp	r3, r2
 800afde:	bf28      	it	cs
 800afe0:	4613      	movcs	r3, r2
 800afe2:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	6a18      	ldr	r0, [r3, #32]
 800afe8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800afea:	2300      	movs	r3, #0
 800afec:	4949      	ldr	r1, [pc, #292]	; (800b114 <http_parse_request+0x1bc>)
 800afee:	f002 f9b7 	bl	800d360 <pbuf_copy_partial>
    data = httpd_req_buf;
 800aff2:	4b48      	ldr	r3, [pc, #288]	; (800b114 <http_parse_request+0x1bc>)
 800aff4:	637b      	str	r3, [r7, #52]	; 0x34
 800aff6:	e005      	b.n	800b004 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800aff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800affe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b000:	895b      	ldrh	r3, [r3, #10]
 800b002:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800b004:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b006:	2b06      	cmp	r3, #6
 800b008:	d962      	bls.n	800b0d0 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800b00a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b00c:	461a      	mov	r2, r3
 800b00e:	4942      	ldr	r1, [pc, #264]	; (800b118 <http_parse_request+0x1c0>)
 800b010:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b012:	f000 fb99 	bl	800b748 <lwip_strnstr>
 800b016:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800b018:	6a3b      	ldr	r3, [r7, #32]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d058      	beq.n	800b0d0 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800b01e:	2300      	movs	r3, #0
 800b020:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800b022:	2204      	movs	r2, #4
 800b024:	493d      	ldr	r1, [pc, #244]	; (800b11c <http_parse_request+0x1c4>)
 800b026:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b028:	f00d ff95 	bl	8018f56 <strncmp>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d116      	bne.n	800b060 <http_parse_request+0x108>
        sp1 = data + 3;
 800b032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b034:	3303      	adds	r3, #3
 800b036:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	1c5a      	adds	r2, r3, #1
 800b03c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b03e:	1ad3      	subs	r3, r2, r3
 800b040:	b29b      	uxth	r3, r3
 800b042:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800b044:	1ad3      	subs	r3, r2, r3
 800b046:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800b048:	69fb      	ldr	r3, [r7, #28]
 800b04a:	3301      	adds	r3, #1
 800b04c:	8b7a      	ldrh	r2, [r7, #26]
 800b04e:	4934      	ldr	r1, [pc, #208]	; (800b120 <http_parse_request+0x1c8>)
 800b050:	4618      	mov	r0, r3
 800b052:	f000 fb79 	bl	800b748 <lwip_strnstr>
 800b056:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800b058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d111      	bne.n	800b082 <http_parse_request+0x12a>
 800b05e:	e006      	b.n	800b06e <http_parse_request+0x116>
        data[4] = 0;
 800b060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b062:	3304      	adds	r3, #4
 800b064:	2200      	movs	r2, #0
 800b066:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800b068:	f06f 030f 	mvn.w	r3, #15
 800b06c:	e045      	b.n	800b0fa <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	3301      	adds	r3, #1
 800b072:	8b7a      	ldrh	r2, [r7, #26]
 800b074:	4928      	ldr	r1, [pc, #160]	; (800b118 <http_parse_request+0x1c0>)
 800b076:	4618      	mov	r0, r3
 800b078:	f000 fb66 	bl	800b748 <lwip_strnstr>
 800b07c:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800b07e:	2301      	movs	r3, #1
 800b080:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800b082:	69fb      	ldr	r3, [r7, #28]
 800b084:	3301      	adds	r3, #1
 800b086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b088:	1ad3      	subs	r3, r2, r3
 800b08a:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800b08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d01e      	beq.n	800b0d0 <http_parse_request+0x178>
 800b092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b094:	69fb      	ldr	r3, [r7, #28]
 800b096:	429a      	cmp	r2, r3
 800b098:	d91a      	bls.n	800b0d0 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800b09a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b09c:	461a      	mov	r2, r3
 800b09e:	4921      	ldr	r1, [pc, #132]	; (800b124 <http_parse_request+0x1cc>)
 800b0a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b0a2:	f000 fb51 	bl	800b748 <lwip_strnstr>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d011      	beq.n	800b0d0 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800b0ac:	69fb      	ldr	r3, [r7, #28]
 800b0ae:	3301      	adds	r3, #1
 800b0b0:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800b0b2:	69fb      	ldr	r3, [r7, #28]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800b0b8:	8b3b      	ldrh	r3, [r7, #24]
 800b0ba:	697a      	ldr	r2, [r7, #20]
 800b0bc:	4413      	add	r3, r2
 800b0be:	2200      	movs	r2, #0
 800b0c0:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800b0c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0c4:	6979      	ldr	r1, [r7, #20]
 800b0c6:	68b8      	ldr	r0, [r7, #8]
 800b0c8:	f000 f82e 	bl	800b128 <http_find_file>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	e014      	b.n	800b0fa <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	6a1b      	ldr	r3, [r3, #32]
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f001 ffcb 	bl	800d070 <pbuf_clen>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	6a1b      	ldr	r3, [r3, #32]
 800b0e2:	891b      	ldrh	r3, [r3, #8]
 800b0e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0e8:	d205      	bcs.n	800b0f6 <http_parse_request+0x19e>
 800b0ea:	8a7b      	ldrh	r3, [r7, #18]
 800b0ec:	2b05      	cmp	r3, #5
 800b0ee:	d802      	bhi.n	800b0f6 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800b0f0:	f06f 0304 	mvn.w	r3, #4
 800b0f4:	e001      	b.n	800b0fa <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800b0f6:	f06f 030f 	mvn.w	r3, #15
  }
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3738      	adds	r7, #56	; 0x38
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	0801ae98 	.word	0x0801ae98
 800b108:	0801af64 	.word	0x0801af64
 800b10c:	0801aee0 	.word	0x0801aee0
 800b110:	0801af70 	.word	0x0801af70
 800b114:	2000d3bc 	.word	0x2000d3bc
 800b118:	0801af7c 	.word	0x0801af7c
 800b11c:	0801af80 	.word	0x0801af80
 800b120:	0801af88 	.word	0x0801af88
 800b124:	0801af8c 	.word	0x0801af8c

0800b128 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b092      	sub	sp, #72	; 0x48
 800b12c:	af02      	add	r7, sp, #8
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800b134:	2300      	movs	r3, #0
 800b136:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800b138:	2300      	movs	r3, #0
 800b13a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800b13c:	2300      	movs	r3, #0
 800b13e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	4618      	mov	r0, r3
 800b146:	f7f5 f85d 	bl	8000204 <strlen>
 800b14a:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800b14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d06b      	beq.n	800b22a <http_find_file+0x102>
 800b152:	68ba      	ldr	r2, [r7, #8]
 800b154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b156:	3b01      	subs	r3, #1
 800b158:	4413      	add	r3, r2
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	2b2f      	cmp	r3, #47	; 0x2f
 800b15e:	d164      	bne.n	800b22a <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800b160:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800b162:	4a53      	ldr	r2, [pc, #332]	; (800b2b0 <http_find_file+0x188>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d102      	bne.n	800b16e <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800b168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16a:	2b01      	cmp	r3, #1
 800b16c:	d15d      	bne.n	800b22a <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800b16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b170:	3b01      	subs	r3, #1
 800b172:	2b3f      	cmp	r3, #63	; 0x3f
 800b174:	bf28      	it	cs
 800b176:	233f      	movcs	r3, #63	; 0x3f
 800b178:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800b17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d00a      	beq.n	800b196 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b184:	4619      	mov	r1, r3
 800b186:	484a      	ldr	r0, [pc, #296]	; (800b2b0 <http_find_file+0x188>)
 800b188:	f00e f816 	bl	80191b8 <memcpy>
      http_uri_buf[copy_len] = 0;
 800b18c:	4a48      	ldr	r2, [pc, #288]	; (800b2b0 <http_find_file+0x188>)
 800b18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b190:	4413      	add	r3, r2
 800b192:	2200      	movs	r2, #0
 800b194:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800b196:	2300      	movs	r3, #0
 800b198:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b19a:	e043      	b.n	800b224 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800b19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d028      	beq.n	800b1f4 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800b1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800b1a8:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800b1aa:	6a3b      	ldr	r3, [r7, #32]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d01e      	beq.n	800b1ee <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800b1b0:	4a40      	ldr	r2, [pc, #256]	; (800b2b4 <http_find_file+0x18c>)
 800b1b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f7f5 f823 	bl	8000204 <strlen>
 800b1be:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800b1c0:	69fa      	ldr	r2, [r7, #28]
 800b1c2:	6a3b      	ldr	r3, [r7, #32]
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	bf28      	it	cs
 800b1c8:	4613      	movcs	r3, r2
 800b1ca:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800b1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ce:	4a38      	ldr	r2, [pc, #224]	; (800b2b0 <http_find_file+0x188>)
 800b1d0:	1898      	adds	r0, r3, r2
 800b1d2:	4a38      	ldr	r2, [pc, #224]	; (800b2b4 <http_find_file+0x18c>)
 800b1d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1d6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b1da:	69ba      	ldr	r2, [r7, #24]
 800b1dc:	4619      	mov	r1, r3
 800b1de:	f00d ffeb 	bl	80191b8 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800b1e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1e4:	69bb      	ldr	r3, [r7, #24]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	4a31      	ldr	r2, [pc, #196]	; (800b2b0 <http_find_file+0x188>)
 800b1ea:	2100      	movs	r1, #0
 800b1ec:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800b1ee:	4b30      	ldr	r3, [pc, #192]	; (800b2b0 <http_find_file+0x188>)
 800b1f0:	633b      	str	r3, [r7, #48]	; 0x30
 800b1f2:	e004      	b.n	800b1fe <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800b1f4:	4a2f      	ldr	r2, [pc, #188]	; (800b2b4 <http_find_file+0x18c>)
 800b1f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b1fc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b202:	4618      	mov	r0, r3
 800b204:	f7ff fc58 	bl	800aab8 <fs_open>
 800b208:	4603      	mov	r3, r0
 800b20a:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800b20c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d104      	bne.n	800b21e <http_find_file+0xf6>
        uri = file_name;
 800b214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b216:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800b21c:	e005      	b.n	800b22a <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800b21e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b220:	3301      	adds	r3, #1
 800b222:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b226:	2b04      	cmp	r3, #4
 800b228:	d9b8      	bls.n	800b19c <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800b22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d124      	bne.n	800b27a <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	213f      	movs	r1, #63	; 0x3f
 800b234:	4618      	mov	r0, r3
 800b236:	f00d fe81 	bl	8018f3c <strchr>
 800b23a:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800b23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d005      	beq.n	800b24e <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800b242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b244:	2200      	movs	r2, #0
 800b246:	701a      	strb	r2, [r3, #0]
      params++;
 800b248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b24a:	3301      	adds	r3, #1
 800b24c:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	68ba      	ldr	r2, [r7, #8]
 800b252:	4611      	mov	r1, r2
 800b254:	4618      	mov	r0, r3
 800b256:	f7ff fc2f 	bl	800aab8 <fs_open>
 800b25a:	4603      	mov	r3, r0
 800b25c:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800b25e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d102      	bne.n	800b26c <http_find_file+0x144>
      file = &hs->file_handle;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	63bb      	str	r3, [r7, #56]	; 0x38
 800b26a:	e006      	b.n	800b27a <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800b26c:	f107 0308 	add.w	r3, r7, #8
 800b270:	4619      	mov	r1, r3
 800b272:	68f8      	ldr	r0, [r7, #12]
 800b274:	f7ff fe2a 	bl	800aecc <http_get_404_file>
 800b278:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800b27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d106      	bne.n	800b28e <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800b280:	f107 0308 	add.w	r3, r7, #8
 800b284:	4619      	mov	r1, r3
 800b286:	68f8      	ldr	r0, [r7, #12]
 800b288:	f7ff fe20 	bl	800aecc <http_get_404_file>
 800b28c:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800b28e:	68ba      	ldr	r2, [r7, #8]
 800b290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b292:	9301      	str	r3, [sp, #4]
 800b294:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b298:	9300      	str	r3, [sp, #0]
 800b29a:	4613      	mov	r3, r2
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b2a0:	68f8      	ldr	r0, [r7, #12]
 800b2a2:	f000 f809 	bl	800b2b8 <http_init_file>
 800b2a6:	4603      	mov	r3, r0
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3740      	adds	r7, #64	; 0x40
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}
 800b2b0:	2000d7bc 	.word	0x2000d7bc
 800b2b4:	08027ef8 	.word	0x08027ef8

0800b2b8 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b086      	sub	sp, #24
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	607a      	str	r2, [r7, #4]
 800b2c4:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d05c      	beq.n	800b386 <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d106      	bne.n	800b2e2 <http_init_file+0x2a>
 800b2d4:	4b35      	ldr	r3, [pc, #212]	; (800b3ac <http_init_file+0xf4>)
 800b2d6:	f640 120b 	movw	r2, #2315	; 0x90b
 800b2da:	4935      	ldr	r1, [pc, #212]	; (800b3b0 <http_init_file+0xf8>)
 800b2dc:	4835      	ldr	r0, [pc, #212]	; (800b3b4 <http_init_file+0xfc>)
 800b2de:	f00d fd6b 	bl	8018db8 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	68ba      	ldr	r2, [r7, #8]
 800b2e6:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	681a      	ldr	r2, [r3, #0]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	da06      	bge.n	800b306 <http_init_file+0x4e>
 800b2f8:	4b2c      	ldr	r3, [pc, #176]	; (800b3ac <http_init_file+0xf4>)
 800b2fa:	f640 1234 	movw	r2, #2356	; 0x934
 800b2fe:	492e      	ldr	r1, [pc, #184]	; (800b3b8 <http_init_file+0x100>)
 800b300:	482c      	ldr	r0, [pc, #176]	; (800b3b4 <http_init_file+0xfc>)
 800b302:	f00d fd59 	bl	8018db8 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	461a      	mov	r2, r3
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2200      	movs	r2, #0
 800b314:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	695b      	ldr	r3, [r3, #20]
 800b31c:	7c1b      	ldrb	r3, [r3, #16]
 800b31e:	f003 0301 	and.w	r3, r3, #1
 800b322:	2b00      	cmp	r3, #0
 800b324:	d106      	bne.n	800b334 <http_init_file+0x7c>
 800b326:	4b21      	ldr	r3, [pc, #132]	; (800b3ac <http_init_file+0xf4>)
 800b328:	f640 1243 	movw	r2, #2371	; 0x943
 800b32c:	4923      	ldr	r1, [pc, #140]	; (800b3bc <http_init_file+0x104>)
 800b32e:	4821      	ldr	r0, [pc, #132]	; (800b3b4 <http_init_file+0xfc>)
 800b330:	f00d fd42 	bl	8018db8 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d032      	beq.n	800b3a0 <http_init_file+0xe8>
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	695b      	ldr	r3, [r3, #20]
 800b33e:	7c1b      	ldrb	r3, [r3, #16]
 800b340:	f003 0301 	and.w	r3, r3, #1
 800b344:	2b00      	cmp	r3, #0
 800b346:	d02b      	beq.n	800b3a0 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	6998      	ldr	r0, [r3, #24]
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b350:	461a      	mov	r2, r3
 800b352:	491b      	ldr	r1, [pc, #108]	; (800b3c0 <http_init_file+0x108>)
 800b354:	f000 f9f8 	bl	800b748 <lwip_strnstr>
 800b358:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d01f      	beq.n	800b3a0 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	1d1a      	adds	r2, r3, #4
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	699b      	ldr	r3, [r3, #24]
 800b368:	1ad3      	subs	r3, r2, r3
 800b36a:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	699a      	ldr	r2, [r3, #24]
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	441a      	add	r2, r3
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	1ad2      	subs	r2, r2, r3
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	625a      	str	r2, [r3, #36]	; 0x24
 800b384:	e00c      	b.n	800b3a0 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2200      	movs	r2, #0
 800b38a:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2200      	movs	r2, #0
 800b390:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2200      	movs	r2, #0
 800b396:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2200      	movs	r2, #0
 800b39c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800b3a0:	2300      	movs	r3, #0
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3718      	adds	r7, #24
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	0801ae98 	.word	0x0801ae98
 800b3b0:	0801af94 	.word	0x0801af94
 800b3b4:	0801aee0 	.word	0x0801aee0
 800b3b8:	0801afa8 	.word	0x0801afa8
 800b3bc:	0801afc8 	.word	0x0801afc8
 800b3c0:	0801af8c 	.word	0x0801af8c

0800b3c4 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b084      	sub	sp, #16
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d002      	beq.n	800b3e0 <http_err+0x1c>
    http_state_free(hs);
 800b3da:	68f8      	ldr	r0, [r7, #12]
 800b3dc:	f7ff fc02 	bl	800abe4 <http_state_free>
  }
}
 800b3e0:	bf00      	nop
 800b3e2:	3710      	adds	r7, #16
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b086      	sub	sp, #24
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	60b9      	str	r1, [r7, #8]
 800b3f2:	4613      	mov	r3, r2
 800b3f4:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d101      	bne.n	800b404 <http_sent+0x1c>
    return ERR_OK;
 800b400:	2300      	movs	r3, #0
 800b402:	e008      	b.n	800b416 <http_sent+0x2e>
  }

  hs->retries = 0;
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	2200      	movs	r2, #0
 800b408:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800b40c:	6979      	ldr	r1, [r7, #20]
 800b40e:	68b8      	ldr	r0, [r7, #8]
 800b410:	f7ff fd25 	bl	800ae5e <http_send>

  return ERR_OK;
 800b414:	2300      	movs	r3, #0
}
 800b416:	4618      	mov	r0, r3
 800b418:	3718      	adds	r7, #24
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}

0800b41e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800b41e:	b580      	push	{r7, lr}
 800b420:	b084      	sub	sp, #16
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
 800b426:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d107      	bne.n	800b442 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800b432:	2100      	movs	r1, #0
 800b434:	6838      	ldr	r0, [r7, #0]
 800b436:	f7ff fc91 	bl	800ad5c <http_close_conn>
 800b43a:	4603      	mov	r3, r0
 800b43c:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800b43e:	2300      	movs	r3, #0
 800b440:	e021      	b.n	800b486 <http_poll+0x68>
  } else {
    hs->retries++;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b448:	3301      	adds	r3, #1
 800b44a:	b2da      	uxtb	r2, r3
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b458:	2b04      	cmp	r3, #4
 800b45a:	d105      	bne.n	800b468 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800b45c:	68f9      	ldr	r1, [r7, #12]
 800b45e:	6838      	ldr	r0, [r7, #0]
 800b460:	f7ff fc7c 	bl	800ad5c <http_close_conn>
      return ERR_OK;
 800b464:	2300      	movs	r3, #0
 800b466:	e00e      	b.n	800b486 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	695b      	ldr	r3, [r3, #20]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d009      	beq.n	800b484 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800b470:	68f9      	ldr	r1, [r7, #12]
 800b472:	6838      	ldr	r0, [r7, #0]
 800b474:	f7ff fcf3 	bl	800ae5e <http_send>
 800b478:	4603      	mov	r3, r0
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d002      	beq.n	800b484 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800b47e:	6838      	ldr	r0, [r7, #0]
 800b480:	f007 fa6a 	bl	8012958 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800b484:	2300      	movs	r3, #0
}
 800b486:	4618      	mov	r0, r3
 800b488:	3710      	adds	r7, #16
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
	...

0800b490 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b086      	sub	sp, #24
 800b494:	af00      	add	r7, sp, #0
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	60b9      	str	r1, [r7, #8]
 800b49a:	607a      	str	r2, [r7, #4]
 800b49c:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800b4a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d105      	bne.n	800b4b6 <http_recv+0x26>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d002      	beq.n	800b4b6 <http_recv+0x26>
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d111      	bne.n	800b4da <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d008      	beq.n	800b4ce <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	891b      	ldrh	r3, [r3, #8]
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	68b8      	ldr	r0, [r7, #8]
 800b4c4:	f002 fd20 	bl	800df08 <tcp_recved>
      pbuf_free(p);
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f001 fd43 	bl	800cf54 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800b4ce:	6979      	ldr	r1, [r7, #20]
 800b4d0:	68b8      	ldr	r0, [r7, #8]
 800b4d2:	f7ff fc43 	bl	800ad5c <http_close_conn>
    return ERR_OK;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	e055      	b.n	800b586 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	891b      	ldrh	r3, [r3, #8]
 800b4de:	4619      	mov	r1, r3
 800b4e0:	68b8      	ldr	r0, [r7, #8]
 800b4e2:	f002 fd11 	bl	800df08 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	695b      	ldr	r3, [r3, #20]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d147      	bne.n	800b57e <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800b4ee:	68ba      	ldr	r2, [r7, #8]
 800b4f0:	6979      	ldr	r1, [r7, #20]
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f7ff fd30 	bl	800af58 <http_parse_request>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800b4fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d015      	beq.n	800b530 <http_recv+0xa0>
 800b504:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b508:	f113 0f05 	cmn.w	r3, #5
 800b50c:	d010      	beq.n	800b530 <http_recv+0xa0>
 800b50e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b512:	f113 0f10 	cmn.w	r3, #16
 800b516:	d00b      	beq.n	800b530 <http_recv+0xa0>
 800b518:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b51c:	f113 0f08 	cmn.w	r3, #8
 800b520:	d006      	beq.n	800b530 <http_recv+0xa0>
 800b522:	4b1b      	ldr	r3, [pc, #108]	; (800b590 <http_recv+0x100>)
 800b524:	f640 2204 	movw	r2, #2564	; 0xa04
 800b528:	491a      	ldr	r1, [pc, #104]	; (800b594 <http_recv+0x104>)
 800b52a:	481b      	ldr	r0, [pc, #108]	; (800b598 <http_recv+0x108>)
 800b52c:	f00d fc44 	bl	8018db8 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800b530:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b534:	f113 0f05 	cmn.w	r3, #5
 800b538:	d00b      	beq.n	800b552 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	6a1b      	ldr	r3, [r3, #32]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d007      	beq.n	800b552 <http_recv+0xc2>
          pbuf_free(hs->req);
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	6a1b      	ldr	r3, [r3, #32]
 800b546:	4618      	mov	r0, r3
 800b548:	f001 fd04 	bl	800cf54 <pbuf_free>
          hs->req = NULL;
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	2200      	movs	r2, #0
 800b550:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f001 fcfe 	bl	800cf54 <pbuf_free>
      if (parsed == ERR_OK) {
 800b558:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d104      	bne.n	800b56a <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800b560:	6979      	ldr	r1, [r7, #20]
 800b562:	68b8      	ldr	r0, [r7, #8]
 800b564:	f7ff fc7b 	bl	800ae5e <http_send>
 800b568:	e00c      	b.n	800b584 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800b56a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b56e:	f113 0f10 	cmn.w	r3, #16
 800b572:	d107      	bne.n	800b584 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800b574:	6979      	ldr	r1, [r7, #20]
 800b576:	68b8      	ldr	r0, [r7, #8]
 800b578:	f7ff fbf0 	bl	800ad5c <http_close_conn>
 800b57c:	e002      	b.n	800b584 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f001 fce8 	bl	800cf54 <pbuf_free>
    }
  }
  return ERR_OK;
 800b584:	2300      	movs	r3, #0
}
 800b586:	4618      	mov	r0, r3
 800b588:	3718      	adds	r7, #24
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	0801ae98 	.word	0x0801ae98
 800b594:	0801aff4 	.word	0x0801aff4
 800b598:	0801aee0 	.word	0x0801aee0

0800b59c <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b086      	sub	sp, #24
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	60b9      	str	r1, [r7, #8]
 800b5a6:	4613      	mov	r3, r2
 800b5a8:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800b5aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d102      	bne.n	800b5b8 <http_accept+0x1c>
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d102      	bne.n	800b5be <http_accept+0x22>
    return ERR_VAL;
 800b5b8:	f06f 0305 	mvn.w	r3, #5
 800b5bc:	e025      	b.n	800b60a <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b5be:	2101      	movs	r1, #1
 800b5c0:	68b8      	ldr	r0, [r7, #8]
 800b5c2:	f003 fa9d 	bl	800eb00 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800b5c6:	f7ff fadb 	bl	800ab80 <http_state_alloc>
 800b5ca:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d102      	bne.n	800b5d8 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800b5d2:	f04f 33ff 	mov.w	r3, #4294967295
 800b5d6:	e018      	b.n	800b60a <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	68ba      	ldr	r2, [r7, #8]
 800b5dc:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800b5de:	6979      	ldr	r1, [r7, #20]
 800b5e0:	68b8      	ldr	r0, [r7, #8]
 800b5e2:	f003 fc8d 	bl	800ef00 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800b5e6:	490b      	ldr	r1, [pc, #44]	; (800b614 <http_accept+0x78>)
 800b5e8:	68b8      	ldr	r0, [r7, #8]
 800b5ea:	f003 fc9b 	bl	800ef24 <tcp_recv>
  altcp_err(pcb, http_err);
 800b5ee:	490a      	ldr	r1, [pc, #40]	; (800b618 <http_accept+0x7c>)
 800b5f0:	68b8      	ldr	r0, [r7, #8]
 800b5f2:	f003 fcdb 	bl	800efac <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800b5f6:	2204      	movs	r2, #4
 800b5f8:	4908      	ldr	r1, [pc, #32]	; (800b61c <http_accept+0x80>)
 800b5fa:	68b8      	ldr	r0, [r7, #8]
 800b5fc:	f003 fd10 	bl	800f020 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800b600:	4907      	ldr	r1, [pc, #28]	; (800b620 <http_accept+0x84>)
 800b602:	68b8      	ldr	r0, [r7, #8]
 800b604:	f003 fcb0 	bl	800ef68 <tcp_sent>

  return ERR_OK;
 800b608:	2300      	movs	r3, #0
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3718      	adds	r7, #24
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop
 800b614:	0800b491 	.word	0x0800b491
 800b618:	0800b3c5 	.word	0x0800b3c5
 800b61c:	0800b41f 	.word	0x0800b41f
 800b620:	0800b3e9 	.word	0x0800b3e9

0800b624 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	460b      	mov	r3, r1
 800b62e:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d029      	beq.n	800b68a <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b636:	2101      	movs	r1, #1
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f003 fa61 	bl	800eb00 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800b63e:	887b      	ldrh	r3, [r7, #2]
 800b640:	461a      	mov	r2, r3
 800b642:	4914      	ldr	r1, [pc, #80]	; (800b694 <httpd_init_pcb+0x70>)
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f002 fa91 	bl	800db6c <tcp_bind>
 800b64a:	4603      	mov	r3, r0
 800b64c:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800b64e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d006      	beq.n	800b664 <httpd_init_pcb+0x40>
 800b656:	4b10      	ldr	r3, [pc, #64]	; (800b698 <httpd_init_pcb+0x74>)
 800b658:	f640 2257 	movw	r2, #2647	; 0xa57
 800b65c:	490f      	ldr	r1, [pc, #60]	; (800b69c <httpd_init_pcb+0x78>)
 800b65e:	4810      	ldr	r0, [pc, #64]	; (800b6a0 <httpd_init_pcb+0x7c>)
 800b660:	f00d fbaa 	bl	8018db8 <iprintf>
    pcb = altcp_listen(pcb);
 800b664:	21ff      	movs	r1, #255	; 0xff
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f002 fb38 	bl	800dcdc <tcp_listen_with_backlog>
 800b66c:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d106      	bne.n	800b682 <httpd_init_pcb+0x5e>
 800b674:	4b08      	ldr	r3, [pc, #32]	; (800b698 <httpd_init_pcb+0x74>)
 800b676:	f640 2259 	movw	r2, #2649	; 0xa59
 800b67a:	490a      	ldr	r1, [pc, #40]	; (800b6a4 <httpd_init_pcb+0x80>)
 800b67c:	4808      	ldr	r0, [pc, #32]	; (800b6a0 <httpd_init_pcb+0x7c>)
 800b67e:	f00d fb9b 	bl	8018db8 <iprintf>
    altcp_accept(pcb, http_accept);
 800b682:	4909      	ldr	r1, [pc, #36]	; (800b6a8 <httpd_init_pcb+0x84>)
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f003 fcb3 	bl	800eff0 <tcp_accept>
  }
}
 800b68a:	bf00      	nop
 800b68c:	3710      	adds	r7, #16
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	08028040 	.word	0x08028040
 800b698:	0801ae98 	.word	0x0801ae98
 800b69c:	0801b020 	.word	0x0801b020
 800b6a0:	0801aee0 	.word	0x0801aee0
 800b6a4:	0801b03c 	.word	0x0801b03c
 800b6a8:	0800b59d 	.word	0x0800b59d

0800b6ac <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800b6b2:	202e      	movs	r0, #46	; 0x2e
 800b6b4:	f003 fc16 	bl	800eee4 <tcp_new_ip_type>
 800b6b8:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d106      	bne.n	800b6ce <httpd_init+0x22>
 800b6c0:	4b07      	ldr	r3, [pc, #28]	; (800b6e0 <httpd_init+0x34>)
 800b6c2:	f640 2272 	movw	r2, #2674	; 0xa72
 800b6c6:	4907      	ldr	r1, [pc, #28]	; (800b6e4 <httpd_init+0x38>)
 800b6c8:	4807      	ldr	r0, [pc, #28]	; (800b6e8 <httpd_init+0x3c>)
 800b6ca:	f00d fb75 	bl	8018db8 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800b6ce:	2150      	movs	r1, #80	; 0x50
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f7ff ffa7 	bl	800b624 <httpd_init_pcb>
}
 800b6d6:	bf00      	nop
 800b6d8:	3708      	adds	r7, #8
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	0801ae98 	.word	0x0801ae98
 800b6e4:	0801b05c 	.word	0x0801b05c
 800b6e8:	0801aee0 	.word	0x0801aee0

0800b6ec <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b083      	sub	sp, #12
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b6f6:	88fb      	ldrh	r3, [r7, #6]
 800b6f8:	021b      	lsls	r3, r3, #8
 800b6fa:	b21a      	sxth	r2, r3
 800b6fc:	88fb      	ldrh	r3, [r7, #6]
 800b6fe:	0a1b      	lsrs	r3, r3, #8
 800b700:	b29b      	uxth	r3, r3
 800b702:	b21b      	sxth	r3, r3
 800b704:	4313      	orrs	r3, r2
 800b706:	b21b      	sxth	r3, r3
 800b708:	b29b      	uxth	r3, r3
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	370c      	adds	r7, #12
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr

0800b716 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b716:	b480      	push	{r7}
 800b718:	b083      	sub	sp, #12
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	061a      	lsls	r2, r3, #24
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	021b      	lsls	r3, r3, #8
 800b726:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b72a:	431a      	orrs	r2, r3
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	0a1b      	lsrs	r3, r3, #8
 800b730:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b734:	431a      	orrs	r2, r3
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	0e1b      	lsrs	r3, r3, #24
 800b73a:	4313      	orrs	r3, r2
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	370c      	adds	r7, #12
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr

0800b748 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b086      	sub	sp, #24
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800b754:	68b8      	ldr	r0, [r7, #8]
 800b756:	f7f4 fd55 	bl	8000204 <strlen>
 800b75a:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d101      	bne.n	800b766 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	e022      	b.n	800b7ac <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	617b      	str	r3, [r7, #20]
 800b76a:	e012      	b.n	800b792 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	781a      	ldrb	r2, [r3, #0]
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	781b      	ldrb	r3, [r3, #0]
 800b774:	429a      	cmp	r2, r3
 800b776:	d109      	bne.n	800b78c <lwip_strnstr+0x44>
 800b778:	693a      	ldr	r2, [r7, #16]
 800b77a:	68b9      	ldr	r1, [r7, #8]
 800b77c:	6978      	ldr	r0, [r7, #20]
 800b77e:	f00d fbea 	bl	8018f56 <strncmp>
 800b782:	4603      	mov	r3, r0
 800b784:	2b00      	cmp	r3, #0
 800b786:	d101      	bne.n	800b78c <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	e00f      	b.n	800b7ac <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	3301      	adds	r3, #1
 800b790:	617b      	str	r3, [r7, #20]
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d007      	beq.n	800b7aa <lwip_strnstr+0x62>
 800b79a:	697a      	ldr	r2, [r7, #20]
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	441a      	add	r2, r3
 800b7a0:	68f9      	ldr	r1, [r7, #12]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	440b      	add	r3, r1
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d9e0      	bls.n	800b76c <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800b7aa:	2300      	movs	r3, #0
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3718      	adds	r7, #24
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b7be:	f00d f955 	bl	8018a6c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b7c2:	f000 f8d5 	bl	800b970 <mem_init>
  memp_init();
 800b7c6:	f000 fc31 	bl	800c02c <memp_init>
  pbuf_init();
  netif_init();
 800b7ca:	f000 fd3d 	bl	800c248 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b7ce:	f008 f9b3 	bl	8013b38 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b7d2:	f001 fe69 	bl	800d4a8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b7d6:	f008 f8f5 	bl	80139c4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b7da:	bf00      	nop
 800b7dc:	3708      	adds	r7, #8
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
	...

0800b7e4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b7ee:	4b05      	ldr	r3, [pc, #20]	; (800b804 <ptr_to_mem+0x20>)
 800b7f0:	681a      	ldr	r2, [r3, #0]
 800b7f2:	88fb      	ldrh	r3, [r7, #6]
 800b7f4:	4413      	add	r3, r2
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	370c      	adds	r7, #12
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr
 800b802:	bf00      	nop
 800b804:	2000de68 	.word	0x2000de68

0800b808 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b808:	b480      	push	{r7}
 800b80a:	b083      	sub	sp, #12
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b810:	4b05      	ldr	r3, [pc, #20]	; (800b828 <mem_to_ptr+0x20>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	1ad3      	subs	r3, r2, r3
 800b818:	b29b      	uxth	r3, r3
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	370c      	adds	r7, #12
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr
 800b826:	bf00      	nop
 800b828:	2000de68 	.word	0x2000de68

0800b82c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b82c:	b590      	push	{r4, r7, lr}
 800b82e:	b085      	sub	sp, #20
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b834:	4b45      	ldr	r3, [pc, #276]	; (800b94c <plug_holes+0x120>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d206      	bcs.n	800b84c <plug_holes+0x20>
 800b83e:	4b44      	ldr	r3, [pc, #272]	; (800b950 <plug_holes+0x124>)
 800b840:	f240 12df 	movw	r2, #479	; 0x1df
 800b844:	4943      	ldr	r1, [pc, #268]	; (800b954 <plug_holes+0x128>)
 800b846:	4844      	ldr	r0, [pc, #272]	; (800b958 <plug_holes+0x12c>)
 800b848:	f00d fab6 	bl	8018db8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b84c:	4b43      	ldr	r3, [pc, #268]	; (800b95c <plug_holes+0x130>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	429a      	cmp	r2, r3
 800b854:	d306      	bcc.n	800b864 <plug_holes+0x38>
 800b856:	4b3e      	ldr	r3, [pc, #248]	; (800b950 <plug_holes+0x124>)
 800b858:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b85c:	4940      	ldr	r1, [pc, #256]	; (800b960 <plug_holes+0x134>)
 800b85e:	483e      	ldr	r0, [pc, #248]	; (800b958 <plug_holes+0x12c>)
 800b860:	f00d faaa 	bl	8018db8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	791b      	ldrb	r3, [r3, #4]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d006      	beq.n	800b87a <plug_holes+0x4e>
 800b86c:	4b38      	ldr	r3, [pc, #224]	; (800b950 <plug_holes+0x124>)
 800b86e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b872:	493c      	ldr	r1, [pc, #240]	; (800b964 <plug_holes+0x138>)
 800b874:	4838      	ldr	r0, [pc, #224]	; (800b958 <plug_holes+0x12c>)
 800b876:	f00d fa9f 	bl	8018db8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	881b      	ldrh	r3, [r3, #0]
 800b87e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b882:	d906      	bls.n	800b892 <plug_holes+0x66>
 800b884:	4b32      	ldr	r3, [pc, #200]	; (800b950 <plug_holes+0x124>)
 800b886:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b88a:	4937      	ldr	r1, [pc, #220]	; (800b968 <plug_holes+0x13c>)
 800b88c:	4832      	ldr	r0, [pc, #200]	; (800b958 <plug_holes+0x12c>)
 800b88e:	f00d fa93 	bl	8018db8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	881b      	ldrh	r3, [r3, #0]
 800b896:	4618      	mov	r0, r3
 800b898:	f7ff ffa4 	bl	800b7e4 <ptr_to_mem>
 800b89c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d024      	beq.n	800b8f0 <plug_holes+0xc4>
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	791b      	ldrb	r3, [r3, #4]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d120      	bne.n	800b8f0 <plug_holes+0xc4>
 800b8ae:	4b2b      	ldr	r3, [pc, #172]	; (800b95c <plug_holes+0x130>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d01b      	beq.n	800b8f0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b8b8:	4b2c      	ldr	r3, [pc, #176]	; (800b96c <plug_holes+0x140>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	68fa      	ldr	r2, [r7, #12]
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d102      	bne.n	800b8c8 <plug_holes+0x9c>
      lfree = mem;
 800b8c2:	4a2a      	ldr	r2, [pc, #168]	; (800b96c <plug_holes+0x140>)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	881a      	ldrh	r2, [r3, #0]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	881b      	ldrh	r3, [r3, #0]
 800b8d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b8d8:	d00a      	beq.n	800b8f0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	881b      	ldrh	r3, [r3, #0]
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7ff ff80 	bl	800b7e4 <ptr_to_mem>
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f7ff ff8e 	bl	800b808 <mem_to_ptr>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	885b      	ldrh	r3, [r3, #2]
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7ff ff75 	bl	800b7e4 <ptr_to_mem>
 800b8fa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b8fc:	68ba      	ldr	r2, [r7, #8]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	429a      	cmp	r2, r3
 800b902:	d01f      	beq.n	800b944 <plug_holes+0x118>
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	791b      	ldrb	r3, [r3, #4]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d11b      	bne.n	800b944 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b90c:	4b17      	ldr	r3, [pc, #92]	; (800b96c <plug_holes+0x140>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	429a      	cmp	r2, r3
 800b914:	d102      	bne.n	800b91c <plug_holes+0xf0>
      lfree = pmem;
 800b916:	4a15      	ldr	r2, [pc, #84]	; (800b96c <plug_holes+0x140>)
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	881a      	ldrh	r2, [r3, #0]
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	881b      	ldrh	r3, [r3, #0]
 800b928:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b92c:	d00a      	beq.n	800b944 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	881b      	ldrh	r3, [r3, #0]
 800b932:	4618      	mov	r0, r3
 800b934:	f7ff ff56 	bl	800b7e4 <ptr_to_mem>
 800b938:	4604      	mov	r4, r0
 800b93a:	68b8      	ldr	r0, [r7, #8]
 800b93c:	f7ff ff64 	bl	800b808 <mem_to_ptr>
 800b940:	4603      	mov	r3, r0
 800b942:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b944:	bf00      	nop
 800b946:	3714      	adds	r7, #20
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd90      	pop	{r4, r7, pc}
 800b94c:	2000de68 	.word	0x2000de68
 800b950:	0801b078 	.word	0x0801b078
 800b954:	0801b0a8 	.word	0x0801b0a8
 800b958:	0801b0c0 	.word	0x0801b0c0
 800b95c:	2000de6c 	.word	0x2000de6c
 800b960:	0801b0e8 	.word	0x0801b0e8
 800b964:	0801b104 	.word	0x0801b104
 800b968:	0801b120 	.word	0x0801b120
 800b96c:	2000de74 	.word	0x2000de74

0800b970 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b976:	4b1f      	ldr	r3, [pc, #124]	; (800b9f4 <mem_init+0x84>)
 800b978:	3303      	adds	r3, #3
 800b97a:	f023 0303 	bic.w	r3, r3, #3
 800b97e:	461a      	mov	r2, r3
 800b980:	4b1d      	ldr	r3, [pc, #116]	; (800b9f8 <mem_init+0x88>)
 800b982:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b984:	4b1c      	ldr	r3, [pc, #112]	; (800b9f8 <mem_init+0x88>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b990:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2200      	movs	r2, #0
 800b996:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2200      	movs	r2, #0
 800b99c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b99e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800b9a2:	f7ff ff1f 	bl	800b7e4 <ptr_to_mem>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	4a14      	ldr	r2, [pc, #80]	; (800b9fc <mem_init+0x8c>)
 800b9aa:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b9ac:	4b13      	ldr	r3, [pc, #76]	; (800b9fc <mem_init+0x8c>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b9b4:	4b11      	ldr	r3, [pc, #68]	; (800b9fc <mem_init+0x8c>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b9bc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b9be:	4b0f      	ldr	r3, [pc, #60]	; (800b9fc <mem_init+0x8c>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b9c6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b9c8:	4b0b      	ldr	r3, [pc, #44]	; (800b9f8 <mem_init+0x88>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4a0c      	ldr	r2, [pc, #48]	; (800ba00 <mem_init+0x90>)
 800b9ce:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b9d0:	480c      	ldr	r0, [pc, #48]	; (800ba04 <mem_init+0x94>)
 800b9d2:	f00d f859 	bl	8018a88 <sys_mutex_new>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d006      	beq.n	800b9ea <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b9dc:	4b0a      	ldr	r3, [pc, #40]	; (800ba08 <mem_init+0x98>)
 800b9de:	f240 221f 	movw	r2, #543	; 0x21f
 800b9e2:	490a      	ldr	r1, [pc, #40]	; (800ba0c <mem_init+0x9c>)
 800b9e4:	480a      	ldr	r0, [pc, #40]	; (800ba10 <mem_init+0xa0>)
 800b9e6:	f00d f9e7 	bl	8018db8 <iprintf>
  }
}
 800b9ea:	bf00      	nop
 800b9ec:	3708      	adds	r7, #8
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	2000d814 	.word	0x2000d814
 800b9f8:	2000de68 	.word	0x2000de68
 800b9fc:	2000de6c 	.word	0x2000de6c
 800ba00:	2000de74 	.word	0x2000de74
 800ba04:	2000de70 	.word	0x2000de70
 800ba08:	0801b078 	.word	0x0801b078
 800ba0c:	0801b14c 	.word	0x0801b14c
 800ba10:	0801b0c0 	.word	0x0801b0c0

0800ba14 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b086      	sub	sp, #24
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f7ff fef3 	bl	800b808 <mem_to_ptr>
 800ba22:	4603      	mov	r3, r0
 800ba24:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	881b      	ldrh	r3, [r3, #0]
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7ff feda 	bl	800b7e4 <ptr_to_mem>
 800ba30:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	885b      	ldrh	r3, [r3, #2]
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7ff fed4 	bl	800b7e4 <ptr_to_mem>
 800ba3c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	881b      	ldrh	r3, [r3, #0]
 800ba42:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ba46:	d818      	bhi.n	800ba7a <mem_link_valid+0x66>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	885b      	ldrh	r3, [r3, #2]
 800ba4c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ba50:	d813      	bhi.n	800ba7a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ba56:	8afa      	ldrh	r2, [r7, #22]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d004      	beq.n	800ba66 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	881b      	ldrh	r3, [r3, #0]
 800ba60:	8afa      	ldrh	r2, [r7, #22]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d109      	bne.n	800ba7a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ba66:	4b08      	ldr	r3, [pc, #32]	; (800ba88 <mem_link_valid+0x74>)
 800ba68:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ba6a:	693a      	ldr	r2, [r7, #16]
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d006      	beq.n	800ba7e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	885b      	ldrh	r3, [r3, #2]
 800ba74:	8afa      	ldrh	r2, [r7, #22]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d001      	beq.n	800ba7e <mem_link_valid+0x6a>
    return 0;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	e000      	b.n	800ba80 <mem_link_valid+0x6c>
  }
  return 1;
 800ba7e:	2301      	movs	r3, #1
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3718      	adds	r7, #24
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}
 800ba88:	2000de6c 	.word	0x2000de6c

0800ba8c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b088      	sub	sp, #32
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d070      	beq.n	800bb7c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f003 0303 	and.w	r3, r3, #3
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d00d      	beq.n	800bac0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800baa4:	4b37      	ldr	r3, [pc, #220]	; (800bb84 <mem_free+0xf8>)
 800baa6:	f240 2273 	movw	r2, #627	; 0x273
 800baaa:	4937      	ldr	r1, [pc, #220]	; (800bb88 <mem_free+0xfc>)
 800baac:	4837      	ldr	r0, [pc, #220]	; (800bb8c <mem_free+0x100>)
 800baae:	f00d f983 	bl	8018db8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bab2:	f00d f847 	bl	8018b44 <sys_arch_protect>
 800bab6:	60f8      	str	r0, [r7, #12]
 800bab8:	68f8      	ldr	r0, [r7, #12]
 800baba:	f00d f851 	bl	8018b60 <sys_arch_unprotect>
    return;
 800babe:	e05e      	b.n	800bb7e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	3b08      	subs	r3, #8
 800bac4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bac6:	4b32      	ldr	r3, [pc, #200]	; (800bb90 <mem_free+0x104>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	69fa      	ldr	r2, [r7, #28]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d306      	bcc.n	800bade <mem_free+0x52>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f103 020c 	add.w	r2, r3, #12
 800bad6:	4b2f      	ldr	r3, [pc, #188]	; (800bb94 <mem_free+0x108>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	429a      	cmp	r2, r3
 800badc:	d90d      	bls.n	800bafa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bade:	4b29      	ldr	r3, [pc, #164]	; (800bb84 <mem_free+0xf8>)
 800bae0:	f240 227f 	movw	r2, #639	; 0x27f
 800bae4:	492c      	ldr	r1, [pc, #176]	; (800bb98 <mem_free+0x10c>)
 800bae6:	4829      	ldr	r0, [pc, #164]	; (800bb8c <mem_free+0x100>)
 800bae8:	f00d f966 	bl	8018db8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800baec:	f00d f82a 	bl	8018b44 <sys_arch_protect>
 800baf0:	6138      	str	r0, [r7, #16]
 800baf2:	6938      	ldr	r0, [r7, #16]
 800baf4:	f00d f834 	bl	8018b60 <sys_arch_unprotect>
    return;
 800baf8:	e041      	b.n	800bb7e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bafa:	4828      	ldr	r0, [pc, #160]	; (800bb9c <mem_free+0x110>)
 800bafc:	f00c ffe0 	bl	8018ac0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800bb00:	69fb      	ldr	r3, [r7, #28]
 800bb02:	791b      	ldrb	r3, [r3, #4]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d110      	bne.n	800bb2a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bb08:	4b1e      	ldr	r3, [pc, #120]	; (800bb84 <mem_free+0xf8>)
 800bb0a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800bb0e:	4924      	ldr	r1, [pc, #144]	; (800bba0 <mem_free+0x114>)
 800bb10:	481e      	ldr	r0, [pc, #120]	; (800bb8c <mem_free+0x100>)
 800bb12:	f00d f951 	bl	8018db8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bb16:	4821      	ldr	r0, [pc, #132]	; (800bb9c <mem_free+0x110>)
 800bb18:	f00c ffe1 	bl	8018ade <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bb1c:	f00d f812 	bl	8018b44 <sys_arch_protect>
 800bb20:	6178      	str	r0, [r7, #20]
 800bb22:	6978      	ldr	r0, [r7, #20]
 800bb24:	f00d f81c 	bl	8018b60 <sys_arch_unprotect>
    return;
 800bb28:	e029      	b.n	800bb7e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800bb2a:	69f8      	ldr	r0, [r7, #28]
 800bb2c:	f7ff ff72 	bl	800ba14 <mem_link_valid>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d110      	bne.n	800bb58 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bb36:	4b13      	ldr	r3, [pc, #76]	; (800bb84 <mem_free+0xf8>)
 800bb38:	f240 2295 	movw	r2, #661	; 0x295
 800bb3c:	4919      	ldr	r1, [pc, #100]	; (800bba4 <mem_free+0x118>)
 800bb3e:	4813      	ldr	r0, [pc, #76]	; (800bb8c <mem_free+0x100>)
 800bb40:	f00d f93a 	bl	8018db8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bb44:	4815      	ldr	r0, [pc, #84]	; (800bb9c <mem_free+0x110>)
 800bb46:	f00c ffca 	bl	8018ade <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bb4a:	f00c fffb 	bl	8018b44 <sys_arch_protect>
 800bb4e:	61b8      	str	r0, [r7, #24]
 800bb50:	69b8      	ldr	r0, [r7, #24]
 800bb52:	f00d f805 	bl	8018b60 <sys_arch_unprotect>
    return;
 800bb56:	e012      	b.n	800bb7e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bb58:	69fb      	ldr	r3, [r7, #28]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bb5e:	4b12      	ldr	r3, [pc, #72]	; (800bba8 <mem_free+0x11c>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	69fa      	ldr	r2, [r7, #28]
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d202      	bcs.n	800bb6e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bb68:	4a0f      	ldr	r2, [pc, #60]	; (800bba8 <mem_free+0x11c>)
 800bb6a:	69fb      	ldr	r3, [r7, #28]
 800bb6c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bb6e:	69f8      	ldr	r0, [r7, #28]
 800bb70:	f7ff fe5c 	bl	800b82c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bb74:	4809      	ldr	r0, [pc, #36]	; (800bb9c <mem_free+0x110>)
 800bb76:	f00c ffb2 	bl	8018ade <sys_mutex_unlock>
 800bb7a:	e000      	b.n	800bb7e <mem_free+0xf2>
    return;
 800bb7c:	bf00      	nop
}
 800bb7e:	3720      	adds	r7, #32
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	0801b078 	.word	0x0801b078
 800bb88:	0801b168 	.word	0x0801b168
 800bb8c:	0801b0c0 	.word	0x0801b0c0
 800bb90:	2000de68 	.word	0x2000de68
 800bb94:	2000de6c 	.word	0x2000de6c
 800bb98:	0801b18c 	.word	0x0801b18c
 800bb9c:	2000de70 	.word	0x2000de70
 800bba0:	0801b1a8 	.word	0x0801b1a8
 800bba4:	0801b1d0 	.word	0x0801b1d0
 800bba8:	2000de74 	.word	0x2000de74

0800bbac <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b088      	sub	sp, #32
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bbb8:	887b      	ldrh	r3, [r7, #2]
 800bbba:	3303      	adds	r3, #3
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	f023 0303 	bic.w	r3, r3, #3
 800bbc2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bbc4:	8bfb      	ldrh	r3, [r7, #30]
 800bbc6:	2b0b      	cmp	r3, #11
 800bbc8:	d801      	bhi.n	800bbce <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bbca:	230c      	movs	r3, #12
 800bbcc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bbce:	8bfb      	ldrh	r3, [r7, #30]
 800bbd0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bbd4:	d803      	bhi.n	800bbde <mem_trim+0x32>
 800bbd6:	8bfa      	ldrh	r2, [r7, #30]
 800bbd8:	887b      	ldrh	r3, [r7, #2]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d201      	bcs.n	800bbe2 <mem_trim+0x36>
    return NULL;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	e0d8      	b.n	800bd94 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bbe2:	4b6e      	ldr	r3, [pc, #440]	; (800bd9c <mem_trim+0x1f0>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d304      	bcc.n	800bbf6 <mem_trim+0x4a>
 800bbec:	4b6c      	ldr	r3, [pc, #432]	; (800bda0 <mem_trim+0x1f4>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d306      	bcc.n	800bc04 <mem_trim+0x58>
 800bbf6:	4b6b      	ldr	r3, [pc, #428]	; (800bda4 <mem_trim+0x1f8>)
 800bbf8:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bbfc:	496a      	ldr	r1, [pc, #424]	; (800bda8 <mem_trim+0x1fc>)
 800bbfe:	486b      	ldr	r0, [pc, #428]	; (800bdac <mem_trim+0x200>)
 800bc00:	f00d f8da 	bl	8018db8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bc04:	4b65      	ldr	r3, [pc, #404]	; (800bd9c <mem_trim+0x1f0>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d304      	bcc.n	800bc18 <mem_trim+0x6c>
 800bc0e:	4b64      	ldr	r3, [pc, #400]	; (800bda0 <mem_trim+0x1f4>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d307      	bcc.n	800bc28 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bc18:	f00c ff94 	bl	8018b44 <sys_arch_protect>
 800bc1c:	60b8      	str	r0, [r7, #8]
 800bc1e:	68b8      	ldr	r0, [r7, #8]
 800bc20:	f00c ff9e 	bl	8018b60 <sys_arch_unprotect>
    return rmem;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	e0b5      	b.n	800bd94 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	3b08      	subs	r3, #8
 800bc2c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bc2e:	69b8      	ldr	r0, [r7, #24]
 800bc30:	f7ff fdea 	bl	800b808 <mem_to_ptr>
 800bc34:	4603      	mov	r3, r0
 800bc36:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bc38:	69bb      	ldr	r3, [r7, #24]
 800bc3a:	881a      	ldrh	r2, [r3, #0]
 800bc3c:	8afb      	ldrh	r3, [r7, #22]
 800bc3e:	1ad3      	subs	r3, r2, r3
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	3b08      	subs	r3, #8
 800bc44:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bc46:	8bfa      	ldrh	r2, [r7, #30]
 800bc48:	8abb      	ldrh	r3, [r7, #20]
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d906      	bls.n	800bc5c <mem_trim+0xb0>
 800bc4e:	4b55      	ldr	r3, [pc, #340]	; (800bda4 <mem_trim+0x1f8>)
 800bc50:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800bc54:	4956      	ldr	r1, [pc, #344]	; (800bdb0 <mem_trim+0x204>)
 800bc56:	4855      	ldr	r0, [pc, #340]	; (800bdac <mem_trim+0x200>)
 800bc58:	f00d f8ae 	bl	8018db8 <iprintf>
  if (newsize > size) {
 800bc5c:	8bfa      	ldrh	r2, [r7, #30]
 800bc5e:	8abb      	ldrh	r3, [r7, #20]
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d901      	bls.n	800bc68 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bc64:	2300      	movs	r3, #0
 800bc66:	e095      	b.n	800bd94 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800bc68:	8bfa      	ldrh	r2, [r7, #30]
 800bc6a:	8abb      	ldrh	r3, [r7, #20]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d101      	bne.n	800bc74 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	e08f      	b.n	800bd94 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bc74:	484f      	ldr	r0, [pc, #316]	; (800bdb4 <mem_trim+0x208>)
 800bc76:	f00c ff23 	bl	8018ac0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bc7a:	69bb      	ldr	r3, [r7, #24]
 800bc7c:	881b      	ldrh	r3, [r3, #0]
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7ff fdb0 	bl	800b7e4 <ptr_to_mem>
 800bc84:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	791b      	ldrb	r3, [r3, #4]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d13f      	bne.n	800bd0e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bc8e:	69bb      	ldr	r3, [r7, #24]
 800bc90:	881b      	ldrh	r3, [r3, #0]
 800bc92:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bc96:	d106      	bne.n	800bca6 <mem_trim+0xfa>
 800bc98:	4b42      	ldr	r3, [pc, #264]	; (800bda4 <mem_trim+0x1f8>)
 800bc9a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800bc9e:	4946      	ldr	r1, [pc, #280]	; (800bdb8 <mem_trim+0x20c>)
 800bca0:	4842      	ldr	r0, [pc, #264]	; (800bdac <mem_trim+0x200>)
 800bca2:	f00d f889 	bl	8018db8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	881b      	ldrh	r3, [r3, #0]
 800bcaa:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bcac:	8afa      	ldrh	r2, [r7, #22]
 800bcae:	8bfb      	ldrh	r3, [r7, #30]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	3308      	adds	r3, #8
 800bcb6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bcb8:	4b40      	ldr	r3, [pc, #256]	; (800bdbc <mem_trim+0x210>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	693a      	ldr	r2, [r7, #16]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d106      	bne.n	800bcd0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800bcc2:	89fb      	ldrh	r3, [r7, #14]
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f7ff fd8d 	bl	800b7e4 <ptr_to_mem>
 800bcca:	4603      	mov	r3, r0
 800bccc:	4a3b      	ldr	r2, [pc, #236]	; (800bdbc <mem_trim+0x210>)
 800bcce:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bcd0:	89fb      	ldrh	r3, [r7, #14]
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7ff fd86 	bl	800b7e4 <ptr_to_mem>
 800bcd8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	89ba      	ldrh	r2, [r7, #12]
 800bce4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	8afa      	ldrh	r2, [r7, #22]
 800bcea:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bcec:	69bb      	ldr	r3, [r7, #24]
 800bcee:	89fa      	ldrh	r2, [r7, #14]
 800bcf0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	881b      	ldrh	r3, [r3, #0]
 800bcf6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bcfa:	d047      	beq.n	800bd8c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	881b      	ldrh	r3, [r3, #0]
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7ff fd6f 	bl	800b7e4 <ptr_to_mem>
 800bd06:	4602      	mov	r2, r0
 800bd08:	89fb      	ldrh	r3, [r7, #14]
 800bd0a:	8053      	strh	r3, [r2, #2]
 800bd0c:	e03e      	b.n	800bd8c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bd0e:	8bfb      	ldrh	r3, [r7, #30]
 800bd10:	f103 0214 	add.w	r2, r3, #20
 800bd14:	8abb      	ldrh	r3, [r7, #20]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d838      	bhi.n	800bd8c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bd1a:	8afa      	ldrh	r2, [r7, #22]
 800bd1c:	8bfb      	ldrh	r3, [r7, #30]
 800bd1e:	4413      	add	r3, r2
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	3308      	adds	r3, #8
 800bd24:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bd26:	69bb      	ldr	r3, [r7, #24]
 800bd28:	881b      	ldrh	r3, [r3, #0]
 800bd2a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd2e:	d106      	bne.n	800bd3e <mem_trim+0x192>
 800bd30:	4b1c      	ldr	r3, [pc, #112]	; (800bda4 <mem_trim+0x1f8>)
 800bd32:	f240 3216 	movw	r2, #790	; 0x316
 800bd36:	4920      	ldr	r1, [pc, #128]	; (800bdb8 <mem_trim+0x20c>)
 800bd38:	481c      	ldr	r0, [pc, #112]	; (800bdac <mem_trim+0x200>)
 800bd3a:	f00d f83d 	bl	8018db8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800bd3e:	89fb      	ldrh	r3, [r7, #14]
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7ff fd4f 	bl	800b7e4 <ptr_to_mem>
 800bd46:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800bd48:	4b1c      	ldr	r3, [pc, #112]	; (800bdbc <mem_trim+0x210>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	693a      	ldr	r2, [r7, #16]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d202      	bcs.n	800bd58 <mem_trim+0x1ac>
      lfree = mem2;
 800bd52:	4a1a      	ldr	r2, [pc, #104]	; (800bdbc <mem_trim+0x210>)
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800bd5e:	69bb      	ldr	r3, [r7, #24]
 800bd60:	881a      	ldrh	r2, [r3, #0]
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	8afa      	ldrh	r2, [r7, #22]
 800bd6a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800bd6c:	69bb      	ldr	r3, [r7, #24]
 800bd6e:	89fa      	ldrh	r2, [r7, #14]
 800bd70:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	881b      	ldrh	r3, [r3, #0]
 800bd76:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd7a:	d007      	beq.n	800bd8c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	881b      	ldrh	r3, [r3, #0]
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7ff fd2f 	bl	800b7e4 <ptr_to_mem>
 800bd86:	4602      	mov	r2, r0
 800bd88:	89fb      	ldrh	r3, [r7, #14]
 800bd8a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bd8c:	4809      	ldr	r0, [pc, #36]	; (800bdb4 <mem_trim+0x208>)
 800bd8e:	f00c fea6 	bl	8018ade <sys_mutex_unlock>
  return rmem;
 800bd92:	687b      	ldr	r3, [r7, #4]
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3720      	adds	r7, #32
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}
 800bd9c:	2000de68 	.word	0x2000de68
 800bda0:	2000de6c 	.word	0x2000de6c
 800bda4:	0801b078 	.word	0x0801b078
 800bda8:	0801b204 	.word	0x0801b204
 800bdac:	0801b0c0 	.word	0x0801b0c0
 800bdb0:	0801b21c 	.word	0x0801b21c
 800bdb4:	2000de70 	.word	0x2000de70
 800bdb8:	0801b23c 	.word	0x0801b23c
 800bdbc:	2000de74 	.word	0x2000de74

0800bdc0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b088      	sub	sp, #32
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800bdca:	88fb      	ldrh	r3, [r7, #6]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d101      	bne.n	800bdd4 <mem_malloc+0x14>
    return NULL;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	e0e2      	b.n	800bf9a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800bdd4:	88fb      	ldrh	r3, [r7, #6]
 800bdd6:	3303      	adds	r3, #3
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	f023 0303 	bic.w	r3, r3, #3
 800bdde:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800bde0:	8bbb      	ldrh	r3, [r7, #28]
 800bde2:	2b0b      	cmp	r3, #11
 800bde4:	d801      	bhi.n	800bdea <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bde6:	230c      	movs	r3, #12
 800bde8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800bdea:	8bbb      	ldrh	r3, [r7, #28]
 800bdec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bdf0:	d803      	bhi.n	800bdfa <mem_malloc+0x3a>
 800bdf2:	8bba      	ldrh	r2, [r7, #28]
 800bdf4:	88fb      	ldrh	r3, [r7, #6]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d201      	bcs.n	800bdfe <mem_malloc+0x3e>
    return NULL;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	e0cd      	b.n	800bf9a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800bdfe:	4869      	ldr	r0, [pc, #420]	; (800bfa4 <mem_malloc+0x1e4>)
 800be00:	f00c fe5e 	bl	8018ac0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800be04:	4b68      	ldr	r3, [pc, #416]	; (800bfa8 <mem_malloc+0x1e8>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4618      	mov	r0, r3
 800be0a:	f7ff fcfd 	bl	800b808 <mem_to_ptr>
 800be0e:	4603      	mov	r3, r0
 800be10:	83fb      	strh	r3, [r7, #30]
 800be12:	e0b7      	b.n	800bf84 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800be14:	8bfb      	ldrh	r3, [r7, #30]
 800be16:	4618      	mov	r0, r3
 800be18:	f7ff fce4 	bl	800b7e4 <ptr_to_mem>
 800be1c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	791b      	ldrb	r3, [r3, #4]
 800be22:	2b00      	cmp	r3, #0
 800be24:	f040 80a7 	bne.w	800bf76 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	881b      	ldrh	r3, [r3, #0]
 800be2c:	461a      	mov	r2, r3
 800be2e:	8bfb      	ldrh	r3, [r7, #30]
 800be30:	1ad3      	subs	r3, r2, r3
 800be32:	f1a3 0208 	sub.w	r2, r3, #8
 800be36:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800be38:	429a      	cmp	r2, r3
 800be3a:	f0c0 809c 	bcc.w	800bf76 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	881b      	ldrh	r3, [r3, #0]
 800be42:	461a      	mov	r2, r3
 800be44:	8bfb      	ldrh	r3, [r7, #30]
 800be46:	1ad3      	subs	r3, r2, r3
 800be48:	f1a3 0208 	sub.w	r2, r3, #8
 800be4c:	8bbb      	ldrh	r3, [r7, #28]
 800be4e:	3314      	adds	r3, #20
 800be50:	429a      	cmp	r2, r3
 800be52:	d333      	bcc.n	800bebc <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800be54:	8bfa      	ldrh	r2, [r7, #30]
 800be56:	8bbb      	ldrh	r3, [r7, #28]
 800be58:	4413      	add	r3, r2
 800be5a:	b29b      	uxth	r3, r3
 800be5c:	3308      	adds	r3, #8
 800be5e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800be60:	8a7b      	ldrh	r3, [r7, #18]
 800be62:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be66:	d106      	bne.n	800be76 <mem_malloc+0xb6>
 800be68:	4b50      	ldr	r3, [pc, #320]	; (800bfac <mem_malloc+0x1ec>)
 800be6a:	f240 3287 	movw	r2, #903	; 0x387
 800be6e:	4950      	ldr	r1, [pc, #320]	; (800bfb0 <mem_malloc+0x1f0>)
 800be70:	4850      	ldr	r0, [pc, #320]	; (800bfb4 <mem_malloc+0x1f4>)
 800be72:	f00c ffa1 	bl	8018db8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800be76:	8a7b      	ldrh	r3, [r7, #18]
 800be78:	4618      	mov	r0, r3
 800be7a:	f7ff fcb3 	bl	800b7e4 <ptr_to_mem>
 800be7e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2200      	movs	r2, #0
 800be84:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	881a      	ldrh	r2, [r3, #0]
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	8bfa      	ldrh	r2, [r7, #30]
 800be92:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	8a7a      	ldrh	r2, [r7, #18]
 800be98:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	2201      	movs	r2, #1
 800be9e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	881b      	ldrh	r3, [r3, #0]
 800bea4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bea8:	d00b      	beq.n	800bec2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	881b      	ldrh	r3, [r3, #0]
 800beae:	4618      	mov	r0, r3
 800beb0:	f7ff fc98 	bl	800b7e4 <ptr_to_mem>
 800beb4:	4602      	mov	r2, r0
 800beb6:	8a7b      	ldrh	r3, [r7, #18]
 800beb8:	8053      	strh	r3, [r2, #2]
 800beba:	e002      	b.n	800bec2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	2201      	movs	r2, #1
 800bec0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800bec2:	4b39      	ldr	r3, [pc, #228]	; (800bfa8 <mem_malloc+0x1e8>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	697a      	ldr	r2, [r7, #20]
 800bec8:	429a      	cmp	r2, r3
 800beca:	d127      	bne.n	800bf1c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800becc:	4b36      	ldr	r3, [pc, #216]	; (800bfa8 <mem_malloc+0x1e8>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800bed2:	e005      	b.n	800bee0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800bed4:	69bb      	ldr	r3, [r7, #24]
 800bed6:	881b      	ldrh	r3, [r3, #0]
 800bed8:	4618      	mov	r0, r3
 800beda:	f7ff fc83 	bl	800b7e4 <ptr_to_mem>
 800bede:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800bee0:	69bb      	ldr	r3, [r7, #24]
 800bee2:	791b      	ldrb	r3, [r3, #4]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d004      	beq.n	800bef2 <mem_malloc+0x132>
 800bee8:	4b33      	ldr	r3, [pc, #204]	; (800bfb8 <mem_malloc+0x1f8>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	69ba      	ldr	r2, [r7, #24]
 800beee:	429a      	cmp	r2, r3
 800bef0:	d1f0      	bne.n	800bed4 <mem_malloc+0x114>
          }
          lfree = cur;
 800bef2:	4a2d      	ldr	r2, [pc, #180]	; (800bfa8 <mem_malloc+0x1e8>)
 800bef4:	69bb      	ldr	r3, [r7, #24]
 800bef6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800bef8:	4b2b      	ldr	r3, [pc, #172]	; (800bfa8 <mem_malloc+0x1e8>)
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	4b2e      	ldr	r3, [pc, #184]	; (800bfb8 <mem_malloc+0x1f8>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d00b      	beq.n	800bf1c <mem_malloc+0x15c>
 800bf04:	4b28      	ldr	r3, [pc, #160]	; (800bfa8 <mem_malloc+0x1e8>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	791b      	ldrb	r3, [r3, #4]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d006      	beq.n	800bf1c <mem_malloc+0x15c>
 800bf0e:	4b27      	ldr	r3, [pc, #156]	; (800bfac <mem_malloc+0x1ec>)
 800bf10:	f240 32b5 	movw	r2, #949	; 0x3b5
 800bf14:	4929      	ldr	r1, [pc, #164]	; (800bfbc <mem_malloc+0x1fc>)
 800bf16:	4827      	ldr	r0, [pc, #156]	; (800bfb4 <mem_malloc+0x1f4>)
 800bf18:	f00c ff4e 	bl	8018db8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800bf1c:	4821      	ldr	r0, [pc, #132]	; (800bfa4 <mem_malloc+0x1e4>)
 800bf1e:	f00c fdde 	bl	8018ade <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800bf22:	8bba      	ldrh	r2, [r7, #28]
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	4413      	add	r3, r2
 800bf28:	3308      	adds	r3, #8
 800bf2a:	4a23      	ldr	r2, [pc, #140]	; (800bfb8 <mem_malloc+0x1f8>)
 800bf2c:	6812      	ldr	r2, [r2, #0]
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d906      	bls.n	800bf40 <mem_malloc+0x180>
 800bf32:	4b1e      	ldr	r3, [pc, #120]	; (800bfac <mem_malloc+0x1ec>)
 800bf34:	f240 32b9 	movw	r2, #953	; 0x3b9
 800bf38:	4921      	ldr	r1, [pc, #132]	; (800bfc0 <mem_malloc+0x200>)
 800bf3a:	481e      	ldr	r0, [pc, #120]	; (800bfb4 <mem_malloc+0x1f4>)
 800bf3c:	f00c ff3c 	bl	8018db8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	f003 0303 	and.w	r3, r3, #3
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d006      	beq.n	800bf58 <mem_malloc+0x198>
 800bf4a:	4b18      	ldr	r3, [pc, #96]	; (800bfac <mem_malloc+0x1ec>)
 800bf4c:	f240 32bb 	movw	r2, #955	; 0x3bb
 800bf50:	491c      	ldr	r1, [pc, #112]	; (800bfc4 <mem_malloc+0x204>)
 800bf52:	4818      	ldr	r0, [pc, #96]	; (800bfb4 <mem_malloc+0x1f4>)
 800bf54:	f00c ff30 	bl	8018db8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	f003 0303 	and.w	r3, r3, #3
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d006      	beq.n	800bf70 <mem_malloc+0x1b0>
 800bf62:	4b12      	ldr	r3, [pc, #72]	; (800bfac <mem_malloc+0x1ec>)
 800bf64:	f240 32bd 	movw	r2, #957	; 0x3bd
 800bf68:	4917      	ldr	r1, [pc, #92]	; (800bfc8 <mem_malloc+0x208>)
 800bf6a:	4812      	ldr	r0, [pc, #72]	; (800bfb4 <mem_malloc+0x1f4>)
 800bf6c:	f00c ff24 	bl	8018db8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	3308      	adds	r3, #8
 800bf74:	e011      	b.n	800bf9a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800bf76:	8bfb      	ldrh	r3, [r7, #30]
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7ff fc33 	bl	800b7e4 <ptr_to_mem>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	881b      	ldrh	r3, [r3, #0]
 800bf82:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bf84:	8bfa      	ldrh	r2, [r7, #30]
 800bf86:	8bbb      	ldrh	r3, [r7, #28]
 800bf88:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	f4ff af41 	bcc.w	800be14 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800bf92:	4804      	ldr	r0, [pc, #16]	; (800bfa4 <mem_malloc+0x1e4>)
 800bf94:	f00c fda3 	bl	8018ade <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800bf98:	2300      	movs	r3, #0
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3720      	adds	r7, #32
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	bf00      	nop
 800bfa4:	2000de70 	.word	0x2000de70
 800bfa8:	2000de74 	.word	0x2000de74
 800bfac:	0801b078 	.word	0x0801b078
 800bfb0:	0801b23c 	.word	0x0801b23c
 800bfb4:	0801b0c0 	.word	0x0801b0c0
 800bfb8:	2000de6c 	.word	0x2000de6c
 800bfbc:	0801b250 	.word	0x0801b250
 800bfc0:	0801b26c 	.word	0x0801b26c
 800bfc4:	0801b29c 	.word	0x0801b29c
 800bfc8:	0801b2cc 	.word	0x0801b2cc

0800bfcc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b085      	sub	sp, #20
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	689b      	ldr	r3, [r3, #8]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	3303      	adds	r3, #3
 800bfe2:	f023 0303 	bic.w	r3, r3, #3
 800bfe6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800bfe8:	2300      	movs	r3, #0
 800bfea:	60fb      	str	r3, [r7, #12]
 800bfec:	e011      	b.n	800c012 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	689b      	ldr	r3, [r3, #8]
 800bff2:	681a      	ldr	r2, [r3, #0]
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	68ba      	ldr	r2, [r7, #8]
 800bffe:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	881b      	ldrh	r3, [r3, #0]
 800c004:	461a      	mov	r2, r3
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	4413      	add	r3, r2
 800c00a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	3301      	adds	r3, #1
 800c010:	60fb      	str	r3, [r7, #12]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	885b      	ldrh	r3, [r3, #2]
 800c016:	461a      	mov	r2, r3
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	4293      	cmp	r3, r2
 800c01c:	dbe7      	blt.n	800bfee <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c01e:	bf00      	nop
 800c020:	bf00      	nop
 800c022:	3714      	adds	r7, #20
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr

0800c02c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b082      	sub	sp, #8
 800c030:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c032:	2300      	movs	r3, #0
 800c034:	80fb      	strh	r3, [r7, #6]
 800c036:	e009      	b.n	800c04c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c038:	88fb      	ldrh	r3, [r7, #6]
 800c03a:	4a08      	ldr	r2, [pc, #32]	; (800c05c <memp_init+0x30>)
 800c03c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c040:	4618      	mov	r0, r3
 800c042:	f7ff ffc3 	bl	800bfcc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c046:	88fb      	ldrh	r3, [r7, #6]
 800c048:	3301      	adds	r3, #1
 800c04a:	80fb      	strh	r3, [r7, #6]
 800c04c:	88fb      	ldrh	r3, [r7, #6]
 800c04e:	2b0c      	cmp	r3, #12
 800c050:	d9f2      	bls.n	800c038 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c052:	bf00      	nop
 800c054:	bf00      	nop
 800c056:	3708      	adds	r7, #8
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}
 800c05c:	08027fbc 	.word	0x08027fbc

0800c060 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b084      	sub	sp, #16
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c068:	f00c fd6c 	bl	8018b44 <sys_arch_protect>
 800c06c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	689b      	ldr	r3, [r3, #8]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d015      	beq.n	800c0a8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	689b      	ldr	r3, [r3, #8]
 800c080:	68ba      	ldr	r2, [r7, #8]
 800c082:	6812      	ldr	r2, [r2, #0]
 800c084:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	f003 0303 	and.w	r3, r3, #3
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d006      	beq.n	800c09e <do_memp_malloc_pool+0x3e>
 800c090:	4b09      	ldr	r3, [pc, #36]	; (800c0b8 <do_memp_malloc_pool+0x58>)
 800c092:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c096:	4909      	ldr	r1, [pc, #36]	; (800c0bc <do_memp_malloc_pool+0x5c>)
 800c098:	4809      	ldr	r0, [pc, #36]	; (800c0c0 <do_memp_malloc_pool+0x60>)
 800c09a:	f00c fe8d 	bl	8018db8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c09e:	68f8      	ldr	r0, [r7, #12]
 800c0a0:	f00c fd5e 	bl	8018b60 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	e003      	b.n	800c0b0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c0a8:	68f8      	ldr	r0, [r7, #12]
 800c0aa:	f00c fd59 	bl	8018b60 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c0ae:	2300      	movs	r3, #0
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3710      	adds	r7, #16
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}
 800c0b8:	0801b2f0 	.word	0x0801b2f0
 800c0bc:	0801b320 	.word	0x0801b320
 800c0c0:	0801b344 	.word	0x0801b344

0800c0c4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d106      	bne.n	800c0e0 <memp_malloc_pool+0x1c>
 800c0d2:	4b0a      	ldr	r3, [pc, #40]	; (800c0fc <memp_malloc_pool+0x38>)
 800c0d4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c0d8:	4909      	ldr	r1, [pc, #36]	; (800c100 <memp_malloc_pool+0x3c>)
 800c0da:	480a      	ldr	r0, [pc, #40]	; (800c104 <memp_malloc_pool+0x40>)
 800c0dc:	f00c fe6c 	bl	8018db8 <iprintf>
  if (desc == NULL) {
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d101      	bne.n	800c0ea <memp_malloc_pool+0x26>
    return NULL;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	e003      	b.n	800c0f2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f7ff ffb8 	bl	800c060 <do_memp_malloc_pool>
 800c0f0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3708      	adds	r7, #8
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	bf00      	nop
 800c0fc:	0801b2f0 	.word	0x0801b2f0
 800c100:	0801b36c 	.word	0x0801b36c
 800c104:	0801b344 	.word	0x0801b344

0800c108 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	4603      	mov	r3, r0
 800c110:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c112:	79fb      	ldrb	r3, [r7, #7]
 800c114:	2b0c      	cmp	r3, #12
 800c116:	d908      	bls.n	800c12a <memp_malloc+0x22>
 800c118:	4b0a      	ldr	r3, [pc, #40]	; (800c144 <memp_malloc+0x3c>)
 800c11a:	f240 1257 	movw	r2, #343	; 0x157
 800c11e:	490a      	ldr	r1, [pc, #40]	; (800c148 <memp_malloc+0x40>)
 800c120:	480a      	ldr	r0, [pc, #40]	; (800c14c <memp_malloc+0x44>)
 800c122:	f00c fe49 	bl	8018db8 <iprintf>
 800c126:	2300      	movs	r3, #0
 800c128:	e008      	b.n	800c13c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c12a:	79fb      	ldrb	r3, [r7, #7]
 800c12c:	4a08      	ldr	r2, [pc, #32]	; (800c150 <memp_malloc+0x48>)
 800c12e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c132:	4618      	mov	r0, r3
 800c134:	f7ff ff94 	bl	800c060 <do_memp_malloc_pool>
 800c138:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c13a:	68fb      	ldr	r3, [r7, #12]
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3710      	adds	r7, #16
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}
 800c144:	0801b2f0 	.word	0x0801b2f0
 800c148:	0801b380 	.word	0x0801b380
 800c14c:	0801b344 	.word	0x0801b344
 800c150:	08027fbc 	.word	0x08027fbc

0800c154 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	f003 0303 	and.w	r3, r3, #3
 800c164:	2b00      	cmp	r3, #0
 800c166:	d006      	beq.n	800c176 <do_memp_free_pool+0x22>
 800c168:	4b0d      	ldr	r3, [pc, #52]	; (800c1a0 <do_memp_free_pool+0x4c>)
 800c16a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c16e:	490d      	ldr	r1, [pc, #52]	; (800c1a4 <do_memp_free_pool+0x50>)
 800c170:	480d      	ldr	r0, [pc, #52]	; (800c1a8 <do_memp_free_pool+0x54>)
 800c172:	f00c fe21 	bl	8018db8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c17a:	f00c fce3 	bl	8018b44 <sys_arch_protect>
 800c17e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	689b      	ldr	r3, [r3, #8]
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	689b      	ldr	r3, [r3, #8]
 800c18e:	68fa      	ldr	r2, [r7, #12]
 800c190:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c192:	68b8      	ldr	r0, [r7, #8]
 800c194:	f00c fce4 	bl	8018b60 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c198:	bf00      	nop
 800c19a:	3710      	adds	r7, #16
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	0801b2f0 	.word	0x0801b2f0
 800c1a4:	0801b3a0 	.word	0x0801b3a0
 800c1a8:	0801b344 	.word	0x0801b344

0800c1ac <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d106      	bne.n	800c1ca <memp_free_pool+0x1e>
 800c1bc:	4b0a      	ldr	r3, [pc, #40]	; (800c1e8 <memp_free_pool+0x3c>)
 800c1be:	f240 1295 	movw	r2, #405	; 0x195
 800c1c2:	490a      	ldr	r1, [pc, #40]	; (800c1ec <memp_free_pool+0x40>)
 800c1c4:	480a      	ldr	r0, [pc, #40]	; (800c1f0 <memp_free_pool+0x44>)
 800c1c6:	f00c fdf7 	bl	8018db8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d007      	beq.n	800c1e0 <memp_free_pool+0x34>
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d004      	beq.n	800c1e0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c1d6:	6839      	ldr	r1, [r7, #0]
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f7ff ffbb 	bl	800c154 <do_memp_free_pool>
 800c1de:	e000      	b.n	800c1e2 <memp_free_pool+0x36>
    return;
 800c1e0:	bf00      	nop
}
 800c1e2:	3708      	adds	r7, #8
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}
 800c1e8:	0801b2f0 	.word	0x0801b2f0
 800c1ec:	0801b36c 	.word	0x0801b36c
 800c1f0:	0801b344 	.word	0x0801b344

0800c1f4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b082      	sub	sp, #8
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	6039      	str	r1, [r7, #0]
 800c1fe:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c200:	79fb      	ldrb	r3, [r7, #7]
 800c202:	2b0c      	cmp	r3, #12
 800c204:	d907      	bls.n	800c216 <memp_free+0x22>
 800c206:	4b0c      	ldr	r3, [pc, #48]	; (800c238 <memp_free+0x44>)
 800c208:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c20c:	490b      	ldr	r1, [pc, #44]	; (800c23c <memp_free+0x48>)
 800c20e:	480c      	ldr	r0, [pc, #48]	; (800c240 <memp_free+0x4c>)
 800c210:	f00c fdd2 	bl	8018db8 <iprintf>
 800c214:	e00c      	b.n	800c230 <memp_free+0x3c>

  if (mem == NULL) {
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d008      	beq.n	800c22e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c21c:	79fb      	ldrb	r3, [r7, #7]
 800c21e:	4a09      	ldr	r2, [pc, #36]	; (800c244 <memp_free+0x50>)
 800c220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c224:	6839      	ldr	r1, [r7, #0]
 800c226:	4618      	mov	r0, r3
 800c228:	f7ff ff94 	bl	800c154 <do_memp_free_pool>
 800c22c:	e000      	b.n	800c230 <memp_free+0x3c>
    return;
 800c22e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c230:	3708      	adds	r7, #8
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
 800c236:	bf00      	nop
 800c238:	0801b2f0 	.word	0x0801b2f0
 800c23c:	0801b3c0 	.word	0x0801b3c0
 800c240:	0801b344 	.word	0x0801b344
 800c244:	08027fbc 	.word	0x08027fbc

0800c248 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c248:	b480      	push	{r7}
 800c24a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c24c:	bf00      	nop
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr
	...

0800c258 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b086      	sub	sp, #24
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	607a      	str	r2, [r7, #4]
 800c264:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d108      	bne.n	800c27e <netif_add+0x26>
 800c26c:	4b5b      	ldr	r3, [pc, #364]	; (800c3dc <netif_add+0x184>)
 800c26e:	f240 1227 	movw	r2, #295	; 0x127
 800c272:	495b      	ldr	r1, [pc, #364]	; (800c3e0 <netif_add+0x188>)
 800c274:	485b      	ldr	r0, [pc, #364]	; (800c3e4 <netif_add+0x18c>)
 800c276:	f00c fd9f 	bl	8018db8 <iprintf>
 800c27a:	2300      	movs	r3, #0
 800c27c:	e0a9      	b.n	800c3d2 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c280:	2b00      	cmp	r3, #0
 800c282:	d108      	bne.n	800c296 <netif_add+0x3e>
 800c284:	4b55      	ldr	r3, [pc, #340]	; (800c3dc <netif_add+0x184>)
 800c286:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c28a:	4957      	ldr	r1, [pc, #348]	; (800c3e8 <netif_add+0x190>)
 800c28c:	4855      	ldr	r0, [pc, #340]	; (800c3e4 <netif_add+0x18c>)
 800c28e:	f00c fd93 	bl	8018db8 <iprintf>
 800c292:	2300      	movs	r3, #0
 800c294:	e09d      	b.n	800c3d2 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d101      	bne.n	800c2a0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c29c:	4b53      	ldr	r3, [pc, #332]	; (800c3ec <netif_add+0x194>)
 800c29e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d101      	bne.n	800c2aa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c2a6:	4b51      	ldr	r3, [pc, #324]	; (800c3ec <netif_add+0x194>)
 800c2a8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d101      	bne.n	800c2b4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c2b0:	4b4e      	ldr	r3, [pc, #312]	; (800c3ec <netif_add+0x194>)
 800c2b2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	2200      	movs	r2, #0
 800c2be:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	4a49      	ldr	r2, [pc, #292]	; (800c3f0 <netif_add+0x198>)
 800c2ca:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	3324      	adds	r3, #36	; 0x24
 800c2de:	2204      	movs	r2, #4
 800c2e0:	2100      	movs	r1, #0
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f00c fe07 	bl	8018ef6 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	6a3a      	ldr	r2, [r7, #32]
 800c2f2:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c2f4:	4b3f      	ldr	r3, [pc, #252]	; (800c3f4 <netif_add+0x19c>)
 800c2f6:	781a      	ldrb	r2, [r3, #0]
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c302:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	68b9      	ldr	r1, [r7, #8]
 800c30a:	68f8      	ldr	r0, [r7, #12]
 800c30c:	f000 f914 	bl	800c538 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c312:	68f8      	ldr	r0, [r7, #12]
 800c314:	4798      	blx	r3
 800c316:	4603      	mov	r3, r0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d001      	beq.n	800c320 <netif_add+0xc8>
    return NULL;
 800c31c:	2300      	movs	r3, #0
 800c31e:	e058      	b.n	800c3d2 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c326:	2bff      	cmp	r3, #255	; 0xff
 800c328:	d103      	bne.n	800c332 <netif_add+0xda>
        netif->num = 0;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	2200      	movs	r2, #0
 800c32e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800c332:	2300      	movs	r3, #0
 800c334:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c336:	4b30      	ldr	r3, [pc, #192]	; (800c3f8 <netif_add+0x1a0>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	617b      	str	r3, [r7, #20]
 800c33c:	e02b      	b.n	800c396 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c33e:	697a      	ldr	r2, [r7, #20]
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	429a      	cmp	r2, r3
 800c344:	d106      	bne.n	800c354 <netif_add+0xfc>
 800c346:	4b25      	ldr	r3, [pc, #148]	; (800c3dc <netif_add+0x184>)
 800c348:	f240 128b 	movw	r2, #395	; 0x18b
 800c34c:	492b      	ldr	r1, [pc, #172]	; (800c3fc <netif_add+0x1a4>)
 800c34e:	4825      	ldr	r0, [pc, #148]	; (800c3e4 <netif_add+0x18c>)
 800c350:	f00c fd32 	bl	8018db8 <iprintf>
        num_netifs++;
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	3301      	adds	r3, #1
 800c358:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	2bff      	cmp	r3, #255	; 0xff
 800c35e:	dd06      	ble.n	800c36e <netif_add+0x116>
 800c360:	4b1e      	ldr	r3, [pc, #120]	; (800c3dc <netif_add+0x184>)
 800c362:	f240 128d 	movw	r2, #397	; 0x18d
 800c366:	4926      	ldr	r1, [pc, #152]	; (800c400 <netif_add+0x1a8>)
 800c368:	481e      	ldr	r0, [pc, #120]	; (800c3e4 <netif_add+0x18c>)
 800c36a:	f00c fd25 	bl	8018db8 <iprintf>
        if (netif2->num == netif->num) {
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d108      	bne.n	800c390 <netif_add+0x138>
          netif->num++;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c384:	3301      	adds	r3, #1
 800c386:	b2da      	uxtb	r2, r3
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800c38e:	e005      	b.n	800c39c <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	617b      	str	r3, [r7, #20]
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d1d0      	bne.n	800c33e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d1be      	bne.n	800c320 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c3a8:	2bfe      	cmp	r3, #254	; 0xfe
 800c3aa:	d103      	bne.n	800c3b4 <netif_add+0x15c>
    netif_num = 0;
 800c3ac:	4b11      	ldr	r3, [pc, #68]	; (800c3f4 <netif_add+0x19c>)
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	701a      	strb	r2, [r3, #0]
 800c3b2:	e006      	b.n	800c3c2 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	b2da      	uxtb	r2, r3
 800c3be:	4b0d      	ldr	r3, [pc, #52]	; (800c3f4 <netif_add+0x19c>)
 800c3c0:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c3c2:	4b0d      	ldr	r3, [pc, #52]	; (800c3f8 <netif_add+0x1a0>)
 800c3c4:	681a      	ldr	r2, [r3, #0]
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c3ca:	4a0b      	ldr	r2, [pc, #44]	; (800c3f8 <netif_add+0x1a0>)
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3718      	adds	r7, #24
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
 800c3da:	bf00      	nop
 800c3dc:	0801b3dc 	.word	0x0801b3dc
 800c3e0:	0801b470 	.word	0x0801b470
 800c3e4:	0801b42c 	.word	0x0801b42c
 800c3e8:	0801b48c 	.word	0x0801b48c
 800c3ec:	08028040 	.word	0x08028040
 800c3f0:	0800c81b 	.word	0x0800c81b
 800c3f4:	20010f6c 	.word	0x20010f6c
 800c3f8:	20010f64 	.word	0x20010f64
 800c3fc:	0801b4b0 	.word	0x0801b4b0
 800c400:	0801b4c4 	.word	0x0801b4c4

0800c404 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c40e:	6839      	ldr	r1, [r7, #0]
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f002 ffab 	bl	800f36c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c416:	6839      	ldr	r1, [r7, #0]
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f008 f825 	bl	8014468 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c41e:	bf00      	nop
 800c420:	3708      	adds	r7, #8
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
	...

0800c428 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b086      	sub	sp, #24
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d106      	bne.n	800c448 <netif_do_set_ipaddr+0x20>
 800c43a:	4b1d      	ldr	r3, [pc, #116]	; (800c4b0 <netif_do_set_ipaddr+0x88>)
 800c43c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c440:	491c      	ldr	r1, [pc, #112]	; (800c4b4 <netif_do_set_ipaddr+0x8c>)
 800c442:	481d      	ldr	r0, [pc, #116]	; (800c4b8 <netif_do_set_ipaddr+0x90>)
 800c444:	f00c fcb8 	bl	8018db8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d106      	bne.n	800c45c <netif_do_set_ipaddr+0x34>
 800c44e:	4b18      	ldr	r3, [pc, #96]	; (800c4b0 <netif_do_set_ipaddr+0x88>)
 800c450:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c454:	4917      	ldr	r1, [pc, #92]	; (800c4b4 <netif_do_set_ipaddr+0x8c>)
 800c456:	4818      	ldr	r0, [pc, #96]	; (800c4b8 <netif_do_set_ipaddr+0x90>)
 800c458:	f00c fcae 	bl	8018db8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	3304      	adds	r3, #4
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	429a      	cmp	r2, r3
 800c468:	d01c      	beq.n	800c4a4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	3304      	adds	r3, #4
 800c474:	681a      	ldr	r2, [r3, #0]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c47a:	f107 0314 	add.w	r3, r7, #20
 800c47e:	4619      	mov	r1, r3
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f7ff ffbf 	bl	800c404 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d002      	beq.n	800c492 <netif_do_set_ipaddr+0x6a>
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	e000      	b.n	800c494 <netif_do_set_ipaddr+0x6c>
 800c492:	2300      	movs	r3, #0
 800c494:	68fa      	ldr	r2, [r7, #12]
 800c496:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c498:	2101      	movs	r1, #1
 800c49a:	68f8      	ldr	r0, [r7, #12]
 800c49c:	f000 f8d2 	bl	800c644 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	e000      	b.n	800c4a6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c4a4:	2300      	movs	r3, #0
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3718      	adds	r7, #24
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	0801b3dc 	.word	0x0801b3dc
 800c4b4:	0801b4f4 	.word	0x0801b4f4
 800c4b8:	0801b42c 	.word	0x0801b42c

0800c4bc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b085      	sub	sp, #20
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	60f8      	str	r0, [r7, #12]
 800c4c4:	60b9      	str	r1, [r7, #8]
 800c4c6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	681a      	ldr	r2, [r3, #0]
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	3308      	adds	r3, #8
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d00a      	beq.n	800c4ec <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d002      	beq.n	800c4e2 <netif_do_set_netmask+0x26>
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	e000      	b.n	800c4e4 <netif_do_set_netmask+0x28>
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	68fa      	ldr	r2, [r7, #12]
 800c4e6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	e000      	b.n	800c4ee <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c4ec:	2300      	movs	r3, #0
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3714      	adds	r7, #20
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr

0800c4fa <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c4fa:	b480      	push	{r7}
 800c4fc:	b085      	sub	sp, #20
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	60f8      	str	r0, [r7, #12]
 800c502:	60b9      	str	r1, [r7, #8]
 800c504:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	681a      	ldr	r2, [r3, #0]
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	330c      	adds	r3, #12
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	429a      	cmp	r2, r3
 800c512:	d00a      	beq.n	800c52a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d002      	beq.n	800c520 <netif_do_set_gw+0x26>
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	e000      	b.n	800c522 <netif_do_set_gw+0x28>
 800c520:	2300      	movs	r3, #0
 800c522:	68fa      	ldr	r2, [r7, #12]
 800c524:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c526:	2301      	movs	r3, #1
 800c528:	e000      	b.n	800c52c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c52a:	2300      	movs	r3, #0
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3714      	adds	r7, #20
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr

0800c538 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b088      	sub	sp, #32
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	60f8      	str	r0, [r7, #12]
 800c540:	60b9      	str	r1, [r7, #8]
 800c542:	607a      	str	r2, [r7, #4]
 800c544:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c546:	2300      	movs	r3, #0
 800c548:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c54a:	2300      	movs	r3, #0
 800c54c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d101      	bne.n	800c558 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c554:	4b1c      	ldr	r3, [pc, #112]	; (800c5c8 <netif_set_addr+0x90>)
 800c556:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d101      	bne.n	800c562 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c55e:	4b1a      	ldr	r3, [pc, #104]	; (800c5c8 <netif_set_addr+0x90>)
 800c560:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d101      	bne.n	800c56c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c568:	4b17      	ldr	r3, [pc, #92]	; (800c5c8 <netif_set_addr+0x90>)
 800c56a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d003      	beq.n	800c57a <netif_set_addr+0x42>
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d101      	bne.n	800c57e <netif_set_addr+0x46>
 800c57a:	2301      	movs	r3, #1
 800c57c:	e000      	b.n	800c580 <netif_set_addr+0x48>
 800c57e:	2300      	movs	r3, #0
 800c580:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d006      	beq.n	800c596 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c588:	f107 0310 	add.w	r3, r7, #16
 800c58c:	461a      	mov	r2, r3
 800c58e:	68b9      	ldr	r1, [r7, #8]
 800c590:	68f8      	ldr	r0, [r7, #12]
 800c592:	f7ff ff49 	bl	800c428 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c596:	69fa      	ldr	r2, [r7, #28]
 800c598:	6879      	ldr	r1, [r7, #4]
 800c59a:	68f8      	ldr	r0, [r7, #12]
 800c59c:	f7ff ff8e 	bl	800c4bc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c5a0:	69ba      	ldr	r2, [r7, #24]
 800c5a2:	6839      	ldr	r1, [r7, #0]
 800c5a4:	68f8      	ldr	r0, [r7, #12]
 800c5a6:	f7ff ffa8 	bl	800c4fa <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d106      	bne.n	800c5be <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c5b0:	f107 0310 	add.w	r3, r7, #16
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	68b9      	ldr	r1, [r7, #8]
 800c5b8:	68f8      	ldr	r0, [r7, #12]
 800c5ba:	f7ff ff35 	bl	800c428 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c5be:	bf00      	nop
 800c5c0:	3720      	adds	r7, #32
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	08028040 	.word	0x08028040

0800c5cc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b083      	sub	sp, #12
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c5d4:	4a04      	ldr	r2, [pc, #16]	; (800c5e8 <netif_set_default+0x1c>)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c5da:	bf00      	nop
 800c5dc:	370c      	adds	r7, #12
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e4:	4770      	bx	lr
 800c5e6:	bf00      	nop
 800c5e8:	20010f68 	.word	0x20010f68

0800c5ec <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b082      	sub	sp, #8
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d107      	bne.n	800c60a <netif_set_up+0x1e>
 800c5fa:	4b0f      	ldr	r3, [pc, #60]	; (800c638 <netif_set_up+0x4c>)
 800c5fc:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c600:	490e      	ldr	r1, [pc, #56]	; (800c63c <netif_set_up+0x50>)
 800c602:	480f      	ldr	r0, [pc, #60]	; (800c640 <netif_set_up+0x54>)
 800c604:	f00c fbd8 	bl	8018db8 <iprintf>
 800c608:	e013      	b.n	800c632 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c610:	f003 0301 	and.w	r3, r3, #1
 800c614:	2b00      	cmp	r3, #0
 800c616:	d10c      	bne.n	800c632 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c61e:	f043 0301 	orr.w	r3, r3, #1
 800c622:	b2da      	uxtb	r2, r3
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c62a:	2103      	movs	r1, #3
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f000 f809 	bl	800c644 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c632:	3708      	adds	r7, #8
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}
 800c638:	0801b3dc 	.word	0x0801b3dc
 800c63c:	0801b564 	.word	0x0801b564
 800c640:	0801b42c 	.word	0x0801b42c

0800c644 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	460b      	mov	r3, r1
 800c64e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d106      	bne.n	800c664 <netif_issue_reports+0x20>
 800c656:	4b18      	ldr	r3, [pc, #96]	; (800c6b8 <netif_issue_reports+0x74>)
 800c658:	f240 326d 	movw	r2, #877	; 0x36d
 800c65c:	4917      	ldr	r1, [pc, #92]	; (800c6bc <netif_issue_reports+0x78>)
 800c65e:	4818      	ldr	r0, [pc, #96]	; (800c6c0 <netif_issue_reports+0x7c>)
 800c660:	f00c fbaa 	bl	8018db8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c66a:	f003 0304 	and.w	r3, r3, #4
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d01e      	beq.n	800c6b0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c678:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d017      	beq.n	800c6b0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c680:	78fb      	ldrb	r3, [r7, #3]
 800c682:	f003 0301 	and.w	r3, r3, #1
 800c686:	2b00      	cmp	r3, #0
 800c688:	d013      	beq.n	800c6b2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	3304      	adds	r3, #4
 800c68e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c690:	2b00      	cmp	r3, #0
 800c692:	d00e      	beq.n	800c6b2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c69a:	f003 0308 	and.w	r3, r3, #8
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d007      	beq.n	800c6b2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	3304      	adds	r3, #4
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f00a fcdd 	bl	8017068 <etharp_request>
 800c6ae:	e000      	b.n	800c6b2 <netif_issue_reports+0x6e>
    return;
 800c6b0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c6b2:	3708      	adds	r7, #8
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	0801b3dc 	.word	0x0801b3dc
 800c6bc:	0801b580 	.word	0x0801b580
 800c6c0:	0801b42c 	.word	0x0801b42c

0800c6c4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b082      	sub	sp, #8
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d107      	bne.n	800c6e2 <netif_set_down+0x1e>
 800c6d2:	4b12      	ldr	r3, [pc, #72]	; (800c71c <netif_set_down+0x58>)
 800c6d4:	f240 329b 	movw	r2, #923	; 0x39b
 800c6d8:	4911      	ldr	r1, [pc, #68]	; (800c720 <netif_set_down+0x5c>)
 800c6da:	4812      	ldr	r0, [pc, #72]	; (800c724 <netif_set_down+0x60>)
 800c6dc:	f00c fb6c 	bl	8018db8 <iprintf>
 800c6e0:	e019      	b.n	800c716 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c6e8:	f003 0301 	and.w	r3, r3, #1
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d012      	beq.n	800c716 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c6f6:	f023 0301 	bic.w	r3, r3, #1
 800c6fa:	b2da      	uxtb	r2, r3
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c708:	f003 0308 	and.w	r3, r3, #8
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d002      	beq.n	800c716 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f00a f863 	bl	80167dc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c716:	3708      	adds	r7, #8
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}
 800c71c:	0801b3dc 	.word	0x0801b3dc
 800c720:	0801b5a4 	.word	0x0801b5a4
 800c724:	0801b42c 	.word	0x0801b42c

0800c728 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b082      	sub	sp, #8
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d107      	bne.n	800c746 <netif_set_link_up+0x1e>
 800c736:	4b15      	ldr	r3, [pc, #84]	; (800c78c <netif_set_link_up+0x64>)
 800c738:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800c73c:	4914      	ldr	r1, [pc, #80]	; (800c790 <netif_set_link_up+0x68>)
 800c73e:	4815      	ldr	r0, [pc, #84]	; (800c794 <netif_set_link_up+0x6c>)
 800c740:	f00c fb3a 	bl	8018db8 <iprintf>
 800c744:	e01e      	b.n	800c784 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c74c:	f003 0304 	and.w	r3, r3, #4
 800c750:	2b00      	cmp	r3, #0
 800c752:	d117      	bne.n	800c784 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c75a:	f043 0304 	orr.w	r3, r3, #4
 800c75e:	b2da      	uxtb	r2, r3
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f008 faa8 	bl	8014cbc <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c76c:	2103      	movs	r1, #3
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f7ff ff68 	bl	800c644 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	69db      	ldr	r3, [r3, #28]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d003      	beq.n	800c784 <netif_set_link_up+0x5c>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	69db      	ldr	r3, [r3, #28]
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c784:	3708      	adds	r7, #8
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	0801b3dc 	.word	0x0801b3dc
 800c790:	0801b5c4 	.word	0x0801b5c4
 800c794:	0801b42c 	.word	0x0801b42c

0800c798 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d107      	bne.n	800c7b6 <netif_set_link_down+0x1e>
 800c7a6:	4b11      	ldr	r3, [pc, #68]	; (800c7ec <netif_set_link_down+0x54>)
 800c7a8:	f240 4206 	movw	r2, #1030	; 0x406
 800c7ac:	4910      	ldr	r1, [pc, #64]	; (800c7f0 <netif_set_link_down+0x58>)
 800c7ae:	4811      	ldr	r0, [pc, #68]	; (800c7f4 <netif_set_link_down+0x5c>)
 800c7b0:	f00c fb02 	bl	8018db8 <iprintf>
 800c7b4:	e017      	b.n	800c7e6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c7bc:	f003 0304 	and.w	r3, r3, #4
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d010      	beq.n	800c7e6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c7ca:	f023 0304 	bic.w	r3, r3, #4
 800c7ce:	b2da      	uxtb	r2, r3
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	69db      	ldr	r3, [r3, #28]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d003      	beq.n	800c7e6 <netif_set_link_down+0x4e>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	69db      	ldr	r3, [r3, #28]
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c7e6:	3708      	adds	r7, #8
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}
 800c7ec:	0801b3dc 	.word	0x0801b3dc
 800c7f0:	0801b5e8 	.word	0x0801b5e8
 800c7f4:	0801b42c 	.word	0x0801b42c

0800c7f8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b083      	sub	sp, #12
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
 800c800:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d002      	beq.n	800c80e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	683a      	ldr	r2, [r7, #0]
 800c80c:	61da      	str	r2, [r3, #28]
  }
}
 800c80e:	bf00      	nop
 800c810:	370c      	adds	r7, #12
 800c812:	46bd      	mov	sp, r7
 800c814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c818:	4770      	bx	lr

0800c81a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c81a:	b480      	push	{r7}
 800c81c:	b085      	sub	sp, #20
 800c81e:	af00      	add	r7, sp, #0
 800c820:	60f8      	str	r0, [r7, #12]
 800c822:	60b9      	str	r1, [r7, #8]
 800c824:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c826:	f06f 030b 	mvn.w	r3, #11
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3714      	adds	r7, #20
 800c82e:	46bd      	mov	sp, r7
 800c830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c834:	4770      	bx	lr
	...

0800c838 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c838:	b480      	push	{r7}
 800c83a:	b085      	sub	sp, #20
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	4603      	mov	r3, r0
 800c840:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c842:	79fb      	ldrb	r3, [r7, #7]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d013      	beq.n	800c870 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c848:	4b0d      	ldr	r3, [pc, #52]	; (800c880 <netif_get_by_index+0x48>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	60fb      	str	r3, [r7, #12]
 800c84e:	e00c      	b.n	800c86a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c856:	3301      	adds	r3, #1
 800c858:	b2db      	uxtb	r3, r3
 800c85a:	79fa      	ldrb	r2, [r7, #7]
 800c85c:	429a      	cmp	r2, r3
 800c85e:	d101      	bne.n	800c864 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	e006      	b.n	800c872 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	60fb      	str	r3, [r7, #12]
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d1ef      	bne.n	800c850 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c870:	2300      	movs	r3, #0
}
 800c872:	4618      	mov	r0, r3
 800c874:	3714      	adds	r7, #20
 800c876:	46bd      	mov	sp, r7
 800c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87c:	4770      	bx	lr
 800c87e:	bf00      	nop
 800c880:	20010f64 	.word	0x20010f64

0800c884 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b082      	sub	sp, #8
 800c888:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c88a:	f00c f95b 	bl	8018b44 <sys_arch_protect>
 800c88e:	6038      	str	r0, [r7, #0]
 800c890:	4b0d      	ldr	r3, [pc, #52]	; (800c8c8 <pbuf_free_ooseq+0x44>)
 800c892:	2200      	movs	r2, #0
 800c894:	701a      	strb	r2, [r3, #0]
 800c896:	6838      	ldr	r0, [r7, #0]
 800c898:	f00c f962 	bl	8018b60 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c89c:	4b0b      	ldr	r3, [pc, #44]	; (800c8cc <pbuf_free_ooseq+0x48>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	607b      	str	r3, [r7, #4]
 800c8a2:	e00a      	b.n	800c8ba <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d003      	beq.n	800c8b4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f002 fd9b 	bl	800f3e8 <tcp_free_ooseq>
      return;
 800c8b2:	e005      	b.n	800c8c0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	68db      	ldr	r3, [r3, #12]
 800c8b8:	607b      	str	r3, [r7, #4]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d1f1      	bne.n	800c8a4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c8c0:	3708      	adds	r7, #8
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	20010f6d 	.word	0x20010f6d
 800c8cc:	20010f7c 	.word	0x20010f7c

0800c8d0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b082      	sub	sp, #8
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c8d8:	f7ff ffd4 	bl	800c884 <pbuf_free_ooseq>
}
 800c8dc:	bf00      	nop
 800c8de:	3708      	adds	r7, #8
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c8ea:	f00c f92b 	bl	8018b44 <sys_arch_protect>
 800c8ee:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c8f0:	4b0f      	ldr	r3, [pc, #60]	; (800c930 <pbuf_pool_is_empty+0x4c>)
 800c8f2:	781b      	ldrb	r3, [r3, #0]
 800c8f4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c8f6:	4b0e      	ldr	r3, [pc, #56]	; (800c930 <pbuf_pool_is_empty+0x4c>)
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f00c f92f 	bl	8018b60 <sys_arch_unprotect>

  if (!queued) {
 800c902:	78fb      	ldrb	r3, [r7, #3]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d10f      	bne.n	800c928 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c908:	2100      	movs	r1, #0
 800c90a:	480a      	ldr	r0, [pc, #40]	; (800c934 <pbuf_pool_is_empty+0x50>)
 800c90c:	f7fe f834 	bl	800a978 <tcpip_try_callback>
 800c910:	4603      	mov	r3, r0
 800c912:	2b00      	cmp	r3, #0
 800c914:	d008      	beq.n	800c928 <pbuf_pool_is_empty+0x44>
 800c916:	f00c f915 	bl	8018b44 <sys_arch_protect>
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	4b04      	ldr	r3, [pc, #16]	; (800c930 <pbuf_pool_is_empty+0x4c>)
 800c91e:	2200      	movs	r2, #0
 800c920:	701a      	strb	r2, [r3, #0]
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f00c f91c 	bl	8018b60 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c928:	bf00      	nop
 800c92a:	3708      	adds	r7, #8
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	20010f6d 	.word	0x20010f6d
 800c934:	0800c8d1 	.word	0x0800c8d1

0800c938 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c938:	b480      	push	{r7}
 800c93a:	b085      	sub	sp, #20
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	60f8      	str	r0, [r7, #12]
 800c940:	60b9      	str	r1, [r7, #8]
 800c942:	4611      	mov	r1, r2
 800c944:	461a      	mov	r2, r3
 800c946:	460b      	mov	r3, r1
 800c948:	80fb      	strh	r3, [r7, #6]
 800c94a:	4613      	mov	r3, r2
 800c94c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	2200      	movs	r2, #0
 800c952:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	68ba      	ldr	r2, [r7, #8]
 800c958:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	88fa      	ldrh	r2, [r7, #6]
 800c95e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	88ba      	ldrh	r2, [r7, #4]
 800c964:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c966:	8b3b      	ldrh	r3, [r7, #24]
 800c968:	b2da      	uxtb	r2, r3
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	7f3a      	ldrb	r2, [r7, #28]
 800c972:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2201      	movs	r2, #1
 800c978:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2200      	movs	r2, #0
 800c97e:	73da      	strb	r2, [r3, #15]
}
 800c980:	bf00      	nop
 800c982:	3714      	adds	r7, #20
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr

0800c98c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b08c      	sub	sp, #48	; 0x30
 800c990:	af02      	add	r7, sp, #8
 800c992:	4603      	mov	r3, r0
 800c994:	71fb      	strb	r3, [r7, #7]
 800c996:	460b      	mov	r3, r1
 800c998:	80bb      	strh	r3, [r7, #4]
 800c99a:	4613      	mov	r3, r2
 800c99c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c99e:	79fb      	ldrb	r3, [r7, #7]
 800c9a0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c9a2:	887b      	ldrh	r3, [r7, #2]
 800c9a4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c9a8:	d07f      	beq.n	800caaa <pbuf_alloc+0x11e>
 800c9aa:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c9ae:	f300 80c8 	bgt.w	800cb42 <pbuf_alloc+0x1b6>
 800c9b2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c9b6:	d010      	beq.n	800c9da <pbuf_alloc+0x4e>
 800c9b8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c9bc:	f300 80c1 	bgt.w	800cb42 <pbuf_alloc+0x1b6>
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d002      	beq.n	800c9ca <pbuf_alloc+0x3e>
 800c9c4:	2b41      	cmp	r3, #65	; 0x41
 800c9c6:	f040 80bc 	bne.w	800cb42 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c9ca:	887a      	ldrh	r2, [r7, #2]
 800c9cc:	88bb      	ldrh	r3, [r7, #4]
 800c9ce:	4619      	mov	r1, r3
 800c9d0:	2000      	movs	r0, #0
 800c9d2:	f000 f8d1 	bl	800cb78 <pbuf_alloc_reference>
 800c9d6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c9d8:	e0bd      	b.n	800cb56 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c9e2:	88bb      	ldrh	r3, [r7, #4]
 800c9e4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c9e6:	200c      	movs	r0, #12
 800c9e8:	f7ff fb8e 	bl	800c108 <memp_malloc>
 800c9ec:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c9ee:	693b      	ldr	r3, [r7, #16]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d109      	bne.n	800ca08 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c9f4:	f7ff ff76 	bl	800c8e4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d002      	beq.n	800ca04 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c9fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca00:	f000 faa8 	bl	800cf54 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ca04:	2300      	movs	r3, #0
 800ca06:	e0a7      	b.n	800cb58 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ca08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca0a:	3303      	adds	r3, #3
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	f023 0303 	bic.w	r3, r3, #3
 800ca12:	b29b      	uxth	r3, r3
 800ca14:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800ca18:	b29b      	uxth	r3, r3
 800ca1a:	8b7a      	ldrh	r2, [r7, #26]
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	bf28      	it	cs
 800ca20:	4613      	movcs	r3, r2
 800ca22:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ca24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca26:	3310      	adds	r3, #16
 800ca28:	693a      	ldr	r2, [r7, #16]
 800ca2a:	4413      	add	r3, r2
 800ca2c:	3303      	adds	r3, #3
 800ca2e:	f023 0303 	bic.w	r3, r3, #3
 800ca32:	4618      	mov	r0, r3
 800ca34:	89f9      	ldrh	r1, [r7, #14]
 800ca36:	8b7a      	ldrh	r2, [r7, #26]
 800ca38:	2300      	movs	r3, #0
 800ca3a:	9301      	str	r3, [sp, #4]
 800ca3c:	887b      	ldrh	r3, [r7, #2]
 800ca3e:	9300      	str	r3, [sp, #0]
 800ca40:	460b      	mov	r3, r1
 800ca42:	4601      	mov	r1, r0
 800ca44:	6938      	ldr	r0, [r7, #16]
 800ca46:	f7ff ff77 	bl	800c938 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	685b      	ldr	r3, [r3, #4]
 800ca4e:	f003 0303 	and.w	r3, r3, #3
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d006      	beq.n	800ca64 <pbuf_alloc+0xd8>
 800ca56:	4b42      	ldr	r3, [pc, #264]	; (800cb60 <pbuf_alloc+0x1d4>)
 800ca58:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ca5c:	4941      	ldr	r1, [pc, #260]	; (800cb64 <pbuf_alloc+0x1d8>)
 800ca5e:	4842      	ldr	r0, [pc, #264]	; (800cb68 <pbuf_alloc+0x1dc>)
 800ca60:	f00c f9aa 	bl	8018db8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ca64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca66:	3303      	adds	r3, #3
 800ca68:	f023 0303 	bic.w	r3, r3, #3
 800ca6c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800ca70:	d106      	bne.n	800ca80 <pbuf_alloc+0xf4>
 800ca72:	4b3b      	ldr	r3, [pc, #236]	; (800cb60 <pbuf_alloc+0x1d4>)
 800ca74:	f44f 7281 	mov.w	r2, #258	; 0x102
 800ca78:	493c      	ldr	r1, [pc, #240]	; (800cb6c <pbuf_alloc+0x1e0>)
 800ca7a:	483b      	ldr	r0, [pc, #236]	; (800cb68 <pbuf_alloc+0x1dc>)
 800ca7c:	f00c f99c 	bl	8018db8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ca80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d102      	bne.n	800ca8c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	627b      	str	r3, [r7, #36]	; 0x24
 800ca8a:	e002      	b.n	800ca92 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ca8c:	69fb      	ldr	r3, [r7, #28]
 800ca8e:	693a      	ldr	r2, [r7, #16]
 800ca90:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ca96:	8b7a      	ldrh	r2, [r7, #26]
 800ca98:	89fb      	ldrh	r3, [r7, #14]
 800ca9a:	1ad3      	subs	r3, r2, r3
 800ca9c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800caa2:	8b7b      	ldrh	r3, [r7, #26]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d19e      	bne.n	800c9e6 <pbuf_alloc+0x5a>
      break;
 800caa8:	e055      	b.n	800cb56 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800caaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800caac:	3303      	adds	r3, #3
 800caae:	b29b      	uxth	r3, r3
 800cab0:	f023 0303 	bic.w	r3, r3, #3
 800cab4:	b29a      	uxth	r2, r3
 800cab6:	88bb      	ldrh	r3, [r7, #4]
 800cab8:	3303      	adds	r3, #3
 800caba:	b29b      	uxth	r3, r3
 800cabc:	f023 0303 	bic.w	r3, r3, #3
 800cac0:	b29b      	uxth	r3, r3
 800cac2:	4413      	add	r3, r2
 800cac4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cac6:	8b3b      	ldrh	r3, [r7, #24]
 800cac8:	3310      	adds	r3, #16
 800caca:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cacc:	8b3a      	ldrh	r2, [r7, #24]
 800cace:	88bb      	ldrh	r3, [r7, #4]
 800cad0:	3303      	adds	r3, #3
 800cad2:	f023 0303 	bic.w	r3, r3, #3
 800cad6:	429a      	cmp	r2, r3
 800cad8:	d306      	bcc.n	800cae8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800cada:	8afa      	ldrh	r2, [r7, #22]
 800cadc:	88bb      	ldrh	r3, [r7, #4]
 800cade:	3303      	adds	r3, #3
 800cae0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d201      	bcs.n	800caec <pbuf_alloc+0x160>
        return NULL;
 800cae8:	2300      	movs	r3, #0
 800caea:	e035      	b.n	800cb58 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800caec:	8afb      	ldrh	r3, [r7, #22]
 800caee:	4618      	mov	r0, r3
 800caf0:	f7ff f966 	bl	800bdc0 <mem_malloc>
 800caf4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800caf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d101      	bne.n	800cb00 <pbuf_alloc+0x174>
        return NULL;
 800cafc:	2300      	movs	r3, #0
 800cafe:	e02b      	b.n	800cb58 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cb00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb02:	3310      	adds	r3, #16
 800cb04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb06:	4413      	add	r3, r2
 800cb08:	3303      	adds	r3, #3
 800cb0a:	f023 0303 	bic.w	r3, r3, #3
 800cb0e:	4618      	mov	r0, r3
 800cb10:	88b9      	ldrh	r1, [r7, #4]
 800cb12:	88ba      	ldrh	r2, [r7, #4]
 800cb14:	2300      	movs	r3, #0
 800cb16:	9301      	str	r3, [sp, #4]
 800cb18:	887b      	ldrh	r3, [r7, #2]
 800cb1a:	9300      	str	r3, [sp, #0]
 800cb1c:	460b      	mov	r3, r1
 800cb1e:	4601      	mov	r1, r0
 800cb20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb22:	f7ff ff09 	bl	800c938 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb28:	685b      	ldr	r3, [r3, #4]
 800cb2a:	f003 0303 	and.w	r3, r3, #3
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d010      	beq.n	800cb54 <pbuf_alloc+0x1c8>
 800cb32:	4b0b      	ldr	r3, [pc, #44]	; (800cb60 <pbuf_alloc+0x1d4>)
 800cb34:	f44f 7291 	mov.w	r2, #290	; 0x122
 800cb38:	490d      	ldr	r1, [pc, #52]	; (800cb70 <pbuf_alloc+0x1e4>)
 800cb3a:	480b      	ldr	r0, [pc, #44]	; (800cb68 <pbuf_alloc+0x1dc>)
 800cb3c:	f00c f93c 	bl	8018db8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cb40:	e008      	b.n	800cb54 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cb42:	4b07      	ldr	r3, [pc, #28]	; (800cb60 <pbuf_alloc+0x1d4>)
 800cb44:	f240 1227 	movw	r2, #295	; 0x127
 800cb48:	490a      	ldr	r1, [pc, #40]	; (800cb74 <pbuf_alloc+0x1e8>)
 800cb4a:	4807      	ldr	r0, [pc, #28]	; (800cb68 <pbuf_alloc+0x1dc>)
 800cb4c:	f00c f934 	bl	8018db8 <iprintf>
      return NULL;
 800cb50:	2300      	movs	r3, #0
 800cb52:	e001      	b.n	800cb58 <pbuf_alloc+0x1cc>
      break;
 800cb54:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3728      	adds	r7, #40	; 0x28
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}
 800cb60:	0801b60c 	.word	0x0801b60c
 800cb64:	0801b63c 	.word	0x0801b63c
 800cb68:	0801b66c 	.word	0x0801b66c
 800cb6c:	0801b694 	.word	0x0801b694
 800cb70:	0801b6c8 	.word	0x0801b6c8
 800cb74:	0801b6f4 	.word	0x0801b6f4

0800cb78 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b086      	sub	sp, #24
 800cb7c:	af02      	add	r7, sp, #8
 800cb7e:	6078      	str	r0, [r7, #4]
 800cb80:	460b      	mov	r3, r1
 800cb82:	807b      	strh	r3, [r7, #2]
 800cb84:	4613      	mov	r3, r2
 800cb86:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800cb88:	883b      	ldrh	r3, [r7, #0]
 800cb8a:	2b41      	cmp	r3, #65	; 0x41
 800cb8c:	d009      	beq.n	800cba2 <pbuf_alloc_reference+0x2a>
 800cb8e:	883b      	ldrh	r3, [r7, #0]
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d006      	beq.n	800cba2 <pbuf_alloc_reference+0x2a>
 800cb94:	4b0f      	ldr	r3, [pc, #60]	; (800cbd4 <pbuf_alloc_reference+0x5c>)
 800cb96:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800cb9a:	490f      	ldr	r1, [pc, #60]	; (800cbd8 <pbuf_alloc_reference+0x60>)
 800cb9c:	480f      	ldr	r0, [pc, #60]	; (800cbdc <pbuf_alloc_reference+0x64>)
 800cb9e:	f00c f90b 	bl	8018db8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800cba2:	200b      	movs	r0, #11
 800cba4:	f7ff fab0 	bl	800c108 <memp_malloc>
 800cba8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d101      	bne.n	800cbb4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	e00b      	b.n	800cbcc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800cbb4:	8879      	ldrh	r1, [r7, #2]
 800cbb6:	887a      	ldrh	r2, [r7, #2]
 800cbb8:	2300      	movs	r3, #0
 800cbba:	9301      	str	r3, [sp, #4]
 800cbbc:	883b      	ldrh	r3, [r7, #0]
 800cbbe:	9300      	str	r3, [sp, #0]
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	6879      	ldr	r1, [r7, #4]
 800cbc4:	68f8      	ldr	r0, [r7, #12]
 800cbc6:	f7ff feb7 	bl	800c938 <pbuf_init_alloced_pbuf>
  return p;
 800cbca:	68fb      	ldr	r3, [r7, #12]
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3710      	adds	r7, #16
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	0801b60c 	.word	0x0801b60c
 800cbd8:	0801b710 	.word	0x0801b710
 800cbdc:	0801b66c 	.word	0x0801b66c

0800cbe0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b088      	sub	sp, #32
 800cbe4:	af02      	add	r7, sp, #8
 800cbe6:	607b      	str	r3, [r7, #4]
 800cbe8:	4603      	mov	r3, r0
 800cbea:	73fb      	strb	r3, [r7, #15]
 800cbec:	460b      	mov	r3, r1
 800cbee:	81bb      	strh	r3, [r7, #12]
 800cbf0:	4613      	mov	r3, r2
 800cbf2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800cbf4:	7bfb      	ldrb	r3, [r7, #15]
 800cbf6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cbf8:	8a7b      	ldrh	r3, [r7, #18]
 800cbfa:	3303      	adds	r3, #3
 800cbfc:	f023 0203 	bic.w	r2, r3, #3
 800cc00:	89bb      	ldrh	r3, [r7, #12]
 800cc02:	441a      	add	r2, r3
 800cc04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc06:	429a      	cmp	r2, r3
 800cc08:	d901      	bls.n	800cc0e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	e018      	b.n	800cc40 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800cc0e:	6a3b      	ldr	r3, [r7, #32]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d007      	beq.n	800cc24 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cc14:	8a7b      	ldrh	r3, [r7, #18]
 800cc16:	3303      	adds	r3, #3
 800cc18:	f023 0303 	bic.w	r3, r3, #3
 800cc1c:	6a3a      	ldr	r2, [r7, #32]
 800cc1e:	4413      	add	r3, r2
 800cc20:	617b      	str	r3, [r7, #20]
 800cc22:	e001      	b.n	800cc28 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cc24:	2300      	movs	r3, #0
 800cc26:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	89b9      	ldrh	r1, [r7, #12]
 800cc2c:	89ba      	ldrh	r2, [r7, #12]
 800cc2e:	2302      	movs	r3, #2
 800cc30:	9301      	str	r3, [sp, #4]
 800cc32:	897b      	ldrh	r3, [r7, #10]
 800cc34:	9300      	str	r3, [sp, #0]
 800cc36:	460b      	mov	r3, r1
 800cc38:	6979      	ldr	r1, [r7, #20]
 800cc3a:	f7ff fe7d 	bl	800c938 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cc3e:	687b      	ldr	r3, [r7, #4]
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3718      	adds	r7, #24
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	460b      	mov	r3, r1
 800cc52:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d106      	bne.n	800cc68 <pbuf_realloc+0x20>
 800cc5a:	4b3a      	ldr	r3, [pc, #232]	; (800cd44 <pbuf_realloc+0xfc>)
 800cc5c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800cc60:	4939      	ldr	r1, [pc, #228]	; (800cd48 <pbuf_realloc+0x100>)
 800cc62:	483a      	ldr	r0, [pc, #232]	; (800cd4c <pbuf_realloc+0x104>)
 800cc64:	f00c f8a8 	bl	8018db8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	891b      	ldrh	r3, [r3, #8]
 800cc6c:	887a      	ldrh	r2, [r7, #2]
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d263      	bcs.n	800cd3a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	891a      	ldrh	r2, [r3, #8]
 800cc76:	887b      	ldrh	r3, [r7, #2]
 800cc78:	1ad3      	subs	r3, r2, r3
 800cc7a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cc7c:	887b      	ldrh	r3, [r7, #2]
 800cc7e:	817b      	strh	r3, [r7, #10]
  q = p;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cc84:	e018      	b.n	800ccb8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	895b      	ldrh	r3, [r3, #10]
 800cc8a:	897a      	ldrh	r2, [r7, #10]
 800cc8c:	1ad3      	subs	r3, r2, r3
 800cc8e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	891a      	ldrh	r2, [r3, #8]
 800cc94:	893b      	ldrh	r3, [r7, #8]
 800cc96:	1ad3      	subs	r3, r2, r3
 800cc98:	b29a      	uxth	r2, r3
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d106      	bne.n	800ccb8 <pbuf_realloc+0x70>
 800ccaa:	4b26      	ldr	r3, [pc, #152]	; (800cd44 <pbuf_realloc+0xfc>)
 800ccac:	f240 12af 	movw	r2, #431	; 0x1af
 800ccb0:	4927      	ldr	r1, [pc, #156]	; (800cd50 <pbuf_realloc+0x108>)
 800ccb2:	4826      	ldr	r0, [pc, #152]	; (800cd4c <pbuf_realloc+0x104>)
 800ccb4:	f00c f880 	bl	8018db8 <iprintf>
  while (rem_len > q->len) {
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	895b      	ldrh	r3, [r3, #10]
 800ccbc:	897a      	ldrh	r2, [r7, #10]
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d8e1      	bhi.n	800cc86 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	7b1b      	ldrb	r3, [r3, #12]
 800ccc6:	f003 030f 	and.w	r3, r3, #15
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d121      	bne.n	800cd12 <pbuf_realloc+0xca>
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	895b      	ldrh	r3, [r3, #10]
 800ccd2:	897a      	ldrh	r2, [r7, #10]
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d01c      	beq.n	800cd12 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	7b5b      	ldrb	r3, [r3, #13]
 800ccdc:	f003 0302 	and.w	r3, r3, #2
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d116      	bne.n	800cd12 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	685a      	ldr	r2, [r3, #4]
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	1ad3      	subs	r3, r2, r3
 800ccec:	b29a      	uxth	r2, r3
 800ccee:	897b      	ldrh	r3, [r7, #10]
 800ccf0:	4413      	add	r3, r2
 800ccf2:	b29b      	uxth	r3, r3
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	68f8      	ldr	r0, [r7, #12]
 800ccf8:	f7fe ff58 	bl	800bbac <mem_trim>
 800ccfc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d106      	bne.n	800cd12 <pbuf_realloc+0xca>
 800cd04:	4b0f      	ldr	r3, [pc, #60]	; (800cd44 <pbuf_realloc+0xfc>)
 800cd06:	f240 12bd 	movw	r2, #445	; 0x1bd
 800cd0a:	4912      	ldr	r1, [pc, #72]	; (800cd54 <pbuf_realloc+0x10c>)
 800cd0c:	480f      	ldr	r0, [pc, #60]	; (800cd4c <pbuf_realloc+0x104>)
 800cd0e:	f00c f853 	bl	8018db8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	897a      	ldrh	r2, [r7, #10]
 800cd16:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	895a      	ldrh	r2, [r3, #10]
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d004      	beq.n	800cd32 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f000 f911 	bl	800cf54 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	2200      	movs	r2, #0
 800cd36:	601a      	str	r2, [r3, #0]
 800cd38:	e000      	b.n	800cd3c <pbuf_realloc+0xf4>
    return;
 800cd3a:	bf00      	nop

}
 800cd3c:	3710      	adds	r7, #16
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
 800cd42:	bf00      	nop
 800cd44:	0801b60c 	.word	0x0801b60c
 800cd48:	0801b724 	.word	0x0801b724
 800cd4c:	0801b66c 	.word	0x0801b66c
 800cd50:	0801b73c 	.word	0x0801b73c
 800cd54:	0801b754 	.word	0x0801b754

0800cd58 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b086      	sub	sp, #24
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	60f8      	str	r0, [r7, #12]
 800cd60:	60b9      	str	r1, [r7, #8]
 800cd62:	4613      	mov	r3, r2
 800cd64:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d106      	bne.n	800cd7a <pbuf_add_header_impl+0x22>
 800cd6c:	4b2b      	ldr	r3, [pc, #172]	; (800ce1c <pbuf_add_header_impl+0xc4>)
 800cd6e:	f240 12df 	movw	r2, #479	; 0x1df
 800cd72:	492b      	ldr	r1, [pc, #172]	; (800ce20 <pbuf_add_header_impl+0xc8>)
 800cd74:	482b      	ldr	r0, [pc, #172]	; (800ce24 <pbuf_add_header_impl+0xcc>)
 800cd76:	f00c f81f 	bl	8018db8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d003      	beq.n	800cd88 <pbuf_add_header_impl+0x30>
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd86:	d301      	bcc.n	800cd8c <pbuf_add_header_impl+0x34>
    return 1;
 800cd88:	2301      	movs	r3, #1
 800cd8a:	e043      	b.n	800ce14 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d101      	bne.n	800cd96 <pbuf_add_header_impl+0x3e>
    return 0;
 800cd92:	2300      	movs	r3, #0
 800cd94:	e03e      	b.n	800ce14 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	891a      	ldrh	r2, [r3, #8]
 800cd9e:	8a7b      	ldrh	r3, [r7, #18]
 800cda0:	4413      	add	r3, r2
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	8a7a      	ldrh	r2, [r7, #18]
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d901      	bls.n	800cdae <pbuf_add_header_impl+0x56>
    return 1;
 800cdaa:	2301      	movs	r3, #1
 800cdac:	e032      	b.n	800ce14 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	7b1b      	ldrb	r3, [r3, #12]
 800cdb2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800cdb4:	8a3b      	ldrh	r3, [r7, #16]
 800cdb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d00c      	beq.n	800cdd8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	685a      	ldr	r2, [r3, #4]
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	425b      	negs	r3, r3
 800cdc6:	4413      	add	r3, r2
 800cdc8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	3310      	adds	r3, #16
 800cdce:	697a      	ldr	r2, [r7, #20]
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d20d      	bcs.n	800cdf0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	e01d      	b.n	800ce14 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800cdd8:	79fb      	ldrb	r3, [r7, #7]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d006      	beq.n	800cdec <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	685a      	ldr	r2, [r3, #4]
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	425b      	negs	r3, r3
 800cde6:	4413      	add	r3, r2
 800cde8:	617b      	str	r3, [r7, #20]
 800cdea:	e001      	b.n	800cdf0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800cdec:	2301      	movs	r3, #1
 800cdee:	e011      	b.n	800ce14 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	697a      	ldr	r2, [r7, #20]
 800cdf4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	895a      	ldrh	r2, [r3, #10]
 800cdfa:	8a7b      	ldrh	r3, [r7, #18]
 800cdfc:	4413      	add	r3, r2
 800cdfe:	b29a      	uxth	r2, r3
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	891a      	ldrh	r2, [r3, #8]
 800ce08:	8a7b      	ldrh	r3, [r7, #18]
 800ce0a:	4413      	add	r3, r2
 800ce0c:	b29a      	uxth	r2, r3
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	811a      	strh	r2, [r3, #8]


  return 0;
 800ce12:	2300      	movs	r3, #0
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3718      	adds	r7, #24
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	0801b60c 	.word	0x0801b60c
 800ce20:	0801b770 	.word	0x0801b770
 800ce24:	0801b66c 	.word	0x0801b66c

0800ce28 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b082      	sub	sp, #8
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ce32:	2200      	movs	r2, #0
 800ce34:	6839      	ldr	r1, [r7, #0]
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f7ff ff8e 	bl	800cd58 <pbuf_add_header_impl>
 800ce3c:	4603      	mov	r3, r0
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3708      	adds	r7, #8
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}
	...

0800ce48 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b084      	sub	sp, #16
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d106      	bne.n	800ce66 <pbuf_remove_header+0x1e>
 800ce58:	4b20      	ldr	r3, [pc, #128]	; (800cedc <pbuf_remove_header+0x94>)
 800ce5a:	f240 224b 	movw	r2, #587	; 0x24b
 800ce5e:	4920      	ldr	r1, [pc, #128]	; (800cee0 <pbuf_remove_header+0x98>)
 800ce60:	4820      	ldr	r0, [pc, #128]	; (800cee4 <pbuf_remove_header+0x9c>)
 800ce62:	f00b ffa9 	bl	8018db8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d003      	beq.n	800ce74 <pbuf_remove_header+0x2c>
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce72:	d301      	bcc.n	800ce78 <pbuf_remove_header+0x30>
    return 1;
 800ce74:	2301      	movs	r3, #1
 800ce76:	e02c      	b.n	800ced2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d101      	bne.n	800ce82 <pbuf_remove_header+0x3a>
    return 0;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	e027      	b.n	800ced2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	895b      	ldrh	r3, [r3, #10]
 800ce8a:	89fa      	ldrh	r2, [r7, #14]
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d908      	bls.n	800cea2 <pbuf_remove_header+0x5a>
 800ce90:	4b12      	ldr	r3, [pc, #72]	; (800cedc <pbuf_remove_header+0x94>)
 800ce92:	f240 2255 	movw	r2, #597	; 0x255
 800ce96:	4914      	ldr	r1, [pc, #80]	; (800cee8 <pbuf_remove_header+0xa0>)
 800ce98:	4812      	ldr	r0, [pc, #72]	; (800cee4 <pbuf_remove_header+0x9c>)
 800ce9a:	f00b ff8d 	bl	8018db8 <iprintf>
 800ce9e:	2301      	movs	r3, #1
 800cea0:	e017      	b.n	800ced2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	685b      	ldr	r3, [r3, #4]
 800cea6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	685a      	ldr	r2, [r3, #4]
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	441a      	add	r2, r3
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	895a      	ldrh	r2, [r3, #10]
 800ceb8:	89fb      	ldrh	r3, [r7, #14]
 800ceba:	1ad3      	subs	r3, r2, r3
 800cebc:	b29a      	uxth	r2, r3
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	891a      	ldrh	r2, [r3, #8]
 800cec6:	89fb      	ldrh	r3, [r7, #14]
 800cec8:	1ad3      	subs	r3, r2, r3
 800ceca:	b29a      	uxth	r2, r3
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ced0:	2300      	movs	r3, #0
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	3710      	adds	r7, #16
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}
 800ceda:	bf00      	nop
 800cedc:	0801b60c 	.word	0x0801b60c
 800cee0:	0801b770 	.word	0x0801b770
 800cee4:	0801b66c 	.word	0x0801b66c
 800cee8:	0801b77c 	.word	0x0801b77c

0800ceec <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	460b      	mov	r3, r1
 800cef6:	807b      	strh	r3, [r7, #2]
 800cef8:	4613      	mov	r3, r2
 800cefa:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800cefc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	da08      	bge.n	800cf16 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800cf04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cf08:	425b      	negs	r3, r3
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f7ff ff9b 	bl	800ce48 <pbuf_remove_header>
 800cf12:	4603      	mov	r3, r0
 800cf14:	e007      	b.n	800cf26 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800cf16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cf1a:	787a      	ldrb	r2, [r7, #1]
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f7ff ff1a 	bl	800cd58 <pbuf_add_header_impl>
 800cf24:	4603      	mov	r3, r0
  }
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3708      	adds	r7, #8
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}

0800cf2e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800cf2e:	b580      	push	{r7, lr}
 800cf30:	b082      	sub	sp, #8
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	6078      	str	r0, [r7, #4]
 800cf36:	460b      	mov	r3, r1
 800cf38:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800cf3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cf3e:	2201      	movs	r2, #1
 800cf40:	4619      	mov	r1, r3
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f7ff ffd2 	bl	800ceec <pbuf_header_impl>
 800cf48:	4603      	mov	r3, r0
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3708      	adds	r7, #8
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}
	...

0800cf54 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b088      	sub	sp, #32
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d10b      	bne.n	800cf7a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d106      	bne.n	800cf76 <pbuf_free+0x22>
 800cf68:	4b3b      	ldr	r3, [pc, #236]	; (800d058 <pbuf_free+0x104>)
 800cf6a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800cf6e:	493b      	ldr	r1, [pc, #236]	; (800d05c <pbuf_free+0x108>)
 800cf70:	483b      	ldr	r0, [pc, #236]	; (800d060 <pbuf_free+0x10c>)
 800cf72:	f00b ff21 	bl	8018db8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800cf76:	2300      	movs	r3, #0
 800cf78:	e069      	b.n	800d04e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800cf7e:	e062      	b.n	800d046 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800cf80:	f00b fde0 	bl	8018b44 <sys_arch_protect>
 800cf84:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	7b9b      	ldrb	r3, [r3, #14]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d106      	bne.n	800cf9c <pbuf_free+0x48>
 800cf8e:	4b32      	ldr	r3, [pc, #200]	; (800d058 <pbuf_free+0x104>)
 800cf90:	f240 22f1 	movw	r2, #753	; 0x2f1
 800cf94:	4933      	ldr	r1, [pc, #204]	; (800d064 <pbuf_free+0x110>)
 800cf96:	4832      	ldr	r0, [pc, #200]	; (800d060 <pbuf_free+0x10c>)
 800cf98:	f00b ff0e 	bl	8018db8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	7b9b      	ldrb	r3, [r3, #14]
 800cfa0:	3b01      	subs	r3, #1
 800cfa2:	b2da      	uxtb	r2, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	739a      	strb	r2, [r3, #14]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	7b9b      	ldrb	r3, [r3, #14]
 800cfac:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800cfae:	69b8      	ldr	r0, [r7, #24]
 800cfb0:	f00b fdd6 	bl	8018b60 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800cfb4:	7dfb      	ldrb	r3, [r7, #23]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d143      	bne.n	800d042 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	7b1b      	ldrb	r3, [r3, #12]
 800cfc4:	f003 030f 	and.w	r3, r3, #15
 800cfc8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	7b5b      	ldrb	r3, [r3, #13]
 800cfce:	f003 0302 	and.w	r3, r3, #2
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d011      	beq.n	800cffa <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	691b      	ldr	r3, [r3, #16]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d106      	bne.n	800cff0 <pbuf_free+0x9c>
 800cfe2:	4b1d      	ldr	r3, [pc, #116]	; (800d058 <pbuf_free+0x104>)
 800cfe4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800cfe8:	491f      	ldr	r1, [pc, #124]	; (800d068 <pbuf_free+0x114>)
 800cfea:	481d      	ldr	r0, [pc, #116]	; (800d060 <pbuf_free+0x10c>)
 800cfec:	f00b fee4 	bl	8018db8 <iprintf>
        pc->custom_free_function(p);
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	691b      	ldr	r3, [r3, #16]
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	4798      	blx	r3
 800cff8:	e01d      	b.n	800d036 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800cffa:	7bfb      	ldrb	r3, [r7, #15]
 800cffc:	2b02      	cmp	r3, #2
 800cffe:	d104      	bne.n	800d00a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d000:	6879      	ldr	r1, [r7, #4]
 800d002:	200c      	movs	r0, #12
 800d004:	f7ff f8f6 	bl	800c1f4 <memp_free>
 800d008:	e015      	b.n	800d036 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d00a:	7bfb      	ldrb	r3, [r7, #15]
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	d104      	bne.n	800d01a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d010:	6879      	ldr	r1, [r7, #4]
 800d012:	200b      	movs	r0, #11
 800d014:	f7ff f8ee 	bl	800c1f4 <memp_free>
 800d018:	e00d      	b.n	800d036 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d01a:	7bfb      	ldrb	r3, [r7, #15]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d103      	bne.n	800d028 <pbuf_free+0xd4>
          mem_free(p);
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f7fe fd33 	bl	800ba8c <mem_free>
 800d026:	e006      	b.n	800d036 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d028:	4b0b      	ldr	r3, [pc, #44]	; (800d058 <pbuf_free+0x104>)
 800d02a:	f240 320f 	movw	r2, #783	; 0x30f
 800d02e:	490f      	ldr	r1, [pc, #60]	; (800d06c <pbuf_free+0x118>)
 800d030:	480b      	ldr	r0, [pc, #44]	; (800d060 <pbuf_free+0x10c>)
 800d032:	f00b fec1 	bl	8018db8 <iprintf>
        }
      }
      count++;
 800d036:	7ffb      	ldrb	r3, [r7, #31]
 800d038:	3301      	adds	r3, #1
 800d03a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	607b      	str	r3, [r7, #4]
 800d040:	e001      	b.n	800d046 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d042:	2300      	movs	r3, #0
 800d044:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d199      	bne.n	800cf80 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d04c:	7ffb      	ldrb	r3, [r7, #31]
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3720      	adds	r7, #32
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
 800d056:	bf00      	nop
 800d058:	0801b60c 	.word	0x0801b60c
 800d05c:	0801b770 	.word	0x0801b770
 800d060:	0801b66c 	.word	0x0801b66c
 800d064:	0801b79c 	.word	0x0801b79c
 800d068:	0801b7b4 	.word	0x0801b7b4
 800d06c:	0801b7d8 	.word	0x0801b7d8

0800d070 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d070:	b480      	push	{r7}
 800d072:	b085      	sub	sp, #20
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d078:	2300      	movs	r3, #0
 800d07a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d07c:	e005      	b.n	800d08a <pbuf_clen+0x1a>
    ++len;
 800d07e:	89fb      	ldrh	r3, [r7, #14]
 800d080:	3301      	adds	r3, #1
 800d082:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d1f6      	bne.n	800d07e <pbuf_clen+0xe>
  }
  return len;
 800d090:	89fb      	ldrh	r3, [r7, #14]
}
 800d092:	4618      	mov	r0, r3
 800d094:	3714      	adds	r7, #20
 800d096:	46bd      	mov	sp, r7
 800d098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09c:	4770      	bx	lr
	...

0800d0a0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b084      	sub	sp, #16
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d016      	beq.n	800d0dc <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d0ae:	f00b fd49 	bl	8018b44 <sys_arch_protect>
 800d0b2:	60f8      	str	r0, [r7, #12]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	7b9b      	ldrb	r3, [r3, #14]
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	b2da      	uxtb	r2, r3
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	739a      	strb	r2, [r3, #14]
 800d0c0:	68f8      	ldr	r0, [r7, #12]
 800d0c2:	f00b fd4d 	bl	8018b60 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	7b9b      	ldrb	r3, [r3, #14]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d106      	bne.n	800d0dc <pbuf_ref+0x3c>
 800d0ce:	4b05      	ldr	r3, [pc, #20]	; (800d0e4 <pbuf_ref+0x44>)
 800d0d0:	f240 3242 	movw	r2, #834	; 0x342
 800d0d4:	4904      	ldr	r1, [pc, #16]	; (800d0e8 <pbuf_ref+0x48>)
 800d0d6:	4805      	ldr	r0, [pc, #20]	; (800d0ec <pbuf_ref+0x4c>)
 800d0d8:	f00b fe6e 	bl	8018db8 <iprintf>
  }
}
 800d0dc:	bf00      	nop
 800d0de:	3710      	adds	r7, #16
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}
 800d0e4:	0801b60c 	.word	0x0801b60c
 800d0e8:	0801b7ec 	.word	0x0801b7ec
 800d0ec:	0801b66c 	.word	0x0801b66c

0800d0f0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b084      	sub	sp, #16
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d002      	beq.n	800d106 <pbuf_cat+0x16>
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d107      	bne.n	800d116 <pbuf_cat+0x26>
 800d106:	4b20      	ldr	r3, [pc, #128]	; (800d188 <pbuf_cat+0x98>)
 800d108:	f240 3259 	movw	r2, #857	; 0x359
 800d10c:	491f      	ldr	r1, [pc, #124]	; (800d18c <pbuf_cat+0x9c>)
 800d10e:	4820      	ldr	r0, [pc, #128]	; (800d190 <pbuf_cat+0xa0>)
 800d110:	f00b fe52 	bl	8018db8 <iprintf>
 800d114:	e034      	b.n	800d180 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	60fb      	str	r3, [r7, #12]
 800d11a:	e00a      	b.n	800d132 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	891a      	ldrh	r2, [r3, #8]
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	891b      	ldrh	r3, [r3, #8]
 800d124:	4413      	add	r3, r2
 800d126:	b29a      	uxth	r2, r3
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	60fb      	str	r3, [r7, #12]
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d1f0      	bne.n	800d11c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	891a      	ldrh	r2, [r3, #8]
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	895b      	ldrh	r3, [r3, #10]
 800d142:	429a      	cmp	r2, r3
 800d144:	d006      	beq.n	800d154 <pbuf_cat+0x64>
 800d146:	4b10      	ldr	r3, [pc, #64]	; (800d188 <pbuf_cat+0x98>)
 800d148:	f240 3262 	movw	r2, #866	; 0x362
 800d14c:	4911      	ldr	r1, [pc, #68]	; (800d194 <pbuf_cat+0xa4>)
 800d14e:	4810      	ldr	r0, [pc, #64]	; (800d190 <pbuf_cat+0xa0>)
 800d150:	f00b fe32 	bl	8018db8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d006      	beq.n	800d16a <pbuf_cat+0x7a>
 800d15c:	4b0a      	ldr	r3, [pc, #40]	; (800d188 <pbuf_cat+0x98>)
 800d15e:	f240 3263 	movw	r2, #867	; 0x363
 800d162:	490d      	ldr	r1, [pc, #52]	; (800d198 <pbuf_cat+0xa8>)
 800d164:	480a      	ldr	r0, [pc, #40]	; (800d190 <pbuf_cat+0xa0>)
 800d166:	f00b fe27 	bl	8018db8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	891a      	ldrh	r2, [r3, #8]
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	891b      	ldrh	r3, [r3, #8]
 800d172:	4413      	add	r3, r2
 800d174:	b29a      	uxth	r2, r3
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	683a      	ldr	r2, [r7, #0]
 800d17e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d180:	3710      	adds	r7, #16
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}
 800d186:	bf00      	nop
 800d188:	0801b60c 	.word	0x0801b60c
 800d18c:	0801b800 	.word	0x0801b800
 800d190:	0801b66c 	.word	0x0801b66c
 800d194:	0801b838 	.word	0x0801b838
 800d198:	0801b868 	.word	0x0801b868

0800d19c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b082      	sub	sp, #8
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d1a6:	6839      	ldr	r1, [r7, #0]
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f7ff ffa1 	bl	800d0f0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d1ae:	6838      	ldr	r0, [r7, #0]
 800d1b0:	f7ff ff76 	bl	800d0a0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d1b4:	bf00      	nop
 800d1b6:	3708      	adds	r7, #8
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b086      	sub	sp, #24
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	617b      	str	r3, [r7, #20]
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d008      	beq.n	800d1e6 <pbuf_copy+0x2a>
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d005      	beq.n	800d1e6 <pbuf_copy+0x2a>
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	891a      	ldrh	r2, [r3, #8]
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	891b      	ldrh	r3, [r3, #8]
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d209      	bcs.n	800d1fa <pbuf_copy+0x3e>
 800d1e6:	4b57      	ldr	r3, [pc, #348]	; (800d344 <pbuf_copy+0x188>)
 800d1e8:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d1ec:	4956      	ldr	r1, [pc, #344]	; (800d348 <pbuf_copy+0x18c>)
 800d1ee:	4857      	ldr	r0, [pc, #348]	; (800d34c <pbuf_copy+0x190>)
 800d1f0:	f00b fde2 	bl	8018db8 <iprintf>
 800d1f4:	f06f 030f 	mvn.w	r3, #15
 800d1f8:	e09f      	b.n	800d33a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	895b      	ldrh	r3, [r3, #10]
 800d1fe:	461a      	mov	r2, r3
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	1ad2      	subs	r2, r2, r3
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	895b      	ldrh	r3, [r3, #10]
 800d208:	4619      	mov	r1, r3
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	1acb      	subs	r3, r1, r3
 800d20e:	429a      	cmp	r2, r3
 800d210:	d306      	bcc.n	800d220 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	895b      	ldrh	r3, [r3, #10]
 800d216:	461a      	mov	r2, r3
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	1ad3      	subs	r3, r2, r3
 800d21c:	60fb      	str	r3, [r7, #12]
 800d21e:	e005      	b.n	800d22c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	895b      	ldrh	r3, [r3, #10]
 800d224:	461a      	mov	r2, r3
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	1ad3      	subs	r3, r2, r3
 800d22a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	685a      	ldr	r2, [r3, #4]
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	18d0      	adds	r0, r2, r3
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	685a      	ldr	r2, [r3, #4]
 800d238:	693b      	ldr	r3, [r7, #16]
 800d23a:	4413      	add	r3, r2
 800d23c:	68fa      	ldr	r2, [r7, #12]
 800d23e:	4619      	mov	r1, r3
 800d240:	f00b ffba 	bl	80191b8 <memcpy>
    offset_to += len;
 800d244:	697a      	ldr	r2, [r7, #20]
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	4413      	add	r3, r2
 800d24a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d24c:	693a      	ldr	r2, [r7, #16]
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	4413      	add	r3, r2
 800d252:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	895b      	ldrh	r3, [r3, #10]
 800d258:	461a      	mov	r2, r3
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d906      	bls.n	800d26e <pbuf_copy+0xb2>
 800d260:	4b38      	ldr	r3, [pc, #224]	; (800d344 <pbuf_copy+0x188>)
 800d262:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d266:	493a      	ldr	r1, [pc, #232]	; (800d350 <pbuf_copy+0x194>)
 800d268:	4838      	ldr	r0, [pc, #224]	; (800d34c <pbuf_copy+0x190>)
 800d26a:	f00b fda5 	bl	8018db8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	895b      	ldrh	r3, [r3, #10]
 800d272:	461a      	mov	r2, r3
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	4293      	cmp	r3, r2
 800d278:	d906      	bls.n	800d288 <pbuf_copy+0xcc>
 800d27a:	4b32      	ldr	r3, [pc, #200]	; (800d344 <pbuf_copy+0x188>)
 800d27c:	f240 32da 	movw	r2, #986	; 0x3da
 800d280:	4934      	ldr	r1, [pc, #208]	; (800d354 <pbuf_copy+0x198>)
 800d282:	4832      	ldr	r0, [pc, #200]	; (800d34c <pbuf_copy+0x190>)
 800d284:	f00b fd98 	bl	8018db8 <iprintf>
    if (offset_from >= p_from->len) {
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	895b      	ldrh	r3, [r3, #10]
 800d28c:	461a      	mov	r2, r3
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	4293      	cmp	r3, r2
 800d292:	d304      	bcc.n	800d29e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d294:	2300      	movs	r3, #0
 800d296:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	895b      	ldrh	r3, [r3, #10]
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d114      	bne.n	800d2d4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d10c      	bne.n	800d2d4 <pbuf_copy+0x118>
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d009      	beq.n	800d2d4 <pbuf_copy+0x118>
 800d2c0:	4b20      	ldr	r3, [pc, #128]	; (800d344 <pbuf_copy+0x188>)
 800d2c2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d2c6:	4924      	ldr	r1, [pc, #144]	; (800d358 <pbuf_copy+0x19c>)
 800d2c8:	4820      	ldr	r0, [pc, #128]	; (800d34c <pbuf_copy+0x190>)
 800d2ca:	f00b fd75 	bl	8018db8 <iprintf>
 800d2ce:	f06f 030f 	mvn.w	r3, #15
 800d2d2:	e032      	b.n	800d33a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d013      	beq.n	800d302 <pbuf_copy+0x146>
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	895a      	ldrh	r2, [r3, #10]
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	891b      	ldrh	r3, [r3, #8]
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d10d      	bne.n	800d302 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d009      	beq.n	800d302 <pbuf_copy+0x146>
 800d2ee:	4b15      	ldr	r3, [pc, #84]	; (800d344 <pbuf_copy+0x188>)
 800d2f0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d2f4:	4919      	ldr	r1, [pc, #100]	; (800d35c <pbuf_copy+0x1a0>)
 800d2f6:	4815      	ldr	r0, [pc, #84]	; (800d34c <pbuf_copy+0x190>)
 800d2f8:	f00b fd5e 	bl	8018db8 <iprintf>
 800d2fc:	f06f 0305 	mvn.w	r3, #5
 800d300:	e01b      	b.n	800d33a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d013      	beq.n	800d330 <pbuf_copy+0x174>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	895a      	ldrh	r2, [r3, #10]
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	891b      	ldrh	r3, [r3, #8]
 800d310:	429a      	cmp	r2, r3
 800d312:	d10d      	bne.n	800d330 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d009      	beq.n	800d330 <pbuf_copy+0x174>
 800d31c:	4b09      	ldr	r3, [pc, #36]	; (800d344 <pbuf_copy+0x188>)
 800d31e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d322:	490e      	ldr	r1, [pc, #56]	; (800d35c <pbuf_copy+0x1a0>)
 800d324:	4809      	ldr	r0, [pc, #36]	; (800d34c <pbuf_copy+0x190>)
 800d326:	f00b fd47 	bl	8018db8 <iprintf>
 800d32a:	f06f 0305 	mvn.w	r3, #5
 800d32e:	e004      	b.n	800d33a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	2b00      	cmp	r3, #0
 800d334:	f47f af61 	bne.w	800d1fa <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d338:	2300      	movs	r3, #0
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3718      	adds	r7, #24
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
 800d342:	bf00      	nop
 800d344:	0801b60c 	.word	0x0801b60c
 800d348:	0801b8b4 	.word	0x0801b8b4
 800d34c:	0801b66c 	.word	0x0801b66c
 800d350:	0801b8e4 	.word	0x0801b8e4
 800d354:	0801b8fc 	.word	0x0801b8fc
 800d358:	0801b918 	.word	0x0801b918
 800d35c:	0801b928 	.word	0x0801b928

0800d360 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b088      	sub	sp, #32
 800d364:	af00      	add	r7, sp, #0
 800d366:	60f8      	str	r0, [r7, #12]
 800d368:	60b9      	str	r1, [r7, #8]
 800d36a:	4611      	mov	r1, r2
 800d36c:	461a      	mov	r2, r3
 800d36e:	460b      	mov	r3, r1
 800d370:	80fb      	strh	r3, [r7, #6]
 800d372:	4613      	mov	r3, r2
 800d374:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d376:	2300      	movs	r3, #0
 800d378:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d37a:	2300      	movs	r3, #0
 800d37c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d108      	bne.n	800d396 <pbuf_copy_partial+0x36>
 800d384:	4b2b      	ldr	r3, [pc, #172]	; (800d434 <pbuf_copy_partial+0xd4>)
 800d386:	f240 420a 	movw	r2, #1034	; 0x40a
 800d38a:	492b      	ldr	r1, [pc, #172]	; (800d438 <pbuf_copy_partial+0xd8>)
 800d38c:	482b      	ldr	r0, [pc, #172]	; (800d43c <pbuf_copy_partial+0xdc>)
 800d38e:	f00b fd13 	bl	8018db8 <iprintf>
 800d392:	2300      	movs	r3, #0
 800d394:	e04a      	b.n	800d42c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d108      	bne.n	800d3ae <pbuf_copy_partial+0x4e>
 800d39c:	4b25      	ldr	r3, [pc, #148]	; (800d434 <pbuf_copy_partial+0xd4>)
 800d39e:	f240 420b 	movw	r2, #1035	; 0x40b
 800d3a2:	4927      	ldr	r1, [pc, #156]	; (800d440 <pbuf_copy_partial+0xe0>)
 800d3a4:	4825      	ldr	r0, [pc, #148]	; (800d43c <pbuf_copy_partial+0xdc>)
 800d3a6:	f00b fd07 	bl	8018db8 <iprintf>
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	e03e      	b.n	800d42c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	61fb      	str	r3, [r7, #28]
 800d3b2:	e034      	b.n	800d41e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d3b4:	88bb      	ldrh	r3, [r7, #4]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d00a      	beq.n	800d3d0 <pbuf_copy_partial+0x70>
 800d3ba:	69fb      	ldr	r3, [r7, #28]
 800d3bc:	895b      	ldrh	r3, [r3, #10]
 800d3be:	88ba      	ldrh	r2, [r7, #4]
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	d305      	bcc.n	800d3d0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d3c4:	69fb      	ldr	r3, [r7, #28]
 800d3c6:	895b      	ldrh	r3, [r3, #10]
 800d3c8:	88ba      	ldrh	r2, [r7, #4]
 800d3ca:	1ad3      	subs	r3, r2, r3
 800d3cc:	80bb      	strh	r3, [r7, #4]
 800d3ce:	e023      	b.n	800d418 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d3d0:	69fb      	ldr	r3, [r7, #28]
 800d3d2:	895a      	ldrh	r2, [r3, #10]
 800d3d4:	88bb      	ldrh	r3, [r7, #4]
 800d3d6:	1ad3      	subs	r3, r2, r3
 800d3d8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d3da:	8b3a      	ldrh	r2, [r7, #24]
 800d3dc:	88fb      	ldrh	r3, [r7, #6]
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d901      	bls.n	800d3e6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d3e2:	88fb      	ldrh	r3, [r7, #6]
 800d3e4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d3e6:	8b7b      	ldrh	r3, [r7, #26]
 800d3e8:	68ba      	ldr	r2, [r7, #8]
 800d3ea:	18d0      	adds	r0, r2, r3
 800d3ec:	69fb      	ldr	r3, [r7, #28]
 800d3ee:	685a      	ldr	r2, [r3, #4]
 800d3f0:	88bb      	ldrh	r3, [r7, #4]
 800d3f2:	4413      	add	r3, r2
 800d3f4:	8b3a      	ldrh	r2, [r7, #24]
 800d3f6:	4619      	mov	r1, r3
 800d3f8:	f00b fede 	bl	80191b8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d3fc:	8afa      	ldrh	r2, [r7, #22]
 800d3fe:	8b3b      	ldrh	r3, [r7, #24]
 800d400:	4413      	add	r3, r2
 800d402:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d404:	8b7a      	ldrh	r2, [r7, #26]
 800d406:	8b3b      	ldrh	r3, [r7, #24]
 800d408:	4413      	add	r3, r2
 800d40a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d40c:	88fa      	ldrh	r2, [r7, #6]
 800d40e:	8b3b      	ldrh	r3, [r7, #24]
 800d410:	1ad3      	subs	r3, r2, r3
 800d412:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d414:	2300      	movs	r3, #0
 800d416:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d418:	69fb      	ldr	r3, [r7, #28]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	61fb      	str	r3, [r7, #28]
 800d41e:	88fb      	ldrh	r3, [r7, #6]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d002      	beq.n	800d42a <pbuf_copy_partial+0xca>
 800d424:	69fb      	ldr	r3, [r7, #28]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d1c4      	bne.n	800d3b4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d42a:	8afb      	ldrh	r3, [r7, #22]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3720      	adds	r7, #32
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}
 800d434:	0801b60c 	.word	0x0801b60c
 800d438:	0801b954 	.word	0x0801b954
 800d43c:	0801b66c 	.word	0x0801b66c
 800d440:	0801b974 	.word	0x0801b974

0800d444 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b084      	sub	sp, #16
 800d448:	af00      	add	r7, sp, #0
 800d44a:	4603      	mov	r3, r0
 800d44c:	603a      	str	r2, [r7, #0]
 800d44e:	71fb      	strb	r3, [r7, #7]
 800d450:	460b      	mov	r3, r1
 800d452:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	8919      	ldrh	r1, [r3, #8]
 800d458:	88ba      	ldrh	r2, [r7, #4]
 800d45a:	79fb      	ldrb	r3, [r7, #7]
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7ff fa95 	bl	800c98c <pbuf_alloc>
 800d462:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d101      	bne.n	800d46e <pbuf_clone+0x2a>
    return NULL;
 800d46a:	2300      	movs	r3, #0
 800d46c:	e011      	b.n	800d492 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d46e:	6839      	ldr	r1, [r7, #0]
 800d470:	68f8      	ldr	r0, [r7, #12]
 800d472:	f7ff fea3 	bl	800d1bc <pbuf_copy>
 800d476:	4603      	mov	r3, r0
 800d478:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d47a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d006      	beq.n	800d490 <pbuf_clone+0x4c>
 800d482:	4b06      	ldr	r3, [pc, #24]	; (800d49c <pbuf_clone+0x58>)
 800d484:	f240 5224 	movw	r2, #1316	; 0x524
 800d488:	4905      	ldr	r1, [pc, #20]	; (800d4a0 <pbuf_clone+0x5c>)
 800d48a:	4806      	ldr	r0, [pc, #24]	; (800d4a4 <pbuf_clone+0x60>)
 800d48c:	f00b fc94 	bl	8018db8 <iprintf>
  return q;
 800d490:	68fb      	ldr	r3, [r7, #12]
}
 800d492:	4618      	mov	r0, r3
 800d494:	3710      	adds	r7, #16
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	0801b60c 	.word	0x0801b60c
 800d4a0:	0801ba80 	.word	0x0801ba80
 800d4a4:	0801b66c 	.word	0x0801b66c

0800d4a8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d4ac:	f00b fb96 	bl	8018bdc <rand>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d4b8:	b29b      	uxth	r3, r3
 800d4ba:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d4be:	b29a      	uxth	r2, r3
 800d4c0:	4b01      	ldr	r3, [pc, #4]	; (800d4c8 <tcp_init+0x20>)
 800d4c2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d4c4:	bf00      	nop
 800d4c6:	bd80      	pop	{r7, pc}
 800d4c8:	20000024 	.word	0x20000024

0800d4cc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b082      	sub	sp, #8
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	7d1b      	ldrb	r3, [r3, #20]
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	d105      	bne.n	800d4e8 <tcp_free+0x1c>
 800d4dc:	4b06      	ldr	r3, [pc, #24]	; (800d4f8 <tcp_free+0x2c>)
 800d4de:	22d4      	movs	r2, #212	; 0xd4
 800d4e0:	4906      	ldr	r1, [pc, #24]	; (800d4fc <tcp_free+0x30>)
 800d4e2:	4807      	ldr	r0, [pc, #28]	; (800d500 <tcp_free+0x34>)
 800d4e4:	f00b fc68 	bl	8018db8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d4e8:	6879      	ldr	r1, [r7, #4]
 800d4ea:	2001      	movs	r0, #1
 800d4ec:	f7fe fe82 	bl	800c1f4 <memp_free>
}
 800d4f0:	bf00      	nop
 800d4f2:	3708      	adds	r7, #8
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}
 800d4f8:	0801bb0c 	.word	0x0801bb0c
 800d4fc:	0801bb3c 	.word	0x0801bb3c
 800d500:	0801bb50 	.word	0x0801bb50

0800d504 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b082      	sub	sp, #8
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	7d1b      	ldrb	r3, [r3, #20]
 800d510:	2b01      	cmp	r3, #1
 800d512:	d105      	bne.n	800d520 <tcp_free_listen+0x1c>
 800d514:	4b06      	ldr	r3, [pc, #24]	; (800d530 <tcp_free_listen+0x2c>)
 800d516:	22df      	movs	r2, #223	; 0xdf
 800d518:	4906      	ldr	r1, [pc, #24]	; (800d534 <tcp_free_listen+0x30>)
 800d51a:	4807      	ldr	r0, [pc, #28]	; (800d538 <tcp_free_listen+0x34>)
 800d51c:	f00b fc4c 	bl	8018db8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d520:	6879      	ldr	r1, [r7, #4]
 800d522:	2002      	movs	r0, #2
 800d524:	f7fe fe66 	bl	800c1f4 <memp_free>
}
 800d528:	bf00      	nop
 800d52a:	3708      	adds	r7, #8
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}
 800d530:	0801bb0c 	.word	0x0801bb0c
 800d534:	0801bb78 	.word	0x0801bb78
 800d538:	0801bb50 	.word	0x0801bb50

0800d53c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d540:	f001 f9d0 	bl	800e8e4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d544:	4b07      	ldr	r3, [pc, #28]	; (800d564 <tcp_tmr+0x28>)
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	3301      	adds	r3, #1
 800d54a:	b2da      	uxtb	r2, r3
 800d54c:	4b05      	ldr	r3, [pc, #20]	; (800d564 <tcp_tmr+0x28>)
 800d54e:	701a      	strb	r2, [r3, #0]
 800d550:	4b04      	ldr	r3, [pc, #16]	; (800d564 <tcp_tmr+0x28>)
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	f003 0301 	and.w	r3, r3, #1
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d001      	beq.n	800d560 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d55c:	f000 fe82 	bl	800e264 <tcp_slowtmr>
  }
}
 800d560:	bf00      	nop
 800d562:	bd80      	pop	{r7, pc}
 800d564:	20010f85 	.word	0x20010f85

0800d568 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b084      	sub	sp, #16
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d105      	bne.n	800d584 <tcp_remove_listener+0x1c>
 800d578:	4b0d      	ldr	r3, [pc, #52]	; (800d5b0 <tcp_remove_listener+0x48>)
 800d57a:	22ff      	movs	r2, #255	; 0xff
 800d57c:	490d      	ldr	r1, [pc, #52]	; (800d5b4 <tcp_remove_listener+0x4c>)
 800d57e:	480e      	ldr	r0, [pc, #56]	; (800d5b8 <tcp_remove_listener+0x50>)
 800d580:	f00b fc1a 	bl	8018db8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	60fb      	str	r3, [r7, #12]
 800d588:	e00a      	b.n	800d5a0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d58e:	683a      	ldr	r2, [r7, #0]
 800d590:	429a      	cmp	r2, r3
 800d592:	d102      	bne.n	800d59a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	2200      	movs	r2, #0
 800d598:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	68db      	ldr	r3, [r3, #12]
 800d59e:	60fb      	str	r3, [r7, #12]
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d1f1      	bne.n	800d58a <tcp_remove_listener+0x22>
    }
  }
}
 800d5a6:	bf00      	nop
 800d5a8:	bf00      	nop
 800d5aa:	3710      	adds	r7, #16
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}
 800d5b0:	0801bb0c 	.word	0x0801bb0c
 800d5b4:	0801bb94 	.word	0x0801bb94
 800d5b8:	0801bb50 	.word	0x0801bb50

0800d5bc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b084      	sub	sp, #16
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d106      	bne.n	800d5d8 <tcp_listen_closed+0x1c>
 800d5ca:	4b14      	ldr	r3, [pc, #80]	; (800d61c <tcp_listen_closed+0x60>)
 800d5cc:	f240 1211 	movw	r2, #273	; 0x111
 800d5d0:	4913      	ldr	r1, [pc, #76]	; (800d620 <tcp_listen_closed+0x64>)
 800d5d2:	4814      	ldr	r0, [pc, #80]	; (800d624 <tcp_listen_closed+0x68>)
 800d5d4:	f00b fbf0 	bl	8018db8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	7d1b      	ldrb	r3, [r3, #20]
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d006      	beq.n	800d5ee <tcp_listen_closed+0x32>
 800d5e0:	4b0e      	ldr	r3, [pc, #56]	; (800d61c <tcp_listen_closed+0x60>)
 800d5e2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d5e6:	4910      	ldr	r1, [pc, #64]	; (800d628 <tcp_listen_closed+0x6c>)
 800d5e8:	480e      	ldr	r0, [pc, #56]	; (800d624 <tcp_listen_closed+0x68>)
 800d5ea:	f00b fbe5 	bl	8018db8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	60fb      	str	r3, [r7, #12]
 800d5f2:	e00b      	b.n	800d60c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d5f4:	4a0d      	ldr	r2, [pc, #52]	; (800d62c <tcp_listen_closed+0x70>)
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	6879      	ldr	r1, [r7, #4]
 800d600:	4618      	mov	r0, r3
 800d602:	f7ff ffb1 	bl	800d568 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	3301      	adds	r3, #1
 800d60a:	60fb      	str	r3, [r7, #12]
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	2b03      	cmp	r3, #3
 800d610:	d9f0      	bls.n	800d5f4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d612:	bf00      	nop
 800d614:	bf00      	nop
 800d616:	3710      	adds	r7, #16
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}
 800d61c:	0801bb0c 	.word	0x0801bb0c
 800d620:	0801bbbc 	.word	0x0801bbbc
 800d624:	0801bb50 	.word	0x0801bb50
 800d628:	0801bbc8 	.word	0x0801bbc8
 800d62c:	08028008 	.word	0x08028008

0800d630 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d630:	b5b0      	push	{r4, r5, r7, lr}
 800d632:	b088      	sub	sp, #32
 800d634:	af04      	add	r7, sp, #16
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	460b      	mov	r3, r1
 800d63a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d106      	bne.n	800d650 <tcp_close_shutdown+0x20>
 800d642:	4b63      	ldr	r3, [pc, #396]	; (800d7d0 <tcp_close_shutdown+0x1a0>)
 800d644:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d648:	4962      	ldr	r1, [pc, #392]	; (800d7d4 <tcp_close_shutdown+0x1a4>)
 800d64a:	4863      	ldr	r0, [pc, #396]	; (800d7d8 <tcp_close_shutdown+0x1a8>)
 800d64c:	f00b fbb4 	bl	8018db8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d650:	78fb      	ldrb	r3, [r7, #3]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d066      	beq.n	800d724 <tcp_close_shutdown+0xf4>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	7d1b      	ldrb	r3, [r3, #20]
 800d65a:	2b04      	cmp	r3, #4
 800d65c:	d003      	beq.n	800d666 <tcp_close_shutdown+0x36>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	7d1b      	ldrb	r3, [r3, #20]
 800d662:	2b07      	cmp	r3, #7
 800d664:	d15e      	bne.n	800d724 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d104      	bne.n	800d678 <tcp_close_shutdown+0x48>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d672:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d676:	d055      	beq.n	800d724 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	8b5b      	ldrh	r3, [r3, #26]
 800d67c:	f003 0310 	and.w	r3, r3, #16
 800d680:	2b00      	cmp	r3, #0
 800d682:	d106      	bne.n	800d692 <tcp_close_shutdown+0x62>
 800d684:	4b52      	ldr	r3, [pc, #328]	; (800d7d0 <tcp_close_shutdown+0x1a0>)
 800d686:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d68a:	4954      	ldr	r1, [pc, #336]	; (800d7dc <tcp_close_shutdown+0x1ac>)
 800d68c:	4852      	ldr	r0, [pc, #328]	; (800d7d8 <tcp_close_shutdown+0x1a8>)
 800d68e:	f00b fb93 	bl	8018db8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d69a:	687d      	ldr	r5, [r7, #4]
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	3304      	adds	r3, #4
 800d6a0:	687a      	ldr	r2, [r7, #4]
 800d6a2:	8ad2      	ldrh	r2, [r2, #22]
 800d6a4:	6879      	ldr	r1, [r7, #4]
 800d6a6:	8b09      	ldrh	r1, [r1, #24]
 800d6a8:	9102      	str	r1, [sp, #8]
 800d6aa:	9201      	str	r2, [sp, #4]
 800d6ac:	9300      	str	r3, [sp, #0]
 800d6ae:	462b      	mov	r3, r5
 800d6b0:	4622      	mov	r2, r4
 800d6b2:	4601      	mov	r1, r0
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f005 ff03 	bl	80134c0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f001 fce0 	bl	800f080 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d6c0:	4b47      	ldr	r3, [pc, #284]	; (800d7e0 <tcp_close_shutdown+0x1b0>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	d105      	bne.n	800d6d6 <tcp_close_shutdown+0xa6>
 800d6ca:	4b45      	ldr	r3, [pc, #276]	; (800d7e0 <tcp_close_shutdown+0x1b0>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	68db      	ldr	r3, [r3, #12]
 800d6d0:	4a43      	ldr	r2, [pc, #268]	; (800d7e0 <tcp_close_shutdown+0x1b0>)
 800d6d2:	6013      	str	r3, [r2, #0]
 800d6d4:	e013      	b.n	800d6fe <tcp_close_shutdown+0xce>
 800d6d6:	4b42      	ldr	r3, [pc, #264]	; (800d7e0 <tcp_close_shutdown+0x1b0>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	60fb      	str	r3, [r7, #12]
 800d6dc:	e00c      	b.n	800d6f8 <tcp_close_shutdown+0xc8>
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	68db      	ldr	r3, [r3, #12]
 800d6e2:	687a      	ldr	r2, [r7, #4]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d104      	bne.n	800d6f2 <tcp_close_shutdown+0xc2>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	68da      	ldr	r2, [r3, #12]
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	60da      	str	r2, [r3, #12]
 800d6f0:	e005      	b.n	800d6fe <tcp_close_shutdown+0xce>
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	68db      	ldr	r3, [r3, #12]
 800d6f6:	60fb      	str	r3, [r7, #12]
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d1ef      	bne.n	800d6de <tcp_close_shutdown+0xae>
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2200      	movs	r2, #0
 800d702:	60da      	str	r2, [r3, #12]
 800d704:	4b37      	ldr	r3, [pc, #220]	; (800d7e4 <tcp_close_shutdown+0x1b4>)
 800d706:	2201      	movs	r2, #1
 800d708:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d70a:	4b37      	ldr	r3, [pc, #220]	; (800d7e8 <tcp_close_shutdown+0x1b8>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	687a      	ldr	r2, [r7, #4]
 800d710:	429a      	cmp	r2, r3
 800d712:	d102      	bne.n	800d71a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d714:	f004 f978 	bl	8011a08 <tcp_trigger_input_pcb_close>
 800d718:	e002      	b.n	800d720 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f7ff fed6 	bl	800d4cc <tcp_free>
      }
      return ERR_OK;
 800d720:	2300      	movs	r3, #0
 800d722:	e050      	b.n	800d7c6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	7d1b      	ldrb	r3, [r3, #20]
 800d728:	2b02      	cmp	r3, #2
 800d72a:	d03b      	beq.n	800d7a4 <tcp_close_shutdown+0x174>
 800d72c:	2b02      	cmp	r3, #2
 800d72e:	dc44      	bgt.n	800d7ba <tcp_close_shutdown+0x18a>
 800d730:	2b00      	cmp	r3, #0
 800d732:	d002      	beq.n	800d73a <tcp_close_shutdown+0x10a>
 800d734:	2b01      	cmp	r3, #1
 800d736:	d02a      	beq.n	800d78e <tcp_close_shutdown+0x15e>
 800d738:	e03f      	b.n	800d7ba <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	8adb      	ldrh	r3, [r3, #22]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d021      	beq.n	800d786 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d742:	4b2a      	ldr	r3, [pc, #168]	; (800d7ec <tcp_close_shutdown+0x1bc>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	687a      	ldr	r2, [r7, #4]
 800d748:	429a      	cmp	r2, r3
 800d74a:	d105      	bne.n	800d758 <tcp_close_shutdown+0x128>
 800d74c:	4b27      	ldr	r3, [pc, #156]	; (800d7ec <tcp_close_shutdown+0x1bc>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	68db      	ldr	r3, [r3, #12]
 800d752:	4a26      	ldr	r2, [pc, #152]	; (800d7ec <tcp_close_shutdown+0x1bc>)
 800d754:	6013      	str	r3, [r2, #0]
 800d756:	e013      	b.n	800d780 <tcp_close_shutdown+0x150>
 800d758:	4b24      	ldr	r3, [pc, #144]	; (800d7ec <tcp_close_shutdown+0x1bc>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	60bb      	str	r3, [r7, #8]
 800d75e:	e00c      	b.n	800d77a <tcp_close_shutdown+0x14a>
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	68db      	ldr	r3, [r3, #12]
 800d764:	687a      	ldr	r2, [r7, #4]
 800d766:	429a      	cmp	r2, r3
 800d768:	d104      	bne.n	800d774 <tcp_close_shutdown+0x144>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	68da      	ldr	r2, [r3, #12]
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	60da      	str	r2, [r3, #12]
 800d772:	e005      	b.n	800d780 <tcp_close_shutdown+0x150>
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	68db      	ldr	r3, [r3, #12]
 800d778:	60bb      	str	r3, [r7, #8]
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d1ef      	bne.n	800d760 <tcp_close_shutdown+0x130>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2200      	movs	r2, #0
 800d784:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f7ff fea0 	bl	800d4cc <tcp_free>
      break;
 800d78c:	e01a      	b.n	800d7c4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f7ff ff14 	bl	800d5bc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d794:	6879      	ldr	r1, [r7, #4]
 800d796:	4816      	ldr	r0, [pc, #88]	; (800d7f0 <tcp_close_shutdown+0x1c0>)
 800d798:	f001 fcc2 	bl	800f120 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f7ff feb1 	bl	800d504 <tcp_free_listen>
      break;
 800d7a2:	e00f      	b.n	800d7c4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d7a4:	6879      	ldr	r1, [r7, #4]
 800d7a6:	480e      	ldr	r0, [pc, #56]	; (800d7e0 <tcp_close_shutdown+0x1b0>)
 800d7a8:	f001 fcba 	bl	800f120 <tcp_pcb_remove>
 800d7ac:	4b0d      	ldr	r3, [pc, #52]	; (800d7e4 <tcp_close_shutdown+0x1b4>)
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f7ff fe8a 	bl	800d4cc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d7b8:	e004      	b.n	800d7c4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f000 f81a 	bl	800d7f4 <tcp_close_shutdown_fin>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	e000      	b.n	800d7c6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d7c4:	2300      	movs	r3, #0
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3710      	adds	r7, #16
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bdb0      	pop	{r4, r5, r7, pc}
 800d7ce:	bf00      	nop
 800d7d0:	0801bb0c 	.word	0x0801bb0c
 800d7d4:	0801bbe0 	.word	0x0801bbe0
 800d7d8:	0801bb50 	.word	0x0801bb50
 800d7dc:	0801bc00 	.word	0x0801bc00
 800d7e0:	20010f7c 	.word	0x20010f7c
 800d7e4:	20010f84 	.word	0x20010f84
 800d7e8:	20010fbc 	.word	0x20010fbc
 800d7ec:	20010f74 	.word	0x20010f74
 800d7f0:	20010f78 	.word	0x20010f78

0800d7f4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b084      	sub	sp, #16
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d106      	bne.n	800d810 <tcp_close_shutdown_fin+0x1c>
 800d802:	4b2e      	ldr	r3, [pc, #184]	; (800d8bc <tcp_close_shutdown_fin+0xc8>)
 800d804:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d808:	492d      	ldr	r1, [pc, #180]	; (800d8c0 <tcp_close_shutdown_fin+0xcc>)
 800d80a:	482e      	ldr	r0, [pc, #184]	; (800d8c4 <tcp_close_shutdown_fin+0xd0>)
 800d80c:	f00b fad4 	bl	8018db8 <iprintf>

  switch (pcb->state) {
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	7d1b      	ldrb	r3, [r3, #20]
 800d814:	2b07      	cmp	r3, #7
 800d816:	d020      	beq.n	800d85a <tcp_close_shutdown_fin+0x66>
 800d818:	2b07      	cmp	r3, #7
 800d81a:	dc2b      	bgt.n	800d874 <tcp_close_shutdown_fin+0x80>
 800d81c:	2b03      	cmp	r3, #3
 800d81e:	d002      	beq.n	800d826 <tcp_close_shutdown_fin+0x32>
 800d820:	2b04      	cmp	r3, #4
 800d822:	d00d      	beq.n	800d840 <tcp_close_shutdown_fin+0x4c>
 800d824:	e026      	b.n	800d874 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f004 ff58 	bl	80126dc <tcp_send_fin>
 800d82c:	4603      	mov	r3, r0
 800d82e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d11f      	bne.n	800d878 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2205      	movs	r2, #5
 800d83c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d83e:	e01b      	b.n	800d878 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f004 ff4b 	bl	80126dc <tcp_send_fin>
 800d846:	4603      	mov	r3, r0
 800d848:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d84a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d114      	bne.n	800d87c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2205      	movs	r2, #5
 800d856:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d858:	e010      	b.n	800d87c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f004 ff3e 	bl	80126dc <tcp_send_fin>
 800d860:	4603      	mov	r3, r0
 800d862:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d109      	bne.n	800d880 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2209      	movs	r2, #9
 800d870:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d872:	e005      	b.n	800d880 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d874:	2300      	movs	r3, #0
 800d876:	e01c      	b.n	800d8b2 <tcp_close_shutdown_fin+0xbe>
      break;
 800d878:	bf00      	nop
 800d87a:	e002      	b.n	800d882 <tcp_close_shutdown_fin+0x8e>
      break;
 800d87c:	bf00      	nop
 800d87e:	e000      	b.n	800d882 <tcp_close_shutdown_fin+0x8e>
      break;
 800d880:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d103      	bne.n	800d892 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f005 f864 	bl	8012958 <tcp_output>
 800d890:	e00d      	b.n	800d8ae <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d89a:	d108      	bne.n	800d8ae <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	8b5b      	ldrh	r3, [r3, #26]
 800d8a0:	f043 0308 	orr.w	r3, r3, #8
 800d8a4:	b29a      	uxth	r2, r3
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	e001      	b.n	800d8b2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d8ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3710      	adds	r7, #16
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	0801bb0c 	.word	0x0801bb0c
 800d8c0:	0801bbbc 	.word	0x0801bbbc
 800d8c4:	0801bb50 	.word	0x0801bb50

0800d8c8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b082      	sub	sp, #8
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d109      	bne.n	800d8ea <tcp_close+0x22>
 800d8d6:	4b0f      	ldr	r3, [pc, #60]	; (800d914 <tcp_close+0x4c>)
 800d8d8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d8dc:	490e      	ldr	r1, [pc, #56]	; (800d918 <tcp_close+0x50>)
 800d8de:	480f      	ldr	r0, [pc, #60]	; (800d91c <tcp_close+0x54>)
 800d8e0:	f00b fa6a 	bl	8018db8 <iprintf>
 800d8e4:	f06f 030f 	mvn.w	r3, #15
 800d8e8:	e00f      	b.n	800d90a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	7d1b      	ldrb	r3, [r3, #20]
 800d8ee:	2b01      	cmp	r3, #1
 800d8f0:	d006      	beq.n	800d900 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	8b5b      	ldrh	r3, [r3, #26]
 800d8f6:	f043 0310 	orr.w	r3, r3, #16
 800d8fa:	b29a      	uxth	r2, r3
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d900:	2101      	movs	r1, #1
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f7ff fe94 	bl	800d630 <tcp_close_shutdown>
 800d908:	4603      	mov	r3, r0
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3708      	adds	r7, #8
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
 800d912:	bf00      	nop
 800d914:	0801bb0c 	.word	0x0801bb0c
 800d918:	0801bc1c 	.word	0x0801bc1c
 800d91c:	0801bb50 	.word	0x0801bb50

0800d920 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b084      	sub	sp, #16
 800d924:	af00      	add	r7, sp, #0
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	60b9      	str	r1, [r7, #8]
 800d92a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d109      	bne.n	800d946 <tcp_shutdown+0x26>
 800d932:	4b26      	ldr	r3, [pc, #152]	; (800d9cc <tcp_shutdown+0xac>)
 800d934:	f240 2207 	movw	r2, #519	; 0x207
 800d938:	4925      	ldr	r1, [pc, #148]	; (800d9d0 <tcp_shutdown+0xb0>)
 800d93a:	4826      	ldr	r0, [pc, #152]	; (800d9d4 <tcp_shutdown+0xb4>)
 800d93c:	f00b fa3c 	bl	8018db8 <iprintf>
 800d940:	f06f 030f 	mvn.w	r3, #15
 800d944:	e03d      	b.n	800d9c2 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	7d1b      	ldrb	r3, [r3, #20]
 800d94a:	2b01      	cmp	r3, #1
 800d94c:	d102      	bne.n	800d954 <tcp_shutdown+0x34>
    return ERR_CONN;
 800d94e:	f06f 030a 	mvn.w	r3, #10
 800d952:	e036      	b.n	800d9c2 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d01b      	beq.n	800d992 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	8b5b      	ldrh	r3, [r3, #26]
 800d95e:	f043 0310 	orr.w	r3, r3, #16
 800d962:	b29a      	uxth	r2, r3
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d005      	beq.n	800d97a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d96e:	2101      	movs	r1, #1
 800d970:	68f8      	ldr	r0, [r7, #12]
 800d972:	f7ff fe5d 	bl	800d630 <tcp_close_shutdown>
 800d976:	4603      	mov	r3, r0
 800d978:	e023      	b.n	800d9c2 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d007      	beq.n	800d992 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d986:	4618      	mov	r0, r3
 800d988:	f7ff fae4 	bl	800cf54 <pbuf_free>
      pcb->refused_data = NULL;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	2200      	movs	r2, #0
 800d990:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d013      	beq.n	800d9c0 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	7d1b      	ldrb	r3, [r3, #20]
 800d99c:	2b04      	cmp	r3, #4
 800d99e:	dc02      	bgt.n	800d9a6 <tcp_shutdown+0x86>
 800d9a0:	2b03      	cmp	r3, #3
 800d9a2:	da02      	bge.n	800d9aa <tcp_shutdown+0x8a>
 800d9a4:	e009      	b.n	800d9ba <tcp_shutdown+0x9a>
 800d9a6:	2b07      	cmp	r3, #7
 800d9a8:	d107      	bne.n	800d9ba <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	b2db      	uxtb	r3, r3
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	68f8      	ldr	r0, [r7, #12]
 800d9b2:	f7ff fe3d 	bl	800d630 <tcp_close_shutdown>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	e003      	b.n	800d9c2 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800d9ba:	f06f 030a 	mvn.w	r3, #10
 800d9be:	e000      	b.n	800d9c2 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800d9c0:	2300      	movs	r3, #0
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3710      	adds	r7, #16
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}
 800d9ca:	bf00      	nop
 800d9cc:	0801bb0c 	.word	0x0801bb0c
 800d9d0:	0801bc34 	.word	0x0801bc34
 800d9d4:	0801bb50 	.word	0x0801bb50

0800d9d8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b08e      	sub	sp, #56	; 0x38
 800d9dc:	af04      	add	r7, sp, #16
 800d9de:	6078      	str	r0, [r7, #4]
 800d9e0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d107      	bne.n	800d9f8 <tcp_abandon+0x20>
 800d9e8:	4b52      	ldr	r3, [pc, #328]	; (800db34 <tcp_abandon+0x15c>)
 800d9ea:	f240 223d 	movw	r2, #573	; 0x23d
 800d9ee:	4952      	ldr	r1, [pc, #328]	; (800db38 <tcp_abandon+0x160>)
 800d9f0:	4852      	ldr	r0, [pc, #328]	; (800db3c <tcp_abandon+0x164>)
 800d9f2:	f00b f9e1 	bl	8018db8 <iprintf>
 800d9f6:	e099      	b.n	800db2c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	7d1b      	ldrb	r3, [r3, #20]
 800d9fc:	2b01      	cmp	r3, #1
 800d9fe:	d106      	bne.n	800da0e <tcp_abandon+0x36>
 800da00:	4b4c      	ldr	r3, [pc, #304]	; (800db34 <tcp_abandon+0x15c>)
 800da02:	f44f 7210 	mov.w	r2, #576	; 0x240
 800da06:	494e      	ldr	r1, [pc, #312]	; (800db40 <tcp_abandon+0x168>)
 800da08:	484c      	ldr	r0, [pc, #304]	; (800db3c <tcp_abandon+0x164>)
 800da0a:	f00b f9d5 	bl	8018db8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	7d1b      	ldrb	r3, [r3, #20]
 800da12:	2b0a      	cmp	r3, #10
 800da14:	d107      	bne.n	800da26 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800da16:	6879      	ldr	r1, [r7, #4]
 800da18:	484a      	ldr	r0, [pc, #296]	; (800db44 <tcp_abandon+0x16c>)
 800da1a:	f001 fb81 	bl	800f120 <tcp_pcb_remove>
    tcp_free(pcb);
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f7ff fd54 	bl	800d4cc <tcp_free>
 800da24:	e082      	b.n	800db2c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800da26:	2300      	movs	r3, #0
 800da28:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800da2a:	2300      	movs	r3, #0
 800da2c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da32:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da38:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da40:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	691b      	ldr	r3, [r3, #16]
 800da46:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	7d1b      	ldrb	r3, [r3, #20]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d126      	bne.n	800da9e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	8adb      	ldrh	r3, [r3, #22]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d02e      	beq.n	800dab6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800da58:	4b3b      	ldr	r3, [pc, #236]	; (800db48 <tcp_abandon+0x170>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	687a      	ldr	r2, [r7, #4]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d105      	bne.n	800da6e <tcp_abandon+0x96>
 800da62:	4b39      	ldr	r3, [pc, #228]	; (800db48 <tcp_abandon+0x170>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	68db      	ldr	r3, [r3, #12]
 800da68:	4a37      	ldr	r2, [pc, #220]	; (800db48 <tcp_abandon+0x170>)
 800da6a:	6013      	str	r3, [r2, #0]
 800da6c:	e013      	b.n	800da96 <tcp_abandon+0xbe>
 800da6e:	4b36      	ldr	r3, [pc, #216]	; (800db48 <tcp_abandon+0x170>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	61fb      	str	r3, [r7, #28]
 800da74:	e00c      	b.n	800da90 <tcp_abandon+0xb8>
 800da76:	69fb      	ldr	r3, [r7, #28]
 800da78:	68db      	ldr	r3, [r3, #12]
 800da7a:	687a      	ldr	r2, [r7, #4]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d104      	bne.n	800da8a <tcp_abandon+0xb2>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	68da      	ldr	r2, [r3, #12]
 800da84:	69fb      	ldr	r3, [r7, #28]
 800da86:	60da      	str	r2, [r3, #12]
 800da88:	e005      	b.n	800da96 <tcp_abandon+0xbe>
 800da8a:	69fb      	ldr	r3, [r7, #28]
 800da8c:	68db      	ldr	r3, [r3, #12]
 800da8e:	61fb      	str	r3, [r7, #28]
 800da90:	69fb      	ldr	r3, [r7, #28]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d1ef      	bne.n	800da76 <tcp_abandon+0x9e>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2200      	movs	r2, #0
 800da9a:	60da      	str	r2, [r3, #12]
 800da9c:	e00b      	b.n	800dab6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	8adb      	ldrh	r3, [r3, #22]
 800daa6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800daa8:	6879      	ldr	r1, [r7, #4]
 800daaa:	4828      	ldr	r0, [pc, #160]	; (800db4c <tcp_abandon+0x174>)
 800daac:	f001 fb38 	bl	800f120 <tcp_pcb_remove>
 800dab0:	4b27      	ldr	r3, [pc, #156]	; (800db50 <tcp_abandon+0x178>)
 800dab2:	2201      	movs	r2, #1
 800dab4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d004      	beq.n	800dac8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dac2:	4618      	mov	r0, r3
 800dac4:	f000 ffee 	bl	800eaa4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d004      	beq.n	800dada <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dad4:	4618      	mov	r0, r3
 800dad6:	f000 ffe5 	bl	800eaa4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d004      	beq.n	800daec <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dae6:	4618      	mov	r0, r3
 800dae8:	f000 ffdc 	bl	800eaa4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800daec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d00e      	beq.n	800db10 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800daf2:	6879      	ldr	r1, [r7, #4]
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	3304      	adds	r3, #4
 800daf8:	687a      	ldr	r2, [r7, #4]
 800dafa:	8b12      	ldrh	r2, [r2, #24]
 800dafc:	9202      	str	r2, [sp, #8]
 800dafe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800db00:	9201      	str	r2, [sp, #4]
 800db02:	9300      	str	r3, [sp, #0]
 800db04:	460b      	mov	r3, r1
 800db06:	697a      	ldr	r2, [r7, #20]
 800db08:	69b9      	ldr	r1, [r7, #24]
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f005 fcd8 	bl	80134c0 <tcp_rst>
    }
    last_state = pcb->state;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	7d1b      	ldrb	r3, [r3, #20]
 800db14:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f7ff fcd8 	bl	800d4cc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800db1c:	693b      	ldr	r3, [r7, #16]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d004      	beq.n	800db2c <tcp_abandon+0x154>
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	f06f 010c 	mvn.w	r1, #12
 800db28:	68f8      	ldr	r0, [r7, #12]
 800db2a:	4798      	blx	r3
  }
}
 800db2c:	3728      	adds	r7, #40	; 0x28
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	0801bb0c 	.word	0x0801bb0c
 800db38:	0801bc50 	.word	0x0801bc50
 800db3c:	0801bb50 	.word	0x0801bb50
 800db40:	0801bc6c 	.word	0x0801bc6c
 800db44:	20010f80 	.word	0x20010f80
 800db48:	20010f74 	.word	0x20010f74
 800db4c:	20010f7c 	.word	0x20010f7c
 800db50:	20010f84 	.word	0x20010f84

0800db54 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b082      	sub	sp, #8
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800db5c:	2101      	movs	r1, #1
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f7ff ff3a 	bl	800d9d8 <tcp_abandon>
}
 800db64:	bf00      	nop
 800db66:	3708      	adds	r7, #8
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}

0800db6c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b088      	sub	sp, #32
 800db70:	af00      	add	r7, sp, #0
 800db72:	60f8      	str	r0, [r7, #12]
 800db74:	60b9      	str	r1, [r7, #8]
 800db76:	4613      	mov	r3, r2
 800db78:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800db7a:	2304      	movs	r3, #4
 800db7c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d101      	bne.n	800db88 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800db84:	4b3e      	ldr	r3, [pc, #248]	; (800dc80 <tcp_bind+0x114>)
 800db86:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d109      	bne.n	800dba2 <tcp_bind+0x36>
 800db8e:	4b3d      	ldr	r3, [pc, #244]	; (800dc84 <tcp_bind+0x118>)
 800db90:	f240 22a9 	movw	r2, #681	; 0x2a9
 800db94:	493c      	ldr	r1, [pc, #240]	; (800dc88 <tcp_bind+0x11c>)
 800db96:	483d      	ldr	r0, [pc, #244]	; (800dc8c <tcp_bind+0x120>)
 800db98:	f00b f90e 	bl	8018db8 <iprintf>
 800db9c:	f06f 030f 	mvn.w	r3, #15
 800dba0:	e06a      	b.n	800dc78 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	7d1b      	ldrb	r3, [r3, #20]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d009      	beq.n	800dbbe <tcp_bind+0x52>
 800dbaa:	4b36      	ldr	r3, [pc, #216]	; (800dc84 <tcp_bind+0x118>)
 800dbac:	f240 22ab 	movw	r2, #683	; 0x2ab
 800dbb0:	4937      	ldr	r1, [pc, #220]	; (800dc90 <tcp_bind+0x124>)
 800dbb2:	4836      	ldr	r0, [pc, #216]	; (800dc8c <tcp_bind+0x120>)
 800dbb4:	f00b f900 	bl	8018db8 <iprintf>
 800dbb8:	f06f 0305 	mvn.w	r3, #5
 800dbbc:	e05c      	b.n	800dc78 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800dbbe:	88fb      	ldrh	r3, [r7, #6]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d109      	bne.n	800dbd8 <tcp_bind+0x6c>
    port = tcp_new_port();
 800dbc4:	f000 f9f0 	bl	800dfa8 <tcp_new_port>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800dbcc:	88fb      	ldrh	r3, [r7, #6]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d135      	bne.n	800dc3e <tcp_bind+0xd2>
      return ERR_BUF;
 800dbd2:	f06f 0301 	mvn.w	r3, #1
 800dbd6:	e04f      	b.n	800dc78 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800dbd8:	2300      	movs	r3, #0
 800dbda:	61fb      	str	r3, [r7, #28]
 800dbdc:	e02b      	b.n	800dc36 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800dbde:	4a2d      	ldr	r2, [pc, #180]	; (800dc94 <tcp_bind+0x128>)
 800dbe0:	69fb      	ldr	r3, [r7, #28]
 800dbe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	61bb      	str	r3, [r7, #24]
 800dbea:	e01e      	b.n	800dc2a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800dbec:	69bb      	ldr	r3, [r7, #24]
 800dbee:	8adb      	ldrh	r3, [r3, #22]
 800dbf0:	88fa      	ldrh	r2, [r7, #6]
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d116      	bne.n	800dc24 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800dbf6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d010      	beq.n	800dc1e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800dbfc:	69bb      	ldr	r3, [r7, #24]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d00c      	beq.n	800dc1e <tcp_bind+0xb2>
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d009      	beq.n	800dc1e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d005      	beq.n	800dc1e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800dc12:	69bb      	ldr	r3, [r7, #24]
 800dc14:	681a      	ldr	r2, [r3, #0]
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d102      	bne.n	800dc24 <tcp_bind+0xb8>
              return ERR_USE;
 800dc1e:	f06f 0307 	mvn.w	r3, #7
 800dc22:	e029      	b.n	800dc78 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800dc24:	69bb      	ldr	r3, [r7, #24]
 800dc26:	68db      	ldr	r3, [r3, #12]
 800dc28:	61bb      	str	r3, [r7, #24]
 800dc2a:	69bb      	ldr	r3, [r7, #24]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d1dd      	bne.n	800dbec <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800dc30:	69fb      	ldr	r3, [r7, #28]
 800dc32:	3301      	adds	r3, #1
 800dc34:	61fb      	str	r3, [r7, #28]
 800dc36:	69fa      	ldr	r2, [r7, #28]
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	dbcf      	blt.n	800dbde <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d00c      	beq.n	800dc5e <tcp_bind+0xf2>
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d008      	beq.n	800dc5e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d002      	beq.n	800dc58 <tcp_bind+0xec>
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	e000      	b.n	800dc5a <tcp_bind+0xee>
 800dc58:	2300      	movs	r3, #0
 800dc5a:	68fa      	ldr	r2, [r7, #12]
 800dc5c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	88fa      	ldrh	r2, [r7, #6]
 800dc62:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800dc64:	4b0c      	ldr	r3, [pc, #48]	; (800dc98 <tcp_bind+0x12c>)
 800dc66:	681a      	ldr	r2, [r3, #0]
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	60da      	str	r2, [r3, #12]
 800dc6c:	4a0a      	ldr	r2, [pc, #40]	; (800dc98 <tcp_bind+0x12c>)
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	6013      	str	r3, [r2, #0]
 800dc72:	f005 fde7 	bl	8013844 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800dc76:	2300      	movs	r3, #0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3720      	adds	r7, #32
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	08028040 	.word	0x08028040
 800dc84:	0801bb0c 	.word	0x0801bb0c
 800dc88:	0801bca0 	.word	0x0801bca0
 800dc8c:	0801bb50 	.word	0x0801bb50
 800dc90:	0801bcb8 	.word	0x0801bcb8
 800dc94:	08028008 	.word	0x08028008
 800dc98:	20010f74 	.word	0x20010f74

0800dc9c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b084      	sub	sp, #16
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	60f8      	str	r0, [r7, #12]
 800dca4:	60b9      	str	r1, [r7, #8]
 800dca6:	4613      	mov	r3, r2
 800dca8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d106      	bne.n	800dcbe <tcp_accept_null+0x22>
 800dcb0:	4b07      	ldr	r3, [pc, #28]	; (800dcd0 <tcp_accept_null+0x34>)
 800dcb2:	f240 320f 	movw	r2, #783	; 0x30f
 800dcb6:	4907      	ldr	r1, [pc, #28]	; (800dcd4 <tcp_accept_null+0x38>)
 800dcb8:	4807      	ldr	r0, [pc, #28]	; (800dcd8 <tcp_accept_null+0x3c>)
 800dcba:	f00b f87d 	bl	8018db8 <iprintf>

  tcp_abort(pcb);
 800dcbe:	68b8      	ldr	r0, [r7, #8]
 800dcc0:	f7ff ff48 	bl	800db54 <tcp_abort>

  return ERR_ABRT;
 800dcc4:	f06f 030c 	mvn.w	r3, #12
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3710      	adds	r7, #16
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}
 800dcd0:	0801bb0c 	.word	0x0801bb0c
 800dcd4:	0801bce0 	.word	0x0801bce0
 800dcd8:	0801bb50 	.word	0x0801bb50

0800dcdc <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b082      	sub	sp, #8
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
 800dce4:	460b      	mov	r3, r1
 800dce6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800dce8:	78fb      	ldrb	r3, [r7, #3]
 800dcea:	2200      	movs	r2, #0
 800dcec:	4619      	mov	r1, r3
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f000 f806 	bl	800dd00 <tcp_listen_with_backlog_and_err>
 800dcf4:	4603      	mov	r3, r0
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3708      	adds	r7, #8
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}
	...

0800dd00 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b088      	sub	sp, #32
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	460b      	mov	r3, r1
 800dd0a:	607a      	str	r2, [r7, #4]
 800dd0c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d109      	bne.n	800dd2c <tcp_listen_with_backlog_and_err+0x2c>
 800dd18:	4b47      	ldr	r3, [pc, #284]	; (800de38 <tcp_listen_with_backlog_and_err+0x138>)
 800dd1a:	f240 3259 	movw	r2, #857	; 0x359
 800dd1e:	4947      	ldr	r1, [pc, #284]	; (800de3c <tcp_listen_with_backlog_and_err+0x13c>)
 800dd20:	4847      	ldr	r0, [pc, #284]	; (800de40 <tcp_listen_with_backlog_and_err+0x140>)
 800dd22:	f00b f849 	bl	8018db8 <iprintf>
 800dd26:	23f0      	movs	r3, #240	; 0xf0
 800dd28:	76fb      	strb	r3, [r7, #27]
 800dd2a:	e079      	b.n	800de20 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	7d1b      	ldrb	r3, [r3, #20]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d009      	beq.n	800dd48 <tcp_listen_with_backlog_and_err+0x48>
 800dd34:	4b40      	ldr	r3, [pc, #256]	; (800de38 <tcp_listen_with_backlog_and_err+0x138>)
 800dd36:	f240 325a 	movw	r2, #858	; 0x35a
 800dd3a:	4942      	ldr	r1, [pc, #264]	; (800de44 <tcp_listen_with_backlog_and_err+0x144>)
 800dd3c:	4840      	ldr	r0, [pc, #256]	; (800de40 <tcp_listen_with_backlog_and_err+0x140>)
 800dd3e:	f00b f83b 	bl	8018db8 <iprintf>
 800dd42:	23f1      	movs	r3, #241	; 0xf1
 800dd44:	76fb      	strb	r3, [r7, #27]
 800dd46:	e06b      	b.n	800de20 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	7d1b      	ldrb	r3, [r3, #20]
 800dd4c:	2b01      	cmp	r3, #1
 800dd4e:	d104      	bne.n	800dd5a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800dd54:	23f7      	movs	r3, #247	; 0xf7
 800dd56:	76fb      	strb	r3, [r7, #27]
    goto done;
 800dd58:	e062      	b.n	800de20 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800dd5a:	2002      	movs	r0, #2
 800dd5c:	f7fe f9d4 	bl	800c108 <memp_malloc>
 800dd60:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800dd62:	69fb      	ldr	r3, [r7, #28]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d102      	bne.n	800dd6e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800dd68:	23ff      	movs	r3, #255	; 0xff
 800dd6a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800dd6c:	e058      	b.n	800de20 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	691a      	ldr	r2, [r3, #16]
 800dd72:	69fb      	ldr	r3, [r7, #28]
 800dd74:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	8ada      	ldrh	r2, [r3, #22]
 800dd7a:	69fb      	ldr	r3, [r7, #28]
 800dd7c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800dd7e:	69fb      	ldr	r3, [r7, #28]
 800dd80:	2201      	movs	r2, #1
 800dd82:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	7d5a      	ldrb	r2, [r3, #21]
 800dd88:	69fb      	ldr	r3, [r7, #28]
 800dd8a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	7a5a      	ldrb	r2, [r3, #9]
 800dd90:	69fb      	ldr	r3, [r7, #28]
 800dd92:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800dd94:	69fb      	ldr	r3, [r7, #28]
 800dd96:	2200      	movs	r2, #0
 800dd98:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	7ada      	ldrb	r2, [r3, #11]
 800dd9e:	69fb      	ldr	r3, [r7, #28]
 800dda0:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	7a9a      	ldrb	r2, [r3, #10]
 800dda6:	69fb      	ldr	r3, [r7, #28]
 800dda8:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	681a      	ldr	r2, [r3, #0]
 800ddae:	69fb      	ldr	r3, [r7, #28]
 800ddb0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	8adb      	ldrh	r3, [r3, #22]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d021      	beq.n	800ddfe <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800ddba:	4b23      	ldr	r3, [pc, #140]	; (800de48 <tcp_listen_with_backlog_and_err+0x148>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	68fa      	ldr	r2, [r7, #12]
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	d105      	bne.n	800ddd0 <tcp_listen_with_backlog_and_err+0xd0>
 800ddc4:	4b20      	ldr	r3, [pc, #128]	; (800de48 <tcp_listen_with_backlog_and_err+0x148>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	68db      	ldr	r3, [r3, #12]
 800ddca:	4a1f      	ldr	r2, [pc, #124]	; (800de48 <tcp_listen_with_backlog_and_err+0x148>)
 800ddcc:	6013      	str	r3, [r2, #0]
 800ddce:	e013      	b.n	800ddf8 <tcp_listen_with_backlog_and_err+0xf8>
 800ddd0:	4b1d      	ldr	r3, [pc, #116]	; (800de48 <tcp_listen_with_backlog_and_err+0x148>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	617b      	str	r3, [r7, #20]
 800ddd6:	e00c      	b.n	800ddf2 <tcp_listen_with_backlog_and_err+0xf2>
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	68db      	ldr	r3, [r3, #12]
 800dddc:	68fa      	ldr	r2, [r7, #12]
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d104      	bne.n	800ddec <tcp_listen_with_backlog_and_err+0xec>
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	68da      	ldr	r2, [r3, #12]
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	60da      	str	r2, [r3, #12]
 800ddea:	e005      	b.n	800ddf8 <tcp_listen_with_backlog_and_err+0xf8>
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	68db      	ldr	r3, [r3, #12]
 800ddf0:	617b      	str	r3, [r7, #20]
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d1ef      	bne.n	800ddd8 <tcp_listen_with_backlog_and_err+0xd8>
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800ddfe:	68f8      	ldr	r0, [r7, #12]
 800de00:	f7ff fb64 	bl	800d4cc <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800de04:	69fb      	ldr	r3, [r7, #28]
 800de06:	4a11      	ldr	r2, [pc, #68]	; (800de4c <tcp_listen_with_backlog_and_err+0x14c>)
 800de08:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800de0a:	4b11      	ldr	r3, [pc, #68]	; (800de50 <tcp_listen_with_backlog_and_err+0x150>)
 800de0c:	681a      	ldr	r2, [r3, #0]
 800de0e:	69fb      	ldr	r3, [r7, #28]
 800de10:	60da      	str	r2, [r3, #12]
 800de12:	4a0f      	ldr	r2, [pc, #60]	; (800de50 <tcp_listen_with_backlog_and_err+0x150>)
 800de14:	69fb      	ldr	r3, [r7, #28]
 800de16:	6013      	str	r3, [r2, #0]
 800de18:	f005 fd14 	bl	8013844 <tcp_timer_needed>
  res = ERR_OK;
 800de1c:	2300      	movs	r3, #0
 800de1e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d002      	beq.n	800de2c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	7efa      	ldrb	r2, [r7, #27]
 800de2a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800de2c:	69fb      	ldr	r3, [r7, #28]
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3720      	adds	r7, #32
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
 800de36:	bf00      	nop
 800de38:	0801bb0c 	.word	0x0801bb0c
 800de3c:	0801bd00 	.word	0x0801bd00
 800de40:	0801bb50 	.word	0x0801bb50
 800de44:	0801bd30 	.word	0x0801bd30
 800de48:	20010f74 	.word	0x20010f74
 800de4c:	0800dc9d 	.word	0x0800dc9d
 800de50:	20010f78 	.word	0x20010f78

0800de54 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b084      	sub	sp, #16
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d106      	bne.n	800de70 <tcp_update_rcv_ann_wnd+0x1c>
 800de62:	4b25      	ldr	r3, [pc, #148]	; (800def8 <tcp_update_rcv_ann_wnd+0xa4>)
 800de64:	f240 32a6 	movw	r2, #934	; 0x3a6
 800de68:	4924      	ldr	r1, [pc, #144]	; (800defc <tcp_update_rcv_ann_wnd+0xa8>)
 800de6a:	4825      	ldr	r0, [pc, #148]	; (800df00 <tcp_update_rcv_ann_wnd+0xac>)
 800de6c:	f00a ffa4 	bl	8018db8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de74:	687a      	ldr	r2, [r7, #4]
 800de76:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800de78:	4413      	add	r3, r2
 800de7a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de80:	687a      	ldr	r2, [r7, #4]
 800de82:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800de84:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800de88:	bf28      	it	cs
 800de8a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800de8e:	b292      	uxth	r2, r2
 800de90:	4413      	add	r3, r2
 800de92:	68fa      	ldr	r2, [r7, #12]
 800de94:	1ad3      	subs	r3, r2, r3
 800de96:	2b00      	cmp	r3, #0
 800de98:	db08      	blt.n	800deac <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dea6:	68fa      	ldr	r2, [r7, #12]
 800dea8:	1ad3      	subs	r3, r2, r3
 800deaa:	e020      	b.n	800deee <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deb4:	1ad3      	subs	r3, r2, r3
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	dd03      	ble.n	800dec2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2200      	movs	r2, #0
 800debe:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dec0:	e014      	b.n	800deec <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deca:	1ad3      	subs	r3, r2, r3
 800decc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ded4:	d306      	bcc.n	800dee4 <tcp_update_rcv_ann_wnd+0x90>
 800ded6:	4b08      	ldr	r3, [pc, #32]	; (800def8 <tcp_update_rcv_ann_wnd+0xa4>)
 800ded8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800dedc:	4909      	ldr	r1, [pc, #36]	; (800df04 <tcp_update_rcv_ann_wnd+0xb0>)
 800dede:	4808      	ldr	r0, [pc, #32]	; (800df00 <tcp_update_rcv_ann_wnd+0xac>)
 800dee0:	f00a ff6a 	bl	8018db8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	b29a      	uxth	r2, r3
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800deec:	2300      	movs	r3, #0
  }
}
 800deee:	4618      	mov	r0, r3
 800def0:	3710      	adds	r7, #16
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}
 800def6:	bf00      	nop
 800def8:	0801bb0c 	.word	0x0801bb0c
 800defc:	0801bd68 	.word	0x0801bd68
 800df00:	0801bb50 	.word	0x0801bb50
 800df04:	0801bd8c 	.word	0x0801bd8c

0800df08 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b084      	sub	sp, #16
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
 800df10:	460b      	mov	r3, r1
 800df12:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d107      	bne.n	800df2a <tcp_recved+0x22>
 800df1a:	4b1f      	ldr	r3, [pc, #124]	; (800df98 <tcp_recved+0x90>)
 800df1c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800df20:	491e      	ldr	r1, [pc, #120]	; (800df9c <tcp_recved+0x94>)
 800df22:	481f      	ldr	r0, [pc, #124]	; (800dfa0 <tcp_recved+0x98>)
 800df24:	f00a ff48 	bl	8018db8 <iprintf>
 800df28:	e032      	b.n	800df90 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	7d1b      	ldrb	r3, [r3, #20]
 800df2e:	2b01      	cmp	r3, #1
 800df30:	d106      	bne.n	800df40 <tcp_recved+0x38>
 800df32:	4b19      	ldr	r3, [pc, #100]	; (800df98 <tcp_recved+0x90>)
 800df34:	f240 32d2 	movw	r2, #978	; 0x3d2
 800df38:	491a      	ldr	r1, [pc, #104]	; (800dfa4 <tcp_recved+0x9c>)
 800df3a:	4819      	ldr	r0, [pc, #100]	; (800dfa0 <tcp_recved+0x98>)
 800df3c:	f00a ff3c 	bl	8018db8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800df44:	887b      	ldrh	r3, [r7, #2]
 800df46:	4413      	add	r3, r2
 800df48:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800df4a:	89fb      	ldrh	r3, [r7, #14]
 800df4c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800df50:	d804      	bhi.n	800df5c <tcp_recved+0x54>
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df56:	89fa      	ldrh	r2, [r7, #14]
 800df58:	429a      	cmp	r2, r3
 800df5a:	d204      	bcs.n	800df66 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800df62:	851a      	strh	r2, [r3, #40]	; 0x28
 800df64:	e002      	b.n	800df6c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	89fa      	ldrh	r2, [r7, #14]
 800df6a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f7ff ff71 	bl	800de54 <tcp_update_rcv_ann_wnd>
 800df72:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800df7a:	d309      	bcc.n	800df90 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	8b5b      	ldrh	r3, [r3, #26]
 800df80:	f043 0302 	orr.w	r3, r3, #2
 800df84:	b29a      	uxth	r2, r3
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f004 fce4 	bl	8012958 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800df90:	3710      	adds	r7, #16
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}
 800df96:	bf00      	nop
 800df98:	0801bb0c 	.word	0x0801bb0c
 800df9c:	0801bda8 	.word	0x0801bda8
 800dfa0:	0801bb50 	.word	0x0801bb50
 800dfa4:	0801bdc0 	.word	0x0801bdc0

0800dfa8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b083      	sub	sp, #12
 800dfac:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800dfb2:	4b1e      	ldr	r3, [pc, #120]	; (800e02c <tcp_new_port+0x84>)
 800dfb4:	881b      	ldrh	r3, [r3, #0]
 800dfb6:	3301      	adds	r3, #1
 800dfb8:	b29a      	uxth	r2, r3
 800dfba:	4b1c      	ldr	r3, [pc, #112]	; (800e02c <tcp_new_port+0x84>)
 800dfbc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800dfbe:	4b1b      	ldr	r3, [pc, #108]	; (800e02c <tcp_new_port+0x84>)
 800dfc0:	881b      	ldrh	r3, [r3, #0]
 800dfc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dfc6:	4293      	cmp	r3, r2
 800dfc8:	d103      	bne.n	800dfd2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800dfca:	4b18      	ldr	r3, [pc, #96]	; (800e02c <tcp_new_port+0x84>)
 800dfcc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800dfd0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	71fb      	strb	r3, [r7, #7]
 800dfd6:	e01e      	b.n	800e016 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800dfd8:	79fb      	ldrb	r3, [r7, #7]
 800dfda:	4a15      	ldr	r2, [pc, #84]	; (800e030 <tcp_new_port+0x88>)
 800dfdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	603b      	str	r3, [r7, #0]
 800dfe4:	e011      	b.n	800e00a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	8ada      	ldrh	r2, [r3, #22]
 800dfea:	4b10      	ldr	r3, [pc, #64]	; (800e02c <tcp_new_port+0x84>)
 800dfec:	881b      	ldrh	r3, [r3, #0]
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d108      	bne.n	800e004 <tcp_new_port+0x5c>
        n++;
 800dff2:	88bb      	ldrh	r3, [r7, #4]
 800dff4:	3301      	adds	r3, #1
 800dff6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800dff8:	88bb      	ldrh	r3, [r7, #4]
 800dffa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dffe:	d3d8      	bcc.n	800dfb2 <tcp_new_port+0xa>
          return 0;
 800e000:	2300      	movs	r3, #0
 800e002:	e00d      	b.n	800e020 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	68db      	ldr	r3, [r3, #12]
 800e008:	603b      	str	r3, [r7, #0]
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d1ea      	bne.n	800dfe6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e010:	79fb      	ldrb	r3, [r7, #7]
 800e012:	3301      	adds	r3, #1
 800e014:	71fb      	strb	r3, [r7, #7]
 800e016:	79fb      	ldrb	r3, [r7, #7]
 800e018:	2b03      	cmp	r3, #3
 800e01a:	d9dd      	bls.n	800dfd8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e01c:	4b03      	ldr	r3, [pc, #12]	; (800e02c <tcp_new_port+0x84>)
 800e01e:	881b      	ldrh	r3, [r3, #0]
}
 800e020:	4618      	mov	r0, r3
 800e022:	370c      	adds	r7, #12
 800e024:	46bd      	mov	sp, r7
 800e026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02a:	4770      	bx	lr
 800e02c:	20000024 	.word	0x20000024
 800e030:	08028008 	.word	0x08028008

0800e034 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b08a      	sub	sp, #40	; 0x28
 800e038:	af00      	add	r7, sp, #0
 800e03a:	60f8      	str	r0, [r7, #12]
 800e03c:	60b9      	str	r1, [r7, #8]
 800e03e:	603b      	str	r3, [r7, #0]
 800e040:	4613      	mov	r3, r2
 800e042:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800e044:	2300      	movs	r3, #0
 800e046:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d109      	bne.n	800e062 <tcp_connect+0x2e>
 800e04e:	4b7d      	ldr	r3, [pc, #500]	; (800e244 <tcp_connect+0x210>)
 800e050:	f240 4235 	movw	r2, #1077	; 0x435
 800e054:	497c      	ldr	r1, [pc, #496]	; (800e248 <tcp_connect+0x214>)
 800e056:	487d      	ldr	r0, [pc, #500]	; (800e24c <tcp_connect+0x218>)
 800e058:	f00a feae 	bl	8018db8 <iprintf>
 800e05c:	f06f 030f 	mvn.w	r3, #15
 800e060:	e0ec      	b.n	800e23c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d109      	bne.n	800e07c <tcp_connect+0x48>
 800e068:	4b76      	ldr	r3, [pc, #472]	; (800e244 <tcp_connect+0x210>)
 800e06a:	f240 4236 	movw	r2, #1078	; 0x436
 800e06e:	4978      	ldr	r1, [pc, #480]	; (800e250 <tcp_connect+0x21c>)
 800e070:	4876      	ldr	r0, [pc, #472]	; (800e24c <tcp_connect+0x218>)
 800e072:	f00a fea1 	bl	8018db8 <iprintf>
 800e076:	f06f 030f 	mvn.w	r3, #15
 800e07a:	e0df      	b.n	800e23c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	7d1b      	ldrb	r3, [r3, #20]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d009      	beq.n	800e098 <tcp_connect+0x64>
 800e084:	4b6f      	ldr	r3, [pc, #444]	; (800e244 <tcp_connect+0x210>)
 800e086:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800e08a:	4972      	ldr	r1, [pc, #456]	; (800e254 <tcp_connect+0x220>)
 800e08c:	486f      	ldr	r0, [pc, #444]	; (800e24c <tcp_connect+0x218>)
 800e08e:	f00a fe93 	bl	8018db8 <iprintf>
 800e092:	f06f 0309 	mvn.w	r3, #9
 800e096:	e0d1      	b.n	800e23c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d002      	beq.n	800e0a4 <tcp_connect+0x70>
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	e000      	b.n	800e0a6 <tcp_connect+0x72>
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	68fa      	ldr	r2, [r7, #12]
 800e0a8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	88fa      	ldrh	r2, [r7, #6]
 800e0ae:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	7a1b      	ldrb	r3, [r3, #8]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d006      	beq.n	800e0c6 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	7a1b      	ldrb	r3, [r3, #8]
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7fe fbbb 	bl	800c838 <netif_get_by_index>
 800e0c2:	6278      	str	r0, [r7, #36]	; 0x24
 800e0c4:	e005      	b.n	800e0d2 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	3304      	adds	r3, #4
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f009 f96c 	bl	80173a8 <ip4_route>
 800e0d0:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800e0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d102      	bne.n	800e0de <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800e0d8:	f06f 0303 	mvn.w	r3, #3
 800e0dc:	e0ae      	b.n	800e23c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d003      	beq.n	800e0ec <tcp_connect+0xb8>
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d111      	bne.n	800e110 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800e0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d002      	beq.n	800e0f8 <tcp_connect+0xc4>
 800e0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f4:	3304      	adds	r3, #4
 800e0f6:	e000      	b.n	800e0fa <tcp_connect+0xc6>
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800e0fc:	69fb      	ldr	r3, [r7, #28]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d102      	bne.n	800e108 <tcp_connect+0xd4>
      return ERR_RTE;
 800e102:	f06f 0303 	mvn.w	r3, #3
 800e106:	e099      	b.n	800e23c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e108:	69fb      	ldr	r3, [r7, #28]
 800e10a:	681a      	ldr	r2, [r3, #0]
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	8adb      	ldrh	r3, [r3, #22]
 800e114:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	8adb      	ldrh	r3, [r3, #22]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d10c      	bne.n	800e138 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800e11e:	f7ff ff43 	bl	800dfa8 <tcp_new_port>
 800e122:	4603      	mov	r3, r0
 800e124:	461a      	mov	r2, r3
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	8adb      	ldrh	r3, [r3, #22]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d102      	bne.n	800e138 <tcp_connect+0x104>
      return ERR_BUF;
 800e132:	f06f 0301 	mvn.w	r3, #1
 800e136:	e081      	b.n	800e23c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800e138:	68f8      	ldr	r0, [r7, #12]
 800e13a:	f001 f885 	bl	800f248 <tcp_next_iss>
 800e13e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	2200      	movs	r2, #0
 800e144:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	697a      	ldr	r2, [r7, #20]
 800e14a:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	1e5a      	subs	r2, r3, #1
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	1e5a      	subs	r2, r3, #1
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800e15c:	697b      	ldr	r3, [r7, #20]
 800e15e:	1e5a      	subs	r2, r3, #1
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e16a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e182:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e18c:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	3304      	adds	r3, #4
 800e196:	461a      	mov	r2, r3
 800e198:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e19a:	f001 f87b 	bl	800f294 <tcp_eff_send_mss_netif>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	461a      	mov	r2, r3
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	683a      	ldr	r2, [r7, #0]
 800e1b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800e1b6:	2102      	movs	r1, #2
 800e1b8:	68f8      	ldr	r0, [r7, #12]
 800e1ba:	f004 fadf 	bl	801277c <tcp_enqueue_flags>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800e1c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d136      	bne.n	800e238 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	2202      	movs	r2, #2
 800e1ce:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800e1d0:	8b7b      	ldrh	r3, [r7, #26]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d021      	beq.n	800e21a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800e1d6:	4b20      	ldr	r3, [pc, #128]	; (800e258 <tcp_connect+0x224>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	68fa      	ldr	r2, [r7, #12]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d105      	bne.n	800e1ec <tcp_connect+0x1b8>
 800e1e0:	4b1d      	ldr	r3, [pc, #116]	; (800e258 <tcp_connect+0x224>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	68db      	ldr	r3, [r3, #12]
 800e1e6:	4a1c      	ldr	r2, [pc, #112]	; (800e258 <tcp_connect+0x224>)
 800e1e8:	6013      	str	r3, [r2, #0]
 800e1ea:	e013      	b.n	800e214 <tcp_connect+0x1e0>
 800e1ec:	4b1a      	ldr	r3, [pc, #104]	; (800e258 <tcp_connect+0x224>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	623b      	str	r3, [r7, #32]
 800e1f2:	e00c      	b.n	800e20e <tcp_connect+0x1da>
 800e1f4:	6a3b      	ldr	r3, [r7, #32]
 800e1f6:	68db      	ldr	r3, [r3, #12]
 800e1f8:	68fa      	ldr	r2, [r7, #12]
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d104      	bne.n	800e208 <tcp_connect+0x1d4>
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	68da      	ldr	r2, [r3, #12]
 800e202:	6a3b      	ldr	r3, [r7, #32]
 800e204:	60da      	str	r2, [r3, #12]
 800e206:	e005      	b.n	800e214 <tcp_connect+0x1e0>
 800e208:	6a3b      	ldr	r3, [r7, #32]
 800e20a:	68db      	ldr	r3, [r3, #12]
 800e20c:	623b      	str	r3, [r7, #32]
 800e20e:	6a3b      	ldr	r3, [r7, #32]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d1ef      	bne.n	800e1f4 <tcp_connect+0x1c0>
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	2200      	movs	r2, #0
 800e218:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800e21a:	4b10      	ldr	r3, [pc, #64]	; (800e25c <tcp_connect+0x228>)
 800e21c:	681a      	ldr	r2, [r3, #0]
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	60da      	str	r2, [r3, #12]
 800e222:	4a0e      	ldr	r2, [pc, #56]	; (800e25c <tcp_connect+0x228>)
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	6013      	str	r3, [r2, #0]
 800e228:	f005 fb0c 	bl	8013844 <tcp_timer_needed>
 800e22c:	4b0c      	ldr	r3, [pc, #48]	; (800e260 <tcp_connect+0x22c>)
 800e22e:	2201      	movs	r2, #1
 800e230:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800e232:	68f8      	ldr	r0, [r7, #12]
 800e234:	f004 fb90 	bl	8012958 <tcp_output>
  }
  return ret;
 800e238:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3728      	adds	r7, #40	; 0x28
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}
 800e244:	0801bb0c 	.word	0x0801bb0c
 800e248:	0801bde8 	.word	0x0801bde8
 800e24c:	0801bb50 	.word	0x0801bb50
 800e250:	0801be04 	.word	0x0801be04
 800e254:	0801be20 	.word	0x0801be20
 800e258:	20010f74 	.word	0x20010f74
 800e25c:	20010f7c 	.word	0x20010f7c
 800e260:	20010f84 	.word	0x20010f84

0800e264 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e264:	b5b0      	push	{r4, r5, r7, lr}
 800e266:	b090      	sub	sp, #64	; 0x40
 800e268:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e26a:	2300      	movs	r3, #0
 800e26c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e270:	4b94      	ldr	r3, [pc, #592]	; (800e4c4 <tcp_slowtmr+0x260>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	3301      	adds	r3, #1
 800e276:	4a93      	ldr	r2, [pc, #588]	; (800e4c4 <tcp_slowtmr+0x260>)
 800e278:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e27a:	4b93      	ldr	r3, [pc, #588]	; (800e4c8 <tcp_slowtmr+0x264>)
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	3301      	adds	r3, #1
 800e280:	b2da      	uxtb	r2, r3
 800e282:	4b91      	ldr	r3, [pc, #580]	; (800e4c8 <tcp_slowtmr+0x264>)
 800e284:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e286:	2300      	movs	r3, #0
 800e288:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e28a:	4b90      	ldr	r3, [pc, #576]	; (800e4cc <tcp_slowtmr+0x268>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e290:	e29f      	b.n	800e7d2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e294:	7d1b      	ldrb	r3, [r3, #20]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d106      	bne.n	800e2a8 <tcp_slowtmr+0x44>
 800e29a:	4b8d      	ldr	r3, [pc, #564]	; (800e4d0 <tcp_slowtmr+0x26c>)
 800e29c:	f240 42be 	movw	r2, #1214	; 0x4be
 800e2a0:	498c      	ldr	r1, [pc, #560]	; (800e4d4 <tcp_slowtmr+0x270>)
 800e2a2:	488d      	ldr	r0, [pc, #564]	; (800e4d8 <tcp_slowtmr+0x274>)
 800e2a4:	f00a fd88 	bl	8018db8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2aa:	7d1b      	ldrb	r3, [r3, #20]
 800e2ac:	2b01      	cmp	r3, #1
 800e2ae:	d106      	bne.n	800e2be <tcp_slowtmr+0x5a>
 800e2b0:	4b87      	ldr	r3, [pc, #540]	; (800e4d0 <tcp_slowtmr+0x26c>)
 800e2b2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e2b6:	4989      	ldr	r1, [pc, #548]	; (800e4dc <tcp_slowtmr+0x278>)
 800e2b8:	4887      	ldr	r0, [pc, #540]	; (800e4d8 <tcp_slowtmr+0x274>)
 800e2ba:	f00a fd7d 	bl	8018db8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c0:	7d1b      	ldrb	r3, [r3, #20]
 800e2c2:	2b0a      	cmp	r3, #10
 800e2c4:	d106      	bne.n	800e2d4 <tcp_slowtmr+0x70>
 800e2c6:	4b82      	ldr	r3, [pc, #520]	; (800e4d0 <tcp_slowtmr+0x26c>)
 800e2c8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e2cc:	4984      	ldr	r1, [pc, #528]	; (800e4e0 <tcp_slowtmr+0x27c>)
 800e2ce:	4882      	ldr	r0, [pc, #520]	; (800e4d8 <tcp_slowtmr+0x274>)
 800e2d0:	f00a fd72 	bl	8018db8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d6:	7f9a      	ldrb	r2, [r3, #30]
 800e2d8:	4b7b      	ldr	r3, [pc, #492]	; (800e4c8 <tcp_slowtmr+0x264>)
 800e2da:	781b      	ldrb	r3, [r3, #0]
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d105      	bne.n	800e2ec <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e6:	68db      	ldr	r3, [r3, #12]
 800e2e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e2ea:	e272      	b.n	800e7d2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e2ec:	4b76      	ldr	r3, [pc, #472]	; (800e4c8 <tcp_slowtmr+0x264>)
 800e2ee:	781a      	ldrb	r2, [r3, #0]
 800e2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e302:	7d1b      	ldrb	r3, [r3, #20]
 800e304:	2b02      	cmp	r3, #2
 800e306:	d10a      	bne.n	800e31e <tcp_slowtmr+0xba>
 800e308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e30a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e30e:	2b05      	cmp	r3, #5
 800e310:	d905      	bls.n	800e31e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e312:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e316:	3301      	adds	r3, #1
 800e318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e31c:	e11e      	b.n	800e55c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e320:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e324:	2b0b      	cmp	r3, #11
 800e326:	d905      	bls.n	800e334 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e32c:	3301      	adds	r3, #1
 800e32e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e332:	e113      	b.n	800e55c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e336:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d075      	beq.n	800e42a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e342:	2b00      	cmp	r3, #0
 800e344:	d006      	beq.n	800e354 <tcp_slowtmr+0xf0>
 800e346:	4b62      	ldr	r3, [pc, #392]	; (800e4d0 <tcp_slowtmr+0x26c>)
 800e348:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e34c:	4965      	ldr	r1, [pc, #404]	; (800e4e4 <tcp_slowtmr+0x280>)
 800e34e:	4862      	ldr	r0, [pc, #392]	; (800e4d8 <tcp_slowtmr+0x274>)
 800e350:	f00a fd32 	bl	8018db8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d106      	bne.n	800e36a <tcp_slowtmr+0x106>
 800e35c:	4b5c      	ldr	r3, [pc, #368]	; (800e4d0 <tcp_slowtmr+0x26c>)
 800e35e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e362:	4961      	ldr	r1, [pc, #388]	; (800e4e8 <tcp_slowtmr+0x284>)
 800e364:	485c      	ldr	r0, [pc, #368]	; (800e4d8 <tcp_slowtmr+0x274>)
 800e366:	f00a fd27 	bl	8018db8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e36c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e370:	2b0b      	cmp	r3, #11
 800e372:	d905      	bls.n	800e380 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e378:	3301      	adds	r3, #1
 800e37a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e37e:	e0ed      	b.n	800e55c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e382:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e386:	3b01      	subs	r3, #1
 800e388:	4a58      	ldr	r2, [pc, #352]	; (800e4ec <tcp_slowtmr+0x288>)
 800e38a:	5cd3      	ldrb	r3, [r2, r3]
 800e38c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e390:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e394:	7c7a      	ldrb	r2, [r7, #17]
 800e396:	429a      	cmp	r2, r3
 800e398:	d907      	bls.n	800e3aa <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e39c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e3a0:	3301      	adds	r3, #1
 800e3a2:	b2da      	uxtb	r2, r3
 800e3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e3b0:	7c7a      	ldrb	r2, [r7, #17]
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	f200 80d2 	bhi.w	800e55c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d108      	bne.n	800e3d8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e3c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3c8:	f005 f96e 	bl	80136a8 <tcp_zero_window_probe>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d014      	beq.n	800e3fc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	623b      	str	r3, [r7, #32]
 800e3d6:	e011      	b.n	800e3fc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e3de:	4619      	mov	r1, r3
 800e3e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3e2:	f004 f833 	bl	801244c <tcp_split_unsent_seg>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d107      	bne.n	800e3fc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e3ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3ee:	f004 fab3 	bl	8012958 <tcp_output>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d101      	bne.n	800e3fc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e3fc:	6a3b      	ldr	r3, [r7, #32]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	f000 80ac 	beq.w	800e55c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e406:	2200      	movs	r2, #0
 800e408:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e40e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e412:	2b06      	cmp	r3, #6
 800e414:	f200 80a2 	bhi.w	800e55c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e41e:	3301      	adds	r3, #1
 800e420:	b2da      	uxtb	r2, r3
 800e422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e424:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e428:	e098      	b.n	800e55c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e42c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e430:	2b00      	cmp	r3, #0
 800e432:	db0f      	blt.n	800e454 <tcp_slowtmr+0x1f0>
 800e434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e436:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e43a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e43e:	4293      	cmp	r3, r2
 800e440:	d008      	beq.n	800e454 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e444:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e448:	b29b      	uxth	r3, r3
 800e44a:	3301      	adds	r3, #1
 800e44c:	b29b      	uxth	r3, r3
 800e44e:	b21a      	sxth	r2, r3
 800e450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e452:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e456:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e45c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e460:	429a      	cmp	r2, r3
 800e462:	db7b      	blt.n	800e55c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e464:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e466:	f004 fd6b 	bl	8012f40 <tcp_rexmit_rto_prepare>
 800e46a:	4603      	mov	r3, r0
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d007      	beq.n	800e480 <tcp_slowtmr+0x21c>
 800e470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e474:	2b00      	cmp	r3, #0
 800e476:	d171      	bne.n	800e55c <tcp_slowtmr+0x2f8>
 800e478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e47a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d06d      	beq.n	800e55c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e482:	7d1b      	ldrb	r3, [r3, #20]
 800e484:	2b02      	cmp	r3, #2
 800e486:	d03a      	beq.n	800e4fe <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e48a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e48e:	2b0c      	cmp	r3, #12
 800e490:	bf28      	it	cs
 800e492:	230c      	movcs	r3, #12
 800e494:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e498:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e49c:	10db      	asrs	r3, r3, #3
 800e49e:	b21b      	sxth	r3, r3
 800e4a0:	461a      	mov	r2, r3
 800e4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e4a8:	4413      	add	r3, r2
 800e4aa:	7efa      	ldrb	r2, [r7, #27]
 800e4ac:	4910      	ldr	r1, [pc, #64]	; (800e4f0 <tcp_slowtmr+0x28c>)
 800e4ae:	5c8a      	ldrb	r2, [r1, r2]
 800e4b0:	4093      	lsls	r3, r2
 800e4b2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e4b4:	697b      	ldr	r3, [r7, #20]
 800e4b6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	dc1a      	bgt.n	800e4f4 <tcp_slowtmr+0x290>
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	b21a      	sxth	r2, r3
 800e4c2:	e019      	b.n	800e4f8 <tcp_slowtmr+0x294>
 800e4c4:	20010f70 	.word	0x20010f70
 800e4c8:	20010f86 	.word	0x20010f86
 800e4cc:	20010f7c 	.word	0x20010f7c
 800e4d0:	0801bb0c 	.word	0x0801bb0c
 800e4d4:	0801be50 	.word	0x0801be50
 800e4d8:	0801bb50 	.word	0x0801bb50
 800e4dc:	0801be7c 	.word	0x0801be7c
 800e4e0:	0801bea8 	.word	0x0801bea8
 800e4e4:	0801bed8 	.word	0x0801bed8
 800e4e8:	0801bf0c 	.word	0x0801bf0c
 800e4ec:	08028000 	.word	0x08028000
 800e4f0:	08027ff0 	.word	0x08027ff0
 800e4f4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e500:	2200      	movs	r2, #0
 800e502:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e506:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e50c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e510:	4293      	cmp	r3, r2
 800e512:	bf28      	it	cs
 800e514:	4613      	movcs	r3, r2
 800e516:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e518:	8a7b      	ldrh	r3, [r7, #18]
 800e51a:	085b      	lsrs	r3, r3, #1
 800e51c:	b29a      	uxth	r2, r3
 800e51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e520:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e526:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e52c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e52e:	005b      	lsls	r3, r3, #1
 800e530:	b29b      	uxth	r3, r3
 800e532:	429a      	cmp	r2, r3
 800e534:	d206      	bcs.n	800e544 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e538:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e53a:	005b      	lsls	r3, r3, #1
 800e53c:	b29a      	uxth	r2, r3
 800e53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e540:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e546:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e54a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e550:	2200      	movs	r2, #0
 800e552:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e556:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e558:	f004 fd62 	bl	8013020 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55e:	7d1b      	ldrb	r3, [r3, #20]
 800e560:	2b06      	cmp	r3, #6
 800e562:	d111      	bne.n	800e588 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e566:	8b5b      	ldrh	r3, [r3, #26]
 800e568:	f003 0310 	and.w	r3, r3, #16
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d00b      	beq.n	800e588 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e570:	4b9d      	ldr	r3, [pc, #628]	; (800e7e8 <tcp_slowtmr+0x584>)
 800e572:	681a      	ldr	r2, [r3, #0]
 800e574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e576:	6a1b      	ldr	r3, [r3, #32]
 800e578:	1ad3      	subs	r3, r2, r3
 800e57a:	2b28      	cmp	r3, #40	; 0x28
 800e57c:	d904      	bls.n	800e588 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e57e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e582:	3301      	adds	r3, #1
 800e584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e58a:	7a5b      	ldrb	r3, [r3, #9]
 800e58c:	f003 0308 	and.w	r3, r3, #8
 800e590:	2b00      	cmp	r3, #0
 800e592:	d04c      	beq.n	800e62e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e596:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e598:	2b04      	cmp	r3, #4
 800e59a:	d003      	beq.n	800e5a4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e59e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e5a0:	2b07      	cmp	r3, #7
 800e5a2:	d144      	bne.n	800e62e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e5a4:	4b90      	ldr	r3, [pc, #576]	; (800e7e8 <tcp_slowtmr+0x584>)
 800e5a6:	681a      	ldr	r2, [r3, #0]
 800e5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5aa:	6a1b      	ldr	r3, [r3, #32]
 800e5ac:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e5b4:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800e5b8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800e5bc:	498b      	ldr	r1, [pc, #556]	; (800e7ec <tcp_slowtmr+0x588>)
 800e5be:	fba1 1303 	umull	r1, r3, r1, r3
 800e5c2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d90a      	bls.n	800e5de <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e5c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5cc:	3301      	adds	r3, #1
 800e5ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e5d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e5d6:	3301      	adds	r3, #1
 800e5d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e5dc:	e027      	b.n	800e62e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e5de:	4b82      	ldr	r3, [pc, #520]	; (800e7e8 <tcp_slowtmr+0x584>)
 800e5e0:	681a      	ldr	r2, [r3, #0]
 800e5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e4:	6a1b      	ldr	r3, [r3, #32]
 800e5e6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ea:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	4b7e      	ldr	r3, [pc, #504]	; (800e7f0 <tcp_slowtmr+0x58c>)
 800e5f8:	fb00 f303 	mul.w	r3, r0, r3
 800e5fc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e5fe:	497b      	ldr	r1, [pc, #492]	; (800e7ec <tcp_slowtmr+0x588>)
 800e600:	fba1 1303 	umull	r1, r3, r1, r3
 800e604:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e606:	429a      	cmp	r2, r3
 800e608:	d911      	bls.n	800e62e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e60a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e60c:	f005 f80c 	bl	8013628 <tcp_keepalive>
 800e610:	4603      	mov	r3, r0
 800e612:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e616:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d107      	bne.n	800e62e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e620:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e624:	3301      	adds	r3, #1
 800e626:	b2da      	uxtb	r2, r3
 800e628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e62a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e632:	2b00      	cmp	r3, #0
 800e634:	d011      	beq.n	800e65a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e636:	4b6c      	ldr	r3, [pc, #432]	; (800e7e8 <tcp_slowtmr+0x584>)
 800e638:	681a      	ldr	r2, [r3, #0]
 800e63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63c:	6a1b      	ldr	r3, [r3, #32]
 800e63e:	1ad2      	subs	r2, r2, r3
 800e640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e642:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e646:	4619      	mov	r1, r3
 800e648:	460b      	mov	r3, r1
 800e64a:	005b      	lsls	r3, r3, #1
 800e64c:	440b      	add	r3, r1
 800e64e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e650:	429a      	cmp	r2, r3
 800e652:	d302      	bcc.n	800e65a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e654:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e656:	f000 fec7 	bl	800f3e8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e65c:	7d1b      	ldrb	r3, [r3, #20]
 800e65e:	2b03      	cmp	r3, #3
 800e660:	d10b      	bne.n	800e67a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e662:	4b61      	ldr	r3, [pc, #388]	; (800e7e8 <tcp_slowtmr+0x584>)
 800e664:	681a      	ldr	r2, [r3, #0]
 800e666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e668:	6a1b      	ldr	r3, [r3, #32]
 800e66a:	1ad3      	subs	r3, r2, r3
 800e66c:	2b28      	cmp	r3, #40	; 0x28
 800e66e:	d904      	bls.n	800e67a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e674:	3301      	adds	r3, #1
 800e676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67c:	7d1b      	ldrb	r3, [r3, #20]
 800e67e:	2b09      	cmp	r3, #9
 800e680:	d10b      	bne.n	800e69a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e682:	4b59      	ldr	r3, [pc, #356]	; (800e7e8 <tcp_slowtmr+0x584>)
 800e684:	681a      	ldr	r2, [r3, #0]
 800e686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e688:	6a1b      	ldr	r3, [r3, #32]
 800e68a:	1ad3      	subs	r3, r2, r3
 800e68c:	2bf0      	cmp	r3, #240	; 0xf0
 800e68e:	d904      	bls.n	800e69a <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e694:	3301      	adds	r3, #1
 800e696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e69a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d060      	beq.n	800e764 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6a8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e6aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e6ac:	f000 fce8 	bl	800f080 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d010      	beq.n	800e6d8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e6b6:	4b4f      	ldr	r3, [pc, #316]	; (800e7f4 <tcp_slowtmr+0x590>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d106      	bne.n	800e6ce <tcp_slowtmr+0x46a>
 800e6c0:	4b4d      	ldr	r3, [pc, #308]	; (800e7f8 <tcp_slowtmr+0x594>)
 800e6c2:	f240 526d 	movw	r2, #1389	; 0x56d
 800e6c6:	494d      	ldr	r1, [pc, #308]	; (800e7fc <tcp_slowtmr+0x598>)
 800e6c8:	484d      	ldr	r0, [pc, #308]	; (800e800 <tcp_slowtmr+0x59c>)
 800e6ca:	f00a fb75 	bl	8018db8 <iprintf>
        prev->next = pcb->next;
 800e6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d0:	68da      	ldr	r2, [r3, #12]
 800e6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d4:	60da      	str	r2, [r3, #12]
 800e6d6:	e00f      	b.n	800e6f8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e6d8:	4b46      	ldr	r3, [pc, #280]	; (800e7f4 <tcp_slowtmr+0x590>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6de:	429a      	cmp	r2, r3
 800e6e0:	d006      	beq.n	800e6f0 <tcp_slowtmr+0x48c>
 800e6e2:	4b45      	ldr	r3, [pc, #276]	; (800e7f8 <tcp_slowtmr+0x594>)
 800e6e4:	f240 5271 	movw	r2, #1393	; 0x571
 800e6e8:	4946      	ldr	r1, [pc, #280]	; (800e804 <tcp_slowtmr+0x5a0>)
 800e6ea:	4845      	ldr	r0, [pc, #276]	; (800e800 <tcp_slowtmr+0x59c>)
 800e6ec:	f00a fb64 	bl	8018db8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f2:	68db      	ldr	r3, [r3, #12]
 800e6f4:	4a3f      	ldr	r2, [pc, #252]	; (800e7f4 <tcp_slowtmr+0x590>)
 800e6f6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e6f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d013      	beq.n	800e728 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e702:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e706:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e708:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70c:	3304      	adds	r3, #4
 800e70e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e710:	8ad2      	ldrh	r2, [r2, #22]
 800e712:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e714:	8b09      	ldrh	r1, [r1, #24]
 800e716:	9102      	str	r1, [sp, #8]
 800e718:	9201      	str	r2, [sp, #4]
 800e71a:	9300      	str	r3, [sp, #0]
 800e71c:	462b      	mov	r3, r5
 800e71e:	4622      	mov	r2, r4
 800e720:	4601      	mov	r1, r0
 800e722:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e724:	f004 fecc 	bl	80134c0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e72a:	691b      	ldr	r3, [r3, #16]
 800e72c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e730:	7d1b      	ldrb	r3, [r3, #20]
 800e732:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e736:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e73a:	68db      	ldr	r3, [r3, #12]
 800e73c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e73e:	6838      	ldr	r0, [r7, #0]
 800e740:	f7fe fec4 	bl	800d4cc <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e744:	4b30      	ldr	r3, [pc, #192]	; (800e808 <tcp_slowtmr+0x5a4>)
 800e746:	2200      	movs	r2, #0
 800e748:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d004      	beq.n	800e75a <tcp_slowtmr+0x4f6>
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	f06f 010c 	mvn.w	r1, #12
 800e756:	68b8      	ldr	r0, [r7, #8]
 800e758:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e75a:	4b2b      	ldr	r3, [pc, #172]	; (800e808 <tcp_slowtmr+0x5a4>)
 800e75c:	781b      	ldrb	r3, [r3, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d037      	beq.n	800e7d2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e762:	e590      	b.n	800e286 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e766:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e76a:	68db      	ldr	r3, [r3, #12]
 800e76c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e770:	7f1b      	ldrb	r3, [r3, #28]
 800e772:	3301      	adds	r3, #1
 800e774:	b2da      	uxtb	r2, r3
 800e776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e778:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e77c:	7f1a      	ldrb	r2, [r3, #28]
 800e77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e780:	7f5b      	ldrb	r3, [r3, #29]
 800e782:	429a      	cmp	r2, r3
 800e784:	d325      	bcc.n	800e7d2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e788:	2200      	movs	r2, #0
 800e78a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e78c:	4b1e      	ldr	r3, [pc, #120]	; (800e808 <tcp_slowtmr+0x5a4>)
 800e78e:	2200      	movs	r2, #0
 800e790:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d00b      	beq.n	800e7b4 <tcp_slowtmr+0x550>
 800e79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e79e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7a4:	6912      	ldr	r2, [r2, #16]
 800e7a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e7a8:	4610      	mov	r0, r2
 800e7aa:	4798      	blx	r3
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e7b2:	e002      	b.n	800e7ba <tcp_slowtmr+0x556>
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e7ba:	4b13      	ldr	r3, [pc, #76]	; (800e808 <tcp_slowtmr+0x5a4>)
 800e7bc:	781b      	ldrb	r3, [r3, #0]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d000      	beq.n	800e7c4 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800e7c2:	e560      	b.n	800e286 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e7c4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d102      	bne.n	800e7d2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e7cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7ce:	f004 f8c3 	bl	8012958 <tcp_output>
  while (pcb != NULL) {
 800e7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	f47f ad5c 	bne.w	800e292 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e7de:	4b0b      	ldr	r3, [pc, #44]	; (800e80c <tcp_slowtmr+0x5a8>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e7e4:	e067      	b.n	800e8b6 <tcp_slowtmr+0x652>
 800e7e6:	bf00      	nop
 800e7e8:	20010f70 	.word	0x20010f70
 800e7ec:	10624dd3 	.word	0x10624dd3
 800e7f0:	000124f8 	.word	0x000124f8
 800e7f4:	20010f7c 	.word	0x20010f7c
 800e7f8:	0801bb0c 	.word	0x0801bb0c
 800e7fc:	0801bf44 	.word	0x0801bf44
 800e800:	0801bb50 	.word	0x0801bb50
 800e804:	0801bf70 	.word	0x0801bf70
 800e808:	20010f84 	.word	0x20010f84
 800e80c:	20010f80 	.word	0x20010f80
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e812:	7d1b      	ldrb	r3, [r3, #20]
 800e814:	2b0a      	cmp	r3, #10
 800e816:	d006      	beq.n	800e826 <tcp_slowtmr+0x5c2>
 800e818:	4b2b      	ldr	r3, [pc, #172]	; (800e8c8 <tcp_slowtmr+0x664>)
 800e81a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e81e:	492b      	ldr	r1, [pc, #172]	; (800e8cc <tcp_slowtmr+0x668>)
 800e820:	482b      	ldr	r0, [pc, #172]	; (800e8d0 <tcp_slowtmr+0x66c>)
 800e822:	f00a fac9 	bl	8018db8 <iprintf>
    pcb_remove = 0;
 800e826:	2300      	movs	r3, #0
 800e828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e82c:	4b29      	ldr	r3, [pc, #164]	; (800e8d4 <tcp_slowtmr+0x670>)
 800e82e:	681a      	ldr	r2, [r3, #0]
 800e830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e832:	6a1b      	ldr	r3, [r3, #32]
 800e834:	1ad3      	subs	r3, r2, r3
 800e836:	2bf0      	cmp	r3, #240	; 0xf0
 800e838:	d904      	bls.n	800e844 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e83a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e83e:	3301      	adds	r3, #1
 800e840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d02f      	beq.n	800e8ac <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e84c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e84e:	f000 fc17 	bl	800f080 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e854:	2b00      	cmp	r3, #0
 800e856:	d010      	beq.n	800e87a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e858:	4b1f      	ldr	r3, [pc, #124]	; (800e8d8 <tcp_slowtmr+0x674>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e85e:	429a      	cmp	r2, r3
 800e860:	d106      	bne.n	800e870 <tcp_slowtmr+0x60c>
 800e862:	4b19      	ldr	r3, [pc, #100]	; (800e8c8 <tcp_slowtmr+0x664>)
 800e864:	f240 52af 	movw	r2, #1455	; 0x5af
 800e868:	491c      	ldr	r1, [pc, #112]	; (800e8dc <tcp_slowtmr+0x678>)
 800e86a:	4819      	ldr	r0, [pc, #100]	; (800e8d0 <tcp_slowtmr+0x66c>)
 800e86c:	f00a faa4 	bl	8018db8 <iprintf>
        prev->next = pcb->next;
 800e870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e872:	68da      	ldr	r2, [r3, #12]
 800e874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e876:	60da      	str	r2, [r3, #12]
 800e878:	e00f      	b.n	800e89a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e87a:	4b17      	ldr	r3, [pc, #92]	; (800e8d8 <tcp_slowtmr+0x674>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e880:	429a      	cmp	r2, r3
 800e882:	d006      	beq.n	800e892 <tcp_slowtmr+0x62e>
 800e884:	4b10      	ldr	r3, [pc, #64]	; (800e8c8 <tcp_slowtmr+0x664>)
 800e886:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e88a:	4915      	ldr	r1, [pc, #84]	; (800e8e0 <tcp_slowtmr+0x67c>)
 800e88c:	4810      	ldr	r0, [pc, #64]	; (800e8d0 <tcp_slowtmr+0x66c>)
 800e88e:	f00a fa93 	bl	8018db8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e894:	68db      	ldr	r3, [r3, #12]
 800e896:	4a10      	ldr	r2, [pc, #64]	; (800e8d8 <tcp_slowtmr+0x674>)
 800e898:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e89c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a0:	68db      	ldr	r3, [r3, #12]
 800e8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e8a4:	69f8      	ldr	r0, [r7, #28]
 800e8a6:	f7fe fe11 	bl	800d4cc <tcp_free>
 800e8aa:	e004      	b.n	800e8b6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ae:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b2:	68db      	ldr	r3, [r3, #12]
 800e8b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d1a9      	bne.n	800e810 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e8bc:	bf00      	nop
 800e8be:	bf00      	nop
 800e8c0:	3730      	adds	r7, #48	; 0x30
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bdb0      	pop	{r4, r5, r7, pc}
 800e8c6:	bf00      	nop
 800e8c8:	0801bb0c 	.word	0x0801bb0c
 800e8cc:	0801bf9c 	.word	0x0801bf9c
 800e8d0:	0801bb50 	.word	0x0801bb50
 800e8d4:	20010f70 	.word	0x20010f70
 800e8d8:	20010f80 	.word	0x20010f80
 800e8dc:	0801bfcc 	.word	0x0801bfcc
 800e8e0:	0801bff4 	.word	0x0801bff4

0800e8e4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b082      	sub	sp, #8
 800e8e8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e8ea:	4b2d      	ldr	r3, [pc, #180]	; (800e9a0 <tcp_fasttmr+0xbc>)
 800e8ec:	781b      	ldrb	r3, [r3, #0]
 800e8ee:	3301      	adds	r3, #1
 800e8f0:	b2da      	uxtb	r2, r3
 800e8f2:	4b2b      	ldr	r3, [pc, #172]	; (800e9a0 <tcp_fasttmr+0xbc>)
 800e8f4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e8f6:	4b2b      	ldr	r3, [pc, #172]	; (800e9a4 <tcp_fasttmr+0xc0>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e8fc:	e048      	b.n	800e990 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	7f9a      	ldrb	r2, [r3, #30]
 800e902:	4b27      	ldr	r3, [pc, #156]	; (800e9a0 <tcp_fasttmr+0xbc>)
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	429a      	cmp	r2, r3
 800e908:	d03f      	beq.n	800e98a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e90a:	4b25      	ldr	r3, [pc, #148]	; (800e9a0 <tcp_fasttmr+0xbc>)
 800e90c:	781a      	ldrb	r2, [r3, #0]
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	8b5b      	ldrh	r3, [r3, #26]
 800e916:	f003 0301 	and.w	r3, r3, #1
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d010      	beq.n	800e940 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	8b5b      	ldrh	r3, [r3, #26]
 800e922:	f043 0302 	orr.w	r3, r3, #2
 800e926:	b29a      	uxth	r2, r3
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e92c:	6878      	ldr	r0, [r7, #4]
 800e92e:	f004 f813 	bl	8012958 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	8b5b      	ldrh	r3, [r3, #26]
 800e936:	f023 0303 	bic.w	r3, r3, #3
 800e93a:	b29a      	uxth	r2, r3
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	8b5b      	ldrh	r3, [r3, #26]
 800e944:	f003 0308 	and.w	r3, r3, #8
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d009      	beq.n	800e960 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	8b5b      	ldrh	r3, [r3, #26]
 800e950:	f023 0308 	bic.w	r3, r3, #8
 800e954:	b29a      	uxth	r2, r3
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e95a:	6878      	ldr	r0, [r7, #4]
 800e95c:	f7fe ff4a 	bl	800d7f4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	68db      	ldr	r3, [r3, #12]
 800e964:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d00a      	beq.n	800e984 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e96e:	4b0e      	ldr	r3, [pc, #56]	; (800e9a8 <tcp_fasttmr+0xc4>)
 800e970:	2200      	movs	r2, #0
 800e972:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f000 f819 	bl	800e9ac <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e97a:	4b0b      	ldr	r3, [pc, #44]	; (800e9a8 <tcp_fasttmr+0xc4>)
 800e97c:	781b      	ldrb	r3, [r3, #0]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d000      	beq.n	800e984 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e982:	e7b8      	b.n	800e8f6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	607b      	str	r3, [r7, #4]
 800e988:	e002      	b.n	800e990 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	68db      	ldr	r3, [r3, #12]
 800e98e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d1b3      	bne.n	800e8fe <tcp_fasttmr+0x1a>
    }
  }
}
 800e996:	bf00      	nop
 800e998:	bf00      	nop
 800e99a:	3708      	adds	r7, #8
 800e99c:	46bd      	mov	sp, r7
 800e99e:	bd80      	pop	{r7, pc}
 800e9a0:	20010f86 	.word	0x20010f86
 800e9a4:	20010f7c 	.word	0x20010f7c
 800e9a8:	20010f84 	.word	0x20010f84

0800e9ac <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e9ac:	b590      	push	{r4, r7, lr}
 800e9ae:	b085      	sub	sp, #20
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d109      	bne.n	800e9ce <tcp_process_refused_data+0x22>
 800e9ba:	4b37      	ldr	r3, [pc, #220]	; (800ea98 <tcp_process_refused_data+0xec>)
 800e9bc:	f240 6209 	movw	r2, #1545	; 0x609
 800e9c0:	4936      	ldr	r1, [pc, #216]	; (800ea9c <tcp_process_refused_data+0xf0>)
 800e9c2:	4837      	ldr	r0, [pc, #220]	; (800eaa0 <tcp_process_refused_data+0xf4>)
 800e9c4:	f00a f9f8 	bl	8018db8 <iprintf>
 800e9c8:	f06f 030f 	mvn.w	r3, #15
 800e9cc:	e060      	b.n	800ea90 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e9d2:	7b5b      	ldrb	r3, [r3, #13]
 800e9d4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e9da:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d00b      	beq.n	800ea04 <tcp_process_refused_data+0x58>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6918      	ldr	r0, [r3, #16]
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	68ba      	ldr	r2, [r7, #8]
 800e9fa:	6879      	ldr	r1, [r7, #4]
 800e9fc:	47a0      	blx	r4
 800e9fe:	4603      	mov	r3, r0
 800ea00:	73fb      	strb	r3, [r7, #15]
 800ea02:	e007      	b.n	800ea14 <tcp_process_refused_data+0x68>
 800ea04:	2300      	movs	r3, #0
 800ea06:	68ba      	ldr	r2, [r7, #8]
 800ea08:	6879      	ldr	r1, [r7, #4]
 800ea0a:	2000      	movs	r0, #0
 800ea0c:	f000 f8c2 	bl	800eb94 <tcp_recv_null>
 800ea10:	4603      	mov	r3, r0
 800ea12:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ea14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d12a      	bne.n	800ea72 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ea1c:	7bbb      	ldrb	r3, [r7, #14]
 800ea1e:	f003 0320 	and.w	r3, r3, #32
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d033      	beq.n	800ea8e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea2a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ea2e:	d005      	beq.n	800ea3c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea34:	3301      	adds	r3, #1
 800ea36:	b29a      	uxth	r2, r3
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d00b      	beq.n	800ea5e <tcp_process_refused_data+0xb2>
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6918      	ldr	r0, [r3, #16]
 800ea50:	2300      	movs	r3, #0
 800ea52:	2200      	movs	r2, #0
 800ea54:	6879      	ldr	r1, [r7, #4]
 800ea56:	47a0      	blx	r4
 800ea58:	4603      	mov	r3, r0
 800ea5a:	73fb      	strb	r3, [r7, #15]
 800ea5c:	e001      	b.n	800ea62 <tcp_process_refused_data+0xb6>
 800ea5e:	2300      	movs	r3, #0
 800ea60:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ea62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea66:	f113 0f0d 	cmn.w	r3, #13
 800ea6a:	d110      	bne.n	800ea8e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ea6c:	f06f 030c 	mvn.w	r3, #12
 800ea70:	e00e      	b.n	800ea90 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ea72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea76:	f113 0f0d 	cmn.w	r3, #13
 800ea7a:	d102      	bne.n	800ea82 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ea7c:	f06f 030c 	mvn.w	r3, #12
 800ea80:	e006      	b.n	800ea90 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	68ba      	ldr	r2, [r7, #8]
 800ea86:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ea88:	f06f 0304 	mvn.w	r3, #4
 800ea8c:	e000      	b.n	800ea90 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ea8e:	2300      	movs	r3, #0
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	3714      	adds	r7, #20
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd90      	pop	{r4, r7, pc}
 800ea98:	0801bb0c 	.word	0x0801bb0c
 800ea9c:	0801c01c 	.word	0x0801c01c
 800eaa0:	0801bb50 	.word	0x0801bb50

0800eaa4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b084      	sub	sp, #16
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800eaac:	e007      	b.n	800eabe <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f000 f80a 	bl	800eace <tcp_seg_free>
    seg = next;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d1f4      	bne.n	800eaae <tcp_segs_free+0xa>
  }
}
 800eac4:	bf00      	nop
 800eac6:	bf00      	nop
 800eac8:	3710      	adds	r7, #16
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}

0800eace <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800eace:	b580      	push	{r7, lr}
 800ead0:	b082      	sub	sp, #8
 800ead2:	af00      	add	r7, sp, #0
 800ead4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d00c      	beq.n	800eaf6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	685b      	ldr	r3, [r3, #4]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d004      	beq.n	800eaee <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	685b      	ldr	r3, [r3, #4]
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7fe fa33 	bl	800cf54 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800eaee:	6879      	ldr	r1, [r7, #4]
 800eaf0:	2003      	movs	r0, #3
 800eaf2:	f7fd fb7f 	bl	800c1f4 <memp_free>
  }
}
 800eaf6:	bf00      	nop
 800eaf8:	3708      	adds	r7, #8
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}
	...

0800eb00 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b082      	sub	sp, #8
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
 800eb08:	460b      	mov	r3, r1
 800eb0a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d107      	bne.n	800eb22 <tcp_setprio+0x22>
 800eb12:	4b07      	ldr	r3, [pc, #28]	; (800eb30 <tcp_setprio+0x30>)
 800eb14:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800eb18:	4906      	ldr	r1, [pc, #24]	; (800eb34 <tcp_setprio+0x34>)
 800eb1a:	4807      	ldr	r0, [pc, #28]	; (800eb38 <tcp_setprio+0x38>)
 800eb1c:	f00a f94c 	bl	8018db8 <iprintf>
 800eb20:	e002      	b.n	800eb28 <tcp_setprio+0x28>

  pcb->prio = prio;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	78fa      	ldrb	r2, [r7, #3]
 800eb26:	755a      	strb	r2, [r3, #21]
}
 800eb28:	3708      	adds	r7, #8
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}
 800eb2e:	bf00      	nop
 800eb30:	0801bb0c 	.word	0x0801bb0c
 800eb34:	0801c044 	.word	0x0801c044
 800eb38:	0801bb50 	.word	0x0801bb50

0800eb3c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b084      	sub	sp, #16
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d106      	bne.n	800eb58 <tcp_seg_copy+0x1c>
 800eb4a:	4b0f      	ldr	r3, [pc, #60]	; (800eb88 <tcp_seg_copy+0x4c>)
 800eb4c:	f240 6282 	movw	r2, #1666	; 0x682
 800eb50:	490e      	ldr	r1, [pc, #56]	; (800eb8c <tcp_seg_copy+0x50>)
 800eb52:	480f      	ldr	r0, [pc, #60]	; (800eb90 <tcp_seg_copy+0x54>)
 800eb54:	f00a f930 	bl	8018db8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800eb58:	2003      	movs	r0, #3
 800eb5a:	f7fd fad5 	bl	800c108 <memp_malloc>
 800eb5e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d101      	bne.n	800eb6a <tcp_seg_copy+0x2e>
    return NULL;
 800eb66:	2300      	movs	r3, #0
 800eb68:	e00a      	b.n	800eb80 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800eb6a:	2210      	movs	r2, #16
 800eb6c:	6879      	ldr	r1, [r7, #4]
 800eb6e:	68f8      	ldr	r0, [r7, #12]
 800eb70:	f00a fb22 	bl	80191b8 <memcpy>
  pbuf_ref(cseg->p);
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	685b      	ldr	r3, [r3, #4]
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f7fe fa91 	bl	800d0a0 <pbuf_ref>
  return cseg;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	3710      	adds	r7, #16
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}
 800eb88:	0801bb0c 	.word	0x0801bb0c
 800eb8c:	0801c060 	.word	0x0801c060
 800eb90:	0801bb50 	.word	0x0801bb50

0800eb94 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b084      	sub	sp, #16
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	60f8      	str	r0, [r7, #12]
 800eb9c:	60b9      	str	r1, [r7, #8]
 800eb9e:	607a      	str	r2, [r7, #4]
 800eba0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d109      	bne.n	800ebbc <tcp_recv_null+0x28>
 800eba8:	4b12      	ldr	r3, [pc, #72]	; (800ebf4 <tcp_recv_null+0x60>)
 800ebaa:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ebae:	4912      	ldr	r1, [pc, #72]	; (800ebf8 <tcp_recv_null+0x64>)
 800ebb0:	4812      	ldr	r0, [pc, #72]	; (800ebfc <tcp_recv_null+0x68>)
 800ebb2:	f00a f901 	bl	8018db8 <iprintf>
 800ebb6:	f06f 030f 	mvn.w	r3, #15
 800ebba:	e016      	b.n	800ebea <tcp_recv_null+0x56>

  if (p != NULL) {
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d009      	beq.n	800ebd6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	891b      	ldrh	r3, [r3, #8]
 800ebc6:	4619      	mov	r1, r3
 800ebc8:	68b8      	ldr	r0, [r7, #8]
 800ebca:	f7ff f99d 	bl	800df08 <tcp_recved>
    pbuf_free(p);
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f7fe f9c0 	bl	800cf54 <pbuf_free>
 800ebd4:	e008      	b.n	800ebe8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ebd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d104      	bne.n	800ebe8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ebde:	68b8      	ldr	r0, [r7, #8]
 800ebe0:	f7fe fe72 	bl	800d8c8 <tcp_close>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	e000      	b.n	800ebea <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ebe8:	2300      	movs	r3, #0
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3710      	adds	r7, #16
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	0801bb0c 	.word	0x0801bb0c
 800ebf8:	0801c07c 	.word	0x0801c07c
 800ebfc:	0801bb50 	.word	0x0801bb50

0800ec00 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b086      	sub	sp, #24
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	4603      	mov	r3, r0
 800ec08:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ec0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	db01      	blt.n	800ec16 <tcp_kill_prio+0x16>
 800ec12:	79fb      	ldrb	r3, [r7, #7]
 800ec14:	e000      	b.n	800ec18 <tcp_kill_prio+0x18>
 800ec16:	237f      	movs	r3, #127	; 0x7f
 800ec18:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ec1a:	7afb      	ldrb	r3, [r7, #11]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d034      	beq.n	800ec8a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ec20:	7afb      	ldrb	r3, [r7, #11]
 800ec22:	3b01      	subs	r3, #1
 800ec24:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ec26:	2300      	movs	r3, #0
 800ec28:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec2e:	4b19      	ldr	r3, [pc, #100]	; (800ec94 <tcp_kill_prio+0x94>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	617b      	str	r3, [r7, #20]
 800ec34:	e01f      	b.n	800ec76 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	7d5b      	ldrb	r3, [r3, #21]
 800ec3a:	7afa      	ldrb	r2, [r7, #11]
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	d80c      	bhi.n	800ec5a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ec44:	7afa      	ldrb	r2, [r7, #11]
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d112      	bne.n	800ec70 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ec4a:	4b13      	ldr	r3, [pc, #76]	; (800ec98 <tcp_kill_prio+0x98>)
 800ec4c:	681a      	ldr	r2, [r3, #0]
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	6a1b      	ldr	r3, [r3, #32]
 800ec52:	1ad3      	subs	r3, r2, r3
 800ec54:	68fa      	ldr	r2, [r7, #12]
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d80a      	bhi.n	800ec70 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ec5a:	4b0f      	ldr	r3, [pc, #60]	; (800ec98 <tcp_kill_prio+0x98>)
 800ec5c:	681a      	ldr	r2, [r3, #0]
 800ec5e:	697b      	ldr	r3, [r7, #20]
 800ec60:	6a1b      	ldr	r3, [r3, #32]
 800ec62:	1ad3      	subs	r3, r2, r3
 800ec64:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ec66:	697b      	ldr	r3, [r7, #20]
 800ec68:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ec6a:	697b      	ldr	r3, [r7, #20]
 800ec6c:	7d5b      	ldrb	r3, [r3, #21]
 800ec6e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	68db      	ldr	r3, [r3, #12]
 800ec74:	617b      	str	r3, [r7, #20]
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d1dc      	bne.n	800ec36 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ec7c:	693b      	ldr	r3, [r7, #16]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d004      	beq.n	800ec8c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ec82:	6938      	ldr	r0, [r7, #16]
 800ec84:	f7fe ff66 	bl	800db54 <tcp_abort>
 800ec88:	e000      	b.n	800ec8c <tcp_kill_prio+0x8c>
    return;
 800ec8a:	bf00      	nop
  }
}
 800ec8c:	3718      	adds	r7, #24
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}
 800ec92:	bf00      	nop
 800ec94:	20010f7c 	.word	0x20010f7c
 800ec98:	20010f70 	.word	0x20010f70

0800ec9c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b086      	sub	sp, #24
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	4603      	mov	r3, r0
 800eca4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800eca6:	79fb      	ldrb	r3, [r7, #7]
 800eca8:	2b08      	cmp	r3, #8
 800ecaa:	d009      	beq.n	800ecc0 <tcp_kill_state+0x24>
 800ecac:	79fb      	ldrb	r3, [r7, #7]
 800ecae:	2b09      	cmp	r3, #9
 800ecb0:	d006      	beq.n	800ecc0 <tcp_kill_state+0x24>
 800ecb2:	4b1a      	ldr	r3, [pc, #104]	; (800ed1c <tcp_kill_state+0x80>)
 800ecb4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ecb8:	4919      	ldr	r1, [pc, #100]	; (800ed20 <tcp_kill_state+0x84>)
 800ecba:	481a      	ldr	r0, [pc, #104]	; (800ed24 <tcp_kill_state+0x88>)
 800ecbc:	f00a f87c 	bl	8018db8 <iprintf>

  inactivity = 0;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ecc8:	4b17      	ldr	r3, [pc, #92]	; (800ed28 <tcp_kill_state+0x8c>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	617b      	str	r3, [r7, #20]
 800ecce:	e017      	b.n	800ed00 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	7d1b      	ldrb	r3, [r3, #20]
 800ecd4:	79fa      	ldrb	r2, [r7, #7]
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	d10f      	bne.n	800ecfa <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ecda:	4b14      	ldr	r3, [pc, #80]	; (800ed2c <tcp_kill_state+0x90>)
 800ecdc:	681a      	ldr	r2, [r3, #0]
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	6a1b      	ldr	r3, [r3, #32]
 800ece2:	1ad3      	subs	r3, r2, r3
 800ece4:	68fa      	ldr	r2, [r7, #12]
 800ece6:	429a      	cmp	r2, r3
 800ece8:	d807      	bhi.n	800ecfa <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ecea:	4b10      	ldr	r3, [pc, #64]	; (800ed2c <tcp_kill_state+0x90>)
 800ecec:	681a      	ldr	r2, [r3, #0]
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	6a1b      	ldr	r3, [r3, #32]
 800ecf2:	1ad3      	subs	r3, r2, r3
 800ecf4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ecfa:	697b      	ldr	r3, [r7, #20]
 800ecfc:	68db      	ldr	r3, [r3, #12]
 800ecfe:	617b      	str	r3, [r7, #20]
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d1e4      	bne.n	800ecd0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d003      	beq.n	800ed14 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ed0c:	2100      	movs	r1, #0
 800ed0e:	6938      	ldr	r0, [r7, #16]
 800ed10:	f7fe fe62 	bl	800d9d8 <tcp_abandon>
  }
}
 800ed14:	bf00      	nop
 800ed16:	3718      	adds	r7, #24
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}
 800ed1c:	0801bb0c 	.word	0x0801bb0c
 800ed20:	0801c098 	.word	0x0801c098
 800ed24:	0801bb50 	.word	0x0801bb50
 800ed28:	20010f7c 	.word	0x20010f7c
 800ed2c:	20010f70 	.word	0x20010f70

0800ed30 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b084      	sub	sp, #16
 800ed34:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ed36:	2300      	movs	r3, #0
 800ed38:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed3e:	4b12      	ldr	r3, [pc, #72]	; (800ed88 <tcp_kill_timewait+0x58>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	60fb      	str	r3, [r7, #12]
 800ed44:	e012      	b.n	800ed6c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ed46:	4b11      	ldr	r3, [pc, #68]	; (800ed8c <tcp_kill_timewait+0x5c>)
 800ed48:	681a      	ldr	r2, [r3, #0]
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	6a1b      	ldr	r3, [r3, #32]
 800ed4e:	1ad3      	subs	r3, r2, r3
 800ed50:	687a      	ldr	r2, [r7, #4]
 800ed52:	429a      	cmp	r2, r3
 800ed54:	d807      	bhi.n	800ed66 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ed56:	4b0d      	ldr	r3, [pc, #52]	; (800ed8c <tcp_kill_timewait+0x5c>)
 800ed58:	681a      	ldr	r2, [r3, #0]
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	6a1b      	ldr	r3, [r3, #32]
 800ed5e:	1ad3      	subs	r3, r2, r3
 800ed60:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	68db      	ldr	r3, [r3, #12]
 800ed6a:	60fb      	str	r3, [r7, #12]
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d1e9      	bne.n	800ed46 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d002      	beq.n	800ed7e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ed78:	68b8      	ldr	r0, [r7, #8]
 800ed7a:	f7fe feeb 	bl	800db54 <tcp_abort>
  }
}
 800ed7e:	bf00      	nop
 800ed80:	3710      	adds	r7, #16
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}
 800ed86:	bf00      	nop
 800ed88:	20010f80 	.word	0x20010f80
 800ed8c:	20010f70 	.word	0x20010f70

0800ed90 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b082      	sub	sp, #8
 800ed94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ed96:	4b10      	ldr	r3, [pc, #64]	; (800edd8 <tcp_handle_closepend+0x48>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ed9c:	e014      	b.n	800edc8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	68db      	ldr	r3, [r3, #12]
 800eda2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	8b5b      	ldrh	r3, [r3, #26]
 800eda8:	f003 0308 	and.w	r3, r3, #8
 800edac:	2b00      	cmp	r3, #0
 800edae:	d009      	beq.n	800edc4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	8b5b      	ldrh	r3, [r3, #26]
 800edb4:	f023 0308 	bic.w	r3, r3, #8
 800edb8:	b29a      	uxth	r2, r3
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f7fe fd18 	bl	800d7f4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d1e7      	bne.n	800ed9e <tcp_handle_closepend+0xe>
  }
}
 800edce:	bf00      	nop
 800edd0:	bf00      	nop
 800edd2:	3708      	adds	r7, #8
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}
 800edd8:	20010f7c 	.word	0x20010f7c

0800eddc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b084      	sub	sp, #16
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	4603      	mov	r3, r0
 800ede4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ede6:	2001      	movs	r0, #1
 800ede8:	f7fd f98e 	bl	800c108 <memp_malloc>
 800edec:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d126      	bne.n	800ee42 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800edf4:	f7ff ffcc 	bl	800ed90 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800edf8:	f7ff ff9a 	bl	800ed30 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800edfc:	2001      	movs	r0, #1
 800edfe:	f7fd f983 	bl	800c108 <memp_malloc>
 800ee02:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d11b      	bne.n	800ee42 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ee0a:	2009      	movs	r0, #9
 800ee0c:	f7ff ff46 	bl	800ec9c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ee10:	2001      	movs	r0, #1
 800ee12:	f7fd f979 	bl	800c108 <memp_malloc>
 800ee16:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d111      	bne.n	800ee42 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ee1e:	2008      	movs	r0, #8
 800ee20:	f7ff ff3c 	bl	800ec9c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ee24:	2001      	movs	r0, #1
 800ee26:	f7fd f96f 	bl	800c108 <memp_malloc>
 800ee2a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d107      	bne.n	800ee42 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ee32:	79fb      	ldrb	r3, [r7, #7]
 800ee34:	4618      	mov	r0, r3
 800ee36:	f7ff fee3 	bl	800ec00 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ee3a:	2001      	movs	r0, #1
 800ee3c:	f7fd f964 	bl	800c108 <memp_malloc>
 800ee40:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d03f      	beq.n	800eec8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ee48:	229c      	movs	r2, #156	; 0x9c
 800ee4a:	2100      	movs	r1, #0
 800ee4c:	68f8      	ldr	r0, [r7, #12]
 800ee4e:	f00a f852 	bl	8018ef6 <memset>
    pcb->prio = prio;
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	79fa      	ldrb	r2, [r7, #7]
 800ee56:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ee5e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ee68:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	22ff      	movs	r2, #255	; 0xff
 800ee76:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ee7e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	2206      	movs	r2, #6
 800ee84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	2206      	movs	r2, #6
 800ee8c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee94:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	2201      	movs	r2, #1
 800ee9a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ee9e:	4b0d      	ldr	r3, [pc, #52]	; (800eed4 <tcp_alloc+0xf8>)
 800eea0:	681a      	ldr	r2, [r3, #0]
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800eea6:	4b0c      	ldr	r3, [pc, #48]	; (800eed8 <tcp_alloc+0xfc>)
 800eea8:	781a      	ldrb	r2, [r3, #0]
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800eeb4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	4a08      	ldr	r2, [pc, #32]	; (800eedc <tcp_alloc+0x100>)
 800eebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	4a07      	ldr	r2, [pc, #28]	; (800eee0 <tcp_alloc+0x104>)
 800eec4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800eec8:	68fb      	ldr	r3, [r7, #12]
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	3710      	adds	r7, #16
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}
 800eed2:	bf00      	nop
 800eed4:	20010f70 	.word	0x20010f70
 800eed8:	20010f86 	.word	0x20010f86
 800eedc:	0800eb95 	.word	0x0800eb95
 800eee0:	006ddd00 	.word	0x006ddd00

0800eee4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b084      	sub	sp, #16
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	4603      	mov	r3, r0
 800eeec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800eeee:	2040      	movs	r0, #64	; 0x40
 800eef0:	f7ff ff74 	bl	800eddc <tcp_alloc>
 800eef4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800eef6:	68fb      	ldr	r3, [r7, #12]
}
 800eef8:	4618      	mov	r0, r3
 800eefa:	3710      	adds	r7, #16
 800eefc:	46bd      	mov	sp, r7
 800eefe:	bd80      	pop	{r7, pc}

0800ef00 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800ef00:	b480      	push	{r7}
 800ef02:	b083      	sub	sp, #12
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
 800ef08:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d002      	beq.n	800ef16 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	683a      	ldr	r2, [r7, #0]
 800ef14:	611a      	str	r2, [r3, #16]
  }
}
 800ef16:	bf00      	nop
 800ef18:	370c      	adds	r7, #12
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef20:	4770      	bx	lr
	...

0800ef24 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b082      	sub	sp, #8
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
 800ef2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d00e      	beq.n	800ef52 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	7d1b      	ldrb	r3, [r3, #20]
 800ef38:	2b01      	cmp	r3, #1
 800ef3a:	d106      	bne.n	800ef4a <tcp_recv+0x26>
 800ef3c:	4b07      	ldr	r3, [pc, #28]	; (800ef5c <tcp_recv+0x38>)
 800ef3e:	f240 72df 	movw	r2, #2015	; 0x7df
 800ef42:	4907      	ldr	r1, [pc, #28]	; (800ef60 <tcp_recv+0x3c>)
 800ef44:	4807      	ldr	r0, [pc, #28]	; (800ef64 <tcp_recv+0x40>)
 800ef46:	f009 ff37 	bl	8018db8 <iprintf>
    pcb->recv = recv;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	683a      	ldr	r2, [r7, #0]
 800ef4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800ef52:	bf00      	nop
 800ef54:	3708      	adds	r7, #8
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd80      	pop	{r7, pc}
 800ef5a:	bf00      	nop
 800ef5c:	0801bb0c 	.word	0x0801bb0c
 800ef60:	0801c0a8 	.word	0x0801c0a8
 800ef64:	0801bb50 	.word	0x0801bb50

0800ef68 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b082      	sub	sp, #8
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
 800ef70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d00e      	beq.n	800ef96 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	7d1b      	ldrb	r3, [r3, #20]
 800ef7c:	2b01      	cmp	r3, #1
 800ef7e:	d106      	bne.n	800ef8e <tcp_sent+0x26>
 800ef80:	4b07      	ldr	r3, [pc, #28]	; (800efa0 <tcp_sent+0x38>)
 800ef82:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800ef86:	4907      	ldr	r1, [pc, #28]	; (800efa4 <tcp_sent+0x3c>)
 800ef88:	4807      	ldr	r0, [pc, #28]	; (800efa8 <tcp_sent+0x40>)
 800ef8a:	f009 ff15 	bl	8018db8 <iprintf>
    pcb->sent = sent;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	683a      	ldr	r2, [r7, #0]
 800ef92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800ef96:	bf00      	nop
 800ef98:	3708      	adds	r7, #8
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	bd80      	pop	{r7, pc}
 800ef9e:	bf00      	nop
 800efa0:	0801bb0c 	.word	0x0801bb0c
 800efa4:	0801c0d0 	.word	0x0801c0d0
 800efa8:	0801bb50 	.word	0x0801bb50

0800efac <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b082      	sub	sp, #8
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
 800efb4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d00e      	beq.n	800efda <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	7d1b      	ldrb	r3, [r3, #20]
 800efc0:	2b01      	cmp	r3, #1
 800efc2:	d106      	bne.n	800efd2 <tcp_err+0x26>
 800efc4:	4b07      	ldr	r3, [pc, #28]	; (800efe4 <tcp_err+0x38>)
 800efc6:	f640 020d 	movw	r2, #2061	; 0x80d
 800efca:	4907      	ldr	r1, [pc, #28]	; (800efe8 <tcp_err+0x3c>)
 800efcc:	4807      	ldr	r0, [pc, #28]	; (800efec <tcp_err+0x40>)
 800efce:	f009 fef3 	bl	8018db8 <iprintf>
    pcb->errf = err;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	683a      	ldr	r2, [r7, #0]
 800efd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800efda:	bf00      	nop
 800efdc:	3708      	adds	r7, #8
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}
 800efe2:	bf00      	nop
 800efe4:	0801bb0c 	.word	0x0801bb0c
 800efe8:	0801c0f8 	.word	0x0801c0f8
 800efec:	0801bb50 	.word	0x0801bb50

0800eff0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800eff0:	b480      	push	{r7}
 800eff2:	b085      	sub	sp, #20
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
 800eff8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d008      	beq.n	800f012 <tcp_accept+0x22>
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	7d1b      	ldrb	r3, [r3, #20]
 800f004:	2b01      	cmp	r3, #1
 800f006:	d104      	bne.n	800f012 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	683a      	ldr	r2, [r7, #0]
 800f010:	619a      	str	r2, [r3, #24]
  }
}
 800f012:	bf00      	nop
 800f014:	3714      	adds	r7, #20
 800f016:	46bd      	mov	sp, r7
 800f018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01c:	4770      	bx	lr
	...

0800f020 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b084      	sub	sp, #16
 800f024:	af00      	add	r7, sp, #0
 800f026:	60f8      	str	r0, [r7, #12]
 800f028:	60b9      	str	r1, [r7, #8]
 800f02a:	4613      	mov	r3, r2
 800f02c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d107      	bne.n	800f044 <tcp_poll+0x24>
 800f034:	4b0e      	ldr	r3, [pc, #56]	; (800f070 <tcp_poll+0x50>)
 800f036:	f640 023d 	movw	r2, #2109	; 0x83d
 800f03a:	490e      	ldr	r1, [pc, #56]	; (800f074 <tcp_poll+0x54>)
 800f03c:	480e      	ldr	r0, [pc, #56]	; (800f078 <tcp_poll+0x58>)
 800f03e:	f009 febb 	bl	8018db8 <iprintf>
 800f042:	e011      	b.n	800f068 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	7d1b      	ldrb	r3, [r3, #20]
 800f048:	2b01      	cmp	r3, #1
 800f04a:	d106      	bne.n	800f05a <tcp_poll+0x3a>
 800f04c:	4b08      	ldr	r3, [pc, #32]	; (800f070 <tcp_poll+0x50>)
 800f04e:	f640 023e 	movw	r2, #2110	; 0x83e
 800f052:	490a      	ldr	r1, [pc, #40]	; (800f07c <tcp_poll+0x5c>)
 800f054:	4808      	ldr	r0, [pc, #32]	; (800f078 <tcp_poll+0x58>)
 800f056:	f009 feaf 	bl	8018db8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	68ba      	ldr	r2, [r7, #8]
 800f05e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	79fa      	ldrb	r2, [r7, #7]
 800f066:	775a      	strb	r2, [r3, #29]
}
 800f068:	3710      	adds	r7, #16
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}
 800f06e:	bf00      	nop
 800f070:	0801bb0c 	.word	0x0801bb0c
 800f074:	0801c120 	.word	0x0801c120
 800f078:	0801bb50 	.word	0x0801bb50
 800f07c:	0801c138 	.word	0x0801c138

0800f080 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b082      	sub	sp, #8
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d107      	bne.n	800f09e <tcp_pcb_purge+0x1e>
 800f08e:	4b21      	ldr	r3, [pc, #132]	; (800f114 <tcp_pcb_purge+0x94>)
 800f090:	f640 0251 	movw	r2, #2129	; 0x851
 800f094:	4920      	ldr	r1, [pc, #128]	; (800f118 <tcp_pcb_purge+0x98>)
 800f096:	4821      	ldr	r0, [pc, #132]	; (800f11c <tcp_pcb_purge+0x9c>)
 800f098:	f009 fe8e 	bl	8018db8 <iprintf>
 800f09c:	e037      	b.n	800f10e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	7d1b      	ldrb	r3, [r3, #20]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d033      	beq.n	800f10e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f0aa:	2b0a      	cmp	r3, #10
 800f0ac:	d02f      	beq.n	800f10e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f0b2:	2b01      	cmp	r3, #1
 800f0b4:	d02b      	beq.n	800f10e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d007      	beq.n	800f0ce <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7fd ff46 	bl	800cf54 <pbuf_free>
      pcb->refused_data = NULL;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d002      	beq.n	800f0dc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f000 f986 	bl	800f3e8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0e2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f7ff fcdb 	bl	800eaa4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f7ff fcd6 	bl	800eaa4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	66da      	str	r2, [r3, #108]	; 0x6c
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2200      	movs	r2, #0
 800f10a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f10e:	3708      	adds	r7, #8
 800f110:	46bd      	mov	sp, r7
 800f112:	bd80      	pop	{r7, pc}
 800f114:	0801bb0c 	.word	0x0801bb0c
 800f118:	0801c158 	.word	0x0801c158
 800f11c:	0801bb50 	.word	0x0801bb50

0800f120 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b084      	sub	sp, #16
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d106      	bne.n	800f13e <tcp_pcb_remove+0x1e>
 800f130:	4b3e      	ldr	r3, [pc, #248]	; (800f22c <tcp_pcb_remove+0x10c>)
 800f132:	f640 0283 	movw	r2, #2179	; 0x883
 800f136:	493e      	ldr	r1, [pc, #248]	; (800f230 <tcp_pcb_remove+0x110>)
 800f138:	483e      	ldr	r0, [pc, #248]	; (800f234 <tcp_pcb_remove+0x114>)
 800f13a:	f009 fe3d 	bl	8018db8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d106      	bne.n	800f152 <tcp_pcb_remove+0x32>
 800f144:	4b39      	ldr	r3, [pc, #228]	; (800f22c <tcp_pcb_remove+0x10c>)
 800f146:	f640 0284 	movw	r2, #2180	; 0x884
 800f14a:	493b      	ldr	r1, [pc, #236]	; (800f238 <tcp_pcb_remove+0x118>)
 800f14c:	4839      	ldr	r0, [pc, #228]	; (800f234 <tcp_pcb_remove+0x114>)
 800f14e:	f009 fe33 	bl	8018db8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	683a      	ldr	r2, [r7, #0]
 800f158:	429a      	cmp	r2, r3
 800f15a:	d105      	bne.n	800f168 <tcp_pcb_remove+0x48>
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	68da      	ldr	r2, [r3, #12]
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	601a      	str	r2, [r3, #0]
 800f166:	e013      	b.n	800f190 <tcp_pcb_remove+0x70>
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	60fb      	str	r3, [r7, #12]
 800f16e:	e00c      	b.n	800f18a <tcp_pcb_remove+0x6a>
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	68db      	ldr	r3, [r3, #12]
 800f174:	683a      	ldr	r2, [r7, #0]
 800f176:	429a      	cmp	r2, r3
 800f178:	d104      	bne.n	800f184 <tcp_pcb_remove+0x64>
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	68da      	ldr	r2, [r3, #12]
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	60da      	str	r2, [r3, #12]
 800f182:	e005      	b.n	800f190 <tcp_pcb_remove+0x70>
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	68db      	ldr	r3, [r3, #12]
 800f188:	60fb      	str	r3, [r7, #12]
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d1ef      	bne.n	800f170 <tcp_pcb_remove+0x50>
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	2200      	movs	r2, #0
 800f194:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f196:	6838      	ldr	r0, [r7, #0]
 800f198:	f7ff ff72 	bl	800f080 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	7d1b      	ldrb	r3, [r3, #20]
 800f1a0:	2b0a      	cmp	r3, #10
 800f1a2:	d013      	beq.n	800f1cc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f1a8:	2b01      	cmp	r3, #1
 800f1aa:	d00f      	beq.n	800f1cc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	8b5b      	ldrh	r3, [r3, #26]
 800f1b0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d009      	beq.n	800f1cc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	8b5b      	ldrh	r3, [r3, #26]
 800f1bc:	f043 0302 	orr.w	r3, r3, #2
 800f1c0:	b29a      	uxth	r2, r3
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f1c6:	6838      	ldr	r0, [r7, #0]
 800f1c8:	f003 fbc6 	bl	8012958 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	7d1b      	ldrb	r3, [r3, #20]
 800f1d0:	2b01      	cmp	r3, #1
 800f1d2:	d020      	beq.n	800f216 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d006      	beq.n	800f1ea <tcp_pcb_remove+0xca>
 800f1dc:	4b13      	ldr	r3, [pc, #76]	; (800f22c <tcp_pcb_remove+0x10c>)
 800f1de:	f640 0293 	movw	r2, #2195	; 0x893
 800f1e2:	4916      	ldr	r1, [pc, #88]	; (800f23c <tcp_pcb_remove+0x11c>)
 800f1e4:	4813      	ldr	r0, [pc, #76]	; (800f234 <tcp_pcb_remove+0x114>)
 800f1e6:	f009 fde7 	bl	8018db8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d006      	beq.n	800f200 <tcp_pcb_remove+0xe0>
 800f1f2:	4b0e      	ldr	r3, [pc, #56]	; (800f22c <tcp_pcb_remove+0x10c>)
 800f1f4:	f640 0294 	movw	r2, #2196	; 0x894
 800f1f8:	4911      	ldr	r1, [pc, #68]	; (800f240 <tcp_pcb_remove+0x120>)
 800f1fa:	480e      	ldr	r0, [pc, #56]	; (800f234 <tcp_pcb_remove+0x114>)
 800f1fc:	f009 fddc 	bl	8018db8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f204:	2b00      	cmp	r3, #0
 800f206:	d006      	beq.n	800f216 <tcp_pcb_remove+0xf6>
 800f208:	4b08      	ldr	r3, [pc, #32]	; (800f22c <tcp_pcb_remove+0x10c>)
 800f20a:	f640 0296 	movw	r2, #2198	; 0x896
 800f20e:	490d      	ldr	r1, [pc, #52]	; (800f244 <tcp_pcb_remove+0x124>)
 800f210:	4808      	ldr	r0, [pc, #32]	; (800f234 <tcp_pcb_remove+0x114>)
 800f212:	f009 fdd1 	bl	8018db8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	2200      	movs	r2, #0
 800f21a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	2200      	movs	r2, #0
 800f220:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f222:	bf00      	nop
 800f224:	3710      	adds	r7, #16
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	bf00      	nop
 800f22c:	0801bb0c 	.word	0x0801bb0c
 800f230:	0801c174 	.word	0x0801c174
 800f234:	0801bb50 	.word	0x0801bb50
 800f238:	0801c190 	.word	0x0801c190
 800f23c:	0801c1b0 	.word	0x0801c1b0
 800f240:	0801c1c8 	.word	0x0801c1c8
 800f244:	0801c1e4 	.word	0x0801c1e4

0800f248 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b082      	sub	sp, #8
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d106      	bne.n	800f264 <tcp_next_iss+0x1c>
 800f256:	4b0a      	ldr	r3, [pc, #40]	; (800f280 <tcp_next_iss+0x38>)
 800f258:	f640 02af 	movw	r2, #2223	; 0x8af
 800f25c:	4909      	ldr	r1, [pc, #36]	; (800f284 <tcp_next_iss+0x3c>)
 800f25e:	480a      	ldr	r0, [pc, #40]	; (800f288 <tcp_next_iss+0x40>)
 800f260:	f009 fdaa 	bl	8018db8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f264:	4b09      	ldr	r3, [pc, #36]	; (800f28c <tcp_next_iss+0x44>)
 800f266:	681a      	ldr	r2, [r3, #0]
 800f268:	4b09      	ldr	r3, [pc, #36]	; (800f290 <tcp_next_iss+0x48>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	4413      	add	r3, r2
 800f26e:	4a07      	ldr	r2, [pc, #28]	; (800f28c <tcp_next_iss+0x44>)
 800f270:	6013      	str	r3, [r2, #0]
  return iss;
 800f272:	4b06      	ldr	r3, [pc, #24]	; (800f28c <tcp_next_iss+0x44>)
 800f274:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f276:	4618      	mov	r0, r3
 800f278:	3708      	adds	r7, #8
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}
 800f27e:	bf00      	nop
 800f280:	0801bb0c 	.word	0x0801bb0c
 800f284:	0801c1fc 	.word	0x0801c1fc
 800f288:	0801bb50 	.word	0x0801bb50
 800f28c:	20000028 	.word	0x20000028
 800f290:	20010f70 	.word	0x20010f70

0800f294 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b086      	sub	sp, #24
 800f298:	af00      	add	r7, sp, #0
 800f29a:	4603      	mov	r3, r0
 800f29c:	60b9      	str	r1, [r7, #8]
 800f29e:	607a      	str	r2, [r7, #4]
 800f2a0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d106      	bne.n	800f2b6 <tcp_eff_send_mss_netif+0x22>
 800f2a8:	4b14      	ldr	r3, [pc, #80]	; (800f2fc <tcp_eff_send_mss_netif+0x68>)
 800f2aa:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f2ae:	4914      	ldr	r1, [pc, #80]	; (800f300 <tcp_eff_send_mss_netif+0x6c>)
 800f2b0:	4814      	ldr	r0, [pc, #80]	; (800f304 <tcp_eff_send_mss_netif+0x70>)
 800f2b2:	f009 fd81 	bl	8018db8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d101      	bne.n	800f2c0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f2bc:	89fb      	ldrh	r3, [r7, #14]
 800f2be:	e019      	b.n	800f2f4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f2c4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f2c6:	8afb      	ldrh	r3, [r7, #22]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d012      	beq.n	800f2f2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f2cc:	2328      	movs	r3, #40	; 0x28
 800f2ce:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f2d0:	8afa      	ldrh	r2, [r7, #22]
 800f2d2:	8abb      	ldrh	r3, [r7, #20]
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	d904      	bls.n	800f2e2 <tcp_eff_send_mss_netif+0x4e>
 800f2d8:	8afa      	ldrh	r2, [r7, #22]
 800f2da:	8abb      	ldrh	r3, [r7, #20]
 800f2dc:	1ad3      	subs	r3, r2, r3
 800f2de:	b29b      	uxth	r3, r3
 800f2e0:	e000      	b.n	800f2e4 <tcp_eff_send_mss_netif+0x50>
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f2e6:	8a7a      	ldrh	r2, [r7, #18]
 800f2e8:	89fb      	ldrh	r3, [r7, #14]
 800f2ea:	4293      	cmp	r3, r2
 800f2ec:	bf28      	it	cs
 800f2ee:	4613      	movcs	r3, r2
 800f2f0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f2f2:	89fb      	ldrh	r3, [r7, #14]
}
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	3718      	adds	r7, #24
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}
 800f2fc:	0801bb0c 	.word	0x0801bb0c
 800f300:	0801c218 	.word	0x0801c218
 800f304:	0801bb50 	.word	0x0801bb50

0800f308 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b084      	sub	sp, #16
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
 800f310:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d119      	bne.n	800f350 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f31c:	4b10      	ldr	r3, [pc, #64]	; (800f360 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f31e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f322:	4910      	ldr	r1, [pc, #64]	; (800f364 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f324:	4810      	ldr	r0, [pc, #64]	; (800f368 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f326:	f009 fd47 	bl	8018db8 <iprintf>

  while (pcb != NULL) {
 800f32a:	e011      	b.n	800f350 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	681a      	ldr	r2, [r3, #0]
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	429a      	cmp	r2, r3
 800f336:	d108      	bne.n	800f34a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	68db      	ldr	r3, [r3, #12]
 800f33c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f33e:	68f8      	ldr	r0, [r7, #12]
 800f340:	f7fe fc08 	bl	800db54 <tcp_abort>
      pcb = next;
 800f344:	68bb      	ldr	r3, [r7, #8]
 800f346:	60fb      	str	r3, [r7, #12]
 800f348:	e002      	b.n	800f350 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	68db      	ldr	r3, [r3, #12]
 800f34e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d1ea      	bne.n	800f32c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f356:	bf00      	nop
 800f358:	bf00      	nop
 800f35a:	3710      	adds	r7, #16
 800f35c:	46bd      	mov	sp, r7
 800f35e:	bd80      	pop	{r7, pc}
 800f360:	0801bb0c 	.word	0x0801bb0c
 800f364:	0801c240 	.word	0x0801c240
 800f368:	0801bb50 	.word	0x0801bb50

0800f36c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b084      	sub	sp, #16
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d02a      	beq.n	800f3d2 <tcp_netif_ip_addr_changed+0x66>
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d026      	beq.n	800f3d2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f384:	4b15      	ldr	r3, [pc, #84]	; (800f3dc <tcp_netif_ip_addr_changed+0x70>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	4619      	mov	r1, r3
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f7ff ffbc 	bl	800f308 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f390:	4b13      	ldr	r3, [pc, #76]	; (800f3e0 <tcp_netif_ip_addr_changed+0x74>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	4619      	mov	r1, r3
 800f396:	6878      	ldr	r0, [r7, #4]
 800f398:	f7ff ffb6 	bl	800f308 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d017      	beq.n	800f3d2 <tcp_netif_ip_addr_changed+0x66>
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d013      	beq.n	800f3d2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f3aa:	4b0e      	ldr	r3, [pc, #56]	; (800f3e4 <tcp_netif_ip_addr_changed+0x78>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	60fb      	str	r3, [r7, #12]
 800f3b0:	e00c      	b.n	800f3cc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	681a      	ldr	r2, [r3, #0]
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d103      	bne.n	800f3c6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	681a      	ldr	r2, [r3, #0]
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	68db      	ldr	r3, [r3, #12]
 800f3ca:	60fb      	str	r3, [r7, #12]
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d1ef      	bne.n	800f3b2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f3d2:	bf00      	nop
 800f3d4:	3710      	adds	r7, #16
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}
 800f3da:	bf00      	nop
 800f3dc:	20010f7c 	.word	0x20010f7c
 800f3e0:	20010f74 	.word	0x20010f74
 800f3e4:	20010f78 	.word	0x20010f78

0800f3e8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b082      	sub	sp, #8
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d007      	beq.n	800f408 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f7ff fb51 	bl	800eaa4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2200      	movs	r2, #0
 800f406:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f408:	bf00      	nop
 800f40a:	3708      	adds	r7, #8
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f410:	b590      	push	{r4, r7, lr}
 800f412:	b08d      	sub	sp, #52	; 0x34
 800f414:	af04      	add	r7, sp, #16
 800f416:	6078      	str	r0, [r7, #4]
 800f418:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d105      	bne.n	800f42c <tcp_input+0x1c>
 800f420:	4b9b      	ldr	r3, [pc, #620]	; (800f690 <tcp_input+0x280>)
 800f422:	2283      	movs	r2, #131	; 0x83
 800f424:	499b      	ldr	r1, [pc, #620]	; (800f694 <tcp_input+0x284>)
 800f426:	489c      	ldr	r0, [pc, #624]	; (800f698 <tcp_input+0x288>)
 800f428:	f009 fcc6 	bl	8018db8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	685b      	ldr	r3, [r3, #4]
 800f430:	4a9a      	ldr	r2, [pc, #616]	; (800f69c <tcp_input+0x28c>)
 800f432:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	895b      	ldrh	r3, [r3, #10]
 800f438:	2b13      	cmp	r3, #19
 800f43a:	f240 83d1 	bls.w	800fbe0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f43e:	4b98      	ldr	r3, [pc, #608]	; (800f6a0 <tcp_input+0x290>)
 800f440:	695b      	ldr	r3, [r3, #20]
 800f442:	4a97      	ldr	r2, [pc, #604]	; (800f6a0 <tcp_input+0x290>)
 800f444:	6812      	ldr	r2, [r2, #0]
 800f446:	4611      	mov	r1, r2
 800f448:	4618      	mov	r0, r3
 800f44a:	f008 fa61 	bl	8017910 <ip4_addr_isbroadcast_u32>
 800f44e:	4603      	mov	r3, r0
 800f450:	2b00      	cmp	r3, #0
 800f452:	f040 83c7 	bne.w	800fbe4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f456:	4b92      	ldr	r3, [pc, #584]	; (800f6a0 <tcp_input+0x290>)
 800f458:	695b      	ldr	r3, [r3, #20]
 800f45a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f45e:	2be0      	cmp	r3, #224	; 0xe0
 800f460:	f000 83c0 	beq.w	800fbe4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f464:	4b8d      	ldr	r3, [pc, #564]	; (800f69c <tcp_input+0x28c>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	899b      	ldrh	r3, [r3, #12]
 800f46a:	b29b      	uxth	r3, r3
 800f46c:	4618      	mov	r0, r3
 800f46e:	f7fc f93d 	bl	800b6ec <lwip_htons>
 800f472:	4603      	mov	r3, r0
 800f474:	0b1b      	lsrs	r3, r3, #12
 800f476:	b29b      	uxth	r3, r3
 800f478:	b2db      	uxtb	r3, r3
 800f47a:	009b      	lsls	r3, r3, #2
 800f47c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f47e:	7cbb      	ldrb	r3, [r7, #18]
 800f480:	2b13      	cmp	r3, #19
 800f482:	f240 83b1 	bls.w	800fbe8 <tcp_input+0x7d8>
 800f486:	7cbb      	ldrb	r3, [r7, #18]
 800f488:	b29a      	uxth	r2, r3
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	891b      	ldrh	r3, [r3, #8]
 800f48e:	429a      	cmp	r2, r3
 800f490:	f200 83aa 	bhi.w	800fbe8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f494:	7cbb      	ldrb	r3, [r7, #18]
 800f496:	b29b      	uxth	r3, r3
 800f498:	3b14      	subs	r3, #20
 800f49a:	b29a      	uxth	r2, r3
 800f49c:	4b81      	ldr	r3, [pc, #516]	; (800f6a4 <tcp_input+0x294>)
 800f49e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f4a0:	4b81      	ldr	r3, [pc, #516]	; (800f6a8 <tcp_input+0x298>)
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	895a      	ldrh	r2, [r3, #10]
 800f4aa:	7cbb      	ldrb	r3, [r7, #18]
 800f4ac:	b29b      	uxth	r3, r3
 800f4ae:	429a      	cmp	r2, r3
 800f4b0:	d309      	bcc.n	800f4c6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f4b2:	4b7c      	ldr	r3, [pc, #496]	; (800f6a4 <tcp_input+0x294>)
 800f4b4:	881a      	ldrh	r2, [r3, #0]
 800f4b6:	4b7d      	ldr	r3, [pc, #500]	; (800f6ac <tcp_input+0x29c>)
 800f4b8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f4ba:	7cbb      	ldrb	r3, [r7, #18]
 800f4bc:	4619      	mov	r1, r3
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	f7fd fcc2 	bl	800ce48 <pbuf_remove_header>
 800f4c4:	e04e      	b.n	800f564 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d105      	bne.n	800f4da <tcp_input+0xca>
 800f4ce:	4b70      	ldr	r3, [pc, #448]	; (800f690 <tcp_input+0x280>)
 800f4d0:	22c2      	movs	r2, #194	; 0xc2
 800f4d2:	4977      	ldr	r1, [pc, #476]	; (800f6b0 <tcp_input+0x2a0>)
 800f4d4:	4870      	ldr	r0, [pc, #448]	; (800f698 <tcp_input+0x288>)
 800f4d6:	f009 fc6f 	bl	8018db8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f4da:	2114      	movs	r1, #20
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f7fd fcb3 	bl	800ce48 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	895a      	ldrh	r2, [r3, #10]
 800f4e6:	4b71      	ldr	r3, [pc, #452]	; (800f6ac <tcp_input+0x29c>)
 800f4e8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f4ea:	4b6e      	ldr	r3, [pc, #440]	; (800f6a4 <tcp_input+0x294>)
 800f4ec:	881a      	ldrh	r2, [r3, #0]
 800f4ee:	4b6f      	ldr	r3, [pc, #444]	; (800f6ac <tcp_input+0x29c>)
 800f4f0:	881b      	ldrh	r3, [r3, #0]
 800f4f2:	1ad3      	subs	r3, r2, r3
 800f4f4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f4f6:	4b6d      	ldr	r3, [pc, #436]	; (800f6ac <tcp_input+0x29c>)
 800f4f8:	881b      	ldrh	r3, [r3, #0]
 800f4fa:	4619      	mov	r1, r3
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f7fd fca3 	bl	800ce48 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	895b      	ldrh	r3, [r3, #10]
 800f508:	8a3a      	ldrh	r2, [r7, #16]
 800f50a:	429a      	cmp	r2, r3
 800f50c:	f200 836e 	bhi.w	800fbec <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	685b      	ldr	r3, [r3, #4]
 800f516:	4a64      	ldr	r2, [pc, #400]	; (800f6a8 <tcp_input+0x298>)
 800f518:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	8a3a      	ldrh	r2, [r7, #16]
 800f520:	4611      	mov	r1, r2
 800f522:	4618      	mov	r0, r3
 800f524:	f7fd fc90 	bl	800ce48 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	891a      	ldrh	r2, [r3, #8]
 800f52c:	8a3b      	ldrh	r3, [r7, #16]
 800f52e:	1ad3      	subs	r3, r2, r3
 800f530:	b29a      	uxth	r2, r3
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	895b      	ldrh	r3, [r3, #10]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d005      	beq.n	800f54a <tcp_input+0x13a>
 800f53e:	4b54      	ldr	r3, [pc, #336]	; (800f690 <tcp_input+0x280>)
 800f540:	22df      	movs	r2, #223	; 0xdf
 800f542:	495c      	ldr	r1, [pc, #368]	; (800f6b4 <tcp_input+0x2a4>)
 800f544:	4854      	ldr	r0, [pc, #336]	; (800f698 <tcp_input+0x288>)
 800f546:	f009 fc37 	bl	8018db8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	891a      	ldrh	r2, [r3, #8]
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	891b      	ldrh	r3, [r3, #8]
 800f554:	429a      	cmp	r2, r3
 800f556:	d005      	beq.n	800f564 <tcp_input+0x154>
 800f558:	4b4d      	ldr	r3, [pc, #308]	; (800f690 <tcp_input+0x280>)
 800f55a:	22e0      	movs	r2, #224	; 0xe0
 800f55c:	4956      	ldr	r1, [pc, #344]	; (800f6b8 <tcp_input+0x2a8>)
 800f55e:	484e      	ldr	r0, [pc, #312]	; (800f698 <tcp_input+0x288>)
 800f560:	f009 fc2a 	bl	8018db8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f564:	4b4d      	ldr	r3, [pc, #308]	; (800f69c <tcp_input+0x28c>)
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	881b      	ldrh	r3, [r3, #0]
 800f56a:	b29b      	uxth	r3, r3
 800f56c:	4a4b      	ldr	r2, [pc, #300]	; (800f69c <tcp_input+0x28c>)
 800f56e:	6814      	ldr	r4, [r2, #0]
 800f570:	4618      	mov	r0, r3
 800f572:	f7fc f8bb 	bl	800b6ec <lwip_htons>
 800f576:	4603      	mov	r3, r0
 800f578:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f57a:	4b48      	ldr	r3, [pc, #288]	; (800f69c <tcp_input+0x28c>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	885b      	ldrh	r3, [r3, #2]
 800f580:	b29b      	uxth	r3, r3
 800f582:	4a46      	ldr	r2, [pc, #280]	; (800f69c <tcp_input+0x28c>)
 800f584:	6814      	ldr	r4, [r2, #0]
 800f586:	4618      	mov	r0, r3
 800f588:	f7fc f8b0 	bl	800b6ec <lwip_htons>
 800f58c:	4603      	mov	r3, r0
 800f58e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f590:	4b42      	ldr	r3, [pc, #264]	; (800f69c <tcp_input+0x28c>)
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	685b      	ldr	r3, [r3, #4]
 800f596:	4a41      	ldr	r2, [pc, #260]	; (800f69c <tcp_input+0x28c>)
 800f598:	6814      	ldr	r4, [r2, #0]
 800f59a:	4618      	mov	r0, r3
 800f59c:	f7fc f8bb 	bl	800b716 <lwip_htonl>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	6063      	str	r3, [r4, #4]
 800f5a4:	6863      	ldr	r3, [r4, #4]
 800f5a6:	4a45      	ldr	r2, [pc, #276]	; (800f6bc <tcp_input+0x2ac>)
 800f5a8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f5aa:	4b3c      	ldr	r3, [pc, #240]	; (800f69c <tcp_input+0x28c>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	689b      	ldr	r3, [r3, #8]
 800f5b0:	4a3a      	ldr	r2, [pc, #232]	; (800f69c <tcp_input+0x28c>)
 800f5b2:	6814      	ldr	r4, [r2, #0]
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f7fc f8ae 	bl	800b716 <lwip_htonl>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	60a3      	str	r3, [r4, #8]
 800f5be:	68a3      	ldr	r3, [r4, #8]
 800f5c0:	4a3f      	ldr	r2, [pc, #252]	; (800f6c0 <tcp_input+0x2b0>)
 800f5c2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f5c4:	4b35      	ldr	r3, [pc, #212]	; (800f69c <tcp_input+0x28c>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	89db      	ldrh	r3, [r3, #14]
 800f5ca:	b29b      	uxth	r3, r3
 800f5cc:	4a33      	ldr	r2, [pc, #204]	; (800f69c <tcp_input+0x28c>)
 800f5ce:	6814      	ldr	r4, [r2, #0]
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f7fc f88b 	bl	800b6ec <lwip_htons>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f5da:	4b30      	ldr	r3, [pc, #192]	; (800f69c <tcp_input+0x28c>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	899b      	ldrh	r3, [r3, #12]
 800f5e0:	b29b      	uxth	r3, r3
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f7fc f882 	bl	800b6ec <lwip_htons>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f5f0:	b2da      	uxtb	r2, r3
 800f5f2:	4b34      	ldr	r3, [pc, #208]	; (800f6c4 <tcp_input+0x2b4>)
 800f5f4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	891a      	ldrh	r2, [r3, #8]
 800f5fa:	4b33      	ldr	r3, [pc, #204]	; (800f6c8 <tcp_input+0x2b8>)
 800f5fc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f5fe:	4b31      	ldr	r3, [pc, #196]	; (800f6c4 <tcp_input+0x2b4>)
 800f600:	781b      	ldrb	r3, [r3, #0]
 800f602:	f003 0303 	and.w	r3, r3, #3
 800f606:	2b00      	cmp	r3, #0
 800f608:	d00c      	beq.n	800f624 <tcp_input+0x214>
    tcplen++;
 800f60a:	4b2f      	ldr	r3, [pc, #188]	; (800f6c8 <tcp_input+0x2b8>)
 800f60c:	881b      	ldrh	r3, [r3, #0]
 800f60e:	3301      	adds	r3, #1
 800f610:	b29a      	uxth	r2, r3
 800f612:	4b2d      	ldr	r3, [pc, #180]	; (800f6c8 <tcp_input+0x2b8>)
 800f614:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	891a      	ldrh	r2, [r3, #8]
 800f61a:	4b2b      	ldr	r3, [pc, #172]	; (800f6c8 <tcp_input+0x2b8>)
 800f61c:	881b      	ldrh	r3, [r3, #0]
 800f61e:	429a      	cmp	r2, r3
 800f620:	f200 82e6 	bhi.w	800fbf0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f624:	2300      	movs	r3, #0
 800f626:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f628:	4b28      	ldr	r3, [pc, #160]	; (800f6cc <tcp_input+0x2bc>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	61fb      	str	r3, [r7, #28]
 800f62e:	e09d      	b.n	800f76c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f630:	69fb      	ldr	r3, [r7, #28]
 800f632:	7d1b      	ldrb	r3, [r3, #20]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d105      	bne.n	800f644 <tcp_input+0x234>
 800f638:	4b15      	ldr	r3, [pc, #84]	; (800f690 <tcp_input+0x280>)
 800f63a:	22fb      	movs	r2, #251	; 0xfb
 800f63c:	4924      	ldr	r1, [pc, #144]	; (800f6d0 <tcp_input+0x2c0>)
 800f63e:	4816      	ldr	r0, [pc, #88]	; (800f698 <tcp_input+0x288>)
 800f640:	f009 fbba 	bl	8018db8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f644:	69fb      	ldr	r3, [r7, #28]
 800f646:	7d1b      	ldrb	r3, [r3, #20]
 800f648:	2b0a      	cmp	r3, #10
 800f64a:	d105      	bne.n	800f658 <tcp_input+0x248>
 800f64c:	4b10      	ldr	r3, [pc, #64]	; (800f690 <tcp_input+0x280>)
 800f64e:	22fc      	movs	r2, #252	; 0xfc
 800f650:	4920      	ldr	r1, [pc, #128]	; (800f6d4 <tcp_input+0x2c4>)
 800f652:	4811      	ldr	r0, [pc, #68]	; (800f698 <tcp_input+0x288>)
 800f654:	f009 fbb0 	bl	8018db8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f658:	69fb      	ldr	r3, [r7, #28]
 800f65a:	7d1b      	ldrb	r3, [r3, #20]
 800f65c:	2b01      	cmp	r3, #1
 800f65e:	d105      	bne.n	800f66c <tcp_input+0x25c>
 800f660:	4b0b      	ldr	r3, [pc, #44]	; (800f690 <tcp_input+0x280>)
 800f662:	22fd      	movs	r2, #253	; 0xfd
 800f664:	491c      	ldr	r1, [pc, #112]	; (800f6d8 <tcp_input+0x2c8>)
 800f666:	480c      	ldr	r0, [pc, #48]	; (800f698 <tcp_input+0x288>)
 800f668:	f009 fba6 	bl	8018db8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f66c:	69fb      	ldr	r3, [r7, #28]
 800f66e:	7a1b      	ldrb	r3, [r3, #8]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d033      	beq.n	800f6dc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f674:	69fb      	ldr	r3, [r7, #28]
 800f676:	7a1a      	ldrb	r2, [r3, #8]
 800f678:	4b09      	ldr	r3, [pc, #36]	; (800f6a0 <tcp_input+0x290>)
 800f67a:	685b      	ldr	r3, [r3, #4]
 800f67c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f680:	3301      	adds	r3, #1
 800f682:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f684:	429a      	cmp	r2, r3
 800f686:	d029      	beq.n	800f6dc <tcp_input+0x2cc>
      prev = pcb;
 800f688:	69fb      	ldr	r3, [r7, #28]
 800f68a:	61bb      	str	r3, [r7, #24]
      continue;
 800f68c:	e06b      	b.n	800f766 <tcp_input+0x356>
 800f68e:	bf00      	nop
 800f690:	0801c274 	.word	0x0801c274
 800f694:	0801c2a8 	.word	0x0801c2a8
 800f698:	0801c2c0 	.word	0x0801c2c0
 800f69c:	20010f98 	.word	0x20010f98
 800f6a0:	2000d7fc 	.word	0x2000d7fc
 800f6a4:	20010f9c 	.word	0x20010f9c
 800f6a8:	20010fa0 	.word	0x20010fa0
 800f6ac:	20010f9e 	.word	0x20010f9e
 800f6b0:	0801c2e8 	.word	0x0801c2e8
 800f6b4:	0801c2f8 	.word	0x0801c2f8
 800f6b8:	0801c304 	.word	0x0801c304
 800f6bc:	20010fa8 	.word	0x20010fa8
 800f6c0:	20010fac 	.word	0x20010fac
 800f6c4:	20010fb4 	.word	0x20010fb4
 800f6c8:	20010fb2 	.word	0x20010fb2
 800f6cc:	20010f7c 	.word	0x20010f7c
 800f6d0:	0801c324 	.word	0x0801c324
 800f6d4:	0801c34c 	.word	0x0801c34c
 800f6d8:	0801c378 	.word	0x0801c378
    }

    if (pcb->remote_port == tcphdr->src &&
 800f6dc:	69fb      	ldr	r3, [r7, #28]
 800f6de:	8b1a      	ldrh	r2, [r3, #24]
 800f6e0:	4b72      	ldr	r3, [pc, #456]	; (800f8ac <tcp_input+0x49c>)
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	881b      	ldrh	r3, [r3, #0]
 800f6e6:	b29b      	uxth	r3, r3
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	d13a      	bne.n	800f762 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f6ec:	69fb      	ldr	r3, [r7, #28]
 800f6ee:	8ada      	ldrh	r2, [r3, #22]
 800f6f0:	4b6e      	ldr	r3, [pc, #440]	; (800f8ac <tcp_input+0x49c>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	885b      	ldrh	r3, [r3, #2]
 800f6f6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	d132      	bne.n	800f762 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f6fc:	69fb      	ldr	r3, [r7, #28]
 800f6fe:	685a      	ldr	r2, [r3, #4]
 800f700:	4b6b      	ldr	r3, [pc, #428]	; (800f8b0 <tcp_input+0x4a0>)
 800f702:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f704:	429a      	cmp	r2, r3
 800f706:	d12c      	bne.n	800f762 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f708:	69fb      	ldr	r3, [r7, #28]
 800f70a:	681a      	ldr	r2, [r3, #0]
 800f70c:	4b68      	ldr	r3, [pc, #416]	; (800f8b0 <tcp_input+0x4a0>)
 800f70e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f710:	429a      	cmp	r2, r3
 800f712:	d126      	bne.n	800f762 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f714:	69fb      	ldr	r3, [r7, #28]
 800f716:	68db      	ldr	r3, [r3, #12]
 800f718:	69fa      	ldr	r2, [r7, #28]
 800f71a:	429a      	cmp	r2, r3
 800f71c:	d106      	bne.n	800f72c <tcp_input+0x31c>
 800f71e:	4b65      	ldr	r3, [pc, #404]	; (800f8b4 <tcp_input+0x4a4>)
 800f720:	f240 120d 	movw	r2, #269	; 0x10d
 800f724:	4964      	ldr	r1, [pc, #400]	; (800f8b8 <tcp_input+0x4a8>)
 800f726:	4865      	ldr	r0, [pc, #404]	; (800f8bc <tcp_input+0x4ac>)
 800f728:	f009 fb46 	bl	8018db8 <iprintf>
      if (prev != NULL) {
 800f72c:	69bb      	ldr	r3, [r7, #24]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d00a      	beq.n	800f748 <tcp_input+0x338>
        prev->next = pcb->next;
 800f732:	69fb      	ldr	r3, [r7, #28]
 800f734:	68da      	ldr	r2, [r3, #12]
 800f736:	69bb      	ldr	r3, [r7, #24]
 800f738:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f73a:	4b61      	ldr	r3, [pc, #388]	; (800f8c0 <tcp_input+0x4b0>)
 800f73c:	681a      	ldr	r2, [r3, #0]
 800f73e:	69fb      	ldr	r3, [r7, #28]
 800f740:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f742:	4a5f      	ldr	r2, [pc, #380]	; (800f8c0 <tcp_input+0x4b0>)
 800f744:	69fb      	ldr	r3, [r7, #28]
 800f746:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f748:	69fb      	ldr	r3, [r7, #28]
 800f74a:	68db      	ldr	r3, [r3, #12]
 800f74c:	69fa      	ldr	r2, [r7, #28]
 800f74e:	429a      	cmp	r2, r3
 800f750:	d111      	bne.n	800f776 <tcp_input+0x366>
 800f752:	4b58      	ldr	r3, [pc, #352]	; (800f8b4 <tcp_input+0x4a4>)
 800f754:	f240 1215 	movw	r2, #277	; 0x115
 800f758:	495a      	ldr	r1, [pc, #360]	; (800f8c4 <tcp_input+0x4b4>)
 800f75a:	4858      	ldr	r0, [pc, #352]	; (800f8bc <tcp_input+0x4ac>)
 800f75c:	f009 fb2c 	bl	8018db8 <iprintf>
      break;
 800f760:	e009      	b.n	800f776 <tcp_input+0x366>
    }
    prev = pcb;
 800f762:	69fb      	ldr	r3, [r7, #28]
 800f764:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f766:	69fb      	ldr	r3, [r7, #28]
 800f768:	68db      	ldr	r3, [r3, #12]
 800f76a:	61fb      	str	r3, [r7, #28]
 800f76c:	69fb      	ldr	r3, [r7, #28]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	f47f af5e 	bne.w	800f630 <tcp_input+0x220>
 800f774:	e000      	b.n	800f778 <tcp_input+0x368>
      break;
 800f776:	bf00      	nop
  }

  if (pcb == NULL) {
 800f778:	69fb      	ldr	r3, [r7, #28]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	f040 80aa 	bne.w	800f8d4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f780:	4b51      	ldr	r3, [pc, #324]	; (800f8c8 <tcp_input+0x4b8>)
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	61fb      	str	r3, [r7, #28]
 800f786:	e03f      	b.n	800f808 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f788:	69fb      	ldr	r3, [r7, #28]
 800f78a:	7d1b      	ldrb	r3, [r3, #20]
 800f78c:	2b0a      	cmp	r3, #10
 800f78e:	d006      	beq.n	800f79e <tcp_input+0x38e>
 800f790:	4b48      	ldr	r3, [pc, #288]	; (800f8b4 <tcp_input+0x4a4>)
 800f792:	f240 121f 	movw	r2, #287	; 0x11f
 800f796:	494d      	ldr	r1, [pc, #308]	; (800f8cc <tcp_input+0x4bc>)
 800f798:	4848      	ldr	r0, [pc, #288]	; (800f8bc <tcp_input+0x4ac>)
 800f79a:	f009 fb0d 	bl	8018db8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f79e:	69fb      	ldr	r3, [r7, #28]
 800f7a0:	7a1b      	ldrb	r3, [r3, #8]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d009      	beq.n	800f7ba <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f7a6:	69fb      	ldr	r3, [r7, #28]
 800f7a8:	7a1a      	ldrb	r2, [r3, #8]
 800f7aa:	4b41      	ldr	r3, [pc, #260]	; (800f8b0 <tcp_input+0x4a0>)
 800f7ac:	685b      	ldr	r3, [r3, #4]
 800f7ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f7b6:	429a      	cmp	r2, r3
 800f7b8:	d122      	bne.n	800f800 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f7ba:	69fb      	ldr	r3, [r7, #28]
 800f7bc:	8b1a      	ldrh	r2, [r3, #24]
 800f7be:	4b3b      	ldr	r3, [pc, #236]	; (800f8ac <tcp_input+0x49c>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	881b      	ldrh	r3, [r3, #0]
 800f7c4:	b29b      	uxth	r3, r3
 800f7c6:	429a      	cmp	r2, r3
 800f7c8:	d11b      	bne.n	800f802 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f7ca:	69fb      	ldr	r3, [r7, #28]
 800f7cc:	8ada      	ldrh	r2, [r3, #22]
 800f7ce:	4b37      	ldr	r3, [pc, #220]	; (800f8ac <tcp_input+0x49c>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	885b      	ldrh	r3, [r3, #2]
 800f7d4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f7d6:	429a      	cmp	r2, r3
 800f7d8:	d113      	bne.n	800f802 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f7da:	69fb      	ldr	r3, [r7, #28]
 800f7dc:	685a      	ldr	r2, [r3, #4]
 800f7de:	4b34      	ldr	r3, [pc, #208]	; (800f8b0 <tcp_input+0x4a0>)
 800f7e0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f7e2:	429a      	cmp	r2, r3
 800f7e4:	d10d      	bne.n	800f802 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f7e6:	69fb      	ldr	r3, [r7, #28]
 800f7e8:	681a      	ldr	r2, [r3, #0]
 800f7ea:	4b31      	ldr	r3, [pc, #196]	; (800f8b0 <tcp_input+0x4a0>)
 800f7ec:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	d107      	bne.n	800f802 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f7f2:	69f8      	ldr	r0, [r7, #28]
 800f7f4:	f000 fb56 	bl	800fea4 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f7fd fbab 	bl	800cf54 <pbuf_free>
        return;
 800f7fe:	e1fd      	b.n	800fbfc <tcp_input+0x7ec>
        continue;
 800f800:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f802:	69fb      	ldr	r3, [r7, #28]
 800f804:	68db      	ldr	r3, [r3, #12]
 800f806:	61fb      	str	r3, [r7, #28]
 800f808:	69fb      	ldr	r3, [r7, #28]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d1bc      	bne.n	800f788 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f80e:	2300      	movs	r3, #0
 800f810:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f812:	4b2f      	ldr	r3, [pc, #188]	; (800f8d0 <tcp_input+0x4c0>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	617b      	str	r3, [r7, #20]
 800f818:	e02a      	b.n	800f870 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	7a1b      	ldrb	r3, [r3, #8]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d00c      	beq.n	800f83c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	7a1a      	ldrb	r2, [r3, #8]
 800f826:	4b22      	ldr	r3, [pc, #136]	; (800f8b0 <tcp_input+0x4a0>)
 800f828:	685b      	ldr	r3, [r3, #4]
 800f82a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f82e:	3301      	adds	r3, #1
 800f830:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f832:	429a      	cmp	r2, r3
 800f834:	d002      	beq.n	800f83c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	61bb      	str	r3, [r7, #24]
        continue;
 800f83a:	e016      	b.n	800f86a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f83c:	697b      	ldr	r3, [r7, #20]
 800f83e:	8ada      	ldrh	r2, [r3, #22]
 800f840:	4b1a      	ldr	r3, [pc, #104]	; (800f8ac <tcp_input+0x49c>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	885b      	ldrh	r3, [r3, #2]
 800f846:	b29b      	uxth	r3, r3
 800f848:	429a      	cmp	r2, r3
 800f84a:	d10c      	bne.n	800f866 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f84c:	697b      	ldr	r3, [r7, #20]
 800f84e:	681a      	ldr	r2, [r3, #0]
 800f850:	4b17      	ldr	r3, [pc, #92]	; (800f8b0 <tcp_input+0x4a0>)
 800f852:	695b      	ldr	r3, [r3, #20]
 800f854:	429a      	cmp	r2, r3
 800f856:	d00f      	beq.n	800f878 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f858:	697b      	ldr	r3, [r7, #20]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d00d      	beq.n	800f87a <tcp_input+0x46a>
 800f85e:	697b      	ldr	r3, [r7, #20]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d009      	beq.n	800f87a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f866:	697b      	ldr	r3, [r7, #20]
 800f868:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f86a:	697b      	ldr	r3, [r7, #20]
 800f86c:	68db      	ldr	r3, [r3, #12]
 800f86e:	617b      	str	r3, [r7, #20]
 800f870:	697b      	ldr	r3, [r7, #20]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d1d1      	bne.n	800f81a <tcp_input+0x40a>
 800f876:	e000      	b.n	800f87a <tcp_input+0x46a>
            break;
 800f878:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d029      	beq.n	800f8d4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f880:	69bb      	ldr	r3, [r7, #24]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d00a      	beq.n	800f89c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	68da      	ldr	r2, [r3, #12]
 800f88a:	69bb      	ldr	r3, [r7, #24]
 800f88c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f88e:	4b10      	ldr	r3, [pc, #64]	; (800f8d0 <tcp_input+0x4c0>)
 800f890:	681a      	ldr	r2, [r3, #0]
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f896:	4a0e      	ldr	r2, [pc, #56]	; (800f8d0 <tcp_input+0x4c0>)
 800f898:	697b      	ldr	r3, [r7, #20]
 800f89a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f89c:	6978      	ldr	r0, [r7, #20]
 800f89e:	f000 fa03 	bl	800fca8 <tcp_listen_input>
      }
      pbuf_free(p);
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f7fd fb56 	bl	800cf54 <pbuf_free>
      return;
 800f8a8:	e1a8      	b.n	800fbfc <tcp_input+0x7ec>
 800f8aa:	bf00      	nop
 800f8ac:	20010f98 	.word	0x20010f98
 800f8b0:	2000d7fc 	.word	0x2000d7fc
 800f8b4:	0801c274 	.word	0x0801c274
 800f8b8:	0801c3a0 	.word	0x0801c3a0
 800f8bc:	0801c2c0 	.word	0x0801c2c0
 800f8c0:	20010f7c 	.word	0x20010f7c
 800f8c4:	0801c3cc 	.word	0x0801c3cc
 800f8c8:	20010f80 	.word	0x20010f80
 800f8cc:	0801c3f8 	.word	0x0801c3f8
 800f8d0:	20010f78 	.word	0x20010f78
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f8d4:	69fb      	ldr	r3, [r7, #28]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	f000 8158 	beq.w	800fb8c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f8dc:	4b95      	ldr	r3, [pc, #596]	; (800fb34 <tcp_input+0x724>)
 800f8de:	2200      	movs	r2, #0
 800f8e0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	891a      	ldrh	r2, [r3, #8]
 800f8e6:	4b93      	ldr	r3, [pc, #588]	; (800fb34 <tcp_input+0x724>)
 800f8e8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f8ea:	4a92      	ldr	r2, [pc, #584]	; (800fb34 <tcp_input+0x724>)
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f8f0:	4b91      	ldr	r3, [pc, #580]	; (800fb38 <tcp_input+0x728>)
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	4a8f      	ldr	r2, [pc, #572]	; (800fb34 <tcp_input+0x724>)
 800f8f6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f8f8:	4b90      	ldr	r3, [pc, #576]	; (800fb3c <tcp_input+0x72c>)
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f8fe:	4b90      	ldr	r3, [pc, #576]	; (800fb40 <tcp_input+0x730>)
 800f900:	2200      	movs	r2, #0
 800f902:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f904:	4b8f      	ldr	r3, [pc, #572]	; (800fb44 <tcp_input+0x734>)
 800f906:	2200      	movs	r2, #0
 800f908:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f90a:	4b8f      	ldr	r3, [pc, #572]	; (800fb48 <tcp_input+0x738>)
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	f003 0308 	and.w	r3, r3, #8
 800f912:	2b00      	cmp	r3, #0
 800f914:	d006      	beq.n	800f924 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	7b5b      	ldrb	r3, [r3, #13]
 800f91a:	f043 0301 	orr.w	r3, r3, #1
 800f91e:	b2da      	uxtb	r2, r3
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f924:	69fb      	ldr	r3, [r7, #28]
 800f926:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d017      	beq.n	800f95c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f92c:	69f8      	ldr	r0, [r7, #28]
 800f92e:	f7ff f83d 	bl	800e9ac <tcp_process_refused_data>
 800f932:	4603      	mov	r3, r0
 800f934:	f113 0f0d 	cmn.w	r3, #13
 800f938:	d007      	beq.n	800f94a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f93a:	69fb      	ldr	r3, [r7, #28]
 800f93c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d00c      	beq.n	800f95c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f942:	4b82      	ldr	r3, [pc, #520]	; (800fb4c <tcp_input+0x73c>)
 800f944:	881b      	ldrh	r3, [r3, #0]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d008      	beq.n	800f95c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f94a:	69fb      	ldr	r3, [r7, #28]
 800f94c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f94e:	2b00      	cmp	r3, #0
 800f950:	f040 80e3 	bne.w	800fb1a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f954:	69f8      	ldr	r0, [r7, #28]
 800f956:	f003 fe05 	bl	8013564 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f95a:	e0de      	b.n	800fb1a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f95c:	4a7c      	ldr	r2, [pc, #496]	; (800fb50 <tcp_input+0x740>)
 800f95e:	69fb      	ldr	r3, [r7, #28]
 800f960:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f962:	69f8      	ldr	r0, [r7, #28]
 800f964:	f000 fb18 	bl	800ff98 <tcp_process>
 800f968:	4603      	mov	r3, r0
 800f96a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f96c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f970:	f113 0f0d 	cmn.w	r3, #13
 800f974:	f000 80d3 	beq.w	800fb1e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f978:	4b71      	ldr	r3, [pc, #452]	; (800fb40 <tcp_input+0x730>)
 800f97a:	781b      	ldrb	r3, [r3, #0]
 800f97c:	f003 0308 	and.w	r3, r3, #8
 800f980:	2b00      	cmp	r3, #0
 800f982:	d015      	beq.n	800f9b0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f984:	69fb      	ldr	r3, [r7, #28]
 800f986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d008      	beq.n	800f9a0 <tcp_input+0x590>
 800f98e:	69fb      	ldr	r3, [r7, #28]
 800f990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f994:	69fa      	ldr	r2, [r7, #28]
 800f996:	6912      	ldr	r2, [r2, #16]
 800f998:	f06f 010d 	mvn.w	r1, #13
 800f99c:	4610      	mov	r0, r2
 800f99e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f9a0:	69f9      	ldr	r1, [r7, #28]
 800f9a2:	486c      	ldr	r0, [pc, #432]	; (800fb54 <tcp_input+0x744>)
 800f9a4:	f7ff fbbc 	bl	800f120 <tcp_pcb_remove>
        tcp_free(pcb);
 800f9a8:	69f8      	ldr	r0, [r7, #28]
 800f9aa:	f7fd fd8f 	bl	800d4cc <tcp_free>
 800f9ae:	e0da      	b.n	800fb66 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f9b4:	4b63      	ldr	r3, [pc, #396]	; (800fb44 <tcp_input+0x734>)
 800f9b6:	881b      	ldrh	r3, [r3, #0]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d01d      	beq.n	800f9f8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f9bc:	4b61      	ldr	r3, [pc, #388]	; (800fb44 <tcp_input+0x734>)
 800f9be:	881b      	ldrh	r3, [r3, #0]
 800f9c0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f9c2:	69fb      	ldr	r3, [r7, #28]
 800f9c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d00a      	beq.n	800f9e2 <tcp_input+0x5d2>
 800f9cc:	69fb      	ldr	r3, [r7, #28]
 800f9ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f9d2:	69fa      	ldr	r2, [r7, #28]
 800f9d4:	6910      	ldr	r0, [r2, #16]
 800f9d6:	89fa      	ldrh	r2, [r7, #14]
 800f9d8:	69f9      	ldr	r1, [r7, #28]
 800f9da:	4798      	blx	r3
 800f9dc:	4603      	mov	r3, r0
 800f9de:	74fb      	strb	r3, [r7, #19]
 800f9e0:	e001      	b.n	800f9e6 <tcp_input+0x5d6>
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f9e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f9ea:	f113 0f0d 	cmn.w	r3, #13
 800f9ee:	f000 8098 	beq.w	800fb22 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f9f2:	4b54      	ldr	r3, [pc, #336]	; (800fb44 <tcp_input+0x734>)
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f9f8:	69f8      	ldr	r0, [r7, #28]
 800f9fa:	f000 f915 	bl	800fc28 <tcp_input_delayed_close>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	f040 8090 	bne.w	800fb26 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fa06:	4b4d      	ldr	r3, [pc, #308]	; (800fb3c <tcp_input+0x72c>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d041      	beq.n	800fa92 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fa0e:	69fb      	ldr	r3, [r7, #28]
 800fa10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d006      	beq.n	800fa24 <tcp_input+0x614>
 800fa16:	4b50      	ldr	r3, [pc, #320]	; (800fb58 <tcp_input+0x748>)
 800fa18:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fa1c:	494f      	ldr	r1, [pc, #316]	; (800fb5c <tcp_input+0x74c>)
 800fa1e:	4850      	ldr	r0, [pc, #320]	; (800fb60 <tcp_input+0x750>)
 800fa20:	f009 f9ca 	bl	8018db8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fa24:	69fb      	ldr	r3, [r7, #28]
 800fa26:	8b5b      	ldrh	r3, [r3, #26]
 800fa28:	f003 0310 	and.w	r3, r3, #16
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d008      	beq.n	800fa42 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fa30:	4b42      	ldr	r3, [pc, #264]	; (800fb3c <tcp_input+0x72c>)
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	4618      	mov	r0, r3
 800fa36:	f7fd fa8d 	bl	800cf54 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fa3a:	69f8      	ldr	r0, [r7, #28]
 800fa3c:	f7fe f88a 	bl	800db54 <tcp_abort>
            goto aborted;
 800fa40:	e091      	b.n	800fb66 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fa42:	69fb      	ldr	r3, [r7, #28]
 800fa44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d00c      	beq.n	800fa66 <tcp_input+0x656>
 800fa4c:	69fb      	ldr	r3, [r7, #28]
 800fa4e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fa52:	69fb      	ldr	r3, [r7, #28]
 800fa54:	6918      	ldr	r0, [r3, #16]
 800fa56:	4b39      	ldr	r3, [pc, #228]	; (800fb3c <tcp_input+0x72c>)
 800fa58:	681a      	ldr	r2, [r3, #0]
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	69f9      	ldr	r1, [r7, #28]
 800fa5e:	47a0      	blx	r4
 800fa60:	4603      	mov	r3, r0
 800fa62:	74fb      	strb	r3, [r7, #19]
 800fa64:	e008      	b.n	800fa78 <tcp_input+0x668>
 800fa66:	4b35      	ldr	r3, [pc, #212]	; (800fb3c <tcp_input+0x72c>)
 800fa68:	681a      	ldr	r2, [r3, #0]
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	69f9      	ldr	r1, [r7, #28]
 800fa6e:	2000      	movs	r0, #0
 800fa70:	f7ff f890 	bl	800eb94 <tcp_recv_null>
 800fa74:	4603      	mov	r3, r0
 800fa76:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fa78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa7c:	f113 0f0d 	cmn.w	r3, #13
 800fa80:	d053      	beq.n	800fb2a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fa82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d003      	beq.n	800fa92 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fa8a:	4b2c      	ldr	r3, [pc, #176]	; (800fb3c <tcp_input+0x72c>)
 800fa8c:	681a      	ldr	r2, [r3, #0]
 800fa8e:	69fb      	ldr	r3, [r7, #28]
 800fa90:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fa92:	4b2b      	ldr	r3, [pc, #172]	; (800fb40 <tcp_input+0x730>)
 800fa94:	781b      	ldrb	r3, [r3, #0]
 800fa96:	f003 0320 	and.w	r3, r3, #32
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d030      	beq.n	800fb00 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800fa9e:	69fb      	ldr	r3, [r7, #28]
 800faa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d009      	beq.n	800faba <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800faa6:	69fb      	ldr	r3, [r7, #28]
 800faa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800faaa:	7b5a      	ldrb	r2, [r3, #13]
 800faac:	69fb      	ldr	r3, [r7, #28]
 800faae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fab0:	f042 0220 	orr.w	r2, r2, #32
 800fab4:	b2d2      	uxtb	r2, r2
 800fab6:	735a      	strb	r2, [r3, #13]
 800fab8:	e022      	b.n	800fb00 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800faba:	69fb      	ldr	r3, [r7, #28]
 800fabc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fabe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fac2:	d005      	beq.n	800fad0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800fac4:	69fb      	ldr	r3, [r7, #28]
 800fac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fac8:	3301      	adds	r3, #1
 800faca:	b29a      	uxth	r2, r3
 800facc:	69fb      	ldr	r3, [r7, #28]
 800face:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fad0:	69fb      	ldr	r3, [r7, #28]
 800fad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d00b      	beq.n	800faf2 <tcp_input+0x6e2>
 800fada:	69fb      	ldr	r3, [r7, #28]
 800fadc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fae0:	69fb      	ldr	r3, [r7, #28]
 800fae2:	6918      	ldr	r0, [r3, #16]
 800fae4:	2300      	movs	r3, #0
 800fae6:	2200      	movs	r2, #0
 800fae8:	69f9      	ldr	r1, [r7, #28]
 800faea:	47a0      	blx	r4
 800faec:	4603      	mov	r3, r0
 800faee:	74fb      	strb	r3, [r7, #19]
 800faf0:	e001      	b.n	800faf6 <tcp_input+0x6e6>
 800faf2:	2300      	movs	r3, #0
 800faf4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800faf6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fafa:	f113 0f0d 	cmn.w	r3, #13
 800fafe:	d016      	beq.n	800fb2e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fb00:	4b13      	ldr	r3, [pc, #76]	; (800fb50 <tcp_input+0x740>)
 800fb02:	2200      	movs	r2, #0
 800fb04:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fb06:	69f8      	ldr	r0, [r7, #28]
 800fb08:	f000 f88e 	bl	800fc28 <tcp_input_delayed_close>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d128      	bne.n	800fb64 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fb12:	69f8      	ldr	r0, [r7, #28]
 800fb14:	f002 ff20 	bl	8012958 <tcp_output>
 800fb18:	e025      	b.n	800fb66 <tcp_input+0x756>
        goto aborted;
 800fb1a:	bf00      	nop
 800fb1c:	e023      	b.n	800fb66 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fb1e:	bf00      	nop
 800fb20:	e021      	b.n	800fb66 <tcp_input+0x756>
              goto aborted;
 800fb22:	bf00      	nop
 800fb24:	e01f      	b.n	800fb66 <tcp_input+0x756>
          goto aborted;
 800fb26:	bf00      	nop
 800fb28:	e01d      	b.n	800fb66 <tcp_input+0x756>
            goto aborted;
 800fb2a:	bf00      	nop
 800fb2c:	e01b      	b.n	800fb66 <tcp_input+0x756>
              goto aborted;
 800fb2e:	bf00      	nop
 800fb30:	e019      	b.n	800fb66 <tcp_input+0x756>
 800fb32:	bf00      	nop
 800fb34:	20010f88 	.word	0x20010f88
 800fb38:	20010f98 	.word	0x20010f98
 800fb3c:	20010fb8 	.word	0x20010fb8
 800fb40:	20010fb5 	.word	0x20010fb5
 800fb44:	20010fb0 	.word	0x20010fb0
 800fb48:	20010fb4 	.word	0x20010fb4
 800fb4c:	20010fb2 	.word	0x20010fb2
 800fb50:	20010fbc 	.word	0x20010fbc
 800fb54:	20010f7c 	.word	0x20010f7c
 800fb58:	0801c274 	.word	0x0801c274
 800fb5c:	0801c428 	.word	0x0801c428
 800fb60:	0801c2c0 	.word	0x0801c2c0
          goto aborted;
 800fb64:	bf00      	nop
    tcp_input_pcb = NULL;
 800fb66:	4b27      	ldr	r3, [pc, #156]	; (800fc04 <tcp_input+0x7f4>)
 800fb68:	2200      	movs	r2, #0
 800fb6a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fb6c:	4b26      	ldr	r3, [pc, #152]	; (800fc08 <tcp_input+0x7f8>)
 800fb6e:	2200      	movs	r2, #0
 800fb70:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fb72:	4b26      	ldr	r3, [pc, #152]	; (800fc0c <tcp_input+0x7fc>)
 800fb74:	685b      	ldr	r3, [r3, #4]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d03f      	beq.n	800fbfa <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800fb7a:	4b24      	ldr	r3, [pc, #144]	; (800fc0c <tcp_input+0x7fc>)
 800fb7c:	685b      	ldr	r3, [r3, #4]
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f7fd f9e8 	bl	800cf54 <pbuf_free>
      inseg.p = NULL;
 800fb84:	4b21      	ldr	r3, [pc, #132]	; (800fc0c <tcp_input+0x7fc>)
 800fb86:	2200      	movs	r2, #0
 800fb88:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fb8a:	e036      	b.n	800fbfa <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fb8c:	4b20      	ldr	r3, [pc, #128]	; (800fc10 <tcp_input+0x800>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	899b      	ldrh	r3, [r3, #12]
 800fb92:	b29b      	uxth	r3, r3
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7fb fda9 	bl	800b6ec <lwip_htons>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	b2db      	uxtb	r3, r3
 800fb9e:	f003 0304 	and.w	r3, r3, #4
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d118      	bne.n	800fbd8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fba6:	4b1b      	ldr	r3, [pc, #108]	; (800fc14 <tcp_input+0x804>)
 800fba8:	6819      	ldr	r1, [r3, #0]
 800fbaa:	4b1b      	ldr	r3, [pc, #108]	; (800fc18 <tcp_input+0x808>)
 800fbac:	881b      	ldrh	r3, [r3, #0]
 800fbae:	461a      	mov	r2, r3
 800fbb0:	4b1a      	ldr	r3, [pc, #104]	; (800fc1c <tcp_input+0x80c>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fbb6:	4b16      	ldr	r3, [pc, #88]	; (800fc10 <tcp_input+0x800>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fbba:	885b      	ldrh	r3, [r3, #2]
 800fbbc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fbbe:	4a14      	ldr	r2, [pc, #80]	; (800fc10 <tcp_input+0x800>)
 800fbc0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fbc2:	8812      	ldrh	r2, [r2, #0]
 800fbc4:	b292      	uxth	r2, r2
 800fbc6:	9202      	str	r2, [sp, #8]
 800fbc8:	9301      	str	r3, [sp, #4]
 800fbca:	4b15      	ldr	r3, [pc, #84]	; (800fc20 <tcp_input+0x810>)
 800fbcc:	9300      	str	r3, [sp, #0]
 800fbce:	4b15      	ldr	r3, [pc, #84]	; (800fc24 <tcp_input+0x814>)
 800fbd0:	4602      	mov	r2, r0
 800fbd2:	2000      	movs	r0, #0
 800fbd4:	f003 fc74 	bl	80134c0 <tcp_rst>
    pbuf_free(p);
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f7fd f9bb 	bl	800cf54 <pbuf_free>
  return;
 800fbde:	e00c      	b.n	800fbfa <tcp_input+0x7ea>
    goto dropped;
 800fbe0:	bf00      	nop
 800fbe2:	e006      	b.n	800fbf2 <tcp_input+0x7e2>
    goto dropped;
 800fbe4:	bf00      	nop
 800fbe6:	e004      	b.n	800fbf2 <tcp_input+0x7e2>
    goto dropped;
 800fbe8:	bf00      	nop
 800fbea:	e002      	b.n	800fbf2 <tcp_input+0x7e2>
      goto dropped;
 800fbec:	bf00      	nop
 800fbee:	e000      	b.n	800fbf2 <tcp_input+0x7e2>
      goto dropped;
 800fbf0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f7fd f9ae 	bl	800cf54 <pbuf_free>
 800fbf8:	e000      	b.n	800fbfc <tcp_input+0x7ec>
  return;
 800fbfa:	bf00      	nop
}
 800fbfc:	3724      	adds	r7, #36	; 0x24
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd90      	pop	{r4, r7, pc}
 800fc02:	bf00      	nop
 800fc04:	20010fbc 	.word	0x20010fbc
 800fc08:	20010fb8 	.word	0x20010fb8
 800fc0c:	20010f88 	.word	0x20010f88
 800fc10:	20010f98 	.word	0x20010f98
 800fc14:	20010fac 	.word	0x20010fac
 800fc18:	20010fb2 	.word	0x20010fb2
 800fc1c:	20010fa8 	.word	0x20010fa8
 800fc20:	2000d80c 	.word	0x2000d80c
 800fc24:	2000d810 	.word	0x2000d810

0800fc28 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b082      	sub	sp, #8
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d106      	bne.n	800fc44 <tcp_input_delayed_close+0x1c>
 800fc36:	4b17      	ldr	r3, [pc, #92]	; (800fc94 <tcp_input_delayed_close+0x6c>)
 800fc38:	f240 225a 	movw	r2, #602	; 0x25a
 800fc3c:	4916      	ldr	r1, [pc, #88]	; (800fc98 <tcp_input_delayed_close+0x70>)
 800fc3e:	4817      	ldr	r0, [pc, #92]	; (800fc9c <tcp_input_delayed_close+0x74>)
 800fc40:	f009 f8ba 	bl	8018db8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fc44:	4b16      	ldr	r3, [pc, #88]	; (800fca0 <tcp_input_delayed_close+0x78>)
 800fc46:	781b      	ldrb	r3, [r3, #0]
 800fc48:	f003 0310 	and.w	r3, r3, #16
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d01c      	beq.n	800fc8a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	8b5b      	ldrh	r3, [r3, #26]
 800fc54:	f003 0310 	and.w	r3, r3, #16
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d10d      	bne.n	800fc78 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d008      	beq.n	800fc78 <tcp_input_delayed_close+0x50>
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc6c:	687a      	ldr	r2, [r7, #4]
 800fc6e:	6912      	ldr	r2, [r2, #16]
 800fc70:	f06f 010e 	mvn.w	r1, #14
 800fc74:	4610      	mov	r0, r2
 800fc76:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fc78:	6879      	ldr	r1, [r7, #4]
 800fc7a:	480a      	ldr	r0, [pc, #40]	; (800fca4 <tcp_input_delayed_close+0x7c>)
 800fc7c:	f7ff fa50 	bl	800f120 <tcp_pcb_remove>
    tcp_free(pcb);
 800fc80:	6878      	ldr	r0, [r7, #4]
 800fc82:	f7fd fc23 	bl	800d4cc <tcp_free>
    return 1;
 800fc86:	2301      	movs	r3, #1
 800fc88:	e000      	b.n	800fc8c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fc8a:	2300      	movs	r3, #0
}
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	3708      	adds	r7, #8
 800fc90:	46bd      	mov	sp, r7
 800fc92:	bd80      	pop	{r7, pc}
 800fc94:	0801c274 	.word	0x0801c274
 800fc98:	0801c444 	.word	0x0801c444
 800fc9c:	0801c2c0 	.word	0x0801c2c0
 800fca0:	20010fb5 	.word	0x20010fb5
 800fca4:	20010f7c 	.word	0x20010f7c

0800fca8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fca8:	b590      	push	{r4, r7, lr}
 800fcaa:	b08b      	sub	sp, #44	; 0x2c
 800fcac:	af04      	add	r7, sp, #16
 800fcae:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fcb0:	4b6f      	ldr	r3, [pc, #444]	; (800fe70 <tcp_listen_input+0x1c8>)
 800fcb2:	781b      	ldrb	r3, [r3, #0]
 800fcb4:	f003 0304 	and.w	r3, r3, #4
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	f040 80d2 	bne.w	800fe62 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d106      	bne.n	800fcd2 <tcp_listen_input+0x2a>
 800fcc4:	4b6b      	ldr	r3, [pc, #428]	; (800fe74 <tcp_listen_input+0x1cc>)
 800fcc6:	f240 2281 	movw	r2, #641	; 0x281
 800fcca:	496b      	ldr	r1, [pc, #428]	; (800fe78 <tcp_listen_input+0x1d0>)
 800fccc:	486b      	ldr	r0, [pc, #428]	; (800fe7c <tcp_listen_input+0x1d4>)
 800fcce:	f009 f873 	bl	8018db8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fcd2:	4b67      	ldr	r3, [pc, #412]	; (800fe70 <tcp_listen_input+0x1c8>)
 800fcd4:	781b      	ldrb	r3, [r3, #0]
 800fcd6:	f003 0310 	and.w	r3, r3, #16
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d019      	beq.n	800fd12 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcde:	4b68      	ldr	r3, [pc, #416]	; (800fe80 <tcp_listen_input+0x1d8>)
 800fce0:	6819      	ldr	r1, [r3, #0]
 800fce2:	4b68      	ldr	r3, [pc, #416]	; (800fe84 <tcp_listen_input+0x1dc>)
 800fce4:	881b      	ldrh	r3, [r3, #0]
 800fce6:	461a      	mov	r2, r3
 800fce8:	4b67      	ldr	r3, [pc, #412]	; (800fe88 <tcp_listen_input+0x1e0>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcee:	4b67      	ldr	r3, [pc, #412]	; (800fe8c <tcp_listen_input+0x1e4>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcf2:	885b      	ldrh	r3, [r3, #2]
 800fcf4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcf6:	4a65      	ldr	r2, [pc, #404]	; (800fe8c <tcp_listen_input+0x1e4>)
 800fcf8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcfa:	8812      	ldrh	r2, [r2, #0]
 800fcfc:	b292      	uxth	r2, r2
 800fcfe:	9202      	str	r2, [sp, #8]
 800fd00:	9301      	str	r3, [sp, #4]
 800fd02:	4b63      	ldr	r3, [pc, #396]	; (800fe90 <tcp_listen_input+0x1e8>)
 800fd04:	9300      	str	r3, [sp, #0]
 800fd06:	4b63      	ldr	r3, [pc, #396]	; (800fe94 <tcp_listen_input+0x1ec>)
 800fd08:	4602      	mov	r2, r0
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f003 fbd8 	bl	80134c0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fd10:	e0a9      	b.n	800fe66 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fd12:	4b57      	ldr	r3, [pc, #348]	; (800fe70 <tcp_listen_input+0x1c8>)
 800fd14:	781b      	ldrb	r3, [r3, #0]
 800fd16:	f003 0302 	and.w	r3, r3, #2
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	f000 80a3 	beq.w	800fe66 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	7d5b      	ldrb	r3, [r3, #21]
 800fd24:	4618      	mov	r0, r3
 800fd26:	f7ff f859 	bl	800eddc <tcp_alloc>
 800fd2a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d111      	bne.n	800fd56 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	699b      	ldr	r3, [r3, #24]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d00a      	beq.n	800fd50 <tcp_listen_input+0xa8>
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	699b      	ldr	r3, [r3, #24]
 800fd3e:	687a      	ldr	r2, [r7, #4]
 800fd40:	6910      	ldr	r0, [r2, #16]
 800fd42:	f04f 32ff 	mov.w	r2, #4294967295
 800fd46:	2100      	movs	r1, #0
 800fd48:	4798      	blx	r3
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	73bb      	strb	r3, [r7, #14]
      return;
 800fd4e:	e08b      	b.n	800fe68 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fd50:	23f0      	movs	r3, #240	; 0xf0
 800fd52:	73bb      	strb	r3, [r7, #14]
      return;
 800fd54:	e088      	b.n	800fe68 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fd56:	4b50      	ldr	r3, [pc, #320]	; (800fe98 <tcp_listen_input+0x1f0>)
 800fd58:	695a      	ldr	r2, [r3, #20]
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fd5e:	4b4e      	ldr	r3, [pc, #312]	; (800fe98 <tcp_listen_input+0x1f0>)
 800fd60:	691a      	ldr	r2, [r3, #16]
 800fd62:	697b      	ldr	r3, [r7, #20]
 800fd64:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	8ada      	ldrh	r2, [r3, #22]
 800fd6a:	697b      	ldr	r3, [r7, #20]
 800fd6c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fd6e:	4b47      	ldr	r3, [pc, #284]	; (800fe8c <tcp_listen_input+0x1e4>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	881b      	ldrh	r3, [r3, #0]
 800fd74:	b29a      	uxth	r2, r3
 800fd76:	697b      	ldr	r3, [r7, #20]
 800fd78:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	2203      	movs	r2, #3
 800fd7e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fd80:	4b41      	ldr	r3, [pc, #260]	; (800fe88 <tcp_listen_input+0x1e0>)
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	1c5a      	adds	r2, r3, #1
 800fd86:	697b      	ldr	r3, [r7, #20]
 800fd88:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fd8a:	697b      	ldr	r3, [r7, #20]
 800fd8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd8e:	697b      	ldr	r3, [r7, #20]
 800fd90:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fd92:	6978      	ldr	r0, [r7, #20]
 800fd94:	f7ff fa58 	bl	800f248 <tcp_next_iss>
 800fd98:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fd9a:	697b      	ldr	r3, [r7, #20]
 800fd9c:	693a      	ldr	r2, [r7, #16]
 800fd9e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800fda0:	697b      	ldr	r3, [r7, #20]
 800fda2:	693a      	ldr	r2, [r7, #16]
 800fda4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800fda6:	697b      	ldr	r3, [r7, #20]
 800fda8:	693a      	ldr	r2, [r7, #16]
 800fdaa:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fdac:	697b      	ldr	r3, [r7, #20]
 800fdae:	693a      	ldr	r2, [r7, #16]
 800fdb0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fdb2:	4b35      	ldr	r3, [pc, #212]	; (800fe88 <tcp_listen_input+0x1e0>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	1e5a      	subs	r2, r3, #1
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	691a      	ldr	r2, [r3, #16]
 800fdc0:	697b      	ldr	r3, [r7, #20]
 800fdc2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fdc4:	697b      	ldr	r3, [r7, #20]
 800fdc6:	687a      	ldr	r2, [r7, #4]
 800fdc8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	7a5b      	ldrb	r3, [r3, #9]
 800fdce:	f003 030c 	and.w	r3, r3, #12
 800fdd2:	b2da      	uxtb	r2, r3
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	7a1a      	ldrb	r2, [r3, #8]
 800fddc:	697b      	ldr	r3, [r7, #20]
 800fdde:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fde0:	4b2e      	ldr	r3, [pc, #184]	; (800fe9c <tcp_listen_input+0x1f4>)
 800fde2:	681a      	ldr	r2, [r3, #0]
 800fde4:	697b      	ldr	r3, [r7, #20]
 800fde6:	60da      	str	r2, [r3, #12]
 800fde8:	4a2c      	ldr	r2, [pc, #176]	; (800fe9c <tcp_listen_input+0x1f4>)
 800fdea:	697b      	ldr	r3, [r7, #20]
 800fdec:	6013      	str	r3, [r2, #0]
 800fdee:	f003 fd29 	bl	8013844 <tcp_timer_needed>
 800fdf2:	4b2b      	ldr	r3, [pc, #172]	; (800fea0 <tcp_listen_input+0x1f8>)
 800fdf4:	2201      	movs	r2, #1
 800fdf6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fdf8:	6978      	ldr	r0, [r7, #20]
 800fdfa:	f001 fd8f 	bl	801191c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fdfe:	4b23      	ldr	r3, [pc, #140]	; (800fe8c <tcp_listen_input+0x1e4>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	89db      	ldrh	r3, [r3, #14]
 800fe04:	b29a      	uxth	r2, r3
 800fe06:	697b      	ldr	r3, [r7, #20]
 800fe08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fe0c:	697b      	ldr	r3, [r7, #20]
 800fe0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fe12:	697b      	ldr	r3, [r7, #20]
 800fe14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fe1c:	697b      	ldr	r3, [r7, #20]
 800fe1e:	3304      	adds	r3, #4
 800fe20:	4618      	mov	r0, r3
 800fe22:	f007 fac1 	bl	80173a8 <ip4_route>
 800fe26:	4601      	mov	r1, r0
 800fe28:	697b      	ldr	r3, [r7, #20]
 800fe2a:	3304      	adds	r3, #4
 800fe2c:	461a      	mov	r2, r3
 800fe2e:	4620      	mov	r0, r4
 800fe30:	f7ff fa30 	bl	800f294 <tcp_eff_send_mss_netif>
 800fe34:	4603      	mov	r3, r0
 800fe36:	461a      	mov	r2, r3
 800fe38:	697b      	ldr	r3, [r7, #20]
 800fe3a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fe3c:	2112      	movs	r1, #18
 800fe3e:	6978      	ldr	r0, [r7, #20]
 800fe40:	f002 fc9c 	bl	801277c <tcp_enqueue_flags>
 800fe44:	4603      	mov	r3, r0
 800fe46:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fe48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d004      	beq.n	800fe5a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fe50:	2100      	movs	r1, #0
 800fe52:	6978      	ldr	r0, [r7, #20]
 800fe54:	f7fd fdc0 	bl	800d9d8 <tcp_abandon>
      return;
 800fe58:	e006      	b.n	800fe68 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fe5a:	6978      	ldr	r0, [r7, #20]
 800fe5c:	f002 fd7c 	bl	8012958 <tcp_output>
  return;
 800fe60:	e001      	b.n	800fe66 <tcp_listen_input+0x1be>
    return;
 800fe62:	bf00      	nop
 800fe64:	e000      	b.n	800fe68 <tcp_listen_input+0x1c0>
  return;
 800fe66:	bf00      	nop
}
 800fe68:	371c      	adds	r7, #28
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd90      	pop	{r4, r7, pc}
 800fe6e:	bf00      	nop
 800fe70:	20010fb4 	.word	0x20010fb4
 800fe74:	0801c274 	.word	0x0801c274
 800fe78:	0801c46c 	.word	0x0801c46c
 800fe7c:	0801c2c0 	.word	0x0801c2c0
 800fe80:	20010fac 	.word	0x20010fac
 800fe84:	20010fb2 	.word	0x20010fb2
 800fe88:	20010fa8 	.word	0x20010fa8
 800fe8c:	20010f98 	.word	0x20010f98
 800fe90:	2000d80c 	.word	0x2000d80c
 800fe94:	2000d810 	.word	0x2000d810
 800fe98:	2000d7fc 	.word	0x2000d7fc
 800fe9c:	20010f7c 	.word	0x20010f7c
 800fea0:	20010f84 	.word	0x20010f84

0800fea4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b086      	sub	sp, #24
 800fea8:	af04      	add	r7, sp, #16
 800feaa:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800feac:	4b2f      	ldr	r3, [pc, #188]	; (800ff6c <tcp_timewait_input+0xc8>)
 800feae:	781b      	ldrb	r3, [r3, #0]
 800feb0:	f003 0304 	and.w	r3, r3, #4
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d153      	bne.n	800ff60 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d106      	bne.n	800fecc <tcp_timewait_input+0x28>
 800febe:	4b2c      	ldr	r3, [pc, #176]	; (800ff70 <tcp_timewait_input+0xcc>)
 800fec0:	f240 22ee 	movw	r2, #750	; 0x2ee
 800fec4:	492b      	ldr	r1, [pc, #172]	; (800ff74 <tcp_timewait_input+0xd0>)
 800fec6:	482c      	ldr	r0, [pc, #176]	; (800ff78 <tcp_timewait_input+0xd4>)
 800fec8:	f008 ff76 	bl	8018db8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fecc:	4b27      	ldr	r3, [pc, #156]	; (800ff6c <tcp_timewait_input+0xc8>)
 800fece:	781b      	ldrb	r3, [r3, #0]
 800fed0:	f003 0302 	and.w	r3, r3, #2
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d02a      	beq.n	800ff2e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fed8:	4b28      	ldr	r3, [pc, #160]	; (800ff7c <tcp_timewait_input+0xd8>)
 800feda:	681a      	ldr	r2, [r3, #0]
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fee0:	1ad3      	subs	r3, r2, r3
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	db2d      	blt.n	800ff42 <tcp_timewait_input+0x9e>
 800fee6:	4b25      	ldr	r3, [pc, #148]	; (800ff7c <tcp_timewait_input+0xd8>)
 800fee8:	681a      	ldr	r2, [r3, #0]
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feee:	6879      	ldr	r1, [r7, #4]
 800fef0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fef2:	440b      	add	r3, r1
 800fef4:	1ad3      	subs	r3, r2, r3
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	dc23      	bgt.n	800ff42 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fefa:	4b21      	ldr	r3, [pc, #132]	; (800ff80 <tcp_timewait_input+0xdc>)
 800fefc:	6819      	ldr	r1, [r3, #0]
 800fefe:	4b21      	ldr	r3, [pc, #132]	; (800ff84 <tcp_timewait_input+0xe0>)
 800ff00:	881b      	ldrh	r3, [r3, #0]
 800ff02:	461a      	mov	r2, r3
 800ff04:	4b1d      	ldr	r3, [pc, #116]	; (800ff7c <tcp_timewait_input+0xd8>)
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff0a:	4b1f      	ldr	r3, [pc, #124]	; (800ff88 <tcp_timewait_input+0xe4>)
 800ff0c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff0e:	885b      	ldrh	r3, [r3, #2]
 800ff10:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff12:	4a1d      	ldr	r2, [pc, #116]	; (800ff88 <tcp_timewait_input+0xe4>)
 800ff14:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff16:	8812      	ldrh	r2, [r2, #0]
 800ff18:	b292      	uxth	r2, r2
 800ff1a:	9202      	str	r2, [sp, #8]
 800ff1c:	9301      	str	r3, [sp, #4]
 800ff1e:	4b1b      	ldr	r3, [pc, #108]	; (800ff8c <tcp_timewait_input+0xe8>)
 800ff20:	9300      	str	r3, [sp, #0]
 800ff22:	4b1b      	ldr	r3, [pc, #108]	; (800ff90 <tcp_timewait_input+0xec>)
 800ff24:	4602      	mov	r2, r0
 800ff26:	6878      	ldr	r0, [r7, #4]
 800ff28:	f003 faca 	bl	80134c0 <tcp_rst>
      return;
 800ff2c:	e01b      	b.n	800ff66 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ff2e:	4b0f      	ldr	r3, [pc, #60]	; (800ff6c <tcp_timewait_input+0xc8>)
 800ff30:	781b      	ldrb	r3, [r3, #0]
 800ff32:	f003 0301 	and.w	r3, r3, #1
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d003      	beq.n	800ff42 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ff3a:	4b16      	ldr	r3, [pc, #88]	; (800ff94 <tcp_timewait_input+0xf0>)
 800ff3c:	681a      	ldr	r2, [r3, #0]
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ff42:	4b10      	ldr	r3, [pc, #64]	; (800ff84 <tcp_timewait_input+0xe0>)
 800ff44:	881b      	ldrh	r3, [r3, #0]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d00c      	beq.n	800ff64 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	8b5b      	ldrh	r3, [r3, #26]
 800ff4e:	f043 0302 	orr.w	r3, r3, #2
 800ff52:	b29a      	uxth	r2, r3
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	f002 fcfd 	bl	8012958 <tcp_output>
  }
  return;
 800ff5e:	e001      	b.n	800ff64 <tcp_timewait_input+0xc0>
    return;
 800ff60:	bf00      	nop
 800ff62:	e000      	b.n	800ff66 <tcp_timewait_input+0xc2>
  return;
 800ff64:	bf00      	nop
}
 800ff66:	3708      	adds	r7, #8
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}
 800ff6c:	20010fb4 	.word	0x20010fb4
 800ff70:	0801c274 	.word	0x0801c274
 800ff74:	0801c48c 	.word	0x0801c48c
 800ff78:	0801c2c0 	.word	0x0801c2c0
 800ff7c:	20010fa8 	.word	0x20010fa8
 800ff80:	20010fac 	.word	0x20010fac
 800ff84:	20010fb2 	.word	0x20010fb2
 800ff88:	20010f98 	.word	0x20010f98
 800ff8c:	2000d80c 	.word	0x2000d80c
 800ff90:	2000d810 	.word	0x2000d810
 800ff94:	20010f70 	.word	0x20010f70

0800ff98 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ff98:	b590      	push	{r4, r7, lr}
 800ff9a:	b08d      	sub	sp, #52	; 0x34
 800ff9c:	af04      	add	r7, sp, #16
 800ff9e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d106      	bne.n	800ffbc <tcp_process+0x24>
 800ffae:	4b9d      	ldr	r3, [pc, #628]	; (8010224 <tcp_process+0x28c>)
 800ffb0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ffb4:	499c      	ldr	r1, [pc, #624]	; (8010228 <tcp_process+0x290>)
 800ffb6:	489d      	ldr	r0, [pc, #628]	; (801022c <tcp_process+0x294>)
 800ffb8:	f008 fefe 	bl	8018db8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ffbc:	4b9c      	ldr	r3, [pc, #624]	; (8010230 <tcp_process+0x298>)
 800ffbe:	781b      	ldrb	r3, [r3, #0]
 800ffc0:	f003 0304 	and.w	r3, r3, #4
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d04e      	beq.n	8010066 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	7d1b      	ldrb	r3, [r3, #20]
 800ffcc:	2b02      	cmp	r3, #2
 800ffce:	d108      	bne.n	800ffe2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ffd4:	4b97      	ldr	r3, [pc, #604]	; (8010234 <tcp_process+0x29c>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	d123      	bne.n	8010024 <tcp_process+0x8c>
        acceptable = 1;
 800ffdc:	2301      	movs	r3, #1
 800ffde:	76fb      	strb	r3, [r7, #27]
 800ffe0:	e020      	b.n	8010024 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ffe6:	4b94      	ldr	r3, [pc, #592]	; (8010238 <tcp_process+0x2a0>)
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	429a      	cmp	r2, r3
 800ffec:	d102      	bne.n	800fff4 <tcp_process+0x5c>
        acceptable = 1;
 800ffee:	2301      	movs	r3, #1
 800fff0:	76fb      	strb	r3, [r7, #27]
 800fff2:	e017      	b.n	8010024 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fff4:	4b90      	ldr	r3, [pc, #576]	; (8010238 <tcp_process+0x2a0>)
 800fff6:	681a      	ldr	r2, [r3, #0]
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fffc:	1ad3      	subs	r3, r2, r3
 800fffe:	2b00      	cmp	r3, #0
 8010000:	db10      	blt.n	8010024 <tcp_process+0x8c>
 8010002:	4b8d      	ldr	r3, [pc, #564]	; (8010238 <tcp_process+0x2a0>)
 8010004:	681a      	ldr	r2, [r3, #0]
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801000a:	6879      	ldr	r1, [r7, #4]
 801000c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801000e:	440b      	add	r3, r1
 8010010:	1ad3      	subs	r3, r2, r3
 8010012:	2b00      	cmp	r3, #0
 8010014:	dc06      	bgt.n	8010024 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	8b5b      	ldrh	r3, [r3, #26]
 801001a:	f043 0302 	orr.w	r3, r3, #2
 801001e:	b29a      	uxth	r2, r3
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010024:	7efb      	ldrb	r3, [r7, #27]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d01b      	beq.n	8010062 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	7d1b      	ldrb	r3, [r3, #20]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d106      	bne.n	8010040 <tcp_process+0xa8>
 8010032:	4b7c      	ldr	r3, [pc, #496]	; (8010224 <tcp_process+0x28c>)
 8010034:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010038:	4980      	ldr	r1, [pc, #512]	; (801023c <tcp_process+0x2a4>)
 801003a:	487c      	ldr	r0, [pc, #496]	; (801022c <tcp_process+0x294>)
 801003c:	f008 febc 	bl	8018db8 <iprintf>
      recv_flags |= TF_RESET;
 8010040:	4b7f      	ldr	r3, [pc, #508]	; (8010240 <tcp_process+0x2a8>)
 8010042:	781b      	ldrb	r3, [r3, #0]
 8010044:	f043 0308 	orr.w	r3, r3, #8
 8010048:	b2da      	uxtb	r2, r3
 801004a:	4b7d      	ldr	r3, [pc, #500]	; (8010240 <tcp_process+0x2a8>)
 801004c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	8b5b      	ldrh	r3, [r3, #26]
 8010052:	f023 0301 	bic.w	r3, r3, #1
 8010056:	b29a      	uxth	r2, r3
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801005c:	f06f 030d 	mvn.w	r3, #13
 8010060:	e37a      	b.n	8010758 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010062:	2300      	movs	r3, #0
 8010064:	e378      	b.n	8010758 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010066:	4b72      	ldr	r3, [pc, #456]	; (8010230 <tcp_process+0x298>)
 8010068:	781b      	ldrb	r3, [r3, #0]
 801006a:	f003 0302 	and.w	r3, r3, #2
 801006e:	2b00      	cmp	r3, #0
 8010070:	d010      	beq.n	8010094 <tcp_process+0xfc>
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	7d1b      	ldrb	r3, [r3, #20]
 8010076:	2b02      	cmp	r3, #2
 8010078:	d00c      	beq.n	8010094 <tcp_process+0xfc>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	7d1b      	ldrb	r3, [r3, #20]
 801007e:	2b03      	cmp	r3, #3
 8010080:	d008      	beq.n	8010094 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	8b5b      	ldrh	r3, [r3, #26]
 8010086:	f043 0302 	orr.w	r3, r3, #2
 801008a:	b29a      	uxth	r2, r3
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010090:	2300      	movs	r3, #0
 8010092:	e361      	b.n	8010758 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	8b5b      	ldrh	r3, [r3, #26]
 8010098:	f003 0310 	and.w	r3, r3, #16
 801009c:	2b00      	cmp	r3, #0
 801009e:	d103      	bne.n	80100a8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80100a0:	4b68      	ldr	r3, [pc, #416]	; (8010244 <tcp_process+0x2ac>)
 80100a2:	681a      	ldr	r2, [r3, #0]
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2200      	movs	r2, #0
 80100ac:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2200      	movs	r2, #0
 80100b4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80100b8:	6878      	ldr	r0, [r7, #4]
 80100ba:	f001 fc2f 	bl	801191c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	7d1b      	ldrb	r3, [r3, #20]
 80100c2:	3b02      	subs	r3, #2
 80100c4:	2b07      	cmp	r3, #7
 80100c6:	f200 8337 	bhi.w	8010738 <tcp_process+0x7a0>
 80100ca:	a201      	add	r2, pc, #4	; (adr r2, 80100d0 <tcp_process+0x138>)
 80100cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100d0:	080100f1 	.word	0x080100f1
 80100d4:	08010321 	.word	0x08010321
 80100d8:	08010499 	.word	0x08010499
 80100dc:	080104c3 	.word	0x080104c3
 80100e0:	080105e7 	.word	0x080105e7
 80100e4:	08010499 	.word	0x08010499
 80100e8:	08010673 	.word	0x08010673
 80100ec:	08010703 	.word	0x08010703
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80100f0:	4b4f      	ldr	r3, [pc, #316]	; (8010230 <tcp_process+0x298>)
 80100f2:	781b      	ldrb	r3, [r3, #0]
 80100f4:	f003 0310 	and.w	r3, r3, #16
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	f000 80e4 	beq.w	80102c6 <tcp_process+0x32e>
 80100fe:	4b4c      	ldr	r3, [pc, #304]	; (8010230 <tcp_process+0x298>)
 8010100:	781b      	ldrb	r3, [r3, #0]
 8010102:	f003 0302 	and.w	r3, r3, #2
 8010106:	2b00      	cmp	r3, #0
 8010108:	f000 80dd 	beq.w	80102c6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010110:	1c5a      	adds	r2, r3, #1
 8010112:	4b48      	ldr	r3, [pc, #288]	; (8010234 <tcp_process+0x29c>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	429a      	cmp	r2, r3
 8010118:	f040 80d5 	bne.w	80102c6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801011c:	4b46      	ldr	r3, [pc, #280]	; (8010238 <tcp_process+0x2a0>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	1c5a      	adds	r2, r3, #1
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801012e:	4b41      	ldr	r3, [pc, #260]	; (8010234 <tcp_process+0x29c>)
 8010130:	681a      	ldr	r2, [r3, #0]
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010136:	4b44      	ldr	r3, [pc, #272]	; (8010248 <tcp_process+0x2b0>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	89db      	ldrh	r3, [r3, #14]
 801013c:	b29a      	uxth	r2, r3
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010150:	4b39      	ldr	r3, [pc, #228]	; (8010238 <tcp_process+0x2a0>)
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	1e5a      	subs	r2, r3, #1
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2204      	movs	r2, #4
 801015e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	3304      	adds	r3, #4
 8010168:	4618      	mov	r0, r3
 801016a:	f007 f91d 	bl	80173a8 <ip4_route>
 801016e:	4601      	mov	r1, r0
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	3304      	adds	r3, #4
 8010174:	461a      	mov	r2, r3
 8010176:	4620      	mov	r0, r4
 8010178:	f7ff f88c 	bl	800f294 <tcp_eff_send_mss_netif>
 801017c:	4603      	mov	r3, r0
 801017e:	461a      	mov	r2, r3
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010188:	009a      	lsls	r2, r3, #2
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801018e:	005b      	lsls	r3, r3, #1
 8010190:	f241 111c 	movw	r1, #4380	; 0x111c
 8010194:	428b      	cmp	r3, r1
 8010196:	bf38      	it	cc
 8010198:	460b      	movcc	r3, r1
 801019a:	429a      	cmp	r2, r3
 801019c:	d204      	bcs.n	80101a8 <tcp_process+0x210>
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101a2:	009b      	lsls	r3, r3, #2
 80101a4:	b29b      	uxth	r3, r3
 80101a6:	e00d      	b.n	80101c4 <tcp_process+0x22c>
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101ac:	005b      	lsls	r3, r3, #1
 80101ae:	f241 121c 	movw	r2, #4380	; 0x111c
 80101b2:	4293      	cmp	r3, r2
 80101b4:	d904      	bls.n	80101c0 <tcp_process+0x228>
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101ba:	005b      	lsls	r3, r3, #1
 80101bc:	b29b      	uxth	r3, r3
 80101be:	e001      	b.n	80101c4 <tcp_process+0x22c>
 80101c0:	f241 131c 	movw	r3, #4380	; 0x111c
 80101c4:	687a      	ldr	r2, [r7, #4]
 80101c6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d106      	bne.n	80101e2 <tcp_process+0x24a>
 80101d4:	4b13      	ldr	r3, [pc, #76]	; (8010224 <tcp_process+0x28c>)
 80101d6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80101da:	491c      	ldr	r1, [pc, #112]	; (801024c <tcp_process+0x2b4>)
 80101dc:	4813      	ldr	r0, [pc, #76]	; (801022c <tcp_process+0x294>)
 80101de:	f008 fdeb 	bl	8018db8 <iprintf>
        --pcb->snd_queuelen;
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80101e8:	3b01      	subs	r3, #1
 80101ea:	b29a      	uxth	r2, r3
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101f6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80101f8:	69fb      	ldr	r3, [r7, #28]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d12a      	bne.n	8010254 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010202:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010204:	69fb      	ldr	r3, [r7, #28]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d106      	bne.n	8010218 <tcp_process+0x280>
 801020a:	4b06      	ldr	r3, [pc, #24]	; (8010224 <tcp_process+0x28c>)
 801020c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010210:	490f      	ldr	r1, [pc, #60]	; (8010250 <tcp_process+0x2b8>)
 8010212:	4806      	ldr	r0, [pc, #24]	; (801022c <tcp_process+0x294>)
 8010214:	f008 fdd0 	bl	8018db8 <iprintf>
          pcb->unsent = rseg->next;
 8010218:	69fb      	ldr	r3, [r7, #28]
 801021a:	681a      	ldr	r2, [r3, #0]
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	66da      	str	r2, [r3, #108]	; 0x6c
 8010220:	e01c      	b.n	801025c <tcp_process+0x2c4>
 8010222:	bf00      	nop
 8010224:	0801c274 	.word	0x0801c274
 8010228:	0801c4ac 	.word	0x0801c4ac
 801022c:	0801c2c0 	.word	0x0801c2c0
 8010230:	20010fb4 	.word	0x20010fb4
 8010234:	20010fac 	.word	0x20010fac
 8010238:	20010fa8 	.word	0x20010fa8
 801023c:	0801c4c8 	.word	0x0801c4c8
 8010240:	20010fb5 	.word	0x20010fb5
 8010244:	20010f70 	.word	0x20010f70
 8010248:	20010f98 	.word	0x20010f98
 801024c:	0801c4e8 	.word	0x0801c4e8
 8010250:	0801c500 	.word	0x0801c500
        } else {
          pcb->unacked = rseg->next;
 8010254:	69fb      	ldr	r3, [r7, #28]
 8010256:	681a      	ldr	r2, [r3, #0]
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801025c:	69f8      	ldr	r0, [r7, #28]
 801025e:	f7fe fc36 	bl	800eace <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010266:	2b00      	cmp	r3, #0
 8010268:	d104      	bne.n	8010274 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010270:	861a      	strh	r2, [r3, #48]	; 0x30
 8010272:	e006      	b.n	8010282 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	2200      	movs	r2, #0
 8010278:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	2200      	movs	r2, #0
 801027e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010288:	2b00      	cmp	r3, #0
 801028a:	d00a      	beq.n	80102a2 <tcp_process+0x30a>
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010292:	687a      	ldr	r2, [r7, #4]
 8010294:	6910      	ldr	r0, [r2, #16]
 8010296:	2200      	movs	r2, #0
 8010298:	6879      	ldr	r1, [r7, #4]
 801029a:	4798      	blx	r3
 801029c:	4603      	mov	r3, r0
 801029e:	76bb      	strb	r3, [r7, #26]
 80102a0:	e001      	b.n	80102a6 <tcp_process+0x30e>
 80102a2:	2300      	movs	r3, #0
 80102a4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80102a6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80102aa:	f113 0f0d 	cmn.w	r3, #13
 80102ae:	d102      	bne.n	80102b6 <tcp_process+0x31e>
          return ERR_ABRT;
 80102b0:	f06f 030c 	mvn.w	r3, #12
 80102b4:	e250      	b.n	8010758 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	8b5b      	ldrh	r3, [r3, #26]
 80102ba:	f043 0302 	orr.w	r3, r3, #2
 80102be:	b29a      	uxth	r2, r3
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80102c4:	e23a      	b.n	801073c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80102c6:	4b98      	ldr	r3, [pc, #608]	; (8010528 <tcp_process+0x590>)
 80102c8:	781b      	ldrb	r3, [r3, #0]
 80102ca:	f003 0310 	and.w	r3, r3, #16
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	f000 8234 	beq.w	801073c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102d4:	4b95      	ldr	r3, [pc, #596]	; (801052c <tcp_process+0x594>)
 80102d6:	6819      	ldr	r1, [r3, #0]
 80102d8:	4b95      	ldr	r3, [pc, #596]	; (8010530 <tcp_process+0x598>)
 80102da:	881b      	ldrh	r3, [r3, #0]
 80102dc:	461a      	mov	r2, r3
 80102de:	4b95      	ldr	r3, [pc, #596]	; (8010534 <tcp_process+0x59c>)
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102e4:	4b94      	ldr	r3, [pc, #592]	; (8010538 <tcp_process+0x5a0>)
 80102e6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102e8:	885b      	ldrh	r3, [r3, #2]
 80102ea:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102ec:	4a92      	ldr	r2, [pc, #584]	; (8010538 <tcp_process+0x5a0>)
 80102ee:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102f0:	8812      	ldrh	r2, [r2, #0]
 80102f2:	b292      	uxth	r2, r2
 80102f4:	9202      	str	r2, [sp, #8]
 80102f6:	9301      	str	r3, [sp, #4]
 80102f8:	4b90      	ldr	r3, [pc, #576]	; (801053c <tcp_process+0x5a4>)
 80102fa:	9300      	str	r3, [sp, #0]
 80102fc:	4b90      	ldr	r3, [pc, #576]	; (8010540 <tcp_process+0x5a8>)
 80102fe:	4602      	mov	r2, r0
 8010300:	6878      	ldr	r0, [r7, #4]
 8010302:	f003 f8dd 	bl	80134c0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801030c:	2b05      	cmp	r3, #5
 801030e:	f200 8215 	bhi.w	801073c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2200      	movs	r2, #0
 8010316:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010318:	6878      	ldr	r0, [r7, #4]
 801031a:	f002 fea9 	bl	8013070 <tcp_rexmit_rto>
      break;
 801031e:	e20d      	b.n	801073c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010320:	4b81      	ldr	r3, [pc, #516]	; (8010528 <tcp_process+0x590>)
 8010322:	781b      	ldrb	r3, [r3, #0]
 8010324:	f003 0310 	and.w	r3, r3, #16
 8010328:	2b00      	cmp	r3, #0
 801032a:	f000 80a1 	beq.w	8010470 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801032e:	4b7f      	ldr	r3, [pc, #508]	; (801052c <tcp_process+0x594>)
 8010330:	681a      	ldr	r2, [r3, #0]
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010336:	1ad3      	subs	r3, r2, r3
 8010338:	3b01      	subs	r3, #1
 801033a:	2b00      	cmp	r3, #0
 801033c:	db7e      	blt.n	801043c <tcp_process+0x4a4>
 801033e:	4b7b      	ldr	r3, [pc, #492]	; (801052c <tcp_process+0x594>)
 8010340:	681a      	ldr	r2, [r3, #0]
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010346:	1ad3      	subs	r3, r2, r3
 8010348:	2b00      	cmp	r3, #0
 801034a:	dc77      	bgt.n	801043c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	2204      	movs	r2, #4
 8010350:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010356:	2b00      	cmp	r3, #0
 8010358:	d102      	bne.n	8010360 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801035a:	23fa      	movs	r3, #250	; 0xfa
 801035c:	76bb      	strb	r3, [r7, #26]
 801035e:	e01d      	b.n	801039c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010364:	699b      	ldr	r3, [r3, #24]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d106      	bne.n	8010378 <tcp_process+0x3e0>
 801036a:	4b76      	ldr	r3, [pc, #472]	; (8010544 <tcp_process+0x5ac>)
 801036c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010370:	4975      	ldr	r1, [pc, #468]	; (8010548 <tcp_process+0x5b0>)
 8010372:	4876      	ldr	r0, [pc, #472]	; (801054c <tcp_process+0x5b4>)
 8010374:	f008 fd20 	bl	8018db8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801037c:	699b      	ldr	r3, [r3, #24]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d00a      	beq.n	8010398 <tcp_process+0x400>
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010386:	699b      	ldr	r3, [r3, #24]
 8010388:	687a      	ldr	r2, [r7, #4]
 801038a:	6910      	ldr	r0, [r2, #16]
 801038c:	2200      	movs	r2, #0
 801038e:	6879      	ldr	r1, [r7, #4]
 8010390:	4798      	blx	r3
 8010392:	4603      	mov	r3, r0
 8010394:	76bb      	strb	r3, [r7, #26]
 8010396:	e001      	b.n	801039c <tcp_process+0x404>
 8010398:	23f0      	movs	r3, #240	; 0xf0
 801039a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801039c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d00a      	beq.n	80103ba <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80103a4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80103a8:	f113 0f0d 	cmn.w	r3, #13
 80103ac:	d002      	beq.n	80103b4 <tcp_process+0x41c>
              tcp_abort(pcb);
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f7fd fbd0 	bl	800db54 <tcp_abort>
            }
            return ERR_ABRT;
 80103b4:	f06f 030c 	mvn.w	r3, #12
 80103b8:	e1ce      	b.n	8010758 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80103ba:	6878      	ldr	r0, [r7, #4]
 80103bc:	f000 fae0 	bl	8010980 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80103c0:	4b63      	ldr	r3, [pc, #396]	; (8010550 <tcp_process+0x5b8>)
 80103c2:	881b      	ldrh	r3, [r3, #0]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d005      	beq.n	80103d4 <tcp_process+0x43c>
            recv_acked--;
 80103c8:	4b61      	ldr	r3, [pc, #388]	; (8010550 <tcp_process+0x5b8>)
 80103ca:	881b      	ldrh	r3, [r3, #0]
 80103cc:	3b01      	subs	r3, #1
 80103ce:	b29a      	uxth	r2, r3
 80103d0:	4b5f      	ldr	r3, [pc, #380]	; (8010550 <tcp_process+0x5b8>)
 80103d2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103d8:	009a      	lsls	r2, r3, #2
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103de:	005b      	lsls	r3, r3, #1
 80103e0:	f241 111c 	movw	r1, #4380	; 0x111c
 80103e4:	428b      	cmp	r3, r1
 80103e6:	bf38      	it	cc
 80103e8:	460b      	movcc	r3, r1
 80103ea:	429a      	cmp	r2, r3
 80103ec:	d204      	bcs.n	80103f8 <tcp_process+0x460>
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103f2:	009b      	lsls	r3, r3, #2
 80103f4:	b29b      	uxth	r3, r3
 80103f6:	e00d      	b.n	8010414 <tcp_process+0x47c>
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103fc:	005b      	lsls	r3, r3, #1
 80103fe:	f241 121c 	movw	r2, #4380	; 0x111c
 8010402:	4293      	cmp	r3, r2
 8010404:	d904      	bls.n	8010410 <tcp_process+0x478>
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801040a:	005b      	lsls	r3, r3, #1
 801040c:	b29b      	uxth	r3, r3
 801040e:	e001      	b.n	8010414 <tcp_process+0x47c>
 8010410:	f241 131c 	movw	r3, #4380	; 0x111c
 8010414:	687a      	ldr	r2, [r7, #4]
 8010416:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801041a:	4b4e      	ldr	r3, [pc, #312]	; (8010554 <tcp_process+0x5bc>)
 801041c:	781b      	ldrb	r3, [r3, #0]
 801041e:	f003 0320 	and.w	r3, r3, #32
 8010422:	2b00      	cmp	r3, #0
 8010424:	d037      	beq.n	8010496 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	8b5b      	ldrh	r3, [r3, #26]
 801042a:	f043 0302 	orr.w	r3, r3, #2
 801042e:	b29a      	uxth	r2, r3
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	2207      	movs	r2, #7
 8010438:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801043a:	e02c      	b.n	8010496 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801043c:	4b3b      	ldr	r3, [pc, #236]	; (801052c <tcp_process+0x594>)
 801043e:	6819      	ldr	r1, [r3, #0]
 8010440:	4b3b      	ldr	r3, [pc, #236]	; (8010530 <tcp_process+0x598>)
 8010442:	881b      	ldrh	r3, [r3, #0]
 8010444:	461a      	mov	r2, r3
 8010446:	4b3b      	ldr	r3, [pc, #236]	; (8010534 <tcp_process+0x59c>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801044c:	4b3a      	ldr	r3, [pc, #232]	; (8010538 <tcp_process+0x5a0>)
 801044e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010450:	885b      	ldrh	r3, [r3, #2]
 8010452:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010454:	4a38      	ldr	r2, [pc, #224]	; (8010538 <tcp_process+0x5a0>)
 8010456:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010458:	8812      	ldrh	r2, [r2, #0]
 801045a:	b292      	uxth	r2, r2
 801045c:	9202      	str	r2, [sp, #8]
 801045e:	9301      	str	r3, [sp, #4]
 8010460:	4b36      	ldr	r3, [pc, #216]	; (801053c <tcp_process+0x5a4>)
 8010462:	9300      	str	r3, [sp, #0]
 8010464:	4b36      	ldr	r3, [pc, #216]	; (8010540 <tcp_process+0x5a8>)
 8010466:	4602      	mov	r2, r0
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	f003 f829 	bl	80134c0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801046e:	e167      	b.n	8010740 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010470:	4b2d      	ldr	r3, [pc, #180]	; (8010528 <tcp_process+0x590>)
 8010472:	781b      	ldrb	r3, [r3, #0]
 8010474:	f003 0302 	and.w	r3, r3, #2
 8010478:	2b00      	cmp	r3, #0
 801047a:	f000 8161 	beq.w	8010740 <tcp_process+0x7a8>
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010482:	1e5a      	subs	r2, r3, #1
 8010484:	4b2b      	ldr	r3, [pc, #172]	; (8010534 <tcp_process+0x59c>)
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	429a      	cmp	r2, r3
 801048a:	f040 8159 	bne.w	8010740 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801048e:	6878      	ldr	r0, [r7, #4]
 8010490:	f002 fe10 	bl	80130b4 <tcp_rexmit>
      break;
 8010494:	e154      	b.n	8010740 <tcp_process+0x7a8>
 8010496:	e153      	b.n	8010740 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f000 fa71 	bl	8010980 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801049e:	4b2d      	ldr	r3, [pc, #180]	; (8010554 <tcp_process+0x5bc>)
 80104a0:	781b      	ldrb	r3, [r3, #0]
 80104a2:	f003 0320 	and.w	r3, r3, #32
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	f000 814c 	beq.w	8010744 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	8b5b      	ldrh	r3, [r3, #26]
 80104b0:	f043 0302 	orr.w	r3, r3, #2
 80104b4:	b29a      	uxth	r2, r3
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2207      	movs	r2, #7
 80104be:	751a      	strb	r2, [r3, #20]
      }
      break;
 80104c0:	e140      	b.n	8010744 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80104c2:	6878      	ldr	r0, [r7, #4]
 80104c4:	f000 fa5c 	bl	8010980 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80104c8:	4b22      	ldr	r3, [pc, #136]	; (8010554 <tcp_process+0x5bc>)
 80104ca:	781b      	ldrb	r3, [r3, #0]
 80104cc:	f003 0320 	and.w	r3, r3, #32
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d071      	beq.n	80105b8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80104d4:	4b14      	ldr	r3, [pc, #80]	; (8010528 <tcp_process+0x590>)
 80104d6:	781b      	ldrb	r3, [r3, #0]
 80104d8:	f003 0310 	and.w	r3, r3, #16
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d060      	beq.n	80105a2 <tcp_process+0x60a>
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80104e4:	4b11      	ldr	r3, [pc, #68]	; (801052c <tcp_process+0x594>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	429a      	cmp	r2, r3
 80104ea:	d15a      	bne.n	80105a2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d156      	bne.n	80105a2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	8b5b      	ldrh	r3, [r3, #26]
 80104f8:	f043 0302 	orr.w	r3, r3, #2
 80104fc:	b29a      	uxth	r2, r3
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	f7fe fdbc 	bl	800f080 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010508:	4b13      	ldr	r3, [pc, #76]	; (8010558 <tcp_process+0x5c0>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	687a      	ldr	r2, [r7, #4]
 801050e:	429a      	cmp	r2, r3
 8010510:	d105      	bne.n	801051e <tcp_process+0x586>
 8010512:	4b11      	ldr	r3, [pc, #68]	; (8010558 <tcp_process+0x5c0>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	68db      	ldr	r3, [r3, #12]
 8010518:	4a0f      	ldr	r2, [pc, #60]	; (8010558 <tcp_process+0x5c0>)
 801051a:	6013      	str	r3, [r2, #0]
 801051c:	e02e      	b.n	801057c <tcp_process+0x5e4>
 801051e:	4b0e      	ldr	r3, [pc, #56]	; (8010558 <tcp_process+0x5c0>)
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	617b      	str	r3, [r7, #20]
 8010524:	e027      	b.n	8010576 <tcp_process+0x5de>
 8010526:	bf00      	nop
 8010528:	20010fb4 	.word	0x20010fb4
 801052c:	20010fac 	.word	0x20010fac
 8010530:	20010fb2 	.word	0x20010fb2
 8010534:	20010fa8 	.word	0x20010fa8
 8010538:	20010f98 	.word	0x20010f98
 801053c:	2000d80c 	.word	0x2000d80c
 8010540:	2000d810 	.word	0x2000d810
 8010544:	0801c274 	.word	0x0801c274
 8010548:	0801c514 	.word	0x0801c514
 801054c:	0801c2c0 	.word	0x0801c2c0
 8010550:	20010fb0 	.word	0x20010fb0
 8010554:	20010fb5 	.word	0x20010fb5
 8010558:	20010f7c 	.word	0x20010f7c
 801055c:	697b      	ldr	r3, [r7, #20]
 801055e:	68db      	ldr	r3, [r3, #12]
 8010560:	687a      	ldr	r2, [r7, #4]
 8010562:	429a      	cmp	r2, r3
 8010564:	d104      	bne.n	8010570 <tcp_process+0x5d8>
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	68da      	ldr	r2, [r3, #12]
 801056a:	697b      	ldr	r3, [r7, #20]
 801056c:	60da      	str	r2, [r3, #12]
 801056e:	e005      	b.n	801057c <tcp_process+0x5e4>
 8010570:	697b      	ldr	r3, [r7, #20]
 8010572:	68db      	ldr	r3, [r3, #12]
 8010574:	617b      	str	r3, [r7, #20]
 8010576:	697b      	ldr	r3, [r7, #20]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d1ef      	bne.n	801055c <tcp_process+0x5c4>
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	2200      	movs	r2, #0
 8010580:	60da      	str	r2, [r3, #12]
 8010582:	4b77      	ldr	r3, [pc, #476]	; (8010760 <tcp_process+0x7c8>)
 8010584:	2201      	movs	r2, #1
 8010586:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	220a      	movs	r2, #10
 801058c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801058e:	4b75      	ldr	r3, [pc, #468]	; (8010764 <tcp_process+0x7cc>)
 8010590:	681a      	ldr	r2, [r3, #0]
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	60da      	str	r2, [r3, #12]
 8010596:	4a73      	ldr	r2, [pc, #460]	; (8010764 <tcp_process+0x7cc>)
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	6013      	str	r3, [r2, #0]
 801059c:	f003 f952 	bl	8013844 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80105a0:	e0d2      	b.n	8010748 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	8b5b      	ldrh	r3, [r3, #26]
 80105a6:	f043 0302 	orr.w	r3, r3, #2
 80105aa:	b29a      	uxth	r2, r3
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2208      	movs	r2, #8
 80105b4:	751a      	strb	r2, [r3, #20]
      break;
 80105b6:	e0c7      	b.n	8010748 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80105b8:	4b6b      	ldr	r3, [pc, #428]	; (8010768 <tcp_process+0x7d0>)
 80105ba:	781b      	ldrb	r3, [r3, #0]
 80105bc:	f003 0310 	and.w	r3, r3, #16
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	f000 80c1 	beq.w	8010748 <tcp_process+0x7b0>
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80105ca:	4b68      	ldr	r3, [pc, #416]	; (801076c <tcp_process+0x7d4>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	429a      	cmp	r2, r3
 80105d0:	f040 80ba 	bne.w	8010748 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80105d8:	2b00      	cmp	r3, #0
 80105da:	f040 80b5 	bne.w	8010748 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2206      	movs	r2, #6
 80105e2:	751a      	strb	r2, [r3, #20]
      break;
 80105e4:	e0b0      	b.n	8010748 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80105e6:	6878      	ldr	r0, [r7, #4]
 80105e8:	f000 f9ca 	bl	8010980 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80105ec:	4b60      	ldr	r3, [pc, #384]	; (8010770 <tcp_process+0x7d8>)
 80105ee:	781b      	ldrb	r3, [r3, #0]
 80105f0:	f003 0320 	and.w	r3, r3, #32
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	f000 80a9 	beq.w	801074c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	8b5b      	ldrh	r3, [r3, #26]
 80105fe:	f043 0302 	orr.w	r3, r3, #2
 8010602:	b29a      	uxth	r2, r3
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010608:	6878      	ldr	r0, [r7, #4]
 801060a:	f7fe fd39 	bl	800f080 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801060e:	4b59      	ldr	r3, [pc, #356]	; (8010774 <tcp_process+0x7dc>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	687a      	ldr	r2, [r7, #4]
 8010614:	429a      	cmp	r2, r3
 8010616:	d105      	bne.n	8010624 <tcp_process+0x68c>
 8010618:	4b56      	ldr	r3, [pc, #344]	; (8010774 <tcp_process+0x7dc>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	68db      	ldr	r3, [r3, #12]
 801061e:	4a55      	ldr	r2, [pc, #340]	; (8010774 <tcp_process+0x7dc>)
 8010620:	6013      	str	r3, [r2, #0]
 8010622:	e013      	b.n	801064c <tcp_process+0x6b4>
 8010624:	4b53      	ldr	r3, [pc, #332]	; (8010774 <tcp_process+0x7dc>)
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	613b      	str	r3, [r7, #16]
 801062a:	e00c      	b.n	8010646 <tcp_process+0x6ae>
 801062c:	693b      	ldr	r3, [r7, #16]
 801062e:	68db      	ldr	r3, [r3, #12]
 8010630:	687a      	ldr	r2, [r7, #4]
 8010632:	429a      	cmp	r2, r3
 8010634:	d104      	bne.n	8010640 <tcp_process+0x6a8>
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	68da      	ldr	r2, [r3, #12]
 801063a:	693b      	ldr	r3, [r7, #16]
 801063c:	60da      	str	r2, [r3, #12]
 801063e:	e005      	b.n	801064c <tcp_process+0x6b4>
 8010640:	693b      	ldr	r3, [r7, #16]
 8010642:	68db      	ldr	r3, [r3, #12]
 8010644:	613b      	str	r3, [r7, #16]
 8010646:	693b      	ldr	r3, [r7, #16]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d1ef      	bne.n	801062c <tcp_process+0x694>
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	2200      	movs	r2, #0
 8010650:	60da      	str	r2, [r3, #12]
 8010652:	4b43      	ldr	r3, [pc, #268]	; (8010760 <tcp_process+0x7c8>)
 8010654:	2201      	movs	r2, #1
 8010656:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	220a      	movs	r2, #10
 801065c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801065e:	4b41      	ldr	r3, [pc, #260]	; (8010764 <tcp_process+0x7cc>)
 8010660:	681a      	ldr	r2, [r3, #0]
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	60da      	str	r2, [r3, #12]
 8010666:	4a3f      	ldr	r2, [pc, #252]	; (8010764 <tcp_process+0x7cc>)
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	6013      	str	r3, [r2, #0]
 801066c:	f003 f8ea 	bl	8013844 <tcp_timer_needed>
      }
      break;
 8010670:	e06c      	b.n	801074c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010672:	6878      	ldr	r0, [r7, #4]
 8010674:	f000 f984 	bl	8010980 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010678:	4b3b      	ldr	r3, [pc, #236]	; (8010768 <tcp_process+0x7d0>)
 801067a:	781b      	ldrb	r3, [r3, #0]
 801067c:	f003 0310 	and.w	r3, r3, #16
 8010680:	2b00      	cmp	r3, #0
 8010682:	d065      	beq.n	8010750 <tcp_process+0x7b8>
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010688:	4b38      	ldr	r3, [pc, #224]	; (801076c <tcp_process+0x7d4>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	429a      	cmp	r2, r3
 801068e:	d15f      	bne.n	8010750 <tcp_process+0x7b8>
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010694:	2b00      	cmp	r3, #0
 8010696:	d15b      	bne.n	8010750 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010698:	6878      	ldr	r0, [r7, #4]
 801069a:	f7fe fcf1 	bl	800f080 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801069e:	4b35      	ldr	r3, [pc, #212]	; (8010774 <tcp_process+0x7dc>)
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	687a      	ldr	r2, [r7, #4]
 80106a4:	429a      	cmp	r2, r3
 80106a6:	d105      	bne.n	80106b4 <tcp_process+0x71c>
 80106a8:	4b32      	ldr	r3, [pc, #200]	; (8010774 <tcp_process+0x7dc>)
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	68db      	ldr	r3, [r3, #12]
 80106ae:	4a31      	ldr	r2, [pc, #196]	; (8010774 <tcp_process+0x7dc>)
 80106b0:	6013      	str	r3, [r2, #0]
 80106b2:	e013      	b.n	80106dc <tcp_process+0x744>
 80106b4:	4b2f      	ldr	r3, [pc, #188]	; (8010774 <tcp_process+0x7dc>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	60fb      	str	r3, [r7, #12]
 80106ba:	e00c      	b.n	80106d6 <tcp_process+0x73e>
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	68db      	ldr	r3, [r3, #12]
 80106c0:	687a      	ldr	r2, [r7, #4]
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d104      	bne.n	80106d0 <tcp_process+0x738>
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	68da      	ldr	r2, [r3, #12]
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	60da      	str	r2, [r3, #12]
 80106ce:	e005      	b.n	80106dc <tcp_process+0x744>
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	68db      	ldr	r3, [r3, #12]
 80106d4:	60fb      	str	r3, [r7, #12]
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d1ef      	bne.n	80106bc <tcp_process+0x724>
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2200      	movs	r2, #0
 80106e0:	60da      	str	r2, [r3, #12]
 80106e2:	4b1f      	ldr	r3, [pc, #124]	; (8010760 <tcp_process+0x7c8>)
 80106e4:	2201      	movs	r2, #1
 80106e6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	220a      	movs	r2, #10
 80106ec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80106ee:	4b1d      	ldr	r3, [pc, #116]	; (8010764 <tcp_process+0x7cc>)
 80106f0:	681a      	ldr	r2, [r3, #0]
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	60da      	str	r2, [r3, #12]
 80106f6:	4a1b      	ldr	r2, [pc, #108]	; (8010764 <tcp_process+0x7cc>)
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	6013      	str	r3, [r2, #0]
 80106fc:	f003 f8a2 	bl	8013844 <tcp_timer_needed>
      }
      break;
 8010700:	e026      	b.n	8010750 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f000 f93c 	bl	8010980 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010708:	4b17      	ldr	r3, [pc, #92]	; (8010768 <tcp_process+0x7d0>)
 801070a:	781b      	ldrb	r3, [r3, #0]
 801070c:	f003 0310 	and.w	r3, r3, #16
 8010710:	2b00      	cmp	r3, #0
 8010712:	d01f      	beq.n	8010754 <tcp_process+0x7bc>
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010718:	4b14      	ldr	r3, [pc, #80]	; (801076c <tcp_process+0x7d4>)
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	429a      	cmp	r2, r3
 801071e:	d119      	bne.n	8010754 <tcp_process+0x7bc>
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010724:	2b00      	cmp	r3, #0
 8010726:	d115      	bne.n	8010754 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010728:	4b11      	ldr	r3, [pc, #68]	; (8010770 <tcp_process+0x7d8>)
 801072a:	781b      	ldrb	r3, [r3, #0]
 801072c:	f043 0310 	orr.w	r3, r3, #16
 8010730:	b2da      	uxtb	r2, r3
 8010732:	4b0f      	ldr	r3, [pc, #60]	; (8010770 <tcp_process+0x7d8>)
 8010734:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010736:	e00d      	b.n	8010754 <tcp_process+0x7bc>
    default:
      break;
 8010738:	bf00      	nop
 801073a:	e00c      	b.n	8010756 <tcp_process+0x7be>
      break;
 801073c:	bf00      	nop
 801073e:	e00a      	b.n	8010756 <tcp_process+0x7be>
      break;
 8010740:	bf00      	nop
 8010742:	e008      	b.n	8010756 <tcp_process+0x7be>
      break;
 8010744:	bf00      	nop
 8010746:	e006      	b.n	8010756 <tcp_process+0x7be>
      break;
 8010748:	bf00      	nop
 801074a:	e004      	b.n	8010756 <tcp_process+0x7be>
      break;
 801074c:	bf00      	nop
 801074e:	e002      	b.n	8010756 <tcp_process+0x7be>
      break;
 8010750:	bf00      	nop
 8010752:	e000      	b.n	8010756 <tcp_process+0x7be>
      break;
 8010754:	bf00      	nop
  }
  return ERR_OK;
 8010756:	2300      	movs	r3, #0
}
 8010758:	4618      	mov	r0, r3
 801075a:	3724      	adds	r7, #36	; 0x24
 801075c:	46bd      	mov	sp, r7
 801075e:	bd90      	pop	{r4, r7, pc}
 8010760:	20010f84 	.word	0x20010f84
 8010764:	20010f80 	.word	0x20010f80
 8010768:	20010fb4 	.word	0x20010fb4
 801076c:	20010fac 	.word	0x20010fac
 8010770:	20010fb5 	.word	0x20010fb5
 8010774:	20010f7c 	.word	0x20010f7c

08010778 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010778:	b590      	push	{r4, r7, lr}
 801077a:	b085      	sub	sp, #20
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
 8010780:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d106      	bne.n	8010796 <tcp_oos_insert_segment+0x1e>
 8010788:	4b3b      	ldr	r3, [pc, #236]	; (8010878 <tcp_oos_insert_segment+0x100>)
 801078a:	f240 421f 	movw	r2, #1055	; 0x41f
 801078e:	493b      	ldr	r1, [pc, #236]	; (801087c <tcp_oos_insert_segment+0x104>)
 8010790:	483b      	ldr	r0, [pc, #236]	; (8010880 <tcp_oos_insert_segment+0x108>)
 8010792:	f008 fb11 	bl	8018db8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	68db      	ldr	r3, [r3, #12]
 801079a:	899b      	ldrh	r3, [r3, #12]
 801079c:	b29b      	uxth	r3, r3
 801079e:	4618      	mov	r0, r3
 80107a0:	f7fa ffa4 	bl	800b6ec <lwip_htons>
 80107a4:	4603      	mov	r3, r0
 80107a6:	b2db      	uxtb	r3, r3
 80107a8:	f003 0301 	and.w	r3, r3, #1
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d028      	beq.n	8010802 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80107b0:	6838      	ldr	r0, [r7, #0]
 80107b2:	f7fe f977 	bl	800eaa4 <tcp_segs_free>
    next = NULL;
 80107b6:	2300      	movs	r3, #0
 80107b8:	603b      	str	r3, [r7, #0]
 80107ba:	e056      	b.n	801086a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	68db      	ldr	r3, [r3, #12]
 80107c0:	899b      	ldrh	r3, [r3, #12]
 80107c2:	b29b      	uxth	r3, r3
 80107c4:	4618      	mov	r0, r3
 80107c6:	f7fa ff91 	bl	800b6ec <lwip_htons>
 80107ca:	4603      	mov	r3, r0
 80107cc:	b2db      	uxtb	r3, r3
 80107ce:	f003 0301 	and.w	r3, r3, #1
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d00d      	beq.n	80107f2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	68db      	ldr	r3, [r3, #12]
 80107da:	899b      	ldrh	r3, [r3, #12]
 80107dc:	b29c      	uxth	r4, r3
 80107de:	2001      	movs	r0, #1
 80107e0:	f7fa ff84 	bl	800b6ec <lwip_htons>
 80107e4:	4603      	mov	r3, r0
 80107e6:	461a      	mov	r2, r3
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	68db      	ldr	r3, [r3, #12]
 80107ec:	4322      	orrs	r2, r4
 80107ee:	b292      	uxth	r2, r2
 80107f0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80107fc:	68f8      	ldr	r0, [r7, #12]
 80107fe:	f7fe f966 	bl	800eace <tcp_seg_free>
    while (next &&
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d00e      	beq.n	8010826 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	891b      	ldrh	r3, [r3, #8]
 801080c:	461a      	mov	r2, r3
 801080e:	4b1d      	ldr	r3, [pc, #116]	; (8010884 <tcp_oos_insert_segment+0x10c>)
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	441a      	add	r2, r3
 8010814:	683b      	ldr	r3, [r7, #0]
 8010816:	68db      	ldr	r3, [r3, #12]
 8010818:	685b      	ldr	r3, [r3, #4]
 801081a:	6839      	ldr	r1, [r7, #0]
 801081c:	8909      	ldrh	r1, [r1, #8]
 801081e:	440b      	add	r3, r1
 8010820:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010822:	2b00      	cmp	r3, #0
 8010824:	daca      	bge.n	80107bc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d01e      	beq.n	801086a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	891b      	ldrh	r3, [r3, #8]
 8010830:	461a      	mov	r2, r3
 8010832:	4b14      	ldr	r3, [pc, #80]	; (8010884 <tcp_oos_insert_segment+0x10c>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	441a      	add	r2, r3
 8010838:	683b      	ldr	r3, [r7, #0]
 801083a:	68db      	ldr	r3, [r3, #12]
 801083c:	685b      	ldr	r3, [r3, #4]
 801083e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010840:	2b00      	cmp	r3, #0
 8010842:	dd12      	ble.n	801086a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	68db      	ldr	r3, [r3, #12]
 8010848:	685b      	ldr	r3, [r3, #4]
 801084a:	b29a      	uxth	r2, r3
 801084c:	4b0d      	ldr	r3, [pc, #52]	; (8010884 <tcp_oos_insert_segment+0x10c>)
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	b29b      	uxth	r3, r3
 8010852:	1ad3      	subs	r3, r2, r3
 8010854:	b29a      	uxth	r2, r3
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	685a      	ldr	r2, [r3, #4]
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	891b      	ldrh	r3, [r3, #8]
 8010862:	4619      	mov	r1, r3
 8010864:	4610      	mov	r0, r2
 8010866:	f7fc f9ef 	bl	800cc48 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	683a      	ldr	r2, [r7, #0]
 801086e:	601a      	str	r2, [r3, #0]
}
 8010870:	bf00      	nop
 8010872:	3714      	adds	r7, #20
 8010874:	46bd      	mov	sp, r7
 8010876:	bd90      	pop	{r4, r7, pc}
 8010878:	0801c274 	.word	0x0801c274
 801087c:	0801c534 	.word	0x0801c534
 8010880:	0801c2c0 	.word	0x0801c2c0
 8010884:	20010fa8 	.word	0x20010fa8

08010888 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010888:	b5b0      	push	{r4, r5, r7, lr}
 801088a:	b086      	sub	sp, #24
 801088c:	af00      	add	r7, sp, #0
 801088e:	60f8      	str	r0, [r7, #12]
 8010890:	60b9      	str	r1, [r7, #8]
 8010892:	607a      	str	r2, [r7, #4]
 8010894:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010896:	e03e      	b.n	8010916 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010898:	68bb      	ldr	r3, [r7, #8]
 801089a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801089c:	68bb      	ldr	r3, [r7, #8]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80108a2:	697b      	ldr	r3, [r7, #20]
 80108a4:	685b      	ldr	r3, [r3, #4]
 80108a6:	4618      	mov	r0, r3
 80108a8:	f7fc fbe2 	bl	800d070 <pbuf_clen>
 80108ac:	4603      	mov	r3, r0
 80108ae:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80108b6:	8a7a      	ldrh	r2, [r7, #18]
 80108b8:	429a      	cmp	r2, r3
 80108ba:	d906      	bls.n	80108ca <tcp_free_acked_segments+0x42>
 80108bc:	4b2a      	ldr	r3, [pc, #168]	; (8010968 <tcp_free_acked_segments+0xe0>)
 80108be:	f240 4257 	movw	r2, #1111	; 0x457
 80108c2:	492a      	ldr	r1, [pc, #168]	; (801096c <tcp_free_acked_segments+0xe4>)
 80108c4:	482a      	ldr	r0, [pc, #168]	; (8010970 <tcp_free_acked_segments+0xe8>)
 80108c6:	f008 fa77 	bl	8018db8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80108d0:	8a7b      	ldrh	r3, [r7, #18]
 80108d2:	1ad3      	subs	r3, r2, r3
 80108d4:	b29a      	uxth	r2, r3
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80108dc:	697b      	ldr	r3, [r7, #20]
 80108de:	891a      	ldrh	r2, [r3, #8]
 80108e0:	4b24      	ldr	r3, [pc, #144]	; (8010974 <tcp_free_acked_segments+0xec>)
 80108e2:	881b      	ldrh	r3, [r3, #0]
 80108e4:	4413      	add	r3, r2
 80108e6:	b29a      	uxth	r2, r3
 80108e8:	4b22      	ldr	r3, [pc, #136]	; (8010974 <tcp_free_acked_segments+0xec>)
 80108ea:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80108ec:	6978      	ldr	r0, [r7, #20]
 80108ee:	f7fe f8ee 	bl	800eace <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d00c      	beq.n	8010916 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d109      	bne.n	8010916 <tcp_free_acked_segments+0x8e>
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d106      	bne.n	8010916 <tcp_free_acked_segments+0x8e>
 8010908:	4b17      	ldr	r3, [pc, #92]	; (8010968 <tcp_free_acked_segments+0xe0>)
 801090a:	f240 4261 	movw	r2, #1121	; 0x461
 801090e:	491a      	ldr	r1, [pc, #104]	; (8010978 <tcp_free_acked_segments+0xf0>)
 8010910:	4817      	ldr	r0, [pc, #92]	; (8010970 <tcp_free_acked_segments+0xe8>)
 8010912:	f008 fa51 	bl	8018db8 <iprintf>
  while (seg_list != NULL &&
 8010916:	68bb      	ldr	r3, [r7, #8]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d020      	beq.n	801095e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801091c:	68bb      	ldr	r3, [r7, #8]
 801091e:	68db      	ldr	r3, [r3, #12]
 8010920:	685b      	ldr	r3, [r3, #4]
 8010922:	4618      	mov	r0, r3
 8010924:	f7fa fef7 	bl	800b716 <lwip_htonl>
 8010928:	4604      	mov	r4, r0
 801092a:	68bb      	ldr	r3, [r7, #8]
 801092c:	891b      	ldrh	r3, [r3, #8]
 801092e:	461d      	mov	r5, r3
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	68db      	ldr	r3, [r3, #12]
 8010934:	899b      	ldrh	r3, [r3, #12]
 8010936:	b29b      	uxth	r3, r3
 8010938:	4618      	mov	r0, r3
 801093a:	f7fa fed7 	bl	800b6ec <lwip_htons>
 801093e:	4603      	mov	r3, r0
 8010940:	b2db      	uxtb	r3, r3
 8010942:	f003 0303 	and.w	r3, r3, #3
 8010946:	2b00      	cmp	r3, #0
 8010948:	d001      	beq.n	801094e <tcp_free_acked_segments+0xc6>
 801094a:	2301      	movs	r3, #1
 801094c:	e000      	b.n	8010950 <tcp_free_acked_segments+0xc8>
 801094e:	2300      	movs	r3, #0
 8010950:	442b      	add	r3, r5
 8010952:	18e2      	adds	r2, r4, r3
 8010954:	4b09      	ldr	r3, [pc, #36]	; (801097c <tcp_free_acked_segments+0xf4>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801095a:	2b00      	cmp	r3, #0
 801095c:	dd9c      	ble.n	8010898 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801095e:	68bb      	ldr	r3, [r7, #8]
}
 8010960:	4618      	mov	r0, r3
 8010962:	3718      	adds	r7, #24
 8010964:	46bd      	mov	sp, r7
 8010966:	bdb0      	pop	{r4, r5, r7, pc}
 8010968:	0801c274 	.word	0x0801c274
 801096c:	0801c55c 	.word	0x0801c55c
 8010970:	0801c2c0 	.word	0x0801c2c0
 8010974:	20010fb0 	.word	0x20010fb0
 8010978:	0801c584 	.word	0x0801c584
 801097c:	20010fac 	.word	0x20010fac

08010980 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010980:	b5b0      	push	{r4, r5, r7, lr}
 8010982:	b094      	sub	sp, #80	; 0x50
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010988:	2300      	movs	r3, #0
 801098a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d106      	bne.n	80109a0 <tcp_receive+0x20>
 8010992:	4b91      	ldr	r3, [pc, #580]	; (8010bd8 <tcp_receive+0x258>)
 8010994:	f240 427b 	movw	r2, #1147	; 0x47b
 8010998:	4990      	ldr	r1, [pc, #576]	; (8010bdc <tcp_receive+0x25c>)
 801099a:	4891      	ldr	r0, [pc, #580]	; (8010be0 <tcp_receive+0x260>)
 801099c:	f008 fa0c 	bl	8018db8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	7d1b      	ldrb	r3, [r3, #20]
 80109a4:	2b03      	cmp	r3, #3
 80109a6:	d806      	bhi.n	80109b6 <tcp_receive+0x36>
 80109a8:	4b8b      	ldr	r3, [pc, #556]	; (8010bd8 <tcp_receive+0x258>)
 80109aa:	f240 427c 	movw	r2, #1148	; 0x47c
 80109ae:	498d      	ldr	r1, [pc, #564]	; (8010be4 <tcp_receive+0x264>)
 80109b0:	488b      	ldr	r0, [pc, #556]	; (8010be0 <tcp_receive+0x260>)
 80109b2:	f008 fa01 	bl	8018db8 <iprintf>

  if (flags & TCP_ACK) {
 80109b6:	4b8c      	ldr	r3, [pc, #560]	; (8010be8 <tcp_receive+0x268>)
 80109b8:	781b      	ldrb	r3, [r3, #0]
 80109ba:	f003 0310 	and.w	r3, r3, #16
 80109be:	2b00      	cmp	r3, #0
 80109c0:	f000 8264 	beq.w	8010e8c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80109ca:	461a      	mov	r2, r3
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80109d0:	4413      	add	r3, r2
 80109d2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80109d8:	4b84      	ldr	r3, [pc, #528]	; (8010bec <tcp_receive+0x26c>)
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	1ad3      	subs	r3, r2, r3
 80109de:	2b00      	cmp	r3, #0
 80109e0:	db1b      	blt.n	8010a1a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80109e6:	4b81      	ldr	r3, [pc, #516]	; (8010bec <tcp_receive+0x26c>)
 80109e8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80109ea:	429a      	cmp	r2, r3
 80109ec:	d106      	bne.n	80109fc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80109f2:	4b7f      	ldr	r3, [pc, #508]	; (8010bf0 <tcp_receive+0x270>)
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	1ad3      	subs	r3, r2, r3
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	db0e      	blt.n	8010a1a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010a00:	4b7b      	ldr	r3, [pc, #492]	; (8010bf0 <tcp_receive+0x270>)
 8010a02:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010a04:	429a      	cmp	r2, r3
 8010a06:	d125      	bne.n	8010a54 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010a08:	4b7a      	ldr	r3, [pc, #488]	; (8010bf4 <tcp_receive+0x274>)
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	89db      	ldrh	r3, [r3, #14]
 8010a0e:	b29a      	uxth	r2, r3
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010a16:	429a      	cmp	r2, r3
 8010a18:	d91c      	bls.n	8010a54 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010a1a:	4b76      	ldr	r3, [pc, #472]	; (8010bf4 <tcp_receive+0x274>)
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	89db      	ldrh	r3, [r3, #14]
 8010a20:	b29a      	uxth	r2, r3
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010a34:	429a      	cmp	r2, r3
 8010a36:	d205      	bcs.n	8010a44 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010a44:	4b69      	ldr	r3, [pc, #420]	; (8010bec <tcp_receive+0x26c>)
 8010a46:	681a      	ldr	r2, [r3, #0]
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010a4c:	4b68      	ldr	r3, [pc, #416]	; (8010bf0 <tcp_receive+0x270>)
 8010a4e:	681a      	ldr	r2, [r3, #0]
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010a54:	4b66      	ldr	r3, [pc, #408]	; (8010bf0 <tcp_receive+0x270>)
 8010a56:	681a      	ldr	r2, [r3, #0]
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a5c:	1ad3      	subs	r3, r2, r3
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	dc58      	bgt.n	8010b14 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010a62:	4b65      	ldr	r3, [pc, #404]	; (8010bf8 <tcp_receive+0x278>)
 8010a64:	881b      	ldrh	r3, [r3, #0]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d14b      	bne.n	8010b02 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a6e:	687a      	ldr	r2, [r7, #4]
 8010a70:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010a74:	4413      	add	r3, r2
 8010a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a78:	429a      	cmp	r2, r3
 8010a7a:	d142      	bne.n	8010b02 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	db3d      	blt.n	8010b02 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a8a:	4b59      	ldr	r3, [pc, #356]	; (8010bf0 <tcp_receive+0x270>)
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	429a      	cmp	r2, r3
 8010a90:	d137      	bne.n	8010b02 <tcp_receive+0x182>
              found_dupack = 1;
 8010a92:	2301      	movs	r3, #1
 8010a94:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010a9c:	2bff      	cmp	r3, #255	; 0xff
 8010a9e:	d007      	beq.n	8010ab0 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010aa6:	3301      	adds	r3, #1
 8010aa8:	b2da      	uxtb	r2, r3
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010ab6:	2b03      	cmp	r3, #3
 8010ab8:	d91b      	bls.n	8010af2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ac4:	4413      	add	r3, r2
 8010ac6:	b29a      	uxth	r2, r3
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010ace:	429a      	cmp	r2, r3
 8010ad0:	d30a      	bcc.n	8010ae8 <tcp_receive+0x168>
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010adc:	4413      	add	r3, r2
 8010ade:	b29a      	uxth	r2, r3
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010ae6:	e004      	b.n	8010af2 <tcp_receive+0x172>
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010aee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010af8:	2b02      	cmp	r3, #2
 8010afa:	d902      	bls.n	8010b02 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010afc:	6878      	ldr	r0, [r7, #4]
 8010afe:	f002 fb45 	bl	801318c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	f040 8161 	bne.w	8010dcc <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010b12:	e15b      	b.n	8010dcc <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010b14:	4b36      	ldr	r3, [pc, #216]	; (8010bf0 <tcp_receive+0x270>)
 8010b16:	681a      	ldr	r2, [r3, #0]
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b1c:	1ad3      	subs	r3, r2, r3
 8010b1e:	3b01      	subs	r3, #1
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	f2c0 814e 	blt.w	8010dc2 <tcp_receive+0x442>
 8010b26:	4b32      	ldr	r3, [pc, #200]	; (8010bf0 <tcp_receive+0x270>)
 8010b28:	681a      	ldr	r2, [r3, #0]
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b2e:	1ad3      	subs	r3, r2, r3
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	f300 8146 	bgt.w	8010dc2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	8b5b      	ldrh	r3, [r3, #26]
 8010b3a:	f003 0304 	and.w	r3, r3, #4
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d010      	beq.n	8010b64 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	8b5b      	ldrh	r3, [r3, #26]
 8010b46:	f023 0304 	bic.w	r3, r3, #4
 8010b4a:	b29a      	uxth	r2, r3
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	2200      	movs	r2, #0
 8010b60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	2200      	movs	r2, #0
 8010b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010b72:	10db      	asrs	r3, r3, #3
 8010b74:	b21b      	sxth	r3, r3
 8010b76:	b29a      	uxth	r2, r3
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010b7e:	b29b      	uxth	r3, r3
 8010b80:	4413      	add	r3, r2
 8010b82:	b29b      	uxth	r3, r3
 8010b84:	b21a      	sxth	r2, r3
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010b8c:	4b18      	ldr	r3, [pc, #96]	; (8010bf0 <tcp_receive+0x270>)
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	b29a      	uxth	r2, r3
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b96:	b29b      	uxth	r3, r3
 8010b98:	1ad3      	subs	r3, r2, r3
 8010b9a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010ba4:	4b12      	ldr	r3, [pc, #72]	; (8010bf0 <tcp_receive+0x270>)
 8010ba6:	681a      	ldr	r2, [r3, #0]
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	7d1b      	ldrb	r3, [r3, #20]
 8010bb0:	2b03      	cmp	r3, #3
 8010bb2:	f240 8097 	bls.w	8010ce4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010bc2:	429a      	cmp	r2, r3
 8010bc4:	d245      	bcs.n	8010c52 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	8b5b      	ldrh	r3, [r3, #26]
 8010bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d014      	beq.n	8010bfc <tcp_receive+0x27c>
 8010bd2:	2301      	movs	r3, #1
 8010bd4:	e013      	b.n	8010bfe <tcp_receive+0x27e>
 8010bd6:	bf00      	nop
 8010bd8:	0801c274 	.word	0x0801c274
 8010bdc:	0801c5a4 	.word	0x0801c5a4
 8010be0:	0801c2c0 	.word	0x0801c2c0
 8010be4:	0801c5c0 	.word	0x0801c5c0
 8010be8:	20010fb4 	.word	0x20010fb4
 8010bec:	20010fa8 	.word	0x20010fa8
 8010bf0:	20010fac 	.word	0x20010fac
 8010bf4:	20010f98 	.word	0x20010f98
 8010bf8:	20010fb2 	.word	0x20010fb2
 8010bfc:	2302      	movs	r3, #2
 8010bfe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010c02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010c06:	b29a      	uxth	r2, r3
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c0c:	fb12 f303 	smulbb	r3, r2, r3
 8010c10:	b29b      	uxth	r3, r3
 8010c12:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010c14:	4293      	cmp	r3, r2
 8010c16:	bf28      	it	cs
 8010c18:	4613      	movcs	r3, r2
 8010c1a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010c24:	4413      	add	r3, r2
 8010c26:	b29a      	uxth	r2, r3
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010c2e:	429a      	cmp	r2, r3
 8010c30:	d309      	bcc.n	8010c46 <tcp_receive+0x2c6>
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010c3a:	4413      	add	r3, r2
 8010c3c:	b29a      	uxth	r2, r3
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010c44:	e04e      	b.n	8010ce4 <tcp_receive+0x364>
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c4c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010c50:	e048      	b.n	8010ce4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010c58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010c5a:	4413      	add	r3, r2
 8010c5c:	b29a      	uxth	r2, r3
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010c64:	429a      	cmp	r2, r3
 8010c66:	d309      	bcc.n	8010c7c <tcp_receive+0x2fc>
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010c6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010c70:	4413      	add	r3, r2
 8010c72:	b29a      	uxth	r2, r3
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010c7a:	e004      	b.n	8010c86 <tcp_receive+0x306>
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010c92:	429a      	cmp	r2, r3
 8010c94:	d326      	bcc.n	8010ce4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010ca2:	1ad3      	subs	r3, r2, r3
 8010ca4:	b29a      	uxth	r2, r3
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cb6:	4413      	add	r3, r2
 8010cb8:	b29a      	uxth	r2, r3
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010cc0:	429a      	cmp	r2, r3
 8010cc2:	d30a      	bcc.n	8010cda <tcp_receive+0x35a>
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cce:	4413      	add	r3, r2
 8010cd0:	b29a      	uxth	r2, r3
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010cd8:	e004      	b.n	8010ce4 <tcp_receive+0x364>
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010ce0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cec:	4a98      	ldr	r2, [pc, #608]	; (8010f50 <tcp_receive+0x5d0>)
 8010cee:	6878      	ldr	r0, [r7, #4]
 8010cf0:	f7ff fdca 	bl	8010888 <tcp_free_acked_segments>
 8010cf4:	4602      	mov	r2, r0
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d02:	4a94      	ldr	r2, [pc, #592]	; (8010f54 <tcp_receive+0x5d4>)
 8010d04:	6878      	ldr	r0, [r7, #4]
 8010d06:	f7ff fdbf 	bl	8010888 <tcp_free_acked_segments>
 8010d0a:	4602      	mov	r2, r0
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d104      	bne.n	8010d22 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d1e:	861a      	strh	r2, [r3, #48]	; 0x30
 8010d20:	e002      	b.n	8010d28 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	2200      	movs	r2, #0
 8010d26:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d103      	bne.n	8010d3e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	2200      	movs	r2, #0
 8010d3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010d44:	4b84      	ldr	r3, [pc, #528]	; (8010f58 <tcp_receive+0x5d8>)
 8010d46:	881b      	ldrh	r3, [r3, #0]
 8010d48:	4413      	add	r3, r2
 8010d4a:	b29a      	uxth	r2, r3
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	8b5b      	ldrh	r3, [r3, #26]
 8010d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d035      	beq.n	8010dca <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d118      	bne.n	8010d98 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d00c      	beq.n	8010d88 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d76:	68db      	ldr	r3, [r3, #12]
 8010d78:	685b      	ldr	r3, [r3, #4]
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f7fa fccb 	bl	800b716 <lwip_htonl>
 8010d80:	4603      	mov	r3, r0
 8010d82:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	dc20      	bgt.n	8010dca <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	8b5b      	ldrh	r3, [r3, #26]
 8010d8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010d90:	b29a      	uxth	r2, r3
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010d96:	e018      	b.n	8010dca <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010da0:	68db      	ldr	r3, [r3, #12]
 8010da2:	685b      	ldr	r3, [r3, #4]
 8010da4:	4618      	mov	r0, r3
 8010da6:	f7fa fcb6 	bl	800b716 <lwip_htonl>
 8010daa:	4603      	mov	r3, r0
 8010dac:	1ae3      	subs	r3, r4, r3
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	dc0b      	bgt.n	8010dca <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	8b5b      	ldrh	r3, [r3, #26]
 8010db6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010dba:	b29a      	uxth	r2, r3
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010dc0:	e003      	b.n	8010dca <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010dc2:	6878      	ldr	r0, [r7, #4]
 8010dc4:	f002 fbce 	bl	8013564 <tcp_send_empty_ack>
 8010dc8:	e000      	b.n	8010dcc <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010dca:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d05b      	beq.n	8010e8c <tcp_receive+0x50c>
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010dd8:	4b60      	ldr	r3, [pc, #384]	; (8010f5c <tcp_receive+0x5dc>)
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	1ad3      	subs	r3, r2, r3
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	da54      	bge.n	8010e8c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010de2:	4b5f      	ldr	r3, [pc, #380]	; (8010f60 <tcp_receive+0x5e0>)
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	b29a      	uxth	r2, r3
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dec:	b29b      	uxth	r3, r3
 8010dee:	1ad3      	subs	r3, r2, r3
 8010df0:	b29b      	uxth	r3, r3
 8010df2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010df6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010e00:	10db      	asrs	r3, r3, #3
 8010e02:	b21b      	sxth	r3, r3
 8010e04:	b29b      	uxth	r3, r3
 8010e06:	1ad3      	subs	r3, r2, r3
 8010e08:	b29b      	uxth	r3, r3
 8010e0a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010e14:	b29a      	uxth	r2, r3
 8010e16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010e1a:	4413      	add	r3, r2
 8010e1c:	b29b      	uxth	r3, r3
 8010e1e:	b21a      	sxth	r2, r3
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010e24:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	da05      	bge.n	8010e38 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010e2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010e30:	425b      	negs	r3, r3
 8010e32:	b29b      	uxth	r3, r3
 8010e34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010e38:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010e42:	109b      	asrs	r3, r3, #2
 8010e44:	b21b      	sxth	r3, r3
 8010e46:	b29b      	uxth	r3, r3
 8010e48:	1ad3      	subs	r3, r2, r3
 8010e4a:	b29b      	uxth	r3, r3
 8010e4c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010e56:	b29a      	uxth	r2, r3
 8010e58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010e5c:	4413      	add	r3, r2
 8010e5e:	b29b      	uxth	r3, r3
 8010e60:	b21a      	sxth	r2, r3
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010e6c:	10db      	asrs	r3, r3, #3
 8010e6e:	b21b      	sxth	r3, r3
 8010e70:	b29a      	uxth	r2, r3
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010e78:	b29b      	uxth	r3, r3
 8010e7a:	4413      	add	r3, r2
 8010e7c:	b29b      	uxth	r3, r3
 8010e7e:	b21a      	sxth	r2, r3
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	2200      	movs	r2, #0
 8010e8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010e8c:	4b35      	ldr	r3, [pc, #212]	; (8010f64 <tcp_receive+0x5e4>)
 8010e8e:	881b      	ldrh	r3, [r3, #0]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	f000 84e2 	beq.w	801185a <tcp_receive+0xeda>
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	7d1b      	ldrb	r3, [r3, #20]
 8010e9a:	2b06      	cmp	r3, #6
 8010e9c:	f200 84dd 	bhi.w	801185a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ea4:	4b30      	ldr	r3, [pc, #192]	; (8010f68 <tcp_receive+0x5e8>)
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	1ad3      	subs	r3, r2, r3
 8010eaa:	3b01      	subs	r3, #1
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	f2c0 808f 	blt.w	8010fd0 <tcp_receive+0x650>
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010eb6:	4b2b      	ldr	r3, [pc, #172]	; (8010f64 <tcp_receive+0x5e4>)
 8010eb8:	881b      	ldrh	r3, [r3, #0]
 8010eba:	4619      	mov	r1, r3
 8010ebc:	4b2a      	ldr	r3, [pc, #168]	; (8010f68 <tcp_receive+0x5e8>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	440b      	add	r3, r1
 8010ec2:	1ad3      	subs	r3, r2, r3
 8010ec4:	3301      	adds	r3, #1
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	f300 8082 	bgt.w	8010fd0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010ecc:	4b27      	ldr	r3, [pc, #156]	; (8010f6c <tcp_receive+0x5ec>)
 8010ece:	685b      	ldr	r3, [r3, #4]
 8010ed0:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ed6:	4b24      	ldr	r3, [pc, #144]	; (8010f68 <tcp_receive+0x5e8>)
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	1ad3      	subs	r3, r2, r3
 8010edc:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010ede:	4b23      	ldr	r3, [pc, #140]	; (8010f6c <tcp_receive+0x5ec>)
 8010ee0:	685b      	ldr	r3, [r3, #4]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d106      	bne.n	8010ef4 <tcp_receive+0x574>
 8010ee6:	4b22      	ldr	r3, [pc, #136]	; (8010f70 <tcp_receive+0x5f0>)
 8010ee8:	f240 5294 	movw	r2, #1428	; 0x594
 8010eec:	4921      	ldr	r1, [pc, #132]	; (8010f74 <tcp_receive+0x5f4>)
 8010eee:	4822      	ldr	r0, [pc, #136]	; (8010f78 <tcp_receive+0x5f8>)
 8010ef0:	f007 ff62 	bl	8018db8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ef6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010efa:	4293      	cmp	r3, r2
 8010efc:	d906      	bls.n	8010f0c <tcp_receive+0x58c>
 8010efe:	4b1c      	ldr	r3, [pc, #112]	; (8010f70 <tcp_receive+0x5f0>)
 8010f00:	f240 5295 	movw	r2, #1429	; 0x595
 8010f04:	491d      	ldr	r1, [pc, #116]	; (8010f7c <tcp_receive+0x5fc>)
 8010f06:	481c      	ldr	r0, [pc, #112]	; (8010f78 <tcp_receive+0x5f8>)
 8010f08:	f007 ff56 	bl	8018db8 <iprintf>
      off = (u16_t)off32;
 8010f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f0e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010f12:	4b16      	ldr	r3, [pc, #88]	; (8010f6c <tcp_receive+0x5ec>)
 8010f14:	685b      	ldr	r3, [r3, #4]
 8010f16:	891b      	ldrh	r3, [r3, #8]
 8010f18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	d906      	bls.n	8010f2e <tcp_receive+0x5ae>
 8010f20:	4b13      	ldr	r3, [pc, #76]	; (8010f70 <tcp_receive+0x5f0>)
 8010f22:	f240 5297 	movw	r2, #1431	; 0x597
 8010f26:	4916      	ldr	r1, [pc, #88]	; (8010f80 <tcp_receive+0x600>)
 8010f28:	4813      	ldr	r0, [pc, #76]	; (8010f78 <tcp_receive+0x5f8>)
 8010f2a:	f007 ff45 	bl	8018db8 <iprintf>
      inseg.len -= off;
 8010f2e:	4b0f      	ldr	r3, [pc, #60]	; (8010f6c <tcp_receive+0x5ec>)
 8010f30:	891a      	ldrh	r2, [r3, #8]
 8010f32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f36:	1ad3      	subs	r3, r2, r3
 8010f38:	b29a      	uxth	r2, r3
 8010f3a:	4b0c      	ldr	r3, [pc, #48]	; (8010f6c <tcp_receive+0x5ec>)
 8010f3c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010f3e:	4b0b      	ldr	r3, [pc, #44]	; (8010f6c <tcp_receive+0x5ec>)
 8010f40:	685b      	ldr	r3, [r3, #4]
 8010f42:	891a      	ldrh	r2, [r3, #8]
 8010f44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f48:	1ad3      	subs	r3, r2, r3
 8010f4a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010f4c:	e02a      	b.n	8010fa4 <tcp_receive+0x624>
 8010f4e:	bf00      	nop
 8010f50:	0801c5dc 	.word	0x0801c5dc
 8010f54:	0801c5e4 	.word	0x0801c5e4
 8010f58:	20010fb0 	.word	0x20010fb0
 8010f5c:	20010fac 	.word	0x20010fac
 8010f60:	20010f70 	.word	0x20010f70
 8010f64:	20010fb2 	.word	0x20010fb2
 8010f68:	20010fa8 	.word	0x20010fa8
 8010f6c:	20010f88 	.word	0x20010f88
 8010f70:	0801c274 	.word	0x0801c274
 8010f74:	0801c5ec 	.word	0x0801c5ec
 8010f78:	0801c2c0 	.word	0x0801c2c0
 8010f7c:	0801c5fc 	.word	0x0801c5fc
 8010f80:	0801c60c 	.word	0x0801c60c
        off -= p->len;
 8010f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f86:	895b      	ldrh	r3, [r3, #10]
 8010f88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010f8c:	1ad3      	subs	r3, r2, r3
 8010f8e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010f92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f94:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010f96:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fa6:	895b      	ldrh	r3, [r3, #10]
 8010fa8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010fac:	429a      	cmp	r2, r3
 8010fae:	d8e9      	bhi.n	8010f84 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010fb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010fb4:	4619      	mov	r1, r3
 8010fb6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010fb8:	f7fb ff46 	bl	800ce48 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fc0:	4a91      	ldr	r2, [pc, #580]	; (8011208 <tcp_receive+0x888>)
 8010fc2:	6013      	str	r3, [r2, #0]
 8010fc4:	4b91      	ldr	r3, [pc, #580]	; (801120c <tcp_receive+0x88c>)
 8010fc6:	68db      	ldr	r3, [r3, #12]
 8010fc8:	4a8f      	ldr	r2, [pc, #572]	; (8011208 <tcp_receive+0x888>)
 8010fca:	6812      	ldr	r2, [r2, #0]
 8010fcc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010fce:	e00d      	b.n	8010fec <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010fd0:	4b8d      	ldr	r3, [pc, #564]	; (8011208 <tcp_receive+0x888>)
 8010fd2:	681a      	ldr	r2, [r3, #0]
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fd8:	1ad3      	subs	r3, r2, r3
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	da06      	bge.n	8010fec <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	8b5b      	ldrh	r3, [r3, #26]
 8010fe2:	f043 0302 	orr.w	r3, r3, #2
 8010fe6:	b29a      	uxth	r2, r3
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010fec:	4b86      	ldr	r3, [pc, #536]	; (8011208 <tcp_receive+0x888>)
 8010fee:	681a      	ldr	r2, [r3, #0]
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ff4:	1ad3      	subs	r3, r2, r3
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	f2c0 842a 	blt.w	8011850 <tcp_receive+0xed0>
 8010ffc:	4b82      	ldr	r3, [pc, #520]	; (8011208 <tcp_receive+0x888>)
 8010ffe:	681a      	ldr	r2, [r3, #0]
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011004:	6879      	ldr	r1, [r7, #4]
 8011006:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011008:	440b      	add	r3, r1
 801100a:	1ad3      	subs	r3, r2, r3
 801100c:	3301      	adds	r3, #1
 801100e:	2b00      	cmp	r3, #0
 8011010:	f300 841e 	bgt.w	8011850 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011018:	4b7b      	ldr	r3, [pc, #492]	; (8011208 <tcp_receive+0x888>)
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	429a      	cmp	r2, r3
 801101e:	f040 829a 	bne.w	8011556 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011022:	4b7a      	ldr	r3, [pc, #488]	; (801120c <tcp_receive+0x88c>)
 8011024:	891c      	ldrh	r4, [r3, #8]
 8011026:	4b79      	ldr	r3, [pc, #484]	; (801120c <tcp_receive+0x88c>)
 8011028:	68db      	ldr	r3, [r3, #12]
 801102a:	899b      	ldrh	r3, [r3, #12]
 801102c:	b29b      	uxth	r3, r3
 801102e:	4618      	mov	r0, r3
 8011030:	f7fa fb5c 	bl	800b6ec <lwip_htons>
 8011034:	4603      	mov	r3, r0
 8011036:	b2db      	uxtb	r3, r3
 8011038:	f003 0303 	and.w	r3, r3, #3
 801103c:	2b00      	cmp	r3, #0
 801103e:	d001      	beq.n	8011044 <tcp_receive+0x6c4>
 8011040:	2301      	movs	r3, #1
 8011042:	e000      	b.n	8011046 <tcp_receive+0x6c6>
 8011044:	2300      	movs	r3, #0
 8011046:	4423      	add	r3, r4
 8011048:	b29a      	uxth	r2, r3
 801104a:	4b71      	ldr	r3, [pc, #452]	; (8011210 <tcp_receive+0x890>)
 801104c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011052:	4b6f      	ldr	r3, [pc, #444]	; (8011210 <tcp_receive+0x890>)
 8011054:	881b      	ldrh	r3, [r3, #0]
 8011056:	429a      	cmp	r2, r3
 8011058:	d275      	bcs.n	8011146 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801105a:	4b6c      	ldr	r3, [pc, #432]	; (801120c <tcp_receive+0x88c>)
 801105c:	68db      	ldr	r3, [r3, #12]
 801105e:	899b      	ldrh	r3, [r3, #12]
 8011060:	b29b      	uxth	r3, r3
 8011062:	4618      	mov	r0, r3
 8011064:	f7fa fb42 	bl	800b6ec <lwip_htons>
 8011068:	4603      	mov	r3, r0
 801106a:	b2db      	uxtb	r3, r3
 801106c:	f003 0301 	and.w	r3, r3, #1
 8011070:	2b00      	cmp	r3, #0
 8011072:	d01f      	beq.n	80110b4 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011074:	4b65      	ldr	r3, [pc, #404]	; (801120c <tcp_receive+0x88c>)
 8011076:	68db      	ldr	r3, [r3, #12]
 8011078:	899b      	ldrh	r3, [r3, #12]
 801107a:	b29b      	uxth	r3, r3
 801107c:	b21b      	sxth	r3, r3
 801107e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011082:	b21c      	sxth	r4, r3
 8011084:	4b61      	ldr	r3, [pc, #388]	; (801120c <tcp_receive+0x88c>)
 8011086:	68db      	ldr	r3, [r3, #12]
 8011088:	899b      	ldrh	r3, [r3, #12]
 801108a:	b29b      	uxth	r3, r3
 801108c:	4618      	mov	r0, r3
 801108e:	f7fa fb2d 	bl	800b6ec <lwip_htons>
 8011092:	4603      	mov	r3, r0
 8011094:	b2db      	uxtb	r3, r3
 8011096:	b29b      	uxth	r3, r3
 8011098:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801109c:	b29b      	uxth	r3, r3
 801109e:	4618      	mov	r0, r3
 80110a0:	f7fa fb24 	bl	800b6ec <lwip_htons>
 80110a4:	4603      	mov	r3, r0
 80110a6:	b21b      	sxth	r3, r3
 80110a8:	4323      	orrs	r3, r4
 80110aa:	b21a      	sxth	r2, r3
 80110ac:	4b57      	ldr	r3, [pc, #348]	; (801120c <tcp_receive+0x88c>)
 80110ae:	68db      	ldr	r3, [r3, #12]
 80110b0:	b292      	uxth	r2, r2
 80110b2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80110b8:	4b54      	ldr	r3, [pc, #336]	; (801120c <tcp_receive+0x88c>)
 80110ba:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80110bc:	4b53      	ldr	r3, [pc, #332]	; (801120c <tcp_receive+0x88c>)
 80110be:	68db      	ldr	r3, [r3, #12]
 80110c0:	899b      	ldrh	r3, [r3, #12]
 80110c2:	b29b      	uxth	r3, r3
 80110c4:	4618      	mov	r0, r3
 80110c6:	f7fa fb11 	bl	800b6ec <lwip_htons>
 80110ca:	4603      	mov	r3, r0
 80110cc:	b2db      	uxtb	r3, r3
 80110ce:	f003 0302 	and.w	r3, r3, #2
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d005      	beq.n	80110e2 <tcp_receive+0x762>
            inseg.len -= 1;
 80110d6:	4b4d      	ldr	r3, [pc, #308]	; (801120c <tcp_receive+0x88c>)
 80110d8:	891b      	ldrh	r3, [r3, #8]
 80110da:	3b01      	subs	r3, #1
 80110dc:	b29a      	uxth	r2, r3
 80110de:	4b4b      	ldr	r3, [pc, #300]	; (801120c <tcp_receive+0x88c>)
 80110e0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80110e2:	4b4a      	ldr	r3, [pc, #296]	; (801120c <tcp_receive+0x88c>)
 80110e4:	685b      	ldr	r3, [r3, #4]
 80110e6:	4a49      	ldr	r2, [pc, #292]	; (801120c <tcp_receive+0x88c>)
 80110e8:	8912      	ldrh	r2, [r2, #8]
 80110ea:	4611      	mov	r1, r2
 80110ec:	4618      	mov	r0, r3
 80110ee:	f7fb fdab 	bl	800cc48 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80110f2:	4b46      	ldr	r3, [pc, #280]	; (801120c <tcp_receive+0x88c>)
 80110f4:	891c      	ldrh	r4, [r3, #8]
 80110f6:	4b45      	ldr	r3, [pc, #276]	; (801120c <tcp_receive+0x88c>)
 80110f8:	68db      	ldr	r3, [r3, #12]
 80110fa:	899b      	ldrh	r3, [r3, #12]
 80110fc:	b29b      	uxth	r3, r3
 80110fe:	4618      	mov	r0, r3
 8011100:	f7fa faf4 	bl	800b6ec <lwip_htons>
 8011104:	4603      	mov	r3, r0
 8011106:	b2db      	uxtb	r3, r3
 8011108:	f003 0303 	and.w	r3, r3, #3
 801110c:	2b00      	cmp	r3, #0
 801110e:	d001      	beq.n	8011114 <tcp_receive+0x794>
 8011110:	2301      	movs	r3, #1
 8011112:	e000      	b.n	8011116 <tcp_receive+0x796>
 8011114:	2300      	movs	r3, #0
 8011116:	4423      	add	r3, r4
 8011118:	b29a      	uxth	r2, r3
 801111a:	4b3d      	ldr	r3, [pc, #244]	; (8011210 <tcp_receive+0x890>)
 801111c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801111e:	4b3c      	ldr	r3, [pc, #240]	; (8011210 <tcp_receive+0x890>)
 8011120:	881b      	ldrh	r3, [r3, #0]
 8011122:	461a      	mov	r2, r3
 8011124:	4b38      	ldr	r3, [pc, #224]	; (8011208 <tcp_receive+0x888>)
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	441a      	add	r2, r3
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801112e:	6879      	ldr	r1, [r7, #4]
 8011130:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011132:	440b      	add	r3, r1
 8011134:	429a      	cmp	r2, r3
 8011136:	d006      	beq.n	8011146 <tcp_receive+0x7c6>
 8011138:	4b36      	ldr	r3, [pc, #216]	; (8011214 <tcp_receive+0x894>)
 801113a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801113e:	4936      	ldr	r1, [pc, #216]	; (8011218 <tcp_receive+0x898>)
 8011140:	4836      	ldr	r0, [pc, #216]	; (801121c <tcp_receive+0x89c>)
 8011142:	f007 fe39 	bl	8018db8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801114a:	2b00      	cmp	r3, #0
 801114c:	f000 80e7 	beq.w	801131e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011150:	4b2e      	ldr	r3, [pc, #184]	; (801120c <tcp_receive+0x88c>)
 8011152:	68db      	ldr	r3, [r3, #12]
 8011154:	899b      	ldrh	r3, [r3, #12]
 8011156:	b29b      	uxth	r3, r3
 8011158:	4618      	mov	r0, r3
 801115a:	f7fa fac7 	bl	800b6ec <lwip_htons>
 801115e:	4603      	mov	r3, r0
 8011160:	b2db      	uxtb	r3, r3
 8011162:	f003 0301 	and.w	r3, r3, #1
 8011166:	2b00      	cmp	r3, #0
 8011168:	d010      	beq.n	801118c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801116a:	e00a      	b.n	8011182 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011170:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011176:	681a      	ldr	r2, [r3, #0]
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801117c:	68f8      	ldr	r0, [r7, #12]
 801117e:	f7fd fca6 	bl	800eace <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011186:	2b00      	cmp	r3, #0
 8011188:	d1f0      	bne.n	801116c <tcp_receive+0x7ec>
 801118a:	e0c8      	b.n	801131e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011190:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011192:	e052      	b.n	801123a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011196:	68db      	ldr	r3, [r3, #12]
 8011198:	899b      	ldrh	r3, [r3, #12]
 801119a:	b29b      	uxth	r3, r3
 801119c:	4618      	mov	r0, r3
 801119e:	f7fa faa5 	bl	800b6ec <lwip_htons>
 80111a2:	4603      	mov	r3, r0
 80111a4:	b2db      	uxtb	r3, r3
 80111a6:	f003 0301 	and.w	r3, r3, #1
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d03d      	beq.n	801122a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80111ae:	4b17      	ldr	r3, [pc, #92]	; (801120c <tcp_receive+0x88c>)
 80111b0:	68db      	ldr	r3, [r3, #12]
 80111b2:	899b      	ldrh	r3, [r3, #12]
 80111b4:	b29b      	uxth	r3, r3
 80111b6:	4618      	mov	r0, r3
 80111b8:	f7fa fa98 	bl	800b6ec <lwip_htons>
 80111bc:	4603      	mov	r3, r0
 80111be:	b2db      	uxtb	r3, r3
 80111c0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d130      	bne.n	801122a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80111c8:	4b10      	ldr	r3, [pc, #64]	; (801120c <tcp_receive+0x88c>)
 80111ca:	68db      	ldr	r3, [r3, #12]
 80111cc:	899b      	ldrh	r3, [r3, #12]
 80111ce:	b29c      	uxth	r4, r3
 80111d0:	2001      	movs	r0, #1
 80111d2:	f7fa fa8b 	bl	800b6ec <lwip_htons>
 80111d6:	4603      	mov	r3, r0
 80111d8:	461a      	mov	r2, r3
 80111da:	4b0c      	ldr	r3, [pc, #48]	; (801120c <tcp_receive+0x88c>)
 80111dc:	68db      	ldr	r3, [r3, #12]
 80111de:	4322      	orrs	r2, r4
 80111e0:	b292      	uxth	r2, r2
 80111e2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80111e4:	4b09      	ldr	r3, [pc, #36]	; (801120c <tcp_receive+0x88c>)
 80111e6:	891c      	ldrh	r4, [r3, #8]
 80111e8:	4b08      	ldr	r3, [pc, #32]	; (801120c <tcp_receive+0x88c>)
 80111ea:	68db      	ldr	r3, [r3, #12]
 80111ec:	899b      	ldrh	r3, [r3, #12]
 80111ee:	b29b      	uxth	r3, r3
 80111f0:	4618      	mov	r0, r3
 80111f2:	f7fa fa7b 	bl	800b6ec <lwip_htons>
 80111f6:	4603      	mov	r3, r0
 80111f8:	b2db      	uxtb	r3, r3
 80111fa:	f003 0303 	and.w	r3, r3, #3
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d00e      	beq.n	8011220 <tcp_receive+0x8a0>
 8011202:	2301      	movs	r3, #1
 8011204:	e00d      	b.n	8011222 <tcp_receive+0x8a2>
 8011206:	bf00      	nop
 8011208:	20010fa8 	.word	0x20010fa8
 801120c:	20010f88 	.word	0x20010f88
 8011210:	20010fb2 	.word	0x20010fb2
 8011214:	0801c274 	.word	0x0801c274
 8011218:	0801c61c 	.word	0x0801c61c
 801121c:	0801c2c0 	.word	0x0801c2c0
 8011220:	2300      	movs	r3, #0
 8011222:	4423      	add	r3, r4
 8011224:	b29a      	uxth	r2, r3
 8011226:	4b98      	ldr	r3, [pc, #608]	; (8011488 <tcp_receive+0xb08>)
 8011228:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801122a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801122c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801122e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011234:	6938      	ldr	r0, [r7, #16]
 8011236:	f7fd fc4a 	bl	800eace <tcp_seg_free>
            while (next &&
 801123a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801123c:	2b00      	cmp	r3, #0
 801123e:	d00e      	beq.n	801125e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011240:	4b91      	ldr	r3, [pc, #580]	; (8011488 <tcp_receive+0xb08>)
 8011242:	881b      	ldrh	r3, [r3, #0]
 8011244:	461a      	mov	r2, r3
 8011246:	4b91      	ldr	r3, [pc, #580]	; (801148c <tcp_receive+0xb0c>)
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	441a      	add	r2, r3
 801124c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801124e:	68db      	ldr	r3, [r3, #12]
 8011250:	685b      	ldr	r3, [r3, #4]
 8011252:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011254:	8909      	ldrh	r1, [r1, #8]
 8011256:	440b      	add	r3, r1
 8011258:	1ad3      	subs	r3, r2, r3
            while (next &&
 801125a:	2b00      	cmp	r3, #0
 801125c:	da9a      	bge.n	8011194 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801125e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011260:	2b00      	cmp	r3, #0
 8011262:	d059      	beq.n	8011318 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8011264:	4b88      	ldr	r3, [pc, #544]	; (8011488 <tcp_receive+0xb08>)
 8011266:	881b      	ldrh	r3, [r3, #0]
 8011268:	461a      	mov	r2, r3
 801126a:	4b88      	ldr	r3, [pc, #544]	; (801148c <tcp_receive+0xb0c>)
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	441a      	add	r2, r3
 8011270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011272:	68db      	ldr	r3, [r3, #12]
 8011274:	685b      	ldr	r3, [r3, #4]
 8011276:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011278:	2b00      	cmp	r3, #0
 801127a:	dd4d      	ble.n	8011318 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801127c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801127e:	68db      	ldr	r3, [r3, #12]
 8011280:	685b      	ldr	r3, [r3, #4]
 8011282:	b29a      	uxth	r2, r3
 8011284:	4b81      	ldr	r3, [pc, #516]	; (801148c <tcp_receive+0xb0c>)
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	b29b      	uxth	r3, r3
 801128a:	1ad3      	subs	r3, r2, r3
 801128c:	b29a      	uxth	r2, r3
 801128e:	4b80      	ldr	r3, [pc, #512]	; (8011490 <tcp_receive+0xb10>)
 8011290:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011292:	4b7f      	ldr	r3, [pc, #508]	; (8011490 <tcp_receive+0xb10>)
 8011294:	68db      	ldr	r3, [r3, #12]
 8011296:	899b      	ldrh	r3, [r3, #12]
 8011298:	b29b      	uxth	r3, r3
 801129a:	4618      	mov	r0, r3
 801129c:	f7fa fa26 	bl	800b6ec <lwip_htons>
 80112a0:	4603      	mov	r3, r0
 80112a2:	b2db      	uxtb	r3, r3
 80112a4:	f003 0302 	and.w	r3, r3, #2
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d005      	beq.n	80112b8 <tcp_receive+0x938>
                inseg.len -= 1;
 80112ac:	4b78      	ldr	r3, [pc, #480]	; (8011490 <tcp_receive+0xb10>)
 80112ae:	891b      	ldrh	r3, [r3, #8]
 80112b0:	3b01      	subs	r3, #1
 80112b2:	b29a      	uxth	r2, r3
 80112b4:	4b76      	ldr	r3, [pc, #472]	; (8011490 <tcp_receive+0xb10>)
 80112b6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80112b8:	4b75      	ldr	r3, [pc, #468]	; (8011490 <tcp_receive+0xb10>)
 80112ba:	685b      	ldr	r3, [r3, #4]
 80112bc:	4a74      	ldr	r2, [pc, #464]	; (8011490 <tcp_receive+0xb10>)
 80112be:	8912      	ldrh	r2, [r2, #8]
 80112c0:	4611      	mov	r1, r2
 80112c2:	4618      	mov	r0, r3
 80112c4:	f7fb fcc0 	bl	800cc48 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80112c8:	4b71      	ldr	r3, [pc, #452]	; (8011490 <tcp_receive+0xb10>)
 80112ca:	891c      	ldrh	r4, [r3, #8]
 80112cc:	4b70      	ldr	r3, [pc, #448]	; (8011490 <tcp_receive+0xb10>)
 80112ce:	68db      	ldr	r3, [r3, #12]
 80112d0:	899b      	ldrh	r3, [r3, #12]
 80112d2:	b29b      	uxth	r3, r3
 80112d4:	4618      	mov	r0, r3
 80112d6:	f7fa fa09 	bl	800b6ec <lwip_htons>
 80112da:	4603      	mov	r3, r0
 80112dc:	b2db      	uxtb	r3, r3
 80112de:	f003 0303 	and.w	r3, r3, #3
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d001      	beq.n	80112ea <tcp_receive+0x96a>
 80112e6:	2301      	movs	r3, #1
 80112e8:	e000      	b.n	80112ec <tcp_receive+0x96c>
 80112ea:	2300      	movs	r3, #0
 80112ec:	4423      	add	r3, r4
 80112ee:	b29a      	uxth	r2, r3
 80112f0:	4b65      	ldr	r3, [pc, #404]	; (8011488 <tcp_receive+0xb08>)
 80112f2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80112f4:	4b64      	ldr	r3, [pc, #400]	; (8011488 <tcp_receive+0xb08>)
 80112f6:	881b      	ldrh	r3, [r3, #0]
 80112f8:	461a      	mov	r2, r3
 80112fa:	4b64      	ldr	r3, [pc, #400]	; (801148c <tcp_receive+0xb0c>)
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	441a      	add	r2, r3
 8011300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011302:	68db      	ldr	r3, [r3, #12]
 8011304:	685b      	ldr	r3, [r3, #4]
 8011306:	429a      	cmp	r2, r3
 8011308:	d006      	beq.n	8011318 <tcp_receive+0x998>
 801130a:	4b62      	ldr	r3, [pc, #392]	; (8011494 <tcp_receive+0xb14>)
 801130c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011310:	4961      	ldr	r1, [pc, #388]	; (8011498 <tcp_receive+0xb18>)
 8011312:	4862      	ldr	r0, [pc, #392]	; (801149c <tcp_receive+0xb1c>)
 8011314:	f007 fd50 	bl	8018db8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801131c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801131e:	4b5a      	ldr	r3, [pc, #360]	; (8011488 <tcp_receive+0xb08>)
 8011320:	881b      	ldrh	r3, [r3, #0]
 8011322:	461a      	mov	r2, r3
 8011324:	4b59      	ldr	r3, [pc, #356]	; (801148c <tcp_receive+0xb0c>)
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	441a      	add	r2, r3
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011332:	4b55      	ldr	r3, [pc, #340]	; (8011488 <tcp_receive+0xb08>)
 8011334:	881b      	ldrh	r3, [r3, #0]
 8011336:	429a      	cmp	r2, r3
 8011338:	d206      	bcs.n	8011348 <tcp_receive+0x9c8>
 801133a:	4b56      	ldr	r3, [pc, #344]	; (8011494 <tcp_receive+0xb14>)
 801133c:	f240 6207 	movw	r2, #1543	; 0x607
 8011340:	4957      	ldr	r1, [pc, #348]	; (80114a0 <tcp_receive+0xb20>)
 8011342:	4856      	ldr	r0, [pc, #344]	; (801149c <tcp_receive+0xb1c>)
 8011344:	f007 fd38 	bl	8018db8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801134c:	4b4e      	ldr	r3, [pc, #312]	; (8011488 <tcp_receive+0xb08>)
 801134e:	881b      	ldrh	r3, [r3, #0]
 8011350:	1ad3      	subs	r3, r2, r3
 8011352:	b29a      	uxth	r2, r3
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011358:	6878      	ldr	r0, [r7, #4]
 801135a:	f7fc fd7b 	bl	800de54 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801135e:	4b4c      	ldr	r3, [pc, #304]	; (8011490 <tcp_receive+0xb10>)
 8011360:	685b      	ldr	r3, [r3, #4]
 8011362:	891b      	ldrh	r3, [r3, #8]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d006      	beq.n	8011376 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8011368:	4b49      	ldr	r3, [pc, #292]	; (8011490 <tcp_receive+0xb10>)
 801136a:	685b      	ldr	r3, [r3, #4]
 801136c:	4a4d      	ldr	r2, [pc, #308]	; (80114a4 <tcp_receive+0xb24>)
 801136e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011370:	4b47      	ldr	r3, [pc, #284]	; (8011490 <tcp_receive+0xb10>)
 8011372:	2200      	movs	r2, #0
 8011374:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011376:	4b46      	ldr	r3, [pc, #280]	; (8011490 <tcp_receive+0xb10>)
 8011378:	68db      	ldr	r3, [r3, #12]
 801137a:	899b      	ldrh	r3, [r3, #12]
 801137c:	b29b      	uxth	r3, r3
 801137e:	4618      	mov	r0, r3
 8011380:	f7fa f9b4 	bl	800b6ec <lwip_htons>
 8011384:	4603      	mov	r3, r0
 8011386:	b2db      	uxtb	r3, r3
 8011388:	f003 0301 	and.w	r3, r3, #1
 801138c:	2b00      	cmp	r3, #0
 801138e:	f000 80b8 	beq.w	8011502 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011392:	4b45      	ldr	r3, [pc, #276]	; (80114a8 <tcp_receive+0xb28>)
 8011394:	781b      	ldrb	r3, [r3, #0]
 8011396:	f043 0320 	orr.w	r3, r3, #32
 801139a:	b2da      	uxtb	r2, r3
 801139c:	4b42      	ldr	r3, [pc, #264]	; (80114a8 <tcp_receive+0xb28>)
 801139e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80113a0:	e0af      	b.n	8011502 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113a6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113ac:	68db      	ldr	r3, [r3, #12]
 80113ae:	685b      	ldr	r3, [r3, #4]
 80113b0:	4a36      	ldr	r2, [pc, #216]	; (801148c <tcp_receive+0xb0c>)
 80113b2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	891b      	ldrh	r3, [r3, #8]
 80113b8:	461c      	mov	r4, r3
 80113ba:	68bb      	ldr	r3, [r7, #8]
 80113bc:	68db      	ldr	r3, [r3, #12]
 80113be:	899b      	ldrh	r3, [r3, #12]
 80113c0:	b29b      	uxth	r3, r3
 80113c2:	4618      	mov	r0, r3
 80113c4:	f7fa f992 	bl	800b6ec <lwip_htons>
 80113c8:	4603      	mov	r3, r0
 80113ca:	b2db      	uxtb	r3, r3
 80113cc:	f003 0303 	and.w	r3, r3, #3
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d001      	beq.n	80113d8 <tcp_receive+0xa58>
 80113d4:	2301      	movs	r3, #1
 80113d6:	e000      	b.n	80113da <tcp_receive+0xa5a>
 80113d8:	2300      	movs	r3, #0
 80113da:	191a      	adds	r2, r3, r4
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113e0:	441a      	add	r2, r3
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80113ea:	461c      	mov	r4, r3
 80113ec:	68bb      	ldr	r3, [r7, #8]
 80113ee:	891b      	ldrh	r3, [r3, #8]
 80113f0:	461d      	mov	r5, r3
 80113f2:	68bb      	ldr	r3, [r7, #8]
 80113f4:	68db      	ldr	r3, [r3, #12]
 80113f6:	899b      	ldrh	r3, [r3, #12]
 80113f8:	b29b      	uxth	r3, r3
 80113fa:	4618      	mov	r0, r3
 80113fc:	f7fa f976 	bl	800b6ec <lwip_htons>
 8011400:	4603      	mov	r3, r0
 8011402:	b2db      	uxtb	r3, r3
 8011404:	f003 0303 	and.w	r3, r3, #3
 8011408:	2b00      	cmp	r3, #0
 801140a:	d001      	beq.n	8011410 <tcp_receive+0xa90>
 801140c:	2301      	movs	r3, #1
 801140e:	e000      	b.n	8011412 <tcp_receive+0xa92>
 8011410:	2300      	movs	r3, #0
 8011412:	442b      	add	r3, r5
 8011414:	429c      	cmp	r4, r3
 8011416:	d206      	bcs.n	8011426 <tcp_receive+0xaa6>
 8011418:	4b1e      	ldr	r3, [pc, #120]	; (8011494 <tcp_receive+0xb14>)
 801141a:	f240 622b 	movw	r2, #1579	; 0x62b
 801141e:	4923      	ldr	r1, [pc, #140]	; (80114ac <tcp_receive+0xb2c>)
 8011420:	481e      	ldr	r0, [pc, #120]	; (801149c <tcp_receive+0xb1c>)
 8011422:	f007 fcc9 	bl	8018db8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011426:	68bb      	ldr	r3, [r7, #8]
 8011428:	891b      	ldrh	r3, [r3, #8]
 801142a:	461c      	mov	r4, r3
 801142c:	68bb      	ldr	r3, [r7, #8]
 801142e:	68db      	ldr	r3, [r3, #12]
 8011430:	899b      	ldrh	r3, [r3, #12]
 8011432:	b29b      	uxth	r3, r3
 8011434:	4618      	mov	r0, r3
 8011436:	f7fa f959 	bl	800b6ec <lwip_htons>
 801143a:	4603      	mov	r3, r0
 801143c:	b2db      	uxtb	r3, r3
 801143e:	f003 0303 	and.w	r3, r3, #3
 8011442:	2b00      	cmp	r3, #0
 8011444:	d001      	beq.n	801144a <tcp_receive+0xaca>
 8011446:	2301      	movs	r3, #1
 8011448:	e000      	b.n	801144c <tcp_receive+0xacc>
 801144a:	2300      	movs	r3, #0
 801144c:	1919      	adds	r1, r3, r4
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011452:	b28b      	uxth	r3, r1
 8011454:	1ad3      	subs	r3, r2, r3
 8011456:	b29a      	uxth	r2, r3
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801145c:	6878      	ldr	r0, [r7, #4]
 801145e:	f7fc fcf9 	bl	800de54 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011462:	68bb      	ldr	r3, [r7, #8]
 8011464:	685b      	ldr	r3, [r3, #4]
 8011466:	891b      	ldrh	r3, [r3, #8]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d028      	beq.n	80114be <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801146c:	4b0d      	ldr	r3, [pc, #52]	; (80114a4 <tcp_receive+0xb24>)
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d01d      	beq.n	80114b0 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8011474:	4b0b      	ldr	r3, [pc, #44]	; (80114a4 <tcp_receive+0xb24>)
 8011476:	681a      	ldr	r2, [r3, #0]
 8011478:	68bb      	ldr	r3, [r7, #8]
 801147a:	685b      	ldr	r3, [r3, #4]
 801147c:	4619      	mov	r1, r3
 801147e:	4610      	mov	r0, r2
 8011480:	f7fb fe36 	bl	800d0f0 <pbuf_cat>
 8011484:	e018      	b.n	80114b8 <tcp_receive+0xb38>
 8011486:	bf00      	nop
 8011488:	20010fb2 	.word	0x20010fb2
 801148c:	20010fa8 	.word	0x20010fa8
 8011490:	20010f88 	.word	0x20010f88
 8011494:	0801c274 	.word	0x0801c274
 8011498:	0801c654 	.word	0x0801c654
 801149c:	0801c2c0 	.word	0x0801c2c0
 80114a0:	0801c690 	.word	0x0801c690
 80114a4:	20010fb8 	.word	0x20010fb8
 80114a8:	20010fb5 	.word	0x20010fb5
 80114ac:	0801c6b0 	.word	0x0801c6b0
            } else {
              recv_data = cseg->p;
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	685b      	ldr	r3, [r3, #4]
 80114b4:	4a70      	ldr	r2, [pc, #448]	; (8011678 <tcp_receive+0xcf8>)
 80114b6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80114b8:	68bb      	ldr	r3, [r7, #8]
 80114ba:	2200      	movs	r2, #0
 80114bc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80114be:	68bb      	ldr	r3, [r7, #8]
 80114c0:	68db      	ldr	r3, [r3, #12]
 80114c2:	899b      	ldrh	r3, [r3, #12]
 80114c4:	b29b      	uxth	r3, r3
 80114c6:	4618      	mov	r0, r3
 80114c8:	f7fa f910 	bl	800b6ec <lwip_htons>
 80114cc:	4603      	mov	r3, r0
 80114ce:	b2db      	uxtb	r3, r3
 80114d0:	f003 0301 	and.w	r3, r3, #1
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d00d      	beq.n	80114f4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80114d8:	4b68      	ldr	r3, [pc, #416]	; (801167c <tcp_receive+0xcfc>)
 80114da:	781b      	ldrb	r3, [r3, #0]
 80114dc:	f043 0320 	orr.w	r3, r3, #32
 80114e0:	b2da      	uxtb	r2, r3
 80114e2:	4b66      	ldr	r3, [pc, #408]	; (801167c <tcp_receive+0xcfc>)
 80114e4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	7d1b      	ldrb	r3, [r3, #20]
 80114ea:	2b04      	cmp	r3, #4
 80114ec:	d102      	bne.n	80114f4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	2207      	movs	r2, #7
 80114f2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80114f4:	68bb      	ldr	r3, [r7, #8]
 80114f6:	681a      	ldr	r2, [r3, #0]
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80114fc:	68b8      	ldr	r0, [r7, #8]
 80114fe:	f7fd fae6 	bl	800eace <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011506:	2b00      	cmp	r3, #0
 8011508:	d008      	beq.n	801151c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801150e:	68db      	ldr	r3, [r3, #12]
 8011510:	685a      	ldr	r2, [r3, #4]
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011516:	429a      	cmp	r2, r3
 8011518:	f43f af43 	beq.w	80113a2 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	8b5b      	ldrh	r3, [r3, #26]
 8011520:	f003 0301 	and.w	r3, r3, #1
 8011524:	2b00      	cmp	r3, #0
 8011526:	d00e      	beq.n	8011546 <tcp_receive+0xbc6>
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	8b5b      	ldrh	r3, [r3, #26]
 801152c:	f023 0301 	bic.w	r3, r3, #1
 8011530:	b29a      	uxth	r2, r3
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	835a      	strh	r2, [r3, #26]
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	8b5b      	ldrh	r3, [r3, #26]
 801153a:	f043 0302 	orr.w	r3, r3, #2
 801153e:	b29a      	uxth	r2, r3
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011544:	e188      	b.n	8011858 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	8b5b      	ldrh	r3, [r3, #26]
 801154a:	f043 0301 	orr.w	r3, r3, #1
 801154e:	b29a      	uxth	r2, r3
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011554:	e180      	b.n	8011858 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801155a:	2b00      	cmp	r3, #0
 801155c:	d106      	bne.n	801156c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801155e:	4848      	ldr	r0, [pc, #288]	; (8011680 <tcp_receive+0xd00>)
 8011560:	f7fd faec 	bl	800eb3c <tcp_seg_copy>
 8011564:	4602      	mov	r2, r0
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	675a      	str	r2, [r3, #116]	; 0x74
 801156a:	e16d      	b.n	8011848 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801156c:	2300      	movs	r3, #0
 801156e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011574:	63bb      	str	r3, [r7, #56]	; 0x38
 8011576:	e157      	b.n	8011828 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8011578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801157a:	68db      	ldr	r3, [r3, #12]
 801157c:	685a      	ldr	r2, [r3, #4]
 801157e:	4b41      	ldr	r3, [pc, #260]	; (8011684 <tcp_receive+0xd04>)
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	429a      	cmp	r2, r3
 8011584:	d11d      	bne.n	80115c2 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011586:	4b3e      	ldr	r3, [pc, #248]	; (8011680 <tcp_receive+0xd00>)
 8011588:	891a      	ldrh	r2, [r3, #8]
 801158a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801158c:	891b      	ldrh	r3, [r3, #8]
 801158e:	429a      	cmp	r2, r3
 8011590:	f240 814f 	bls.w	8011832 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011594:	483a      	ldr	r0, [pc, #232]	; (8011680 <tcp_receive+0xd00>)
 8011596:	f7fd fad1 	bl	800eb3c <tcp_seg_copy>
 801159a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801159c:	697b      	ldr	r3, [r7, #20]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	f000 8149 	beq.w	8011836 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80115a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d003      	beq.n	80115b2 <tcp_receive+0xc32>
                    prev->next = cseg;
 80115aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115ac:	697a      	ldr	r2, [r7, #20]
 80115ae:	601a      	str	r2, [r3, #0]
 80115b0:	e002      	b.n	80115b8 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	697a      	ldr	r2, [r7, #20]
 80115b6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80115b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80115ba:	6978      	ldr	r0, [r7, #20]
 80115bc:	f7ff f8dc 	bl	8010778 <tcp_oos_insert_segment>
                }
                break;
 80115c0:	e139      	b.n	8011836 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80115c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d117      	bne.n	80115f8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80115c8:	4b2e      	ldr	r3, [pc, #184]	; (8011684 <tcp_receive+0xd04>)
 80115ca:	681a      	ldr	r2, [r3, #0]
 80115cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ce:	68db      	ldr	r3, [r3, #12]
 80115d0:	685b      	ldr	r3, [r3, #4]
 80115d2:	1ad3      	subs	r3, r2, r3
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	da57      	bge.n	8011688 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80115d8:	4829      	ldr	r0, [pc, #164]	; (8011680 <tcp_receive+0xd00>)
 80115da:	f7fd faaf 	bl	800eb3c <tcp_seg_copy>
 80115de:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80115e0:	69bb      	ldr	r3, [r7, #24]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	f000 8129 	beq.w	801183a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	69ba      	ldr	r2, [r7, #24]
 80115ec:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80115ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80115f0:	69b8      	ldr	r0, [r7, #24]
 80115f2:	f7ff f8c1 	bl	8010778 <tcp_oos_insert_segment>
                  }
                  break;
 80115f6:	e120      	b.n	801183a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80115f8:	4b22      	ldr	r3, [pc, #136]	; (8011684 <tcp_receive+0xd04>)
 80115fa:	681a      	ldr	r2, [r3, #0]
 80115fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115fe:	68db      	ldr	r3, [r3, #12]
 8011600:	685b      	ldr	r3, [r3, #4]
 8011602:	1ad3      	subs	r3, r2, r3
 8011604:	3b01      	subs	r3, #1
 8011606:	2b00      	cmp	r3, #0
 8011608:	db3e      	blt.n	8011688 <tcp_receive+0xd08>
 801160a:	4b1e      	ldr	r3, [pc, #120]	; (8011684 <tcp_receive+0xd04>)
 801160c:	681a      	ldr	r2, [r3, #0]
 801160e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011610:	68db      	ldr	r3, [r3, #12]
 8011612:	685b      	ldr	r3, [r3, #4]
 8011614:	1ad3      	subs	r3, r2, r3
 8011616:	3301      	adds	r3, #1
 8011618:	2b00      	cmp	r3, #0
 801161a:	dc35      	bgt.n	8011688 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801161c:	4818      	ldr	r0, [pc, #96]	; (8011680 <tcp_receive+0xd00>)
 801161e:	f7fd fa8d 	bl	800eb3c <tcp_seg_copy>
 8011622:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011624:	69fb      	ldr	r3, [r7, #28]
 8011626:	2b00      	cmp	r3, #0
 8011628:	f000 8109 	beq.w	801183e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801162c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801162e:	68db      	ldr	r3, [r3, #12]
 8011630:	685b      	ldr	r3, [r3, #4]
 8011632:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011634:	8912      	ldrh	r2, [r2, #8]
 8011636:	441a      	add	r2, r3
 8011638:	4b12      	ldr	r3, [pc, #72]	; (8011684 <tcp_receive+0xd04>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	1ad3      	subs	r3, r2, r3
 801163e:	2b00      	cmp	r3, #0
 8011640:	dd12      	ble.n	8011668 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011642:	4b10      	ldr	r3, [pc, #64]	; (8011684 <tcp_receive+0xd04>)
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	b29a      	uxth	r2, r3
 8011648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801164a:	68db      	ldr	r3, [r3, #12]
 801164c:	685b      	ldr	r3, [r3, #4]
 801164e:	b29b      	uxth	r3, r3
 8011650:	1ad3      	subs	r3, r2, r3
 8011652:	b29a      	uxth	r2, r3
 8011654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011656:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801165a:	685a      	ldr	r2, [r3, #4]
 801165c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801165e:	891b      	ldrh	r3, [r3, #8]
 8011660:	4619      	mov	r1, r3
 8011662:	4610      	mov	r0, r2
 8011664:	f7fb faf0 	bl	800cc48 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801166a:	69fa      	ldr	r2, [r7, #28]
 801166c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801166e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011670:	69f8      	ldr	r0, [r7, #28]
 8011672:	f7ff f881 	bl	8010778 <tcp_oos_insert_segment>
                  }
                  break;
 8011676:	e0e2      	b.n	801183e <tcp_receive+0xebe>
 8011678:	20010fb8 	.word	0x20010fb8
 801167c:	20010fb5 	.word	0x20010fb5
 8011680:	20010f88 	.word	0x20010f88
 8011684:	20010fa8 	.word	0x20010fa8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801168a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801168c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	2b00      	cmp	r3, #0
 8011692:	f040 80c6 	bne.w	8011822 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011696:	4b80      	ldr	r3, [pc, #512]	; (8011898 <tcp_receive+0xf18>)
 8011698:	681a      	ldr	r2, [r3, #0]
 801169a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801169c:	68db      	ldr	r3, [r3, #12]
 801169e:	685b      	ldr	r3, [r3, #4]
 80116a0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	f340 80bd 	ble.w	8011822 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80116a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116aa:	68db      	ldr	r3, [r3, #12]
 80116ac:	899b      	ldrh	r3, [r3, #12]
 80116ae:	b29b      	uxth	r3, r3
 80116b0:	4618      	mov	r0, r3
 80116b2:	f7fa f81b 	bl	800b6ec <lwip_htons>
 80116b6:	4603      	mov	r3, r0
 80116b8:	b2db      	uxtb	r3, r3
 80116ba:	f003 0301 	and.w	r3, r3, #1
 80116be:	2b00      	cmp	r3, #0
 80116c0:	f040 80bf 	bne.w	8011842 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80116c4:	4875      	ldr	r0, [pc, #468]	; (801189c <tcp_receive+0xf1c>)
 80116c6:	f7fd fa39 	bl	800eb3c <tcp_seg_copy>
 80116ca:	4602      	mov	r2, r0
 80116cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ce:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80116d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	f000 80b6 	beq.w	8011846 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80116da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116dc:	68db      	ldr	r3, [r3, #12]
 80116de:	685b      	ldr	r3, [r3, #4]
 80116e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80116e2:	8912      	ldrh	r2, [r2, #8]
 80116e4:	441a      	add	r2, r3
 80116e6:	4b6c      	ldr	r3, [pc, #432]	; (8011898 <tcp_receive+0xf18>)
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	1ad3      	subs	r3, r2, r3
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	dd12      	ble.n	8011716 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80116f0:	4b69      	ldr	r3, [pc, #420]	; (8011898 <tcp_receive+0xf18>)
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	b29a      	uxth	r2, r3
 80116f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116f8:	68db      	ldr	r3, [r3, #12]
 80116fa:	685b      	ldr	r3, [r3, #4]
 80116fc:	b29b      	uxth	r3, r3
 80116fe:	1ad3      	subs	r3, r2, r3
 8011700:	b29a      	uxth	r2, r3
 8011702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011704:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011708:	685a      	ldr	r2, [r3, #4]
 801170a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801170c:	891b      	ldrh	r3, [r3, #8]
 801170e:	4619      	mov	r1, r3
 8011710:	4610      	mov	r0, r2
 8011712:	f7fb fa99 	bl	800cc48 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011716:	4b62      	ldr	r3, [pc, #392]	; (80118a0 <tcp_receive+0xf20>)
 8011718:	881b      	ldrh	r3, [r3, #0]
 801171a:	461a      	mov	r2, r3
 801171c:	4b5e      	ldr	r3, [pc, #376]	; (8011898 <tcp_receive+0xf18>)
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	441a      	add	r2, r3
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011726:	6879      	ldr	r1, [r7, #4]
 8011728:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801172a:	440b      	add	r3, r1
 801172c:	1ad3      	subs	r3, r2, r3
 801172e:	2b00      	cmp	r3, #0
 8011730:	f340 8089 	ble.w	8011846 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	68db      	ldr	r3, [r3, #12]
 801173a:	899b      	ldrh	r3, [r3, #12]
 801173c:	b29b      	uxth	r3, r3
 801173e:	4618      	mov	r0, r3
 8011740:	f7f9 ffd4 	bl	800b6ec <lwip_htons>
 8011744:	4603      	mov	r3, r0
 8011746:	b2db      	uxtb	r3, r3
 8011748:	f003 0301 	and.w	r3, r3, #1
 801174c:	2b00      	cmp	r3, #0
 801174e:	d022      	beq.n	8011796 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	68db      	ldr	r3, [r3, #12]
 8011756:	899b      	ldrh	r3, [r3, #12]
 8011758:	b29b      	uxth	r3, r3
 801175a:	b21b      	sxth	r3, r3
 801175c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011760:	b21c      	sxth	r4, r3
 8011762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	68db      	ldr	r3, [r3, #12]
 8011768:	899b      	ldrh	r3, [r3, #12]
 801176a:	b29b      	uxth	r3, r3
 801176c:	4618      	mov	r0, r3
 801176e:	f7f9 ffbd 	bl	800b6ec <lwip_htons>
 8011772:	4603      	mov	r3, r0
 8011774:	b2db      	uxtb	r3, r3
 8011776:	b29b      	uxth	r3, r3
 8011778:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801177c:	b29b      	uxth	r3, r3
 801177e:	4618      	mov	r0, r3
 8011780:	f7f9 ffb4 	bl	800b6ec <lwip_htons>
 8011784:	4603      	mov	r3, r0
 8011786:	b21b      	sxth	r3, r3
 8011788:	4323      	orrs	r3, r4
 801178a:	b21a      	sxth	r2, r3
 801178c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	68db      	ldr	r3, [r3, #12]
 8011792:	b292      	uxth	r2, r2
 8011794:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801179a:	b29a      	uxth	r2, r3
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80117a0:	4413      	add	r3, r2
 80117a2:	b299      	uxth	r1, r3
 80117a4:	4b3c      	ldr	r3, [pc, #240]	; (8011898 <tcp_receive+0xf18>)
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	b29a      	uxth	r2, r3
 80117aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	1a8a      	subs	r2, r1, r2
 80117b0:	b292      	uxth	r2, r2
 80117b2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80117b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	685a      	ldr	r2, [r3, #4]
 80117ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	891b      	ldrh	r3, [r3, #8]
 80117c0:	4619      	mov	r1, r3
 80117c2:	4610      	mov	r0, r2
 80117c4:	f7fb fa40 	bl	800cc48 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80117c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	891c      	ldrh	r4, [r3, #8]
 80117ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	68db      	ldr	r3, [r3, #12]
 80117d4:	899b      	ldrh	r3, [r3, #12]
 80117d6:	b29b      	uxth	r3, r3
 80117d8:	4618      	mov	r0, r3
 80117da:	f7f9 ff87 	bl	800b6ec <lwip_htons>
 80117de:	4603      	mov	r3, r0
 80117e0:	b2db      	uxtb	r3, r3
 80117e2:	f003 0303 	and.w	r3, r3, #3
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d001      	beq.n	80117ee <tcp_receive+0xe6e>
 80117ea:	2301      	movs	r3, #1
 80117ec:	e000      	b.n	80117f0 <tcp_receive+0xe70>
 80117ee:	2300      	movs	r3, #0
 80117f0:	4423      	add	r3, r4
 80117f2:	b29a      	uxth	r2, r3
 80117f4:	4b2a      	ldr	r3, [pc, #168]	; (80118a0 <tcp_receive+0xf20>)
 80117f6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80117f8:	4b29      	ldr	r3, [pc, #164]	; (80118a0 <tcp_receive+0xf20>)
 80117fa:	881b      	ldrh	r3, [r3, #0]
 80117fc:	461a      	mov	r2, r3
 80117fe:	4b26      	ldr	r3, [pc, #152]	; (8011898 <tcp_receive+0xf18>)
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	441a      	add	r2, r3
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011808:	6879      	ldr	r1, [r7, #4]
 801180a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801180c:	440b      	add	r3, r1
 801180e:	429a      	cmp	r2, r3
 8011810:	d019      	beq.n	8011846 <tcp_receive+0xec6>
 8011812:	4b24      	ldr	r3, [pc, #144]	; (80118a4 <tcp_receive+0xf24>)
 8011814:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011818:	4923      	ldr	r1, [pc, #140]	; (80118a8 <tcp_receive+0xf28>)
 801181a:	4824      	ldr	r0, [pc, #144]	; (80118ac <tcp_receive+0xf2c>)
 801181c:	f007 facc 	bl	8018db8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011820:	e011      	b.n	8011846 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	63bb      	str	r3, [r7, #56]	; 0x38
 8011828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801182a:	2b00      	cmp	r3, #0
 801182c:	f47f aea4 	bne.w	8011578 <tcp_receive+0xbf8>
 8011830:	e00a      	b.n	8011848 <tcp_receive+0xec8>
                break;
 8011832:	bf00      	nop
 8011834:	e008      	b.n	8011848 <tcp_receive+0xec8>
                break;
 8011836:	bf00      	nop
 8011838:	e006      	b.n	8011848 <tcp_receive+0xec8>
                  break;
 801183a:	bf00      	nop
 801183c:	e004      	b.n	8011848 <tcp_receive+0xec8>
                  break;
 801183e:	bf00      	nop
 8011840:	e002      	b.n	8011848 <tcp_receive+0xec8>
                  break;
 8011842:	bf00      	nop
 8011844:	e000      	b.n	8011848 <tcp_receive+0xec8>
                break;
 8011846:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011848:	6878      	ldr	r0, [r7, #4]
 801184a:	f001 fe8b 	bl	8013564 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801184e:	e003      	b.n	8011858 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011850:	6878      	ldr	r0, [r7, #4]
 8011852:	f001 fe87 	bl	8013564 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011856:	e01a      	b.n	801188e <tcp_receive+0xf0e>
 8011858:	e019      	b.n	801188e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801185a:	4b0f      	ldr	r3, [pc, #60]	; (8011898 <tcp_receive+0xf18>)
 801185c:	681a      	ldr	r2, [r3, #0]
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011862:	1ad3      	subs	r3, r2, r3
 8011864:	2b00      	cmp	r3, #0
 8011866:	db0a      	blt.n	801187e <tcp_receive+0xefe>
 8011868:	4b0b      	ldr	r3, [pc, #44]	; (8011898 <tcp_receive+0xf18>)
 801186a:	681a      	ldr	r2, [r3, #0]
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011870:	6879      	ldr	r1, [r7, #4]
 8011872:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011874:	440b      	add	r3, r1
 8011876:	1ad3      	subs	r3, r2, r3
 8011878:	3301      	adds	r3, #1
 801187a:	2b00      	cmp	r3, #0
 801187c:	dd07      	ble.n	801188e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	8b5b      	ldrh	r3, [r3, #26]
 8011882:	f043 0302 	orr.w	r3, r3, #2
 8011886:	b29a      	uxth	r2, r3
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801188c:	e7ff      	b.n	801188e <tcp_receive+0xf0e>
 801188e:	bf00      	nop
 8011890:	3750      	adds	r7, #80	; 0x50
 8011892:	46bd      	mov	sp, r7
 8011894:	bdb0      	pop	{r4, r5, r7, pc}
 8011896:	bf00      	nop
 8011898:	20010fa8 	.word	0x20010fa8
 801189c:	20010f88 	.word	0x20010f88
 80118a0:	20010fb2 	.word	0x20010fb2
 80118a4:	0801c274 	.word	0x0801c274
 80118a8:	0801c61c 	.word	0x0801c61c
 80118ac:	0801c2c0 	.word	0x0801c2c0

080118b0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80118b0:	b480      	push	{r7}
 80118b2:	b083      	sub	sp, #12
 80118b4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80118b6:	4b15      	ldr	r3, [pc, #84]	; (801190c <tcp_get_next_optbyte+0x5c>)
 80118b8:	881b      	ldrh	r3, [r3, #0]
 80118ba:	1c5a      	adds	r2, r3, #1
 80118bc:	b291      	uxth	r1, r2
 80118be:	4a13      	ldr	r2, [pc, #76]	; (801190c <tcp_get_next_optbyte+0x5c>)
 80118c0:	8011      	strh	r1, [r2, #0]
 80118c2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80118c4:	4b12      	ldr	r3, [pc, #72]	; (8011910 <tcp_get_next_optbyte+0x60>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d004      	beq.n	80118d6 <tcp_get_next_optbyte+0x26>
 80118cc:	4b11      	ldr	r3, [pc, #68]	; (8011914 <tcp_get_next_optbyte+0x64>)
 80118ce:	881b      	ldrh	r3, [r3, #0]
 80118d0:	88fa      	ldrh	r2, [r7, #6]
 80118d2:	429a      	cmp	r2, r3
 80118d4:	d208      	bcs.n	80118e8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80118d6:	4b10      	ldr	r3, [pc, #64]	; (8011918 <tcp_get_next_optbyte+0x68>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	3314      	adds	r3, #20
 80118dc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80118de:	88fb      	ldrh	r3, [r7, #6]
 80118e0:	683a      	ldr	r2, [r7, #0]
 80118e2:	4413      	add	r3, r2
 80118e4:	781b      	ldrb	r3, [r3, #0]
 80118e6:	e00b      	b.n	8011900 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80118e8:	88fb      	ldrh	r3, [r7, #6]
 80118ea:	b2da      	uxtb	r2, r3
 80118ec:	4b09      	ldr	r3, [pc, #36]	; (8011914 <tcp_get_next_optbyte+0x64>)
 80118ee:	881b      	ldrh	r3, [r3, #0]
 80118f0:	b2db      	uxtb	r3, r3
 80118f2:	1ad3      	subs	r3, r2, r3
 80118f4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80118f6:	4b06      	ldr	r3, [pc, #24]	; (8011910 <tcp_get_next_optbyte+0x60>)
 80118f8:	681a      	ldr	r2, [r3, #0]
 80118fa:	797b      	ldrb	r3, [r7, #5]
 80118fc:	4413      	add	r3, r2
 80118fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011900:	4618      	mov	r0, r3
 8011902:	370c      	adds	r7, #12
 8011904:	46bd      	mov	sp, r7
 8011906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190a:	4770      	bx	lr
 801190c:	20010fa4 	.word	0x20010fa4
 8011910:	20010fa0 	.word	0x20010fa0
 8011914:	20010f9e 	.word	0x20010f9e
 8011918:	20010f98 	.word	0x20010f98

0801191c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b084      	sub	sp, #16
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d106      	bne.n	8011938 <tcp_parseopt+0x1c>
 801192a:	4b32      	ldr	r3, [pc, #200]	; (80119f4 <tcp_parseopt+0xd8>)
 801192c:	f240 727d 	movw	r2, #1917	; 0x77d
 8011930:	4931      	ldr	r1, [pc, #196]	; (80119f8 <tcp_parseopt+0xdc>)
 8011932:	4832      	ldr	r0, [pc, #200]	; (80119fc <tcp_parseopt+0xe0>)
 8011934:	f007 fa40 	bl	8018db8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011938:	4b31      	ldr	r3, [pc, #196]	; (8011a00 <tcp_parseopt+0xe4>)
 801193a:	881b      	ldrh	r3, [r3, #0]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d055      	beq.n	80119ec <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011940:	4b30      	ldr	r3, [pc, #192]	; (8011a04 <tcp_parseopt+0xe8>)
 8011942:	2200      	movs	r2, #0
 8011944:	801a      	strh	r2, [r3, #0]
 8011946:	e045      	b.n	80119d4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011948:	f7ff ffb2 	bl	80118b0 <tcp_get_next_optbyte>
 801194c:	4603      	mov	r3, r0
 801194e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011950:	7bfb      	ldrb	r3, [r7, #15]
 8011952:	2b02      	cmp	r3, #2
 8011954:	d006      	beq.n	8011964 <tcp_parseopt+0x48>
 8011956:	2b02      	cmp	r3, #2
 8011958:	dc2b      	bgt.n	80119b2 <tcp_parseopt+0x96>
 801195a:	2b00      	cmp	r3, #0
 801195c:	d041      	beq.n	80119e2 <tcp_parseopt+0xc6>
 801195e:	2b01      	cmp	r3, #1
 8011960:	d127      	bne.n	80119b2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011962:	e037      	b.n	80119d4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011964:	f7ff ffa4 	bl	80118b0 <tcp_get_next_optbyte>
 8011968:	4603      	mov	r3, r0
 801196a:	2b04      	cmp	r3, #4
 801196c:	d13b      	bne.n	80119e6 <tcp_parseopt+0xca>
 801196e:	4b25      	ldr	r3, [pc, #148]	; (8011a04 <tcp_parseopt+0xe8>)
 8011970:	881b      	ldrh	r3, [r3, #0]
 8011972:	3301      	adds	r3, #1
 8011974:	4a22      	ldr	r2, [pc, #136]	; (8011a00 <tcp_parseopt+0xe4>)
 8011976:	8812      	ldrh	r2, [r2, #0]
 8011978:	4293      	cmp	r3, r2
 801197a:	da34      	bge.n	80119e6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801197c:	f7ff ff98 	bl	80118b0 <tcp_get_next_optbyte>
 8011980:	4603      	mov	r3, r0
 8011982:	b29b      	uxth	r3, r3
 8011984:	021b      	lsls	r3, r3, #8
 8011986:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011988:	f7ff ff92 	bl	80118b0 <tcp_get_next_optbyte>
 801198c:	4603      	mov	r3, r0
 801198e:	b29a      	uxth	r2, r3
 8011990:	89bb      	ldrh	r3, [r7, #12]
 8011992:	4313      	orrs	r3, r2
 8011994:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011996:	89bb      	ldrh	r3, [r7, #12]
 8011998:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801199c:	d804      	bhi.n	80119a8 <tcp_parseopt+0x8c>
 801199e:	89bb      	ldrh	r3, [r7, #12]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d001      	beq.n	80119a8 <tcp_parseopt+0x8c>
 80119a4:	89ba      	ldrh	r2, [r7, #12]
 80119a6:	e001      	b.n	80119ac <tcp_parseopt+0x90>
 80119a8:	f44f 7206 	mov.w	r2, #536	; 0x218
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80119b0:	e010      	b.n	80119d4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80119b2:	f7ff ff7d 	bl	80118b0 <tcp_get_next_optbyte>
 80119b6:	4603      	mov	r3, r0
 80119b8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80119ba:	7afb      	ldrb	r3, [r7, #11]
 80119bc:	2b01      	cmp	r3, #1
 80119be:	d914      	bls.n	80119ea <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80119c0:	7afb      	ldrb	r3, [r7, #11]
 80119c2:	b29a      	uxth	r2, r3
 80119c4:	4b0f      	ldr	r3, [pc, #60]	; (8011a04 <tcp_parseopt+0xe8>)
 80119c6:	881b      	ldrh	r3, [r3, #0]
 80119c8:	4413      	add	r3, r2
 80119ca:	b29b      	uxth	r3, r3
 80119cc:	3b02      	subs	r3, #2
 80119ce:	b29a      	uxth	r2, r3
 80119d0:	4b0c      	ldr	r3, [pc, #48]	; (8011a04 <tcp_parseopt+0xe8>)
 80119d2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80119d4:	4b0b      	ldr	r3, [pc, #44]	; (8011a04 <tcp_parseopt+0xe8>)
 80119d6:	881a      	ldrh	r2, [r3, #0]
 80119d8:	4b09      	ldr	r3, [pc, #36]	; (8011a00 <tcp_parseopt+0xe4>)
 80119da:	881b      	ldrh	r3, [r3, #0]
 80119dc:	429a      	cmp	r2, r3
 80119de:	d3b3      	bcc.n	8011948 <tcp_parseopt+0x2c>
 80119e0:	e004      	b.n	80119ec <tcp_parseopt+0xd0>
          return;
 80119e2:	bf00      	nop
 80119e4:	e002      	b.n	80119ec <tcp_parseopt+0xd0>
            return;
 80119e6:	bf00      	nop
 80119e8:	e000      	b.n	80119ec <tcp_parseopt+0xd0>
            return;
 80119ea:	bf00      	nop
      }
    }
  }
}
 80119ec:	3710      	adds	r7, #16
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}
 80119f2:	bf00      	nop
 80119f4:	0801c274 	.word	0x0801c274
 80119f8:	0801c6d8 	.word	0x0801c6d8
 80119fc:	0801c2c0 	.word	0x0801c2c0
 8011a00:	20010f9c 	.word	0x20010f9c
 8011a04:	20010fa4 	.word	0x20010fa4

08011a08 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011a08:	b480      	push	{r7}
 8011a0a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011a0c:	4b05      	ldr	r3, [pc, #20]	; (8011a24 <tcp_trigger_input_pcb_close+0x1c>)
 8011a0e:	781b      	ldrb	r3, [r3, #0]
 8011a10:	f043 0310 	orr.w	r3, r3, #16
 8011a14:	b2da      	uxtb	r2, r3
 8011a16:	4b03      	ldr	r3, [pc, #12]	; (8011a24 <tcp_trigger_input_pcb_close+0x1c>)
 8011a18:	701a      	strb	r2, [r3, #0]
}
 8011a1a:	bf00      	nop
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a22:	4770      	bx	lr
 8011a24:	20010fb5 	.word	0x20010fb5

08011a28 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b084      	sub	sp, #16
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	60f8      	str	r0, [r7, #12]
 8011a30:	60b9      	str	r1, [r7, #8]
 8011a32:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d00a      	beq.n	8011a50 <tcp_route+0x28>
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	7a1b      	ldrb	r3, [r3, #8]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d006      	beq.n	8011a50 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	7a1b      	ldrb	r3, [r3, #8]
 8011a46:	4618      	mov	r0, r3
 8011a48:	f7fa fef6 	bl	800c838 <netif_get_by_index>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	e003      	b.n	8011a58 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011a50:	6878      	ldr	r0, [r7, #4]
 8011a52:	f005 fca9 	bl	80173a8 <ip4_route>
 8011a56:	4603      	mov	r3, r0
  }
}
 8011a58:	4618      	mov	r0, r3
 8011a5a:	3710      	adds	r7, #16
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	bd80      	pop	{r7, pc}

08011a60 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011a60:	b590      	push	{r4, r7, lr}
 8011a62:	b087      	sub	sp, #28
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	60f8      	str	r0, [r7, #12]
 8011a68:	60b9      	str	r1, [r7, #8]
 8011a6a:	603b      	str	r3, [r7, #0]
 8011a6c:	4613      	mov	r3, r2
 8011a6e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d105      	bne.n	8011a82 <tcp_create_segment+0x22>
 8011a76:	4b44      	ldr	r3, [pc, #272]	; (8011b88 <tcp_create_segment+0x128>)
 8011a78:	22a3      	movs	r2, #163	; 0xa3
 8011a7a:	4944      	ldr	r1, [pc, #272]	; (8011b8c <tcp_create_segment+0x12c>)
 8011a7c:	4844      	ldr	r0, [pc, #272]	; (8011b90 <tcp_create_segment+0x130>)
 8011a7e:	f007 f99b 	bl	8018db8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d105      	bne.n	8011a94 <tcp_create_segment+0x34>
 8011a88:	4b3f      	ldr	r3, [pc, #252]	; (8011b88 <tcp_create_segment+0x128>)
 8011a8a:	22a4      	movs	r2, #164	; 0xa4
 8011a8c:	4941      	ldr	r1, [pc, #260]	; (8011b94 <tcp_create_segment+0x134>)
 8011a8e:	4840      	ldr	r0, [pc, #256]	; (8011b90 <tcp_create_segment+0x130>)
 8011a90:	f007 f992 	bl	8018db8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011a94:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011a98:	009b      	lsls	r3, r3, #2
 8011a9a:	b2db      	uxtb	r3, r3
 8011a9c:	f003 0304 	and.w	r3, r3, #4
 8011aa0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011aa2:	2003      	movs	r0, #3
 8011aa4:	f7fa fb30 	bl	800c108 <memp_malloc>
 8011aa8:	6138      	str	r0, [r7, #16]
 8011aaa:	693b      	ldr	r3, [r7, #16]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d104      	bne.n	8011aba <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011ab0:	68b8      	ldr	r0, [r7, #8]
 8011ab2:	f7fb fa4f 	bl	800cf54 <pbuf_free>
    return NULL;
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	e061      	b.n	8011b7e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011aba:	693b      	ldr	r3, [r7, #16]
 8011abc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011ac0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011ac2:	693b      	ldr	r3, [r7, #16]
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011ac8:	693b      	ldr	r3, [r7, #16]
 8011aca:	68ba      	ldr	r2, [r7, #8]
 8011acc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011ace:	68bb      	ldr	r3, [r7, #8]
 8011ad0:	891a      	ldrh	r2, [r3, #8]
 8011ad2:	7dfb      	ldrb	r3, [r7, #23]
 8011ad4:	b29b      	uxth	r3, r3
 8011ad6:	429a      	cmp	r2, r3
 8011ad8:	d205      	bcs.n	8011ae6 <tcp_create_segment+0x86>
 8011ada:	4b2b      	ldr	r3, [pc, #172]	; (8011b88 <tcp_create_segment+0x128>)
 8011adc:	22b0      	movs	r2, #176	; 0xb0
 8011ade:	492e      	ldr	r1, [pc, #184]	; (8011b98 <tcp_create_segment+0x138>)
 8011ae0:	482b      	ldr	r0, [pc, #172]	; (8011b90 <tcp_create_segment+0x130>)
 8011ae2:	f007 f969 	bl	8018db8 <iprintf>
  seg->len = p->tot_len - optlen;
 8011ae6:	68bb      	ldr	r3, [r7, #8]
 8011ae8:	891a      	ldrh	r2, [r3, #8]
 8011aea:	7dfb      	ldrb	r3, [r7, #23]
 8011aec:	b29b      	uxth	r3, r3
 8011aee:	1ad3      	subs	r3, r2, r3
 8011af0:	b29a      	uxth	r2, r3
 8011af2:	693b      	ldr	r3, [r7, #16]
 8011af4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011af6:	2114      	movs	r1, #20
 8011af8:	68b8      	ldr	r0, [r7, #8]
 8011afa:	f7fb f995 	bl	800ce28 <pbuf_add_header>
 8011afe:	4603      	mov	r3, r0
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d004      	beq.n	8011b0e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011b04:	6938      	ldr	r0, [r7, #16]
 8011b06:	f7fc ffe2 	bl	800eace <tcp_seg_free>
    return NULL;
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	e037      	b.n	8011b7e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011b0e:	693b      	ldr	r3, [r7, #16]
 8011b10:	685b      	ldr	r3, [r3, #4]
 8011b12:	685a      	ldr	r2, [r3, #4]
 8011b14:	693b      	ldr	r3, [r7, #16]
 8011b16:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	8ada      	ldrh	r2, [r3, #22]
 8011b1c:	693b      	ldr	r3, [r7, #16]
 8011b1e:	68dc      	ldr	r4, [r3, #12]
 8011b20:	4610      	mov	r0, r2
 8011b22:	f7f9 fde3 	bl	800b6ec <lwip_htons>
 8011b26:	4603      	mov	r3, r0
 8011b28:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	8b1a      	ldrh	r2, [r3, #24]
 8011b2e:	693b      	ldr	r3, [r7, #16]
 8011b30:	68dc      	ldr	r4, [r3, #12]
 8011b32:	4610      	mov	r0, r2
 8011b34:	f7f9 fdda 	bl	800b6ec <lwip_htons>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011b3c:	693b      	ldr	r3, [r7, #16]
 8011b3e:	68dc      	ldr	r4, [r3, #12]
 8011b40:	6838      	ldr	r0, [r7, #0]
 8011b42:	f7f9 fde8 	bl	800b716 <lwip_htonl>
 8011b46:	4603      	mov	r3, r0
 8011b48:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011b4a:	7dfb      	ldrb	r3, [r7, #23]
 8011b4c:	089b      	lsrs	r3, r3, #2
 8011b4e:	b2db      	uxtb	r3, r3
 8011b50:	b29b      	uxth	r3, r3
 8011b52:	3305      	adds	r3, #5
 8011b54:	b29b      	uxth	r3, r3
 8011b56:	031b      	lsls	r3, r3, #12
 8011b58:	b29a      	uxth	r2, r3
 8011b5a:	79fb      	ldrb	r3, [r7, #7]
 8011b5c:	b29b      	uxth	r3, r3
 8011b5e:	4313      	orrs	r3, r2
 8011b60:	b29a      	uxth	r2, r3
 8011b62:	693b      	ldr	r3, [r7, #16]
 8011b64:	68dc      	ldr	r4, [r3, #12]
 8011b66:	4610      	mov	r0, r2
 8011b68:	f7f9 fdc0 	bl	800b6ec <lwip_htons>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011b70:	693b      	ldr	r3, [r7, #16]
 8011b72:	68db      	ldr	r3, [r3, #12]
 8011b74:	2200      	movs	r2, #0
 8011b76:	749a      	strb	r2, [r3, #18]
 8011b78:	2200      	movs	r2, #0
 8011b7a:	74da      	strb	r2, [r3, #19]
  return seg;
 8011b7c:	693b      	ldr	r3, [r7, #16]
}
 8011b7e:	4618      	mov	r0, r3
 8011b80:	371c      	adds	r7, #28
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd90      	pop	{r4, r7, pc}
 8011b86:	bf00      	nop
 8011b88:	0801c6f4 	.word	0x0801c6f4
 8011b8c:	0801c728 	.word	0x0801c728
 8011b90:	0801c748 	.word	0x0801c748
 8011b94:	0801c770 	.word	0x0801c770
 8011b98:	0801c794 	.word	0x0801c794

08011b9c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b086      	sub	sp, #24
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	607b      	str	r3, [r7, #4]
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	73fb      	strb	r3, [r7, #15]
 8011ba8:	460b      	mov	r3, r1
 8011baa:	81bb      	strh	r3, [r7, #12]
 8011bac:	4613      	mov	r3, r2
 8011bae:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011bb0:	89bb      	ldrh	r3, [r7, #12]
 8011bb2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d105      	bne.n	8011bc6 <tcp_pbuf_prealloc+0x2a>
 8011bba:	4b30      	ldr	r3, [pc, #192]	; (8011c7c <tcp_pbuf_prealloc+0xe0>)
 8011bbc:	22e8      	movs	r2, #232	; 0xe8
 8011bbe:	4930      	ldr	r1, [pc, #192]	; (8011c80 <tcp_pbuf_prealloc+0xe4>)
 8011bc0:	4830      	ldr	r0, [pc, #192]	; (8011c84 <tcp_pbuf_prealloc+0xe8>)
 8011bc2:	f007 f8f9 	bl	8018db8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011bc6:	6a3b      	ldr	r3, [r7, #32]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d105      	bne.n	8011bd8 <tcp_pbuf_prealloc+0x3c>
 8011bcc:	4b2b      	ldr	r3, [pc, #172]	; (8011c7c <tcp_pbuf_prealloc+0xe0>)
 8011bce:	22e9      	movs	r2, #233	; 0xe9
 8011bd0:	492d      	ldr	r1, [pc, #180]	; (8011c88 <tcp_pbuf_prealloc+0xec>)
 8011bd2:	482c      	ldr	r0, [pc, #176]	; (8011c84 <tcp_pbuf_prealloc+0xe8>)
 8011bd4:	f007 f8f0 	bl	8018db8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011bd8:	89ba      	ldrh	r2, [r7, #12]
 8011bda:	897b      	ldrh	r3, [r7, #10]
 8011bdc:	429a      	cmp	r2, r3
 8011bde:	d221      	bcs.n	8011c24 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011be0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011be4:	f003 0302 	and.w	r3, r3, #2
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d111      	bne.n	8011c10 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011bec:	6a3b      	ldr	r3, [r7, #32]
 8011bee:	8b5b      	ldrh	r3, [r3, #26]
 8011bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d115      	bne.n	8011c24 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011bf8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d007      	beq.n	8011c10 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011c00:	6a3b      	ldr	r3, [r7, #32]
 8011c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d103      	bne.n	8011c10 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011c08:	6a3b      	ldr	r3, [r7, #32]
 8011c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d009      	beq.n	8011c24 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011c10:	89bb      	ldrh	r3, [r7, #12]
 8011c12:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8011c16:	f023 0203 	bic.w	r2, r3, #3
 8011c1a:	897b      	ldrh	r3, [r7, #10]
 8011c1c:	4293      	cmp	r3, r2
 8011c1e:	bf28      	it	cs
 8011c20:	4613      	movcs	r3, r2
 8011c22:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011c24:	8af9      	ldrh	r1, [r7, #22]
 8011c26:	7bfb      	ldrb	r3, [r7, #15]
 8011c28:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f7fa fead 	bl	800c98c <pbuf_alloc>
 8011c32:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011c34:	693b      	ldr	r3, [r7, #16]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d101      	bne.n	8011c3e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	e019      	b.n	8011c72 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011c3e:	693b      	ldr	r3, [r7, #16]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d006      	beq.n	8011c54 <tcp_pbuf_prealloc+0xb8>
 8011c46:	4b0d      	ldr	r3, [pc, #52]	; (8011c7c <tcp_pbuf_prealloc+0xe0>)
 8011c48:	f240 120b 	movw	r2, #267	; 0x10b
 8011c4c:	490f      	ldr	r1, [pc, #60]	; (8011c8c <tcp_pbuf_prealloc+0xf0>)
 8011c4e:	480d      	ldr	r0, [pc, #52]	; (8011c84 <tcp_pbuf_prealloc+0xe8>)
 8011c50:	f007 f8b2 	bl	8018db8 <iprintf>
  *oversize = p->len - length;
 8011c54:	693b      	ldr	r3, [r7, #16]
 8011c56:	895a      	ldrh	r2, [r3, #10]
 8011c58:	89bb      	ldrh	r3, [r7, #12]
 8011c5a:	1ad3      	subs	r3, r2, r3
 8011c5c:	b29a      	uxth	r2, r3
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011c62:	693b      	ldr	r3, [r7, #16]
 8011c64:	89ba      	ldrh	r2, [r7, #12]
 8011c66:	811a      	strh	r2, [r3, #8]
 8011c68:	693b      	ldr	r3, [r7, #16]
 8011c6a:	891a      	ldrh	r2, [r3, #8]
 8011c6c:	693b      	ldr	r3, [r7, #16]
 8011c6e:	815a      	strh	r2, [r3, #10]
  return p;
 8011c70:	693b      	ldr	r3, [r7, #16]
}
 8011c72:	4618      	mov	r0, r3
 8011c74:	3718      	adds	r7, #24
 8011c76:	46bd      	mov	sp, r7
 8011c78:	bd80      	pop	{r7, pc}
 8011c7a:	bf00      	nop
 8011c7c:	0801c6f4 	.word	0x0801c6f4
 8011c80:	0801c7ac 	.word	0x0801c7ac
 8011c84:	0801c748 	.word	0x0801c748
 8011c88:	0801c7d0 	.word	0x0801c7d0
 8011c8c:	0801c7f0 	.word	0x0801c7f0

08011c90 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b082      	sub	sp, #8
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
 8011c98:	460b      	mov	r3, r1
 8011c9a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d106      	bne.n	8011cb0 <tcp_write_checks+0x20>
 8011ca2:	4b33      	ldr	r3, [pc, #204]	; (8011d70 <tcp_write_checks+0xe0>)
 8011ca4:	f240 1233 	movw	r2, #307	; 0x133
 8011ca8:	4932      	ldr	r1, [pc, #200]	; (8011d74 <tcp_write_checks+0xe4>)
 8011caa:	4833      	ldr	r0, [pc, #204]	; (8011d78 <tcp_write_checks+0xe8>)
 8011cac:	f007 f884 	bl	8018db8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	7d1b      	ldrb	r3, [r3, #20]
 8011cb4:	2b04      	cmp	r3, #4
 8011cb6:	d00e      	beq.n	8011cd6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011cbc:	2b07      	cmp	r3, #7
 8011cbe:	d00a      	beq.n	8011cd6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011cc4:	2b02      	cmp	r3, #2
 8011cc6:	d006      	beq.n	8011cd6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011ccc:	2b03      	cmp	r3, #3
 8011cce:	d002      	beq.n	8011cd6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011cd0:	f06f 030a 	mvn.w	r3, #10
 8011cd4:	e048      	b.n	8011d68 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011cd6:	887b      	ldrh	r3, [r7, #2]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d101      	bne.n	8011ce0 <tcp_write_checks+0x50>
    return ERR_OK;
 8011cdc:	2300      	movs	r3, #0
 8011cde:	e043      	b.n	8011d68 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011ce6:	887a      	ldrh	r2, [r7, #2]
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	d909      	bls.n	8011d00 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	8b5b      	ldrh	r3, [r3, #26]
 8011cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011cf4:	b29a      	uxth	r2, r3
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8011cfe:	e033      	b.n	8011d68 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d06:	2b08      	cmp	r3, #8
 8011d08:	d909      	bls.n	8011d1e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	8b5b      	ldrh	r3, [r3, #26]
 8011d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d12:	b29a      	uxth	r2, r3
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011d18:	f04f 33ff 	mov.w	r3, #4294967295
 8011d1c:	e024      	b.n	8011d68 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d00f      	beq.n	8011d48 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d11a      	bne.n	8011d66 <tcp_write_checks+0xd6>
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d116      	bne.n	8011d66 <tcp_write_checks+0xd6>
 8011d38:	4b0d      	ldr	r3, [pc, #52]	; (8011d70 <tcp_write_checks+0xe0>)
 8011d3a:	f240 1255 	movw	r2, #341	; 0x155
 8011d3e:	490f      	ldr	r1, [pc, #60]	; (8011d7c <tcp_write_checks+0xec>)
 8011d40:	480d      	ldr	r0, [pc, #52]	; (8011d78 <tcp_write_checks+0xe8>)
 8011d42:	f007 f839 	bl	8018db8 <iprintf>
 8011d46:	e00e      	b.n	8011d66 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d103      	bne.n	8011d58 <tcp_write_checks+0xc8>
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d006      	beq.n	8011d66 <tcp_write_checks+0xd6>
 8011d58:	4b05      	ldr	r3, [pc, #20]	; (8011d70 <tcp_write_checks+0xe0>)
 8011d5a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8011d5e:	4908      	ldr	r1, [pc, #32]	; (8011d80 <tcp_write_checks+0xf0>)
 8011d60:	4805      	ldr	r0, [pc, #20]	; (8011d78 <tcp_write_checks+0xe8>)
 8011d62:	f007 f829 	bl	8018db8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011d66:	2300      	movs	r3, #0
}
 8011d68:	4618      	mov	r0, r3
 8011d6a:	3708      	adds	r7, #8
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	bd80      	pop	{r7, pc}
 8011d70:	0801c6f4 	.word	0x0801c6f4
 8011d74:	0801c804 	.word	0x0801c804
 8011d78:	0801c748 	.word	0x0801c748
 8011d7c:	0801c824 	.word	0x0801c824
 8011d80:	0801c860 	.word	0x0801c860

08011d84 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011d84:	b590      	push	{r4, r7, lr}
 8011d86:	b09b      	sub	sp, #108	; 0x6c
 8011d88:	af04      	add	r7, sp, #16
 8011d8a:	60f8      	str	r0, [r7, #12]
 8011d8c:	60b9      	str	r1, [r7, #8]
 8011d8e:	4611      	mov	r1, r2
 8011d90:	461a      	mov	r2, r3
 8011d92:	460b      	mov	r3, r1
 8011d94:	80fb      	strh	r3, [r7, #6]
 8011d96:	4613      	mov	r3, r2
 8011d98:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011d9e:	2300      	movs	r3, #0
 8011da0:	653b      	str	r3, [r7, #80]	; 0x50
 8011da2:	2300      	movs	r3, #0
 8011da4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011da6:	2300      	movs	r3, #0
 8011da8:	64bb      	str	r3, [r7, #72]	; 0x48
 8011daa:	2300      	movs	r3, #0
 8011dac:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011dae:	2300      	movs	r3, #0
 8011db0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011db4:	2300      	movs	r3, #0
 8011db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011dba:	2300      	movs	r3, #0
 8011dbc:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d109      	bne.n	8011de0 <tcp_write+0x5c>
 8011dcc:	4ba4      	ldr	r3, [pc, #656]	; (8012060 <tcp_write+0x2dc>)
 8011dce:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011dd2:	49a4      	ldr	r1, [pc, #656]	; (8012064 <tcp_write+0x2e0>)
 8011dd4:	48a4      	ldr	r0, [pc, #656]	; (8012068 <tcp_write+0x2e4>)
 8011dd6:	f006 ffef 	bl	8018db8 <iprintf>
 8011dda:	f06f 030f 	mvn.w	r3, #15
 8011dde:	e32a      	b.n	8012436 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011de6:	085b      	lsrs	r3, r3, #1
 8011de8:	b29a      	uxth	r2, r3
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011dee:	4293      	cmp	r3, r2
 8011df0:	bf28      	it	cs
 8011df2:	4613      	movcs	r3, r2
 8011df4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011df6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d102      	bne.n	8011e02 <tcp_write+0x7e>
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e00:	e000      	b.n	8011e04 <tcp_write+0x80>
 8011e02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011e04:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011e06:	68bb      	ldr	r3, [r7, #8]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d109      	bne.n	8011e20 <tcp_write+0x9c>
 8011e0c:	4b94      	ldr	r3, [pc, #592]	; (8012060 <tcp_write+0x2dc>)
 8011e0e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8011e12:	4996      	ldr	r1, [pc, #600]	; (801206c <tcp_write+0x2e8>)
 8011e14:	4894      	ldr	r0, [pc, #592]	; (8012068 <tcp_write+0x2e4>)
 8011e16:	f006 ffcf 	bl	8018db8 <iprintf>
 8011e1a:	f06f 030f 	mvn.w	r3, #15
 8011e1e:	e30a      	b.n	8012436 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011e20:	88fb      	ldrh	r3, [r7, #6]
 8011e22:	4619      	mov	r1, r3
 8011e24:	68f8      	ldr	r0, [r7, #12]
 8011e26:	f7ff ff33 	bl	8011c90 <tcp_write_checks>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011e30:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d002      	beq.n	8011e3e <tcp_write+0xba>
    return err;
 8011e38:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011e3c:	e2fb      	b.n	8012436 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e44:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011e48:	2300      	movs	r3, #0
 8011e4a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	f000 80f6 	beq.w	8012044 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e5c:	653b      	str	r3, [r7, #80]	; 0x50
 8011e5e:	e002      	b.n	8011e66 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d1f8      	bne.n	8011e60 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011e6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e70:	7a9b      	ldrb	r3, [r3, #10]
 8011e72:	009b      	lsls	r3, r3, #2
 8011e74:	b29b      	uxth	r3, r3
 8011e76:	f003 0304 	and.w	r3, r3, #4
 8011e7a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011e7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e80:	891b      	ldrh	r3, [r3, #8]
 8011e82:	4619      	mov	r1, r3
 8011e84:	8c3b      	ldrh	r3, [r7, #32]
 8011e86:	440b      	add	r3, r1
 8011e88:	429a      	cmp	r2, r3
 8011e8a:	da06      	bge.n	8011e9a <tcp_write+0x116>
 8011e8c:	4b74      	ldr	r3, [pc, #464]	; (8012060 <tcp_write+0x2dc>)
 8011e8e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011e92:	4977      	ldr	r1, [pc, #476]	; (8012070 <tcp_write+0x2ec>)
 8011e94:	4874      	ldr	r0, [pc, #464]	; (8012068 <tcp_write+0x2e4>)
 8011e96:	f006 ff8f 	bl	8018db8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e9c:	891a      	ldrh	r2, [r3, #8]
 8011e9e:	8c3b      	ldrh	r3, [r7, #32]
 8011ea0:	4413      	add	r3, r2
 8011ea2:	b29b      	uxth	r3, r3
 8011ea4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011ea6:	1ad3      	subs	r3, r2, r3
 8011ea8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011eb0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011eb2:	8a7b      	ldrh	r3, [r7, #18]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d026      	beq.n	8011f06 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011eb8:	8a7b      	ldrh	r3, [r7, #18]
 8011eba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011ebc:	429a      	cmp	r2, r3
 8011ebe:	d206      	bcs.n	8011ece <tcp_write+0x14a>
 8011ec0:	4b67      	ldr	r3, [pc, #412]	; (8012060 <tcp_write+0x2dc>)
 8011ec2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8011ec6:	496b      	ldr	r1, [pc, #428]	; (8012074 <tcp_write+0x2f0>)
 8011ec8:	4867      	ldr	r0, [pc, #412]	; (8012068 <tcp_write+0x2e4>)
 8011eca:	f006 ff75 	bl	8018db8 <iprintf>
      seg = last_unsent;
 8011ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011ed2:	8a7b      	ldrh	r3, [r7, #18]
 8011ed4:	88fa      	ldrh	r2, [r7, #6]
 8011ed6:	4293      	cmp	r3, r2
 8011ed8:	bf28      	it	cs
 8011eda:	4613      	movcs	r3, r2
 8011edc:	b29b      	uxth	r3, r3
 8011ede:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011ee0:	4293      	cmp	r3, r2
 8011ee2:	bf28      	it	cs
 8011ee4:	4613      	movcs	r3, r2
 8011ee6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011ee8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011eec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011eee:	4413      	add	r3, r2
 8011ef0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011ef4:	8a7a      	ldrh	r2, [r7, #18]
 8011ef6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011ef8:	1ad3      	subs	r3, r2, r3
 8011efa:	b29b      	uxth	r3, r3
 8011efc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011efe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011f00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011f02:	1ad3      	subs	r3, r2, r3
 8011f04:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011f06:	8a7b      	ldrh	r3, [r7, #18]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d00b      	beq.n	8011f24 <tcp_write+0x1a0>
 8011f0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011f10:	88fb      	ldrh	r3, [r7, #6]
 8011f12:	429a      	cmp	r2, r3
 8011f14:	d006      	beq.n	8011f24 <tcp_write+0x1a0>
 8011f16:	4b52      	ldr	r3, [pc, #328]	; (8012060 <tcp_write+0x2dc>)
 8011f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011f1c:	4956      	ldr	r1, [pc, #344]	; (8012078 <tcp_write+0x2f4>)
 8011f1e:	4852      	ldr	r0, [pc, #328]	; (8012068 <tcp_write+0x2e4>)
 8011f20:	f006 ff4a 	bl	8018db8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011f24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011f28:	88fb      	ldrh	r3, [r7, #6]
 8011f2a:	429a      	cmp	r2, r3
 8011f2c:	f080 8167 	bcs.w	80121fe <tcp_write+0x47a>
 8011f30:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	f000 8163 	beq.w	80121fe <tcp_write+0x47a>
 8011f38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f3a:	891b      	ldrh	r3, [r3, #8]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	f000 815e 	beq.w	80121fe <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011f42:	88fa      	ldrh	r2, [r7, #6]
 8011f44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011f48:	1ad2      	subs	r2, r2, r3
 8011f4a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011f4c:	4293      	cmp	r3, r2
 8011f4e:	bfa8      	it	ge
 8011f50:	4613      	movge	r3, r2
 8011f52:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011f54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f56:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011f58:	797b      	ldrb	r3, [r7, #5]
 8011f5a:	f003 0301 	and.w	r3, r3, #1
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d027      	beq.n	8011fb2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011f62:	f107 0012 	add.w	r0, r7, #18
 8011f66:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011f68:	8bf9      	ldrh	r1, [r7, #30]
 8011f6a:	2301      	movs	r3, #1
 8011f6c:	9302      	str	r3, [sp, #8]
 8011f6e:	797b      	ldrb	r3, [r7, #5]
 8011f70:	9301      	str	r3, [sp, #4]
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	9300      	str	r3, [sp, #0]
 8011f76:	4603      	mov	r3, r0
 8011f78:	2000      	movs	r0, #0
 8011f7a:	f7ff fe0f 	bl	8011b9c <tcp_pbuf_prealloc>
 8011f7e:	6578      	str	r0, [r7, #84]	; 0x54
 8011f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	f000 8225 	beq.w	80123d2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011f88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f8a:	6858      	ldr	r0, [r3, #4]
 8011f8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011f90:	68ba      	ldr	r2, [r7, #8]
 8011f92:	4413      	add	r3, r2
 8011f94:	8bfa      	ldrh	r2, [r7, #30]
 8011f96:	4619      	mov	r1, r3
 8011f98:	f007 f90e 	bl	80191b8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011f9c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011f9e:	f7fb f867 	bl	800d070 <pbuf_clen>
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	461a      	mov	r2, r3
 8011fa6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011faa:	4413      	add	r3, r2
 8011fac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011fb0:	e041      	b.n	8012036 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fb4:	685b      	ldr	r3, [r3, #4]
 8011fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8011fb8:	e002      	b.n	8011fc0 <tcp_write+0x23c>
 8011fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8011fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d1f8      	bne.n	8011fba <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fca:	7b1b      	ldrb	r3, [r3, #12]
 8011fcc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d115      	bne.n	8012000 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fd6:	685b      	ldr	r3, [r3, #4]
 8011fd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011fda:	8952      	ldrh	r2, [r2, #10]
 8011fdc:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011fde:	68ba      	ldr	r2, [r7, #8]
 8011fe0:	429a      	cmp	r2, r3
 8011fe2:	d10d      	bne.n	8012000 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011fe4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d006      	beq.n	8011ffa <tcp_write+0x276>
 8011fec:	4b1c      	ldr	r3, [pc, #112]	; (8012060 <tcp_write+0x2dc>)
 8011fee:	f240 2231 	movw	r2, #561	; 0x231
 8011ff2:	4922      	ldr	r1, [pc, #136]	; (801207c <tcp_write+0x2f8>)
 8011ff4:	481c      	ldr	r0, [pc, #112]	; (8012068 <tcp_write+0x2e4>)
 8011ff6:	f006 fedf 	bl	8018db8 <iprintf>
          extendlen = seglen;
 8011ffa:	8bfb      	ldrh	r3, [r7, #30]
 8011ffc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011ffe:	e01a      	b.n	8012036 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012000:	8bfb      	ldrh	r3, [r7, #30]
 8012002:	2201      	movs	r2, #1
 8012004:	4619      	mov	r1, r3
 8012006:	2000      	movs	r0, #0
 8012008:	f7fa fcc0 	bl	800c98c <pbuf_alloc>
 801200c:	6578      	str	r0, [r7, #84]	; 0x54
 801200e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012010:	2b00      	cmp	r3, #0
 8012012:	f000 81e0 	beq.w	80123d6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012016:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801201a:	68ba      	ldr	r2, [r7, #8]
 801201c:	441a      	add	r2, r3
 801201e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012020:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012022:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012024:	f7fb f824 	bl	800d070 <pbuf_clen>
 8012028:	4603      	mov	r3, r0
 801202a:	461a      	mov	r2, r3
 801202c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012030:	4413      	add	r3, r2
 8012032:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012036:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801203a:	8bfb      	ldrh	r3, [r7, #30]
 801203c:	4413      	add	r3, r2
 801203e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012042:	e0dc      	b.n	80121fe <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801204a:	2b00      	cmp	r3, #0
 801204c:	f000 80d7 	beq.w	80121fe <tcp_write+0x47a>
 8012050:	4b03      	ldr	r3, [pc, #12]	; (8012060 <tcp_write+0x2dc>)
 8012052:	f240 224a 	movw	r2, #586	; 0x24a
 8012056:	490a      	ldr	r1, [pc, #40]	; (8012080 <tcp_write+0x2fc>)
 8012058:	4803      	ldr	r0, [pc, #12]	; (8012068 <tcp_write+0x2e4>)
 801205a:	f006 fead 	bl	8018db8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801205e:	e0ce      	b.n	80121fe <tcp_write+0x47a>
 8012060:	0801c6f4 	.word	0x0801c6f4
 8012064:	0801c894 	.word	0x0801c894
 8012068:	0801c748 	.word	0x0801c748
 801206c:	0801c8ac 	.word	0x0801c8ac
 8012070:	0801c8e0 	.word	0x0801c8e0
 8012074:	0801c8f8 	.word	0x0801c8f8
 8012078:	0801c918 	.word	0x0801c918
 801207c:	0801c938 	.word	0x0801c938
 8012080:	0801c964 	.word	0x0801c964
    struct pbuf *p;
    u16_t left = len - pos;
 8012084:	88fa      	ldrh	r2, [r7, #6]
 8012086:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801208a:	1ad3      	subs	r3, r2, r3
 801208c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801208e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012092:	b29b      	uxth	r3, r3
 8012094:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012096:	1ad3      	subs	r3, r2, r3
 8012098:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801209a:	8b7a      	ldrh	r2, [r7, #26]
 801209c:	8bbb      	ldrh	r3, [r7, #28]
 801209e:	4293      	cmp	r3, r2
 80120a0:	bf28      	it	cs
 80120a2:	4613      	movcs	r3, r2
 80120a4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80120a6:	797b      	ldrb	r3, [r7, #5]
 80120a8:	f003 0301 	and.w	r3, r3, #1
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d036      	beq.n	801211e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80120b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80120b4:	b29a      	uxth	r2, r3
 80120b6:	8b3b      	ldrh	r3, [r7, #24]
 80120b8:	4413      	add	r3, r2
 80120ba:	b299      	uxth	r1, r3
 80120bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120be:	2b00      	cmp	r3, #0
 80120c0:	bf0c      	ite	eq
 80120c2:	2301      	moveq	r3, #1
 80120c4:	2300      	movne	r3, #0
 80120c6:	b2db      	uxtb	r3, r3
 80120c8:	f107 0012 	add.w	r0, r7, #18
 80120cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80120ce:	9302      	str	r3, [sp, #8]
 80120d0:	797b      	ldrb	r3, [r7, #5]
 80120d2:	9301      	str	r3, [sp, #4]
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	9300      	str	r3, [sp, #0]
 80120d8:	4603      	mov	r3, r0
 80120da:	2036      	movs	r0, #54	; 0x36
 80120dc:	f7ff fd5e 	bl	8011b9c <tcp_pbuf_prealloc>
 80120e0:	6338      	str	r0, [r7, #48]	; 0x30
 80120e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	f000 8178 	beq.w	80123da <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80120ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ec:	895b      	ldrh	r3, [r3, #10]
 80120ee:	8b3a      	ldrh	r2, [r7, #24]
 80120f0:	429a      	cmp	r2, r3
 80120f2:	d906      	bls.n	8012102 <tcp_write+0x37e>
 80120f4:	4b8c      	ldr	r3, [pc, #560]	; (8012328 <tcp_write+0x5a4>)
 80120f6:	f240 2266 	movw	r2, #614	; 0x266
 80120fa:	498c      	ldr	r1, [pc, #560]	; (801232c <tcp_write+0x5a8>)
 80120fc:	488c      	ldr	r0, [pc, #560]	; (8012330 <tcp_write+0x5ac>)
 80120fe:	f006 fe5b 	bl	8018db8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012104:	685a      	ldr	r2, [r3, #4]
 8012106:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801210a:	18d0      	adds	r0, r2, r3
 801210c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012110:	68ba      	ldr	r2, [r7, #8]
 8012112:	4413      	add	r3, r2
 8012114:	8b3a      	ldrh	r2, [r7, #24]
 8012116:	4619      	mov	r1, r3
 8012118:	f007 f84e 	bl	80191b8 <memcpy>
 801211c:	e02f      	b.n	801217e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801211e:	8a7b      	ldrh	r3, [r7, #18]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d006      	beq.n	8012132 <tcp_write+0x3ae>
 8012124:	4b80      	ldr	r3, [pc, #512]	; (8012328 <tcp_write+0x5a4>)
 8012126:	f240 2271 	movw	r2, #625	; 0x271
 801212a:	4982      	ldr	r1, [pc, #520]	; (8012334 <tcp_write+0x5b0>)
 801212c:	4880      	ldr	r0, [pc, #512]	; (8012330 <tcp_write+0x5ac>)
 801212e:	f006 fe43 	bl	8018db8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012132:	8b3b      	ldrh	r3, [r7, #24]
 8012134:	2201      	movs	r2, #1
 8012136:	4619      	mov	r1, r3
 8012138:	2036      	movs	r0, #54	; 0x36
 801213a:	f7fa fc27 	bl	800c98c <pbuf_alloc>
 801213e:	6178      	str	r0, [r7, #20]
 8012140:	697b      	ldr	r3, [r7, #20]
 8012142:	2b00      	cmp	r3, #0
 8012144:	f000 814b 	beq.w	80123de <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012148:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801214c:	68ba      	ldr	r2, [r7, #8]
 801214e:	441a      	add	r2, r3
 8012150:	697b      	ldr	r3, [r7, #20]
 8012152:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012154:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012158:	b29b      	uxth	r3, r3
 801215a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801215e:	4619      	mov	r1, r3
 8012160:	2036      	movs	r0, #54	; 0x36
 8012162:	f7fa fc13 	bl	800c98c <pbuf_alloc>
 8012166:	6338      	str	r0, [r7, #48]	; 0x30
 8012168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801216a:	2b00      	cmp	r3, #0
 801216c:	d103      	bne.n	8012176 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801216e:	6978      	ldr	r0, [r7, #20]
 8012170:	f7fa fef0 	bl	800cf54 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012174:	e136      	b.n	80123e4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012176:	6979      	ldr	r1, [r7, #20]
 8012178:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801217a:	f7fa ffb9 	bl	800d0f0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801217e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012180:	f7fa ff76 	bl	800d070 <pbuf_clen>
 8012184:	4603      	mov	r3, r0
 8012186:	461a      	mov	r2, r3
 8012188:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801218c:	4413      	add	r3, r2
 801218e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012192:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012196:	2b09      	cmp	r3, #9
 8012198:	d903      	bls.n	80121a2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801219a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801219c:	f7fa feda 	bl	800cf54 <pbuf_free>
      goto memerr;
 80121a0:	e120      	b.n	80123e4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80121a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80121aa:	441a      	add	r2, r3
 80121ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80121b0:	9300      	str	r3, [sp, #0]
 80121b2:	4613      	mov	r3, r2
 80121b4:	2200      	movs	r2, #0
 80121b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80121b8:	68f8      	ldr	r0, [r7, #12]
 80121ba:	f7ff fc51 	bl	8011a60 <tcp_create_segment>
 80121be:	64f8      	str	r0, [r7, #76]	; 0x4c
 80121c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	f000 810d 	beq.w	80123e2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80121c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d102      	bne.n	80121d4 <tcp_write+0x450>
      queue = seg;
 80121ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121d0:	647b      	str	r3, [r7, #68]	; 0x44
 80121d2:	e00c      	b.n	80121ee <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80121d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d106      	bne.n	80121e8 <tcp_write+0x464>
 80121da:	4b53      	ldr	r3, [pc, #332]	; (8012328 <tcp_write+0x5a4>)
 80121dc:	f240 22ab 	movw	r2, #683	; 0x2ab
 80121e0:	4955      	ldr	r1, [pc, #340]	; (8012338 <tcp_write+0x5b4>)
 80121e2:	4853      	ldr	r0, [pc, #332]	; (8012330 <tcp_write+0x5ac>)
 80121e4:	f006 fde8 	bl	8018db8 <iprintf>
      prev_seg->next = seg;
 80121e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80121ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80121ec:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80121ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121f0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80121f2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80121f6:	8b3b      	ldrh	r3, [r7, #24]
 80121f8:	4413      	add	r3, r2
 80121fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80121fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012202:	88fb      	ldrh	r3, [r7, #6]
 8012204:	429a      	cmp	r2, r3
 8012206:	f4ff af3d 	bcc.w	8012084 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801220a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801220c:	2b00      	cmp	r3, #0
 801220e:	d02c      	beq.n	801226a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012212:	685b      	ldr	r3, [r3, #4]
 8012214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012216:	e01e      	b.n	8012256 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801221a:	891a      	ldrh	r2, [r3, #8]
 801221c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801221e:	4413      	add	r3, r2
 8012220:	b29a      	uxth	r2, r3
 8012222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012224:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d110      	bne.n	8012250 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801222e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012230:	685b      	ldr	r3, [r3, #4]
 8012232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012234:	8952      	ldrh	r2, [r2, #10]
 8012236:	4413      	add	r3, r2
 8012238:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801223a:	68b9      	ldr	r1, [r7, #8]
 801223c:	4618      	mov	r0, r3
 801223e:	f006 ffbb 	bl	80191b8 <memcpy>
        p->len += oversize_used;
 8012242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012244:	895a      	ldrh	r2, [r3, #10]
 8012246:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012248:	4413      	add	r3, r2
 801224a:	b29a      	uxth	r2, r3
 801224c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801224e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012258:	2b00      	cmp	r3, #0
 801225a:	d1dd      	bne.n	8012218 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801225c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801225e:	891a      	ldrh	r2, [r3, #8]
 8012260:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012262:	4413      	add	r3, r2
 8012264:	b29a      	uxth	r2, r3
 8012266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012268:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801226a:	8a7a      	ldrh	r2, [r7, #18]
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012274:	2b00      	cmp	r3, #0
 8012276:	d018      	beq.n	80122aa <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012278:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801227a:	2b00      	cmp	r3, #0
 801227c:	d106      	bne.n	801228c <tcp_write+0x508>
 801227e:	4b2a      	ldr	r3, [pc, #168]	; (8012328 <tcp_write+0x5a4>)
 8012280:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012284:	492d      	ldr	r1, [pc, #180]	; (801233c <tcp_write+0x5b8>)
 8012286:	482a      	ldr	r0, [pc, #168]	; (8012330 <tcp_write+0x5ac>)
 8012288:	f006 fd96 	bl	8018db8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801228c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801228e:	685b      	ldr	r3, [r3, #4]
 8012290:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012292:	4618      	mov	r0, r3
 8012294:	f7fa ff2c 	bl	800d0f0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801229a:	891a      	ldrh	r2, [r3, #8]
 801229c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801229e:	891b      	ldrh	r3, [r3, #8]
 80122a0:	4413      	add	r3, r2
 80122a2:	b29a      	uxth	r2, r3
 80122a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122a6:	811a      	strh	r2, [r3, #8]
 80122a8:	e037      	b.n	801231a <tcp_write+0x596>
  } else if (extendlen > 0) {
 80122aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d034      	beq.n	801231a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80122b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d003      	beq.n	80122be <tcp_write+0x53a>
 80122b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122b8:	685b      	ldr	r3, [r3, #4]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d106      	bne.n	80122cc <tcp_write+0x548>
 80122be:	4b1a      	ldr	r3, [pc, #104]	; (8012328 <tcp_write+0x5a4>)
 80122c0:	f240 22e6 	movw	r2, #742	; 0x2e6
 80122c4:	491e      	ldr	r1, [pc, #120]	; (8012340 <tcp_write+0x5bc>)
 80122c6:	481a      	ldr	r0, [pc, #104]	; (8012330 <tcp_write+0x5ac>)
 80122c8:	f006 fd76 	bl	8018db8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80122cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122ce:	685b      	ldr	r3, [r3, #4]
 80122d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80122d2:	e009      	b.n	80122e8 <tcp_write+0x564>
      p->tot_len += extendlen;
 80122d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122d6:	891a      	ldrh	r2, [r3, #8]
 80122d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80122da:	4413      	add	r3, r2
 80122dc:	b29a      	uxth	r2, r3
 80122de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122e0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80122e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80122e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d1f1      	bne.n	80122d4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80122f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122f2:	891a      	ldrh	r2, [r3, #8]
 80122f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80122f6:	4413      	add	r3, r2
 80122f8:	b29a      	uxth	r2, r3
 80122fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122fc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80122fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012300:	895a      	ldrh	r2, [r3, #10]
 8012302:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012304:	4413      	add	r3, r2
 8012306:	b29a      	uxth	r2, r3
 8012308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801230a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801230c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801230e:	891a      	ldrh	r2, [r3, #8]
 8012310:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012312:	4413      	add	r3, r2
 8012314:	b29a      	uxth	r2, r3
 8012316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012318:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801231a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801231c:	2b00      	cmp	r3, #0
 801231e:	d111      	bne.n	8012344 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012324:	66da      	str	r2, [r3, #108]	; 0x6c
 8012326:	e010      	b.n	801234a <tcp_write+0x5c6>
 8012328:	0801c6f4 	.word	0x0801c6f4
 801232c:	0801c994 	.word	0x0801c994
 8012330:	0801c748 	.word	0x0801c748
 8012334:	0801c9d4 	.word	0x0801c9d4
 8012338:	0801c9e4 	.word	0x0801c9e4
 801233c:	0801c9f8 	.word	0x0801c9f8
 8012340:	0801ca30 	.word	0x0801ca30
  } else {
    last_unsent->next = queue;
 8012344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012346:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012348:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801234e:	88fb      	ldrh	r3, [r7, #6]
 8012350:	441a      	add	r2, r3
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801235c:	88fb      	ldrh	r3, [r7, #6]
 801235e:	1ad3      	subs	r3, r2, r3
 8012360:	b29a      	uxth	r2, r3
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801236e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012378:	2b00      	cmp	r3, #0
 801237a:	d00e      	beq.n	801239a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012380:	2b00      	cmp	r3, #0
 8012382:	d10a      	bne.n	801239a <tcp_write+0x616>
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012388:	2b00      	cmp	r3, #0
 801238a:	d106      	bne.n	801239a <tcp_write+0x616>
 801238c:	4b2c      	ldr	r3, [pc, #176]	; (8012440 <tcp_write+0x6bc>)
 801238e:	f240 3212 	movw	r2, #786	; 0x312
 8012392:	492c      	ldr	r1, [pc, #176]	; (8012444 <tcp_write+0x6c0>)
 8012394:	482c      	ldr	r0, [pc, #176]	; (8012448 <tcp_write+0x6c4>)
 8012396:	f006 fd0f 	bl	8018db8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801239a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801239c:	2b00      	cmp	r3, #0
 801239e:	d016      	beq.n	80123ce <tcp_write+0x64a>
 80123a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123a2:	68db      	ldr	r3, [r3, #12]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d012      	beq.n	80123ce <tcp_write+0x64a>
 80123a8:	797b      	ldrb	r3, [r7, #5]
 80123aa:	f003 0302 	and.w	r3, r3, #2
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d10d      	bne.n	80123ce <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80123b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123b4:	68db      	ldr	r3, [r3, #12]
 80123b6:	899b      	ldrh	r3, [r3, #12]
 80123b8:	b29c      	uxth	r4, r3
 80123ba:	2008      	movs	r0, #8
 80123bc:	f7f9 f996 	bl	800b6ec <lwip_htons>
 80123c0:	4603      	mov	r3, r0
 80123c2:	461a      	mov	r2, r3
 80123c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123c6:	68db      	ldr	r3, [r3, #12]
 80123c8:	4322      	orrs	r2, r4
 80123ca:	b292      	uxth	r2, r2
 80123cc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80123ce:	2300      	movs	r3, #0
 80123d0:	e031      	b.n	8012436 <tcp_write+0x6b2>
          goto memerr;
 80123d2:	bf00      	nop
 80123d4:	e006      	b.n	80123e4 <tcp_write+0x660>
            goto memerr;
 80123d6:	bf00      	nop
 80123d8:	e004      	b.n	80123e4 <tcp_write+0x660>
        goto memerr;
 80123da:	bf00      	nop
 80123dc:	e002      	b.n	80123e4 <tcp_write+0x660>
        goto memerr;
 80123de:	bf00      	nop
 80123e0:	e000      	b.n	80123e4 <tcp_write+0x660>
      goto memerr;
 80123e2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	8b5b      	ldrh	r3, [r3, #26]
 80123e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80123ec:	b29a      	uxth	r2, r3
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80123f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d002      	beq.n	80123fe <tcp_write+0x67a>
    pbuf_free(concat_p);
 80123f8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80123fa:	f7fa fdab 	bl	800cf54 <pbuf_free>
  }
  if (queue != NULL) {
 80123fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012400:	2b00      	cmp	r3, #0
 8012402:	d002      	beq.n	801240a <tcp_write+0x686>
    tcp_segs_free(queue);
 8012404:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012406:	f7fc fb4d 	bl	800eaa4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012410:	2b00      	cmp	r3, #0
 8012412:	d00e      	beq.n	8012432 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012418:	2b00      	cmp	r3, #0
 801241a:	d10a      	bne.n	8012432 <tcp_write+0x6ae>
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012420:	2b00      	cmp	r3, #0
 8012422:	d106      	bne.n	8012432 <tcp_write+0x6ae>
 8012424:	4b06      	ldr	r3, [pc, #24]	; (8012440 <tcp_write+0x6bc>)
 8012426:	f240 3227 	movw	r2, #807	; 0x327
 801242a:	4906      	ldr	r1, [pc, #24]	; (8012444 <tcp_write+0x6c0>)
 801242c:	4806      	ldr	r0, [pc, #24]	; (8012448 <tcp_write+0x6c4>)
 801242e:	f006 fcc3 	bl	8018db8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012432:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012436:	4618      	mov	r0, r3
 8012438:	375c      	adds	r7, #92	; 0x5c
 801243a:	46bd      	mov	sp, r7
 801243c:	bd90      	pop	{r4, r7, pc}
 801243e:	bf00      	nop
 8012440:	0801c6f4 	.word	0x0801c6f4
 8012444:	0801ca68 	.word	0x0801ca68
 8012448:	0801c748 	.word	0x0801c748

0801244c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801244c:	b590      	push	{r4, r7, lr}
 801244e:	b08b      	sub	sp, #44	; 0x2c
 8012450:	af02      	add	r7, sp, #8
 8012452:	6078      	str	r0, [r7, #4]
 8012454:	460b      	mov	r3, r1
 8012456:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012458:	2300      	movs	r3, #0
 801245a:	61fb      	str	r3, [r7, #28]
 801245c:	2300      	movs	r3, #0
 801245e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012460:	2300      	movs	r3, #0
 8012462:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d106      	bne.n	8012478 <tcp_split_unsent_seg+0x2c>
 801246a:	4b95      	ldr	r3, [pc, #596]	; (80126c0 <tcp_split_unsent_seg+0x274>)
 801246c:	f240 324b 	movw	r2, #843	; 0x34b
 8012470:	4994      	ldr	r1, [pc, #592]	; (80126c4 <tcp_split_unsent_seg+0x278>)
 8012472:	4895      	ldr	r0, [pc, #596]	; (80126c8 <tcp_split_unsent_seg+0x27c>)
 8012474:	f006 fca0 	bl	8018db8 <iprintf>

  useg = pcb->unsent;
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801247c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801247e:	697b      	ldr	r3, [r7, #20]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d102      	bne.n	801248a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012484:	f04f 33ff 	mov.w	r3, #4294967295
 8012488:	e116      	b.n	80126b8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801248a:	887b      	ldrh	r3, [r7, #2]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d109      	bne.n	80124a4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012490:	4b8b      	ldr	r3, [pc, #556]	; (80126c0 <tcp_split_unsent_seg+0x274>)
 8012492:	f240 3253 	movw	r2, #851	; 0x353
 8012496:	498d      	ldr	r1, [pc, #564]	; (80126cc <tcp_split_unsent_seg+0x280>)
 8012498:	488b      	ldr	r0, [pc, #556]	; (80126c8 <tcp_split_unsent_seg+0x27c>)
 801249a:	f006 fc8d 	bl	8018db8 <iprintf>
    return ERR_VAL;
 801249e:	f06f 0305 	mvn.w	r3, #5
 80124a2:	e109      	b.n	80126b8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80124a4:	697b      	ldr	r3, [r7, #20]
 80124a6:	891b      	ldrh	r3, [r3, #8]
 80124a8:	887a      	ldrh	r2, [r7, #2]
 80124aa:	429a      	cmp	r2, r3
 80124ac:	d301      	bcc.n	80124b2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80124ae:	2300      	movs	r3, #0
 80124b0:	e102      	b.n	80126b8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80124b6:	887a      	ldrh	r2, [r7, #2]
 80124b8:	429a      	cmp	r2, r3
 80124ba:	d906      	bls.n	80124ca <tcp_split_unsent_seg+0x7e>
 80124bc:	4b80      	ldr	r3, [pc, #512]	; (80126c0 <tcp_split_unsent_seg+0x274>)
 80124be:	f240 325b 	movw	r2, #859	; 0x35b
 80124c2:	4983      	ldr	r1, [pc, #524]	; (80126d0 <tcp_split_unsent_seg+0x284>)
 80124c4:	4880      	ldr	r0, [pc, #512]	; (80126c8 <tcp_split_unsent_seg+0x27c>)
 80124c6:	f006 fc77 	bl	8018db8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80124ca:	697b      	ldr	r3, [r7, #20]
 80124cc:	891b      	ldrh	r3, [r3, #8]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d106      	bne.n	80124e0 <tcp_split_unsent_seg+0x94>
 80124d2:	4b7b      	ldr	r3, [pc, #492]	; (80126c0 <tcp_split_unsent_seg+0x274>)
 80124d4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80124d8:	497e      	ldr	r1, [pc, #504]	; (80126d4 <tcp_split_unsent_seg+0x288>)
 80124da:	487b      	ldr	r0, [pc, #492]	; (80126c8 <tcp_split_unsent_seg+0x27c>)
 80124dc:	f006 fc6c 	bl	8018db8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80124e0:	697b      	ldr	r3, [r7, #20]
 80124e2:	7a9b      	ldrb	r3, [r3, #10]
 80124e4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80124e6:	7bfb      	ldrb	r3, [r7, #15]
 80124e8:	009b      	lsls	r3, r3, #2
 80124ea:	b2db      	uxtb	r3, r3
 80124ec:	f003 0304 	and.w	r3, r3, #4
 80124f0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80124f2:	697b      	ldr	r3, [r7, #20]
 80124f4:	891a      	ldrh	r2, [r3, #8]
 80124f6:	887b      	ldrh	r3, [r7, #2]
 80124f8:	1ad3      	subs	r3, r2, r3
 80124fa:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80124fc:	7bbb      	ldrb	r3, [r7, #14]
 80124fe:	b29a      	uxth	r2, r3
 8012500:	89bb      	ldrh	r3, [r7, #12]
 8012502:	4413      	add	r3, r2
 8012504:	b29b      	uxth	r3, r3
 8012506:	f44f 7220 	mov.w	r2, #640	; 0x280
 801250a:	4619      	mov	r1, r3
 801250c:	2036      	movs	r0, #54	; 0x36
 801250e:	f7fa fa3d 	bl	800c98c <pbuf_alloc>
 8012512:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012514:	693b      	ldr	r3, [r7, #16]
 8012516:	2b00      	cmp	r3, #0
 8012518:	f000 80b7 	beq.w	801268a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801251c:	697b      	ldr	r3, [r7, #20]
 801251e:	685b      	ldr	r3, [r3, #4]
 8012520:	891a      	ldrh	r2, [r3, #8]
 8012522:	697b      	ldr	r3, [r7, #20]
 8012524:	891b      	ldrh	r3, [r3, #8]
 8012526:	1ad3      	subs	r3, r2, r3
 8012528:	b29a      	uxth	r2, r3
 801252a:	887b      	ldrh	r3, [r7, #2]
 801252c:	4413      	add	r3, r2
 801252e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012530:	697b      	ldr	r3, [r7, #20]
 8012532:	6858      	ldr	r0, [r3, #4]
 8012534:	693b      	ldr	r3, [r7, #16]
 8012536:	685a      	ldr	r2, [r3, #4]
 8012538:	7bbb      	ldrb	r3, [r7, #14]
 801253a:	18d1      	adds	r1, r2, r3
 801253c:	897b      	ldrh	r3, [r7, #10]
 801253e:	89ba      	ldrh	r2, [r7, #12]
 8012540:	f7fa ff0e 	bl	800d360 <pbuf_copy_partial>
 8012544:	4603      	mov	r3, r0
 8012546:	461a      	mov	r2, r3
 8012548:	89bb      	ldrh	r3, [r7, #12]
 801254a:	4293      	cmp	r3, r2
 801254c:	f040 809f 	bne.w	801268e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012550:	697b      	ldr	r3, [r7, #20]
 8012552:	68db      	ldr	r3, [r3, #12]
 8012554:	899b      	ldrh	r3, [r3, #12]
 8012556:	b29b      	uxth	r3, r3
 8012558:	4618      	mov	r0, r3
 801255a:	f7f9 f8c7 	bl	800b6ec <lwip_htons>
 801255e:	4603      	mov	r3, r0
 8012560:	b2db      	uxtb	r3, r3
 8012562:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012566:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012568:	2300      	movs	r3, #0
 801256a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801256c:	7efb      	ldrb	r3, [r7, #27]
 801256e:	f003 0308 	and.w	r3, r3, #8
 8012572:	2b00      	cmp	r3, #0
 8012574:	d007      	beq.n	8012586 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012576:	7efb      	ldrb	r3, [r7, #27]
 8012578:	f023 0308 	bic.w	r3, r3, #8
 801257c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801257e:	7ebb      	ldrb	r3, [r7, #26]
 8012580:	f043 0308 	orr.w	r3, r3, #8
 8012584:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012586:	7efb      	ldrb	r3, [r7, #27]
 8012588:	f003 0301 	and.w	r3, r3, #1
 801258c:	2b00      	cmp	r3, #0
 801258e:	d007      	beq.n	80125a0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012590:	7efb      	ldrb	r3, [r7, #27]
 8012592:	f023 0301 	bic.w	r3, r3, #1
 8012596:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012598:	7ebb      	ldrb	r3, [r7, #26]
 801259a:	f043 0301 	orr.w	r3, r3, #1
 801259e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80125a0:	697b      	ldr	r3, [r7, #20]
 80125a2:	68db      	ldr	r3, [r3, #12]
 80125a4:	685b      	ldr	r3, [r3, #4]
 80125a6:	4618      	mov	r0, r3
 80125a8:	f7f9 f8b5 	bl	800b716 <lwip_htonl>
 80125ac:	4602      	mov	r2, r0
 80125ae:	887b      	ldrh	r3, [r7, #2]
 80125b0:	18d1      	adds	r1, r2, r3
 80125b2:	7eba      	ldrb	r2, [r7, #26]
 80125b4:	7bfb      	ldrb	r3, [r7, #15]
 80125b6:	9300      	str	r3, [sp, #0]
 80125b8:	460b      	mov	r3, r1
 80125ba:	6939      	ldr	r1, [r7, #16]
 80125bc:	6878      	ldr	r0, [r7, #4]
 80125be:	f7ff fa4f 	bl	8011a60 <tcp_create_segment>
 80125c2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80125c4:	69fb      	ldr	r3, [r7, #28]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d063      	beq.n	8012692 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80125ca:	697b      	ldr	r3, [r7, #20]
 80125cc:	685b      	ldr	r3, [r3, #4]
 80125ce:	4618      	mov	r0, r3
 80125d0:	f7fa fd4e 	bl	800d070 <pbuf_clen>
 80125d4:	4603      	mov	r3, r0
 80125d6:	461a      	mov	r2, r3
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80125de:	1a9b      	subs	r3, r3, r2
 80125e0:	b29a      	uxth	r2, r3
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80125e8:	697b      	ldr	r3, [r7, #20]
 80125ea:	6858      	ldr	r0, [r3, #4]
 80125ec:	697b      	ldr	r3, [r7, #20]
 80125ee:	685b      	ldr	r3, [r3, #4]
 80125f0:	891a      	ldrh	r2, [r3, #8]
 80125f2:	89bb      	ldrh	r3, [r7, #12]
 80125f4:	1ad3      	subs	r3, r2, r3
 80125f6:	b29b      	uxth	r3, r3
 80125f8:	4619      	mov	r1, r3
 80125fa:	f7fa fb25 	bl	800cc48 <pbuf_realloc>
  useg->len -= remainder;
 80125fe:	697b      	ldr	r3, [r7, #20]
 8012600:	891a      	ldrh	r2, [r3, #8]
 8012602:	89bb      	ldrh	r3, [r7, #12]
 8012604:	1ad3      	subs	r3, r2, r3
 8012606:	b29a      	uxth	r2, r3
 8012608:	697b      	ldr	r3, [r7, #20]
 801260a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801260c:	697b      	ldr	r3, [r7, #20]
 801260e:	68db      	ldr	r3, [r3, #12]
 8012610:	899b      	ldrh	r3, [r3, #12]
 8012612:	b29c      	uxth	r4, r3
 8012614:	7efb      	ldrb	r3, [r7, #27]
 8012616:	b29b      	uxth	r3, r3
 8012618:	4618      	mov	r0, r3
 801261a:	f7f9 f867 	bl	800b6ec <lwip_htons>
 801261e:	4603      	mov	r3, r0
 8012620:	461a      	mov	r2, r3
 8012622:	697b      	ldr	r3, [r7, #20]
 8012624:	68db      	ldr	r3, [r3, #12]
 8012626:	4322      	orrs	r2, r4
 8012628:	b292      	uxth	r2, r2
 801262a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801262c:	697b      	ldr	r3, [r7, #20]
 801262e:	685b      	ldr	r3, [r3, #4]
 8012630:	4618      	mov	r0, r3
 8012632:	f7fa fd1d 	bl	800d070 <pbuf_clen>
 8012636:	4603      	mov	r3, r0
 8012638:	461a      	mov	r2, r3
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012640:	4413      	add	r3, r2
 8012642:	b29a      	uxth	r2, r3
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801264a:	69fb      	ldr	r3, [r7, #28]
 801264c:	685b      	ldr	r3, [r3, #4]
 801264e:	4618      	mov	r0, r3
 8012650:	f7fa fd0e 	bl	800d070 <pbuf_clen>
 8012654:	4603      	mov	r3, r0
 8012656:	461a      	mov	r2, r3
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801265e:	4413      	add	r3, r2
 8012660:	b29a      	uxth	r2, r3
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012668:	697b      	ldr	r3, [r7, #20]
 801266a:	681a      	ldr	r2, [r3, #0]
 801266c:	69fb      	ldr	r3, [r7, #28]
 801266e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012670:	697b      	ldr	r3, [r7, #20]
 8012672:	69fa      	ldr	r2, [r7, #28]
 8012674:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012676:	69fb      	ldr	r3, [r7, #28]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d103      	bne.n	8012686 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	2200      	movs	r2, #0
 8012682:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012686:	2300      	movs	r3, #0
 8012688:	e016      	b.n	80126b8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801268a:	bf00      	nop
 801268c:	e002      	b.n	8012694 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801268e:	bf00      	nop
 8012690:	e000      	b.n	8012694 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012692:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012694:	69fb      	ldr	r3, [r7, #28]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d006      	beq.n	80126a8 <tcp_split_unsent_seg+0x25c>
 801269a:	4b09      	ldr	r3, [pc, #36]	; (80126c0 <tcp_split_unsent_seg+0x274>)
 801269c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80126a0:	490d      	ldr	r1, [pc, #52]	; (80126d8 <tcp_split_unsent_seg+0x28c>)
 80126a2:	4809      	ldr	r0, [pc, #36]	; (80126c8 <tcp_split_unsent_seg+0x27c>)
 80126a4:	f006 fb88 	bl	8018db8 <iprintf>
  if (p != NULL) {
 80126a8:	693b      	ldr	r3, [r7, #16]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d002      	beq.n	80126b4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80126ae:	6938      	ldr	r0, [r7, #16]
 80126b0:	f7fa fc50 	bl	800cf54 <pbuf_free>
  }

  return ERR_MEM;
 80126b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80126b8:	4618      	mov	r0, r3
 80126ba:	3724      	adds	r7, #36	; 0x24
 80126bc:	46bd      	mov	sp, r7
 80126be:	bd90      	pop	{r4, r7, pc}
 80126c0:	0801c6f4 	.word	0x0801c6f4
 80126c4:	0801ca88 	.word	0x0801ca88
 80126c8:	0801c748 	.word	0x0801c748
 80126cc:	0801caac 	.word	0x0801caac
 80126d0:	0801cad0 	.word	0x0801cad0
 80126d4:	0801cae0 	.word	0x0801cae0
 80126d8:	0801caf0 	.word	0x0801caf0

080126dc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80126dc:	b590      	push	{r4, r7, lr}
 80126de:	b085      	sub	sp, #20
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d106      	bne.n	80126f8 <tcp_send_fin+0x1c>
 80126ea:	4b21      	ldr	r3, [pc, #132]	; (8012770 <tcp_send_fin+0x94>)
 80126ec:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80126f0:	4920      	ldr	r1, [pc, #128]	; (8012774 <tcp_send_fin+0x98>)
 80126f2:	4821      	ldr	r0, [pc, #132]	; (8012778 <tcp_send_fin+0x9c>)
 80126f4:	f006 fb60 	bl	8018db8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d02e      	beq.n	801275e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012704:	60fb      	str	r3, [r7, #12]
 8012706:	e002      	b.n	801270e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d1f8      	bne.n	8012708 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	68db      	ldr	r3, [r3, #12]
 801271a:	899b      	ldrh	r3, [r3, #12]
 801271c:	b29b      	uxth	r3, r3
 801271e:	4618      	mov	r0, r3
 8012720:	f7f8 ffe4 	bl	800b6ec <lwip_htons>
 8012724:	4603      	mov	r3, r0
 8012726:	b2db      	uxtb	r3, r3
 8012728:	f003 0307 	and.w	r3, r3, #7
 801272c:	2b00      	cmp	r3, #0
 801272e:	d116      	bne.n	801275e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	68db      	ldr	r3, [r3, #12]
 8012734:	899b      	ldrh	r3, [r3, #12]
 8012736:	b29c      	uxth	r4, r3
 8012738:	2001      	movs	r0, #1
 801273a:	f7f8 ffd7 	bl	800b6ec <lwip_htons>
 801273e:	4603      	mov	r3, r0
 8012740:	461a      	mov	r2, r3
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	68db      	ldr	r3, [r3, #12]
 8012746:	4322      	orrs	r2, r4
 8012748:	b292      	uxth	r2, r2
 801274a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	8b5b      	ldrh	r3, [r3, #26]
 8012750:	f043 0320 	orr.w	r3, r3, #32
 8012754:	b29a      	uxth	r2, r3
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801275a:	2300      	movs	r3, #0
 801275c:	e004      	b.n	8012768 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801275e:	2101      	movs	r1, #1
 8012760:	6878      	ldr	r0, [r7, #4]
 8012762:	f000 f80b 	bl	801277c <tcp_enqueue_flags>
 8012766:	4603      	mov	r3, r0
}
 8012768:	4618      	mov	r0, r3
 801276a:	3714      	adds	r7, #20
 801276c:	46bd      	mov	sp, r7
 801276e:	bd90      	pop	{r4, r7, pc}
 8012770:	0801c6f4 	.word	0x0801c6f4
 8012774:	0801cafc 	.word	0x0801cafc
 8012778:	0801c748 	.word	0x0801c748

0801277c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801277c:	b580      	push	{r7, lr}
 801277e:	b08a      	sub	sp, #40	; 0x28
 8012780:	af02      	add	r7, sp, #8
 8012782:	6078      	str	r0, [r7, #4]
 8012784:	460b      	mov	r3, r1
 8012786:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012788:	2300      	movs	r3, #0
 801278a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801278c:	2300      	movs	r3, #0
 801278e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012790:	78fb      	ldrb	r3, [r7, #3]
 8012792:	f003 0303 	and.w	r3, r3, #3
 8012796:	2b00      	cmp	r3, #0
 8012798:	d106      	bne.n	80127a8 <tcp_enqueue_flags+0x2c>
 801279a:	4b67      	ldr	r3, [pc, #412]	; (8012938 <tcp_enqueue_flags+0x1bc>)
 801279c:	f240 4211 	movw	r2, #1041	; 0x411
 80127a0:	4966      	ldr	r1, [pc, #408]	; (801293c <tcp_enqueue_flags+0x1c0>)
 80127a2:	4867      	ldr	r0, [pc, #412]	; (8012940 <tcp_enqueue_flags+0x1c4>)
 80127a4:	f006 fb08 	bl	8018db8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d106      	bne.n	80127bc <tcp_enqueue_flags+0x40>
 80127ae:	4b62      	ldr	r3, [pc, #392]	; (8012938 <tcp_enqueue_flags+0x1bc>)
 80127b0:	f240 4213 	movw	r2, #1043	; 0x413
 80127b4:	4963      	ldr	r1, [pc, #396]	; (8012944 <tcp_enqueue_flags+0x1c8>)
 80127b6:	4862      	ldr	r0, [pc, #392]	; (8012940 <tcp_enqueue_flags+0x1c4>)
 80127b8:	f006 fafe 	bl	8018db8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80127bc:	78fb      	ldrb	r3, [r7, #3]
 80127be:	f003 0302 	and.w	r3, r3, #2
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d001      	beq.n	80127ca <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80127c6:	2301      	movs	r3, #1
 80127c8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80127ca:	7ffb      	ldrb	r3, [r7, #31]
 80127cc:	009b      	lsls	r3, r3, #2
 80127ce:	b2db      	uxtb	r3, r3
 80127d0:	f003 0304 	and.w	r3, r3, #4
 80127d4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80127d6:	7dfb      	ldrb	r3, [r7, #23]
 80127d8:	b29b      	uxth	r3, r3
 80127da:	f44f 7220 	mov.w	r2, #640	; 0x280
 80127de:	4619      	mov	r1, r3
 80127e0:	2036      	movs	r0, #54	; 0x36
 80127e2:	f7fa f8d3 	bl	800c98c <pbuf_alloc>
 80127e6:	6138      	str	r0, [r7, #16]
 80127e8:	693b      	ldr	r3, [r7, #16]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d109      	bne.n	8012802 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	8b5b      	ldrh	r3, [r3, #26]
 80127f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127f6:	b29a      	uxth	r2, r3
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80127fc:	f04f 33ff 	mov.w	r3, #4294967295
 8012800:	e095      	b.n	801292e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012802:	693b      	ldr	r3, [r7, #16]
 8012804:	895a      	ldrh	r2, [r3, #10]
 8012806:	7dfb      	ldrb	r3, [r7, #23]
 8012808:	b29b      	uxth	r3, r3
 801280a:	429a      	cmp	r2, r3
 801280c:	d206      	bcs.n	801281c <tcp_enqueue_flags+0xa0>
 801280e:	4b4a      	ldr	r3, [pc, #296]	; (8012938 <tcp_enqueue_flags+0x1bc>)
 8012810:	f240 4239 	movw	r2, #1081	; 0x439
 8012814:	494c      	ldr	r1, [pc, #304]	; (8012948 <tcp_enqueue_flags+0x1cc>)
 8012816:	484a      	ldr	r0, [pc, #296]	; (8012940 <tcp_enqueue_flags+0x1c4>)
 8012818:	f006 face 	bl	8018db8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012820:	78fa      	ldrb	r2, [r7, #3]
 8012822:	7ffb      	ldrb	r3, [r7, #31]
 8012824:	9300      	str	r3, [sp, #0]
 8012826:	460b      	mov	r3, r1
 8012828:	6939      	ldr	r1, [r7, #16]
 801282a:	6878      	ldr	r0, [r7, #4]
 801282c:	f7ff f918 	bl	8011a60 <tcp_create_segment>
 8012830:	60f8      	str	r0, [r7, #12]
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d109      	bne.n	801284c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	8b5b      	ldrh	r3, [r3, #26]
 801283c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012840:	b29a      	uxth	r2, r3
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012846:	f04f 33ff 	mov.w	r3, #4294967295
 801284a:	e070      	b.n	801292e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	68db      	ldr	r3, [r3, #12]
 8012850:	f003 0303 	and.w	r3, r3, #3
 8012854:	2b00      	cmp	r3, #0
 8012856:	d006      	beq.n	8012866 <tcp_enqueue_flags+0xea>
 8012858:	4b37      	ldr	r3, [pc, #220]	; (8012938 <tcp_enqueue_flags+0x1bc>)
 801285a:	f240 4242 	movw	r2, #1090	; 0x442
 801285e:	493b      	ldr	r1, [pc, #236]	; (801294c <tcp_enqueue_flags+0x1d0>)
 8012860:	4837      	ldr	r0, [pc, #220]	; (8012940 <tcp_enqueue_flags+0x1c4>)
 8012862:	f006 faa9 	bl	8018db8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	891b      	ldrh	r3, [r3, #8]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d006      	beq.n	801287c <tcp_enqueue_flags+0x100>
 801286e:	4b32      	ldr	r3, [pc, #200]	; (8012938 <tcp_enqueue_flags+0x1bc>)
 8012870:	f240 4243 	movw	r2, #1091	; 0x443
 8012874:	4936      	ldr	r1, [pc, #216]	; (8012950 <tcp_enqueue_flags+0x1d4>)
 8012876:	4832      	ldr	r0, [pc, #200]	; (8012940 <tcp_enqueue_flags+0x1c4>)
 8012878:	f006 fa9e 	bl	8018db8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012880:	2b00      	cmp	r3, #0
 8012882:	d103      	bne.n	801288c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	68fa      	ldr	r2, [r7, #12]
 8012888:	66da      	str	r2, [r3, #108]	; 0x6c
 801288a:	e00d      	b.n	80128a8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012890:	61bb      	str	r3, [r7, #24]
 8012892:	e002      	b.n	801289a <tcp_enqueue_flags+0x11e>
 8012894:	69bb      	ldr	r3, [r7, #24]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	61bb      	str	r3, [r7, #24]
 801289a:	69bb      	ldr	r3, [r7, #24]
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d1f8      	bne.n	8012894 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80128a2:	69bb      	ldr	r3, [r7, #24]
 80128a4:	68fa      	ldr	r2, [r7, #12]
 80128a6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	2200      	movs	r2, #0
 80128ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80128b0:	78fb      	ldrb	r3, [r7, #3]
 80128b2:	f003 0302 	and.w	r3, r3, #2
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d104      	bne.n	80128c4 <tcp_enqueue_flags+0x148>
 80128ba:	78fb      	ldrb	r3, [r7, #3]
 80128bc:	f003 0301 	and.w	r3, r3, #1
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d004      	beq.n	80128ce <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80128c8:	1c5a      	adds	r2, r3, #1
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80128ce:	78fb      	ldrb	r3, [r7, #3]
 80128d0:	f003 0301 	and.w	r3, r3, #1
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d006      	beq.n	80128e6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	8b5b      	ldrh	r3, [r3, #26]
 80128dc:	f043 0320 	orr.w	r3, r3, #32
 80128e0:	b29a      	uxth	r2, r3
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	685b      	ldr	r3, [r3, #4]
 80128ea:	4618      	mov	r0, r3
 80128ec:	f7fa fbc0 	bl	800d070 <pbuf_clen>
 80128f0:	4603      	mov	r3, r0
 80128f2:	461a      	mov	r2, r3
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80128fa:	4413      	add	r3, r2
 80128fc:	b29a      	uxth	r2, r3
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801290a:	2b00      	cmp	r3, #0
 801290c:	d00e      	beq.n	801292c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012912:	2b00      	cmp	r3, #0
 8012914:	d10a      	bne.n	801292c <tcp_enqueue_flags+0x1b0>
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801291a:	2b00      	cmp	r3, #0
 801291c:	d106      	bne.n	801292c <tcp_enqueue_flags+0x1b0>
 801291e:	4b06      	ldr	r3, [pc, #24]	; (8012938 <tcp_enqueue_flags+0x1bc>)
 8012920:	f240 4265 	movw	r2, #1125	; 0x465
 8012924:	490b      	ldr	r1, [pc, #44]	; (8012954 <tcp_enqueue_flags+0x1d8>)
 8012926:	4806      	ldr	r0, [pc, #24]	; (8012940 <tcp_enqueue_flags+0x1c4>)
 8012928:	f006 fa46 	bl	8018db8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801292c:	2300      	movs	r3, #0
}
 801292e:	4618      	mov	r0, r3
 8012930:	3720      	adds	r7, #32
 8012932:	46bd      	mov	sp, r7
 8012934:	bd80      	pop	{r7, pc}
 8012936:	bf00      	nop
 8012938:	0801c6f4 	.word	0x0801c6f4
 801293c:	0801cb18 	.word	0x0801cb18
 8012940:	0801c748 	.word	0x0801c748
 8012944:	0801cb70 	.word	0x0801cb70
 8012948:	0801cb90 	.word	0x0801cb90
 801294c:	0801cbcc 	.word	0x0801cbcc
 8012950:	0801cbe4 	.word	0x0801cbe4
 8012954:	0801cc10 	.word	0x0801cc10

08012958 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012958:	b5b0      	push	{r4, r5, r7, lr}
 801295a:	b08a      	sub	sp, #40	; 0x28
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d106      	bne.n	8012974 <tcp_output+0x1c>
 8012966:	4b8a      	ldr	r3, [pc, #552]	; (8012b90 <tcp_output+0x238>)
 8012968:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801296c:	4989      	ldr	r1, [pc, #548]	; (8012b94 <tcp_output+0x23c>)
 801296e:	488a      	ldr	r0, [pc, #552]	; (8012b98 <tcp_output+0x240>)
 8012970:	f006 fa22 	bl	8018db8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	7d1b      	ldrb	r3, [r3, #20]
 8012978:	2b01      	cmp	r3, #1
 801297a:	d106      	bne.n	801298a <tcp_output+0x32>
 801297c:	4b84      	ldr	r3, [pc, #528]	; (8012b90 <tcp_output+0x238>)
 801297e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012982:	4986      	ldr	r1, [pc, #536]	; (8012b9c <tcp_output+0x244>)
 8012984:	4884      	ldr	r0, [pc, #528]	; (8012b98 <tcp_output+0x240>)
 8012986:	f006 fa17 	bl	8018db8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801298a:	4b85      	ldr	r3, [pc, #532]	; (8012ba0 <tcp_output+0x248>)
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	687a      	ldr	r2, [r7, #4]
 8012990:	429a      	cmp	r2, r3
 8012992:	d101      	bne.n	8012998 <tcp_output+0x40>
    return ERR_OK;
 8012994:	2300      	movs	r3, #0
 8012996:	e1ce      	b.n	8012d36 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80129a4:	4293      	cmp	r3, r2
 80129a6:	bf28      	it	cs
 80129a8:	4613      	movcs	r3, r2
 80129aa:	b29b      	uxth	r3, r3
 80129ac:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80129b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d10b      	bne.n	80129d2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	8b5b      	ldrh	r3, [r3, #26]
 80129be:	f003 0302 	and.w	r3, r3, #2
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	f000 81aa 	beq.w	8012d1c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80129c8:	6878      	ldr	r0, [r7, #4]
 80129ca:	f000 fdcb 	bl	8013564 <tcp_send_empty_ack>
 80129ce:	4603      	mov	r3, r0
 80129d0:	e1b1      	b.n	8012d36 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80129d2:	6879      	ldr	r1, [r7, #4]
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	3304      	adds	r3, #4
 80129d8:	461a      	mov	r2, r3
 80129da:	6878      	ldr	r0, [r7, #4]
 80129dc:	f7ff f824 	bl	8011a28 <tcp_route>
 80129e0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80129e2:	697b      	ldr	r3, [r7, #20]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d102      	bne.n	80129ee <tcp_output+0x96>
    return ERR_RTE;
 80129e8:	f06f 0303 	mvn.w	r3, #3
 80129ec:	e1a3      	b.n	8012d36 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d003      	beq.n	80129fc <tcp_output+0xa4>
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d111      	bne.n	8012a20 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80129fc:	697b      	ldr	r3, [r7, #20]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d002      	beq.n	8012a08 <tcp_output+0xb0>
 8012a02:	697b      	ldr	r3, [r7, #20]
 8012a04:	3304      	adds	r3, #4
 8012a06:	e000      	b.n	8012a0a <tcp_output+0xb2>
 8012a08:	2300      	movs	r3, #0
 8012a0a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012a0c:	693b      	ldr	r3, [r7, #16]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d102      	bne.n	8012a18 <tcp_output+0xc0>
      return ERR_RTE;
 8012a12:	f06f 0303 	mvn.w	r3, #3
 8012a16:	e18e      	b.n	8012d36 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012a18:	693b      	ldr	r3, [r7, #16]
 8012a1a:	681a      	ldr	r2, [r3, #0]
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a22:	68db      	ldr	r3, [r3, #12]
 8012a24:	685b      	ldr	r3, [r3, #4]
 8012a26:	4618      	mov	r0, r3
 8012a28:	f7f8 fe75 	bl	800b716 <lwip_htonl>
 8012a2c:	4602      	mov	r2, r0
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a32:	1ad3      	subs	r3, r2, r3
 8012a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a36:	8912      	ldrh	r2, [r2, #8]
 8012a38:	4413      	add	r3, r2
 8012a3a:	69ba      	ldr	r2, [r7, #24]
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	d227      	bcs.n	8012a90 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012a46:	461a      	mov	r2, r3
 8012a48:	69bb      	ldr	r3, [r7, #24]
 8012a4a:	4293      	cmp	r3, r2
 8012a4c:	d114      	bne.n	8012a78 <tcp_output+0x120>
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d110      	bne.n	8012a78 <tcp_output+0x120>
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d10b      	bne.n	8012a78 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	2200      	movs	r2, #0
 8012a64:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	2201      	movs	r2, #1
 8012a6c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	2200      	movs	r2, #0
 8012a74:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	8b5b      	ldrh	r3, [r3, #26]
 8012a7c:	f003 0302 	and.w	r3, r3, #2
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	f000 814d 	beq.w	8012d20 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012a86:	6878      	ldr	r0, [r7, #4]
 8012a88:	f000 fd6c 	bl	8013564 <tcp_send_empty_ack>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	e152      	b.n	8012d36 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	2200      	movs	r2, #0
 8012a94:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a9c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012a9e:	6a3b      	ldr	r3, [r7, #32]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	f000 811c 	beq.w	8012cde <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012aa6:	e002      	b.n	8012aae <tcp_output+0x156>
 8012aa8:	6a3b      	ldr	r3, [r7, #32]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	623b      	str	r3, [r7, #32]
 8012aae:	6a3b      	ldr	r3, [r7, #32]
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d1f8      	bne.n	8012aa8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012ab6:	e112      	b.n	8012cde <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aba:	68db      	ldr	r3, [r3, #12]
 8012abc:	899b      	ldrh	r3, [r3, #12]
 8012abe:	b29b      	uxth	r3, r3
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f7f8 fe13 	bl	800b6ec <lwip_htons>
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	b2db      	uxtb	r3, r3
 8012aca:	f003 0304 	and.w	r3, r3, #4
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d006      	beq.n	8012ae0 <tcp_output+0x188>
 8012ad2:	4b2f      	ldr	r3, [pc, #188]	; (8012b90 <tcp_output+0x238>)
 8012ad4:	f240 5236 	movw	r2, #1334	; 0x536
 8012ad8:	4932      	ldr	r1, [pc, #200]	; (8012ba4 <tcp_output+0x24c>)
 8012ada:	482f      	ldr	r0, [pc, #188]	; (8012b98 <tcp_output+0x240>)
 8012adc:	f006 f96c 	bl	8018db8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d01f      	beq.n	8012b28 <tcp_output+0x1d0>
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	8b5b      	ldrh	r3, [r3, #26]
 8012aec:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d119      	bne.n	8012b28 <tcp_output+0x1d0>
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d00b      	beq.n	8012b14 <tcp_output+0x1bc>
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d110      	bne.n	8012b28 <tcp_output+0x1d0>
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b0a:	891a      	ldrh	r2, [r3, #8]
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012b10:	429a      	cmp	r2, r3
 8012b12:	d209      	bcs.n	8012b28 <tcp_output+0x1d0>
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d004      	beq.n	8012b28 <tcp_output+0x1d0>
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012b24:	2b08      	cmp	r3, #8
 8012b26:	d901      	bls.n	8012b2c <tcp_output+0x1d4>
 8012b28:	2301      	movs	r3, #1
 8012b2a:	e000      	b.n	8012b2e <tcp_output+0x1d6>
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d106      	bne.n	8012b40 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	8b5b      	ldrh	r3, [r3, #26]
 8012b36:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	f000 80e4 	beq.w	8012d08 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	7d1b      	ldrb	r3, [r3, #20]
 8012b44:	2b02      	cmp	r3, #2
 8012b46:	d00d      	beq.n	8012b64 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b4a:	68db      	ldr	r3, [r3, #12]
 8012b4c:	899b      	ldrh	r3, [r3, #12]
 8012b4e:	b29c      	uxth	r4, r3
 8012b50:	2010      	movs	r0, #16
 8012b52:	f7f8 fdcb 	bl	800b6ec <lwip_htons>
 8012b56:	4603      	mov	r3, r0
 8012b58:	461a      	mov	r2, r3
 8012b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b5c:	68db      	ldr	r3, [r3, #12]
 8012b5e:	4322      	orrs	r2, r4
 8012b60:	b292      	uxth	r2, r2
 8012b62:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012b64:	697a      	ldr	r2, [r7, #20]
 8012b66:	6879      	ldr	r1, [r7, #4]
 8012b68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b6a:	f000 f909 	bl	8012d80 <tcp_output_segment>
 8012b6e:	4603      	mov	r3, r0
 8012b70:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d016      	beq.n	8012ba8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	8b5b      	ldrh	r3, [r3, #26]
 8012b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b82:	b29a      	uxth	r2, r3
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	835a      	strh	r2, [r3, #26]
      return err;
 8012b88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b8c:	e0d3      	b.n	8012d36 <tcp_output+0x3de>
 8012b8e:	bf00      	nop
 8012b90:	0801c6f4 	.word	0x0801c6f4
 8012b94:	0801cc38 	.word	0x0801cc38
 8012b98:	0801c748 	.word	0x0801c748
 8012b9c:	0801cc50 	.word	0x0801cc50
 8012ba0:	20010fbc 	.word	0x20010fbc
 8012ba4:	0801cc78 	.word	0x0801cc78
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012baa:	681a      	ldr	r2, [r3, #0]
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	7d1b      	ldrb	r3, [r3, #20]
 8012bb4:	2b02      	cmp	r3, #2
 8012bb6:	d006      	beq.n	8012bc6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	8b5b      	ldrh	r3, [r3, #26]
 8012bbc:	f023 0303 	bic.w	r3, r3, #3
 8012bc0:	b29a      	uxth	r2, r3
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc8:	68db      	ldr	r3, [r3, #12]
 8012bca:	685b      	ldr	r3, [r3, #4]
 8012bcc:	4618      	mov	r0, r3
 8012bce:	f7f8 fda2 	bl	800b716 <lwip_htonl>
 8012bd2:	4604      	mov	r4, r0
 8012bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bd6:	891b      	ldrh	r3, [r3, #8]
 8012bd8:	461d      	mov	r5, r3
 8012bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bdc:	68db      	ldr	r3, [r3, #12]
 8012bde:	899b      	ldrh	r3, [r3, #12]
 8012be0:	b29b      	uxth	r3, r3
 8012be2:	4618      	mov	r0, r3
 8012be4:	f7f8 fd82 	bl	800b6ec <lwip_htons>
 8012be8:	4603      	mov	r3, r0
 8012bea:	b2db      	uxtb	r3, r3
 8012bec:	f003 0303 	and.w	r3, r3, #3
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d001      	beq.n	8012bf8 <tcp_output+0x2a0>
 8012bf4:	2301      	movs	r3, #1
 8012bf6:	e000      	b.n	8012bfa <tcp_output+0x2a2>
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	442b      	add	r3, r5
 8012bfc:	4423      	add	r3, r4
 8012bfe:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012c04:	68bb      	ldr	r3, [r7, #8]
 8012c06:	1ad3      	subs	r3, r2, r3
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	da02      	bge.n	8012c12 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	68ba      	ldr	r2, [r7, #8]
 8012c10:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c14:	891b      	ldrh	r3, [r3, #8]
 8012c16:	461c      	mov	r4, r3
 8012c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c1a:	68db      	ldr	r3, [r3, #12]
 8012c1c:	899b      	ldrh	r3, [r3, #12]
 8012c1e:	b29b      	uxth	r3, r3
 8012c20:	4618      	mov	r0, r3
 8012c22:	f7f8 fd63 	bl	800b6ec <lwip_htons>
 8012c26:	4603      	mov	r3, r0
 8012c28:	b2db      	uxtb	r3, r3
 8012c2a:	f003 0303 	and.w	r3, r3, #3
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d001      	beq.n	8012c36 <tcp_output+0x2de>
 8012c32:	2301      	movs	r3, #1
 8012c34:	e000      	b.n	8012c38 <tcp_output+0x2e0>
 8012c36:	2300      	movs	r3, #0
 8012c38:	4423      	add	r3, r4
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d049      	beq.n	8012cd2 <tcp_output+0x37a>
      seg->next = NULL;
 8012c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c40:	2200      	movs	r2, #0
 8012c42:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d105      	bne.n	8012c58 <tcp_output+0x300>
        pcb->unacked = seg;
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c50:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c54:	623b      	str	r3, [r7, #32]
 8012c56:	e03f      	b.n	8012cd8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c5a:	68db      	ldr	r3, [r3, #12]
 8012c5c:	685b      	ldr	r3, [r3, #4]
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f7f8 fd59 	bl	800b716 <lwip_htonl>
 8012c64:	4604      	mov	r4, r0
 8012c66:	6a3b      	ldr	r3, [r7, #32]
 8012c68:	68db      	ldr	r3, [r3, #12]
 8012c6a:	685b      	ldr	r3, [r3, #4]
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f7f8 fd52 	bl	800b716 <lwip_htonl>
 8012c72:	4603      	mov	r3, r0
 8012c74:	1ae3      	subs	r3, r4, r3
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	da24      	bge.n	8012cc4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	3370      	adds	r3, #112	; 0x70
 8012c7e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012c80:	e002      	b.n	8012c88 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012c82:	69fb      	ldr	r3, [r7, #28]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012c88:	69fb      	ldr	r3, [r7, #28]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d011      	beq.n	8012cb4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012c90:	69fb      	ldr	r3, [r7, #28]
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	68db      	ldr	r3, [r3, #12]
 8012c96:	685b      	ldr	r3, [r3, #4]
 8012c98:	4618      	mov	r0, r3
 8012c9a:	f7f8 fd3c 	bl	800b716 <lwip_htonl>
 8012c9e:	4604      	mov	r4, r0
 8012ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ca2:	68db      	ldr	r3, [r3, #12]
 8012ca4:	685b      	ldr	r3, [r3, #4]
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	f7f8 fd35 	bl	800b716 <lwip_htonl>
 8012cac:	4603      	mov	r3, r0
 8012cae:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	dbe6      	blt.n	8012c82 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012cb4:	69fb      	ldr	r3, [r7, #28]
 8012cb6:	681a      	ldr	r2, [r3, #0]
 8012cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cba:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012cbc:	69fb      	ldr	r3, [r7, #28]
 8012cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012cc0:	601a      	str	r2, [r3, #0]
 8012cc2:	e009      	b.n	8012cd8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012cc4:	6a3b      	ldr	r3, [r7, #32]
 8012cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012cc8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012cca:	6a3b      	ldr	r3, [r7, #32]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	623b      	str	r3, [r7, #32]
 8012cd0:	e002      	b.n	8012cd8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012cd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012cd4:	f7fb fefb 	bl	800eace <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cdc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d012      	beq.n	8012d0a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ce6:	68db      	ldr	r3, [r3, #12]
 8012ce8:	685b      	ldr	r3, [r3, #4]
 8012cea:	4618      	mov	r0, r3
 8012cec:	f7f8 fd13 	bl	800b716 <lwip_htonl>
 8012cf0:	4602      	mov	r2, r0
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012cf6:	1ad3      	subs	r3, r2, r3
 8012cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012cfa:	8912      	ldrh	r2, [r2, #8]
 8012cfc:	4413      	add	r3, r2
  while (seg != NULL &&
 8012cfe:	69ba      	ldr	r2, [r7, #24]
 8012d00:	429a      	cmp	r2, r3
 8012d02:	f4bf aed9 	bcs.w	8012ab8 <tcp_output+0x160>
 8012d06:	e000      	b.n	8012d0a <tcp_output+0x3b2>
      break;
 8012d08:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d108      	bne.n	8012d24 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	2200      	movs	r2, #0
 8012d16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012d1a:	e004      	b.n	8012d26 <tcp_output+0x3ce>
    goto output_done;
 8012d1c:	bf00      	nop
 8012d1e:	e002      	b.n	8012d26 <tcp_output+0x3ce>
    goto output_done;
 8012d20:	bf00      	nop
 8012d22:	e000      	b.n	8012d26 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012d24:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	8b5b      	ldrh	r3, [r3, #26]
 8012d2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012d2e:	b29a      	uxth	r2, r3
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012d34:	2300      	movs	r3, #0
}
 8012d36:	4618      	mov	r0, r3
 8012d38:	3728      	adds	r7, #40	; 0x28
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8012d3e:	bf00      	nop

08012d40 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b082      	sub	sp, #8
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d106      	bne.n	8012d5c <tcp_output_segment_busy+0x1c>
 8012d4e:	4b09      	ldr	r3, [pc, #36]	; (8012d74 <tcp_output_segment_busy+0x34>)
 8012d50:	f240 529a 	movw	r2, #1434	; 0x59a
 8012d54:	4908      	ldr	r1, [pc, #32]	; (8012d78 <tcp_output_segment_busy+0x38>)
 8012d56:	4809      	ldr	r0, [pc, #36]	; (8012d7c <tcp_output_segment_busy+0x3c>)
 8012d58:	f006 f82e 	bl	8018db8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	685b      	ldr	r3, [r3, #4]
 8012d60:	7b9b      	ldrb	r3, [r3, #14]
 8012d62:	2b01      	cmp	r3, #1
 8012d64:	d001      	beq.n	8012d6a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012d66:	2301      	movs	r3, #1
 8012d68:	e000      	b.n	8012d6c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012d6a:	2300      	movs	r3, #0
}
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	3708      	adds	r7, #8
 8012d70:	46bd      	mov	sp, r7
 8012d72:	bd80      	pop	{r7, pc}
 8012d74:	0801c6f4 	.word	0x0801c6f4
 8012d78:	0801cc90 	.word	0x0801cc90
 8012d7c:	0801c748 	.word	0x0801c748

08012d80 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012d80:	b5b0      	push	{r4, r5, r7, lr}
 8012d82:	b08c      	sub	sp, #48	; 0x30
 8012d84:	af04      	add	r7, sp, #16
 8012d86:	60f8      	str	r0, [r7, #12]
 8012d88:	60b9      	str	r1, [r7, #8]
 8012d8a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d106      	bne.n	8012da0 <tcp_output_segment+0x20>
 8012d92:	4b64      	ldr	r3, [pc, #400]	; (8012f24 <tcp_output_segment+0x1a4>)
 8012d94:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012d98:	4963      	ldr	r1, [pc, #396]	; (8012f28 <tcp_output_segment+0x1a8>)
 8012d9a:	4864      	ldr	r0, [pc, #400]	; (8012f2c <tcp_output_segment+0x1ac>)
 8012d9c:	f006 f80c 	bl	8018db8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d106      	bne.n	8012db4 <tcp_output_segment+0x34>
 8012da6:	4b5f      	ldr	r3, [pc, #380]	; (8012f24 <tcp_output_segment+0x1a4>)
 8012da8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012dac:	4960      	ldr	r1, [pc, #384]	; (8012f30 <tcp_output_segment+0x1b0>)
 8012dae:	485f      	ldr	r0, [pc, #380]	; (8012f2c <tcp_output_segment+0x1ac>)
 8012db0:	f006 f802 	bl	8018db8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d106      	bne.n	8012dc8 <tcp_output_segment+0x48>
 8012dba:	4b5a      	ldr	r3, [pc, #360]	; (8012f24 <tcp_output_segment+0x1a4>)
 8012dbc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012dc0:	495c      	ldr	r1, [pc, #368]	; (8012f34 <tcp_output_segment+0x1b4>)
 8012dc2:	485a      	ldr	r0, [pc, #360]	; (8012f2c <tcp_output_segment+0x1ac>)
 8012dc4:	f005 fff8 	bl	8018db8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012dc8:	68f8      	ldr	r0, [r7, #12]
 8012dca:	f7ff ffb9 	bl	8012d40 <tcp_output_segment_busy>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d001      	beq.n	8012dd8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	e0a1      	b.n	8012f1c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012dd8:	68bb      	ldr	r3, [r7, #8]
 8012dda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	68dc      	ldr	r4, [r3, #12]
 8012de0:	4610      	mov	r0, r2
 8012de2:	f7f8 fc98 	bl	800b716 <lwip_htonl>
 8012de6:	4603      	mov	r3, r0
 8012de8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012dea:	68bb      	ldr	r3, [r7, #8]
 8012dec:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	68dc      	ldr	r4, [r3, #12]
 8012df2:	4610      	mov	r0, r2
 8012df4:	f7f8 fc7a 	bl	800b6ec <lwip_htons>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012dfc:	68bb      	ldr	r3, [r7, #8]
 8012dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e00:	68ba      	ldr	r2, [r7, #8]
 8012e02:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012e04:	441a      	add	r2, r3
 8012e06:	68bb      	ldr	r3, [r7, #8]
 8012e08:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	68db      	ldr	r3, [r3, #12]
 8012e0e:	3314      	adds	r3, #20
 8012e10:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	7a9b      	ldrb	r3, [r3, #10]
 8012e16:	f003 0301 	and.w	r3, r3, #1
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d015      	beq.n	8012e4a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012e1e:	68bb      	ldr	r3, [r7, #8]
 8012e20:	3304      	adds	r3, #4
 8012e22:	461a      	mov	r2, r3
 8012e24:	6879      	ldr	r1, [r7, #4]
 8012e26:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012e2a:	f7fc fa33 	bl	800f294 <tcp_eff_send_mss_netif>
 8012e2e:	4603      	mov	r3, r0
 8012e30:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012e32:	8b7b      	ldrh	r3, [r7, #26]
 8012e34:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012e38:	4618      	mov	r0, r3
 8012e3a:	f7f8 fc6c 	bl	800b716 <lwip_htonl>
 8012e3e:	4602      	mov	r2, r0
 8012e40:	69fb      	ldr	r3, [r7, #28]
 8012e42:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012e44:	69fb      	ldr	r3, [r7, #28]
 8012e46:	3304      	adds	r3, #4
 8012e48:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012e4a:	68bb      	ldr	r3, [r7, #8]
 8012e4c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	da02      	bge.n	8012e5a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012e54:	68bb      	ldr	r3, [r7, #8]
 8012e56:	2200      	movs	r2, #0
 8012e58:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012e5a:	68bb      	ldr	r3, [r7, #8]
 8012e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d10c      	bne.n	8012e7c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012e62:	4b35      	ldr	r3, [pc, #212]	; (8012f38 <tcp_output_segment+0x1b8>)
 8012e64:	681a      	ldr	r2, [r3, #0]
 8012e66:	68bb      	ldr	r3, [r7, #8]
 8012e68:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	68db      	ldr	r3, [r3, #12]
 8012e6e:	685b      	ldr	r3, [r3, #4]
 8012e70:	4618      	mov	r0, r3
 8012e72:	f7f8 fc50 	bl	800b716 <lwip_htonl>
 8012e76:	4602      	mov	r2, r0
 8012e78:	68bb      	ldr	r3, [r7, #8]
 8012e7a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	68da      	ldr	r2, [r3, #12]
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	685b      	ldr	r3, [r3, #4]
 8012e84:	685b      	ldr	r3, [r3, #4]
 8012e86:	1ad3      	subs	r3, r2, r3
 8012e88:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	685b      	ldr	r3, [r3, #4]
 8012e8e:	8959      	ldrh	r1, [r3, #10]
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	685b      	ldr	r3, [r3, #4]
 8012e94:	8b3a      	ldrh	r2, [r7, #24]
 8012e96:	1a8a      	subs	r2, r1, r2
 8012e98:	b292      	uxth	r2, r2
 8012e9a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	685b      	ldr	r3, [r3, #4]
 8012ea0:	8919      	ldrh	r1, [r3, #8]
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	685b      	ldr	r3, [r3, #4]
 8012ea6:	8b3a      	ldrh	r2, [r7, #24]
 8012ea8:	1a8a      	subs	r2, r1, r2
 8012eaa:	b292      	uxth	r2, r2
 8012eac:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	685b      	ldr	r3, [r3, #4]
 8012eb2:	68fa      	ldr	r2, [r7, #12]
 8012eb4:	68d2      	ldr	r2, [r2, #12]
 8012eb6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	68db      	ldr	r3, [r3, #12]
 8012ebc:	2200      	movs	r2, #0
 8012ebe:	741a      	strb	r2, [r3, #16]
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	68da      	ldr	r2, [r3, #12]
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	7a9b      	ldrb	r3, [r3, #10]
 8012ecc:	f003 0301 	and.w	r3, r3, #1
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d001      	beq.n	8012ed8 <tcp_output_segment+0x158>
 8012ed4:	2318      	movs	r3, #24
 8012ed6:	e000      	b.n	8012eda <tcp_output_segment+0x15a>
 8012ed8:	2314      	movs	r3, #20
 8012eda:	4413      	add	r3, r2
 8012edc:	69fa      	ldr	r2, [r7, #28]
 8012ede:	429a      	cmp	r2, r3
 8012ee0:	d006      	beq.n	8012ef0 <tcp_output_segment+0x170>
 8012ee2:	4b10      	ldr	r3, [pc, #64]	; (8012f24 <tcp_output_segment+0x1a4>)
 8012ee4:	f240 621c 	movw	r2, #1564	; 0x61c
 8012ee8:	4914      	ldr	r1, [pc, #80]	; (8012f3c <tcp_output_segment+0x1bc>)
 8012eea:	4810      	ldr	r0, [pc, #64]	; (8012f2c <tcp_output_segment+0x1ac>)
 8012eec:	f005 ff64 	bl	8018db8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	6858      	ldr	r0, [r3, #4]
 8012ef4:	68b9      	ldr	r1, [r7, #8]
 8012ef6:	68bb      	ldr	r3, [r7, #8]
 8012ef8:	1d1c      	adds	r4, r3, #4
 8012efa:	68bb      	ldr	r3, [r7, #8]
 8012efc:	7add      	ldrb	r5, [r3, #11]
 8012efe:	68bb      	ldr	r3, [r7, #8]
 8012f00:	7a9b      	ldrb	r3, [r3, #10]
 8012f02:	687a      	ldr	r2, [r7, #4]
 8012f04:	9202      	str	r2, [sp, #8]
 8012f06:	2206      	movs	r2, #6
 8012f08:	9201      	str	r2, [sp, #4]
 8012f0a:	9300      	str	r3, [sp, #0]
 8012f0c:	462b      	mov	r3, r5
 8012f0e:	4622      	mov	r2, r4
 8012f10:	f004 fc26 	bl	8017760 <ip4_output_if>
 8012f14:	4603      	mov	r3, r0
 8012f16:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012f18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	3720      	adds	r7, #32
 8012f20:	46bd      	mov	sp, r7
 8012f22:	bdb0      	pop	{r4, r5, r7, pc}
 8012f24:	0801c6f4 	.word	0x0801c6f4
 8012f28:	0801ccb8 	.word	0x0801ccb8
 8012f2c:	0801c748 	.word	0x0801c748
 8012f30:	0801ccd8 	.word	0x0801ccd8
 8012f34:	0801ccf8 	.word	0x0801ccf8
 8012f38:	20010f70 	.word	0x20010f70
 8012f3c:	0801cd1c 	.word	0x0801cd1c

08012f40 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012f40:	b5b0      	push	{r4, r5, r7, lr}
 8012f42:	b084      	sub	sp, #16
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d106      	bne.n	8012f5c <tcp_rexmit_rto_prepare+0x1c>
 8012f4e:	4b31      	ldr	r3, [pc, #196]	; (8013014 <tcp_rexmit_rto_prepare+0xd4>)
 8012f50:	f240 6263 	movw	r2, #1635	; 0x663
 8012f54:	4930      	ldr	r1, [pc, #192]	; (8013018 <tcp_rexmit_rto_prepare+0xd8>)
 8012f56:	4831      	ldr	r0, [pc, #196]	; (801301c <tcp_rexmit_rto_prepare+0xdc>)
 8012f58:	f005 ff2e 	bl	8018db8 <iprintf>

  if (pcb->unacked == NULL) {
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d102      	bne.n	8012f6a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012f64:	f06f 0305 	mvn.w	r3, #5
 8012f68:	e050      	b.n	801300c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f6e:	60fb      	str	r3, [r7, #12]
 8012f70:	e00b      	b.n	8012f8a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012f72:	68f8      	ldr	r0, [r7, #12]
 8012f74:	f7ff fee4 	bl	8012d40 <tcp_output_segment_busy>
 8012f78:	4603      	mov	r3, r0
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d002      	beq.n	8012f84 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012f7e:	f06f 0305 	mvn.w	r3, #5
 8012f82:	e043      	b.n	801300c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	60fb      	str	r3, [r7, #12]
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d1ef      	bne.n	8012f72 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012f92:	68f8      	ldr	r0, [r7, #12]
 8012f94:	f7ff fed4 	bl	8012d40 <tcp_output_segment_busy>
 8012f98:	4603      	mov	r3, r0
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d002      	beq.n	8012fa4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012f9e:	f06f 0305 	mvn.w	r3, #5
 8012fa2:	e033      	b.n	801300c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	8b5b      	ldrh	r3, [r3, #26]
 8012fbe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012fc2:	b29a      	uxth	r2, r3
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	68db      	ldr	r3, [r3, #12]
 8012fcc:	685b      	ldr	r3, [r3, #4]
 8012fce:	4618      	mov	r0, r3
 8012fd0:	f7f8 fba1 	bl	800b716 <lwip_htonl>
 8012fd4:	4604      	mov	r4, r0
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	891b      	ldrh	r3, [r3, #8]
 8012fda:	461d      	mov	r5, r3
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	68db      	ldr	r3, [r3, #12]
 8012fe0:	899b      	ldrh	r3, [r3, #12]
 8012fe2:	b29b      	uxth	r3, r3
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f7f8 fb81 	bl	800b6ec <lwip_htons>
 8012fea:	4603      	mov	r3, r0
 8012fec:	b2db      	uxtb	r3, r3
 8012fee:	f003 0303 	and.w	r3, r3, #3
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d001      	beq.n	8012ffa <tcp_rexmit_rto_prepare+0xba>
 8012ff6:	2301      	movs	r3, #1
 8012ff8:	e000      	b.n	8012ffc <tcp_rexmit_rto_prepare+0xbc>
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	442b      	add	r3, r5
 8012ffe:	18e2      	adds	r2, r4, r3
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	2200      	movs	r2, #0
 8013008:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801300a:	2300      	movs	r3, #0
}
 801300c:	4618      	mov	r0, r3
 801300e:	3710      	adds	r7, #16
 8013010:	46bd      	mov	sp, r7
 8013012:	bdb0      	pop	{r4, r5, r7, pc}
 8013014:	0801c6f4 	.word	0x0801c6f4
 8013018:	0801cd30 	.word	0x0801cd30
 801301c:	0801c748 	.word	0x0801c748

08013020 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013020:	b580      	push	{r7, lr}
 8013022:	b082      	sub	sp, #8
 8013024:	af00      	add	r7, sp, #0
 8013026:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d106      	bne.n	801303c <tcp_rexmit_rto_commit+0x1c>
 801302e:	4b0d      	ldr	r3, [pc, #52]	; (8013064 <tcp_rexmit_rto_commit+0x44>)
 8013030:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013034:	490c      	ldr	r1, [pc, #48]	; (8013068 <tcp_rexmit_rto_commit+0x48>)
 8013036:	480d      	ldr	r0, [pc, #52]	; (801306c <tcp_rexmit_rto_commit+0x4c>)
 8013038:	f005 febe 	bl	8018db8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013042:	2bff      	cmp	r3, #255	; 0xff
 8013044:	d007      	beq.n	8013056 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801304c:	3301      	adds	r3, #1
 801304e:	b2da      	uxtb	r2, r3
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013056:	6878      	ldr	r0, [r7, #4]
 8013058:	f7ff fc7e 	bl	8012958 <tcp_output>
}
 801305c:	bf00      	nop
 801305e:	3708      	adds	r7, #8
 8013060:	46bd      	mov	sp, r7
 8013062:	bd80      	pop	{r7, pc}
 8013064:	0801c6f4 	.word	0x0801c6f4
 8013068:	0801cd54 	.word	0x0801cd54
 801306c:	0801c748 	.word	0x0801c748

08013070 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013070:	b580      	push	{r7, lr}
 8013072:	b082      	sub	sp, #8
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d106      	bne.n	801308c <tcp_rexmit_rto+0x1c>
 801307e:	4b0a      	ldr	r3, [pc, #40]	; (80130a8 <tcp_rexmit_rto+0x38>)
 8013080:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013084:	4909      	ldr	r1, [pc, #36]	; (80130ac <tcp_rexmit_rto+0x3c>)
 8013086:	480a      	ldr	r0, [pc, #40]	; (80130b0 <tcp_rexmit_rto+0x40>)
 8013088:	f005 fe96 	bl	8018db8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801308c:	6878      	ldr	r0, [r7, #4]
 801308e:	f7ff ff57 	bl	8012f40 <tcp_rexmit_rto_prepare>
 8013092:	4603      	mov	r3, r0
 8013094:	2b00      	cmp	r3, #0
 8013096:	d102      	bne.n	801309e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013098:	6878      	ldr	r0, [r7, #4]
 801309a:	f7ff ffc1 	bl	8013020 <tcp_rexmit_rto_commit>
  }
}
 801309e:	bf00      	nop
 80130a0:	3708      	adds	r7, #8
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd80      	pop	{r7, pc}
 80130a6:	bf00      	nop
 80130a8:	0801c6f4 	.word	0x0801c6f4
 80130ac:	0801cd78 	.word	0x0801cd78
 80130b0:	0801c748 	.word	0x0801c748

080130b4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80130b4:	b590      	push	{r4, r7, lr}
 80130b6:	b085      	sub	sp, #20
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d106      	bne.n	80130d0 <tcp_rexmit+0x1c>
 80130c2:	4b2f      	ldr	r3, [pc, #188]	; (8013180 <tcp_rexmit+0xcc>)
 80130c4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80130c8:	492e      	ldr	r1, [pc, #184]	; (8013184 <tcp_rexmit+0xd0>)
 80130ca:	482f      	ldr	r0, [pc, #188]	; (8013188 <tcp_rexmit+0xd4>)
 80130cc:	f005 fe74 	bl	8018db8 <iprintf>

  if (pcb->unacked == NULL) {
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d102      	bne.n	80130de <tcp_rexmit+0x2a>
    return ERR_VAL;
 80130d8:	f06f 0305 	mvn.w	r3, #5
 80130dc:	e04c      	b.n	8013178 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130e2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80130e4:	68b8      	ldr	r0, [r7, #8]
 80130e6:	f7ff fe2b 	bl	8012d40 <tcp_output_segment_busy>
 80130ea:	4603      	mov	r3, r0
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d002      	beq.n	80130f6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80130f0:	f06f 0305 	mvn.w	r3, #5
 80130f4:	e040      	b.n	8013178 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80130f6:	68bb      	ldr	r3, [r7, #8]
 80130f8:	681a      	ldr	r2, [r3, #0]
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	336c      	adds	r3, #108	; 0x6c
 8013102:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013104:	e002      	b.n	801310c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d011      	beq.n	8013138 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	68db      	ldr	r3, [r3, #12]
 801311a:	685b      	ldr	r3, [r3, #4]
 801311c:	4618      	mov	r0, r3
 801311e:	f7f8 fafa 	bl	800b716 <lwip_htonl>
 8013122:	4604      	mov	r4, r0
 8013124:	68bb      	ldr	r3, [r7, #8]
 8013126:	68db      	ldr	r3, [r3, #12]
 8013128:	685b      	ldr	r3, [r3, #4]
 801312a:	4618      	mov	r0, r3
 801312c:	f7f8 faf3 	bl	800b716 <lwip_htonl>
 8013130:	4603      	mov	r3, r0
 8013132:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013134:	2b00      	cmp	r3, #0
 8013136:	dbe6      	blt.n	8013106 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	681a      	ldr	r2, [r3, #0]
 801313c:	68bb      	ldr	r3, [r7, #8]
 801313e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	68ba      	ldr	r2, [r7, #8]
 8013144:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013146:	68bb      	ldr	r3, [r7, #8]
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d103      	bne.n	8013156 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	2200      	movs	r2, #0
 8013152:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801315c:	2bff      	cmp	r3, #255	; 0xff
 801315e:	d007      	beq.n	8013170 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013166:	3301      	adds	r3, #1
 8013168:	b2da      	uxtb	r2, r3
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	2200      	movs	r2, #0
 8013174:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013176:	2300      	movs	r3, #0
}
 8013178:	4618      	mov	r0, r3
 801317a:	3714      	adds	r7, #20
 801317c:	46bd      	mov	sp, r7
 801317e:	bd90      	pop	{r4, r7, pc}
 8013180:	0801c6f4 	.word	0x0801c6f4
 8013184:	0801cd94 	.word	0x0801cd94
 8013188:	0801c748 	.word	0x0801c748

0801318c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801318c:	b580      	push	{r7, lr}
 801318e:	b082      	sub	sp, #8
 8013190:	af00      	add	r7, sp, #0
 8013192:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d106      	bne.n	80131a8 <tcp_rexmit_fast+0x1c>
 801319a:	4b2a      	ldr	r3, [pc, #168]	; (8013244 <tcp_rexmit_fast+0xb8>)
 801319c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80131a0:	4929      	ldr	r1, [pc, #164]	; (8013248 <tcp_rexmit_fast+0xbc>)
 80131a2:	482a      	ldr	r0, [pc, #168]	; (801324c <tcp_rexmit_fast+0xc0>)
 80131a4:	f005 fe08 	bl	8018db8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d044      	beq.n	801323a <tcp_rexmit_fast+0xae>
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	8b5b      	ldrh	r3, [r3, #26]
 80131b4:	f003 0304 	and.w	r3, r3, #4
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d13e      	bne.n	801323a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80131bc:	6878      	ldr	r0, [r7, #4]
 80131be:	f7ff ff79 	bl	80130b4 <tcp_rexmit>
 80131c2:	4603      	mov	r3, r0
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d138      	bne.n	801323a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80131d4:	4293      	cmp	r3, r2
 80131d6:	bf28      	it	cs
 80131d8:	4613      	movcs	r3, r2
 80131da:	b29b      	uxth	r3, r3
 80131dc:	0fda      	lsrs	r2, r3, #31
 80131de:	4413      	add	r3, r2
 80131e0:	105b      	asrs	r3, r3, #1
 80131e2:	b29a      	uxth	r2, r3
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80131f0:	461a      	mov	r2, r3
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80131f6:	005b      	lsls	r3, r3, #1
 80131f8:	429a      	cmp	r2, r3
 80131fa:	d206      	bcs.n	801320a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013200:	005b      	lsls	r3, r3, #1
 8013202:	b29a      	uxth	r2, r3
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013214:	4619      	mov	r1, r3
 8013216:	0049      	lsls	r1, r1, #1
 8013218:	440b      	add	r3, r1
 801321a:	b29b      	uxth	r3, r3
 801321c:	4413      	add	r3, r2
 801321e:	b29a      	uxth	r2, r3
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	8b5b      	ldrh	r3, [r3, #26]
 801322a:	f043 0304 	orr.w	r3, r3, #4
 801322e:	b29a      	uxth	r2, r3
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	2200      	movs	r2, #0
 8013238:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801323a:	bf00      	nop
 801323c:	3708      	adds	r7, #8
 801323e:	46bd      	mov	sp, r7
 8013240:	bd80      	pop	{r7, pc}
 8013242:	bf00      	nop
 8013244:	0801c6f4 	.word	0x0801c6f4
 8013248:	0801cdac 	.word	0x0801cdac
 801324c:	0801c748 	.word	0x0801c748

08013250 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b086      	sub	sp, #24
 8013254:	af00      	add	r7, sp, #0
 8013256:	60f8      	str	r0, [r7, #12]
 8013258:	607b      	str	r3, [r7, #4]
 801325a:	460b      	mov	r3, r1
 801325c:	817b      	strh	r3, [r7, #10]
 801325e:	4613      	mov	r3, r2
 8013260:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013262:	897a      	ldrh	r2, [r7, #10]
 8013264:	893b      	ldrh	r3, [r7, #8]
 8013266:	4413      	add	r3, r2
 8013268:	b29b      	uxth	r3, r3
 801326a:	3314      	adds	r3, #20
 801326c:	b29b      	uxth	r3, r3
 801326e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013272:	4619      	mov	r1, r3
 8013274:	2022      	movs	r0, #34	; 0x22
 8013276:	f7f9 fb89 	bl	800c98c <pbuf_alloc>
 801327a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801327c:	697b      	ldr	r3, [r7, #20]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d04d      	beq.n	801331e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013282:	897b      	ldrh	r3, [r7, #10]
 8013284:	3313      	adds	r3, #19
 8013286:	697a      	ldr	r2, [r7, #20]
 8013288:	8952      	ldrh	r2, [r2, #10]
 801328a:	4293      	cmp	r3, r2
 801328c:	db06      	blt.n	801329c <tcp_output_alloc_header_common+0x4c>
 801328e:	4b26      	ldr	r3, [pc, #152]	; (8013328 <tcp_output_alloc_header_common+0xd8>)
 8013290:	f240 7223 	movw	r2, #1827	; 0x723
 8013294:	4925      	ldr	r1, [pc, #148]	; (801332c <tcp_output_alloc_header_common+0xdc>)
 8013296:	4826      	ldr	r0, [pc, #152]	; (8013330 <tcp_output_alloc_header_common+0xe0>)
 8013298:	f005 fd8e 	bl	8018db8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801329c:	697b      	ldr	r3, [r7, #20]
 801329e:	685b      	ldr	r3, [r3, #4]
 80132a0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80132a2:	8c3b      	ldrh	r3, [r7, #32]
 80132a4:	4618      	mov	r0, r3
 80132a6:	f7f8 fa21 	bl	800b6ec <lwip_htons>
 80132aa:	4603      	mov	r3, r0
 80132ac:	461a      	mov	r2, r3
 80132ae:	693b      	ldr	r3, [r7, #16]
 80132b0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80132b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80132b4:	4618      	mov	r0, r3
 80132b6:	f7f8 fa19 	bl	800b6ec <lwip_htons>
 80132ba:	4603      	mov	r3, r0
 80132bc:	461a      	mov	r2, r3
 80132be:	693b      	ldr	r3, [r7, #16]
 80132c0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80132c2:	693b      	ldr	r3, [r7, #16]
 80132c4:	687a      	ldr	r2, [r7, #4]
 80132c6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80132c8:	68f8      	ldr	r0, [r7, #12]
 80132ca:	f7f8 fa24 	bl	800b716 <lwip_htonl>
 80132ce:	4602      	mov	r2, r0
 80132d0:	693b      	ldr	r3, [r7, #16]
 80132d2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80132d4:	897b      	ldrh	r3, [r7, #10]
 80132d6:	089b      	lsrs	r3, r3, #2
 80132d8:	b29b      	uxth	r3, r3
 80132da:	3305      	adds	r3, #5
 80132dc:	b29b      	uxth	r3, r3
 80132de:	031b      	lsls	r3, r3, #12
 80132e0:	b29a      	uxth	r2, r3
 80132e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80132e6:	b29b      	uxth	r3, r3
 80132e8:	4313      	orrs	r3, r2
 80132ea:	b29b      	uxth	r3, r3
 80132ec:	4618      	mov	r0, r3
 80132ee:	f7f8 f9fd 	bl	800b6ec <lwip_htons>
 80132f2:	4603      	mov	r3, r0
 80132f4:	461a      	mov	r2, r3
 80132f6:	693b      	ldr	r3, [r7, #16]
 80132f8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80132fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80132fc:	4618      	mov	r0, r3
 80132fe:	f7f8 f9f5 	bl	800b6ec <lwip_htons>
 8013302:	4603      	mov	r3, r0
 8013304:	461a      	mov	r2, r3
 8013306:	693b      	ldr	r3, [r7, #16]
 8013308:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801330a:	693b      	ldr	r3, [r7, #16]
 801330c:	2200      	movs	r2, #0
 801330e:	741a      	strb	r2, [r3, #16]
 8013310:	2200      	movs	r2, #0
 8013312:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013314:	693b      	ldr	r3, [r7, #16]
 8013316:	2200      	movs	r2, #0
 8013318:	749a      	strb	r2, [r3, #18]
 801331a:	2200      	movs	r2, #0
 801331c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801331e:	697b      	ldr	r3, [r7, #20]
}
 8013320:	4618      	mov	r0, r3
 8013322:	3718      	adds	r7, #24
 8013324:	46bd      	mov	sp, r7
 8013326:	bd80      	pop	{r7, pc}
 8013328:	0801c6f4 	.word	0x0801c6f4
 801332c:	0801cdcc 	.word	0x0801cdcc
 8013330:	0801c748 	.word	0x0801c748

08013334 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013334:	b5b0      	push	{r4, r5, r7, lr}
 8013336:	b08a      	sub	sp, #40	; 0x28
 8013338:	af04      	add	r7, sp, #16
 801333a:	60f8      	str	r0, [r7, #12]
 801333c:	607b      	str	r3, [r7, #4]
 801333e:	460b      	mov	r3, r1
 8013340:	817b      	strh	r3, [r7, #10]
 8013342:	4613      	mov	r3, r2
 8013344:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d106      	bne.n	801335a <tcp_output_alloc_header+0x26>
 801334c:	4b15      	ldr	r3, [pc, #84]	; (80133a4 <tcp_output_alloc_header+0x70>)
 801334e:	f240 7242 	movw	r2, #1858	; 0x742
 8013352:	4915      	ldr	r1, [pc, #84]	; (80133a8 <tcp_output_alloc_header+0x74>)
 8013354:	4815      	ldr	r0, [pc, #84]	; (80133ac <tcp_output_alloc_header+0x78>)
 8013356:	f005 fd2f 	bl	8018db8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	8adb      	ldrh	r3, [r3, #22]
 8013362:	68fa      	ldr	r2, [r7, #12]
 8013364:	8b12      	ldrh	r2, [r2, #24]
 8013366:	68f9      	ldr	r1, [r7, #12]
 8013368:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801336a:	893d      	ldrh	r5, [r7, #8]
 801336c:	897c      	ldrh	r4, [r7, #10]
 801336e:	9103      	str	r1, [sp, #12]
 8013370:	2110      	movs	r1, #16
 8013372:	9102      	str	r1, [sp, #8]
 8013374:	9201      	str	r2, [sp, #4]
 8013376:	9300      	str	r3, [sp, #0]
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	462a      	mov	r2, r5
 801337c:	4621      	mov	r1, r4
 801337e:	f7ff ff67 	bl	8013250 <tcp_output_alloc_header_common>
 8013382:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013384:	697b      	ldr	r3, [r7, #20]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d006      	beq.n	8013398 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801338e:	68fa      	ldr	r2, [r7, #12]
 8013390:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013392:	441a      	add	r2, r3
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013398:	697b      	ldr	r3, [r7, #20]
}
 801339a:	4618      	mov	r0, r3
 801339c:	3718      	adds	r7, #24
 801339e:	46bd      	mov	sp, r7
 80133a0:	bdb0      	pop	{r4, r5, r7, pc}
 80133a2:	bf00      	nop
 80133a4:	0801c6f4 	.word	0x0801c6f4
 80133a8:	0801cdfc 	.word	0x0801cdfc
 80133ac:	0801c748 	.word	0x0801c748

080133b0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b088      	sub	sp, #32
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	60f8      	str	r0, [r7, #12]
 80133b8:	60b9      	str	r1, [r7, #8]
 80133ba:	4611      	mov	r1, r2
 80133bc:	461a      	mov	r2, r3
 80133be:	460b      	mov	r3, r1
 80133c0:	71fb      	strb	r3, [r7, #7]
 80133c2:	4613      	mov	r3, r2
 80133c4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80133c6:	2300      	movs	r3, #0
 80133c8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80133ca:	68bb      	ldr	r3, [r7, #8]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d106      	bne.n	80133de <tcp_output_fill_options+0x2e>
 80133d0:	4b12      	ldr	r3, [pc, #72]	; (801341c <tcp_output_fill_options+0x6c>)
 80133d2:	f240 7256 	movw	r2, #1878	; 0x756
 80133d6:	4912      	ldr	r1, [pc, #72]	; (8013420 <tcp_output_fill_options+0x70>)
 80133d8:	4812      	ldr	r0, [pc, #72]	; (8013424 <tcp_output_fill_options+0x74>)
 80133da:	f005 fced 	bl	8018db8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80133de:	68bb      	ldr	r3, [r7, #8]
 80133e0:	685b      	ldr	r3, [r3, #4]
 80133e2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80133e4:	69bb      	ldr	r3, [r7, #24]
 80133e6:	3314      	adds	r3, #20
 80133e8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80133ea:	8bfb      	ldrh	r3, [r7, #30]
 80133ec:	009b      	lsls	r3, r3, #2
 80133ee:	461a      	mov	r2, r3
 80133f0:	79fb      	ldrb	r3, [r7, #7]
 80133f2:	009b      	lsls	r3, r3, #2
 80133f4:	f003 0304 	and.w	r3, r3, #4
 80133f8:	4413      	add	r3, r2
 80133fa:	3314      	adds	r3, #20
 80133fc:	69ba      	ldr	r2, [r7, #24]
 80133fe:	4413      	add	r3, r2
 8013400:	697a      	ldr	r2, [r7, #20]
 8013402:	429a      	cmp	r2, r3
 8013404:	d006      	beq.n	8013414 <tcp_output_fill_options+0x64>
 8013406:	4b05      	ldr	r3, [pc, #20]	; (801341c <tcp_output_fill_options+0x6c>)
 8013408:	f240 7275 	movw	r2, #1909	; 0x775
 801340c:	4906      	ldr	r1, [pc, #24]	; (8013428 <tcp_output_fill_options+0x78>)
 801340e:	4805      	ldr	r0, [pc, #20]	; (8013424 <tcp_output_fill_options+0x74>)
 8013410:	f005 fcd2 	bl	8018db8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013414:	bf00      	nop
 8013416:	3720      	adds	r7, #32
 8013418:	46bd      	mov	sp, r7
 801341a:	bd80      	pop	{r7, pc}
 801341c:	0801c6f4 	.word	0x0801c6f4
 8013420:	0801ce24 	.word	0x0801ce24
 8013424:	0801c748 	.word	0x0801c748
 8013428:	0801cd1c 	.word	0x0801cd1c

0801342c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801342c:	b580      	push	{r7, lr}
 801342e:	b08a      	sub	sp, #40	; 0x28
 8013430:	af04      	add	r7, sp, #16
 8013432:	60f8      	str	r0, [r7, #12]
 8013434:	60b9      	str	r1, [r7, #8]
 8013436:	607a      	str	r2, [r7, #4]
 8013438:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801343a:	68bb      	ldr	r3, [r7, #8]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d106      	bne.n	801344e <tcp_output_control_segment+0x22>
 8013440:	4b1c      	ldr	r3, [pc, #112]	; (80134b4 <tcp_output_control_segment+0x88>)
 8013442:	f240 7287 	movw	r2, #1927	; 0x787
 8013446:	491c      	ldr	r1, [pc, #112]	; (80134b8 <tcp_output_control_segment+0x8c>)
 8013448:	481c      	ldr	r0, [pc, #112]	; (80134bc <tcp_output_control_segment+0x90>)
 801344a:	f005 fcb5 	bl	8018db8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801344e:	683a      	ldr	r2, [r7, #0]
 8013450:	6879      	ldr	r1, [r7, #4]
 8013452:	68f8      	ldr	r0, [r7, #12]
 8013454:	f7fe fae8 	bl	8011a28 <tcp_route>
 8013458:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801345a:	693b      	ldr	r3, [r7, #16]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d102      	bne.n	8013466 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013460:	23fc      	movs	r3, #252	; 0xfc
 8013462:	75fb      	strb	r3, [r7, #23]
 8013464:	e01c      	b.n	80134a0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d006      	beq.n	801347a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	7adb      	ldrb	r3, [r3, #11]
 8013470:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	7a9b      	ldrb	r3, [r3, #10]
 8013476:	757b      	strb	r3, [r7, #21]
 8013478:	e003      	b.n	8013482 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801347a:	23ff      	movs	r3, #255	; 0xff
 801347c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801347e:	2300      	movs	r3, #0
 8013480:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013482:	7dba      	ldrb	r2, [r7, #22]
 8013484:	693b      	ldr	r3, [r7, #16]
 8013486:	9302      	str	r3, [sp, #8]
 8013488:	2306      	movs	r3, #6
 801348a:	9301      	str	r3, [sp, #4]
 801348c:	7d7b      	ldrb	r3, [r7, #21]
 801348e:	9300      	str	r3, [sp, #0]
 8013490:	4613      	mov	r3, r2
 8013492:	683a      	ldr	r2, [r7, #0]
 8013494:	6879      	ldr	r1, [r7, #4]
 8013496:	68b8      	ldr	r0, [r7, #8]
 8013498:	f004 f962 	bl	8017760 <ip4_output_if>
 801349c:	4603      	mov	r3, r0
 801349e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80134a0:	68b8      	ldr	r0, [r7, #8]
 80134a2:	f7f9 fd57 	bl	800cf54 <pbuf_free>
  return err;
 80134a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80134aa:	4618      	mov	r0, r3
 80134ac:	3718      	adds	r7, #24
 80134ae:	46bd      	mov	sp, r7
 80134b0:	bd80      	pop	{r7, pc}
 80134b2:	bf00      	nop
 80134b4:	0801c6f4 	.word	0x0801c6f4
 80134b8:	0801ce4c 	.word	0x0801ce4c
 80134bc:	0801c748 	.word	0x0801c748

080134c0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80134c0:	b590      	push	{r4, r7, lr}
 80134c2:	b08b      	sub	sp, #44	; 0x2c
 80134c4:	af04      	add	r7, sp, #16
 80134c6:	60f8      	str	r0, [r7, #12]
 80134c8:	60b9      	str	r1, [r7, #8]
 80134ca:	607a      	str	r2, [r7, #4]
 80134cc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80134ce:	683b      	ldr	r3, [r7, #0]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d106      	bne.n	80134e2 <tcp_rst+0x22>
 80134d4:	4b1f      	ldr	r3, [pc, #124]	; (8013554 <tcp_rst+0x94>)
 80134d6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80134da:	491f      	ldr	r1, [pc, #124]	; (8013558 <tcp_rst+0x98>)
 80134dc:	481f      	ldr	r0, [pc, #124]	; (801355c <tcp_rst+0x9c>)
 80134de:	f005 fc6b 	bl	8018db8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80134e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d106      	bne.n	80134f6 <tcp_rst+0x36>
 80134e8:	4b1a      	ldr	r3, [pc, #104]	; (8013554 <tcp_rst+0x94>)
 80134ea:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80134ee:	491c      	ldr	r1, [pc, #112]	; (8013560 <tcp_rst+0xa0>)
 80134f0:	481a      	ldr	r0, [pc, #104]	; (801355c <tcp_rst+0x9c>)
 80134f2:	f005 fc61 	bl	8018db8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80134f6:	2300      	movs	r3, #0
 80134f8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80134fa:	f246 0308 	movw	r3, #24584	; 0x6008
 80134fe:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013500:	7dfb      	ldrb	r3, [r7, #23]
 8013502:	b29c      	uxth	r4, r3
 8013504:	68b8      	ldr	r0, [r7, #8]
 8013506:	f7f8 f906 	bl	800b716 <lwip_htonl>
 801350a:	4602      	mov	r2, r0
 801350c:	8abb      	ldrh	r3, [r7, #20]
 801350e:	9303      	str	r3, [sp, #12]
 8013510:	2314      	movs	r3, #20
 8013512:	9302      	str	r3, [sp, #8]
 8013514:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013516:	9301      	str	r3, [sp, #4]
 8013518:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801351a:	9300      	str	r3, [sp, #0]
 801351c:	4613      	mov	r3, r2
 801351e:	2200      	movs	r2, #0
 8013520:	4621      	mov	r1, r4
 8013522:	6878      	ldr	r0, [r7, #4]
 8013524:	f7ff fe94 	bl	8013250 <tcp_output_alloc_header_common>
 8013528:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801352a:	693b      	ldr	r3, [r7, #16]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d00c      	beq.n	801354a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013530:	7dfb      	ldrb	r3, [r7, #23]
 8013532:	2200      	movs	r2, #0
 8013534:	6939      	ldr	r1, [r7, #16]
 8013536:	68f8      	ldr	r0, [r7, #12]
 8013538:	f7ff ff3a 	bl	80133b0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801353c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801353e:	683a      	ldr	r2, [r7, #0]
 8013540:	6939      	ldr	r1, [r7, #16]
 8013542:	68f8      	ldr	r0, [r7, #12]
 8013544:	f7ff ff72 	bl	801342c <tcp_output_control_segment>
 8013548:	e000      	b.n	801354c <tcp_rst+0x8c>
    return;
 801354a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801354c:	371c      	adds	r7, #28
 801354e:	46bd      	mov	sp, r7
 8013550:	bd90      	pop	{r4, r7, pc}
 8013552:	bf00      	nop
 8013554:	0801c6f4 	.word	0x0801c6f4
 8013558:	0801ce78 	.word	0x0801ce78
 801355c:	0801c748 	.word	0x0801c748
 8013560:	0801ce94 	.word	0x0801ce94

08013564 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013564:	b590      	push	{r4, r7, lr}
 8013566:	b087      	sub	sp, #28
 8013568:	af00      	add	r7, sp, #0
 801356a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801356c:	2300      	movs	r3, #0
 801356e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013570:	2300      	movs	r3, #0
 8013572:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d106      	bne.n	8013588 <tcp_send_empty_ack+0x24>
 801357a:	4b28      	ldr	r3, [pc, #160]	; (801361c <tcp_send_empty_ack+0xb8>)
 801357c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013580:	4927      	ldr	r1, [pc, #156]	; (8013620 <tcp_send_empty_ack+0xbc>)
 8013582:	4828      	ldr	r0, [pc, #160]	; (8013624 <tcp_send_empty_ack+0xc0>)
 8013584:	f005 fc18 	bl	8018db8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013588:	7dfb      	ldrb	r3, [r7, #23]
 801358a:	009b      	lsls	r3, r3, #2
 801358c:	b2db      	uxtb	r3, r3
 801358e:	f003 0304 	and.w	r3, r3, #4
 8013592:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013594:	7d7b      	ldrb	r3, [r7, #21]
 8013596:	b29c      	uxth	r4, r3
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801359c:	4618      	mov	r0, r3
 801359e:	f7f8 f8ba 	bl	800b716 <lwip_htonl>
 80135a2:	4603      	mov	r3, r0
 80135a4:	2200      	movs	r2, #0
 80135a6:	4621      	mov	r1, r4
 80135a8:	6878      	ldr	r0, [r7, #4]
 80135aa:	f7ff fec3 	bl	8013334 <tcp_output_alloc_header>
 80135ae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80135b0:	693b      	ldr	r3, [r7, #16]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d109      	bne.n	80135ca <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	8b5b      	ldrh	r3, [r3, #26]
 80135ba:	f043 0303 	orr.w	r3, r3, #3
 80135be:	b29a      	uxth	r2, r3
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80135c4:	f06f 0301 	mvn.w	r3, #1
 80135c8:	e023      	b.n	8013612 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80135ca:	7dbb      	ldrb	r3, [r7, #22]
 80135cc:	7dfa      	ldrb	r2, [r7, #23]
 80135ce:	6939      	ldr	r1, [r7, #16]
 80135d0:	6878      	ldr	r0, [r7, #4]
 80135d2:	f7ff feed 	bl	80133b0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80135d6:	687a      	ldr	r2, [r7, #4]
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	3304      	adds	r3, #4
 80135dc:	6939      	ldr	r1, [r7, #16]
 80135de:	6878      	ldr	r0, [r7, #4]
 80135e0:	f7ff ff24 	bl	801342c <tcp_output_control_segment>
 80135e4:	4603      	mov	r3, r0
 80135e6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80135e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d007      	beq.n	8013600 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	8b5b      	ldrh	r3, [r3, #26]
 80135f4:	f043 0303 	orr.w	r3, r3, #3
 80135f8:	b29a      	uxth	r2, r3
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	835a      	strh	r2, [r3, #26]
 80135fe:	e006      	b.n	801360e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	8b5b      	ldrh	r3, [r3, #26]
 8013604:	f023 0303 	bic.w	r3, r3, #3
 8013608:	b29a      	uxth	r2, r3
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801360e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013612:	4618      	mov	r0, r3
 8013614:	371c      	adds	r7, #28
 8013616:	46bd      	mov	sp, r7
 8013618:	bd90      	pop	{r4, r7, pc}
 801361a:	bf00      	nop
 801361c:	0801c6f4 	.word	0x0801c6f4
 8013620:	0801ceb0 	.word	0x0801ceb0
 8013624:	0801c748 	.word	0x0801c748

08013628 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013628:	b590      	push	{r4, r7, lr}
 801362a:	b087      	sub	sp, #28
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013630:	2300      	movs	r3, #0
 8013632:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d106      	bne.n	8013648 <tcp_keepalive+0x20>
 801363a:	4b18      	ldr	r3, [pc, #96]	; (801369c <tcp_keepalive+0x74>)
 801363c:	f640 0224 	movw	r2, #2084	; 0x824
 8013640:	4917      	ldr	r1, [pc, #92]	; (80136a0 <tcp_keepalive+0x78>)
 8013642:	4818      	ldr	r0, [pc, #96]	; (80136a4 <tcp_keepalive+0x7c>)
 8013644:	f005 fbb8 	bl	8018db8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013648:	7dfb      	ldrb	r3, [r7, #23]
 801364a:	b29c      	uxth	r4, r3
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013650:	3b01      	subs	r3, #1
 8013652:	4618      	mov	r0, r3
 8013654:	f7f8 f85f 	bl	800b716 <lwip_htonl>
 8013658:	4603      	mov	r3, r0
 801365a:	2200      	movs	r2, #0
 801365c:	4621      	mov	r1, r4
 801365e:	6878      	ldr	r0, [r7, #4]
 8013660:	f7ff fe68 	bl	8013334 <tcp_output_alloc_header>
 8013664:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013666:	693b      	ldr	r3, [r7, #16]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d102      	bne.n	8013672 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801366c:	f04f 33ff 	mov.w	r3, #4294967295
 8013670:	e010      	b.n	8013694 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013672:	7dfb      	ldrb	r3, [r7, #23]
 8013674:	2200      	movs	r2, #0
 8013676:	6939      	ldr	r1, [r7, #16]
 8013678:	6878      	ldr	r0, [r7, #4]
 801367a:	f7ff fe99 	bl	80133b0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801367e:	687a      	ldr	r2, [r7, #4]
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	3304      	adds	r3, #4
 8013684:	6939      	ldr	r1, [r7, #16]
 8013686:	6878      	ldr	r0, [r7, #4]
 8013688:	f7ff fed0 	bl	801342c <tcp_output_control_segment>
 801368c:	4603      	mov	r3, r0
 801368e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013690:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013694:	4618      	mov	r0, r3
 8013696:	371c      	adds	r7, #28
 8013698:	46bd      	mov	sp, r7
 801369a:	bd90      	pop	{r4, r7, pc}
 801369c:	0801c6f4 	.word	0x0801c6f4
 80136a0:	0801ced0 	.word	0x0801ced0
 80136a4:	0801c748 	.word	0x0801c748

080136a8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80136a8:	b590      	push	{r4, r7, lr}
 80136aa:	b08b      	sub	sp, #44	; 0x2c
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80136b0:	2300      	movs	r3, #0
 80136b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d106      	bne.n	80136ca <tcp_zero_window_probe+0x22>
 80136bc:	4b4c      	ldr	r3, [pc, #304]	; (80137f0 <tcp_zero_window_probe+0x148>)
 80136be:	f640 024f 	movw	r2, #2127	; 0x84f
 80136c2:	494c      	ldr	r1, [pc, #304]	; (80137f4 <tcp_zero_window_probe+0x14c>)
 80136c4:	484c      	ldr	r0, [pc, #304]	; (80137f8 <tcp_zero_window_probe+0x150>)
 80136c6:	f005 fb77 	bl	8018db8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136ce:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80136d0:	6a3b      	ldr	r3, [r7, #32]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d101      	bne.n	80136da <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80136d6:	2300      	movs	r3, #0
 80136d8:	e086      	b.n	80137e8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80136e0:	2bff      	cmp	r3, #255	; 0xff
 80136e2:	d007      	beq.n	80136f4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80136ea:	3301      	adds	r3, #1
 80136ec:	b2da      	uxtb	r2, r3
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80136f4:	6a3b      	ldr	r3, [r7, #32]
 80136f6:	68db      	ldr	r3, [r3, #12]
 80136f8:	899b      	ldrh	r3, [r3, #12]
 80136fa:	b29b      	uxth	r3, r3
 80136fc:	4618      	mov	r0, r3
 80136fe:	f7f7 fff5 	bl	800b6ec <lwip_htons>
 8013702:	4603      	mov	r3, r0
 8013704:	b2db      	uxtb	r3, r3
 8013706:	f003 0301 	and.w	r3, r3, #1
 801370a:	2b00      	cmp	r3, #0
 801370c:	d005      	beq.n	801371a <tcp_zero_window_probe+0x72>
 801370e:	6a3b      	ldr	r3, [r7, #32]
 8013710:	891b      	ldrh	r3, [r3, #8]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d101      	bne.n	801371a <tcp_zero_window_probe+0x72>
 8013716:	2301      	movs	r3, #1
 8013718:	e000      	b.n	801371c <tcp_zero_window_probe+0x74>
 801371a:	2300      	movs	r3, #0
 801371c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801371e:	7ffb      	ldrb	r3, [r7, #31]
 8013720:	2b00      	cmp	r3, #0
 8013722:	bf0c      	ite	eq
 8013724:	2301      	moveq	r3, #1
 8013726:	2300      	movne	r3, #0
 8013728:	b2db      	uxtb	r3, r3
 801372a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801372c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013730:	b299      	uxth	r1, r3
 8013732:	6a3b      	ldr	r3, [r7, #32]
 8013734:	68db      	ldr	r3, [r3, #12]
 8013736:	685b      	ldr	r3, [r3, #4]
 8013738:	8bba      	ldrh	r2, [r7, #28]
 801373a:	6878      	ldr	r0, [r7, #4]
 801373c:	f7ff fdfa 	bl	8013334 <tcp_output_alloc_header>
 8013740:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013742:	69bb      	ldr	r3, [r7, #24]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d102      	bne.n	801374e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013748:	f04f 33ff 	mov.w	r3, #4294967295
 801374c:	e04c      	b.n	80137e8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801374e:	69bb      	ldr	r3, [r7, #24]
 8013750:	685b      	ldr	r3, [r3, #4]
 8013752:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013754:	7ffb      	ldrb	r3, [r7, #31]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d011      	beq.n	801377e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801375a:	697b      	ldr	r3, [r7, #20]
 801375c:	899b      	ldrh	r3, [r3, #12]
 801375e:	b29b      	uxth	r3, r3
 8013760:	b21b      	sxth	r3, r3
 8013762:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013766:	b21c      	sxth	r4, r3
 8013768:	2011      	movs	r0, #17
 801376a:	f7f7 ffbf 	bl	800b6ec <lwip_htons>
 801376e:	4603      	mov	r3, r0
 8013770:	b21b      	sxth	r3, r3
 8013772:	4323      	orrs	r3, r4
 8013774:	b21b      	sxth	r3, r3
 8013776:	b29a      	uxth	r2, r3
 8013778:	697b      	ldr	r3, [r7, #20]
 801377a:	819a      	strh	r2, [r3, #12]
 801377c:	e010      	b.n	80137a0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801377e:	69bb      	ldr	r3, [r7, #24]
 8013780:	685b      	ldr	r3, [r3, #4]
 8013782:	3314      	adds	r3, #20
 8013784:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013786:	6a3b      	ldr	r3, [r7, #32]
 8013788:	6858      	ldr	r0, [r3, #4]
 801378a:	6a3b      	ldr	r3, [r7, #32]
 801378c:	685b      	ldr	r3, [r3, #4]
 801378e:	891a      	ldrh	r2, [r3, #8]
 8013790:	6a3b      	ldr	r3, [r7, #32]
 8013792:	891b      	ldrh	r3, [r3, #8]
 8013794:	1ad3      	subs	r3, r2, r3
 8013796:	b29b      	uxth	r3, r3
 8013798:	2201      	movs	r2, #1
 801379a:	6939      	ldr	r1, [r7, #16]
 801379c:	f7f9 fde0 	bl	800d360 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80137a0:	6a3b      	ldr	r3, [r7, #32]
 80137a2:	68db      	ldr	r3, [r3, #12]
 80137a4:	685b      	ldr	r3, [r3, #4]
 80137a6:	4618      	mov	r0, r3
 80137a8:	f7f7 ffb5 	bl	800b716 <lwip_htonl>
 80137ac:	4603      	mov	r3, r0
 80137ae:	3301      	adds	r3, #1
 80137b0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	1ad3      	subs	r3, r2, r3
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	da02      	bge.n	80137c4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	68fa      	ldr	r2, [r7, #12]
 80137c2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80137c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80137c8:	2200      	movs	r2, #0
 80137ca:	69b9      	ldr	r1, [r7, #24]
 80137cc:	6878      	ldr	r0, [r7, #4]
 80137ce:	f7ff fdef 	bl	80133b0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80137d2:	687a      	ldr	r2, [r7, #4]
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	3304      	adds	r3, #4
 80137d8:	69b9      	ldr	r1, [r7, #24]
 80137da:	6878      	ldr	r0, [r7, #4]
 80137dc:	f7ff fe26 	bl	801342c <tcp_output_control_segment>
 80137e0:	4603      	mov	r3, r0
 80137e2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80137e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80137e8:	4618      	mov	r0, r3
 80137ea:	372c      	adds	r7, #44	; 0x2c
 80137ec:	46bd      	mov	sp, r7
 80137ee:	bd90      	pop	{r4, r7, pc}
 80137f0:	0801c6f4 	.word	0x0801c6f4
 80137f4:	0801ceec 	.word	0x0801ceec
 80137f8:	0801c748 	.word	0x0801c748

080137fc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b082      	sub	sp, #8
 8013800:	af00      	add	r7, sp, #0
 8013802:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013804:	f7f9 fe9a 	bl	800d53c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013808:	4b0a      	ldr	r3, [pc, #40]	; (8013834 <tcpip_tcp_timer+0x38>)
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d103      	bne.n	8013818 <tcpip_tcp_timer+0x1c>
 8013810:	4b09      	ldr	r3, [pc, #36]	; (8013838 <tcpip_tcp_timer+0x3c>)
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d005      	beq.n	8013824 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013818:	2200      	movs	r2, #0
 801381a:	4908      	ldr	r1, [pc, #32]	; (801383c <tcpip_tcp_timer+0x40>)
 801381c:	20fa      	movs	r0, #250	; 0xfa
 801381e:	f000 f8f3 	bl	8013a08 <sys_timeout>
 8013822:	e003      	b.n	801382c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013824:	4b06      	ldr	r3, [pc, #24]	; (8013840 <tcpip_tcp_timer+0x44>)
 8013826:	2200      	movs	r2, #0
 8013828:	601a      	str	r2, [r3, #0]
  }
}
 801382a:	bf00      	nop
 801382c:	bf00      	nop
 801382e:	3708      	adds	r7, #8
 8013830:	46bd      	mov	sp, r7
 8013832:	bd80      	pop	{r7, pc}
 8013834:	20010f7c 	.word	0x20010f7c
 8013838:	20010f80 	.word	0x20010f80
 801383c:	080137fd 	.word	0x080137fd
 8013840:	20010fc8 	.word	0x20010fc8

08013844 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013844:	b580      	push	{r7, lr}
 8013846:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013848:	4b0a      	ldr	r3, [pc, #40]	; (8013874 <tcp_timer_needed+0x30>)
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d10f      	bne.n	8013870 <tcp_timer_needed+0x2c>
 8013850:	4b09      	ldr	r3, [pc, #36]	; (8013878 <tcp_timer_needed+0x34>)
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d103      	bne.n	8013860 <tcp_timer_needed+0x1c>
 8013858:	4b08      	ldr	r3, [pc, #32]	; (801387c <tcp_timer_needed+0x38>)
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d007      	beq.n	8013870 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013860:	4b04      	ldr	r3, [pc, #16]	; (8013874 <tcp_timer_needed+0x30>)
 8013862:	2201      	movs	r2, #1
 8013864:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013866:	2200      	movs	r2, #0
 8013868:	4905      	ldr	r1, [pc, #20]	; (8013880 <tcp_timer_needed+0x3c>)
 801386a:	20fa      	movs	r0, #250	; 0xfa
 801386c:	f000 f8cc 	bl	8013a08 <sys_timeout>
  }
}
 8013870:	bf00      	nop
 8013872:	bd80      	pop	{r7, pc}
 8013874:	20010fc8 	.word	0x20010fc8
 8013878:	20010f7c 	.word	0x20010f7c
 801387c:	20010f80 	.word	0x20010f80
 8013880:	080137fd 	.word	0x080137fd

08013884 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013884:	b580      	push	{r7, lr}
 8013886:	b086      	sub	sp, #24
 8013888:	af00      	add	r7, sp, #0
 801388a:	60f8      	str	r0, [r7, #12]
 801388c:	60b9      	str	r1, [r7, #8]
 801388e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013890:	200a      	movs	r0, #10
 8013892:	f7f8 fc39 	bl	800c108 <memp_malloc>
 8013896:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013898:	693b      	ldr	r3, [r7, #16]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d109      	bne.n	80138b2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801389e:	693b      	ldr	r3, [r7, #16]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d151      	bne.n	8013948 <sys_timeout_abs+0xc4>
 80138a4:	4b2a      	ldr	r3, [pc, #168]	; (8013950 <sys_timeout_abs+0xcc>)
 80138a6:	22be      	movs	r2, #190	; 0xbe
 80138a8:	492a      	ldr	r1, [pc, #168]	; (8013954 <sys_timeout_abs+0xd0>)
 80138aa:	482b      	ldr	r0, [pc, #172]	; (8013958 <sys_timeout_abs+0xd4>)
 80138ac:	f005 fa84 	bl	8018db8 <iprintf>
    return;
 80138b0:	e04a      	b.n	8013948 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80138b2:	693b      	ldr	r3, [r7, #16]
 80138b4:	2200      	movs	r2, #0
 80138b6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80138b8:	693b      	ldr	r3, [r7, #16]
 80138ba:	68ba      	ldr	r2, [r7, #8]
 80138bc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80138be:	693b      	ldr	r3, [r7, #16]
 80138c0:	687a      	ldr	r2, [r7, #4]
 80138c2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80138c4:	693b      	ldr	r3, [r7, #16]
 80138c6:	68fa      	ldr	r2, [r7, #12]
 80138c8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80138ca:	4b24      	ldr	r3, [pc, #144]	; (801395c <sys_timeout_abs+0xd8>)
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d103      	bne.n	80138da <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80138d2:	4a22      	ldr	r2, [pc, #136]	; (801395c <sys_timeout_abs+0xd8>)
 80138d4:	693b      	ldr	r3, [r7, #16]
 80138d6:	6013      	str	r3, [r2, #0]
    return;
 80138d8:	e037      	b.n	801394a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80138da:	693b      	ldr	r3, [r7, #16]
 80138dc:	685a      	ldr	r2, [r3, #4]
 80138de:	4b1f      	ldr	r3, [pc, #124]	; (801395c <sys_timeout_abs+0xd8>)
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	685b      	ldr	r3, [r3, #4]
 80138e4:	1ad3      	subs	r3, r2, r3
 80138e6:	0fdb      	lsrs	r3, r3, #31
 80138e8:	f003 0301 	and.w	r3, r3, #1
 80138ec:	b2db      	uxtb	r3, r3
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d007      	beq.n	8013902 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80138f2:	4b1a      	ldr	r3, [pc, #104]	; (801395c <sys_timeout_abs+0xd8>)
 80138f4:	681a      	ldr	r2, [r3, #0]
 80138f6:	693b      	ldr	r3, [r7, #16]
 80138f8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80138fa:	4a18      	ldr	r2, [pc, #96]	; (801395c <sys_timeout_abs+0xd8>)
 80138fc:	693b      	ldr	r3, [r7, #16]
 80138fe:	6013      	str	r3, [r2, #0]
 8013900:	e023      	b.n	801394a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013902:	4b16      	ldr	r3, [pc, #88]	; (801395c <sys_timeout_abs+0xd8>)
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	617b      	str	r3, [r7, #20]
 8013908:	e01a      	b.n	8013940 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801390a:	697b      	ldr	r3, [r7, #20]
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d00b      	beq.n	801392a <sys_timeout_abs+0xa6>
 8013912:	693b      	ldr	r3, [r7, #16]
 8013914:	685a      	ldr	r2, [r3, #4]
 8013916:	697b      	ldr	r3, [r7, #20]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	685b      	ldr	r3, [r3, #4]
 801391c:	1ad3      	subs	r3, r2, r3
 801391e:	0fdb      	lsrs	r3, r3, #31
 8013920:	f003 0301 	and.w	r3, r3, #1
 8013924:	b2db      	uxtb	r3, r3
 8013926:	2b00      	cmp	r3, #0
 8013928:	d007      	beq.n	801393a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801392a:	697b      	ldr	r3, [r7, #20]
 801392c:	681a      	ldr	r2, [r3, #0]
 801392e:	693b      	ldr	r3, [r7, #16]
 8013930:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013932:	697b      	ldr	r3, [r7, #20]
 8013934:	693a      	ldr	r2, [r7, #16]
 8013936:	601a      	str	r2, [r3, #0]
        break;
 8013938:	e007      	b.n	801394a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801393a:	697b      	ldr	r3, [r7, #20]
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	617b      	str	r3, [r7, #20]
 8013940:	697b      	ldr	r3, [r7, #20]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d1e1      	bne.n	801390a <sys_timeout_abs+0x86>
 8013946:	e000      	b.n	801394a <sys_timeout_abs+0xc6>
    return;
 8013948:	bf00      	nop
      }
    }
  }
}
 801394a:	3718      	adds	r7, #24
 801394c:	46bd      	mov	sp, r7
 801394e:	bd80      	pop	{r7, pc}
 8013950:	0801cf10 	.word	0x0801cf10
 8013954:	0801cf44 	.word	0x0801cf44
 8013958:	0801cf84 	.word	0x0801cf84
 801395c:	20010fc0 	.word	0x20010fc0

08013960 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013960:	b580      	push	{r7, lr}
 8013962:	b086      	sub	sp, #24
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801396c:	697b      	ldr	r3, [r7, #20]
 801396e:	685b      	ldr	r3, [r3, #4]
 8013970:	4798      	blx	r3

  now = sys_now();
 8013972:	f7f1 f9e9 	bl	8004d48 <sys_now>
 8013976:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013978:	697b      	ldr	r3, [r7, #20]
 801397a:	681a      	ldr	r2, [r3, #0]
 801397c:	4b0f      	ldr	r3, [pc, #60]	; (80139bc <lwip_cyclic_timer+0x5c>)
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	4413      	add	r3, r2
 8013982:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013984:	68fa      	ldr	r2, [r7, #12]
 8013986:	693b      	ldr	r3, [r7, #16]
 8013988:	1ad3      	subs	r3, r2, r3
 801398a:	0fdb      	lsrs	r3, r3, #31
 801398c:	f003 0301 	and.w	r3, r3, #1
 8013990:	b2db      	uxtb	r3, r3
 8013992:	2b00      	cmp	r3, #0
 8013994:	d009      	beq.n	80139aa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013996:	697b      	ldr	r3, [r7, #20]
 8013998:	681a      	ldr	r2, [r3, #0]
 801399a:	693b      	ldr	r3, [r7, #16]
 801399c:	4413      	add	r3, r2
 801399e:	687a      	ldr	r2, [r7, #4]
 80139a0:	4907      	ldr	r1, [pc, #28]	; (80139c0 <lwip_cyclic_timer+0x60>)
 80139a2:	4618      	mov	r0, r3
 80139a4:	f7ff ff6e 	bl	8013884 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80139a8:	e004      	b.n	80139b4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80139aa:	687a      	ldr	r2, [r7, #4]
 80139ac:	4904      	ldr	r1, [pc, #16]	; (80139c0 <lwip_cyclic_timer+0x60>)
 80139ae:	68f8      	ldr	r0, [r7, #12]
 80139b0:	f7ff ff68 	bl	8013884 <sys_timeout_abs>
}
 80139b4:	bf00      	nop
 80139b6:	3718      	adds	r7, #24
 80139b8:	46bd      	mov	sp, r7
 80139ba:	bd80      	pop	{r7, pc}
 80139bc:	20010fc4 	.word	0x20010fc4
 80139c0:	08013961 	.word	0x08013961

080139c4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b082      	sub	sp, #8
 80139c8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80139ca:	2301      	movs	r3, #1
 80139cc:	607b      	str	r3, [r7, #4]
 80139ce:	e00e      	b.n	80139ee <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80139d0:	4a0b      	ldr	r2, [pc, #44]	; (8013a00 <sys_timeouts_init+0x3c>)
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	00db      	lsls	r3, r3, #3
 80139dc:	4a08      	ldr	r2, [pc, #32]	; (8013a00 <sys_timeouts_init+0x3c>)
 80139de:	4413      	add	r3, r2
 80139e0:	461a      	mov	r2, r3
 80139e2:	4908      	ldr	r1, [pc, #32]	; (8013a04 <sys_timeouts_init+0x40>)
 80139e4:	f000 f810 	bl	8013a08 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	3301      	adds	r3, #1
 80139ec:	607b      	str	r3, [r7, #4]
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	2b04      	cmp	r3, #4
 80139f2:	d9ed      	bls.n	80139d0 <sys_timeouts_init+0xc>
  }
}
 80139f4:	bf00      	nop
 80139f6:	bf00      	nop
 80139f8:	3708      	adds	r7, #8
 80139fa:	46bd      	mov	sp, r7
 80139fc:	bd80      	pop	{r7, pc}
 80139fe:	bf00      	nop
 8013a00:	08028018 	.word	0x08028018
 8013a04:	08013961 	.word	0x08013961

08013a08 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013a08:	b580      	push	{r7, lr}
 8013a0a:	b086      	sub	sp, #24
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	60f8      	str	r0, [r7, #12]
 8013a10:	60b9      	str	r1, [r7, #8]
 8013a12:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013a1a:	d306      	bcc.n	8013a2a <sys_timeout+0x22>
 8013a1c:	4b0a      	ldr	r3, [pc, #40]	; (8013a48 <sys_timeout+0x40>)
 8013a1e:	f240 1229 	movw	r2, #297	; 0x129
 8013a22:	490a      	ldr	r1, [pc, #40]	; (8013a4c <sys_timeout+0x44>)
 8013a24:	480a      	ldr	r0, [pc, #40]	; (8013a50 <sys_timeout+0x48>)
 8013a26:	f005 f9c7 	bl	8018db8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013a2a:	f7f1 f98d 	bl	8004d48 <sys_now>
 8013a2e:	4602      	mov	r2, r0
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	4413      	add	r3, r2
 8013a34:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013a36:	687a      	ldr	r2, [r7, #4]
 8013a38:	68b9      	ldr	r1, [r7, #8]
 8013a3a:	6978      	ldr	r0, [r7, #20]
 8013a3c:	f7ff ff22 	bl	8013884 <sys_timeout_abs>
#endif
}
 8013a40:	bf00      	nop
 8013a42:	3718      	adds	r7, #24
 8013a44:	46bd      	mov	sp, r7
 8013a46:	bd80      	pop	{r7, pc}
 8013a48:	0801cf10 	.word	0x0801cf10
 8013a4c:	0801cfac 	.word	0x0801cfac
 8013a50:	0801cf84 	.word	0x0801cf84

08013a54 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b084      	sub	sp, #16
 8013a58:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013a5a:	f7f1 f975 	bl	8004d48 <sys_now>
 8013a5e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013a60:	4b17      	ldr	r3, [pc, #92]	; (8013ac0 <sys_check_timeouts+0x6c>)
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013a66:	68bb      	ldr	r3, [r7, #8]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d022      	beq.n	8013ab2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013a6c:	68bb      	ldr	r3, [r7, #8]
 8013a6e:	685b      	ldr	r3, [r3, #4]
 8013a70:	68fa      	ldr	r2, [r7, #12]
 8013a72:	1ad3      	subs	r3, r2, r3
 8013a74:	0fdb      	lsrs	r3, r3, #31
 8013a76:	f003 0301 	and.w	r3, r3, #1
 8013a7a:	b2db      	uxtb	r3, r3
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d11a      	bne.n	8013ab6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013a80:	68bb      	ldr	r3, [r7, #8]
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	4a0e      	ldr	r2, [pc, #56]	; (8013ac0 <sys_check_timeouts+0x6c>)
 8013a86:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013a88:	68bb      	ldr	r3, [r7, #8]
 8013a8a:	689b      	ldr	r3, [r3, #8]
 8013a8c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013a8e:	68bb      	ldr	r3, [r7, #8]
 8013a90:	68db      	ldr	r3, [r3, #12]
 8013a92:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013a94:	68bb      	ldr	r3, [r7, #8]
 8013a96:	685b      	ldr	r3, [r3, #4]
 8013a98:	4a0a      	ldr	r2, [pc, #40]	; (8013ac4 <sys_check_timeouts+0x70>)
 8013a9a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013a9c:	68b9      	ldr	r1, [r7, #8]
 8013a9e:	200a      	movs	r0, #10
 8013aa0:	f7f8 fba8 	bl	800c1f4 <memp_free>
    if (handler != NULL) {
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d0da      	beq.n	8013a60 <sys_check_timeouts+0xc>
      handler(arg);
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	6838      	ldr	r0, [r7, #0]
 8013aae:	4798      	blx	r3
  do {
 8013ab0:	e7d6      	b.n	8013a60 <sys_check_timeouts+0xc>
      return;
 8013ab2:	bf00      	nop
 8013ab4:	e000      	b.n	8013ab8 <sys_check_timeouts+0x64>
      return;
 8013ab6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013ab8:	3710      	adds	r7, #16
 8013aba:	46bd      	mov	sp, r7
 8013abc:	bd80      	pop	{r7, pc}
 8013abe:	bf00      	nop
 8013ac0:	20010fc0 	.word	0x20010fc0
 8013ac4:	20010fc4 	.word	0x20010fc4

08013ac8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b082      	sub	sp, #8
 8013acc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013ace:	4b16      	ldr	r3, [pc, #88]	; (8013b28 <sys_timeouts_sleeptime+0x60>)
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d102      	bne.n	8013adc <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8013ada:	e020      	b.n	8013b1e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013adc:	f7f1 f934 	bl	8004d48 <sys_now>
 8013ae0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013ae2:	4b11      	ldr	r3, [pc, #68]	; (8013b28 <sys_timeouts_sleeptime+0x60>)
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	685a      	ldr	r2, [r3, #4]
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	1ad3      	subs	r3, r2, r3
 8013aec:	0fdb      	lsrs	r3, r3, #31
 8013aee:	f003 0301 	and.w	r3, r3, #1
 8013af2:	b2db      	uxtb	r3, r3
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d001      	beq.n	8013afc <sys_timeouts_sleeptime+0x34>
    return 0;
 8013af8:	2300      	movs	r3, #0
 8013afa:	e010      	b.n	8013b1e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013afc:	4b0a      	ldr	r3, [pc, #40]	; (8013b28 <sys_timeouts_sleeptime+0x60>)
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	685a      	ldr	r2, [r3, #4]
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	1ad3      	subs	r3, r2, r3
 8013b06:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013b08:	683b      	ldr	r3, [r7, #0]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	da06      	bge.n	8013b1c <sys_timeouts_sleeptime+0x54>
 8013b0e:	4b07      	ldr	r3, [pc, #28]	; (8013b2c <sys_timeouts_sleeptime+0x64>)
 8013b10:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013b14:	4906      	ldr	r1, [pc, #24]	; (8013b30 <sys_timeouts_sleeptime+0x68>)
 8013b16:	4807      	ldr	r0, [pc, #28]	; (8013b34 <sys_timeouts_sleeptime+0x6c>)
 8013b18:	f005 f94e 	bl	8018db8 <iprintf>
    return ret;
 8013b1c:	683b      	ldr	r3, [r7, #0]
  }
}
 8013b1e:	4618      	mov	r0, r3
 8013b20:	3708      	adds	r7, #8
 8013b22:	46bd      	mov	sp, r7
 8013b24:	bd80      	pop	{r7, pc}
 8013b26:	bf00      	nop
 8013b28:	20010fc0 	.word	0x20010fc0
 8013b2c:	0801cf10 	.word	0x0801cf10
 8013b30:	0801cfe4 	.word	0x0801cfe4
 8013b34:	0801cf84 	.word	0x0801cf84

08013b38 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013b38:	b580      	push	{r7, lr}
 8013b3a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013b3c:	f005 f84e 	bl	8018bdc <rand>
 8013b40:	4603      	mov	r3, r0
 8013b42:	b29b      	uxth	r3, r3
 8013b44:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013b48:	b29b      	uxth	r3, r3
 8013b4a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013b4e:	b29a      	uxth	r2, r3
 8013b50:	4b01      	ldr	r3, [pc, #4]	; (8013b58 <udp_init+0x20>)
 8013b52:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013b54:	bf00      	nop
 8013b56:	bd80      	pop	{r7, pc}
 8013b58:	2000002c 	.word	0x2000002c

08013b5c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013b5c:	b480      	push	{r7}
 8013b5e:	b083      	sub	sp, #12
 8013b60:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013b62:	2300      	movs	r3, #0
 8013b64:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013b66:	4b17      	ldr	r3, [pc, #92]	; (8013bc4 <udp_new_port+0x68>)
 8013b68:	881b      	ldrh	r3, [r3, #0]
 8013b6a:	1c5a      	adds	r2, r3, #1
 8013b6c:	b291      	uxth	r1, r2
 8013b6e:	4a15      	ldr	r2, [pc, #84]	; (8013bc4 <udp_new_port+0x68>)
 8013b70:	8011      	strh	r1, [r2, #0]
 8013b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b76:	4293      	cmp	r3, r2
 8013b78:	d103      	bne.n	8013b82 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013b7a:	4b12      	ldr	r3, [pc, #72]	; (8013bc4 <udp_new_port+0x68>)
 8013b7c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013b80:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b82:	4b11      	ldr	r3, [pc, #68]	; (8013bc8 <udp_new_port+0x6c>)
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	603b      	str	r3, [r7, #0]
 8013b88:	e011      	b.n	8013bae <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013b8a:	683b      	ldr	r3, [r7, #0]
 8013b8c:	8a5a      	ldrh	r2, [r3, #18]
 8013b8e:	4b0d      	ldr	r3, [pc, #52]	; (8013bc4 <udp_new_port+0x68>)
 8013b90:	881b      	ldrh	r3, [r3, #0]
 8013b92:	429a      	cmp	r2, r3
 8013b94:	d108      	bne.n	8013ba8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013b96:	88fb      	ldrh	r3, [r7, #6]
 8013b98:	3301      	adds	r3, #1
 8013b9a:	80fb      	strh	r3, [r7, #6]
 8013b9c:	88fb      	ldrh	r3, [r7, #6]
 8013b9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013ba2:	d3e0      	bcc.n	8013b66 <udp_new_port+0xa>
        return 0;
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	e007      	b.n	8013bb8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013ba8:	683b      	ldr	r3, [r7, #0]
 8013baa:	68db      	ldr	r3, [r3, #12]
 8013bac:	603b      	str	r3, [r7, #0]
 8013bae:	683b      	ldr	r3, [r7, #0]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d1ea      	bne.n	8013b8a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013bb4:	4b03      	ldr	r3, [pc, #12]	; (8013bc4 <udp_new_port+0x68>)
 8013bb6:	881b      	ldrh	r3, [r3, #0]
}
 8013bb8:	4618      	mov	r0, r3
 8013bba:	370c      	adds	r7, #12
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc2:	4770      	bx	lr
 8013bc4:	2000002c 	.word	0x2000002c
 8013bc8:	20010fcc 	.word	0x20010fcc

08013bcc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b084      	sub	sp, #16
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	60f8      	str	r0, [r7, #12]
 8013bd4:	60b9      	str	r1, [r7, #8]
 8013bd6:	4613      	mov	r3, r2
 8013bd8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d105      	bne.n	8013bec <udp_input_local_match+0x20>
 8013be0:	4b27      	ldr	r3, [pc, #156]	; (8013c80 <udp_input_local_match+0xb4>)
 8013be2:	2287      	movs	r2, #135	; 0x87
 8013be4:	4927      	ldr	r1, [pc, #156]	; (8013c84 <udp_input_local_match+0xb8>)
 8013be6:	4828      	ldr	r0, [pc, #160]	; (8013c88 <udp_input_local_match+0xbc>)
 8013be8:	f005 f8e6 	bl	8018db8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013bec:	68bb      	ldr	r3, [r7, #8]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d105      	bne.n	8013bfe <udp_input_local_match+0x32>
 8013bf2:	4b23      	ldr	r3, [pc, #140]	; (8013c80 <udp_input_local_match+0xb4>)
 8013bf4:	2288      	movs	r2, #136	; 0x88
 8013bf6:	4925      	ldr	r1, [pc, #148]	; (8013c8c <udp_input_local_match+0xc0>)
 8013bf8:	4823      	ldr	r0, [pc, #140]	; (8013c88 <udp_input_local_match+0xbc>)
 8013bfa:	f005 f8dd 	bl	8018db8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	7a1b      	ldrb	r3, [r3, #8]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d00b      	beq.n	8013c1e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	7a1a      	ldrb	r2, [r3, #8]
 8013c0a:	4b21      	ldr	r3, [pc, #132]	; (8013c90 <udp_input_local_match+0xc4>)
 8013c0c:	685b      	ldr	r3, [r3, #4]
 8013c0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013c12:	3301      	adds	r3, #1
 8013c14:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013c16:	429a      	cmp	r2, r3
 8013c18:	d001      	beq.n	8013c1e <udp_input_local_match+0x52>
    return 0;
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	e02b      	b.n	8013c76 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013c1e:	79fb      	ldrb	r3, [r7, #7]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d018      	beq.n	8013c56 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d013      	beq.n	8013c52 <udp_input_local_match+0x86>
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d00f      	beq.n	8013c52 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013c32:	4b17      	ldr	r3, [pc, #92]	; (8013c90 <udp_input_local_match+0xc4>)
 8013c34:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c3a:	d00a      	beq.n	8013c52 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	681a      	ldr	r2, [r3, #0]
 8013c40:	4b13      	ldr	r3, [pc, #76]	; (8013c90 <udp_input_local_match+0xc4>)
 8013c42:	695b      	ldr	r3, [r3, #20]
 8013c44:	405a      	eors	r2, r3
 8013c46:	68bb      	ldr	r3, [r7, #8]
 8013c48:	3308      	adds	r3, #8
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d110      	bne.n	8013c74 <udp_input_local_match+0xa8>
          return 1;
 8013c52:	2301      	movs	r3, #1
 8013c54:	e00f      	b.n	8013c76 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d009      	beq.n	8013c70 <udp_input_local_match+0xa4>
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d005      	beq.n	8013c70 <udp_input_local_match+0xa4>
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	681a      	ldr	r2, [r3, #0]
 8013c68:	4b09      	ldr	r3, [pc, #36]	; (8013c90 <udp_input_local_match+0xc4>)
 8013c6a:	695b      	ldr	r3, [r3, #20]
 8013c6c:	429a      	cmp	r2, r3
 8013c6e:	d101      	bne.n	8013c74 <udp_input_local_match+0xa8>
        return 1;
 8013c70:	2301      	movs	r3, #1
 8013c72:	e000      	b.n	8013c76 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013c74:	2300      	movs	r3, #0
}
 8013c76:	4618      	mov	r0, r3
 8013c78:	3710      	adds	r7, #16
 8013c7a:	46bd      	mov	sp, r7
 8013c7c:	bd80      	pop	{r7, pc}
 8013c7e:	bf00      	nop
 8013c80:	0801cff8 	.word	0x0801cff8
 8013c84:	0801d028 	.word	0x0801d028
 8013c88:	0801d04c 	.word	0x0801d04c
 8013c8c:	0801d074 	.word	0x0801d074
 8013c90:	2000d7fc 	.word	0x2000d7fc

08013c94 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013c94:	b590      	push	{r4, r7, lr}
 8013c96:	b08d      	sub	sp, #52	; 0x34
 8013c98:	af02      	add	r7, sp, #8
 8013c9a:	6078      	str	r0, [r7, #4]
 8013c9c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d105      	bne.n	8013cb4 <udp_input+0x20>
 8013ca8:	4b7c      	ldr	r3, [pc, #496]	; (8013e9c <udp_input+0x208>)
 8013caa:	22cf      	movs	r2, #207	; 0xcf
 8013cac:	497c      	ldr	r1, [pc, #496]	; (8013ea0 <udp_input+0x20c>)
 8013cae:	487d      	ldr	r0, [pc, #500]	; (8013ea4 <udp_input+0x210>)
 8013cb0:	f005 f882 	bl	8018db8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013cb4:	683b      	ldr	r3, [r7, #0]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d105      	bne.n	8013cc6 <udp_input+0x32>
 8013cba:	4b78      	ldr	r3, [pc, #480]	; (8013e9c <udp_input+0x208>)
 8013cbc:	22d0      	movs	r2, #208	; 0xd0
 8013cbe:	497a      	ldr	r1, [pc, #488]	; (8013ea8 <udp_input+0x214>)
 8013cc0:	4878      	ldr	r0, [pc, #480]	; (8013ea4 <udp_input+0x210>)
 8013cc2:	f005 f879 	bl	8018db8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	895b      	ldrh	r3, [r3, #10]
 8013cca:	2b07      	cmp	r3, #7
 8013ccc:	d803      	bhi.n	8013cd6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013cce:	6878      	ldr	r0, [r7, #4]
 8013cd0:	f7f9 f940 	bl	800cf54 <pbuf_free>
    goto end;
 8013cd4:	e0de      	b.n	8013e94 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	685b      	ldr	r3, [r3, #4]
 8013cda:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013cdc:	4b73      	ldr	r3, [pc, #460]	; (8013eac <udp_input+0x218>)
 8013cde:	695b      	ldr	r3, [r3, #20]
 8013ce0:	4a72      	ldr	r2, [pc, #456]	; (8013eac <udp_input+0x218>)
 8013ce2:	6812      	ldr	r2, [r2, #0]
 8013ce4:	4611      	mov	r1, r2
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	f003 fe12 	bl	8017910 <ip4_addr_isbroadcast_u32>
 8013cec:	4603      	mov	r3, r0
 8013cee:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013cf0:	697b      	ldr	r3, [r7, #20]
 8013cf2:	881b      	ldrh	r3, [r3, #0]
 8013cf4:	b29b      	uxth	r3, r3
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	f7f7 fcf8 	bl	800b6ec <lwip_htons>
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013d00:	697b      	ldr	r3, [r7, #20]
 8013d02:	885b      	ldrh	r3, [r3, #2]
 8013d04:	b29b      	uxth	r3, r3
 8013d06:	4618      	mov	r0, r3
 8013d08:	f7f7 fcf0 	bl	800b6ec <lwip_htons>
 8013d0c:	4603      	mov	r3, r0
 8013d0e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013d10:	2300      	movs	r3, #0
 8013d12:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013d14:	2300      	movs	r3, #0
 8013d16:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013d18:	2300      	movs	r3, #0
 8013d1a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013d1c:	4b64      	ldr	r3, [pc, #400]	; (8013eb0 <udp_input+0x21c>)
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	627b      	str	r3, [r7, #36]	; 0x24
 8013d22:	e054      	b.n	8013dce <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d26:	8a5b      	ldrh	r3, [r3, #18]
 8013d28:	89fa      	ldrh	r2, [r7, #14]
 8013d2a:	429a      	cmp	r2, r3
 8013d2c:	d14a      	bne.n	8013dc4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013d2e:	7cfb      	ldrb	r3, [r7, #19]
 8013d30:	461a      	mov	r2, r3
 8013d32:	6839      	ldr	r1, [r7, #0]
 8013d34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d36:	f7ff ff49 	bl	8013bcc <udp_input_local_match>
 8013d3a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d041      	beq.n	8013dc4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d42:	7c1b      	ldrb	r3, [r3, #16]
 8013d44:	f003 0304 	and.w	r3, r3, #4
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d11d      	bne.n	8013d88 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013d4c:	69fb      	ldr	r3, [r7, #28]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d102      	bne.n	8013d58 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d54:	61fb      	str	r3, [r7, #28]
 8013d56:	e017      	b.n	8013d88 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013d58:	7cfb      	ldrb	r3, [r7, #19]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d014      	beq.n	8013d88 <udp_input+0xf4>
 8013d5e:	4b53      	ldr	r3, [pc, #332]	; (8013eac <udp_input+0x218>)
 8013d60:	695b      	ldr	r3, [r3, #20]
 8013d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d66:	d10f      	bne.n	8013d88 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013d68:	69fb      	ldr	r3, [r7, #28]
 8013d6a:	681a      	ldr	r2, [r3, #0]
 8013d6c:	683b      	ldr	r3, [r7, #0]
 8013d6e:	3304      	adds	r3, #4
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	429a      	cmp	r2, r3
 8013d74:	d008      	beq.n	8013d88 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d78:	681a      	ldr	r2, [r3, #0]
 8013d7a:	683b      	ldr	r3, [r7, #0]
 8013d7c:	3304      	adds	r3, #4
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	429a      	cmp	r2, r3
 8013d82:	d101      	bne.n	8013d88 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d86:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d8a:	8a9b      	ldrh	r3, [r3, #20]
 8013d8c:	8a3a      	ldrh	r2, [r7, #16]
 8013d8e:	429a      	cmp	r2, r3
 8013d90:	d118      	bne.n	8013dc4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d94:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d005      	beq.n	8013da6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d9c:	685a      	ldr	r2, [r3, #4]
 8013d9e:	4b43      	ldr	r3, [pc, #268]	; (8013eac <udp_input+0x218>)
 8013da0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013da2:	429a      	cmp	r2, r3
 8013da4:	d10e      	bne.n	8013dc4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013da6:	6a3b      	ldr	r3, [r7, #32]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d014      	beq.n	8013dd6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dae:	68da      	ldr	r2, [r3, #12]
 8013db0:	6a3b      	ldr	r3, [r7, #32]
 8013db2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013db4:	4b3e      	ldr	r3, [pc, #248]	; (8013eb0 <udp_input+0x21c>)
 8013db6:	681a      	ldr	r2, [r3, #0]
 8013db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dba:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013dbc:	4a3c      	ldr	r2, [pc, #240]	; (8013eb0 <udp_input+0x21c>)
 8013dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dc0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013dc2:	e008      	b.n	8013dd6 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dc6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dca:	68db      	ldr	r3, [r3, #12]
 8013dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8013dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d1a7      	bne.n	8013d24 <udp_input+0x90>
 8013dd4:	e000      	b.n	8013dd8 <udp_input+0x144>
        break;
 8013dd6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d101      	bne.n	8013de2 <udp_input+0x14e>
    pcb = uncon_pcb;
 8013dde:	69fb      	ldr	r3, [r7, #28]
 8013de0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d002      	beq.n	8013dee <udp_input+0x15a>
    for_us = 1;
 8013de8:	2301      	movs	r3, #1
 8013dea:	76fb      	strb	r3, [r7, #27]
 8013dec:	e00a      	b.n	8013e04 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013dee:	683b      	ldr	r3, [r7, #0]
 8013df0:	3304      	adds	r3, #4
 8013df2:	681a      	ldr	r2, [r3, #0]
 8013df4:	4b2d      	ldr	r3, [pc, #180]	; (8013eac <udp_input+0x218>)
 8013df6:	695b      	ldr	r3, [r3, #20]
 8013df8:	429a      	cmp	r2, r3
 8013dfa:	bf0c      	ite	eq
 8013dfc:	2301      	moveq	r3, #1
 8013dfe:	2300      	movne	r3, #0
 8013e00:	b2db      	uxtb	r3, r3
 8013e02:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013e04:	7efb      	ldrb	r3, [r7, #27]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d041      	beq.n	8013e8e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013e0a:	2108      	movs	r1, #8
 8013e0c:	6878      	ldr	r0, [r7, #4]
 8013e0e:	f7f9 f81b 	bl	800ce48 <pbuf_remove_header>
 8013e12:	4603      	mov	r3, r0
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d00a      	beq.n	8013e2e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013e18:	4b20      	ldr	r3, [pc, #128]	; (8013e9c <udp_input+0x208>)
 8013e1a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013e1e:	4925      	ldr	r1, [pc, #148]	; (8013eb4 <udp_input+0x220>)
 8013e20:	4820      	ldr	r0, [pc, #128]	; (8013ea4 <udp_input+0x210>)
 8013e22:	f004 ffc9 	bl	8018db8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013e26:	6878      	ldr	r0, [r7, #4]
 8013e28:	f7f9 f894 	bl	800cf54 <pbuf_free>
      goto end;
 8013e2c:	e032      	b.n	8013e94 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d012      	beq.n	8013e5a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e36:	699b      	ldr	r3, [r3, #24]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d00a      	beq.n	8013e52 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e3e:	699c      	ldr	r4, [r3, #24]
 8013e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e42:	69d8      	ldr	r0, [r3, #28]
 8013e44:	8a3b      	ldrh	r3, [r7, #16]
 8013e46:	9300      	str	r3, [sp, #0]
 8013e48:	4b1b      	ldr	r3, [pc, #108]	; (8013eb8 <udp_input+0x224>)
 8013e4a:	687a      	ldr	r2, [r7, #4]
 8013e4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013e4e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013e50:	e021      	b.n	8013e96 <udp_input+0x202>
        pbuf_free(p);
 8013e52:	6878      	ldr	r0, [r7, #4]
 8013e54:	f7f9 f87e 	bl	800cf54 <pbuf_free>
        goto end;
 8013e58:	e01c      	b.n	8013e94 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013e5a:	7cfb      	ldrb	r3, [r7, #19]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d112      	bne.n	8013e86 <udp_input+0x1f2>
 8013e60:	4b12      	ldr	r3, [pc, #72]	; (8013eac <udp_input+0x218>)
 8013e62:	695b      	ldr	r3, [r3, #20]
 8013e64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013e68:	2be0      	cmp	r3, #224	; 0xe0
 8013e6a:	d00c      	beq.n	8013e86 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013e6c:	4b0f      	ldr	r3, [pc, #60]	; (8013eac <udp_input+0x218>)
 8013e6e:	899b      	ldrh	r3, [r3, #12]
 8013e70:	3308      	adds	r3, #8
 8013e72:	b29b      	uxth	r3, r3
 8013e74:	b21b      	sxth	r3, r3
 8013e76:	4619      	mov	r1, r3
 8013e78:	6878      	ldr	r0, [r7, #4]
 8013e7a:	f7f9 f858 	bl	800cf2e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013e7e:	2103      	movs	r1, #3
 8013e80:	6878      	ldr	r0, [r7, #4]
 8013e82:	f003 fa07 	bl	8017294 <icmp_dest_unreach>
      pbuf_free(p);
 8013e86:	6878      	ldr	r0, [r7, #4]
 8013e88:	f7f9 f864 	bl	800cf54 <pbuf_free>
  return;
 8013e8c:	e003      	b.n	8013e96 <udp_input+0x202>
    pbuf_free(p);
 8013e8e:	6878      	ldr	r0, [r7, #4]
 8013e90:	f7f9 f860 	bl	800cf54 <pbuf_free>
  return;
 8013e94:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013e96:	372c      	adds	r7, #44	; 0x2c
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	bd90      	pop	{r4, r7, pc}
 8013e9c:	0801cff8 	.word	0x0801cff8
 8013ea0:	0801d09c 	.word	0x0801d09c
 8013ea4:	0801d04c 	.word	0x0801d04c
 8013ea8:	0801d0b4 	.word	0x0801d0b4
 8013eac:	2000d7fc 	.word	0x2000d7fc
 8013eb0:	20010fcc 	.word	0x20010fcc
 8013eb4:	0801d0d0 	.word	0x0801d0d0
 8013eb8:	2000d80c 	.word	0x2000d80c

08013ebc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b088      	sub	sp, #32
 8013ec0:	af02      	add	r7, sp, #8
 8013ec2:	60f8      	str	r0, [r7, #12]
 8013ec4:	60b9      	str	r1, [r7, #8]
 8013ec6:	607a      	str	r2, [r7, #4]
 8013ec8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d109      	bne.n	8013ee4 <udp_sendto_if+0x28>
 8013ed0:	4b2e      	ldr	r3, [pc, #184]	; (8013f8c <udp_sendto_if+0xd0>)
 8013ed2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013ed6:	492e      	ldr	r1, [pc, #184]	; (8013f90 <udp_sendto_if+0xd4>)
 8013ed8:	482e      	ldr	r0, [pc, #184]	; (8013f94 <udp_sendto_if+0xd8>)
 8013eda:	f004 ff6d 	bl	8018db8 <iprintf>
 8013ede:	f06f 030f 	mvn.w	r3, #15
 8013ee2:	e04f      	b.n	8013f84 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013ee4:	68bb      	ldr	r3, [r7, #8]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d109      	bne.n	8013efe <udp_sendto_if+0x42>
 8013eea:	4b28      	ldr	r3, [pc, #160]	; (8013f8c <udp_sendto_if+0xd0>)
 8013eec:	f240 2281 	movw	r2, #641	; 0x281
 8013ef0:	4929      	ldr	r1, [pc, #164]	; (8013f98 <udp_sendto_if+0xdc>)
 8013ef2:	4828      	ldr	r0, [pc, #160]	; (8013f94 <udp_sendto_if+0xd8>)
 8013ef4:	f004 ff60 	bl	8018db8 <iprintf>
 8013ef8:	f06f 030f 	mvn.w	r3, #15
 8013efc:	e042      	b.n	8013f84 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d109      	bne.n	8013f18 <udp_sendto_if+0x5c>
 8013f04:	4b21      	ldr	r3, [pc, #132]	; (8013f8c <udp_sendto_if+0xd0>)
 8013f06:	f240 2282 	movw	r2, #642	; 0x282
 8013f0a:	4924      	ldr	r1, [pc, #144]	; (8013f9c <udp_sendto_if+0xe0>)
 8013f0c:	4821      	ldr	r0, [pc, #132]	; (8013f94 <udp_sendto_if+0xd8>)
 8013f0e:	f004 ff53 	bl	8018db8 <iprintf>
 8013f12:	f06f 030f 	mvn.w	r3, #15
 8013f16:	e035      	b.n	8013f84 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013f18:	6a3b      	ldr	r3, [r7, #32]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d109      	bne.n	8013f32 <udp_sendto_if+0x76>
 8013f1e:	4b1b      	ldr	r3, [pc, #108]	; (8013f8c <udp_sendto_if+0xd0>)
 8013f20:	f240 2283 	movw	r2, #643	; 0x283
 8013f24:	491e      	ldr	r1, [pc, #120]	; (8013fa0 <udp_sendto_if+0xe4>)
 8013f26:	481b      	ldr	r0, [pc, #108]	; (8013f94 <udp_sendto_if+0xd8>)
 8013f28:	f004 ff46 	bl	8018db8 <iprintf>
 8013f2c:	f06f 030f 	mvn.w	r3, #15
 8013f30:	e028      	b.n	8013f84 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d009      	beq.n	8013f4c <udp_sendto_if+0x90>
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d005      	beq.n	8013f4c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013f48:	2be0      	cmp	r3, #224	; 0xe0
 8013f4a:	d103      	bne.n	8013f54 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013f4c:	6a3b      	ldr	r3, [r7, #32]
 8013f4e:	3304      	adds	r3, #4
 8013f50:	617b      	str	r3, [r7, #20]
 8013f52:	e00b      	b.n	8013f6c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	681a      	ldr	r2, [r3, #0]
 8013f58:	6a3b      	ldr	r3, [r7, #32]
 8013f5a:	3304      	adds	r3, #4
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	429a      	cmp	r2, r3
 8013f60:	d002      	beq.n	8013f68 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013f62:	f06f 0303 	mvn.w	r3, #3
 8013f66:	e00d      	b.n	8013f84 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013f6c:	887a      	ldrh	r2, [r7, #2]
 8013f6e:	697b      	ldr	r3, [r7, #20]
 8013f70:	9301      	str	r3, [sp, #4]
 8013f72:	6a3b      	ldr	r3, [r7, #32]
 8013f74:	9300      	str	r3, [sp, #0]
 8013f76:	4613      	mov	r3, r2
 8013f78:	687a      	ldr	r2, [r7, #4]
 8013f7a:	68b9      	ldr	r1, [r7, #8]
 8013f7c:	68f8      	ldr	r0, [r7, #12]
 8013f7e:	f000 f811 	bl	8013fa4 <udp_sendto_if_src>
 8013f82:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013f84:	4618      	mov	r0, r3
 8013f86:	3718      	adds	r7, #24
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	bd80      	pop	{r7, pc}
 8013f8c:	0801cff8 	.word	0x0801cff8
 8013f90:	0801d16c 	.word	0x0801d16c
 8013f94:	0801d04c 	.word	0x0801d04c
 8013f98:	0801d188 	.word	0x0801d188
 8013f9c:	0801d1a4 	.word	0x0801d1a4
 8013fa0:	0801d1c4 	.word	0x0801d1c4

08013fa4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013fa4:	b580      	push	{r7, lr}
 8013fa6:	b08c      	sub	sp, #48	; 0x30
 8013fa8:	af04      	add	r7, sp, #16
 8013faa:	60f8      	str	r0, [r7, #12]
 8013fac:	60b9      	str	r1, [r7, #8]
 8013fae:	607a      	str	r2, [r7, #4]
 8013fb0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d109      	bne.n	8013fcc <udp_sendto_if_src+0x28>
 8013fb8:	4b65      	ldr	r3, [pc, #404]	; (8014150 <udp_sendto_if_src+0x1ac>)
 8013fba:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013fbe:	4965      	ldr	r1, [pc, #404]	; (8014154 <udp_sendto_if_src+0x1b0>)
 8013fc0:	4865      	ldr	r0, [pc, #404]	; (8014158 <udp_sendto_if_src+0x1b4>)
 8013fc2:	f004 fef9 	bl	8018db8 <iprintf>
 8013fc6:	f06f 030f 	mvn.w	r3, #15
 8013fca:	e0bc      	b.n	8014146 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013fcc:	68bb      	ldr	r3, [r7, #8]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d109      	bne.n	8013fe6 <udp_sendto_if_src+0x42>
 8013fd2:	4b5f      	ldr	r3, [pc, #380]	; (8014150 <udp_sendto_if_src+0x1ac>)
 8013fd4:	f240 22d2 	movw	r2, #722	; 0x2d2
 8013fd8:	4960      	ldr	r1, [pc, #384]	; (801415c <udp_sendto_if_src+0x1b8>)
 8013fda:	485f      	ldr	r0, [pc, #380]	; (8014158 <udp_sendto_if_src+0x1b4>)
 8013fdc:	f004 feec 	bl	8018db8 <iprintf>
 8013fe0:	f06f 030f 	mvn.w	r3, #15
 8013fe4:	e0af      	b.n	8014146 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d109      	bne.n	8014000 <udp_sendto_if_src+0x5c>
 8013fec:	4b58      	ldr	r3, [pc, #352]	; (8014150 <udp_sendto_if_src+0x1ac>)
 8013fee:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013ff2:	495b      	ldr	r1, [pc, #364]	; (8014160 <udp_sendto_if_src+0x1bc>)
 8013ff4:	4858      	ldr	r0, [pc, #352]	; (8014158 <udp_sendto_if_src+0x1b4>)
 8013ff6:	f004 fedf 	bl	8018db8 <iprintf>
 8013ffa:	f06f 030f 	mvn.w	r3, #15
 8013ffe:	e0a2      	b.n	8014146 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8014000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014002:	2b00      	cmp	r3, #0
 8014004:	d109      	bne.n	801401a <udp_sendto_if_src+0x76>
 8014006:	4b52      	ldr	r3, [pc, #328]	; (8014150 <udp_sendto_if_src+0x1ac>)
 8014008:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801400c:	4955      	ldr	r1, [pc, #340]	; (8014164 <udp_sendto_if_src+0x1c0>)
 801400e:	4852      	ldr	r0, [pc, #328]	; (8014158 <udp_sendto_if_src+0x1b4>)
 8014010:	f004 fed2 	bl	8018db8 <iprintf>
 8014014:	f06f 030f 	mvn.w	r3, #15
 8014018:	e095      	b.n	8014146 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801401c:	2b00      	cmp	r3, #0
 801401e:	d109      	bne.n	8014034 <udp_sendto_if_src+0x90>
 8014020:	4b4b      	ldr	r3, [pc, #300]	; (8014150 <udp_sendto_if_src+0x1ac>)
 8014022:	f240 22d5 	movw	r2, #725	; 0x2d5
 8014026:	4950      	ldr	r1, [pc, #320]	; (8014168 <udp_sendto_if_src+0x1c4>)
 8014028:	484b      	ldr	r0, [pc, #300]	; (8014158 <udp_sendto_if_src+0x1b4>)
 801402a:	f004 fec5 	bl	8018db8 <iprintf>
 801402e:	f06f 030f 	mvn.w	r3, #15
 8014032:	e088      	b.n	8014146 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	8a5b      	ldrh	r3, [r3, #18]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d10f      	bne.n	801405c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801403c:	68f9      	ldr	r1, [r7, #12]
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	8a5b      	ldrh	r3, [r3, #18]
 8014042:	461a      	mov	r2, r3
 8014044:	68f8      	ldr	r0, [r7, #12]
 8014046:	f000 f893 	bl	8014170 <udp_bind>
 801404a:	4603      	mov	r3, r0
 801404c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801404e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d002      	beq.n	801405c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8014056:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801405a:	e074      	b.n	8014146 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801405c:	68bb      	ldr	r3, [r7, #8]
 801405e:	891b      	ldrh	r3, [r3, #8]
 8014060:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014064:	4293      	cmp	r3, r2
 8014066:	d902      	bls.n	801406e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8014068:	f04f 33ff 	mov.w	r3, #4294967295
 801406c:	e06b      	b.n	8014146 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801406e:	2108      	movs	r1, #8
 8014070:	68b8      	ldr	r0, [r7, #8]
 8014072:	f7f8 fed9 	bl	800ce28 <pbuf_add_header>
 8014076:	4603      	mov	r3, r0
 8014078:	2b00      	cmp	r3, #0
 801407a:	d015      	beq.n	80140a8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801407c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014080:	2108      	movs	r1, #8
 8014082:	2022      	movs	r0, #34	; 0x22
 8014084:	f7f8 fc82 	bl	800c98c <pbuf_alloc>
 8014088:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801408a:	69fb      	ldr	r3, [r7, #28]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d102      	bne.n	8014096 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014090:	f04f 33ff 	mov.w	r3, #4294967295
 8014094:	e057      	b.n	8014146 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8014096:	68bb      	ldr	r3, [r7, #8]
 8014098:	891b      	ldrh	r3, [r3, #8]
 801409a:	2b00      	cmp	r3, #0
 801409c:	d006      	beq.n	80140ac <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801409e:	68b9      	ldr	r1, [r7, #8]
 80140a0:	69f8      	ldr	r0, [r7, #28]
 80140a2:	f7f9 f87b 	bl	800d19c <pbuf_chain>
 80140a6:	e001      	b.n	80140ac <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80140a8:	68bb      	ldr	r3, [r7, #8]
 80140aa:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80140ac:	69fb      	ldr	r3, [r7, #28]
 80140ae:	895b      	ldrh	r3, [r3, #10]
 80140b0:	2b07      	cmp	r3, #7
 80140b2:	d806      	bhi.n	80140c2 <udp_sendto_if_src+0x11e>
 80140b4:	4b26      	ldr	r3, [pc, #152]	; (8014150 <udp_sendto_if_src+0x1ac>)
 80140b6:	f240 320d 	movw	r2, #781	; 0x30d
 80140ba:	492c      	ldr	r1, [pc, #176]	; (801416c <udp_sendto_if_src+0x1c8>)
 80140bc:	4826      	ldr	r0, [pc, #152]	; (8014158 <udp_sendto_if_src+0x1b4>)
 80140be:	f004 fe7b 	bl	8018db8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80140c2:	69fb      	ldr	r3, [r7, #28]
 80140c4:	685b      	ldr	r3, [r3, #4]
 80140c6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	8a5b      	ldrh	r3, [r3, #18]
 80140cc:	4618      	mov	r0, r3
 80140ce:	f7f7 fb0d 	bl	800b6ec <lwip_htons>
 80140d2:	4603      	mov	r3, r0
 80140d4:	461a      	mov	r2, r3
 80140d6:	697b      	ldr	r3, [r7, #20]
 80140d8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80140da:	887b      	ldrh	r3, [r7, #2]
 80140dc:	4618      	mov	r0, r3
 80140de:	f7f7 fb05 	bl	800b6ec <lwip_htons>
 80140e2:	4603      	mov	r3, r0
 80140e4:	461a      	mov	r2, r3
 80140e6:	697b      	ldr	r3, [r7, #20]
 80140e8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80140ea:	697b      	ldr	r3, [r7, #20]
 80140ec:	2200      	movs	r2, #0
 80140ee:	719a      	strb	r2, [r3, #6]
 80140f0:	2200      	movs	r2, #0
 80140f2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80140f4:	69fb      	ldr	r3, [r7, #28]
 80140f6:	891b      	ldrh	r3, [r3, #8]
 80140f8:	4618      	mov	r0, r3
 80140fa:	f7f7 faf7 	bl	800b6ec <lwip_htons>
 80140fe:	4603      	mov	r3, r0
 8014100:	461a      	mov	r2, r3
 8014102:	697b      	ldr	r3, [r7, #20]
 8014104:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8014106:	2311      	movs	r3, #17
 8014108:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	7adb      	ldrb	r3, [r3, #11]
 801410e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	7a9b      	ldrb	r3, [r3, #10]
 8014114:	7cb9      	ldrb	r1, [r7, #18]
 8014116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014118:	9202      	str	r2, [sp, #8]
 801411a:	7cfa      	ldrb	r2, [r7, #19]
 801411c:	9201      	str	r2, [sp, #4]
 801411e:	9300      	str	r3, [sp, #0]
 8014120:	460b      	mov	r3, r1
 8014122:	687a      	ldr	r2, [r7, #4]
 8014124:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014126:	69f8      	ldr	r0, [r7, #28]
 8014128:	f003 fb44 	bl	80177b4 <ip4_output_if_src>
 801412c:	4603      	mov	r3, r0
 801412e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8014130:	69fa      	ldr	r2, [r7, #28]
 8014132:	68bb      	ldr	r3, [r7, #8]
 8014134:	429a      	cmp	r2, r3
 8014136:	d004      	beq.n	8014142 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8014138:	69f8      	ldr	r0, [r7, #28]
 801413a:	f7f8 ff0b 	bl	800cf54 <pbuf_free>
    q = NULL;
 801413e:	2300      	movs	r3, #0
 8014140:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8014142:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8014146:	4618      	mov	r0, r3
 8014148:	3720      	adds	r7, #32
 801414a:	46bd      	mov	sp, r7
 801414c:	bd80      	pop	{r7, pc}
 801414e:	bf00      	nop
 8014150:	0801cff8 	.word	0x0801cff8
 8014154:	0801d1e4 	.word	0x0801d1e4
 8014158:	0801d04c 	.word	0x0801d04c
 801415c:	0801d204 	.word	0x0801d204
 8014160:	0801d224 	.word	0x0801d224
 8014164:	0801d248 	.word	0x0801d248
 8014168:	0801d26c 	.word	0x0801d26c
 801416c:	0801d290 	.word	0x0801d290

08014170 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014170:	b580      	push	{r7, lr}
 8014172:	b086      	sub	sp, #24
 8014174:	af00      	add	r7, sp, #0
 8014176:	60f8      	str	r0, [r7, #12]
 8014178:	60b9      	str	r1, [r7, #8]
 801417a:	4613      	mov	r3, r2
 801417c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801417e:	68bb      	ldr	r3, [r7, #8]
 8014180:	2b00      	cmp	r3, #0
 8014182:	d101      	bne.n	8014188 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014184:	4b39      	ldr	r3, [pc, #228]	; (801426c <udp_bind+0xfc>)
 8014186:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d109      	bne.n	80141a2 <udp_bind+0x32>
 801418e:	4b38      	ldr	r3, [pc, #224]	; (8014270 <udp_bind+0x100>)
 8014190:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014194:	4937      	ldr	r1, [pc, #220]	; (8014274 <udp_bind+0x104>)
 8014196:	4838      	ldr	r0, [pc, #224]	; (8014278 <udp_bind+0x108>)
 8014198:	f004 fe0e 	bl	8018db8 <iprintf>
 801419c:	f06f 030f 	mvn.w	r3, #15
 80141a0:	e060      	b.n	8014264 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80141a2:	2300      	movs	r3, #0
 80141a4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80141a6:	4b35      	ldr	r3, [pc, #212]	; (801427c <udp_bind+0x10c>)
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	617b      	str	r3, [r7, #20]
 80141ac:	e009      	b.n	80141c2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80141ae:	68fa      	ldr	r2, [r7, #12]
 80141b0:	697b      	ldr	r3, [r7, #20]
 80141b2:	429a      	cmp	r2, r3
 80141b4:	d102      	bne.n	80141bc <udp_bind+0x4c>
      rebind = 1;
 80141b6:	2301      	movs	r3, #1
 80141b8:	74fb      	strb	r3, [r7, #19]
      break;
 80141ba:	e005      	b.n	80141c8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80141bc:	697b      	ldr	r3, [r7, #20]
 80141be:	68db      	ldr	r3, [r3, #12]
 80141c0:	617b      	str	r3, [r7, #20]
 80141c2:	697b      	ldr	r3, [r7, #20]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d1f2      	bne.n	80141ae <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80141c8:	88fb      	ldrh	r3, [r7, #6]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d109      	bne.n	80141e2 <udp_bind+0x72>
    port = udp_new_port();
 80141ce:	f7ff fcc5 	bl	8013b5c <udp_new_port>
 80141d2:	4603      	mov	r3, r0
 80141d4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80141d6:	88fb      	ldrh	r3, [r7, #6]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d12c      	bne.n	8014236 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80141dc:	f06f 0307 	mvn.w	r3, #7
 80141e0:	e040      	b.n	8014264 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80141e2:	4b26      	ldr	r3, [pc, #152]	; (801427c <udp_bind+0x10c>)
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	617b      	str	r3, [r7, #20]
 80141e8:	e022      	b.n	8014230 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80141ea:	68fa      	ldr	r2, [r7, #12]
 80141ec:	697b      	ldr	r3, [r7, #20]
 80141ee:	429a      	cmp	r2, r3
 80141f0:	d01b      	beq.n	801422a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80141f2:	697b      	ldr	r3, [r7, #20]
 80141f4:	8a5b      	ldrh	r3, [r3, #18]
 80141f6:	88fa      	ldrh	r2, [r7, #6]
 80141f8:	429a      	cmp	r2, r3
 80141fa:	d116      	bne.n	801422a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80141fc:	697b      	ldr	r3, [r7, #20]
 80141fe:	681a      	ldr	r2, [r3, #0]
 8014200:	68bb      	ldr	r3, [r7, #8]
 8014202:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014204:	429a      	cmp	r2, r3
 8014206:	d00d      	beq.n	8014224 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014208:	68bb      	ldr	r3, [r7, #8]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d00a      	beq.n	8014224 <udp_bind+0xb4>
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d006      	beq.n	8014224 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014216:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014218:	2b00      	cmp	r3, #0
 801421a:	d003      	beq.n	8014224 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801421c:	697b      	ldr	r3, [r7, #20]
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d102      	bne.n	801422a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014224:	f06f 0307 	mvn.w	r3, #7
 8014228:	e01c      	b.n	8014264 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801422a:	697b      	ldr	r3, [r7, #20]
 801422c:	68db      	ldr	r3, [r3, #12]
 801422e:	617b      	str	r3, [r7, #20]
 8014230:	697b      	ldr	r3, [r7, #20]
 8014232:	2b00      	cmp	r3, #0
 8014234:	d1d9      	bne.n	80141ea <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014236:	68bb      	ldr	r3, [r7, #8]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d002      	beq.n	8014242 <udp_bind+0xd2>
 801423c:	68bb      	ldr	r3, [r7, #8]
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	e000      	b.n	8014244 <udp_bind+0xd4>
 8014242:	2300      	movs	r3, #0
 8014244:	68fa      	ldr	r2, [r7, #12]
 8014246:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	88fa      	ldrh	r2, [r7, #6]
 801424c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801424e:	7cfb      	ldrb	r3, [r7, #19]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d106      	bne.n	8014262 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014254:	4b09      	ldr	r3, [pc, #36]	; (801427c <udp_bind+0x10c>)
 8014256:	681a      	ldr	r2, [r3, #0]
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801425c:	4a07      	ldr	r2, [pc, #28]	; (801427c <udp_bind+0x10c>)
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014262:	2300      	movs	r3, #0
}
 8014264:	4618      	mov	r0, r3
 8014266:	3718      	adds	r7, #24
 8014268:	46bd      	mov	sp, r7
 801426a:	bd80      	pop	{r7, pc}
 801426c:	08028040 	.word	0x08028040
 8014270:	0801cff8 	.word	0x0801cff8
 8014274:	0801d2c0 	.word	0x0801d2c0
 8014278:	0801d04c 	.word	0x0801d04c
 801427c:	20010fcc 	.word	0x20010fcc

08014280 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b086      	sub	sp, #24
 8014284:	af00      	add	r7, sp, #0
 8014286:	60f8      	str	r0, [r7, #12]
 8014288:	60b9      	str	r1, [r7, #8]
 801428a:	4613      	mov	r3, r2
 801428c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	2b00      	cmp	r3, #0
 8014292:	d109      	bne.n	80142a8 <udp_connect+0x28>
 8014294:	4b2c      	ldr	r3, [pc, #176]	; (8014348 <udp_connect+0xc8>)
 8014296:	f240 4235 	movw	r2, #1077	; 0x435
 801429a:	492c      	ldr	r1, [pc, #176]	; (801434c <udp_connect+0xcc>)
 801429c:	482c      	ldr	r0, [pc, #176]	; (8014350 <udp_connect+0xd0>)
 801429e:	f004 fd8b 	bl	8018db8 <iprintf>
 80142a2:	f06f 030f 	mvn.w	r3, #15
 80142a6:	e04b      	b.n	8014340 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80142a8:	68bb      	ldr	r3, [r7, #8]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d109      	bne.n	80142c2 <udp_connect+0x42>
 80142ae:	4b26      	ldr	r3, [pc, #152]	; (8014348 <udp_connect+0xc8>)
 80142b0:	f240 4236 	movw	r2, #1078	; 0x436
 80142b4:	4927      	ldr	r1, [pc, #156]	; (8014354 <udp_connect+0xd4>)
 80142b6:	4826      	ldr	r0, [pc, #152]	; (8014350 <udp_connect+0xd0>)
 80142b8:	f004 fd7e 	bl	8018db8 <iprintf>
 80142bc:	f06f 030f 	mvn.w	r3, #15
 80142c0:	e03e      	b.n	8014340 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	8a5b      	ldrh	r3, [r3, #18]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d10f      	bne.n	80142ea <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80142ca:	68f9      	ldr	r1, [r7, #12]
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	8a5b      	ldrh	r3, [r3, #18]
 80142d0:	461a      	mov	r2, r3
 80142d2:	68f8      	ldr	r0, [r7, #12]
 80142d4:	f7ff ff4c 	bl	8014170 <udp_bind>
 80142d8:	4603      	mov	r3, r0
 80142da:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80142dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d002      	beq.n	80142ea <udp_connect+0x6a>
      return err;
 80142e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80142e8:	e02a      	b.n	8014340 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80142ea:	68bb      	ldr	r3, [r7, #8]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d002      	beq.n	80142f6 <udp_connect+0x76>
 80142f0:	68bb      	ldr	r3, [r7, #8]
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	e000      	b.n	80142f8 <udp_connect+0x78>
 80142f6:	2300      	movs	r3, #0
 80142f8:	68fa      	ldr	r2, [r7, #12]
 80142fa:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	88fa      	ldrh	r2, [r7, #6]
 8014300:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	7c1b      	ldrb	r3, [r3, #16]
 8014306:	f043 0304 	orr.w	r3, r3, #4
 801430a:	b2da      	uxtb	r2, r3
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014310:	4b11      	ldr	r3, [pc, #68]	; (8014358 <udp_connect+0xd8>)
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	617b      	str	r3, [r7, #20]
 8014316:	e008      	b.n	801432a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8014318:	68fa      	ldr	r2, [r7, #12]
 801431a:	697b      	ldr	r3, [r7, #20]
 801431c:	429a      	cmp	r2, r3
 801431e:	d101      	bne.n	8014324 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8014320:	2300      	movs	r3, #0
 8014322:	e00d      	b.n	8014340 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014324:	697b      	ldr	r3, [r7, #20]
 8014326:	68db      	ldr	r3, [r3, #12]
 8014328:	617b      	str	r3, [r7, #20]
 801432a:	697b      	ldr	r3, [r7, #20]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d1f3      	bne.n	8014318 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8014330:	4b09      	ldr	r3, [pc, #36]	; (8014358 <udp_connect+0xd8>)
 8014332:	681a      	ldr	r2, [r3, #0]
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8014338:	4a07      	ldr	r2, [pc, #28]	; (8014358 <udp_connect+0xd8>)
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801433e:	2300      	movs	r3, #0
}
 8014340:	4618      	mov	r0, r3
 8014342:	3718      	adds	r7, #24
 8014344:	46bd      	mov	sp, r7
 8014346:	bd80      	pop	{r7, pc}
 8014348:	0801cff8 	.word	0x0801cff8
 801434c:	0801d2d8 	.word	0x0801d2d8
 8014350:	0801d04c 	.word	0x0801d04c
 8014354:	0801d2f4 	.word	0x0801d2f4
 8014358:	20010fcc 	.word	0x20010fcc

0801435c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801435c:	b580      	push	{r7, lr}
 801435e:	b084      	sub	sp, #16
 8014360:	af00      	add	r7, sp, #0
 8014362:	60f8      	str	r0, [r7, #12]
 8014364:	60b9      	str	r1, [r7, #8]
 8014366:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d107      	bne.n	801437e <udp_recv+0x22>
 801436e:	4b08      	ldr	r3, [pc, #32]	; (8014390 <udp_recv+0x34>)
 8014370:	f240 428a 	movw	r2, #1162	; 0x48a
 8014374:	4907      	ldr	r1, [pc, #28]	; (8014394 <udp_recv+0x38>)
 8014376:	4808      	ldr	r0, [pc, #32]	; (8014398 <udp_recv+0x3c>)
 8014378:	f004 fd1e 	bl	8018db8 <iprintf>
 801437c:	e005      	b.n	801438a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	68ba      	ldr	r2, [r7, #8]
 8014382:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	687a      	ldr	r2, [r7, #4]
 8014388:	61da      	str	r2, [r3, #28]
}
 801438a:	3710      	adds	r7, #16
 801438c:	46bd      	mov	sp, r7
 801438e:	bd80      	pop	{r7, pc}
 8014390:	0801cff8 	.word	0x0801cff8
 8014394:	0801d32c 	.word	0x0801d32c
 8014398:	0801d04c 	.word	0x0801d04c

0801439c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801439c:	b580      	push	{r7, lr}
 801439e:	b084      	sub	sp, #16
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d107      	bne.n	80143ba <udp_remove+0x1e>
 80143aa:	4b19      	ldr	r3, [pc, #100]	; (8014410 <udp_remove+0x74>)
 80143ac:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80143b0:	4918      	ldr	r1, [pc, #96]	; (8014414 <udp_remove+0x78>)
 80143b2:	4819      	ldr	r0, [pc, #100]	; (8014418 <udp_remove+0x7c>)
 80143b4:	f004 fd00 	bl	8018db8 <iprintf>
 80143b8:	e026      	b.n	8014408 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80143ba:	4b18      	ldr	r3, [pc, #96]	; (801441c <udp_remove+0x80>)
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	687a      	ldr	r2, [r7, #4]
 80143c0:	429a      	cmp	r2, r3
 80143c2:	d105      	bne.n	80143d0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80143c4:	4b15      	ldr	r3, [pc, #84]	; (801441c <udp_remove+0x80>)
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	68db      	ldr	r3, [r3, #12]
 80143ca:	4a14      	ldr	r2, [pc, #80]	; (801441c <udp_remove+0x80>)
 80143cc:	6013      	str	r3, [r2, #0]
 80143ce:	e017      	b.n	8014400 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80143d0:	4b12      	ldr	r3, [pc, #72]	; (801441c <udp_remove+0x80>)
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	60fb      	str	r3, [r7, #12]
 80143d6:	e010      	b.n	80143fa <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	68db      	ldr	r3, [r3, #12]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d009      	beq.n	80143f4 <udp_remove+0x58>
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	68db      	ldr	r3, [r3, #12]
 80143e4:	687a      	ldr	r2, [r7, #4]
 80143e6:	429a      	cmp	r2, r3
 80143e8:	d104      	bne.n	80143f4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	68da      	ldr	r2, [r3, #12]
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	60da      	str	r2, [r3, #12]
        break;
 80143f2:	e005      	b.n	8014400 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	68db      	ldr	r3, [r3, #12]
 80143f8:	60fb      	str	r3, [r7, #12]
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d1eb      	bne.n	80143d8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014400:	6879      	ldr	r1, [r7, #4]
 8014402:	2000      	movs	r0, #0
 8014404:	f7f7 fef6 	bl	800c1f4 <memp_free>
}
 8014408:	3710      	adds	r7, #16
 801440a:	46bd      	mov	sp, r7
 801440c:	bd80      	pop	{r7, pc}
 801440e:	bf00      	nop
 8014410:	0801cff8 	.word	0x0801cff8
 8014414:	0801d344 	.word	0x0801d344
 8014418:	0801d04c 	.word	0x0801d04c
 801441c:	20010fcc 	.word	0x20010fcc

08014420 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b082      	sub	sp, #8
 8014424:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014426:	2000      	movs	r0, #0
 8014428:	f7f7 fe6e 	bl	800c108 <memp_malloc>
 801442c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d007      	beq.n	8014444 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014434:	2220      	movs	r2, #32
 8014436:	2100      	movs	r1, #0
 8014438:	6878      	ldr	r0, [r7, #4]
 801443a:	f004 fd5c 	bl	8018ef6 <memset>
    pcb->ttl = UDP_TTL;
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	22ff      	movs	r2, #255	; 0xff
 8014442:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014444:	687b      	ldr	r3, [r7, #4]
}
 8014446:	4618      	mov	r0, r3
 8014448:	3708      	adds	r7, #8
 801444a:	46bd      	mov	sp, r7
 801444c:	bd80      	pop	{r7, pc}

0801444e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801444e:	b580      	push	{r7, lr}
 8014450:	b084      	sub	sp, #16
 8014452:	af00      	add	r7, sp, #0
 8014454:	4603      	mov	r3, r0
 8014456:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8014458:	f7ff ffe2 	bl	8014420 <udp_new>
 801445c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801445e:	68fb      	ldr	r3, [r7, #12]
}
 8014460:	4618      	mov	r0, r3
 8014462:	3710      	adds	r7, #16
 8014464:	46bd      	mov	sp, r7
 8014466:	bd80      	pop	{r7, pc}

08014468 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014468:	b480      	push	{r7}
 801446a:	b085      	sub	sp, #20
 801446c:	af00      	add	r7, sp, #0
 801446e:	6078      	str	r0, [r7, #4]
 8014470:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	2b00      	cmp	r3, #0
 8014476:	d01e      	beq.n	80144b6 <udp_netif_ip_addr_changed+0x4e>
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d01a      	beq.n	80144b6 <udp_netif_ip_addr_changed+0x4e>
 8014480:	683b      	ldr	r3, [r7, #0]
 8014482:	2b00      	cmp	r3, #0
 8014484:	d017      	beq.n	80144b6 <udp_netif_ip_addr_changed+0x4e>
 8014486:	683b      	ldr	r3, [r7, #0]
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	2b00      	cmp	r3, #0
 801448c:	d013      	beq.n	80144b6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801448e:	4b0d      	ldr	r3, [pc, #52]	; (80144c4 <udp_netif_ip_addr_changed+0x5c>)
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	60fb      	str	r3, [r7, #12]
 8014494:	e00c      	b.n	80144b0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	681a      	ldr	r2, [r3, #0]
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	429a      	cmp	r2, r3
 80144a0:	d103      	bne.n	80144aa <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80144a2:	683b      	ldr	r3, [r7, #0]
 80144a4:	681a      	ldr	r2, [r3, #0]
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	68db      	ldr	r3, [r3, #12]
 80144ae:	60fb      	str	r3, [r7, #12]
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d1ef      	bne.n	8014496 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80144b6:	bf00      	nop
 80144b8:	3714      	adds	r7, #20
 80144ba:	46bd      	mov	sp, r7
 80144bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c0:	4770      	bx	lr
 80144c2:	bf00      	nop
 80144c4:	20010fcc 	.word	0x20010fcc

080144c8 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80144cc:	4b20      	ldr	r3, [pc, #128]	; (8014550 <dhcp_inc_pcb_refcount+0x88>)
 80144ce:	781b      	ldrb	r3, [r3, #0]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d133      	bne.n	801453c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80144d4:	4b1f      	ldr	r3, [pc, #124]	; (8014554 <dhcp_inc_pcb_refcount+0x8c>)
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d005      	beq.n	80144e8 <dhcp_inc_pcb_refcount+0x20>
 80144dc:	4b1e      	ldr	r3, [pc, #120]	; (8014558 <dhcp_inc_pcb_refcount+0x90>)
 80144de:	22e5      	movs	r2, #229	; 0xe5
 80144e0:	491e      	ldr	r1, [pc, #120]	; (801455c <dhcp_inc_pcb_refcount+0x94>)
 80144e2:	481f      	ldr	r0, [pc, #124]	; (8014560 <dhcp_inc_pcb_refcount+0x98>)
 80144e4:	f004 fc68 	bl	8018db8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80144e8:	f7ff ff9a 	bl	8014420 <udp_new>
 80144ec:	4603      	mov	r3, r0
 80144ee:	4a19      	ldr	r2, [pc, #100]	; (8014554 <dhcp_inc_pcb_refcount+0x8c>)
 80144f0:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80144f2:	4b18      	ldr	r3, [pc, #96]	; (8014554 <dhcp_inc_pcb_refcount+0x8c>)
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d102      	bne.n	8014500 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80144fa:	f04f 33ff 	mov.w	r3, #4294967295
 80144fe:	e024      	b.n	801454a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8014500:	4b14      	ldr	r3, [pc, #80]	; (8014554 <dhcp_inc_pcb_refcount+0x8c>)
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	7a5a      	ldrb	r2, [r3, #9]
 8014506:	4b13      	ldr	r3, [pc, #76]	; (8014554 <dhcp_inc_pcb_refcount+0x8c>)
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	f042 0220 	orr.w	r2, r2, #32
 801450e:	b2d2      	uxtb	r2, r2
 8014510:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8014512:	4b10      	ldr	r3, [pc, #64]	; (8014554 <dhcp_inc_pcb_refcount+0x8c>)
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	2244      	movs	r2, #68	; 0x44
 8014518:	4912      	ldr	r1, [pc, #72]	; (8014564 <dhcp_inc_pcb_refcount+0x9c>)
 801451a:	4618      	mov	r0, r3
 801451c:	f7ff fe28 	bl	8014170 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8014520:	4b0c      	ldr	r3, [pc, #48]	; (8014554 <dhcp_inc_pcb_refcount+0x8c>)
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	2243      	movs	r2, #67	; 0x43
 8014526:	490f      	ldr	r1, [pc, #60]	; (8014564 <dhcp_inc_pcb_refcount+0x9c>)
 8014528:	4618      	mov	r0, r3
 801452a:	f7ff fea9 	bl	8014280 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801452e:	4b09      	ldr	r3, [pc, #36]	; (8014554 <dhcp_inc_pcb_refcount+0x8c>)
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	2200      	movs	r2, #0
 8014534:	490c      	ldr	r1, [pc, #48]	; (8014568 <dhcp_inc_pcb_refcount+0xa0>)
 8014536:	4618      	mov	r0, r3
 8014538:	f7ff ff10 	bl	801435c <udp_recv>
  }

  dhcp_pcb_refcount++;
 801453c:	4b04      	ldr	r3, [pc, #16]	; (8014550 <dhcp_inc_pcb_refcount+0x88>)
 801453e:	781b      	ldrb	r3, [r3, #0]
 8014540:	3301      	adds	r3, #1
 8014542:	b2da      	uxtb	r2, r3
 8014544:	4b02      	ldr	r3, [pc, #8]	; (8014550 <dhcp_inc_pcb_refcount+0x88>)
 8014546:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8014548:	2300      	movs	r3, #0
}
 801454a:	4618      	mov	r0, r3
 801454c:	bd80      	pop	{r7, pc}
 801454e:	bf00      	nop
 8014550:	20010ffc 	.word	0x20010ffc
 8014554:	20010ff8 	.word	0x20010ff8
 8014558:	0801d35c 	.word	0x0801d35c
 801455c:	0801d394 	.word	0x0801d394
 8014560:	0801d3bc 	.word	0x0801d3bc
 8014564:	08028040 	.word	0x08028040
 8014568:	08015dfd 	.word	0x08015dfd

0801456c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801456c:	b580      	push	{r7, lr}
 801456e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8014570:	4b0e      	ldr	r3, [pc, #56]	; (80145ac <dhcp_dec_pcb_refcount+0x40>)
 8014572:	781b      	ldrb	r3, [r3, #0]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d105      	bne.n	8014584 <dhcp_dec_pcb_refcount+0x18>
 8014578:	4b0d      	ldr	r3, [pc, #52]	; (80145b0 <dhcp_dec_pcb_refcount+0x44>)
 801457a:	22ff      	movs	r2, #255	; 0xff
 801457c:	490d      	ldr	r1, [pc, #52]	; (80145b4 <dhcp_dec_pcb_refcount+0x48>)
 801457e:	480e      	ldr	r0, [pc, #56]	; (80145b8 <dhcp_dec_pcb_refcount+0x4c>)
 8014580:	f004 fc1a 	bl	8018db8 <iprintf>
  dhcp_pcb_refcount--;
 8014584:	4b09      	ldr	r3, [pc, #36]	; (80145ac <dhcp_dec_pcb_refcount+0x40>)
 8014586:	781b      	ldrb	r3, [r3, #0]
 8014588:	3b01      	subs	r3, #1
 801458a:	b2da      	uxtb	r2, r3
 801458c:	4b07      	ldr	r3, [pc, #28]	; (80145ac <dhcp_dec_pcb_refcount+0x40>)
 801458e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8014590:	4b06      	ldr	r3, [pc, #24]	; (80145ac <dhcp_dec_pcb_refcount+0x40>)
 8014592:	781b      	ldrb	r3, [r3, #0]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d107      	bne.n	80145a8 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8014598:	4b08      	ldr	r3, [pc, #32]	; (80145bc <dhcp_dec_pcb_refcount+0x50>)
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	4618      	mov	r0, r3
 801459e:	f7ff fefd 	bl	801439c <udp_remove>
    dhcp_pcb = NULL;
 80145a2:	4b06      	ldr	r3, [pc, #24]	; (80145bc <dhcp_dec_pcb_refcount+0x50>)
 80145a4:	2200      	movs	r2, #0
 80145a6:	601a      	str	r2, [r3, #0]
  }
}
 80145a8:	bf00      	nop
 80145aa:	bd80      	pop	{r7, pc}
 80145ac:	20010ffc 	.word	0x20010ffc
 80145b0:	0801d35c 	.word	0x0801d35c
 80145b4:	0801d3e4 	.word	0x0801d3e4
 80145b8:	0801d3bc 	.word	0x0801d3bc
 80145bc:	20010ff8 	.word	0x20010ff8

080145c0 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b084      	sub	sp, #16
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145cc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80145ce:	210c      	movs	r1, #12
 80145d0:	68f8      	ldr	r0, [r7, #12]
 80145d2:	f001 f855 	bl	8015680 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80145d6:	4b06      	ldr	r3, [pc, #24]	; (80145f0 <dhcp_handle_nak+0x30>)
 80145d8:	4a05      	ldr	r2, [pc, #20]	; (80145f0 <dhcp_handle_nak+0x30>)
 80145da:	4905      	ldr	r1, [pc, #20]	; (80145f0 <dhcp_handle_nak+0x30>)
 80145dc:	6878      	ldr	r0, [r7, #4]
 80145de:	f7f7 ffab 	bl	800c538 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80145e2:	6878      	ldr	r0, [r7, #4]
 80145e4:	f000 fc48 	bl	8014e78 <dhcp_discover>
}
 80145e8:	bf00      	nop
 80145ea:	3710      	adds	r7, #16
 80145ec:	46bd      	mov	sp, r7
 80145ee:	bd80      	pop	{r7, pc}
 80145f0:	08028040 	.word	0x08028040

080145f4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80145f4:	b580      	push	{r7, lr}
 80145f6:	b084      	sub	sp, #16
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014600:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8014602:	2108      	movs	r1, #8
 8014604:	68f8      	ldr	r0, [r7, #12]
 8014606:	f001 f83b 	bl	8015680 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	331c      	adds	r3, #28
 801460e:	2200      	movs	r2, #0
 8014610:	4619      	mov	r1, r3
 8014612:	6878      	ldr	r0, [r7, #4]
 8014614:	f002 fb3c 	bl	8016c90 <etharp_query>
 8014618:	4603      	mov	r3, r0
 801461a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	799b      	ldrb	r3, [r3, #6]
 8014620:	2bff      	cmp	r3, #255	; 0xff
 8014622:	d005      	beq.n	8014630 <dhcp_check+0x3c>
    dhcp->tries++;
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	799b      	ldrb	r3, [r3, #6]
 8014628:	3301      	adds	r3, #1
 801462a:	b2da      	uxtb	r2, r3
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8014630:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8014634:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014636:	893b      	ldrh	r3, [r7, #8]
 8014638:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801463c:	4a06      	ldr	r2, [pc, #24]	; (8014658 <dhcp_check+0x64>)
 801463e:	fb82 1203 	smull	r1, r2, r2, r3
 8014642:	1152      	asrs	r2, r2, #5
 8014644:	17db      	asrs	r3, r3, #31
 8014646:	1ad3      	subs	r3, r2, r3
 8014648:	b29a      	uxth	r2, r3
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801464e:	bf00      	nop
 8014650:	3710      	adds	r7, #16
 8014652:	46bd      	mov	sp, r7
 8014654:	bd80      	pop	{r7, pc}
 8014656:	bf00      	nop
 8014658:	10624dd3 	.word	0x10624dd3

0801465c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801465c:	b580      	push	{r7, lr}
 801465e:	b084      	sub	sp, #16
 8014660:	af00      	add	r7, sp, #0
 8014662:	6078      	str	r0, [r7, #4]
 8014664:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801466a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801466c:	4b0c      	ldr	r3, [pc, #48]	; (80146a0 <dhcp_handle_offer+0x44>)
 801466e:	789b      	ldrb	r3, [r3, #2]
 8014670:	2b00      	cmp	r3, #0
 8014672:	d011      	beq.n	8014698 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	2200      	movs	r2, #0
 8014678:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801467a:	4b0a      	ldr	r3, [pc, #40]	; (80146a4 <dhcp_handle_offer+0x48>)
 801467c:	689b      	ldr	r3, [r3, #8]
 801467e:	4618      	mov	r0, r3
 8014680:	f7f7 f849 	bl	800b716 <lwip_htonl>
 8014684:	4602      	mov	r2, r0
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801468a:	683b      	ldr	r3, [r7, #0]
 801468c:	691a      	ldr	r2, [r3, #16]
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8014692:	6878      	ldr	r0, [r7, #4]
 8014694:	f000 f808 	bl	80146a8 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8014698:	bf00      	nop
 801469a:	3710      	adds	r7, #16
 801469c:	46bd      	mov	sp, r7
 801469e:	bd80      	pop	{r7, pc}
 80146a0:	20010ff0 	.word	0x20010ff0
 80146a4:	20010fd0 	.word	0x20010fd0

080146a8 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80146a8:	b5b0      	push	{r4, r5, r7, lr}
 80146aa:	b08a      	sub	sp, #40	; 0x28
 80146ac:	af02      	add	r7, sp, #8
 80146ae:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d109      	bne.n	80146ca <dhcp_select+0x22>
 80146b6:	4b71      	ldr	r3, [pc, #452]	; (801487c <dhcp_select+0x1d4>)
 80146b8:	f240 1277 	movw	r2, #375	; 0x177
 80146bc:	4970      	ldr	r1, [pc, #448]	; (8014880 <dhcp_select+0x1d8>)
 80146be:	4871      	ldr	r0, [pc, #452]	; (8014884 <dhcp_select+0x1dc>)
 80146c0:	f004 fb7a 	bl	8018db8 <iprintf>
 80146c4:	f06f 030f 	mvn.w	r3, #15
 80146c8:	e0d3      	b.n	8014872 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146ce:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80146d0:	69bb      	ldr	r3, [r7, #24]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d109      	bne.n	80146ea <dhcp_select+0x42>
 80146d6:	4b69      	ldr	r3, [pc, #420]	; (801487c <dhcp_select+0x1d4>)
 80146d8:	f240 1279 	movw	r2, #377	; 0x179
 80146dc:	496a      	ldr	r1, [pc, #424]	; (8014888 <dhcp_select+0x1e0>)
 80146de:	4869      	ldr	r0, [pc, #420]	; (8014884 <dhcp_select+0x1dc>)
 80146e0:	f004 fb6a 	bl	8018db8 <iprintf>
 80146e4:	f06f 0305 	mvn.w	r3, #5
 80146e8:	e0c3      	b.n	8014872 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80146ea:	2101      	movs	r1, #1
 80146ec:	69b8      	ldr	r0, [r7, #24]
 80146ee:	f000 ffc7 	bl	8015680 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80146f2:	f107 030c 	add.w	r3, r7, #12
 80146f6:	2203      	movs	r2, #3
 80146f8:	69b9      	ldr	r1, [r7, #24]
 80146fa:	6878      	ldr	r0, [r7, #4]
 80146fc:	f001 fc4c 	bl	8015f98 <dhcp_create_msg>
 8014700:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014702:	697b      	ldr	r3, [r7, #20]
 8014704:	2b00      	cmp	r3, #0
 8014706:	f000 8085 	beq.w	8014814 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801470a:	697b      	ldr	r3, [r7, #20]
 801470c:	685b      	ldr	r3, [r3, #4]
 801470e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014710:	89b8      	ldrh	r0, [r7, #12]
 8014712:	693b      	ldr	r3, [r7, #16]
 8014714:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014718:	2302      	movs	r3, #2
 801471a:	2239      	movs	r2, #57	; 0x39
 801471c:	f000 ffca 	bl	80156b4 <dhcp_option>
 8014720:	4603      	mov	r3, r0
 8014722:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014724:	89b8      	ldrh	r0, [r7, #12]
 8014726:	693b      	ldr	r3, [r7, #16]
 8014728:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014730:	461a      	mov	r2, r3
 8014732:	f001 f819 	bl	8015768 <dhcp_option_short>
 8014736:	4603      	mov	r3, r0
 8014738:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801473a:	89b8      	ldrh	r0, [r7, #12]
 801473c:	693b      	ldr	r3, [r7, #16]
 801473e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014742:	2304      	movs	r3, #4
 8014744:	2232      	movs	r2, #50	; 0x32
 8014746:	f000 ffb5 	bl	80156b4 <dhcp_option>
 801474a:	4603      	mov	r3, r0
 801474c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801474e:	89bc      	ldrh	r4, [r7, #12]
 8014750:	693b      	ldr	r3, [r7, #16]
 8014752:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014756:	69bb      	ldr	r3, [r7, #24]
 8014758:	69db      	ldr	r3, [r3, #28]
 801475a:	4618      	mov	r0, r3
 801475c:	f7f6 ffdb 	bl	800b716 <lwip_htonl>
 8014760:	4603      	mov	r3, r0
 8014762:	461a      	mov	r2, r3
 8014764:	4629      	mov	r1, r5
 8014766:	4620      	mov	r0, r4
 8014768:	f001 f830 	bl	80157cc <dhcp_option_long>
 801476c:	4603      	mov	r3, r0
 801476e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014770:	89b8      	ldrh	r0, [r7, #12]
 8014772:	693b      	ldr	r3, [r7, #16]
 8014774:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014778:	2304      	movs	r3, #4
 801477a:	2236      	movs	r2, #54	; 0x36
 801477c:	f000 ff9a 	bl	80156b4 <dhcp_option>
 8014780:	4603      	mov	r3, r0
 8014782:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8014784:	89bc      	ldrh	r4, [r7, #12]
 8014786:	693b      	ldr	r3, [r7, #16]
 8014788:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801478c:	69bb      	ldr	r3, [r7, #24]
 801478e:	699b      	ldr	r3, [r3, #24]
 8014790:	4618      	mov	r0, r3
 8014792:	f7f6 ffc0 	bl	800b716 <lwip_htonl>
 8014796:	4603      	mov	r3, r0
 8014798:	461a      	mov	r2, r3
 801479a:	4629      	mov	r1, r5
 801479c:	4620      	mov	r0, r4
 801479e:	f001 f815 	bl	80157cc <dhcp_option_long>
 80147a2:	4603      	mov	r3, r0
 80147a4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80147a6:	89b8      	ldrh	r0, [r7, #12]
 80147a8:	693b      	ldr	r3, [r7, #16]
 80147aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80147ae:	2303      	movs	r3, #3
 80147b0:	2237      	movs	r2, #55	; 0x37
 80147b2:	f000 ff7f 	bl	80156b4 <dhcp_option>
 80147b6:	4603      	mov	r3, r0
 80147b8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80147ba:	2300      	movs	r3, #0
 80147bc:	77bb      	strb	r3, [r7, #30]
 80147be:	e00e      	b.n	80147de <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80147c0:	89b8      	ldrh	r0, [r7, #12]
 80147c2:	693b      	ldr	r3, [r7, #16]
 80147c4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80147c8:	7fbb      	ldrb	r3, [r7, #30]
 80147ca:	4a30      	ldr	r2, [pc, #192]	; (801488c <dhcp_select+0x1e4>)
 80147cc:	5cd3      	ldrb	r3, [r2, r3]
 80147ce:	461a      	mov	r2, r3
 80147d0:	f000 ffa4 	bl	801571c <dhcp_option_byte>
 80147d4:	4603      	mov	r3, r0
 80147d6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80147d8:	7fbb      	ldrb	r3, [r7, #30]
 80147da:	3301      	adds	r3, #1
 80147dc:	77bb      	strb	r3, [r7, #30]
 80147de:	7fbb      	ldrb	r3, [r7, #30]
 80147e0:	2b02      	cmp	r3, #2
 80147e2:	d9ed      	bls.n	80147c0 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80147e4:	89b8      	ldrh	r0, [r7, #12]
 80147e6:	693b      	ldr	r3, [r7, #16]
 80147e8:	33f0      	adds	r3, #240	; 0xf0
 80147ea:	697a      	ldr	r2, [r7, #20]
 80147ec:	4619      	mov	r1, r3
 80147ee:	f001 fca9 	bl	8016144 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80147f2:	4b27      	ldr	r3, [pc, #156]	; (8014890 <dhcp_select+0x1e8>)
 80147f4:	6818      	ldr	r0, [r3, #0]
 80147f6:	4b27      	ldr	r3, [pc, #156]	; (8014894 <dhcp_select+0x1ec>)
 80147f8:	9301      	str	r3, [sp, #4]
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	9300      	str	r3, [sp, #0]
 80147fe:	2343      	movs	r3, #67	; 0x43
 8014800:	4a25      	ldr	r2, [pc, #148]	; (8014898 <dhcp_select+0x1f0>)
 8014802:	6979      	ldr	r1, [r7, #20]
 8014804:	f7ff fbce 	bl	8013fa4 <udp_sendto_if_src>
 8014808:	4603      	mov	r3, r0
 801480a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801480c:	6978      	ldr	r0, [r7, #20]
 801480e:	f7f8 fba1 	bl	800cf54 <pbuf_free>
 8014812:	e001      	b.n	8014818 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014814:	23ff      	movs	r3, #255	; 0xff
 8014816:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014818:	69bb      	ldr	r3, [r7, #24]
 801481a:	799b      	ldrb	r3, [r3, #6]
 801481c:	2bff      	cmp	r3, #255	; 0xff
 801481e:	d005      	beq.n	801482c <dhcp_select+0x184>
    dhcp->tries++;
 8014820:	69bb      	ldr	r3, [r7, #24]
 8014822:	799b      	ldrb	r3, [r3, #6]
 8014824:	3301      	adds	r3, #1
 8014826:	b2da      	uxtb	r2, r3
 8014828:	69bb      	ldr	r3, [r7, #24]
 801482a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801482c:	69bb      	ldr	r3, [r7, #24]
 801482e:	799b      	ldrb	r3, [r3, #6]
 8014830:	2b05      	cmp	r3, #5
 8014832:	d80d      	bhi.n	8014850 <dhcp_select+0x1a8>
 8014834:	69bb      	ldr	r3, [r7, #24]
 8014836:	799b      	ldrb	r3, [r3, #6]
 8014838:	461a      	mov	r2, r3
 801483a:	2301      	movs	r3, #1
 801483c:	4093      	lsls	r3, r2
 801483e:	b29b      	uxth	r3, r3
 8014840:	461a      	mov	r2, r3
 8014842:	0152      	lsls	r2, r2, #5
 8014844:	1ad2      	subs	r2, r2, r3
 8014846:	0092      	lsls	r2, r2, #2
 8014848:	4413      	add	r3, r2
 801484a:	00db      	lsls	r3, r3, #3
 801484c:	b29b      	uxth	r3, r3
 801484e:	e001      	b.n	8014854 <dhcp_select+0x1ac>
 8014850:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014854:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014856:	89fb      	ldrh	r3, [r7, #14]
 8014858:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801485c:	4a0f      	ldr	r2, [pc, #60]	; (801489c <dhcp_select+0x1f4>)
 801485e:	fb82 1203 	smull	r1, r2, r2, r3
 8014862:	1152      	asrs	r2, r2, #5
 8014864:	17db      	asrs	r3, r3, #31
 8014866:	1ad3      	subs	r3, r2, r3
 8014868:	b29a      	uxth	r2, r3
 801486a:	69bb      	ldr	r3, [r7, #24]
 801486c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801486e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014872:	4618      	mov	r0, r3
 8014874:	3720      	adds	r7, #32
 8014876:	46bd      	mov	sp, r7
 8014878:	bdb0      	pop	{r4, r5, r7, pc}
 801487a:	bf00      	nop
 801487c:	0801d35c 	.word	0x0801d35c
 8014880:	0801d408 	.word	0x0801d408
 8014884:	0801d3bc 	.word	0x0801d3bc
 8014888:	0801d424 	.word	0x0801d424
 801488c:	20000030 	.word	0x20000030
 8014890:	20010ff8 	.word	0x20010ff8
 8014894:	08028040 	.word	0x08028040
 8014898:	08028044 	.word	0x08028044
 801489c:	10624dd3 	.word	0x10624dd3

080148a0 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b082      	sub	sp, #8
 80148a4:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80148a6:	4b27      	ldr	r3, [pc, #156]	; (8014944 <dhcp_coarse_tmr+0xa4>)
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	607b      	str	r3, [r7, #4]
 80148ac:	e042      	b.n	8014934 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148b2:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80148b4:	683b      	ldr	r3, [r7, #0]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d039      	beq.n	801492e <dhcp_coarse_tmr+0x8e>
 80148ba:	683b      	ldr	r3, [r7, #0]
 80148bc:	795b      	ldrb	r3, [r3, #5]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d035      	beq.n	801492e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80148c2:	683b      	ldr	r3, [r7, #0]
 80148c4:	8a9b      	ldrh	r3, [r3, #20]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d012      	beq.n	80148f0 <dhcp_coarse_tmr+0x50>
 80148ca:	683b      	ldr	r3, [r7, #0]
 80148cc:	8a5b      	ldrh	r3, [r3, #18]
 80148ce:	3301      	adds	r3, #1
 80148d0:	b29a      	uxth	r2, r3
 80148d2:	683b      	ldr	r3, [r7, #0]
 80148d4:	825a      	strh	r2, [r3, #18]
 80148d6:	683b      	ldr	r3, [r7, #0]
 80148d8:	8a5a      	ldrh	r2, [r3, #18]
 80148da:	683b      	ldr	r3, [r7, #0]
 80148dc:	8a9b      	ldrh	r3, [r3, #20]
 80148de:	429a      	cmp	r2, r3
 80148e0:	d106      	bne.n	80148f0 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80148e2:	6878      	ldr	r0, [r7, #4]
 80148e4:	f000 fe32 	bl	801554c <dhcp_release_and_stop>
        dhcp_start(netif);
 80148e8:	6878      	ldr	r0, [r7, #4]
 80148ea:	f000 f969 	bl	8014bc0 <dhcp_start>
 80148ee:	e01e      	b.n	801492e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80148f0:	683b      	ldr	r3, [r7, #0]
 80148f2:	8a1b      	ldrh	r3, [r3, #16]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d00b      	beq.n	8014910 <dhcp_coarse_tmr+0x70>
 80148f8:	683b      	ldr	r3, [r7, #0]
 80148fa:	8a1b      	ldrh	r3, [r3, #16]
 80148fc:	1e5a      	subs	r2, r3, #1
 80148fe:	b291      	uxth	r1, r2
 8014900:	683a      	ldr	r2, [r7, #0]
 8014902:	8211      	strh	r1, [r2, #16]
 8014904:	2b01      	cmp	r3, #1
 8014906:	d103      	bne.n	8014910 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8014908:	6878      	ldr	r0, [r7, #4]
 801490a:	f000 f8c6 	bl	8014a9a <dhcp_t2_timeout>
 801490e:	e00e      	b.n	801492e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8014910:	683b      	ldr	r3, [r7, #0]
 8014912:	89db      	ldrh	r3, [r3, #14]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d00a      	beq.n	801492e <dhcp_coarse_tmr+0x8e>
 8014918:	683b      	ldr	r3, [r7, #0]
 801491a:	89db      	ldrh	r3, [r3, #14]
 801491c:	1e5a      	subs	r2, r3, #1
 801491e:	b291      	uxth	r1, r2
 8014920:	683a      	ldr	r2, [r7, #0]
 8014922:	81d1      	strh	r1, [r2, #14]
 8014924:	2b01      	cmp	r3, #1
 8014926:	d102      	bne.n	801492e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8014928:	6878      	ldr	r0, [r7, #4]
 801492a:	f000 f888 	bl	8014a3e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	607b      	str	r3, [r7, #4]
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d1b9      	bne.n	80148ae <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801493a:	bf00      	nop
 801493c:	bf00      	nop
 801493e:	3708      	adds	r7, #8
 8014940:	46bd      	mov	sp, r7
 8014942:	bd80      	pop	{r7, pc}
 8014944:	20010f64 	.word	0x20010f64

08014948 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8014948:	b580      	push	{r7, lr}
 801494a:	b082      	sub	sp, #8
 801494c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801494e:	4b16      	ldr	r3, [pc, #88]	; (80149a8 <dhcp_fine_tmr+0x60>)
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	607b      	str	r3, [r7, #4]
 8014954:	e020      	b.n	8014998 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801495a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801495c:	683b      	ldr	r3, [r7, #0]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d017      	beq.n	8014992 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8014962:	683b      	ldr	r3, [r7, #0]
 8014964:	891b      	ldrh	r3, [r3, #8]
 8014966:	2b01      	cmp	r3, #1
 8014968:	d906      	bls.n	8014978 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801496a:	683b      	ldr	r3, [r7, #0]
 801496c:	891b      	ldrh	r3, [r3, #8]
 801496e:	3b01      	subs	r3, #1
 8014970:	b29a      	uxth	r2, r3
 8014972:	683b      	ldr	r3, [r7, #0]
 8014974:	811a      	strh	r2, [r3, #8]
 8014976:	e00c      	b.n	8014992 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8014978:	683b      	ldr	r3, [r7, #0]
 801497a:	891b      	ldrh	r3, [r3, #8]
 801497c:	2b01      	cmp	r3, #1
 801497e:	d108      	bne.n	8014992 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8014980:	683b      	ldr	r3, [r7, #0]
 8014982:	891b      	ldrh	r3, [r3, #8]
 8014984:	3b01      	subs	r3, #1
 8014986:	b29a      	uxth	r2, r3
 8014988:	683b      	ldr	r3, [r7, #0]
 801498a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801498c:	6878      	ldr	r0, [r7, #4]
 801498e:	f000 f80d 	bl	80149ac <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	607b      	str	r3, [r7, #4]
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	2b00      	cmp	r3, #0
 801499c:	d1db      	bne.n	8014956 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801499e:	bf00      	nop
 80149a0:	bf00      	nop
 80149a2:	3708      	adds	r7, #8
 80149a4:	46bd      	mov	sp, r7
 80149a6:	bd80      	pop	{r7, pc}
 80149a8:	20010f64 	.word	0x20010f64

080149ac <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b084      	sub	sp, #16
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149b8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	795b      	ldrb	r3, [r3, #5]
 80149be:	2b0c      	cmp	r3, #12
 80149c0:	d003      	beq.n	80149ca <dhcp_timeout+0x1e>
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	795b      	ldrb	r3, [r3, #5]
 80149c6:	2b06      	cmp	r3, #6
 80149c8:	d103      	bne.n	80149d2 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80149ca:	6878      	ldr	r0, [r7, #4]
 80149cc:	f000 fa54 	bl	8014e78 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80149d0:	e031      	b.n	8014a36 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	795b      	ldrb	r3, [r3, #5]
 80149d6:	2b01      	cmp	r3, #1
 80149d8:	d10e      	bne.n	80149f8 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	799b      	ldrb	r3, [r3, #6]
 80149de:	2b05      	cmp	r3, #5
 80149e0:	d803      	bhi.n	80149ea <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80149e2:	6878      	ldr	r0, [r7, #4]
 80149e4:	f7ff fe60 	bl	80146a8 <dhcp_select>
}
 80149e8:	e025      	b.n	8014a36 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80149ea:	6878      	ldr	r0, [r7, #4]
 80149ec:	f000 fdae 	bl	801554c <dhcp_release_and_stop>
      dhcp_start(netif);
 80149f0:	6878      	ldr	r0, [r7, #4]
 80149f2:	f000 f8e5 	bl	8014bc0 <dhcp_start>
}
 80149f6:	e01e      	b.n	8014a36 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	795b      	ldrb	r3, [r3, #5]
 80149fc:	2b08      	cmp	r3, #8
 80149fe:	d10b      	bne.n	8014a18 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	799b      	ldrb	r3, [r3, #6]
 8014a04:	2b01      	cmp	r3, #1
 8014a06:	d803      	bhi.n	8014a10 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8014a08:	6878      	ldr	r0, [r7, #4]
 8014a0a:	f7ff fdf3 	bl	80145f4 <dhcp_check>
}
 8014a0e:	e012      	b.n	8014a36 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8014a10:	6878      	ldr	r0, [r7, #4]
 8014a12:	f000 fad3 	bl	8014fbc <dhcp_bind>
}
 8014a16:	e00e      	b.n	8014a36 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	795b      	ldrb	r3, [r3, #5]
 8014a1c:	2b03      	cmp	r3, #3
 8014a1e:	d10a      	bne.n	8014a36 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	799b      	ldrb	r3, [r3, #6]
 8014a24:	2b01      	cmp	r3, #1
 8014a26:	d803      	bhi.n	8014a30 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8014a28:	6878      	ldr	r0, [r7, #4]
 8014a2a:	f000 fcd9 	bl	80153e0 <dhcp_reboot>
}
 8014a2e:	e002      	b.n	8014a36 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8014a30:	6878      	ldr	r0, [r7, #4]
 8014a32:	f000 fa21 	bl	8014e78 <dhcp_discover>
}
 8014a36:	bf00      	nop
 8014a38:	3710      	adds	r7, #16
 8014a3a:	46bd      	mov	sp, r7
 8014a3c:	bd80      	pop	{r7, pc}

08014a3e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8014a3e:	b580      	push	{r7, lr}
 8014a40:	b084      	sub	sp, #16
 8014a42:	af00      	add	r7, sp, #0
 8014a44:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a4a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	795b      	ldrb	r3, [r3, #5]
 8014a50:	2b01      	cmp	r3, #1
 8014a52:	d007      	beq.n	8014a64 <dhcp_t1_timeout+0x26>
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	795b      	ldrb	r3, [r3, #5]
 8014a58:	2b0a      	cmp	r3, #10
 8014a5a:	d003      	beq.n	8014a64 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014a60:	2b05      	cmp	r3, #5
 8014a62:	d116      	bne.n	8014a92 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8014a64:	6878      	ldr	r0, [r7, #4]
 8014a66:	f000 fb83 	bl	8015170 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	899b      	ldrh	r3, [r3, #12]
 8014a6e:	461a      	mov	r2, r3
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	8a5b      	ldrh	r3, [r3, #18]
 8014a74:	1ad3      	subs	r3, r2, r3
 8014a76:	2b01      	cmp	r3, #1
 8014a78:	dd0b      	ble.n	8014a92 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	899b      	ldrh	r3, [r3, #12]
 8014a7e:	461a      	mov	r2, r3
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	8a5b      	ldrh	r3, [r3, #18]
 8014a84:	1ad3      	subs	r3, r2, r3
 8014a86:	0fda      	lsrs	r2, r3, #31
 8014a88:	4413      	add	r3, r2
 8014a8a:	105b      	asrs	r3, r3, #1
 8014a8c:	b29a      	uxth	r2, r3
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8014a92:	bf00      	nop
 8014a94:	3710      	adds	r7, #16
 8014a96:	46bd      	mov	sp, r7
 8014a98:	bd80      	pop	{r7, pc}

08014a9a <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8014a9a:	b580      	push	{r7, lr}
 8014a9c:	b084      	sub	sp, #16
 8014a9e:	af00      	add	r7, sp, #0
 8014aa0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014aa6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	795b      	ldrb	r3, [r3, #5]
 8014aac:	2b01      	cmp	r3, #1
 8014aae:	d00b      	beq.n	8014ac8 <dhcp_t2_timeout+0x2e>
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	795b      	ldrb	r3, [r3, #5]
 8014ab4:	2b0a      	cmp	r3, #10
 8014ab6:	d007      	beq.n	8014ac8 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014abc:	2b05      	cmp	r3, #5
 8014abe:	d003      	beq.n	8014ac8 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	795b      	ldrb	r3, [r3, #5]
 8014ac4:	2b04      	cmp	r3, #4
 8014ac6:	d116      	bne.n	8014af6 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8014ac8:	6878      	ldr	r0, [r7, #4]
 8014aca:	f000 fbed 	bl	80152a8 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	8a9b      	ldrh	r3, [r3, #20]
 8014ad2:	461a      	mov	r2, r3
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	8a5b      	ldrh	r3, [r3, #18]
 8014ad8:	1ad3      	subs	r3, r2, r3
 8014ada:	2b01      	cmp	r3, #1
 8014adc:	dd0b      	ble.n	8014af6 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	8a9b      	ldrh	r3, [r3, #20]
 8014ae2:	461a      	mov	r2, r3
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	8a5b      	ldrh	r3, [r3, #18]
 8014ae8:	1ad3      	subs	r3, r2, r3
 8014aea:	0fda      	lsrs	r2, r3, #31
 8014aec:	4413      	add	r3, r2
 8014aee:	105b      	asrs	r3, r3, #1
 8014af0:	b29a      	uxth	r2, r3
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8014af6:	bf00      	nop
 8014af8:	3710      	adds	r7, #16
 8014afa:	46bd      	mov	sp, r7
 8014afc:	bd80      	pop	{r7, pc}
	...

08014b00 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b084      	sub	sp, #16
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	6078      	str	r0, [r7, #4]
 8014b08:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b0e:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	2200      	movs	r2, #0
 8014b14:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	2200      	movs	r2, #0
 8014b1a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8014b1c:	4b26      	ldr	r3, [pc, #152]	; (8014bb8 <dhcp_handle_ack+0xb8>)
 8014b1e:	78db      	ldrb	r3, [r3, #3]
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d003      	beq.n	8014b2c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8014b24:	4b25      	ldr	r3, [pc, #148]	; (8014bbc <dhcp_handle_ack+0xbc>)
 8014b26:	68da      	ldr	r2, [r3, #12]
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8014b2c:	4b22      	ldr	r3, [pc, #136]	; (8014bb8 <dhcp_handle_ack+0xb8>)
 8014b2e:	791b      	ldrb	r3, [r3, #4]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d004      	beq.n	8014b3e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8014b34:	4b21      	ldr	r3, [pc, #132]	; (8014bbc <dhcp_handle_ack+0xbc>)
 8014b36:	691a      	ldr	r2, [r3, #16]
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8014b3c:	e004      	b.n	8014b48 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b42:	085a      	lsrs	r2, r3, #1
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8014b48:	4b1b      	ldr	r3, [pc, #108]	; (8014bb8 <dhcp_handle_ack+0xb8>)
 8014b4a:	795b      	ldrb	r3, [r3, #5]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d004      	beq.n	8014b5a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8014b50:	4b1a      	ldr	r3, [pc, #104]	; (8014bbc <dhcp_handle_ack+0xbc>)
 8014b52:	695a      	ldr	r2, [r3, #20]
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	631a      	str	r2, [r3, #48]	; 0x30
 8014b58:	e007      	b.n	8014b6a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014b5e:	4613      	mov	r3, r2
 8014b60:	00db      	lsls	r3, r3, #3
 8014b62:	1a9b      	subs	r3, r3, r2
 8014b64:	08da      	lsrs	r2, r3, #3
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8014b6a:	683b      	ldr	r3, [r7, #0]
 8014b6c:	691a      	ldr	r2, [r3, #16]
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8014b72:	4b11      	ldr	r3, [pc, #68]	; (8014bb8 <dhcp_handle_ack+0xb8>)
 8014b74:	799b      	ldrb	r3, [r3, #6]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d00b      	beq.n	8014b92 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8014b7a:	4b10      	ldr	r3, [pc, #64]	; (8014bbc <dhcp_handle_ack+0xbc>)
 8014b7c:	699b      	ldr	r3, [r3, #24]
 8014b7e:	4618      	mov	r0, r3
 8014b80:	f7f6 fdc9 	bl	800b716 <lwip_htonl>
 8014b84:	4602      	mov	r2, r0
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	2201      	movs	r2, #1
 8014b8e:	71da      	strb	r2, [r3, #7]
 8014b90:	e002      	b.n	8014b98 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	2200      	movs	r2, #0
 8014b96:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8014b98:	4b07      	ldr	r3, [pc, #28]	; (8014bb8 <dhcp_handle_ack+0xb8>)
 8014b9a:	79db      	ldrb	r3, [r3, #7]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d007      	beq.n	8014bb0 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8014ba0:	4b06      	ldr	r3, [pc, #24]	; (8014bbc <dhcp_handle_ack+0xbc>)
 8014ba2:	69db      	ldr	r3, [r3, #28]
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	f7f6 fdb6 	bl	800b716 <lwip_htonl>
 8014baa:	4602      	mov	r2, r0
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8014bb0:	bf00      	nop
 8014bb2:	3710      	adds	r7, #16
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	bd80      	pop	{r7, pc}
 8014bb8:	20010ff0 	.word	0x20010ff0
 8014bbc:	20010fd0 	.word	0x20010fd0

08014bc0 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8014bc0:	b580      	push	{r7, lr}
 8014bc2:	b084      	sub	sp, #16
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d109      	bne.n	8014be2 <dhcp_start+0x22>
 8014bce:	4b37      	ldr	r3, [pc, #220]	; (8014cac <dhcp_start+0xec>)
 8014bd0:	f240 22e7 	movw	r2, #743	; 0x2e7
 8014bd4:	4936      	ldr	r1, [pc, #216]	; (8014cb0 <dhcp_start+0xf0>)
 8014bd6:	4837      	ldr	r0, [pc, #220]	; (8014cb4 <dhcp_start+0xf4>)
 8014bd8:	f004 f8ee 	bl	8018db8 <iprintf>
 8014bdc:	f06f 030f 	mvn.w	r3, #15
 8014be0:	e060      	b.n	8014ca4 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014be8:	f003 0301 	and.w	r3, r3, #1
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d109      	bne.n	8014c04 <dhcp_start+0x44>
 8014bf0:	4b2e      	ldr	r3, [pc, #184]	; (8014cac <dhcp_start+0xec>)
 8014bf2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8014bf6:	4930      	ldr	r1, [pc, #192]	; (8014cb8 <dhcp_start+0xf8>)
 8014bf8:	482e      	ldr	r0, [pc, #184]	; (8014cb4 <dhcp_start+0xf4>)
 8014bfa:	f004 f8dd 	bl	8018db8 <iprintf>
 8014bfe:	f06f 030f 	mvn.w	r3, #15
 8014c02:	e04f      	b.n	8014ca4 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c08:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014c0e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8014c12:	d202      	bcs.n	8014c1a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8014c14:	f04f 33ff 	mov.w	r3, #4294967295
 8014c18:	e044      	b.n	8014ca4 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d10d      	bne.n	8014c3c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8014c20:	2034      	movs	r0, #52	; 0x34
 8014c22:	f7f7 f8cd 	bl	800bdc0 <mem_malloc>
 8014c26:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d102      	bne.n	8014c34 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8014c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8014c32:	e037      	b.n	8014ca4 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	68fa      	ldr	r2, [r7, #12]
 8014c38:	625a      	str	r2, [r3, #36]	; 0x24
 8014c3a:	e005      	b.n	8014c48 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	791b      	ldrb	r3, [r3, #4]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d001      	beq.n	8014c48 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014c44:	f7ff fc92 	bl	801456c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8014c48:	2234      	movs	r2, #52	; 0x34
 8014c4a:	2100      	movs	r1, #0
 8014c4c:	68f8      	ldr	r0, [r7, #12]
 8014c4e:	f004 f952 	bl	8018ef6 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8014c52:	f7ff fc39 	bl	80144c8 <dhcp_inc_pcb_refcount>
 8014c56:	4603      	mov	r3, r0
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d002      	beq.n	8014c62 <dhcp_start+0xa2>
    return ERR_MEM;
 8014c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8014c60:	e020      	b.n	8014ca4 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	2201      	movs	r2, #1
 8014c66:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014c6e:	f003 0304 	and.w	r3, r3, #4
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d105      	bne.n	8014c82 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8014c76:	2102      	movs	r1, #2
 8014c78:	68f8      	ldr	r0, [r7, #12]
 8014c7a:	f000 fd01 	bl	8015680 <dhcp_set_state>
    return ERR_OK;
 8014c7e:	2300      	movs	r3, #0
 8014c80:	e010      	b.n	8014ca4 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8014c82:	6878      	ldr	r0, [r7, #4]
 8014c84:	f000 f8f8 	bl	8014e78 <dhcp_discover>
 8014c88:	4603      	mov	r3, r0
 8014c8a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8014c8c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d005      	beq.n	8014ca0 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8014c94:	6878      	ldr	r0, [r7, #4]
 8014c96:	f000 fc59 	bl	801554c <dhcp_release_and_stop>
    return ERR_MEM;
 8014c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8014c9e:	e001      	b.n	8014ca4 <dhcp_start+0xe4>
  }
  return result;
 8014ca0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	3710      	adds	r7, #16
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	bd80      	pop	{r7, pc}
 8014cac:	0801d35c 	.word	0x0801d35c
 8014cb0:	0801d440 	.word	0x0801d440
 8014cb4:	0801d3bc 	.word	0x0801d3bc
 8014cb8:	0801d484 	.word	0x0801d484

08014cbc <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	b084      	sub	sp, #16
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cc8:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d025      	beq.n	8014d1c <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	795b      	ldrb	r3, [r3, #5]
 8014cd4:	2b0a      	cmp	r3, #10
 8014cd6:	d008      	beq.n	8014cea <dhcp_network_changed+0x2e>
 8014cd8:	2b0a      	cmp	r3, #10
 8014cda:	dc0d      	bgt.n	8014cf8 <dhcp_network_changed+0x3c>
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d01f      	beq.n	8014d20 <dhcp_network_changed+0x64>
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	db09      	blt.n	8014cf8 <dhcp_network_changed+0x3c>
 8014ce4:	3b03      	subs	r3, #3
 8014ce6:	2b02      	cmp	r3, #2
 8014ce8:	d806      	bhi.n	8014cf8 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	2200      	movs	r2, #0
 8014cee:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8014cf0:	6878      	ldr	r0, [r7, #4]
 8014cf2:	f000 fb75 	bl	80153e0 <dhcp_reboot>
      break;
 8014cf6:	e014      	b.n	8014d22 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	795b      	ldrb	r3, [r3, #5]
 8014cfc:	2b0c      	cmp	r3, #12
 8014cfe:	d906      	bls.n	8014d0e <dhcp_network_changed+0x52>
 8014d00:	4b09      	ldr	r3, [pc, #36]	; (8014d28 <dhcp_network_changed+0x6c>)
 8014d02:	f240 326d 	movw	r2, #877	; 0x36d
 8014d06:	4909      	ldr	r1, [pc, #36]	; (8014d2c <dhcp_network_changed+0x70>)
 8014d08:	4809      	ldr	r0, [pc, #36]	; (8014d30 <dhcp_network_changed+0x74>)
 8014d0a:	f004 f855 	bl	8018db8 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	2200      	movs	r2, #0
 8014d12:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8014d14:	6878      	ldr	r0, [r7, #4]
 8014d16:	f000 f8af 	bl	8014e78 <dhcp_discover>
      break;
 8014d1a:	e002      	b.n	8014d22 <dhcp_network_changed+0x66>
    return;
 8014d1c:	bf00      	nop
 8014d1e:	e000      	b.n	8014d22 <dhcp_network_changed+0x66>
      break;
 8014d20:	bf00      	nop
  }
}
 8014d22:	3710      	adds	r7, #16
 8014d24:	46bd      	mov	sp, r7
 8014d26:	bd80      	pop	{r7, pc}
 8014d28:	0801d35c 	.word	0x0801d35c
 8014d2c:	0801d4a8 	.word	0x0801d4a8
 8014d30:	0801d3bc 	.word	0x0801d3bc

08014d34 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8014d34:	b580      	push	{r7, lr}
 8014d36:	b084      	sub	sp, #16
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	6078      	str	r0, [r7, #4]
 8014d3c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d107      	bne.n	8014d54 <dhcp_arp_reply+0x20>
 8014d44:	4b0e      	ldr	r3, [pc, #56]	; (8014d80 <dhcp_arp_reply+0x4c>)
 8014d46:	f240 328b 	movw	r2, #907	; 0x38b
 8014d4a:	490e      	ldr	r1, [pc, #56]	; (8014d84 <dhcp_arp_reply+0x50>)
 8014d4c:	480e      	ldr	r0, [pc, #56]	; (8014d88 <dhcp_arp_reply+0x54>)
 8014d4e:	f004 f833 	bl	8018db8 <iprintf>
 8014d52:	e012      	b.n	8014d7a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d58:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d00c      	beq.n	8014d7a <dhcp_arp_reply+0x46>
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	795b      	ldrb	r3, [r3, #5]
 8014d64:	2b08      	cmp	r3, #8
 8014d66:	d108      	bne.n	8014d7a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8014d68:	683b      	ldr	r3, [r7, #0]
 8014d6a:	681a      	ldr	r2, [r3, #0]
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	69db      	ldr	r3, [r3, #28]
 8014d70:	429a      	cmp	r2, r3
 8014d72:	d102      	bne.n	8014d7a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8014d74:	6878      	ldr	r0, [r7, #4]
 8014d76:	f000 f809 	bl	8014d8c <dhcp_decline>
    }
  }
}
 8014d7a:	3710      	adds	r7, #16
 8014d7c:	46bd      	mov	sp, r7
 8014d7e:	bd80      	pop	{r7, pc}
 8014d80:	0801d35c 	.word	0x0801d35c
 8014d84:	0801d440 	.word	0x0801d440
 8014d88:	0801d3bc 	.word	0x0801d3bc

08014d8c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8014d8c:	b5b0      	push	{r4, r5, r7, lr}
 8014d8e:	b08a      	sub	sp, #40	; 0x28
 8014d90:	af02      	add	r7, sp, #8
 8014d92:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d98:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014d9a:	210c      	movs	r1, #12
 8014d9c:	69b8      	ldr	r0, [r7, #24]
 8014d9e:	f000 fc6f 	bl	8015680 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8014da2:	f107 030c 	add.w	r3, r7, #12
 8014da6:	2204      	movs	r2, #4
 8014da8:	69b9      	ldr	r1, [r7, #24]
 8014daa:	6878      	ldr	r0, [r7, #4]
 8014dac:	f001 f8f4 	bl	8015f98 <dhcp_create_msg>
 8014db0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014db2:	697b      	ldr	r3, [r7, #20]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d035      	beq.n	8014e24 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014db8:	697b      	ldr	r3, [r7, #20]
 8014dba:	685b      	ldr	r3, [r3, #4]
 8014dbc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014dbe:	89b8      	ldrh	r0, [r7, #12]
 8014dc0:	693b      	ldr	r3, [r7, #16]
 8014dc2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014dc6:	2304      	movs	r3, #4
 8014dc8:	2232      	movs	r2, #50	; 0x32
 8014dca:	f000 fc73 	bl	80156b4 <dhcp_option>
 8014dce:	4603      	mov	r3, r0
 8014dd0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014dd2:	89bc      	ldrh	r4, [r7, #12]
 8014dd4:	693b      	ldr	r3, [r7, #16]
 8014dd6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014dda:	69bb      	ldr	r3, [r7, #24]
 8014ddc:	69db      	ldr	r3, [r3, #28]
 8014dde:	4618      	mov	r0, r3
 8014de0:	f7f6 fc99 	bl	800b716 <lwip_htonl>
 8014de4:	4603      	mov	r3, r0
 8014de6:	461a      	mov	r2, r3
 8014de8:	4629      	mov	r1, r5
 8014dea:	4620      	mov	r0, r4
 8014dec:	f000 fcee 	bl	80157cc <dhcp_option_long>
 8014df0:	4603      	mov	r3, r0
 8014df2:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014df4:	89b8      	ldrh	r0, [r7, #12]
 8014df6:	693b      	ldr	r3, [r7, #16]
 8014df8:	33f0      	adds	r3, #240	; 0xf0
 8014dfa:	697a      	ldr	r2, [r7, #20]
 8014dfc:	4619      	mov	r1, r3
 8014dfe:	f001 f9a1 	bl	8016144 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014e02:	4b19      	ldr	r3, [pc, #100]	; (8014e68 <dhcp_decline+0xdc>)
 8014e04:	6818      	ldr	r0, [r3, #0]
 8014e06:	4b19      	ldr	r3, [pc, #100]	; (8014e6c <dhcp_decline+0xe0>)
 8014e08:	9301      	str	r3, [sp, #4]
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	9300      	str	r3, [sp, #0]
 8014e0e:	2343      	movs	r3, #67	; 0x43
 8014e10:	4a17      	ldr	r2, [pc, #92]	; (8014e70 <dhcp_decline+0xe4>)
 8014e12:	6979      	ldr	r1, [r7, #20]
 8014e14:	f7ff f8c6 	bl	8013fa4 <udp_sendto_if_src>
 8014e18:	4603      	mov	r3, r0
 8014e1a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014e1c:	6978      	ldr	r0, [r7, #20]
 8014e1e:	f7f8 f899 	bl	800cf54 <pbuf_free>
 8014e22:	e001      	b.n	8014e28 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014e24:	23ff      	movs	r3, #255	; 0xff
 8014e26:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014e28:	69bb      	ldr	r3, [r7, #24]
 8014e2a:	799b      	ldrb	r3, [r3, #6]
 8014e2c:	2bff      	cmp	r3, #255	; 0xff
 8014e2e:	d005      	beq.n	8014e3c <dhcp_decline+0xb0>
    dhcp->tries++;
 8014e30:	69bb      	ldr	r3, [r7, #24]
 8014e32:	799b      	ldrb	r3, [r3, #6]
 8014e34:	3301      	adds	r3, #1
 8014e36:	b2da      	uxtb	r2, r3
 8014e38:	69bb      	ldr	r3, [r7, #24]
 8014e3a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8014e3c:	f242 7310 	movw	r3, #10000	; 0x2710
 8014e40:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014e42:	89fb      	ldrh	r3, [r7, #14]
 8014e44:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014e48:	4a0a      	ldr	r2, [pc, #40]	; (8014e74 <dhcp_decline+0xe8>)
 8014e4a:	fb82 1203 	smull	r1, r2, r2, r3
 8014e4e:	1152      	asrs	r2, r2, #5
 8014e50:	17db      	asrs	r3, r3, #31
 8014e52:	1ad3      	subs	r3, r2, r3
 8014e54:	b29a      	uxth	r2, r3
 8014e56:	69bb      	ldr	r3, [r7, #24]
 8014e58:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014e5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014e5e:	4618      	mov	r0, r3
 8014e60:	3720      	adds	r7, #32
 8014e62:	46bd      	mov	sp, r7
 8014e64:	bdb0      	pop	{r4, r5, r7, pc}
 8014e66:	bf00      	nop
 8014e68:	20010ff8 	.word	0x20010ff8
 8014e6c:	08028040 	.word	0x08028040
 8014e70:	08028044 	.word	0x08028044
 8014e74:	10624dd3 	.word	0x10624dd3

08014e78 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	b08a      	sub	sp, #40	; 0x28
 8014e7c:	af02      	add	r7, sp, #8
 8014e7e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e84:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8014e86:	2300      	movs	r3, #0
 8014e88:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8014e8a:	69bb      	ldr	r3, [r7, #24]
 8014e8c:	2200      	movs	r2, #0
 8014e8e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8014e90:	2106      	movs	r1, #6
 8014e92:	69b8      	ldr	r0, [r7, #24]
 8014e94:	f000 fbf4 	bl	8015680 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8014e98:	f107 0308 	add.w	r3, r7, #8
 8014e9c:	2201      	movs	r2, #1
 8014e9e:	69b9      	ldr	r1, [r7, #24]
 8014ea0:	6878      	ldr	r0, [r7, #4]
 8014ea2:	f001 f879 	bl	8015f98 <dhcp_create_msg>
 8014ea6:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8014ea8:	693b      	ldr	r3, [r7, #16]
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d04b      	beq.n	8014f46 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014eae:	693b      	ldr	r3, [r7, #16]
 8014eb0:	685b      	ldr	r3, [r3, #4]
 8014eb2:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014eb4:	8938      	ldrh	r0, [r7, #8]
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014ebc:	2302      	movs	r3, #2
 8014ebe:	2239      	movs	r2, #57	; 0x39
 8014ec0:	f000 fbf8 	bl	80156b4 <dhcp_option>
 8014ec4:	4603      	mov	r3, r0
 8014ec6:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014ec8:	8938      	ldrh	r0, [r7, #8]
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014ed4:	461a      	mov	r2, r3
 8014ed6:	f000 fc47 	bl	8015768 <dhcp_option_short>
 8014eda:	4603      	mov	r3, r0
 8014edc:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014ede:	8938      	ldrh	r0, [r7, #8]
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014ee6:	2303      	movs	r3, #3
 8014ee8:	2237      	movs	r2, #55	; 0x37
 8014eea:	f000 fbe3 	bl	80156b4 <dhcp_option>
 8014eee:	4603      	mov	r3, r0
 8014ef0:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	77fb      	strb	r3, [r7, #31]
 8014ef6:	e00e      	b.n	8014f16 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014ef8:	8938      	ldrh	r0, [r7, #8]
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014f00:	7ffb      	ldrb	r3, [r7, #31]
 8014f02:	4a29      	ldr	r2, [pc, #164]	; (8014fa8 <dhcp_discover+0x130>)
 8014f04:	5cd3      	ldrb	r3, [r2, r3]
 8014f06:	461a      	mov	r2, r3
 8014f08:	f000 fc08 	bl	801571c <dhcp_option_byte>
 8014f0c:	4603      	mov	r3, r0
 8014f0e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014f10:	7ffb      	ldrb	r3, [r7, #31]
 8014f12:	3301      	adds	r3, #1
 8014f14:	77fb      	strb	r3, [r7, #31]
 8014f16:	7ffb      	ldrb	r3, [r7, #31]
 8014f18:	2b02      	cmp	r3, #2
 8014f1a:	d9ed      	bls.n	8014ef8 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014f1c:	8938      	ldrh	r0, [r7, #8]
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	33f0      	adds	r3, #240	; 0xf0
 8014f22:	693a      	ldr	r2, [r7, #16]
 8014f24:	4619      	mov	r1, r3
 8014f26:	f001 f90d 	bl	8016144 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014f2a:	4b20      	ldr	r3, [pc, #128]	; (8014fac <dhcp_discover+0x134>)
 8014f2c:	6818      	ldr	r0, [r3, #0]
 8014f2e:	4b20      	ldr	r3, [pc, #128]	; (8014fb0 <dhcp_discover+0x138>)
 8014f30:	9301      	str	r3, [sp, #4]
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	9300      	str	r3, [sp, #0]
 8014f36:	2343      	movs	r3, #67	; 0x43
 8014f38:	4a1e      	ldr	r2, [pc, #120]	; (8014fb4 <dhcp_discover+0x13c>)
 8014f3a:	6939      	ldr	r1, [r7, #16]
 8014f3c:	f7ff f832 	bl	8013fa4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8014f40:	6938      	ldr	r0, [r7, #16]
 8014f42:	f7f8 f807 	bl	800cf54 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8014f46:	69bb      	ldr	r3, [r7, #24]
 8014f48:	799b      	ldrb	r3, [r3, #6]
 8014f4a:	2bff      	cmp	r3, #255	; 0xff
 8014f4c:	d005      	beq.n	8014f5a <dhcp_discover+0xe2>
    dhcp->tries++;
 8014f4e:	69bb      	ldr	r3, [r7, #24]
 8014f50:	799b      	ldrb	r3, [r3, #6]
 8014f52:	3301      	adds	r3, #1
 8014f54:	b2da      	uxtb	r2, r3
 8014f56:	69bb      	ldr	r3, [r7, #24]
 8014f58:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014f5a:	69bb      	ldr	r3, [r7, #24]
 8014f5c:	799b      	ldrb	r3, [r3, #6]
 8014f5e:	2b05      	cmp	r3, #5
 8014f60:	d80d      	bhi.n	8014f7e <dhcp_discover+0x106>
 8014f62:	69bb      	ldr	r3, [r7, #24]
 8014f64:	799b      	ldrb	r3, [r3, #6]
 8014f66:	461a      	mov	r2, r3
 8014f68:	2301      	movs	r3, #1
 8014f6a:	4093      	lsls	r3, r2
 8014f6c:	b29b      	uxth	r3, r3
 8014f6e:	461a      	mov	r2, r3
 8014f70:	0152      	lsls	r2, r2, #5
 8014f72:	1ad2      	subs	r2, r2, r3
 8014f74:	0092      	lsls	r2, r2, #2
 8014f76:	4413      	add	r3, r2
 8014f78:	00db      	lsls	r3, r3, #3
 8014f7a:	b29b      	uxth	r3, r3
 8014f7c:	e001      	b.n	8014f82 <dhcp_discover+0x10a>
 8014f7e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014f82:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014f84:	897b      	ldrh	r3, [r7, #10]
 8014f86:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014f8a:	4a0b      	ldr	r2, [pc, #44]	; (8014fb8 <dhcp_discover+0x140>)
 8014f8c:	fb82 1203 	smull	r1, r2, r2, r3
 8014f90:	1152      	asrs	r2, r2, #5
 8014f92:	17db      	asrs	r3, r3, #31
 8014f94:	1ad3      	subs	r3, r2, r3
 8014f96:	b29a      	uxth	r2, r3
 8014f98:	69bb      	ldr	r3, [r7, #24]
 8014f9a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014f9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014fa0:	4618      	mov	r0, r3
 8014fa2:	3720      	adds	r7, #32
 8014fa4:	46bd      	mov	sp, r7
 8014fa6:	bd80      	pop	{r7, pc}
 8014fa8:	20000030 	.word	0x20000030
 8014fac:	20010ff8 	.word	0x20010ff8
 8014fb0:	08028040 	.word	0x08028040
 8014fb4:	08028044 	.word	0x08028044
 8014fb8:	10624dd3 	.word	0x10624dd3

08014fbc <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8014fbc:	b580      	push	{r7, lr}
 8014fbe:	b088      	sub	sp, #32
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d107      	bne.n	8014fda <dhcp_bind+0x1e>
 8014fca:	4b64      	ldr	r3, [pc, #400]	; (801515c <dhcp_bind+0x1a0>)
 8014fcc:	f240 4215 	movw	r2, #1045	; 0x415
 8014fd0:	4963      	ldr	r1, [pc, #396]	; (8015160 <dhcp_bind+0x1a4>)
 8014fd2:	4864      	ldr	r0, [pc, #400]	; (8015164 <dhcp_bind+0x1a8>)
 8014fd4:	f003 fef0 	bl	8018db8 <iprintf>
 8014fd8:	e0bc      	b.n	8015154 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fde:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8014fe0:	69bb      	ldr	r3, [r7, #24]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d107      	bne.n	8014ff6 <dhcp_bind+0x3a>
 8014fe6:	4b5d      	ldr	r3, [pc, #372]	; (801515c <dhcp_bind+0x1a0>)
 8014fe8:	f240 4217 	movw	r2, #1047	; 0x417
 8014fec:	495e      	ldr	r1, [pc, #376]	; (8015168 <dhcp_bind+0x1ac>)
 8014fee:	485d      	ldr	r0, [pc, #372]	; (8015164 <dhcp_bind+0x1a8>)
 8014ff0:	f003 fee2 	bl	8018db8 <iprintf>
 8014ff4:	e0ae      	b.n	8015154 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8014ff6:	69bb      	ldr	r3, [r7, #24]
 8014ff8:	2200      	movs	r2, #0
 8014ffa:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8014ffc:	69bb      	ldr	r3, [r7, #24]
 8014ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015004:	d019      	beq.n	801503a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015006:	69bb      	ldr	r3, [r7, #24]
 8015008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801500a:	331e      	adds	r3, #30
 801500c:	4a57      	ldr	r2, [pc, #348]	; (801516c <dhcp_bind+0x1b0>)
 801500e:	fba2 2303 	umull	r2, r3, r2, r3
 8015012:	095b      	lsrs	r3, r3, #5
 8015014:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015016:	69fb      	ldr	r3, [r7, #28]
 8015018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801501c:	d302      	bcc.n	8015024 <dhcp_bind+0x68>
      timeout = 0xffff;
 801501e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015022:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8015024:	69fb      	ldr	r3, [r7, #28]
 8015026:	b29a      	uxth	r2, r3
 8015028:	69bb      	ldr	r3, [r7, #24]
 801502a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801502c:	69bb      	ldr	r3, [r7, #24]
 801502e:	8a9b      	ldrh	r3, [r3, #20]
 8015030:	2b00      	cmp	r3, #0
 8015032:	d102      	bne.n	801503a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8015034:	69bb      	ldr	r3, [r7, #24]
 8015036:	2201      	movs	r2, #1
 8015038:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801503a:	69bb      	ldr	r3, [r7, #24]
 801503c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801503e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015042:	d01d      	beq.n	8015080 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015044:	69bb      	ldr	r3, [r7, #24]
 8015046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015048:	331e      	adds	r3, #30
 801504a:	4a48      	ldr	r2, [pc, #288]	; (801516c <dhcp_bind+0x1b0>)
 801504c:	fba2 2303 	umull	r2, r3, r2, r3
 8015050:	095b      	lsrs	r3, r3, #5
 8015052:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015054:	69fb      	ldr	r3, [r7, #28]
 8015056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801505a:	d302      	bcc.n	8015062 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801505c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015060:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8015062:	69fb      	ldr	r3, [r7, #28]
 8015064:	b29a      	uxth	r2, r3
 8015066:	69bb      	ldr	r3, [r7, #24]
 8015068:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801506a:	69bb      	ldr	r3, [r7, #24]
 801506c:	895b      	ldrh	r3, [r3, #10]
 801506e:	2b00      	cmp	r3, #0
 8015070:	d102      	bne.n	8015078 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8015072:	69bb      	ldr	r3, [r7, #24]
 8015074:	2201      	movs	r2, #1
 8015076:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8015078:	69bb      	ldr	r3, [r7, #24]
 801507a:	895a      	ldrh	r2, [r3, #10]
 801507c:	69bb      	ldr	r3, [r7, #24]
 801507e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8015080:	69bb      	ldr	r3, [r7, #24]
 8015082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015088:	d01d      	beq.n	80150c6 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801508a:	69bb      	ldr	r3, [r7, #24]
 801508c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801508e:	331e      	adds	r3, #30
 8015090:	4a36      	ldr	r2, [pc, #216]	; (801516c <dhcp_bind+0x1b0>)
 8015092:	fba2 2303 	umull	r2, r3, r2, r3
 8015096:	095b      	lsrs	r3, r3, #5
 8015098:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801509a:	69fb      	ldr	r3, [r7, #28]
 801509c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80150a0:	d302      	bcc.n	80150a8 <dhcp_bind+0xec>
      timeout = 0xffff;
 80150a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80150a6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80150a8:	69fb      	ldr	r3, [r7, #28]
 80150aa:	b29a      	uxth	r2, r3
 80150ac:	69bb      	ldr	r3, [r7, #24]
 80150ae:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80150b0:	69bb      	ldr	r3, [r7, #24]
 80150b2:	899b      	ldrh	r3, [r3, #12]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d102      	bne.n	80150be <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80150b8:	69bb      	ldr	r3, [r7, #24]
 80150ba:	2201      	movs	r2, #1
 80150bc:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80150be:	69bb      	ldr	r3, [r7, #24]
 80150c0:	899a      	ldrh	r2, [r3, #12]
 80150c2:	69bb      	ldr	r3, [r7, #24]
 80150c4:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80150c6:	69bb      	ldr	r3, [r7, #24]
 80150c8:	895a      	ldrh	r2, [r3, #10]
 80150ca:	69bb      	ldr	r3, [r7, #24]
 80150cc:	899b      	ldrh	r3, [r3, #12]
 80150ce:	429a      	cmp	r2, r3
 80150d0:	d306      	bcc.n	80150e0 <dhcp_bind+0x124>
 80150d2:	69bb      	ldr	r3, [r7, #24]
 80150d4:	899b      	ldrh	r3, [r3, #12]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d002      	beq.n	80150e0 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80150da:	69bb      	ldr	r3, [r7, #24]
 80150dc:	2200      	movs	r2, #0
 80150de:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80150e0:	69bb      	ldr	r3, [r7, #24]
 80150e2:	79db      	ldrb	r3, [r3, #7]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d003      	beq.n	80150f0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80150e8:	69bb      	ldr	r3, [r7, #24]
 80150ea:	6a1b      	ldr	r3, [r3, #32]
 80150ec:	613b      	str	r3, [r7, #16]
 80150ee:	e014      	b.n	801511a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80150f0:	69bb      	ldr	r3, [r7, #24]
 80150f2:	331c      	adds	r3, #28
 80150f4:	781b      	ldrb	r3, [r3, #0]
 80150f6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80150f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	db02      	blt.n	8015106 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8015100:	23ff      	movs	r3, #255	; 0xff
 8015102:	613b      	str	r3, [r7, #16]
 8015104:	e009      	b.n	801511a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8015106:	7dfb      	ldrb	r3, [r7, #23]
 8015108:	2bbf      	cmp	r3, #191	; 0xbf
 801510a:	d903      	bls.n	8015114 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801510c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8015110:	613b      	str	r3, [r7, #16]
 8015112:	e002      	b.n	801511a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8015114:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015118:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801511a:	69bb      	ldr	r3, [r7, #24]
 801511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801511e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d108      	bne.n	8015138 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8015126:	69bb      	ldr	r3, [r7, #24]
 8015128:	69da      	ldr	r2, [r3, #28]
 801512a:	693b      	ldr	r3, [r7, #16]
 801512c:	4013      	ands	r3, r2
 801512e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015136:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8015138:	210a      	movs	r1, #10
 801513a:	69b8      	ldr	r0, [r7, #24]
 801513c:	f000 faa0 	bl	8015680 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8015140:	69bb      	ldr	r3, [r7, #24]
 8015142:	f103 011c 	add.w	r1, r3, #28
 8015146:	f107 030c 	add.w	r3, r7, #12
 801514a:	f107 0210 	add.w	r2, r7, #16
 801514e:	6878      	ldr	r0, [r7, #4]
 8015150:	f7f7 f9f2 	bl	800c538 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8015154:	3720      	adds	r7, #32
 8015156:	46bd      	mov	sp, r7
 8015158:	bd80      	pop	{r7, pc}
 801515a:	bf00      	nop
 801515c:	0801d35c 	.word	0x0801d35c
 8015160:	0801d4bc 	.word	0x0801d4bc
 8015164:	0801d3bc 	.word	0x0801d3bc
 8015168:	0801d4d8 	.word	0x0801d4d8
 801516c:	88888889 	.word	0x88888889

08015170 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8015170:	b580      	push	{r7, lr}
 8015172:	b08a      	sub	sp, #40	; 0x28
 8015174:	af02      	add	r7, sp, #8
 8015176:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801517c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801517e:	2105      	movs	r1, #5
 8015180:	69b8      	ldr	r0, [r7, #24]
 8015182:	f000 fa7d 	bl	8015680 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015186:	f107 030c 	add.w	r3, r7, #12
 801518a:	2203      	movs	r2, #3
 801518c:	69b9      	ldr	r1, [r7, #24]
 801518e:	6878      	ldr	r0, [r7, #4]
 8015190:	f000 ff02 	bl	8015f98 <dhcp_create_msg>
 8015194:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015196:	697b      	ldr	r3, [r7, #20]
 8015198:	2b00      	cmp	r3, #0
 801519a:	d04e      	beq.n	801523a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801519c:	697b      	ldr	r3, [r7, #20]
 801519e:	685b      	ldr	r3, [r3, #4]
 80151a0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80151a2:	89b8      	ldrh	r0, [r7, #12]
 80151a4:	693b      	ldr	r3, [r7, #16]
 80151a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80151aa:	2302      	movs	r3, #2
 80151ac:	2239      	movs	r2, #57	; 0x39
 80151ae:	f000 fa81 	bl	80156b4 <dhcp_option>
 80151b2:	4603      	mov	r3, r0
 80151b4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80151b6:	89b8      	ldrh	r0, [r7, #12]
 80151b8:	693b      	ldr	r3, [r7, #16]
 80151ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80151c2:	461a      	mov	r2, r3
 80151c4:	f000 fad0 	bl	8015768 <dhcp_option_short>
 80151c8:	4603      	mov	r3, r0
 80151ca:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80151cc:	89b8      	ldrh	r0, [r7, #12]
 80151ce:	693b      	ldr	r3, [r7, #16]
 80151d0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80151d4:	2303      	movs	r3, #3
 80151d6:	2237      	movs	r2, #55	; 0x37
 80151d8:	f000 fa6c 	bl	80156b4 <dhcp_option>
 80151dc:	4603      	mov	r3, r0
 80151de:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80151e0:	2300      	movs	r3, #0
 80151e2:	77bb      	strb	r3, [r7, #30]
 80151e4:	e00e      	b.n	8015204 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80151e6:	89b8      	ldrh	r0, [r7, #12]
 80151e8:	693b      	ldr	r3, [r7, #16]
 80151ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80151ee:	7fbb      	ldrb	r3, [r7, #30]
 80151f0:	4a2a      	ldr	r2, [pc, #168]	; (801529c <dhcp_renew+0x12c>)
 80151f2:	5cd3      	ldrb	r3, [r2, r3]
 80151f4:	461a      	mov	r2, r3
 80151f6:	f000 fa91 	bl	801571c <dhcp_option_byte>
 80151fa:	4603      	mov	r3, r0
 80151fc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80151fe:	7fbb      	ldrb	r3, [r7, #30]
 8015200:	3301      	adds	r3, #1
 8015202:	77bb      	strb	r3, [r7, #30]
 8015204:	7fbb      	ldrb	r3, [r7, #30]
 8015206:	2b02      	cmp	r3, #2
 8015208:	d9ed      	bls.n	80151e6 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801520a:	89b8      	ldrh	r0, [r7, #12]
 801520c:	693b      	ldr	r3, [r7, #16]
 801520e:	33f0      	adds	r3, #240	; 0xf0
 8015210:	697a      	ldr	r2, [r7, #20]
 8015212:	4619      	mov	r1, r3
 8015214:	f000 ff96 	bl	8016144 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015218:	4b21      	ldr	r3, [pc, #132]	; (80152a0 <dhcp_renew+0x130>)
 801521a:	6818      	ldr	r0, [r3, #0]
 801521c:	69bb      	ldr	r3, [r7, #24]
 801521e:	f103 0218 	add.w	r2, r3, #24
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	9300      	str	r3, [sp, #0]
 8015226:	2343      	movs	r3, #67	; 0x43
 8015228:	6979      	ldr	r1, [r7, #20]
 801522a:	f7fe fe47 	bl	8013ebc <udp_sendto_if>
 801522e:	4603      	mov	r3, r0
 8015230:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015232:	6978      	ldr	r0, [r7, #20]
 8015234:	f7f7 fe8e 	bl	800cf54 <pbuf_free>
 8015238:	e001      	b.n	801523e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801523a:	23ff      	movs	r3, #255	; 0xff
 801523c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801523e:	69bb      	ldr	r3, [r7, #24]
 8015240:	799b      	ldrb	r3, [r3, #6]
 8015242:	2bff      	cmp	r3, #255	; 0xff
 8015244:	d005      	beq.n	8015252 <dhcp_renew+0xe2>
    dhcp->tries++;
 8015246:	69bb      	ldr	r3, [r7, #24]
 8015248:	799b      	ldrb	r3, [r3, #6]
 801524a:	3301      	adds	r3, #1
 801524c:	b2da      	uxtb	r2, r3
 801524e:	69bb      	ldr	r3, [r7, #24]
 8015250:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8015252:	69bb      	ldr	r3, [r7, #24]
 8015254:	799b      	ldrb	r3, [r3, #6]
 8015256:	2b09      	cmp	r3, #9
 8015258:	d80a      	bhi.n	8015270 <dhcp_renew+0x100>
 801525a:	69bb      	ldr	r3, [r7, #24]
 801525c:	799b      	ldrb	r3, [r3, #6]
 801525e:	b29b      	uxth	r3, r3
 8015260:	461a      	mov	r2, r3
 8015262:	0152      	lsls	r2, r2, #5
 8015264:	1ad2      	subs	r2, r2, r3
 8015266:	0092      	lsls	r2, r2, #2
 8015268:	4413      	add	r3, r2
 801526a:	011b      	lsls	r3, r3, #4
 801526c:	b29b      	uxth	r3, r3
 801526e:	e001      	b.n	8015274 <dhcp_renew+0x104>
 8015270:	f644 6320 	movw	r3, #20000	; 0x4e20
 8015274:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015276:	89fb      	ldrh	r3, [r7, #14]
 8015278:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801527c:	4a09      	ldr	r2, [pc, #36]	; (80152a4 <dhcp_renew+0x134>)
 801527e:	fb82 1203 	smull	r1, r2, r2, r3
 8015282:	1152      	asrs	r2, r2, #5
 8015284:	17db      	asrs	r3, r3, #31
 8015286:	1ad3      	subs	r3, r2, r3
 8015288:	b29a      	uxth	r2, r3
 801528a:	69bb      	ldr	r3, [r7, #24]
 801528c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801528e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015292:	4618      	mov	r0, r3
 8015294:	3720      	adds	r7, #32
 8015296:	46bd      	mov	sp, r7
 8015298:	bd80      	pop	{r7, pc}
 801529a:	bf00      	nop
 801529c:	20000030 	.word	0x20000030
 80152a0:	20010ff8 	.word	0x20010ff8
 80152a4:	10624dd3 	.word	0x10624dd3

080152a8 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80152a8:	b580      	push	{r7, lr}
 80152aa:	b08a      	sub	sp, #40	; 0x28
 80152ac:	af02      	add	r7, sp, #8
 80152ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152b4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80152b6:	2104      	movs	r1, #4
 80152b8:	69b8      	ldr	r0, [r7, #24]
 80152ba:	f000 f9e1 	bl	8015680 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80152be:	f107 030c 	add.w	r3, r7, #12
 80152c2:	2203      	movs	r2, #3
 80152c4:	69b9      	ldr	r1, [r7, #24]
 80152c6:	6878      	ldr	r0, [r7, #4]
 80152c8:	f000 fe66 	bl	8015f98 <dhcp_create_msg>
 80152cc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80152ce:	697b      	ldr	r3, [r7, #20]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d04c      	beq.n	801536e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80152d4:	697b      	ldr	r3, [r7, #20]
 80152d6:	685b      	ldr	r3, [r3, #4]
 80152d8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80152da:	89b8      	ldrh	r0, [r7, #12]
 80152dc:	693b      	ldr	r3, [r7, #16]
 80152de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80152e2:	2302      	movs	r3, #2
 80152e4:	2239      	movs	r2, #57	; 0x39
 80152e6:	f000 f9e5 	bl	80156b4 <dhcp_option>
 80152ea:	4603      	mov	r3, r0
 80152ec:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80152ee:	89b8      	ldrh	r0, [r7, #12]
 80152f0:	693b      	ldr	r3, [r7, #16]
 80152f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80152fa:	461a      	mov	r2, r3
 80152fc:	f000 fa34 	bl	8015768 <dhcp_option_short>
 8015300:	4603      	mov	r3, r0
 8015302:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015304:	89b8      	ldrh	r0, [r7, #12]
 8015306:	693b      	ldr	r3, [r7, #16]
 8015308:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801530c:	2303      	movs	r3, #3
 801530e:	2237      	movs	r2, #55	; 0x37
 8015310:	f000 f9d0 	bl	80156b4 <dhcp_option>
 8015314:	4603      	mov	r3, r0
 8015316:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015318:	2300      	movs	r3, #0
 801531a:	77bb      	strb	r3, [r7, #30]
 801531c:	e00e      	b.n	801533c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801531e:	89b8      	ldrh	r0, [r7, #12]
 8015320:	693b      	ldr	r3, [r7, #16]
 8015322:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015326:	7fbb      	ldrb	r3, [r7, #30]
 8015328:	4a29      	ldr	r2, [pc, #164]	; (80153d0 <dhcp_rebind+0x128>)
 801532a:	5cd3      	ldrb	r3, [r2, r3]
 801532c:	461a      	mov	r2, r3
 801532e:	f000 f9f5 	bl	801571c <dhcp_option_byte>
 8015332:	4603      	mov	r3, r0
 8015334:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015336:	7fbb      	ldrb	r3, [r7, #30]
 8015338:	3301      	adds	r3, #1
 801533a:	77bb      	strb	r3, [r7, #30]
 801533c:	7fbb      	ldrb	r3, [r7, #30]
 801533e:	2b02      	cmp	r3, #2
 8015340:	d9ed      	bls.n	801531e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015342:	89b8      	ldrh	r0, [r7, #12]
 8015344:	693b      	ldr	r3, [r7, #16]
 8015346:	33f0      	adds	r3, #240	; 0xf0
 8015348:	697a      	ldr	r2, [r7, #20]
 801534a:	4619      	mov	r1, r3
 801534c:	f000 fefa 	bl	8016144 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015350:	4b20      	ldr	r3, [pc, #128]	; (80153d4 <dhcp_rebind+0x12c>)
 8015352:	6818      	ldr	r0, [r3, #0]
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	9300      	str	r3, [sp, #0]
 8015358:	2343      	movs	r3, #67	; 0x43
 801535a:	4a1f      	ldr	r2, [pc, #124]	; (80153d8 <dhcp_rebind+0x130>)
 801535c:	6979      	ldr	r1, [r7, #20]
 801535e:	f7fe fdad 	bl	8013ebc <udp_sendto_if>
 8015362:	4603      	mov	r3, r0
 8015364:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015366:	6978      	ldr	r0, [r7, #20]
 8015368:	f7f7 fdf4 	bl	800cf54 <pbuf_free>
 801536c:	e001      	b.n	8015372 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801536e:	23ff      	movs	r3, #255	; 0xff
 8015370:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015372:	69bb      	ldr	r3, [r7, #24]
 8015374:	799b      	ldrb	r3, [r3, #6]
 8015376:	2bff      	cmp	r3, #255	; 0xff
 8015378:	d005      	beq.n	8015386 <dhcp_rebind+0xde>
    dhcp->tries++;
 801537a:	69bb      	ldr	r3, [r7, #24]
 801537c:	799b      	ldrb	r3, [r3, #6]
 801537e:	3301      	adds	r3, #1
 8015380:	b2da      	uxtb	r2, r3
 8015382:	69bb      	ldr	r3, [r7, #24]
 8015384:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015386:	69bb      	ldr	r3, [r7, #24]
 8015388:	799b      	ldrb	r3, [r3, #6]
 801538a:	2b09      	cmp	r3, #9
 801538c:	d80a      	bhi.n	80153a4 <dhcp_rebind+0xfc>
 801538e:	69bb      	ldr	r3, [r7, #24]
 8015390:	799b      	ldrb	r3, [r3, #6]
 8015392:	b29b      	uxth	r3, r3
 8015394:	461a      	mov	r2, r3
 8015396:	0152      	lsls	r2, r2, #5
 8015398:	1ad2      	subs	r2, r2, r3
 801539a:	0092      	lsls	r2, r2, #2
 801539c:	4413      	add	r3, r2
 801539e:	00db      	lsls	r3, r3, #3
 80153a0:	b29b      	uxth	r3, r3
 80153a2:	e001      	b.n	80153a8 <dhcp_rebind+0x100>
 80153a4:	f242 7310 	movw	r3, #10000	; 0x2710
 80153a8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80153aa:	89fb      	ldrh	r3, [r7, #14]
 80153ac:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80153b0:	4a0a      	ldr	r2, [pc, #40]	; (80153dc <dhcp_rebind+0x134>)
 80153b2:	fb82 1203 	smull	r1, r2, r2, r3
 80153b6:	1152      	asrs	r2, r2, #5
 80153b8:	17db      	asrs	r3, r3, #31
 80153ba:	1ad3      	subs	r3, r2, r3
 80153bc:	b29a      	uxth	r2, r3
 80153be:	69bb      	ldr	r3, [r7, #24]
 80153c0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80153c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80153c6:	4618      	mov	r0, r3
 80153c8:	3720      	adds	r7, #32
 80153ca:	46bd      	mov	sp, r7
 80153cc:	bd80      	pop	{r7, pc}
 80153ce:	bf00      	nop
 80153d0:	20000030 	.word	0x20000030
 80153d4:	20010ff8 	.word	0x20010ff8
 80153d8:	08028044 	.word	0x08028044
 80153dc:	10624dd3 	.word	0x10624dd3

080153e0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80153e0:	b5b0      	push	{r4, r5, r7, lr}
 80153e2:	b08a      	sub	sp, #40	; 0x28
 80153e4:	af02      	add	r7, sp, #8
 80153e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153ec:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80153ee:	2103      	movs	r1, #3
 80153f0:	69b8      	ldr	r0, [r7, #24]
 80153f2:	f000 f945 	bl	8015680 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80153f6:	f107 030c 	add.w	r3, r7, #12
 80153fa:	2203      	movs	r2, #3
 80153fc:	69b9      	ldr	r1, [r7, #24]
 80153fe:	6878      	ldr	r0, [r7, #4]
 8015400:	f000 fdca 	bl	8015f98 <dhcp_create_msg>
 8015404:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015406:	697b      	ldr	r3, [r7, #20]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d066      	beq.n	80154da <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801540c:	697b      	ldr	r3, [r7, #20]
 801540e:	685b      	ldr	r3, [r3, #4]
 8015410:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015412:	89b8      	ldrh	r0, [r7, #12]
 8015414:	693b      	ldr	r3, [r7, #16]
 8015416:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801541a:	2302      	movs	r3, #2
 801541c:	2239      	movs	r2, #57	; 0x39
 801541e:	f000 f949 	bl	80156b4 <dhcp_option>
 8015422:	4603      	mov	r3, r0
 8015424:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8015426:	89b8      	ldrh	r0, [r7, #12]
 8015428:	693b      	ldr	r3, [r7, #16]
 801542a:	33f0      	adds	r3, #240	; 0xf0
 801542c:	f44f 7210 	mov.w	r2, #576	; 0x240
 8015430:	4619      	mov	r1, r3
 8015432:	f000 f999 	bl	8015768 <dhcp_option_short>
 8015436:	4603      	mov	r3, r0
 8015438:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801543a:	89b8      	ldrh	r0, [r7, #12]
 801543c:	693b      	ldr	r3, [r7, #16]
 801543e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015442:	2304      	movs	r3, #4
 8015444:	2232      	movs	r2, #50	; 0x32
 8015446:	f000 f935 	bl	80156b4 <dhcp_option>
 801544a:	4603      	mov	r3, r0
 801544c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801544e:	89bc      	ldrh	r4, [r7, #12]
 8015450:	693b      	ldr	r3, [r7, #16]
 8015452:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015456:	69bb      	ldr	r3, [r7, #24]
 8015458:	69db      	ldr	r3, [r3, #28]
 801545a:	4618      	mov	r0, r3
 801545c:	f7f6 f95b 	bl	800b716 <lwip_htonl>
 8015460:	4603      	mov	r3, r0
 8015462:	461a      	mov	r2, r3
 8015464:	4629      	mov	r1, r5
 8015466:	4620      	mov	r0, r4
 8015468:	f000 f9b0 	bl	80157cc <dhcp_option_long>
 801546c:	4603      	mov	r3, r0
 801546e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015470:	89b8      	ldrh	r0, [r7, #12]
 8015472:	693b      	ldr	r3, [r7, #16]
 8015474:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015478:	2303      	movs	r3, #3
 801547a:	2237      	movs	r2, #55	; 0x37
 801547c:	f000 f91a 	bl	80156b4 <dhcp_option>
 8015480:	4603      	mov	r3, r0
 8015482:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015484:	2300      	movs	r3, #0
 8015486:	77bb      	strb	r3, [r7, #30]
 8015488:	e00e      	b.n	80154a8 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801548a:	89b8      	ldrh	r0, [r7, #12]
 801548c:	693b      	ldr	r3, [r7, #16]
 801548e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015492:	7fbb      	ldrb	r3, [r7, #30]
 8015494:	4a29      	ldr	r2, [pc, #164]	; (801553c <dhcp_reboot+0x15c>)
 8015496:	5cd3      	ldrb	r3, [r2, r3]
 8015498:	461a      	mov	r2, r3
 801549a:	f000 f93f 	bl	801571c <dhcp_option_byte>
 801549e:	4603      	mov	r3, r0
 80154a0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80154a2:	7fbb      	ldrb	r3, [r7, #30]
 80154a4:	3301      	adds	r3, #1
 80154a6:	77bb      	strb	r3, [r7, #30]
 80154a8:	7fbb      	ldrb	r3, [r7, #30]
 80154aa:	2b02      	cmp	r3, #2
 80154ac:	d9ed      	bls.n	801548a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80154ae:	89b8      	ldrh	r0, [r7, #12]
 80154b0:	693b      	ldr	r3, [r7, #16]
 80154b2:	33f0      	adds	r3, #240	; 0xf0
 80154b4:	697a      	ldr	r2, [r7, #20]
 80154b6:	4619      	mov	r1, r3
 80154b8:	f000 fe44 	bl	8016144 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80154bc:	4b20      	ldr	r3, [pc, #128]	; (8015540 <dhcp_reboot+0x160>)
 80154be:	6818      	ldr	r0, [r3, #0]
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	9300      	str	r3, [sp, #0]
 80154c4:	2343      	movs	r3, #67	; 0x43
 80154c6:	4a1f      	ldr	r2, [pc, #124]	; (8015544 <dhcp_reboot+0x164>)
 80154c8:	6979      	ldr	r1, [r7, #20]
 80154ca:	f7fe fcf7 	bl	8013ebc <udp_sendto_if>
 80154ce:	4603      	mov	r3, r0
 80154d0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80154d2:	6978      	ldr	r0, [r7, #20]
 80154d4:	f7f7 fd3e 	bl	800cf54 <pbuf_free>
 80154d8:	e001      	b.n	80154de <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80154da:	23ff      	movs	r3, #255	; 0xff
 80154dc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80154de:	69bb      	ldr	r3, [r7, #24]
 80154e0:	799b      	ldrb	r3, [r3, #6]
 80154e2:	2bff      	cmp	r3, #255	; 0xff
 80154e4:	d005      	beq.n	80154f2 <dhcp_reboot+0x112>
    dhcp->tries++;
 80154e6:	69bb      	ldr	r3, [r7, #24]
 80154e8:	799b      	ldrb	r3, [r3, #6]
 80154ea:	3301      	adds	r3, #1
 80154ec:	b2da      	uxtb	r2, r3
 80154ee:	69bb      	ldr	r3, [r7, #24]
 80154f0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80154f2:	69bb      	ldr	r3, [r7, #24]
 80154f4:	799b      	ldrb	r3, [r3, #6]
 80154f6:	2b09      	cmp	r3, #9
 80154f8:	d80a      	bhi.n	8015510 <dhcp_reboot+0x130>
 80154fa:	69bb      	ldr	r3, [r7, #24]
 80154fc:	799b      	ldrb	r3, [r3, #6]
 80154fe:	b29b      	uxth	r3, r3
 8015500:	461a      	mov	r2, r3
 8015502:	0152      	lsls	r2, r2, #5
 8015504:	1ad2      	subs	r2, r2, r3
 8015506:	0092      	lsls	r2, r2, #2
 8015508:	4413      	add	r3, r2
 801550a:	00db      	lsls	r3, r3, #3
 801550c:	b29b      	uxth	r3, r3
 801550e:	e001      	b.n	8015514 <dhcp_reboot+0x134>
 8015510:	f242 7310 	movw	r3, #10000	; 0x2710
 8015514:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015516:	89fb      	ldrh	r3, [r7, #14]
 8015518:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801551c:	4a0a      	ldr	r2, [pc, #40]	; (8015548 <dhcp_reboot+0x168>)
 801551e:	fb82 1203 	smull	r1, r2, r2, r3
 8015522:	1152      	asrs	r2, r2, #5
 8015524:	17db      	asrs	r3, r3, #31
 8015526:	1ad3      	subs	r3, r2, r3
 8015528:	b29a      	uxth	r2, r3
 801552a:	69bb      	ldr	r3, [r7, #24]
 801552c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801552e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015532:	4618      	mov	r0, r3
 8015534:	3720      	adds	r7, #32
 8015536:	46bd      	mov	sp, r7
 8015538:	bdb0      	pop	{r4, r5, r7, pc}
 801553a:	bf00      	nop
 801553c:	20000030 	.word	0x20000030
 8015540:	20010ff8 	.word	0x20010ff8
 8015544:	08028044 	.word	0x08028044
 8015548:	10624dd3 	.word	0x10624dd3

0801554c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801554c:	b5b0      	push	{r4, r5, r7, lr}
 801554e:	b08a      	sub	sp, #40	; 0x28
 8015550:	af02      	add	r7, sp, #8
 8015552:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015558:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801555a:	69fb      	ldr	r3, [r7, #28]
 801555c:	2b00      	cmp	r3, #0
 801555e:	f000 8084 	beq.w	801566a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8015562:	69fb      	ldr	r3, [r7, #28]
 8015564:	795b      	ldrb	r3, [r3, #5]
 8015566:	2b00      	cmp	r3, #0
 8015568:	f000 8081 	beq.w	801566e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801556c:	69fb      	ldr	r3, [r7, #28]
 801556e:	699b      	ldr	r3, [r3, #24]
 8015570:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8015572:	69fb      	ldr	r3, [r7, #28]
 8015574:	2200      	movs	r2, #0
 8015576:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8015578:	69fb      	ldr	r3, [r7, #28]
 801557a:	2200      	movs	r2, #0
 801557c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801557e:	69fb      	ldr	r3, [r7, #28]
 8015580:	2200      	movs	r2, #0
 8015582:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015584:	69fb      	ldr	r3, [r7, #28]
 8015586:	2200      	movs	r2, #0
 8015588:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801558a:	69fb      	ldr	r3, [r7, #28]
 801558c:	2200      	movs	r2, #0
 801558e:	631a      	str	r2, [r3, #48]	; 0x30
 8015590:	69fb      	ldr	r3, [r7, #28]
 8015592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015594:	69fb      	ldr	r3, [r7, #28]
 8015596:	62da      	str	r2, [r3, #44]	; 0x2c
 8015598:	69fb      	ldr	r3, [r7, #28]
 801559a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801559c:	69fb      	ldr	r3, [r7, #28]
 801559e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80155a0:	69fb      	ldr	r3, [r7, #28]
 80155a2:	2200      	movs	r2, #0
 80155a4:	829a      	strh	r2, [r3, #20]
 80155a6:	69fb      	ldr	r3, [r7, #28]
 80155a8:	8a9a      	ldrh	r2, [r3, #20]
 80155aa:	69fb      	ldr	r3, [r7, #28]
 80155ac:	825a      	strh	r2, [r3, #18]
 80155ae:	69fb      	ldr	r3, [r7, #28]
 80155b0:	8a5a      	ldrh	r2, [r3, #18]
 80155b2:	69fb      	ldr	r3, [r7, #28]
 80155b4:	821a      	strh	r2, [r3, #16]
 80155b6:	69fb      	ldr	r3, [r7, #28]
 80155b8:	8a1a      	ldrh	r2, [r3, #16]
 80155ba:	69fb      	ldr	r3, [r7, #28]
 80155bc:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80155be:	6878      	ldr	r0, [r7, #4]
 80155c0:	f000 fdee 	bl	80161a0 <dhcp_supplied_address>
 80155c4:	4603      	mov	r3, r0
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d03b      	beq.n	8015642 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80155ca:	f107 030e 	add.w	r3, r7, #14
 80155ce:	2207      	movs	r2, #7
 80155d0:	69f9      	ldr	r1, [r7, #28]
 80155d2:	6878      	ldr	r0, [r7, #4]
 80155d4:	f000 fce0 	bl	8015f98 <dhcp_create_msg>
 80155d8:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80155da:	69bb      	ldr	r3, [r7, #24]
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d030      	beq.n	8015642 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80155e0:	69bb      	ldr	r3, [r7, #24]
 80155e2:	685b      	ldr	r3, [r3, #4]
 80155e4:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80155e6:	89f8      	ldrh	r0, [r7, #14]
 80155e8:	697b      	ldr	r3, [r7, #20]
 80155ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80155ee:	2304      	movs	r3, #4
 80155f0:	2236      	movs	r2, #54	; 0x36
 80155f2:	f000 f85f 	bl	80156b4 <dhcp_option>
 80155f6:	4603      	mov	r3, r0
 80155f8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80155fa:	89fc      	ldrh	r4, [r7, #14]
 80155fc:	697b      	ldr	r3, [r7, #20]
 80155fe:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015602:	693b      	ldr	r3, [r7, #16]
 8015604:	4618      	mov	r0, r3
 8015606:	f7f6 f886 	bl	800b716 <lwip_htonl>
 801560a:	4603      	mov	r3, r0
 801560c:	461a      	mov	r2, r3
 801560e:	4629      	mov	r1, r5
 8015610:	4620      	mov	r0, r4
 8015612:	f000 f8db 	bl	80157cc <dhcp_option_long>
 8015616:	4603      	mov	r3, r0
 8015618:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801561a:	89f8      	ldrh	r0, [r7, #14]
 801561c:	697b      	ldr	r3, [r7, #20]
 801561e:	33f0      	adds	r3, #240	; 0xf0
 8015620:	69ba      	ldr	r2, [r7, #24]
 8015622:	4619      	mov	r1, r3
 8015624:	f000 fd8e 	bl	8016144 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015628:	4b13      	ldr	r3, [pc, #76]	; (8015678 <dhcp_release_and_stop+0x12c>)
 801562a:	6818      	ldr	r0, [r3, #0]
 801562c:	f107 0210 	add.w	r2, r7, #16
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	9300      	str	r3, [sp, #0]
 8015634:	2343      	movs	r3, #67	; 0x43
 8015636:	69b9      	ldr	r1, [r7, #24]
 8015638:	f7fe fc40 	bl	8013ebc <udp_sendto_if>
      pbuf_free(p_out);
 801563c:	69b8      	ldr	r0, [r7, #24]
 801563e:	f7f7 fc89 	bl	800cf54 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015642:	4b0e      	ldr	r3, [pc, #56]	; (801567c <dhcp_release_and_stop+0x130>)
 8015644:	4a0d      	ldr	r2, [pc, #52]	; (801567c <dhcp_release_and_stop+0x130>)
 8015646:	490d      	ldr	r1, [pc, #52]	; (801567c <dhcp_release_and_stop+0x130>)
 8015648:	6878      	ldr	r0, [r7, #4]
 801564a:	f7f6 ff75 	bl	800c538 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801564e:	2100      	movs	r1, #0
 8015650:	69f8      	ldr	r0, [r7, #28]
 8015652:	f000 f815 	bl	8015680 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8015656:	69fb      	ldr	r3, [r7, #28]
 8015658:	791b      	ldrb	r3, [r3, #4]
 801565a:	2b00      	cmp	r3, #0
 801565c:	d008      	beq.n	8015670 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801565e:	f7fe ff85 	bl	801456c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8015662:	69fb      	ldr	r3, [r7, #28]
 8015664:	2200      	movs	r2, #0
 8015666:	711a      	strb	r2, [r3, #4]
 8015668:	e002      	b.n	8015670 <dhcp_release_and_stop+0x124>
    return;
 801566a:	bf00      	nop
 801566c:	e000      	b.n	8015670 <dhcp_release_and_stop+0x124>
    return;
 801566e:	bf00      	nop
  }
}
 8015670:	3720      	adds	r7, #32
 8015672:	46bd      	mov	sp, r7
 8015674:	bdb0      	pop	{r4, r5, r7, pc}
 8015676:	bf00      	nop
 8015678:	20010ff8 	.word	0x20010ff8
 801567c:	08028040 	.word	0x08028040

08015680 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8015680:	b480      	push	{r7}
 8015682:	b083      	sub	sp, #12
 8015684:	af00      	add	r7, sp, #0
 8015686:	6078      	str	r0, [r7, #4]
 8015688:	460b      	mov	r3, r1
 801568a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	795b      	ldrb	r3, [r3, #5]
 8015690:	78fa      	ldrb	r2, [r7, #3]
 8015692:	429a      	cmp	r2, r3
 8015694:	d008      	beq.n	80156a8 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	78fa      	ldrb	r2, [r7, #3]
 801569a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	2200      	movs	r2, #0
 80156a0:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	2200      	movs	r2, #0
 80156a6:	811a      	strh	r2, [r3, #8]
  }
}
 80156a8:	bf00      	nop
 80156aa:	370c      	adds	r7, #12
 80156ac:	46bd      	mov	sp, r7
 80156ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b2:	4770      	bx	lr

080156b4 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80156b4:	b580      	push	{r7, lr}
 80156b6:	b082      	sub	sp, #8
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	6039      	str	r1, [r7, #0]
 80156bc:	4611      	mov	r1, r2
 80156be:	461a      	mov	r2, r3
 80156c0:	4603      	mov	r3, r0
 80156c2:	80fb      	strh	r3, [r7, #6]
 80156c4:	460b      	mov	r3, r1
 80156c6:	717b      	strb	r3, [r7, #5]
 80156c8:	4613      	mov	r3, r2
 80156ca:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80156cc:	88fa      	ldrh	r2, [r7, #6]
 80156ce:	793b      	ldrb	r3, [r7, #4]
 80156d0:	4413      	add	r3, r2
 80156d2:	3302      	adds	r3, #2
 80156d4:	2b44      	cmp	r3, #68	; 0x44
 80156d6:	d906      	bls.n	80156e6 <dhcp_option+0x32>
 80156d8:	4b0d      	ldr	r3, [pc, #52]	; (8015710 <dhcp_option+0x5c>)
 80156da:	f240 529a 	movw	r2, #1434	; 0x59a
 80156de:	490d      	ldr	r1, [pc, #52]	; (8015714 <dhcp_option+0x60>)
 80156e0:	480d      	ldr	r0, [pc, #52]	; (8015718 <dhcp_option+0x64>)
 80156e2:	f003 fb69 	bl	8018db8 <iprintf>
  options[options_out_len++] = option_type;
 80156e6:	88fb      	ldrh	r3, [r7, #6]
 80156e8:	1c5a      	adds	r2, r3, #1
 80156ea:	80fa      	strh	r2, [r7, #6]
 80156ec:	461a      	mov	r2, r3
 80156ee:	683b      	ldr	r3, [r7, #0]
 80156f0:	4413      	add	r3, r2
 80156f2:	797a      	ldrb	r2, [r7, #5]
 80156f4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80156f6:	88fb      	ldrh	r3, [r7, #6]
 80156f8:	1c5a      	adds	r2, r3, #1
 80156fa:	80fa      	strh	r2, [r7, #6]
 80156fc:	461a      	mov	r2, r3
 80156fe:	683b      	ldr	r3, [r7, #0]
 8015700:	4413      	add	r3, r2
 8015702:	793a      	ldrb	r2, [r7, #4]
 8015704:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015706:	88fb      	ldrh	r3, [r7, #6]
}
 8015708:	4618      	mov	r0, r3
 801570a:	3708      	adds	r7, #8
 801570c:	46bd      	mov	sp, r7
 801570e:	bd80      	pop	{r7, pc}
 8015710:	0801d35c 	.word	0x0801d35c
 8015714:	0801d4f0 	.word	0x0801d4f0
 8015718:	0801d3bc 	.word	0x0801d3bc

0801571c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801571c:	b580      	push	{r7, lr}
 801571e:	b082      	sub	sp, #8
 8015720:	af00      	add	r7, sp, #0
 8015722:	4603      	mov	r3, r0
 8015724:	6039      	str	r1, [r7, #0]
 8015726:	80fb      	strh	r3, [r7, #6]
 8015728:	4613      	mov	r3, r2
 801572a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801572c:	88fb      	ldrh	r3, [r7, #6]
 801572e:	2b43      	cmp	r3, #67	; 0x43
 8015730:	d906      	bls.n	8015740 <dhcp_option_byte+0x24>
 8015732:	4b0a      	ldr	r3, [pc, #40]	; (801575c <dhcp_option_byte+0x40>)
 8015734:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8015738:	4909      	ldr	r1, [pc, #36]	; (8015760 <dhcp_option_byte+0x44>)
 801573a:	480a      	ldr	r0, [pc, #40]	; (8015764 <dhcp_option_byte+0x48>)
 801573c:	f003 fb3c 	bl	8018db8 <iprintf>
  options[options_out_len++] = value;
 8015740:	88fb      	ldrh	r3, [r7, #6]
 8015742:	1c5a      	adds	r2, r3, #1
 8015744:	80fa      	strh	r2, [r7, #6]
 8015746:	461a      	mov	r2, r3
 8015748:	683b      	ldr	r3, [r7, #0]
 801574a:	4413      	add	r3, r2
 801574c:	797a      	ldrb	r2, [r7, #5]
 801574e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015750:	88fb      	ldrh	r3, [r7, #6]
}
 8015752:	4618      	mov	r0, r3
 8015754:	3708      	adds	r7, #8
 8015756:	46bd      	mov	sp, r7
 8015758:	bd80      	pop	{r7, pc}
 801575a:	bf00      	nop
 801575c:	0801d35c 	.word	0x0801d35c
 8015760:	0801d534 	.word	0x0801d534
 8015764:	0801d3bc 	.word	0x0801d3bc

08015768 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8015768:	b580      	push	{r7, lr}
 801576a:	b082      	sub	sp, #8
 801576c:	af00      	add	r7, sp, #0
 801576e:	4603      	mov	r3, r0
 8015770:	6039      	str	r1, [r7, #0]
 8015772:	80fb      	strh	r3, [r7, #6]
 8015774:	4613      	mov	r3, r2
 8015776:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8015778:	88fb      	ldrh	r3, [r7, #6]
 801577a:	3302      	adds	r3, #2
 801577c:	2b44      	cmp	r3, #68	; 0x44
 801577e:	d906      	bls.n	801578e <dhcp_option_short+0x26>
 8015780:	4b0f      	ldr	r3, [pc, #60]	; (80157c0 <dhcp_option_short+0x58>)
 8015782:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8015786:	490f      	ldr	r1, [pc, #60]	; (80157c4 <dhcp_option_short+0x5c>)
 8015788:	480f      	ldr	r0, [pc, #60]	; (80157c8 <dhcp_option_short+0x60>)
 801578a:	f003 fb15 	bl	8018db8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801578e:	88bb      	ldrh	r3, [r7, #4]
 8015790:	0a1b      	lsrs	r3, r3, #8
 8015792:	b29a      	uxth	r2, r3
 8015794:	88fb      	ldrh	r3, [r7, #6]
 8015796:	1c59      	adds	r1, r3, #1
 8015798:	80f9      	strh	r1, [r7, #6]
 801579a:	4619      	mov	r1, r3
 801579c:	683b      	ldr	r3, [r7, #0]
 801579e:	440b      	add	r3, r1
 80157a0:	b2d2      	uxtb	r2, r2
 80157a2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80157a4:	88fb      	ldrh	r3, [r7, #6]
 80157a6:	1c5a      	adds	r2, r3, #1
 80157a8:	80fa      	strh	r2, [r7, #6]
 80157aa:	461a      	mov	r2, r3
 80157ac:	683b      	ldr	r3, [r7, #0]
 80157ae:	4413      	add	r3, r2
 80157b0:	88ba      	ldrh	r2, [r7, #4]
 80157b2:	b2d2      	uxtb	r2, r2
 80157b4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80157b6:	88fb      	ldrh	r3, [r7, #6]
}
 80157b8:	4618      	mov	r0, r3
 80157ba:	3708      	adds	r7, #8
 80157bc:	46bd      	mov	sp, r7
 80157be:	bd80      	pop	{r7, pc}
 80157c0:	0801d35c 	.word	0x0801d35c
 80157c4:	0801d56c 	.word	0x0801d56c
 80157c8:	0801d3bc 	.word	0x0801d3bc

080157cc <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b084      	sub	sp, #16
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	4603      	mov	r3, r0
 80157d4:	60b9      	str	r1, [r7, #8]
 80157d6:	607a      	str	r2, [r7, #4]
 80157d8:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80157da:	89fb      	ldrh	r3, [r7, #14]
 80157dc:	3304      	adds	r3, #4
 80157de:	2b44      	cmp	r3, #68	; 0x44
 80157e0:	d906      	bls.n	80157f0 <dhcp_option_long+0x24>
 80157e2:	4b19      	ldr	r3, [pc, #100]	; (8015848 <dhcp_option_long+0x7c>)
 80157e4:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80157e8:	4918      	ldr	r1, [pc, #96]	; (801584c <dhcp_option_long+0x80>)
 80157ea:	4819      	ldr	r0, [pc, #100]	; (8015850 <dhcp_option_long+0x84>)
 80157ec:	f003 fae4 	bl	8018db8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	0e1a      	lsrs	r2, r3, #24
 80157f4:	89fb      	ldrh	r3, [r7, #14]
 80157f6:	1c59      	adds	r1, r3, #1
 80157f8:	81f9      	strh	r1, [r7, #14]
 80157fa:	4619      	mov	r1, r3
 80157fc:	68bb      	ldr	r3, [r7, #8]
 80157fe:	440b      	add	r3, r1
 8015800:	b2d2      	uxtb	r2, r2
 8015802:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	0c1a      	lsrs	r2, r3, #16
 8015808:	89fb      	ldrh	r3, [r7, #14]
 801580a:	1c59      	adds	r1, r3, #1
 801580c:	81f9      	strh	r1, [r7, #14]
 801580e:	4619      	mov	r1, r3
 8015810:	68bb      	ldr	r3, [r7, #8]
 8015812:	440b      	add	r3, r1
 8015814:	b2d2      	uxtb	r2, r2
 8015816:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	0a1a      	lsrs	r2, r3, #8
 801581c:	89fb      	ldrh	r3, [r7, #14]
 801581e:	1c59      	adds	r1, r3, #1
 8015820:	81f9      	strh	r1, [r7, #14]
 8015822:	4619      	mov	r1, r3
 8015824:	68bb      	ldr	r3, [r7, #8]
 8015826:	440b      	add	r3, r1
 8015828:	b2d2      	uxtb	r2, r2
 801582a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801582c:	89fb      	ldrh	r3, [r7, #14]
 801582e:	1c5a      	adds	r2, r3, #1
 8015830:	81fa      	strh	r2, [r7, #14]
 8015832:	461a      	mov	r2, r3
 8015834:	68bb      	ldr	r3, [r7, #8]
 8015836:	4413      	add	r3, r2
 8015838:	687a      	ldr	r2, [r7, #4]
 801583a:	b2d2      	uxtb	r2, r2
 801583c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801583e:	89fb      	ldrh	r3, [r7, #14]
}
 8015840:	4618      	mov	r0, r3
 8015842:	3710      	adds	r7, #16
 8015844:	46bd      	mov	sp, r7
 8015846:	bd80      	pop	{r7, pc}
 8015848:	0801d35c 	.word	0x0801d35c
 801584c:	0801d5a8 	.word	0x0801d5a8
 8015850:	0801d3bc 	.word	0x0801d3bc

08015854 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8015854:	b580      	push	{r7, lr}
 8015856:	b090      	sub	sp, #64	; 0x40
 8015858:	af00      	add	r7, sp, #0
 801585a:	6078      	str	r0, [r7, #4]
 801585c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801585e:	2300      	movs	r3, #0
 8015860:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8015862:	2300      	movs	r3, #0
 8015864:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8015866:	2208      	movs	r2, #8
 8015868:	2100      	movs	r1, #0
 801586a:	48b5      	ldr	r0, [pc, #724]	; (8015b40 <dhcp_parse_reply+0x2ec>)
 801586c:	f003 fb43 	bl	8018ef6 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	895b      	ldrh	r3, [r3, #10]
 8015874:	2b2b      	cmp	r3, #43	; 0x2b
 8015876:	d802      	bhi.n	801587e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8015878:	f06f 0301 	mvn.w	r3, #1
 801587c:	e2a7      	b.n	8015dce <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	685b      	ldr	r3, [r3, #4]
 8015882:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8015884:	23f0      	movs	r3, #240	; 0xf0
 8015886:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	891b      	ldrh	r3, [r3, #8]
 801588c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015892:	e00c      	b.n	80158ae <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8015894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015896:	895b      	ldrh	r3, [r3, #10]
 8015898:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801589a:	1ad3      	subs	r3, r2, r3
 801589c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158a0:	895b      	ldrh	r3, [r3, #10]
 80158a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80158a4:	1ad3      	subs	r3, r2, r3
 80158a6:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80158a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80158ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d004      	beq.n	80158be <dhcp_parse_reply+0x6a>
 80158b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158b6:	895b      	ldrh	r3, [r3, #10]
 80158b8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80158ba:	429a      	cmp	r2, r3
 80158bc:	d2ea      	bcs.n	8015894 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80158be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d102      	bne.n	80158ca <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80158c4:	f06f 0301 	mvn.w	r3, #1
 80158c8:	e281      	b.n	8015dce <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 80158ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80158cc:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 80158ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80158d0:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80158d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158d4:	685b      	ldr	r3, [r3, #4]
 80158d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80158d8:	e239      	b.n	8015d4e <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 80158da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80158dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80158de:	4413      	add	r3, r2
 80158e0:	781b      	ldrb	r3, [r3, #0]
 80158e2:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80158e4:	2300      	movs	r3, #0
 80158e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80158ea:	f04f 33ff 	mov.w	r3, #4294967295
 80158ee:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80158f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80158f2:	3302      	adds	r3, #2
 80158f4:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80158f6:	8bfa      	ldrh	r2, [r7, #30]
 80158f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80158fa:	429a      	cmp	r2, r3
 80158fc:	d202      	bcs.n	8015904 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80158fe:	f06f 0301 	mvn.w	r3, #1
 8015902:	e264      	b.n	8015dce <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8015904:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015906:	3301      	adds	r3, #1
 8015908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801590a:	8952      	ldrh	r2, [r2, #10]
 801590c:	4293      	cmp	r3, r2
 801590e:	da07      	bge.n	8015920 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8015910:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015912:	3301      	adds	r3, #1
 8015914:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015916:	4413      	add	r3, r2
 8015918:	781b      	ldrb	r3, [r3, #0]
 801591a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801591e:	e00b      	b.n	8015938 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8015920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d004      	beq.n	8015932 <dhcp_parse_reply+0xde>
 8015928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	685b      	ldr	r3, [r3, #4]
 801592e:	781b      	ldrb	r3, [r3, #0]
 8015930:	e000      	b.n	8015934 <dhcp_parse_reply+0xe0>
 8015932:	2300      	movs	r3, #0
 8015934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8015938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801593c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8015940:	7dfb      	ldrb	r3, [r7, #23]
 8015942:	2b3b      	cmp	r3, #59	; 0x3b
 8015944:	f200 812c 	bhi.w	8015ba0 <dhcp_parse_reply+0x34c>
 8015948:	a201      	add	r2, pc, #4	; (adr r2, 8015950 <dhcp_parse_reply+0xfc>)
 801594a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801594e:	bf00      	nop
 8015950:	08015a41 	.word	0x08015a41
 8015954:	08015a51 	.word	0x08015a51
 8015958:	08015ba1 	.word	0x08015ba1
 801595c:	08015a73 	.word	0x08015a73
 8015960:	08015ba1 	.word	0x08015ba1
 8015964:	08015ba1 	.word	0x08015ba1
 8015968:	08015ba1 	.word	0x08015ba1
 801596c:	08015ba1 	.word	0x08015ba1
 8015970:	08015ba1 	.word	0x08015ba1
 8015974:	08015ba1 	.word	0x08015ba1
 8015978:	08015ba1 	.word	0x08015ba1
 801597c:	08015ba1 	.word	0x08015ba1
 8015980:	08015ba1 	.word	0x08015ba1
 8015984:	08015ba1 	.word	0x08015ba1
 8015988:	08015ba1 	.word	0x08015ba1
 801598c:	08015ba1 	.word	0x08015ba1
 8015990:	08015ba1 	.word	0x08015ba1
 8015994:	08015ba1 	.word	0x08015ba1
 8015998:	08015ba1 	.word	0x08015ba1
 801599c:	08015ba1 	.word	0x08015ba1
 80159a0:	08015ba1 	.word	0x08015ba1
 80159a4:	08015ba1 	.word	0x08015ba1
 80159a8:	08015ba1 	.word	0x08015ba1
 80159ac:	08015ba1 	.word	0x08015ba1
 80159b0:	08015ba1 	.word	0x08015ba1
 80159b4:	08015ba1 	.word	0x08015ba1
 80159b8:	08015ba1 	.word	0x08015ba1
 80159bc:	08015ba1 	.word	0x08015ba1
 80159c0:	08015ba1 	.word	0x08015ba1
 80159c4:	08015ba1 	.word	0x08015ba1
 80159c8:	08015ba1 	.word	0x08015ba1
 80159cc:	08015ba1 	.word	0x08015ba1
 80159d0:	08015ba1 	.word	0x08015ba1
 80159d4:	08015ba1 	.word	0x08015ba1
 80159d8:	08015ba1 	.word	0x08015ba1
 80159dc:	08015ba1 	.word	0x08015ba1
 80159e0:	08015ba1 	.word	0x08015ba1
 80159e4:	08015ba1 	.word	0x08015ba1
 80159e8:	08015ba1 	.word	0x08015ba1
 80159ec:	08015ba1 	.word	0x08015ba1
 80159f0:	08015ba1 	.word	0x08015ba1
 80159f4:	08015ba1 	.word	0x08015ba1
 80159f8:	08015ba1 	.word	0x08015ba1
 80159fc:	08015ba1 	.word	0x08015ba1
 8015a00:	08015ba1 	.word	0x08015ba1
 8015a04:	08015ba1 	.word	0x08015ba1
 8015a08:	08015ba1 	.word	0x08015ba1
 8015a0c:	08015ba1 	.word	0x08015ba1
 8015a10:	08015ba1 	.word	0x08015ba1
 8015a14:	08015ba1 	.word	0x08015ba1
 8015a18:	08015ba1 	.word	0x08015ba1
 8015a1c:	08015a9f 	.word	0x08015a9f
 8015a20:	08015ac1 	.word	0x08015ac1
 8015a24:	08015afd 	.word	0x08015afd
 8015a28:	08015b1f 	.word	0x08015b1f
 8015a2c:	08015ba1 	.word	0x08015ba1
 8015a30:	08015ba1 	.word	0x08015ba1
 8015a34:	08015ba1 	.word	0x08015ba1
 8015a38:	08015b5d 	.word	0x08015b5d
 8015a3c:	08015b7f 	.word	0x08015b7f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8015a40:	2300      	movs	r3, #0
 8015a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015a46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8015a4e:	e0ab      	b.n	8015ba8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015a50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a54:	2b04      	cmp	r3, #4
 8015a56:	d009      	beq.n	8015a6c <dhcp_parse_reply+0x218>
 8015a58:	4b3a      	ldr	r3, [pc, #232]	; (8015b44 <dhcp_parse_reply+0x2f0>)
 8015a5a:	f240 622e 	movw	r2, #1582	; 0x62e
 8015a5e:	493a      	ldr	r1, [pc, #232]	; (8015b48 <dhcp_parse_reply+0x2f4>)
 8015a60:	483a      	ldr	r0, [pc, #232]	; (8015b4c <dhcp_parse_reply+0x2f8>)
 8015a62:	f003 f9a9 	bl	8018db8 <iprintf>
 8015a66:	f06f 0305 	mvn.w	r3, #5
 8015a6a:	e1b0      	b.n	8015dce <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8015a6c:	2306      	movs	r3, #6
 8015a6e:	623b      	str	r3, [r7, #32]
        break;
 8015a70:	e09a      	b.n	8015ba8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8015a72:	2304      	movs	r3, #4
 8015a74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8015a78:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015a7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015a80:	429a      	cmp	r2, r3
 8015a82:	d209      	bcs.n	8015a98 <dhcp_parse_reply+0x244>
 8015a84:	4b2f      	ldr	r3, [pc, #188]	; (8015b44 <dhcp_parse_reply+0x2f0>)
 8015a86:	f240 6233 	movw	r2, #1587	; 0x633
 8015a8a:	4931      	ldr	r1, [pc, #196]	; (8015b50 <dhcp_parse_reply+0x2fc>)
 8015a8c:	482f      	ldr	r0, [pc, #188]	; (8015b4c <dhcp_parse_reply+0x2f8>)
 8015a8e:	f003 f993 	bl	8018db8 <iprintf>
 8015a92:	f06f 0305 	mvn.w	r3, #5
 8015a96:	e19a      	b.n	8015dce <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8015a98:	2307      	movs	r3, #7
 8015a9a:	623b      	str	r3, [r7, #32]
        break;
 8015a9c:	e084      	b.n	8015ba8 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015a9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015aa2:	2b04      	cmp	r3, #4
 8015aa4:	d009      	beq.n	8015aba <dhcp_parse_reply+0x266>
 8015aa6:	4b27      	ldr	r3, [pc, #156]	; (8015b44 <dhcp_parse_reply+0x2f0>)
 8015aa8:	f240 6241 	movw	r2, #1601	; 0x641
 8015aac:	4926      	ldr	r1, [pc, #152]	; (8015b48 <dhcp_parse_reply+0x2f4>)
 8015aae:	4827      	ldr	r0, [pc, #156]	; (8015b4c <dhcp_parse_reply+0x2f8>)
 8015ab0:	f003 f982 	bl	8018db8 <iprintf>
 8015ab4:	f06f 0305 	mvn.w	r3, #5
 8015ab8:	e189      	b.n	8015dce <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8015aba:	2303      	movs	r3, #3
 8015abc:	623b      	str	r3, [r7, #32]
        break;
 8015abe:	e073      	b.n	8015ba8 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ac4:	2b01      	cmp	r3, #1
 8015ac6:	d009      	beq.n	8015adc <dhcp_parse_reply+0x288>
 8015ac8:	4b1e      	ldr	r3, [pc, #120]	; (8015b44 <dhcp_parse_reply+0x2f0>)
 8015aca:	f240 624f 	movw	r2, #1615	; 0x64f
 8015ace:	4921      	ldr	r1, [pc, #132]	; (8015b54 <dhcp_parse_reply+0x300>)
 8015ad0:	481e      	ldr	r0, [pc, #120]	; (8015b4c <dhcp_parse_reply+0x2f8>)
 8015ad2:	f003 f971 	bl	8018db8 <iprintf>
 8015ad6:	f06f 0305 	mvn.w	r3, #5
 8015ada:	e178      	b.n	8015dce <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8015adc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015ade:	2bf0      	cmp	r3, #240	; 0xf0
 8015ae0:	d009      	beq.n	8015af6 <dhcp_parse_reply+0x2a2>
 8015ae2:	4b18      	ldr	r3, [pc, #96]	; (8015b44 <dhcp_parse_reply+0x2f0>)
 8015ae4:	f240 6251 	movw	r2, #1617	; 0x651
 8015ae8:	491b      	ldr	r1, [pc, #108]	; (8015b58 <dhcp_parse_reply+0x304>)
 8015aea:	4818      	ldr	r0, [pc, #96]	; (8015b4c <dhcp_parse_reply+0x2f8>)
 8015aec:	f003 f964 	bl	8018db8 <iprintf>
 8015af0:	f06f 0305 	mvn.w	r3, #5
 8015af4:	e16b      	b.n	8015dce <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8015af6:	2300      	movs	r3, #0
 8015af8:	623b      	str	r3, [r7, #32]
        break;
 8015afa:	e055      	b.n	8015ba8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015afc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b00:	2b01      	cmp	r3, #1
 8015b02:	d009      	beq.n	8015b18 <dhcp_parse_reply+0x2c4>
 8015b04:	4b0f      	ldr	r3, [pc, #60]	; (8015b44 <dhcp_parse_reply+0x2f0>)
 8015b06:	f240 6255 	movw	r2, #1621	; 0x655
 8015b0a:	4912      	ldr	r1, [pc, #72]	; (8015b54 <dhcp_parse_reply+0x300>)
 8015b0c:	480f      	ldr	r0, [pc, #60]	; (8015b4c <dhcp_parse_reply+0x2f8>)
 8015b0e:	f003 f953 	bl	8018db8 <iprintf>
 8015b12:	f06f 0305 	mvn.w	r3, #5
 8015b16:	e15a      	b.n	8015dce <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8015b18:	2301      	movs	r3, #1
 8015b1a:	623b      	str	r3, [r7, #32]
        break;
 8015b1c:	e044      	b.n	8015ba8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b22:	2b04      	cmp	r3, #4
 8015b24:	d009      	beq.n	8015b3a <dhcp_parse_reply+0x2e6>
 8015b26:	4b07      	ldr	r3, [pc, #28]	; (8015b44 <dhcp_parse_reply+0x2f0>)
 8015b28:	f240 6259 	movw	r2, #1625	; 0x659
 8015b2c:	4906      	ldr	r1, [pc, #24]	; (8015b48 <dhcp_parse_reply+0x2f4>)
 8015b2e:	4807      	ldr	r0, [pc, #28]	; (8015b4c <dhcp_parse_reply+0x2f8>)
 8015b30:	f003 f942 	bl	8018db8 <iprintf>
 8015b34:	f06f 0305 	mvn.w	r3, #5
 8015b38:	e149      	b.n	8015dce <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8015b3a:	2302      	movs	r3, #2
 8015b3c:	623b      	str	r3, [r7, #32]
        break;
 8015b3e:	e033      	b.n	8015ba8 <dhcp_parse_reply+0x354>
 8015b40:	20010ff0 	.word	0x20010ff0
 8015b44:	0801d35c 	.word	0x0801d35c
 8015b48:	0801d5e4 	.word	0x0801d5e4
 8015b4c:	0801d3bc 	.word	0x0801d3bc
 8015b50:	0801d5f0 	.word	0x0801d5f0
 8015b54:	0801d604 	.word	0x0801d604
 8015b58:	0801d610 	.word	0x0801d610
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b60:	2b04      	cmp	r3, #4
 8015b62:	d009      	beq.n	8015b78 <dhcp_parse_reply+0x324>
 8015b64:	4b9c      	ldr	r3, [pc, #624]	; (8015dd8 <dhcp_parse_reply+0x584>)
 8015b66:	f240 625d 	movw	r2, #1629	; 0x65d
 8015b6a:	499c      	ldr	r1, [pc, #624]	; (8015ddc <dhcp_parse_reply+0x588>)
 8015b6c:	489c      	ldr	r0, [pc, #624]	; (8015de0 <dhcp_parse_reply+0x58c>)
 8015b6e:	f003 f923 	bl	8018db8 <iprintf>
 8015b72:	f06f 0305 	mvn.w	r3, #5
 8015b76:	e12a      	b.n	8015dce <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8015b78:	2304      	movs	r3, #4
 8015b7a:	623b      	str	r3, [r7, #32]
        break;
 8015b7c:	e014      	b.n	8015ba8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015b7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b82:	2b04      	cmp	r3, #4
 8015b84:	d009      	beq.n	8015b9a <dhcp_parse_reply+0x346>
 8015b86:	4b94      	ldr	r3, [pc, #592]	; (8015dd8 <dhcp_parse_reply+0x584>)
 8015b88:	f240 6261 	movw	r2, #1633	; 0x661
 8015b8c:	4993      	ldr	r1, [pc, #588]	; (8015ddc <dhcp_parse_reply+0x588>)
 8015b8e:	4894      	ldr	r0, [pc, #592]	; (8015de0 <dhcp_parse_reply+0x58c>)
 8015b90:	f003 f912 	bl	8018db8 <iprintf>
 8015b94:	f06f 0305 	mvn.w	r3, #5
 8015b98:	e119      	b.n	8015dce <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8015b9a:	2305      	movs	r3, #5
 8015b9c:	623b      	str	r3, [r7, #32]
        break;
 8015b9e:	e003      	b.n	8015ba8 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8015ba6:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8015ba8:	7dfb      	ldrb	r3, [r7, #23]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d103      	bne.n	8015bb6 <dhcp_parse_reply+0x362>
      offset++;
 8015bae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015bb0:	3301      	adds	r3, #1
 8015bb2:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015bb4:	e0a1      	b.n	8015cfa <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8015bb6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015bbc:	4413      	add	r3, r2
 8015bbe:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8015bc2:	4293      	cmp	r3, r2
 8015bc4:	dd02      	ble.n	8015bcc <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8015bc6:	f06f 0301 	mvn.w	r3, #1
 8015bca:	e100      	b.n	8015dce <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8015bcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015bd0:	b29a      	uxth	r2, r3
 8015bd2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015bd4:	4413      	add	r3, r2
 8015bd6:	b29b      	uxth	r3, r3
 8015bd8:	3302      	adds	r3, #2
 8015bda:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8015bdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	f000 808a 	beq.w	8015cfa <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8015be6:	2300      	movs	r3, #0
 8015be8:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8015bea:	6a3b      	ldr	r3, [r7, #32]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	db02      	blt.n	8015bf6 <dhcp_parse_reply+0x3a2>
 8015bf0:	6a3b      	ldr	r3, [r7, #32]
 8015bf2:	2b07      	cmp	r3, #7
 8015bf4:	dd06      	ble.n	8015c04 <dhcp_parse_reply+0x3b0>
 8015bf6:	4b78      	ldr	r3, [pc, #480]	; (8015dd8 <dhcp_parse_reply+0x584>)
 8015bf8:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8015bfc:	4979      	ldr	r1, [pc, #484]	; (8015de4 <dhcp_parse_reply+0x590>)
 8015bfe:	4878      	ldr	r0, [pc, #480]	; (8015de0 <dhcp_parse_reply+0x58c>)
 8015c00:	f003 f8da 	bl	8018db8 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8015c04:	4a78      	ldr	r2, [pc, #480]	; (8015de8 <dhcp_parse_reply+0x594>)
 8015c06:	6a3b      	ldr	r3, [r7, #32]
 8015c08:	4413      	add	r3, r2
 8015c0a:	781b      	ldrb	r3, [r3, #0]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d174      	bne.n	8015cfa <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8015c10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015c14:	2b04      	cmp	r3, #4
 8015c16:	bf28      	it	cs
 8015c18:	2304      	movcs	r3, #4
 8015c1a:	b2db      	uxtb	r3, r3
 8015c1c:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8015c1e:	8bfb      	ldrh	r3, [r7, #30]
 8015c20:	8aba      	ldrh	r2, [r7, #20]
 8015c22:	f107 0108 	add.w	r1, r7, #8
 8015c26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c28:	f7f7 fb9a 	bl	800d360 <pbuf_copy_partial>
 8015c2c:	4603      	mov	r3, r0
 8015c2e:	461a      	mov	r2, r3
 8015c30:	8abb      	ldrh	r3, [r7, #20]
 8015c32:	4293      	cmp	r3, r2
 8015c34:	d002      	beq.n	8015c3c <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8015c36:	f06f 0301 	mvn.w	r3, #1
 8015c3a:	e0c8      	b.n	8015dce <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8015c3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015c40:	2b04      	cmp	r3, #4
 8015c42:	d933      	bls.n	8015cac <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8015c44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015c48:	f003 0303 	and.w	r3, r3, #3
 8015c4c:	b2db      	uxtb	r3, r3
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d009      	beq.n	8015c66 <dhcp_parse_reply+0x412>
 8015c52:	4b61      	ldr	r3, [pc, #388]	; (8015dd8 <dhcp_parse_reply+0x584>)
 8015c54:	f240 6281 	movw	r2, #1665	; 0x681
 8015c58:	4964      	ldr	r1, [pc, #400]	; (8015dec <dhcp_parse_reply+0x598>)
 8015c5a:	4861      	ldr	r0, [pc, #388]	; (8015de0 <dhcp_parse_reply+0x58c>)
 8015c5c:	f003 f8ac 	bl	8018db8 <iprintf>
 8015c60:	f06f 0305 	mvn.w	r3, #5
 8015c64:	e0b3      	b.n	8015dce <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8015c66:	4a60      	ldr	r2, [pc, #384]	; (8015de8 <dhcp_parse_reply+0x594>)
 8015c68:	6a3b      	ldr	r3, [r7, #32]
 8015c6a:	4413      	add	r3, r2
 8015c6c:	2201      	movs	r2, #1
 8015c6e:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8015c70:	68bb      	ldr	r3, [r7, #8]
 8015c72:	4618      	mov	r0, r3
 8015c74:	f7f5 fd4f 	bl	800b716 <lwip_htonl>
 8015c78:	4602      	mov	r2, r0
 8015c7a:	495d      	ldr	r1, [pc, #372]	; (8015df0 <dhcp_parse_reply+0x59c>)
 8015c7c:	6a3b      	ldr	r3, [r7, #32]
 8015c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8015c82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015c86:	3b04      	subs	r3, #4
 8015c88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8015c8c:	8bfb      	ldrh	r3, [r7, #30]
 8015c8e:	3304      	adds	r3, #4
 8015c90:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8015c92:	8a7a      	ldrh	r2, [r7, #18]
 8015c94:	8bfb      	ldrh	r3, [r7, #30]
 8015c96:	429a      	cmp	r2, r3
 8015c98:	d202      	bcs.n	8015ca0 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8015c9a:	f06f 0301 	mvn.w	r3, #1
 8015c9e:	e096      	b.n	8015dce <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8015ca0:	8a7b      	ldrh	r3, [r7, #18]
 8015ca2:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8015ca4:	6a3b      	ldr	r3, [r7, #32]
 8015ca6:	3301      	adds	r3, #1
 8015ca8:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8015caa:	e79e      	b.n	8015bea <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8015cac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015cb0:	2b04      	cmp	r3, #4
 8015cb2:	d106      	bne.n	8015cc2 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8015cb4:	68bb      	ldr	r3, [r7, #8]
 8015cb6:	4618      	mov	r0, r3
 8015cb8:	f7f5 fd2d 	bl	800b716 <lwip_htonl>
 8015cbc:	4603      	mov	r3, r0
 8015cbe:	60bb      	str	r3, [r7, #8]
 8015cc0:	e011      	b.n	8015ce6 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8015cc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015cc6:	2b01      	cmp	r3, #1
 8015cc8:	d009      	beq.n	8015cde <dhcp_parse_reply+0x48a>
 8015cca:	4b43      	ldr	r3, [pc, #268]	; (8015dd8 <dhcp_parse_reply+0x584>)
 8015ccc:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8015cd0:	4948      	ldr	r1, [pc, #288]	; (8015df4 <dhcp_parse_reply+0x5a0>)
 8015cd2:	4843      	ldr	r0, [pc, #268]	; (8015de0 <dhcp_parse_reply+0x58c>)
 8015cd4:	f003 f870 	bl	8018db8 <iprintf>
 8015cd8:	f06f 0305 	mvn.w	r3, #5
 8015cdc:	e077      	b.n	8015dce <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8015cde:	f107 0308 	add.w	r3, r7, #8
 8015ce2:	781b      	ldrb	r3, [r3, #0]
 8015ce4:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8015ce6:	4a40      	ldr	r2, [pc, #256]	; (8015de8 <dhcp_parse_reply+0x594>)
 8015ce8:	6a3b      	ldr	r3, [r7, #32]
 8015cea:	4413      	add	r3, r2
 8015cec:	2201      	movs	r2, #1
 8015cee:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8015cf0:	68ba      	ldr	r2, [r7, #8]
 8015cf2:	493f      	ldr	r1, [pc, #252]	; (8015df0 <dhcp_parse_reply+0x59c>)
 8015cf4:	6a3b      	ldr	r3, [r7, #32]
 8015cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8015cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cfc:	895b      	ldrh	r3, [r3, #10]
 8015cfe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015d00:	429a      	cmp	r2, r3
 8015d02:	d324      	bcc.n	8015d4e <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8015d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d06:	895b      	ldrh	r3, [r3, #10]
 8015d08:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015d0a:	1ad3      	subs	r3, r2, r3
 8015d0c:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8015d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d10:	895b      	ldrh	r3, [r3, #10]
 8015d12:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8015d14:	1ad3      	subs	r3, r2, r3
 8015d16:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8015d18:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015d1a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015d1c:	429a      	cmp	r2, r3
 8015d1e:	d213      	bcs.n	8015d48 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8015d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d22:	681b      	ldr	r3, [r3, #0]
 8015d24:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8015d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d109      	bne.n	8015d40 <dhcp_parse_reply+0x4ec>
 8015d2c:	4b2a      	ldr	r3, [pc, #168]	; (8015dd8 <dhcp_parse_reply+0x584>)
 8015d2e:	f240 629d 	movw	r2, #1693	; 0x69d
 8015d32:	4931      	ldr	r1, [pc, #196]	; (8015df8 <dhcp_parse_reply+0x5a4>)
 8015d34:	482a      	ldr	r0, [pc, #168]	; (8015de0 <dhcp_parse_reply+0x58c>)
 8015d36:	f003 f83f 	bl	8018db8 <iprintf>
 8015d3a:	f06f 0305 	mvn.w	r3, #5
 8015d3e:	e046      	b.n	8015dce <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8015d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d42:	685b      	ldr	r3, [r3, #4]
 8015d44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015d46:	e002      	b.n	8015d4e <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8015d48:	f06f 0301 	mvn.w	r3, #1
 8015d4c:	e03f      	b.n	8015dce <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d00a      	beq.n	8015d6a <dhcp_parse_reply+0x516>
 8015d54:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015d56:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015d58:	429a      	cmp	r2, r3
 8015d5a:	d206      	bcs.n	8015d6a <dhcp_parse_reply+0x516>
 8015d5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015d5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015d60:	4413      	add	r3, r2
 8015d62:	781b      	ldrb	r3, [r3, #0]
 8015d64:	2bff      	cmp	r3, #255	; 0xff
 8015d66:	f47f adb8 	bne.w	80158da <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8015d6a:	4b1f      	ldr	r3, [pc, #124]	; (8015de8 <dhcp_parse_reply+0x594>)
 8015d6c:	781b      	ldrb	r3, [r3, #0]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d018      	beq.n	8015da4 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015d72:	4b1f      	ldr	r3, [pc, #124]	; (8015df0 <dhcp_parse_reply+0x59c>)
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015d78:	4b1b      	ldr	r3, [pc, #108]	; (8015de8 <dhcp_parse_reply+0x594>)
 8015d7a:	2200      	movs	r2, #0
 8015d7c:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	2b01      	cmp	r3, #1
 8015d82:	d102      	bne.n	8015d8a <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8015d84:	2301      	movs	r3, #1
 8015d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015d88:	e00c      	b.n	8015da4 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	2b02      	cmp	r3, #2
 8015d8e:	d102      	bne.n	8015d96 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8015d90:	2301      	movs	r3, #1
 8015d92:	62bb      	str	r3, [r7, #40]	; 0x28
 8015d94:	e006      	b.n	8015da4 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	2b03      	cmp	r3, #3
 8015d9a:	d103      	bne.n	8015da4 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8015d9c:	2301      	movs	r3, #1
 8015d9e:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8015da0:	2301      	movs	r3, #1
 8015da2:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8015da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d006      	beq.n	8015db8 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8015daa:	2300      	movs	r3, #0
 8015dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8015dae:	236c      	movs	r3, #108	; 0x6c
 8015db0:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8015db2:	23ec      	movs	r3, #236	; 0xec
 8015db4:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8015db6:	e56a      	b.n	801588e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8015db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d006      	beq.n	8015dcc <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8015dbe:	2300      	movs	r3, #0
 8015dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8015dc2:	232c      	movs	r3, #44	; 0x2c
 8015dc4:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8015dc6:	236c      	movs	r3, #108	; 0x6c
 8015dc8:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8015dca:	e560      	b.n	801588e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8015dcc:	2300      	movs	r3, #0
}
 8015dce:	4618      	mov	r0, r3
 8015dd0:	3740      	adds	r7, #64	; 0x40
 8015dd2:	46bd      	mov	sp, r7
 8015dd4:	bd80      	pop	{r7, pc}
 8015dd6:	bf00      	nop
 8015dd8:	0801d35c 	.word	0x0801d35c
 8015ddc:	0801d5e4 	.word	0x0801d5e4
 8015de0:	0801d3bc 	.word	0x0801d3bc
 8015de4:	0801d628 	.word	0x0801d628
 8015de8:	20010ff0 	.word	0x20010ff0
 8015dec:	0801d63c 	.word	0x0801d63c
 8015df0:	20010fd0 	.word	0x20010fd0
 8015df4:	0801d654 	.word	0x0801d654
 8015df8:	0801d668 	.word	0x0801d668

08015dfc <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015dfc:	b580      	push	{r7, lr}
 8015dfe:	b08a      	sub	sp, #40	; 0x28
 8015e00:	af00      	add	r7, sp, #0
 8015e02:	60f8      	str	r0, [r7, #12]
 8015e04:	60b9      	str	r1, [r7, #8]
 8015e06:	607a      	str	r2, [r7, #4]
 8015e08:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8015e0a:	4b60      	ldr	r3, [pc, #384]	; (8015f8c <dhcp_recv+0x190>)
 8015e0c:	685b      	ldr	r3, [r3, #4]
 8015e0e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015e10:	6a3b      	ldr	r3, [r7, #32]
 8015e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e14:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	685b      	ldr	r3, [r3, #4]
 8015e1a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8015e1c:	69fb      	ldr	r3, [r7, #28]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	f000 809d 	beq.w	8015f5e <dhcp_recv+0x162>
 8015e24:	69fb      	ldr	r3, [r7, #28]
 8015e26:	791b      	ldrb	r3, [r3, #4]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	f000 8098 	beq.w	8015f5e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	895b      	ldrh	r3, [r3, #10]
 8015e32:	2b2b      	cmp	r3, #43	; 0x2b
 8015e34:	f240 8095 	bls.w	8015f62 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8015e38:	69bb      	ldr	r3, [r7, #24]
 8015e3a:	781b      	ldrb	r3, [r3, #0]
 8015e3c:	2b02      	cmp	r3, #2
 8015e3e:	f040 8092 	bne.w	8015f66 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015e42:	2300      	movs	r3, #0
 8015e44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015e48:	e012      	b.n	8015e70 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8015e4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e4e:	6a3a      	ldr	r2, [r7, #32]
 8015e50:	4413      	add	r3, r2
 8015e52:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8015e56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e5a:	69b9      	ldr	r1, [r7, #24]
 8015e5c:	440b      	add	r3, r1
 8015e5e:	7f1b      	ldrb	r3, [r3, #28]
 8015e60:	429a      	cmp	r2, r3
 8015e62:	f040 8082 	bne.w	8015f6a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e6a:	3301      	adds	r3, #1
 8015e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015e70:	6a3b      	ldr	r3, [r7, #32]
 8015e72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015e76:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015e7a:	429a      	cmp	r2, r3
 8015e7c:	d203      	bcs.n	8015e86 <dhcp_recv+0x8a>
 8015e7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e82:	2b05      	cmp	r3, #5
 8015e84:	d9e1      	bls.n	8015e4a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8015e86:	69bb      	ldr	r3, [r7, #24]
 8015e88:	685b      	ldr	r3, [r3, #4]
 8015e8a:	4618      	mov	r0, r3
 8015e8c:	f7f5 fc43 	bl	800b716 <lwip_htonl>
 8015e90:	4602      	mov	r2, r0
 8015e92:	69fb      	ldr	r3, [r7, #28]
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	429a      	cmp	r2, r3
 8015e98:	d169      	bne.n	8015f6e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8015e9a:	69f9      	ldr	r1, [r7, #28]
 8015e9c:	6878      	ldr	r0, [r7, #4]
 8015e9e:	f7ff fcd9 	bl	8015854 <dhcp_parse_reply>
 8015ea2:	4603      	mov	r3, r0
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d164      	bne.n	8015f72 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8015ea8:	4b39      	ldr	r3, [pc, #228]	; (8015f90 <dhcp_recv+0x194>)
 8015eaa:	785b      	ldrb	r3, [r3, #1]
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d062      	beq.n	8015f76 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	685b      	ldr	r3, [r3, #4]
 8015eb4:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8015eb6:	4b37      	ldr	r3, [pc, #220]	; (8015f94 <dhcp_recv+0x198>)
 8015eb8:	685b      	ldr	r3, [r3, #4]
 8015eba:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8015ebc:	7cfb      	ldrb	r3, [r7, #19]
 8015ebe:	2b05      	cmp	r3, #5
 8015ec0:	d12a      	bne.n	8015f18 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015ec2:	69fb      	ldr	r3, [r7, #28]
 8015ec4:	795b      	ldrb	r3, [r3, #5]
 8015ec6:	2b01      	cmp	r3, #1
 8015ec8:	d112      	bne.n	8015ef0 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8015eca:	6979      	ldr	r1, [r7, #20]
 8015ecc:	6a38      	ldr	r0, [r7, #32]
 8015ece:	f7fe fe17 	bl	8014b00 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8015ed2:	6a3b      	ldr	r3, [r7, #32]
 8015ed4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015ed8:	f003 0308 	and.w	r3, r3, #8
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d003      	beq.n	8015ee8 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8015ee0:	6a38      	ldr	r0, [r7, #32]
 8015ee2:	f7fe fb87 	bl	80145f4 <dhcp_check>
 8015ee6:	e049      	b.n	8015f7c <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8015ee8:	6a38      	ldr	r0, [r7, #32]
 8015eea:	f7ff f867 	bl	8014fbc <dhcp_bind>
 8015eee:	e045      	b.n	8015f7c <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015ef0:	69fb      	ldr	r3, [r7, #28]
 8015ef2:	795b      	ldrb	r3, [r3, #5]
 8015ef4:	2b03      	cmp	r3, #3
 8015ef6:	d007      	beq.n	8015f08 <dhcp_recv+0x10c>
 8015ef8:	69fb      	ldr	r3, [r7, #28]
 8015efa:	795b      	ldrb	r3, [r3, #5]
 8015efc:	2b04      	cmp	r3, #4
 8015efe:	d003      	beq.n	8015f08 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8015f00:	69fb      	ldr	r3, [r7, #28]
 8015f02:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015f04:	2b05      	cmp	r3, #5
 8015f06:	d139      	bne.n	8015f7c <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8015f08:	6979      	ldr	r1, [r7, #20]
 8015f0a:	6a38      	ldr	r0, [r7, #32]
 8015f0c:	f7fe fdf8 	bl	8014b00 <dhcp_handle_ack>
      dhcp_bind(netif);
 8015f10:	6a38      	ldr	r0, [r7, #32]
 8015f12:	f7ff f853 	bl	8014fbc <dhcp_bind>
 8015f16:	e031      	b.n	8015f7c <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8015f18:	7cfb      	ldrb	r3, [r7, #19]
 8015f1a:	2b06      	cmp	r3, #6
 8015f1c:	d113      	bne.n	8015f46 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015f1e:	69fb      	ldr	r3, [r7, #28]
 8015f20:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8015f22:	2b03      	cmp	r3, #3
 8015f24:	d00b      	beq.n	8015f3e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015f26:	69fb      	ldr	r3, [r7, #28]
 8015f28:	795b      	ldrb	r3, [r3, #5]
 8015f2a:	2b01      	cmp	r3, #1
 8015f2c:	d007      	beq.n	8015f3e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015f2e:	69fb      	ldr	r3, [r7, #28]
 8015f30:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015f32:	2b04      	cmp	r3, #4
 8015f34:	d003      	beq.n	8015f3e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015f36:	69fb      	ldr	r3, [r7, #28]
 8015f38:	795b      	ldrb	r3, [r3, #5]
 8015f3a:	2b05      	cmp	r3, #5
 8015f3c:	d103      	bne.n	8015f46 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8015f3e:	6a38      	ldr	r0, [r7, #32]
 8015f40:	f7fe fb3e 	bl	80145c0 <dhcp_handle_nak>
 8015f44:	e01a      	b.n	8015f7c <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8015f46:	7cfb      	ldrb	r3, [r7, #19]
 8015f48:	2b02      	cmp	r3, #2
 8015f4a:	d116      	bne.n	8015f7a <dhcp_recv+0x17e>
 8015f4c:	69fb      	ldr	r3, [r7, #28]
 8015f4e:	795b      	ldrb	r3, [r3, #5]
 8015f50:	2b06      	cmp	r3, #6
 8015f52:	d112      	bne.n	8015f7a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8015f54:	6979      	ldr	r1, [r7, #20]
 8015f56:	6a38      	ldr	r0, [r7, #32]
 8015f58:	f7fe fb80 	bl	801465c <dhcp_handle_offer>
 8015f5c:	e00e      	b.n	8015f7c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015f5e:	bf00      	nop
 8015f60:	e00c      	b.n	8015f7c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015f62:	bf00      	nop
 8015f64:	e00a      	b.n	8015f7c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015f66:	bf00      	nop
 8015f68:	e008      	b.n	8015f7c <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8015f6a:	bf00      	nop
 8015f6c:	e006      	b.n	8015f7c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015f6e:	bf00      	nop
 8015f70:	e004      	b.n	8015f7c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015f72:	bf00      	nop
 8015f74:	e002      	b.n	8015f7c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015f76:	bf00      	nop
 8015f78:	e000      	b.n	8015f7c <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8015f7a:	bf00      	nop
  pbuf_free(p);
 8015f7c:	6878      	ldr	r0, [r7, #4]
 8015f7e:	f7f6 ffe9 	bl	800cf54 <pbuf_free>
}
 8015f82:	bf00      	nop
 8015f84:	3728      	adds	r7, #40	; 0x28
 8015f86:	46bd      	mov	sp, r7
 8015f88:	bd80      	pop	{r7, pc}
 8015f8a:	bf00      	nop
 8015f8c:	2000d7fc 	.word	0x2000d7fc
 8015f90:	20010ff0 	.word	0x20010ff0
 8015f94:	20010fd0 	.word	0x20010fd0

08015f98 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8015f98:	b580      	push	{r7, lr}
 8015f9a:	b088      	sub	sp, #32
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	60f8      	str	r0, [r7, #12]
 8015fa0:	60b9      	str	r1, [r7, #8]
 8015fa2:	603b      	str	r3, [r7, #0]
 8015fa4:	4613      	mov	r3, r2
 8015fa6:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d108      	bne.n	8015fc0 <dhcp_create_msg+0x28>
 8015fae:	4b5f      	ldr	r3, [pc, #380]	; (801612c <dhcp_create_msg+0x194>)
 8015fb0:	f240 7269 	movw	r2, #1897	; 0x769
 8015fb4:	495e      	ldr	r1, [pc, #376]	; (8016130 <dhcp_create_msg+0x198>)
 8015fb6:	485f      	ldr	r0, [pc, #380]	; (8016134 <dhcp_create_msg+0x19c>)
 8015fb8:	f002 fefe 	bl	8018db8 <iprintf>
 8015fbc:	2300      	movs	r3, #0
 8015fbe:	e0b1      	b.n	8016124 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8015fc0:	68bb      	ldr	r3, [r7, #8]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d108      	bne.n	8015fd8 <dhcp_create_msg+0x40>
 8015fc6:	4b59      	ldr	r3, [pc, #356]	; (801612c <dhcp_create_msg+0x194>)
 8015fc8:	f240 726a 	movw	r2, #1898	; 0x76a
 8015fcc:	495a      	ldr	r1, [pc, #360]	; (8016138 <dhcp_create_msg+0x1a0>)
 8015fce:	4859      	ldr	r0, [pc, #356]	; (8016134 <dhcp_create_msg+0x19c>)
 8015fd0:	f002 fef2 	bl	8018db8 <iprintf>
 8015fd4:	2300      	movs	r3, #0
 8015fd6:	e0a5      	b.n	8016124 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8015fd8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015fdc:	f44f 719a 	mov.w	r1, #308	; 0x134
 8015fe0:	2036      	movs	r0, #54	; 0x36
 8015fe2:	f7f6 fcd3 	bl	800c98c <pbuf_alloc>
 8015fe6:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8015fe8:	69bb      	ldr	r3, [r7, #24]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d101      	bne.n	8015ff2 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8015fee:	2300      	movs	r3, #0
 8015ff0:	e098      	b.n	8016124 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8015ff2:	69bb      	ldr	r3, [r7, #24]
 8015ff4:	895b      	ldrh	r3, [r3, #10]
 8015ff6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8015ffa:	d206      	bcs.n	801600a <dhcp_create_msg+0x72>
 8015ffc:	4b4b      	ldr	r3, [pc, #300]	; (801612c <dhcp_create_msg+0x194>)
 8015ffe:	f240 7271 	movw	r2, #1905	; 0x771
 8016002:	494e      	ldr	r1, [pc, #312]	; (801613c <dhcp_create_msg+0x1a4>)
 8016004:	484b      	ldr	r0, [pc, #300]	; (8016134 <dhcp_create_msg+0x19c>)
 8016006:	f002 fed7 	bl	8018db8 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801600a:	79fb      	ldrb	r3, [r7, #7]
 801600c:	2b03      	cmp	r3, #3
 801600e:	d103      	bne.n	8016018 <dhcp_create_msg+0x80>
 8016010:	68bb      	ldr	r3, [r7, #8]
 8016012:	795b      	ldrb	r3, [r3, #5]
 8016014:	2b03      	cmp	r3, #3
 8016016:	d10d      	bne.n	8016034 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8016018:	68bb      	ldr	r3, [r7, #8]
 801601a:	799b      	ldrb	r3, [r3, #6]
 801601c:	2b00      	cmp	r3, #0
 801601e:	d105      	bne.n	801602c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8016020:	f002 fddc 	bl	8018bdc <rand>
 8016024:	4603      	mov	r3, r0
 8016026:	461a      	mov	r2, r3
 8016028:	4b45      	ldr	r3, [pc, #276]	; (8016140 <dhcp_create_msg+0x1a8>)
 801602a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801602c:	4b44      	ldr	r3, [pc, #272]	; (8016140 <dhcp_create_msg+0x1a8>)
 801602e:	681a      	ldr	r2, [r3, #0]
 8016030:	68bb      	ldr	r3, [r7, #8]
 8016032:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8016034:	69bb      	ldr	r3, [r7, #24]
 8016036:	685b      	ldr	r3, [r3, #4]
 8016038:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801603a:	f44f 729a 	mov.w	r2, #308	; 0x134
 801603e:	2100      	movs	r1, #0
 8016040:	6978      	ldr	r0, [r7, #20]
 8016042:	f002 ff58 	bl	8018ef6 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8016046:	697b      	ldr	r3, [r7, #20]
 8016048:	2201      	movs	r2, #1
 801604a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801604c:	697b      	ldr	r3, [r7, #20]
 801604e:	2201      	movs	r2, #1
 8016050:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8016058:	697b      	ldr	r3, [r7, #20]
 801605a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801605c:	68bb      	ldr	r3, [r7, #8]
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	4618      	mov	r0, r3
 8016062:	f7f5 fb58 	bl	800b716 <lwip_htonl>
 8016066:	4602      	mov	r2, r0
 8016068:	697b      	ldr	r3, [r7, #20]
 801606a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801606c:	79fb      	ldrb	r3, [r7, #7]
 801606e:	2b08      	cmp	r3, #8
 8016070:	d010      	beq.n	8016094 <dhcp_create_msg+0xfc>
 8016072:	79fb      	ldrb	r3, [r7, #7]
 8016074:	2b04      	cmp	r3, #4
 8016076:	d00d      	beq.n	8016094 <dhcp_create_msg+0xfc>
 8016078:	79fb      	ldrb	r3, [r7, #7]
 801607a:	2b07      	cmp	r3, #7
 801607c:	d00a      	beq.n	8016094 <dhcp_create_msg+0xfc>
 801607e:	79fb      	ldrb	r3, [r7, #7]
 8016080:	2b03      	cmp	r3, #3
 8016082:	d10c      	bne.n	801609e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8016084:	68bb      	ldr	r3, [r7, #8]
 8016086:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8016088:	2b05      	cmp	r3, #5
 801608a:	d003      	beq.n	8016094 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801608c:	68bb      	ldr	r3, [r7, #8]
 801608e:	795b      	ldrb	r3, [r3, #5]
 8016090:	2b04      	cmp	r3, #4
 8016092:	d104      	bne.n	801609e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	3304      	adds	r3, #4
 8016098:	681a      	ldr	r2, [r3, #0]
 801609a:	697b      	ldr	r3, [r7, #20]
 801609c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801609e:	2300      	movs	r3, #0
 80160a0:	83fb      	strh	r3, [r7, #30]
 80160a2:	e00c      	b.n	80160be <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80160a4:	8bfa      	ldrh	r2, [r7, #30]
 80160a6:	8bfb      	ldrh	r3, [r7, #30]
 80160a8:	68f9      	ldr	r1, [r7, #12]
 80160aa:	440a      	add	r2, r1
 80160ac:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80160b0:	697a      	ldr	r2, [r7, #20]
 80160b2:	4413      	add	r3, r2
 80160b4:	460a      	mov	r2, r1
 80160b6:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80160b8:	8bfb      	ldrh	r3, [r7, #30]
 80160ba:	3301      	adds	r3, #1
 80160bc:	83fb      	strh	r3, [r7, #30]
 80160be:	8bfb      	ldrh	r3, [r7, #30]
 80160c0:	2b05      	cmp	r3, #5
 80160c2:	d9ef      	bls.n	80160a4 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80160c4:	697b      	ldr	r3, [r7, #20]
 80160c6:	2200      	movs	r2, #0
 80160c8:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80160cc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80160d0:	2200      	movs	r2, #0
 80160d2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80160d6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80160da:	2200      	movs	r2, #0
 80160dc:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80160e0:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80160e4:	2200      	movs	r2, #0
 80160e6:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80160ea:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80160ee:	697b      	ldr	r3, [r7, #20]
 80160f0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80160f4:	2301      	movs	r3, #1
 80160f6:	2235      	movs	r2, #53	; 0x35
 80160f8:	2000      	movs	r0, #0
 80160fa:	f7ff fadb 	bl	80156b4 <dhcp_option>
 80160fe:	4603      	mov	r3, r0
 8016100:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8016102:	697b      	ldr	r3, [r7, #20]
 8016104:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016108:	79fa      	ldrb	r2, [r7, #7]
 801610a:	8a7b      	ldrh	r3, [r7, #18]
 801610c:	4618      	mov	r0, r3
 801610e:	f7ff fb05 	bl	801571c <dhcp_option_byte>
 8016112:	4603      	mov	r3, r0
 8016114:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8016116:	683b      	ldr	r3, [r7, #0]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d002      	beq.n	8016122 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801611c:	683b      	ldr	r3, [r7, #0]
 801611e:	8a7a      	ldrh	r2, [r7, #18]
 8016120:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8016122:	69bb      	ldr	r3, [r7, #24]
}
 8016124:	4618      	mov	r0, r3
 8016126:	3720      	adds	r7, #32
 8016128:	46bd      	mov	sp, r7
 801612a:	bd80      	pop	{r7, pc}
 801612c:	0801d35c 	.word	0x0801d35c
 8016130:	0801d67c 	.word	0x0801d67c
 8016134:	0801d3bc 	.word	0x0801d3bc
 8016138:	0801d69c 	.word	0x0801d69c
 801613c:	0801d6bc 	.word	0x0801d6bc
 8016140:	20011000 	.word	0x20011000

08016144 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8016144:	b580      	push	{r7, lr}
 8016146:	b084      	sub	sp, #16
 8016148:	af00      	add	r7, sp, #0
 801614a:	4603      	mov	r3, r0
 801614c:	60b9      	str	r1, [r7, #8]
 801614e:	607a      	str	r2, [r7, #4]
 8016150:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8016152:	89fb      	ldrh	r3, [r7, #14]
 8016154:	1c5a      	adds	r2, r3, #1
 8016156:	81fa      	strh	r2, [r7, #14]
 8016158:	461a      	mov	r2, r3
 801615a:	68bb      	ldr	r3, [r7, #8]
 801615c:	4413      	add	r3, r2
 801615e:	22ff      	movs	r2, #255	; 0xff
 8016160:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016162:	e007      	b.n	8016174 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8016164:	89fb      	ldrh	r3, [r7, #14]
 8016166:	1c5a      	adds	r2, r3, #1
 8016168:	81fa      	strh	r2, [r7, #14]
 801616a:	461a      	mov	r2, r3
 801616c:	68bb      	ldr	r3, [r7, #8]
 801616e:	4413      	add	r3, r2
 8016170:	2200      	movs	r2, #0
 8016172:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016174:	89fb      	ldrh	r3, [r7, #14]
 8016176:	2b43      	cmp	r3, #67	; 0x43
 8016178:	d904      	bls.n	8016184 <dhcp_option_trailer+0x40>
 801617a:	89fb      	ldrh	r3, [r7, #14]
 801617c:	f003 0303 	and.w	r3, r3, #3
 8016180:	2b00      	cmp	r3, #0
 8016182:	d002      	beq.n	801618a <dhcp_option_trailer+0x46>
 8016184:	89fb      	ldrh	r3, [r7, #14]
 8016186:	2b43      	cmp	r3, #67	; 0x43
 8016188:	d9ec      	bls.n	8016164 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801618a:	89fb      	ldrh	r3, [r7, #14]
 801618c:	33f0      	adds	r3, #240	; 0xf0
 801618e:	b29b      	uxth	r3, r3
 8016190:	4619      	mov	r1, r3
 8016192:	6878      	ldr	r0, [r7, #4]
 8016194:	f7f6 fd58 	bl	800cc48 <pbuf_realloc>
}
 8016198:	bf00      	nop
 801619a:	3710      	adds	r7, #16
 801619c:	46bd      	mov	sp, r7
 801619e:	bd80      	pop	{r7, pc}

080161a0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80161a0:	b480      	push	{r7}
 80161a2:	b085      	sub	sp, #20
 80161a4:	af00      	add	r7, sp, #0
 80161a6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d017      	beq.n	80161de <dhcp_supplied_address+0x3e>
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d013      	beq.n	80161de <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161ba:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	795b      	ldrb	r3, [r3, #5]
 80161c0:	2b0a      	cmp	r3, #10
 80161c2:	d007      	beq.n	80161d4 <dhcp_supplied_address+0x34>
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	795b      	ldrb	r3, [r3, #5]
 80161c8:	2b05      	cmp	r3, #5
 80161ca:	d003      	beq.n	80161d4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80161d0:	2b04      	cmp	r3, #4
 80161d2:	d101      	bne.n	80161d8 <dhcp_supplied_address+0x38>
 80161d4:	2301      	movs	r3, #1
 80161d6:	e000      	b.n	80161da <dhcp_supplied_address+0x3a>
 80161d8:	2300      	movs	r3, #0
 80161da:	b2db      	uxtb	r3, r3
 80161dc:	e000      	b.n	80161e0 <dhcp_supplied_address+0x40>
  }
  return 0;
 80161de:	2300      	movs	r3, #0
}
 80161e0:	4618      	mov	r0, r3
 80161e2:	3714      	adds	r7, #20
 80161e4:	46bd      	mov	sp, r7
 80161e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ea:	4770      	bx	lr

080161ec <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80161ec:	b580      	push	{r7, lr}
 80161ee:	b082      	sub	sp, #8
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80161f4:	4915      	ldr	r1, [pc, #84]	; (801624c <etharp_free_entry+0x60>)
 80161f6:	687a      	ldr	r2, [r7, #4]
 80161f8:	4613      	mov	r3, r2
 80161fa:	005b      	lsls	r3, r3, #1
 80161fc:	4413      	add	r3, r2
 80161fe:	00db      	lsls	r3, r3, #3
 8016200:	440b      	add	r3, r1
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	2b00      	cmp	r3, #0
 8016206:	d013      	beq.n	8016230 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016208:	4910      	ldr	r1, [pc, #64]	; (801624c <etharp_free_entry+0x60>)
 801620a:	687a      	ldr	r2, [r7, #4]
 801620c:	4613      	mov	r3, r2
 801620e:	005b      	lsls	r3, r3, #1
 8016210:	4413      	add	r3, r2
 8016212:	00db      	lsls	r3, r3, #3
 8016214:	440b      	add	r3, r1
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	4618      	mov	r0, r3
 801621a:	f7f6 fe9b 	bl	800cf54 <pbuf_free>
    arp_table[i].q = NULL;
 801621e:	490b      	ldr	r1, [pc, #44]	; (801624c <etharp_free_entry+0x60>)
 8016220:	687a      	ldr	r2, [r7, #4]
 8016222:	4613      	mov	r3, r2
 8016224:	005b      	lsls	r3, r3, #1
 8016226:	4413      	add	r3, r2
 8016228:	00db      	lsls	r3, r3, #3
 801622a:	440b      	add	r3, r1
 801622c:	2200      	movs	r2, #0
 801622e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016230:	4906      	ldr	r1, [pc, #24]	; (801624c <etharp_free_entry+0x60>)
 8016232:	687a      	ldr	r2, [r7, #4]
 8016234:	4613      	mov	r3, r2
 8016236:	005b      	lsls	r3, r3, #1
 8016238:	4413      	add	r3, r2
 801623a:	00db      	lsls	r3, r3, #3
 801623c:	440b      	add	r3, r1
 801623e:	3314      	adds	r3, #20
 8016240:	2200      	movs	r2, #0
 8016242:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016244:	bf00      	nop
 8016246:	3708      	adds	r7, #8
 8016248:	46bd      	mov	sp, r7
 801624a:	bd80      	pop	{r7, pc}
 801624c:	20011004 	.word	0x20011004

08016250 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016250:	b580      	push	{r7, lr}
 8016252:	b082      	sub	sp, #8
 8016254:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016256:	2300      	movs	r3, #0
 8016258:	607b      	str	r3, [r7, #4]
 801625a:	e096      	b.n	801638a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801625c:	494f      	ldr	r1, [pc, #316]	; (801639c <etharp_tmr+0x14c>)
 801625e:	687a      	ldr	r2, [r7, #4]
 8016260:	4613      	mov	r3, r2
 8016262:	005b      	lsls	r3, r3, #1
 8016264:	4413      	add	r3, r2
 8016266:	00db      	lsls	r3, r3, #3
 8016268:	440b      	add	r3, r1
 801626a:	3314      	adds	r3, #20
 801626c:	781b      	ldrb	r3, [r3, #0]
 801626e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016270:	78fb      	ldrb	r3, [r7, #3]
 8016272:	2b00      	cmp	r3, #0
 8016274:	f000 8086 	beq.w	8016384 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016278:	4948      	ldr	r1, [pc, #288]	; (801639c <etharp_tmr+0x14c>)
 801627a:	687a      	ldr	r2, [r7, #4]
 801627c:	4613      	mov	r3, r2
 801627e:	005b      	lsls	r3, r3, #1
 8016280:	4413      	add	r3, r2
 8016282:	00db      	lsls	r3, r3, #3
 8016284:	440b      	add	r3, r1
 8016286:	3312      	adds	r3, #18
 8016288:	881b      	ldrh	r3, [r3, #0]
 801628a:	3301      	adds	r3, #1
 801628c:	b298      	uxth	r0, r3
 801628e:	4943      	ldr	r1, [pc, #268]	; (801639c <etharp_tmr+0x14c>)
 8016290:	687a      	ldr	r2, [r7, #4]
 8016292:	4613      	mov	r3, r2
 8016294:	005b      	lsls	r3, r3, #1
 8016296:	4413      	add	r3, r2
 8016298:	00db      	lsls	r3, r3, #3
 801629a:	440b      	add	r3, r1
 801629c:	3312      	adds	r3, #18
 801629e:	4602      	mov	r2, r0
 80162a0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80162a2:	493e      	ldr	r1, [pc, #248]	; (801639c <etharp_tmr+0x14c>)
 80162a4:	687a      	ldr	r2, [r7, #4]
 80162a6:	4613      	mov	r3, r2
 80162a8:	005b      	lsls	r3, r3, #1
 80162aa:	4413      	add	r3, r2
 80162ac:	00db      	lsls	r3, r3, #3
 80162ae:	440b      	add	r3, r1
 80162b0:	3312      	adds	r3, #18
 80162b2:	881b      	ldrh	r3, [r3, #0]
 80162b4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80162b8:	d215      	bcs.n	80162e6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80162ba:	4938      	ldr	r1, [pc, #224]	; (801639c <etharp_tmr+0x14c>)
 80162bc:	687a      	ldr	r2, [r7, #4]
 80162be:	4613      	mov	r3, r2
 80162c0:	005b      	lsls	r3, r3, #1
 80162c2:	4413      	add	r3, r2
 80162c4:	00db      	lsls	r3, r3, #3
 80162c6:	440b      	add	r3, r1
 80162c8:	3314      	adds	r3, #20
 80162ca:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80162cc:	2b01      	cmp	r3, #1
 80162ce:	d10e      	bne.n	80162ee <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80162d0:	4932      	ldr	r1, [pc, #200]	; (801639c <etharp_tmr+0x14c>)
 80162d2:	687a      	ldr	r2, [r7, #4]
 80162d4:	4613      	mov	r3, r2
 80162d6:	005b      	lsls	r3, r3, #1
 80162d8:	4413      	add	r3, r2
 80162da:	00db      	lsls	r3, r3, #3
 80162dc:	440b      	add	r3, r1
 80162de:	3312      	adds	r3, #18
 80162e0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80162e2:	2b04      	cmp	r3, #4
 80162e4:	d903      	bls.n	80162ee <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80162e6:	6878      	ldr	r0, [r7, #4]
 80162e8:	f7ff ff80 	bl	80161ec <etharp_free_entry>
 80162ec:	e04a      	b.n	8016384 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80162ee:	492b      	ldr	r1, [pc, #172]	; (801639c <etharp_tmr+0x14c>)
 80162f0:	687a      	ldr	r2, [r7, #4]
 80162f2:	4613      	mov	r3, r2
 80162f4:	005b      	lsls	r3, r3, #1
 80162f6:	4413      	add	r3, r2
 80162f8:	00db      	lsls	r3, r3, #3
 80162fa:	440b      	add	r3, r1
 80162fc:	3314      	adds	r3, #20
 80162fe:	781b      	ldrb	r3, [r3, #0]
 8016300:	2b03      	cmp	r3, #3
 8016302:	d10a      	bne.n	801631a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016304:	4925      	ldr	r1, [pc, #148]	; (801639c <etharp_tmr+0x14c>)
 8016306:	687a      	ldr	r2, [r7, #4]
 8016308:	4613      	mov	r3, r2
 801630a:	005b      	lsls	r3, r3, #1
 801630c:	4413      	add	r3, r2
 801630e:	00db      	lsls	r3, r3, #3
 8016310:	440b      	add	r3, r1
 8016312:	3314      	adds	r3, #20
 8016314:	2204      	movs	r2, #4
 8016316:	701a      	strb	r2, [r3, #0]
 8016318:	e034      	b.n	8016384 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801631a:	4920      	ldr	r1, [pc, #128]	; (801639c <etharp_tmr+0x14c>)
 801631c:	687a      	ldr	r2, [r7, #4]
 801631e:	4613      	mov	r3, r2
 8016320:	005b      	lsls	r3, r3, #1
 8016322:	4413      	add	r3, r2
 8016324:	00db      	lsls	r3, r3, #3
 8016326:	440b      	add	r3, r1
 8016328:	3314      	adds	r3, #20
 801632a:	781b      	ldrb	r3, [r3, #0]
 801632c:	2b04      	cmp	r3, #4
 801632e:	d10a      	bne.n	8016346 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016330:	491a      	ldr	r1, [pc, #104]	; (801639c <etharp_tmr+0x14c>)
 8016332:	687a      	ldr	r2, [r7, #4]
 8016334:	4613      	mov	r3, r2
 8016336:	005b      	lsls	r3, r3, #1
 8016338:	4413      	add	r3, r2
 801633a:	00db      	lsls	r3, r3, #3
 801633c:	440b      	add	r3, r1
 801633e:	3314      	adds	r3, #20
 8016340:	2202      	movs	r2, #2
 8016342:	701a      	strb	r2, [r3, #0]
 8016344:	e01e      	b.n	8016384 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016346:	4915      	ldr	r1, [pc, #84]	; (801639c <etharp_tmr+0x14c>)
 8016348:	687a      	ldr	r2, [r7, #4]
 801634a:	4613      	mov	r3, r2
 801634c:	005b      	lsls	r3, r3, #1
 801634e:	4413      	add	r3, r2
 8016350:	00db      	lsls	r3, r3, #3
 8016352:	440b      	add	r3, r1
 8016354:	3314      	adds	r3, #20
 8016356:	781b      	ldrb	r3, [r3, #0]
 8016358:	2b01      	cmp	r3, #1
 801635a:	d113      	bne.n	8016384 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801635c:	490f      	ldr	r1, [pc, #60]	; (801639c <etharp_tmr+0x14c>)
 801635e:	687a      	ldr	r2, [r7, #4]
 8016360:	4613      	mov	r3, r2
 8016362:	005b      	lsls	r3, r3, #1
 8016364:	4413      	add	r3, r2
 8016366:	00db      	lsls	r3, r3, #3
 8016368:	440b      	add	r3, r1
 801636a:	3308      	adds	r3, #8
 801636c:	6818      	ldr	r0, [r3, #0]
 801636e:	687a      	ldr	r2, [r7, #4]
 8016370:	4613      	mov	r3, r2
 8016372:	005b      	lsls	r3, r3, #1
 8016374:	4413      	add	r3, r2
 8016376:	00db      	lsls	r3, r3, #3
 8016378:	4a08      	ldr	r2, [pc, #32]	; (801639c <etharp_tmr+0x14c>)
 801637a:	4413      	add	r3, r2
 801637c:	3304      	adds	r3, #4
 801637e:	4619      	mov	r1, r3
 8016380:	f000 fe72 	bl	8017068 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	3301      	adds	r3, #1
 8016388:	607b      	str	r3, [r7, #4]
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	2b09      	cmp	r3, #9
 801638e:	f77f af65 	ble.w	801625c <etharp_tmr+0xc>
      }
    }
  }
}
 8016392:	bf00      	nop
 8016394:	bf00      	nop
 8016396:	3708      	adds	r7, #8
 8016398:	46bd      	mov	sp, r7
 801639a:	bd80      	pop	{r7, pc}
 801639c:	20011004 	.word	0x20011004

080163a0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80163a0:	b580      	push	{r7, lr}
 80163a2:	b08a      	sub	sp, #40	; 0x28
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	60f8      	str	r0, [r7, #12]
 80163a8:	460b      	mov	r3, r1
 80163aa:	607a      	str	r2, [r7, #4]
 80163ac:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80163ae:	230a      	movs	r3, #10
 80163b0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80163b2:	230a      	movs	r3, #10
 80163b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80163b6:	230a      	movs	r3, #10
 80163b8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80163ba:	2300      	movs	r3, #0
 80163bc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80163be:	230a      	movs	r3, #10
 80163c0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80163c2:	2300      	movs	r3, #0
 80163c4:	83bb      	strh	r3, [r7, #28]
 80163c6:	2300      	movs	r3, #0
 80163c8:	837b      	strh	r3, [r7, #26]
 80163ca:	2300      	movs	r3, #0
 80163cc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80163ce:	2300      	movs	r3, #0
 80163d0:	843b      	strh	r3, [r7, #32]
 80163d2:	e0ae      	b.n	8016532 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80163d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163d8:	49a6      	ldr	r1, [pc, #664]	; (8016674 <etharp_find_entry+0x2d4>)
 80163da:	4613      	mov	r3, r2
 80163dc:	005b      	lsls	r3, r3, #1
 80163de:	4413      	add	r3, r2
 80163e0:	00db      	lsls	r3, r3, #3
 80163e2:	440b      	add	r3, r1
 80163e4:	3314      	adds	r3, #20
 80163e6:	781b      	ldrb	r3, [r3, #0]
 80163e8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80163ea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80163ee:	2b0a      	cmp	r3, #10
 80163f0:	d105      	bne.n	80163fe <etharp_find_entry+0x5e>
 80163f2:	7dfb      	ldrb	r3, [r7, #23]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d102      	bne.n	80163fe <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80163f8:	8c3b      	ldrh	r3, [r7, #32]
 80163fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80163fc:	e095      	b.n	801652a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80163fe:	7dfb      	ldrb	r3, [r7, #23]
 8016400:	2b00      	cmp	r3, #0
 8016402:	f000 8092 	beq.w	801652a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016406:	7dfb      	ldrb	r3, [r7, #23]
 8016408:	2b01      	cmp	r3, #1
 801640a:	d009      	beq.n	8016420 <etharp_find_entry+0x80>
 801640c:	7dfb      	ldrb	r3, [r7, #23]
 801640e:	2b01      	cmp	r3, #1
 8016410:	d806      	bhi.n	8016420 <etharp_find_entry+0x80>
 8016412:	4b99      	ldr	r3, [pc, #612]	; (8016678 <etharp_find_entry+0x2d8>)
 8016414:	f240 1223 	movw	r2, #291	; 0x123
 8016418:	4998      	ldr	r1, [pc, #608]	; (801667c <etharp_find_entry+0x2dc>)
 801641a:	4899      	ldr	r0, [pc, #612]	; (8016680 <etharp_find_entry+0x2e0>)
 801641c:	f002 fccc 	bl	8018db8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	2b00      	cmp	r3, #0
 8016424:	d020      	beq.n	8016468 <etharp_find_entry+0xc8>
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	6819      	ldr	r1, [r3, #0]
 801642a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801642e:	4891      	ldr	r0, [pc, #580]	; (8016674 <etharp_find_entry+0x2d4>)
 8016430:	4613      	mov	r3, r2
 8016432:	005b      	lsls	r3, r3, #1
 8016434:	4413      	add	r3, r2
 8016436:	00db      	lsls	r3, r3, #3
 8016438:	4403      	add	r3, r0
 801643a:	3304      	adds	r3, #4
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	4299      	cmp	r1, r3
 8016440:	d112      	bne.n	8016468 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	2b00      	cmp	r3, #0
 8016446:	d00c      	beq.n	8016462 <etharp_find_entry+0xc2>
 8016448:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801644c:	4989      	ldr	r1, [pc, #548]	; (8016674 <etharp_find_entry+0x2d4>)
 801644e:	4613      	mov	r3, r2
 8016450:	005b      	lsls	r3, r3, #1
 8016452:	4413      	add	r3, r2
 8016454:	00db      	lsls	r3, r3, #3
 8016456:	440b      	add	r3, r1
 8016458:	3308      	adds	r3, #8
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	687a      	ldr	r2, [r7, #4]
 801645e:	429a      	cmp	r2, r3
 8016460:	d102      	bne.n	8016468 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016462:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016466:	e100      	b.n	801666a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016468:	7dfb      	ldrb	r3, [r7, #23]
 801646a:	2b01      	cmp	r3, #1
 801646c:	d140      	bne.n	80164f0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801646e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016472:	4980      	ldr	r1, [pc, #512]	; (8016674 <etharp_find_entry+0x2d4>)
 8016474:	4613      	mov	r3, r2
 8016476:	005b      	lsls	r3, r3, #1
 8016478:	4413      	add	r3, r2
 801647a:	00db      	lsls	r3, r3, #3
 801647c:	440b      	add	r3, r1
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d01a      	beq.n	80164ba <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016484:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016488:	497a      	ldr	r1, [pc, #488]	; (8016674 <etharp_find_entry+0x2d4>)
 801648a:	4613      	mov	r3, r2
 801648c:	005b      	lsls	r3, r3, #1
 801648e:	4413      	add	r3, r2
 8016490:	00db      	lsls	r3, r3, #3
 8016492:	440b      	add	r3, r1
 8016494:	3312      	adds	r3, #18
 8016496:	881b      	ldrh	r3, [r3, #0]
 8016498:	8bba      	ldrh	r2, [r7, #28]
 801649a:	429a      	cmp	r2, r3
 801649c:	d845      	bhi.n	801652a <etharp_find_entry+0x18a>
            old_queue = i;
 801649e:	8c3b      	ldrh	r3, [r7, #32]
 80164a0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80164a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80164a6:	4973      	ldr	r1, [pc, #460]	; (8016674 <etharp_find_entry+0x2d4>)
 80164a8:	4613      	mov	r3, r2
 80164aa:	005b      	lsls	r3, r3, #1
 80164ac:	4413      	add	r3, r2
 80164ae:	00db      	lsls	r3, r3, #3
 80164b0:	440b      	add	r3, r1
 80164b2:	3312      	adds	r3, #18
 80164b4:	881b      	ldrh	r3, [r3, #0]
 80164b6:	83bb      	strh	r3, [r7, #28]
 80164b8:	e037      	b.n	801652a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80164ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80164be:	496d      	ldr	r1, [pc, #436]	; (8016674 <etharp_find_entry+0x2d4>)
 80164c0:	4613      	mov	r3, r2
 80164c2:	005b      	lsls	r3, r3, #1
 80164c4:	4413      	add	r3, r2
 80164c6:	00db      	lsls	r3, r3, #3
 80164c8:	440b      	add	r3, r1
 80164ca:	3312      	adds	r3, #18
 80164cc:	881b      	ldrh	r3, [r3, #0]
 80164ce:	8b7a      	ldrh	r2, [r7, #26]
 80164d0:	429a      	cmp	r2, r3
 80164d2:	d82a      	bhi.n	801652a <etharp_find_entry+0x18a>
            old_pending = i;
 80164d4:	8c3b      	ldrh	r3, [r7, #32]
 80164d6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80164d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80164dc:	4965      	ldr	r1, [pc, #404]	; (8016674 <etharp_find_entry+0x2d4>)
 80164de:	4613      	mov	r3, r2
 80164e0:	005b      	lsls	r3, r3, #1
 80164e2:	4413      	add	r3, r2
 80164e4:	00db      	lsls	r3, r3, #3
 80164e6:	440b      	add	r3, r1
 80164e8:	3312      	adds	r3, #18
 80164ea:	881b      	ldrh	r3, [r3, #0]
 80164ec:	837b      	strh	r3, [r7, #26]
 80164ee:	e01c      	b.n	801652a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80164f0:	7dfb      	ldrb	r3, [r7, #23]
 80164f2:	2b01      	cmp	r3, #1
 80164f4:	d919      	bls.n	801652a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80164f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80164fa:	495e      	ldr	r1, [pc, #376]	; (8016674 <etharp_find_entry+0x2d4>)
 80164fc:	4613      	mov	r3, r2
 80164fe:	005b      	lsls	r3, r3, #1
 8016500:	4413      	add	r3, r2
 8016502:	00db      	lsls	r3, r3, #3
 8016504:	440b      	add	r3, r1
 8016506:	3312      	adds	r3, #18
 8016508:	881b      	ldrh	r3, [r3, #0]
 801650a:	8b3a      	ldrh	r2, [r7, #24]
 801650c:	429a      	cmp	r2, r3
 801650e:	d80c      	bhi.n	801652a <etharp_find_entry+0x18a>
            old_stable = i;
 8016510:	8c3b      	ldrh	r3, [r7, #32]
 8016512:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016514:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016518:	4956      	ldr	r1, [pc, #344]	; (8016674 <etharp_find_entry+0x2d4>)
 801651a:	4613      	mov	r3, r2
 801651c:	005b      	lsls	r3, r3, #1
 801651e:	4413      	add	r3, r2
 8016520:	00db      	lsls	r3, r3, #3
 8016522:	440b      	add	r3, r1
 8016524:	3312      	adds	r3, #18
 8016526:	881b      	ldrh	r3, [r3, #0]
 8016528:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801652a:	8c3b      	ldrh	r3, [r7, #32]
 801652c:	3301      	adds	r3, #1
 801652e:	b29b      	uxth	r3, r3
 8016530:	843b      	strh	r3, [r7, #32]
 8016532:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016536:	2b09      	cmp	r3, #9
 8016538:	f77f af4c 	ble.w	80163d4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801653c:	7afb      	ldrb	r3, [r7, #11]
 801653e:	f003 0302 	and.w	r3, r3, #2
 8016542:	2b00      	cmp	r3, #0
 8016544:	d108      	bne.n	8016558 <etharp_find_entry+0x1b8>
 8016546:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801654a:	2b0a      	cmp	r3, #10
 801654c:	d107      	bne.n	801655e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801654e:	7afb      	ldrb	r3, [r7, #11]
 8016550:	f003 0301 	and.w	r3, r3, #1
 8016554:	2b00      	cmp	r3, #0
 8016556:	d102      	bne.n	801655e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016558:	f04f 33ff 	mov.w	r3, #4294967295
 801655c:	e085      	b.n	801666a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801655e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016562:	2b09      	cmp	r3, #9
 8016564:	dc02      	bgt.n	801656c <etharp_find_entry+0x1cc>
    i = empty;
 8016566:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016568:	843b      	strh	r3, [r7, #32]
 801656a:	e039      	b.n	80165e0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801656c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016570:	2b09      	cmp	r3, #9
 8016572:	dc14      	bgt.n	801659e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016574:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016576:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016578:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801657c:	493d      	ldr	r1, [pc, #244]	; (8016674 <etharp_find_entry+0x2d4>)
 801657e:	4613      	mov	r3, r2
 8016580:	005b      	lsls	r3, r3, #1
 8016582:	4413      	add	r3, r2
 8016584:	00db      	lsls	r3, r3, #3
 8016586:	440b      	add	r3, r1
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	2b00      	cmp	r3, #0
 801658c:	d018      	beq.n	80165c0 <etharp_find_entry+0x220>
 801658e:	4b3a      	ldr	r3, [pc, #232]	; (8016678 <etharp_find_entry+0x2d8>)
 8016590:	f240 126d 	movw	r2, #365	; 0x16d
 8016594:	493b      	ldr	r1, [pc, #236]	; (8016684 <etharp_find_entry+0x2e4>)
 8016596:	483a      	ldr	r0, [pc, #232]	; (8016680 <etharp_find_entry+0x2e0>)
 8016598:	f002 fc0e 	bl	8018db8 <iprintf>
 801659c:	e010      	b.n	80165c0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801659e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80165a2:	2b09      	cmp	r3, #9
 80165a4:	dc02      	bgt.n	80165ac <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80165a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80165a8:	843b      	strh	r3, [r7, #32]
 80165aa:	e009      	b.n	80165c0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80165ac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80165b0:	2b09      	cmp	r3, #9
 80165b2:	dc02      	bgt.n	80165ba <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80165b4:	8bfb      	ldrh	r3, [r7, #30]
 80165b6:	843b      	strh	r3, [r7, #32]
 80165b8:	e002      	b.n	80165c0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80165ba:	f04f 33ff 	mov.w	r3, #4294967295
 80165be:	e054      	b.n	801666a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80165c0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80165c4:	2b09      	cmp	r3, #9
 80165c6:	dd06      	ble.n	80165d6 <etharp_find_entry+0x236>
 80165c8:	4b2b      	ldr	r3, [pc, #172]	; (8016678 <etharp_find_entry+0x2d8>)
 80165ca:	f240 127f 	movw	r2, #383	; 0x17f
 80165ce:	492e      	ldr	r1, [pc, #184]	; (8016688 <etharp_find_entry+0x2e8>)
 80165d0:	482b      	ldr	r0, [pc, #172]	; (8016680 <etharp_find_entry+0x2e0>)
 80165d2:	f002 fbf1 	bl	8018db8 <iprintf>
    etharp_free_entry(i);
 80165d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80165da:	4618      	mov	r0, r3
 80165dc:	f7ff fe06 	bl	80161ec <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80165e0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80165e4:	2b09      	cmp	r3, #9
 80165e6:	dd06      	ble.n	80165f6 <etharp_find_entry+0x256>
 80165e8:	4b23      	ldr	r3, [pc, #140]	; (8016678 <etharp_find_entry+0x2d8>)
 80165ea:	f240 1283 	movw	r2, #387	; 0x183
 80165ee:	4926      	ldr	r1, [pc, #152]	; (8016688 <etharp_find_entry+0x2e8>)
 80165f0:	4823      	ldr	r0, [pc, #140]	; (8016680 <etharp_find_entry+0x2e0>)
 80165f2:	f002 fbe1 	bl	8018db8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80165f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165fa:	491e      	ldr	r1, [pc, #120]	; (8016674 <etharp_find_entry+0x2d4>)
 80165fc:	4613      	mov	r3, r2
 80165fe:	005b      	lsls	r3, r3, #1
 8016600:	4413      	add	r3, r2
 8016602:	00db      	lsls	r3, r3, #3
 8016604:	440b      	add	r3, r1
 8016606:	3314      	adds	r3, #20
 8016608:	781b      	ldrb	r3, [r3, #0]
 801660a:	2b00      	cmp	r3, #0
 801660c:	d006      	beq.n	801661c <etharp_find_entry+0x27c>
 801660e:	4b1a      	ldr	r3, [pc, #104]	; (8016678 <etharp_find_entry+0x2d8>)
 8016610:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8016614:	491d      	ldr	r1, [pc, #116]	; (801668c <etharp_find_entry+0x2ec>)
 8016616:	481a      	ldr	r0, [pc, #104]	; (8016680 <etharp_find_entry+0x2e0>)
 8016618:	f002 fbce 	bl	8018db8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	2b00      	cmp	r3, #0
 8016620:	d00b      	beq.n	801663a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016622:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	6819      	ldr	r1, [r3, #0]
 801662a:	4812      	ldr	r0, [pc, #72]	; (8016674 <etharp_find_entry+0x2d4>)
 801662c:	4613      	mov	r3, r2
 801662e:	005b      	lsls	r3, r3, #1
 8016630:	4413      	add	r3, r2
 8016632:	00db      	lsls	r3, r3, #3
 8016634:	4403      	add	r3, r0
 8016636:	3304      	adds	r3, #4
 8016638:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801663a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801663e:	490d      	ldr	r1, [pc, #52]	; (8016674 <etharp_find_entry+0x2d4>)
 8016640:	4613      	mov	r3, r2
 8016642:	005b      	lsls	r3, r3, #1
 8016644:	4413      	add	r3, r2
 8016646:	00db      	lsls	r3, r3, #3
 8016648:	440b      	add	r3, r1
 801664a:	3312      	adds	r3, #18
 801664c:	2200      	movs	r2, #0
 801664e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016650:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016654:	4907      	ldr	r1, [pc, #28]	; (8016674 <etharp_find_entry+0x2d4>)
 8016656:	4613      	mov	r3, r2
 8016658:	005b      	lsls	r3, r3, #1
 801665a:	4413      	add	r3, r2
 801665c:	00db      	lsls	r3, r3, #3
 801665e:	440b      	add	r3, r1
 8016660:	3308      	adds	r3, #8
 8016662:	687a      	ldr	r2, [r7, #4]
 8016664:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016666:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801666a:	4618      	mov	r0, r3
 801666c:	3728      	adds	r7, #40	; 0x28
 801666e:	46bd      	mov	sp, r7
 8016670:	bd80      	pop	{r7, pc}
 8016672:	bf00      	nop
 8016674:	20011004 	.word	0x20011004
 8016678:	0801d6fc 	.word	0x0801d6fc
 801667c:	0801d734 	.word	0x0801d734
 8016680:	0801d774 	.word	0x0801d774
 8016684:	0801d79c 	.word	0x0801d79c
 8016688:	0801d7b4 	.word	0x0801d7b4
 801668c:	0801d7c8 	.word	0x0801d7c8

08016690 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016690:	b580      	push	{r7, lr}
 8016692:	b088      	sub	sp, #32
 8016694:	af02      	add	r7, sp, #8
 8016696:	60f8      	str	r0, [r7, #12]
 8016698:	60b9      	str	r1, [r7, #8]
 801669a:	607a      	str	r2, [r7, #4]
 801669c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80166a4:	2b06      	cmp	r3, #6
 80166a6:	d006      	beq.n	80166b6 <etharp_update_arp_entry+0x26>
 80166a8:	4b48      	ldr	r3, [pc, #288]	; (80167cc <etharp_update_arp_entry+0x13c>)
 80166aa:	f240 12a9 	movw	r2, #425	; 0x1a9
 80166ae:	4948      	ldr	r1, [pc, #288]	; (80167d0 <etharp_update_arp_entry+0x140>)
 80166b0:	4848      	ldr	r0, [pc, #288]	; (80167d4 <etharp_update_arp_entry+0x144>)
 80166b2:	f002 fb81 	bl	8018db8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80166b6:	68bb      	ldr	r3, [r7, #8]
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d012      	beq.n	80166e2 <etharp_update_arp_entry+0x52>
 80166bc:	68bb      	ldr	r3, [r7, #8]
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d00e      	beq.n	80166e2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80166c4:	68bb      	ldr	r3, [r7, #8]
 80166c6:	681b      	ldr	r3, [r3, #0]
 80166c8:	68f9      	ldr	r1, [r7, #12]
 80166ca:	4618      	mov	r0, r3
 80166cc:	f001 f920 	bl	8017910 <ip4_addr_isbroadcast_u32>
 80166d0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d105      	bne.n	80166e2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80166d6:	68bb      	ldr	r3, [r7, #8]
 80166d8:	681b      	ldr	r3, [r3, #0]
 80166da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80166de:	2be0      	cmp	r3, #224	; 0xe0
 80166e0:	d102      	bne.n	80166e8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80166e2:	f06f 030f 	mvn.w	r3, #15
 80166e6:	e06c      	b.n	80167c2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80166e8:	78fb      	ldrb	r3, [r7, #3]
 80166ea:	68fa      	ldr	r2, [r7, #12]
 80166ec:	4619      	mov	r1, r3
 80166ee:	68b8      	ldr	r0, [r7, #8]
 80166f0:	f7ff fe56 	bl	80163a0 <etharp_find_entry>
 80166f4:	4603      	mov	r3, r0
 80166f6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80166f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	da02      	bge.n	8016706 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016700:	8afb      	ldrh	r3, [r7, #22]
 8016702:	b25b      	sxtb	r3, r3
 8016704:	e05d      	b.n	80167c2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016706:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801670a:	4933      	ldr	r1, [pc, #204]	; (80167d8 <etharp_update_arp_entry+0x148>)
 801670c:	4613      	mov	r3, r2
 801670e:	005b      	lsls	r3, r3, #1
 8016710:	4413      	add	r3, r2
 8016712:	00db      	lsls	r3, r3, #3
 8016714:	440b      	add	r3, r1
 8016716:	3314      	adds	r3, #20
 8016718:	2202      	movs	r2, #2
 801671a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801671c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016720:	492d      	ldr	r1, [pc, #180]	; (80167d8 <etharp_update_arp_entry+0x148>)
 8016722:	4613      	mov	r3, r2
 8016724:	005b      	lsls	r3, r3, #1
 8016726:	4413      	add	r3, r2
 8016728:	00db      	lsls	r3, r3, #3
 801672a:	440b      	add	r3, r1
 801672c:	3308      	adds	r3, #8
 801672e:	68fa      	ldr	r2, [r7, #12]
 8016730:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016732:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016736:	4613      	mov	r3, r2
 8016738:	005b      	lsls	r3, r3, #1
 801673a:	4413      	add	r3, r2
 801673c:	00db      	lsls	r3, r3, #3
 801673e:	3308      	adds	r3, #8
 8016740:	4a25      	ldr	r2, [pc, #148]	; (80167d8 <etharp_update_arp_entry+0x148>)
 8016742:	4413      	add	r3, r2
 8016744:	3304      	adds	r3, #4
 8016746:	2206      	movs	r2, #6
 8016748:	6879      	ldr	r1, [r7, #4]
 801674a:	4618      	mov	r0, r3
 801674c:	f002 fd34 	bl	80191b8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016750:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016754:	4920      	ldr	r1, [pc, #128]	; (80167d8 <etharp_update_arp_entry+0x148>)
 8016756:	4613      	mov	r3, r2
 8016758:	005b      	lsls	r3, r3, #1
 801675a:	4413      	add	r3, r2
 801675c:	00db      	lsls	r3, r3, #3
 801675e:	440b      	add	r3, r1
 8016760:	3312      	adds	r3, #18
 8016762:	2200      	movs	r2, #0
 8016764:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016766:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801676a:	491b      	ldr	r1, [pc, #108]	; (80167d8 <etharp_update_arp_entry+0x148>)
 801676c:	4613      	mov	r3, r2
 801676e:	005b      	lsls	r3, r3, #1
 8016770:	4413      	add	r3, r2
 8016772:	00db      	lsls	r3, r3, #3
 8016774:	440b      	add	r3, r1
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	2b00      	cmp	r3, #0
 801677a:	d021      	beq.n	80167c0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801677c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016780:	4915      	ldr	r1, [pc, #84]	; (80167d8 <etharp_update_arp_entry+0x148>)
 8016782:	4613      	mov	r3, r2
 8016784:	005b      	lsls	r3, r3, #1
 8016786:	4413      	add	r3, r2
 8016788:	00db      	lsls	r3, r3, #3
 801678a:	440b      	add	r3, r1
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016790:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016794:	4910      	ldr	r1, [pc, #64]	; (80167d8 <etharp_update_arp_entry+0x148>)
 8016796:	4613      	mov	r3, r2
 8016798:	005b      	lsls	r3, r3, #1
 801679a:	4413      	add	r3, r2
 801679c:	00db      	lsls	r3, r3, #3
 801679e:	440b      	add	r3, r1
 80167a0:	2200      	movs	r2, #0
 80167a2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80167aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80167ae:	9300      	str	r3, [sp, #0]
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	6939      	ldr	r1, [r7, #16]
 80167b4:	68f8      	ldr	r0, [r7, #12]
 80167b6:	f001 ffb9 	bl	801872c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80167ba:	6938      	ldr	r0, [r7, #16]
 80167bc:	f7f6 fbca 	bl	800cf54 <pbuf_free>
  }
  return ERR_OK;
 80167c0:	2300      	movs	r3, #0
}
 80167c2:	4618      	mov	r0, r3
 80167c4:	3718      	adds	r7, #24
 80167c6:	46bd      	mov	sp, r7
 80167c8:	bd80      	pop	{r7, pc}
 80167ca:	bf00      	nop
 80167cc:	0801d6fc 	.word	0x0801d6fc
 80167d0:	0801d7f4 	.word	0x0801d7f4
 80167d4:	0801d774 	.word	0x0801d774
 80167d8:	20011004 	.word	0x20011004

080167dc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80167dc:	b580      	push	{r7, lr}
 80167de:	b084      	sub	sp, #16
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80167e4:	2300      	movs	r3, #0
 80167e6:	60fb      	str	r3, [r7, #12]
 80167e8:	e01e      	b.n	8016828 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80167ea:	4913      	ldr	r1, [pc, #76]	; (8016838 <etharp_cleanup_netif+0x5c>)
 80167ec:	68fa      	ldr	r2, [r7, #12]
 80167ee:	4613      	mov	r3, r2
 80167f0:	005b      	lsls	r3, r3, #1
 80167f2:	4413      	add	r3, r2
 80167f4:	00db      	lsls	r3, r3, #3
 80167f6:	440b      	add	r3, r1
 80167f8:	3314      	adds	r3, #20
 80167fa:	781b      	ldrb	r3, [r3, #0]
 80167fc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80167fe:	7afb      	ldrb	r3, [r7, #11]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d00e      	beq.n	8016822 <etharp_cleanup_netif+0x46>
 8016804:	490c      	ldr	r1, [pc, #48]	; (8016838 <etharp_cleanup_netif+0x5c>)
 8016806:	68fa      	ldr	r2, [r7, #12]
 8016808:	4613      	mov	r3, r2
 801680a:	005b      	lsls	r3, r3, #1
 801680c:	4413      	add	r3, r2
 801680e:	00db      	lsls	r3, r3, #3
 8016810:	440b      	add	r3, r1
 8016812:	3308      	adds	r3, #8
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	687a      	ldr	r2, [r7, #4]
 8016818:	429a      	cmp	r2, r3
 801681a:	d102      	bne.n	8016822 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801681c:	68f8      	ldr	r0, [r7, #12]
 801681e:	f7ff fce5 	bl	80161ec <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016822:	68fb      	ldr	r3, [r7, #12]
 8016824:	3301      	adds	r3, #1
 8016826:	60fb      	str	r3, [r7, #12]
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	2b09      	cmp	r3, #9
 801682c:	dddd      	ble.n	80167ea <etharp_cleanup_netif+0xe>
    }
  }
}
 801682e:	bf00      	nop
 8016830:	bf00      	nop
 8016832:	3710      	adds	r7, #16
 8016834:	46bd      	mov	sp, r7
 8016836:	bd80      	pop	{r7, pc}
 8016838:	20011004 	.word	0x20011004

0801683c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801683c:	b5b0      	push	{r4, r5, r7, lr}
 801683e:	b08a      	sub	sp, #40	; 0x28
 8016840:	af04      	add	r7, sp, #16
 8016842:	6078      	str	r0, [r7, #4]
 8016844:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016846:	683b      	ldr	r3, [r7, #0]
 8016848:	2b00      	cmp	r3, #0
 801684a:	d107      	bne.n	801685c <etharp_input+0x20>
 801684c:	4b3f      	ldr	r3, [pc, #252]	; (801694c <etharp_input+0x110>)
 801684e:	f240 228a 	movw	r2, #650	; 0x28a
 8016852:	493f      	ldr	r1, [pc, #252]	; (8016950 <etharp_input+0x114>)
 8016854:	483f      	ldr	r0, [pc, #252]	; (8016954 <etharp_input+0x118>)
 8016856:	f002 faaf 	bl	8018db8 <iprintf>
 801685a:	e074      	b.n	8016946 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	685b      	ldr	r3, [r3, #4]
 8016860:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016862:	693b      	ldr	r3, [r7, #16]
 8016864:	881b      	ldrh	r3, [r3, #0]
 8016866:	b29b      	uxth	r3, r3
 8016868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801686c:	d10c      	bne.n	8016888 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801686e:	693b      	ldr	r3, [r7, #16]
 8016870:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016872:	2b06      	cmp	r3, #6
 8016874:	d108      	bne.n	8016888 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016876:	693b      	ldr	r3, [r7, #16]
 8016878:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801687a:	2b04      	cmp	r3, #4
 801687c:	d104      	bne.n	8016888 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801687e:	693b      	ldr	r3, [r7, #16]
 8016880:	885b      	ldrh	r3, [r3, #2]
 8016882:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016884:	2b08      	cmp	r3, #8
 8016886:	d003      	beq.n	8016890 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016888:	6878      	ldr	r0, [r7, #4]
 801688a:	f7f6 fb63 	bl	800cf54 <pbuf_free>
    return;
 801688e:	e05a      	b.n	8016946 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016890:	693b      	ldr	r3, [r7, #16]
 8016892:	330e      	adds	r3, #14
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016898:	693b      	ldr	r3, [r7, #16]
 801689a:	3318      	adds	r3, #24
 801689c:	681b      	ldr	r3, [r3, #0]
 801689e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80168a0:	683b      	ldr	r3, [r7, #0]
 80168a2:	3304      	adds	r3, #4
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d102      	bne.n	80168b0 <etharp_input+0x74>
    for_us = 0;
 80168aa:	2300      	movs	r3, #0
 80168ac:	75fb      	strb	r3, [r7, #23]
 80168ae:	e009      	b.n	80168c4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80168b0:	68ba      	ldr	r2, [r7, #8]
 80168b2:	683b      	ldr	r3, [r7, #0]
 80168b4:	3304      	adds	r3, #4
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	429a      	cmp	r2, r3
 80168ba:	bf0c      	ite	eq
 80168bc:	2301      	moveq	r3, #1
 80168be:	2300      	movne	r3, #0
 80168c0:	b2db      	uxtb	r3, r3
 80168c2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80168c4:	693b      	ldr	r3, [r7, #16]
 80168c6:	f103 0208 	add.w	r2, r3, #8
 80168ca:	7dfb      	ldrb	r3, [r7, #23]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d001      	beq.n	80168d4 <etharp_input+0x98>
 80168d0:	2301      	movs	r3, #1
 80168d2:	e000      	b.n	80168d6 <etharp_input+0x9a>
 80168d4:	2302      	movs	r3, #2
 80168d6:	f107 010c 	add.w	r1, r7, #12
 80168da:	6838      	ldr	r0, [r7, #0]
 80168dc:	f7ff fed8 	bl	8016690 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80168e0:	693b      	ldr	r3, [r7, #16]
 80168e2:	88db      	ldrh	r3, [r3, #6]
 80168e4:	b29b      	uxth	r3, r3
 80168e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80168ea:	d003      	beq.n	80168f4 <etharp_input+0xb8>
 80168ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80168f0:	d01e      	beq.n	8016930 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80168f2:	e025      	b.n	8016940 <etharp_input+0x104>
      if (for_us) {
 80168f4:	7dfb      	ldrb	r3, [r7, #23]
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d021      	beq.n	801693e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80168fa:	683b      	ldr	r3, [r7, #0]
 80168fc:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016900:	693b      	ldr	r3, [r7, #16]
 8016902:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016906:	683b      	ldr	r3, [r7, #0]
 8016908:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801690c:	683b      	ldr	r3, [r7, #0]
 801690e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016910:	693a      	ldr	r2, [r7, #16]
 8016912:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016914:	2102      	movs	r1, #2
 8016916:	9103      	str	r1, [sp, #12]
 8016918:	f107 010c 	add.w	r1, r7, #12
 801691c:	9102      	str	r1, [sp, #8]
 801691e:	9201      	str	r2, [sp, #4]
 8016920:	9300      	str	r3, [sp, #0]
 8016922:	462b      	mov	r3, r5
 8016924:	4622      	mov	r2, r4
 8016926:	4601      	mov	r1, r0
 8016928:	6838      	ldr	r0, [r7, #0]
 801692a:	f000 faef 	bl	8016f0c <etharp_raw>
      break;
 801692e:	e006      	b.n	801693e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8016930:	f107 030c 	add.w	r3, r7, #12
 8016934:	4619      	mov	r1, r3
 8016936:	6838      	ldr	r0, [r7, #0]
 8016938:	f7fe f9fc 	bl	8014d34 <dhcp_arp_reply>
      break;
 801693c:	e000      	b.n	8016940 <etharp_input+0x104>
      break;
 801693e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016940:	6878      	ldr	r0, [r7, #4]
 8016942:	f7f6 fb07 	bl	800cf54 <pbuf_free>
}
 8016946:	3718      	adds	r7, #24
 8016948:	46bd      	mov	sp, r7
 801694a:	bdb0      	pop	{r4, r5, r7, pc}
 801694c:	0801d6fc 	.word	0x0801d6fc
 8016950:	0801d84c 	.word	0x0801d84c
 8016954:	0801d774 	.word	0x0801d774

08016958 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016958:	b580      	push	{r7, lr}
 801695a:	b086      	sub	sp, #24
 801695c:	af02      	add	r7, sp, #8
 801695e:	60f8      	str	r0, [r7, #12]
 8016960:	60b9      	str	r1, [r7, #8]
 8016962:	4613      	mov	r3, r2
 8016964:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016966:	79fa      	ldrb	r2, [r7, #7]
 8016968:	4944      	ldr	r1, [pc, #272]	; (8016a7c <etharp_output_to_arp_index+0x124>)
 801696a:	4613      	mov	r3, r2
 801696c:	005b      	lsls	r3, r3, #1
 801696e:	4413      	add	r3, r2
 8016970:	00db      	lsls	r3, r3, #3
 8016972:	440b      	add	r3, r1
 8016974:	3314      	adds	r3, #20
 8016976:	781b      	ldrb	r3, [r3, #0]
 8016978:	2b01      	cmp	r3, #1
 801697a:	d806      	bhi.n	801698a <etharp_output_to_arp_index+0x32>
 801697c:	4b40      	ldr	r3, [pc, #256]	; (8016a80 <etharp_output_to_arp_index+0x128>)
 801697e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016982:	4940      	ldr	r1, [pc, #256]	; (8016a84 <etharp_output_to_arp_index+0x12c>)
 8016984:	4840      	ldr	r0, [pc, #256]	; (8016a88 <etharp_output_to_arp_index+0x130>)
 8016986:	f002 fa17 	bl	8018db8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801698a:	79fa      	ldrb	r2, [r7, #7]
 801698c:	493b      	ldr	r1, [pc, #236]	; (8016a7c <etharp_output_to_arp_index+0x124>)
 801698e:	4613      	mov	r3, r2
 8016990:	005b      	lsls	r3, r3, #1
 8016992:	4413      	add	r3, r2
 8016994:	00db      	lsls	r3, r3, #3
 8016996:	440b      	add	r3, r1
 8016998:	3314      	adds	r3, #20
 801699a:	781b      	ldrb	r3, [r3, #0]
 801699c:	2b02      	cmp	r3, #2
 801699e:	d153      	bne.n	8016a48 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80169a0:	79fa      	ldrb	r2, [r7, #7]
 80169a2:	4936      	ldr	r1, [pc, #216]	; (8016a7c <etharp_output_to_arp_index+0x124>)
 80169a4:	4613      	mov	r3, r2
 80169a6:	005b      	lsls	r3, r3, #1
 80169a8:	4413      	add	r3, r2
 80169aa:	00db      	lsls	r3, r3, #3
 80169ac:	440b      	add	r3, r1
 80169ae:	3312      	adds	r3, #18
 80169b0:	881b      	ldrh	r3, [r3, #0]
 80169b2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80169b6:	d919      	bls.n	80169ec <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80169b8:	79fa      	ldrb	r2, [r7, #7]
 80169ba:	4613      	mov	r3, r2
 80169bc:	005b      	lsls	r3, r3, #1
 80169be:	4413      	add	r3, r2
 80169c0:	00db      	lsls	r3, r3, #3
 80169c2:	4a2e      	ldr	r2, [pc, #184]	; (8016a7c <etharp_output_to_arp_index+0x124>)
 80169c4:	4413      	add	r3, r2
 80169c6:	3304      	adds	r3, #4
 80169c8:	4619      	mov	r1, r3
 80169ca:	68f8      	ldr	r0, [r7, #12]
 80169cc:	f000 fb4c 	bl	8017068 <etharp_request>
 80169d0:	4603      	mov	r3, r0
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d138      	bne.n	8016a48 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80169d6:	79fa      	ldrb	r2, [r7, #7]
 80169d8:	4928      	ldr	r1, [pc, #160]	; (8016a7c <etharp_output_to_arp_index+0x124>)
 80169da:	4613      	mov	r3, r2
 80169dc:	005b      	lsls	r3, r3, #1
 80169de:	4413      	add	r3, r2
 80169e0:	00db      	lsls	r3, r3, #3
 80169e2:	440b      	add	r3, r1
 80169e4:	3314      	adds	r3, #20
 80169e6:	2203      	movs	r2, #3
 80169e8:	701a      	strb	r2, [r3, #0]
 80169ea:	e02d      	b.n	8016a48 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80169ec:	79fa      	ldrb	r2, [r7, #7]
 80169ee:	4923      	ldr	r1, [pc, #140]	; (8016a7c <etharp_output_to_arp_index+0x124>)
 80169f0:	4613      	mov	r3, r2
 80169f2:	005b      	lsls	r3, r3, #1
 80169f4:	4413      	add	r3, r2
 80169f6:	00db      	lsls	r3, r3, #3
 80169f8:	440b      	add	r3, r1
 80169fa:	3312      	adds	r3, #18
 80169fc:	881b      	ldrh	r3, [r3, #0]
 80169fe:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016a02:	d321      	bcc.n	8016a48 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016a04:	79fa      	ldrb	r2, [r7, #7]
 8016a06:	4613      	mov	r3, r2
 8016a08:	005b      	lsls	r3, r3, #1
 8016a0a:	4413      	add	r3, r2
 8016a0c:	00db      	lsls	r3, r3, #3
 8016a0e:	4a1b      	ldr	r2, [pc, #108]	; (8016a7c <etharp_output_to_arp_index+0x124>)
 8016a10:	4413      	add	r3, r2
 8016a12:	1d19      	adds	r1, r3, #4
 8016a14:	79fa      	ldrb	r2, [r7, #7]
 8016a16:	4613      	mov	r3, r2
 8016a18:	005b      	lsls	r3, r3, #1
 8016a1a:	4413      	add	r3, r2
 8016a1c:	00db      	lsls	r3, r3, #3
 8016a1e:	3308      	adds	r3, #8
 8016a20:	4a16      	ldr	r2, [pc, #88]	; (8016a7c <etharp_output_to_arp_index+0x124>)
 8016a22:	4413      	add	r3, r2
 8016a24:	3304      	adds	r3, #4
 8016a26:	461a      	mov	r2, r3
 8016a28:	68f8      	ldr	r0, [r7, #12]
 8016a2a:	f000 fafb 	bl	8017024 <etharp_request_dst>
 8016a2e:	4603      	mov	r3, r0
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	d109      	bne.n	8016a48 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016a34:	79fa      	ldrb	r2, [r7, #7]
 8016a36:	4911      	ldr	r1, [pc, #68]	; (8016a7c <etharp_output_to_arp_index+0x124>)
 8016a38:	4613      	mov	r3, r2
 8016a3a:	005b      	lsls	r3, r3, #1
 8016a3c:	4413      	add	r3, r2
 8016a3e:	00db      	lsls	r3, r3, #3
 8016a40:	440b      	add	r3, r1
 8016a42:	3314      	adds	r3, #20
 8016a44:	2203      	movs	r2, #3
 8016a46:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016a48:	68fb      	ldr	r3, [r7, #12]
 8016a4a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8016a4e:	79fa      	ldrb	r2, [r7, #7]
 8016a50:	4613      	mov	r3, r2
 8016a52:	005b      	lsls	r3, r3, #1
 8016a54:	4413      	add	r3, r2
 8016a56:	00db      	lsls	r3, r3, #3
 8016a58:	3308      	adds	r3, #8
 8016a5a:	4a08      	ldr	r2, [pc, #32]	; (8016a7c <etharp_output_to_arp_index+0x124>)
 8016a5c:	4413      	add	r3, r2
 8016a5e:	3304      	adds	r3, #4
 8016a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016a64:	9200      	str	r2, [sp, #0]
 8016a66:	460a      	mov	r2, r1
 8016a68:	68b9      	ldr	r1, [r7, #8]
 8016a6a:	68f8      	ldr	r0, [r7, #12]
 8016a6c:	f001 fe5e 	bl	801872c <ethernet_output>
 8016a70:	4603      	mov	r3, r0
}
 8016a72:	4618      	mov	r0, r3
 8016a74:	3710      	adds	r7, #16
 8016a76:	46bd      	mov	sp, r7
 8016a78:	bd80      	pop	{r7, pc}
 8016a7a:	bf00      	nop
 8016a7c:	20011004 	.word	0x20011004
 8016a80:	0801d6fc 	.word	0x0801d6fc
 8016a84:	0801d86c 	.word	0x0801d86c
 8016a88:	0801d774 	.word	0x0801d774

08016a8c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016a8c:	b580      	push	{r7, lr}
 8016a8e:	b08a      	sub	sp, #40	; 0x28
 8016a90:	af02      	add	r7, sp, #8
 8016a92:	60f8      	str	r0, [r7, #12]
 8016a94:	60b9      	str	r1, [r7, #8]
 8016a96:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d106      	bne.n	8016ab0 <etharp_output+0x24>
 8016aa2:	4b73      	ldr	r3, [pc, #460]	; (8016c70 <etharp_output+0x1e4>)
 8016aa4:	f240 321e 	movw	r2, #798	; 0x31e
 8016aa8:	4972      	ldr	r1, [pc, #456]	; (8016c74 <etharp_output+0x1e8>)
 8016aaa:	4873      	ldr	r0, [pc, #460]	; (8016c78 <etharp_output+0x1ec>)
 8016aac:	f002 f984 	bl	8018db8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016ab0:	68bb      	ldr	r3, [r7, #8]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d106      	bne.n	8016ac4 <etharp_output+0x38>
 8016ab6:	4b6e      	ldr	r3, [pc, #440]	; (8016c70 <etharp_output+0x1e4>)
 8016ab8:	f240 321f 	movw	r2, #799	; 0x31f
 8016abc:	496f      	ldr	r1, [pc, #444]	; (8016c7c <etharp_output+0x1f0>)
 8016abe:	486e      	ldr	r0, [pc, #440]	; (8016c78 <etharp_output+0x1ec>)
 8016ac0:	f002 f97a 	bl	8018db8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d106      	bne.n	8016ad8 <etharp_output+0x4c>
 8016aca:	4b69      	ldr	r3, [pc, #420]	; (8016c70 <etharp_output+0x1e4>)
 8016acc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016ad0:	496b      	ldr	r1, [pc, #428]	; (8016c80 <etharp_output+0x1f4>)
 8016ad2:	4869      	ldr	r0, [pc, #420]	; (8016c78 <etharp_output+0x1ec>)
 8016ad4:	f002 f970 	bl	8018db8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	68f9      	ldr	r1, [r7, #12]
 8016ade:	4618      	mov	r0, r3
 8016ae0:	f000 ff16 	bl	8017910 <ip4_addr_isbroadcast_u32>
 8016ae4:	4603      	mov	r3, r0
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d002      	beq.n	8016af0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016aea:	4b66      	ldr	r3, [pc, #408]	; (8016c84 <etharp_output+0x1f8>)
 8016aec:	61fb      	str	r3, [r7, #28]
 8016aee:	e0af      	b.n	8016c50 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016af8:	2be0      	cmp	r3, #224	; 0xe0
 8016afa:	d118      	bne.n	8016b2e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016afc:	2301      	movs	r3, #1
 8016afe:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016b00:	2300      	movs	r3, #0
 8016b02:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016b04:	235e      	movs	r3, #94	; 0x5e
 8016b06:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	3301      	adds	r3, #1
 8016b0c:	781b      	ldrb	r3, [r3, #0]
 8016b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016b12:	b2db      	uxtb	r3, r3
 8016b14:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	3302      	adds	r3, #2
 8016b1a:	781b      	ldrb	r3, [r3, #0]
 8016b1c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	3303      	adds	r3, #3
 8016b22:	781b      	ldrb	r3, [r3, #0]
 8016b24:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016b26:	f107 0310 	add.w	r3, r7, #16
 8016b2a:	61fb      	str	r3, [r7, #28]
 8016b2c:	e090      	b.n	8016c50 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	681a      	ldr	r2, [r3, #0]
 8016b32:	68fb      	ldr	r3, [r7, #12]
 8016b34:	3304      	adds	r3, #4
 8016b36:	681b      	ldr	r3, [r3, #0]
 8016b38:	405a      	eors	r2, r3
 8016b3a:	68fb      	ldr	r3, [r7, #12]
 8016b3c:	3308      	adds	r3, #8
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	4013      	ands	r3, r2
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d012      	beq.n	8016b6c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016b4c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016b50:	4293      	cmp	r3, r2
 8016b52:	d00b      	beq.n	8016b6c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	330c      	adds	r3, #12
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d003      	beq.n	8016b66 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	330c      	adds	r3, #12
 8016b62:	61bb      	str	r3, [r7, #24]
 8016b64:	e002      	b.n	8016b6c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016b66:	f06f 0303 	mvn.w	r3, #3
 8016b6a:	e07d      	b.n	8016c68 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016b6c:	4b46      	ldr	r3, [pc, #280]	; (8016c88 <etharp_output+0x1fc>)
 8016b6e:	781b      	ldrb	r3, [r3, #0]
 8016b70:	4619      	mov	r1, r3
 8016b72:	4a46      	ldr	r2, [pc, #280]	; (8016c8c <etharp_output+0x200>)
 8016b74:	460b      	mov	r3, r1
 8016b76:	005b      	lsls	r3, r3, #1
 8016b78:	440b      	add	r3, r1
 8016b7a:	00db      	lsls	r3, r3, #3
 8016b7c:	4413      	add	r3, r2
 8016b7e:	3314      	adds	r3, #20
 8016b80:	781b      	ldrb	r3, [r3, #0]
 8016b82:	2b01      	cmp	r3, #1
 8016b84:	d925      	bls.n	8016bd2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016b86:	4b40      	ldr	r3, [pc, #256]	; (8016c88 <etharp_output+0x1fc>)
 8016b88:	781b      	ldrb	r3, [r3, #0]
 8016b8a:	4619      	mov	r1, r3
 8016b8c:	4a3f      	ldr	r2, [pc, #252]	; (8016c8c <etharp_output+0x200>)
 8016b8e:	460b      	mov	r3, r1
 8016b90:	005b      	lsls	r3, r3, #1
 8016b92:	440b      	add	r3, r1
 8016b94:	00db      	lsls	r3, r3, #3
 8016b96:	4413      	add	r3, r2
 8016b98:	3308      	adds	r3, #8
 8016b9a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016b9c:	68fa      	ldr	r2, [r7, #12]
 8016b9e:	429a      	cmp	r2, r3
 8016ba0:	d117      	bne.n	8016bd2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016ba2:	69bb      	ldr	r3, [r7, #24]
 8016ba4:	681a      	ldr	r2, [r3, #0]
 8016ba6:	4b38      	ldr	r3, [pc, #224]	; (8016c88 <etharp_output+0x1fc>)
 8016ba8:	781b      	ldrb	r3, [r3, #0]
 8016baa:	4618      	mov	r0, r3
 8016bac:	4937      	ldr	r1, [pc, #220]	; (8016c8c <etharp_output+0x200>)
 8016bae:	4603      	mov	r3, r0
 8016bb0:	005b      	lsls	r3, r3, #1
 8016bb2:	4403      	add	r3, r0
 8016bb4:	00db      	lsls	r3, r3, #3
 8016bb6:	440b      	add	r3, r1
 8016bb8:	3304      	adds	r3, #4
 8016bba:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016bbc:	429a      	cmp	r2, r3
 8016bbe:	d108      	bne.n	8016bd2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016bc0:	4b31      	ldr	r3, [pc, #196]	; (8016c88 <etharp_output+0x1fc>)
 8016bc2:	781b      	ldrb	r3, [r3, #0]
 8016bc4:	461a      	mov	r2, r3
 8016bc6:	68b9      	ldr	r1, [r7, #8]
 8016bc8:	68f8      	ldr	r0, [r7, #12]
 8016bca:	f7ff fec5 	bl	8016958 <etharp_output_to_arp_index>
 8016bce:	4603      	mov	r3, r0
 8016bd0:	e04a      	b.n	8016c68 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016bd2:	2300      	movs	r3, #0
 8016bd4:	75fb      	strb	r3, [r7, #23]
 8016bd6:	e031      	b.n	8016c3c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016bd8:	7dfa      	ldrb	r2, [r7, #23]
 8016bda:	492c      	ldr	r1, [pc, #176]	; (8016c8c <etharp_output+0x200>)
 8016bdc:	4613      	mov	r3, r2
 8016bde:	005b      	lsls	r3, r3, #1
 8016be0:	4413      	add	r3, r2
 8016be2:	00db      	lsls	r3, r3, #3
 8016be4:	440b      	add	r3, r1
 8016be6:	3314      	adds	r3, #20
 8016be8:	781b      	ldrb	r3, [r3, #0]
 8016bea:	2b01      	cmp	r3, #1
 8016bec:	d923      	bls.n	8016c36 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016bee:	7dfa      	ldrb	r2, [r7, #23]
 8016bf0:	4926      	ldr	r1, [pc, #152]	; (8016c8c <etharp_output+0x200>)
 8016bf2:	4613      	mov	r3, r2
 8016bf4:	005b      	lsls	r3, r3, #1
 8016bf6:	4413      	add	r3, r2
 8016bf8:	00db      	lsls	r3, r3, #3
 8016bfa:	440b      	add	r3, r1
 8016bfc:	3308      	adds	r3, #8
 8016bfe:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016c00:	68fa      	ldr	r2, [r7, #12]
 8016c02:	429a      	cmp	r2, r3
 8016c04:	d117      	bne.n	8016c36 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016c06:	69bb      	ldr	r3, [r7, #24]
 8016c08:	6819      	ldr	r1, [r3, #0]
 8016c0a:	7dfa      	ldrb	r2, [r7, #23]
 8016c0c:	481f      	ldr	r0, [pc, #124]	; (8016c8c <etharp_output+0x200>)
 8016c0e:	4613      	mov	r3, r2
 8016c10:	005b      	lsls	r3, r3, #1
 8016c12:	4413      	add	r3, r2
 8016c14:	00db      	lsls	r3, r3, #3
 8016c16:	4403      	add	r3, r0
 8016c18:	3304      	adds	r3, #4
 8016c1a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016c1c:	4299      	cmp	r1, r3
 8016c1e:	d10a      	bne.n	8016c36 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016c20:	4a19      	ldr	r2, [pc, #100]	; (8016c88 <etharp_output+0x1fc>)
 8016c22:	7dfb      	ldrb	r3, [r7, #23]
 8016c24:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016c26:	7dfb      	ldrb	r3, [r7, #23]
 8016c28:	461a      	mov	r2, r3
 8016c2a:	68b9      	ldr	r1, [r7, #8]
 8016c2c:	68f8      	ldr	r0, [r7, #12]
 8016c2e:	f7ff fe93 	bl	8016958 <etharp_output_to_arp_index>
 8016c32:	4603      	mov	r3, r0
 8016c34:	e018      	b.n	8016c68 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016c36:	7dfb      	ldrb	r3, [r7, #23]
 8016c38:	3301      	adds	r3, #1
 8016c3a:	75fb      	strb	r3, [r7, #23]
 8016c3c:	7dfb      	ldrb	r3, [r7, #23]
 8016c3e:	2b09      	cmp	r3, #9
 8016c40:	d9ca      	bls.n	8016bd8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016c42:	68ba      	ldr	r2, [r7, #8]
 8016c44:	69b9      	ldr	r1, [r7, #24]
 8016c46:	68f8      	ldr	r0, [r7, #12]
 8016c48:	f000 f822 	bl	8016c90 <etharp_query>
 8016c4c:	4603      	mov	r3, r0
 8016c4e:	e00b      	b.n	8016c68 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8016c56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016c5a:	9300      	str	r3, [sp, #0]
 8016c5c:	69fb      	ldr	r3, [r7, #28]
 8016c5e:	68b9      	ldr	r1, [r7, #8]
 8016c60:	68f8      	ldr	r0, [r7, #12]
 8016c62:	f001 fd63 	bl	801872c <ethernet_output>
 8016c66:	4603      	mov	r3, r0
}
 8016c68:	4618      	mov	r0, r3
 8016c6a:	3720      	adds	r7, #32
 8016c6c:	46bd      	mov	sp, r7
 8016c6e:	bd80      	pop	{r7, pc}
 8016c70:	0801d6fc 	.word	0x0801d6fc
 8016c74:	0801d84c 	.word	0x0801d84c
 8016c78:	0801d774 	.word	0x0801d774
 8016c7c:	0801d89c 	.word	0x0801d89c
 8016c80:	0801d83c 	.word	0x0801d83c
 8016c84:	08028048 	.word	0x08028048
 8016c88:	200110f4 	.word	0x200110f4
 8016c8c:	20011004 	.word	0x20011004

08016c90 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016c90:	b580      	push	{r7, lr}
 8016c92:	b08c      	sub	sp, #48	; 0x30
 8016c94:	af02      	add	r7, sp, #8
 8016c96:	60f8      	str	r0, [r7, #12]
 8016c98:	60b9      	str	r1, [r7, #8]
 8016c9a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	332a      	adds	r3, #42	; 0x2a
 8016ca0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016ca2:	23ff      	movs	r3, #255	; 0xff
 8016ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016ca8:	2300      	movs	r3, #0
 8016caa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016cac:	68bb      	ldr	r3, [r7, #8]
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	68f9      	ldr	r1, [r7, #12]
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	f000 fe2c 	bl	8017910 <ip4_addr_isbroadcast_u32>
 8016cb8:	4603      	mov	r3, r0
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d10c      	bne.n	8016cd8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016cbe:	68bb      	ldr	r3, [r7, #8]
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016cc6:	2be0      	cmp	r3, #224	; 0xe0
 8016cc8:	d006      	beq.n	8016cd8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016cca:	68bb      	ldr	r3, [r7, #8]
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d003      	beq.n	8016cd8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016cd0:	68bb      	ldr	r3, [r7, #8]
 8016cd2:	681b      	ldr	r3, [r3, #0]
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d102      	bne.n	8016cde <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016cd8:	f06f 030f 	mvn.w	r3, #15
 8016cdc:	e101      	b.n	8016ee2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016cde:	68fa      	ldr	r2, [r7, #12]
 8016ce0:	2101      	movs	r1, #1
 8016ce2:	68b8      	ldr	r0, [r7, #8]
 8016ce4:	f7ff fb5c 	bl	80163a0 <etharp_find_entry>
 8016ce8:	4603      	mov	r3, r0
 8016cea:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016cec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	da02      	bge.n	8016cfa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016cf4:	8a7b      	ldrh	r3, [r7, #18]
 8016cf6:	b25b      	sxtb	r3, r3
 8016cf8:	e0f3      	b.n	8016ee2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016cfa:	8a7b      	ldrh	r3, [r7, #18]
 8016cfc:	2b7e      	cmp	r3, #126	; 0x7e
 8016cfe:	d906      	bls.n	8016d0e <etharp_query+0x7e>
 8016d00:	4b7a      	ldr	r3, [pc, #488]	; (8016eec <etharp_query+0x25c>)
 8016d02:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016d06:	497a      	ldr	r1, [pc, #488]	; (8016ef0 <etharp_query+0x260>)
 8016d08:	487a      	ldr	r0, [pc, #488]	; (8016ef4 <etharp_query+0x264>)
 8016d0a:	f002 f855 	bl	8018db8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016d0e:	8a7b      	ldrh	r3, [r7, #18]
 8016d10:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016d12:	7c7a      	ldrb	r2, [r7, #17]
 8016d14:	4978      	ldr	r1, [pc, #480]	; (8016ef8 <etharp_query+0x268>)
 8016d16:	4613      	mov	r3, r2
 8016d18:	005b      	lsls	r3, r3, #1
 8016d1a:	4413      	add	r3, r2
 8016d1c:	00db      	lsls	r3, r3, #3
 8016d1e:	440b      	add	r3, r1
 8016d20:	3314      	adds	r3, #20
 8016d22:	781b      	ldrb	r3, [r3, #0]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d115      	bne.n	8016d54 <etharp_query+0xc4>
    is_new_entry = 1;
 8016d28:	2301      	movs	r3, #1
 8016d2a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016d2c:	7c7a      	ldrb	r2, [r7, #17]
 8016d2e:	4972      	ldr	r1, [pc, #456]	; (8016ef8 <etharp_query+0x268>)
 8016d30:	4613      	mov	r3, r2
 8016d32:	005b      	lsls	r3, r3, #1
 8016d34:	4413      	add	r3, r2
 8016d36:	00db      	lsls	r3, r3, #3
 8016d38:	440b      	add	r3, r1
 8016d3a:	3314      	adds	r3, #20
 8016d3c:	2201      	movs	r2, #1
 8016d3e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016d40:	7c7a      	ldrb	r2, [r7, #17]
 8016d42:	496d      	ldr	r1, [pc, #436]	; (8016ef8 <etharp_query+0x268>)
 8016d44:	4613      	mov	r3, r2
 8016d46:	005b      	lsls	r3, r3, #1
 8016d48:	4413      	add	r3, r2
 8016d4a:	00db      	lsls	r3, r3, #3
 8016d4c:	440b      	add	r3, r1
 8016d4e:	3308      	adds	r3, #8
 8016d50:	68fa      	ldr	r2, [r7, #12]
 8016d52:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016d54:	7c7a      	ldrb	r2, [r7, #17]
 8016d56:	4968      	ldr	r1, [pc, #416]	; (8016ef8 <etharp_query+0x268>)
 8016d58:	4613      	mov	r3, r2
 8016d5a:	005b      	lsls	r3, r3, #1
 8016d5c:	4413      	add	r3, r2
 8016d5e:	00db      	lsls	r3, r3, #3
 8016d60:	440b      	add	r3, r1
 8016d62:	3314      	adds	r3, #20
 8016d64:	781b      	ldrb	r3, [r3, #0]
 8016d66:	2b01      	cmp	r3, #1
 8016d68:	d011      	beq.n	8016d8e <etharp_query+0xfe>
 8016d6a:	7c7a      	ldrb	r2, [r7, #17]
 8016d6c:	4962      	ldr	r1, [pc, #392]	; (8016ef8 <etharp_query+0x268>)
 8016d6e:	4613      	mov	r3, r2
 8016d70:	005b      	lsls	r3, r3, #1
 8016d72:	4413      	add	r3, r2
 8016d74:	00db      	lsls	r3, r3, #3
 8016d76:	440b      	add	r3, r1
 8016d78:	3314      	adds	r3, #20
 8016d7a:	781b      	ldrb	r3, [r3, #0]
 8016d7c:	2b01      	cmp	r3, #1
 8016d7e:	d806      	bhi.n	8016d8e <etharp_query+0xfe>
 8016d80:	4b5a      	ldr	r3, [pc, #360]	; (8016eec <etharp_query+0x25c>)
 8016d82:	f240 32cd 	movw	r2, #973	; 0x3cd
 8016d86:	495d      	ldr	r1, [pc, #372]	; (8016efc <etharp_query+0x26c>)
 8016d88:	485a      	ldr	r0, [pc, #360]	; (8016ef4 <etharp_query+0x264>)
 8016d8a:	f002 f815 	bl	8018db8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016d8e:	6a3b      	ldr	r3, [r7, #32]
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d102      	bne.n	8016d9a <etharp_query+0x10a>
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d10c      	bne.n	8016db4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016d9a:	68b9      	ldr	r1, [r7, #8]
 8016d9c:	68f8      	ldr	r0, [r7, #12]
 8016d9e:	f000 f963 	bl	8017068 <etharp_request>
 8016da2:	4603      	mov	r3, r0
 8016da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d102      	bne.n	8016db4 <etharp_query+0x124>
      return result;
 8016dae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016db2:	e096      	b.n	8016ee2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d106      	bne.n	8016dc8 <etharp_query+0x138>
 8016dba:	4b4c      	ldr	r3, [pc, #304]	; (8016eec <etharp_query+0x25c>)
 8016dbc:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016dc0:	494f      	ldr	r1, [pc, #316]	; (8016f00 <etharp_query+0x270>)
 8016dc2:	484c      	ldr	r0, [pc, #304]	; (8016ef4 <etharp_query+0x264>)
 8016dc4:	f001 fff8 	bl	8018db8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016dc8:	7c7a      	ldrb	r2, [r7, #17]
 8016dca:	494b      	ldr	r1, [pc, #300]	; (8016ef8 <etharp_query+0x268>)
 8016dcc:	4613      	mov	r3, r2
 8016dce:	005b      	lsls	r3, r3, #1
 8016dd0:	4413      	add	r3, r2
 8016dd2:	00db      	lsls	r3, r3, #3
 8016dd4:	440b      	add	r3, r1
 8016dd6:	3314      	adds	r3, #20
 8016dd8:	781b      	ldrb	r3, [r3, #0]
 8016dda:	2b01      	cmp	r3, #1
 8016ddc:	d917      	bls.n	8016e0e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016dde:	4a49      	ldr	r2, [pc, #292]	; (8016f04 <etharp_query+0x274>)
 8016de0:	7c7b      	ldrb	r3, [r7, #17]
 8016de2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016de4:	7c7a      	ldrb	r2, [r7, #17]
 8016de6:	4613      	mov	r3, r2
 8016de8:	005b      	lsls	r3, r3, #1
 8016dea:	4413      	add	r3, r2
 8016dec:	00db      	lsls	r3, r3, #3
 8016dee:	3308      	adds	r3, #8
 8016df0:	4a41      	ldr	r2, [pc, #260]	; (8016ef8 <etharp_query+0x268>)
 8016df2:	4413      	add	r3, r2
 8016df4:	3304      	adds	r3, #4
 8016df6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016dfa:	9200      	str	r2, [sp, #0]
 8016dfc:	697a      	ldr	r2, [r7, #20]
 8016dfe:	6879      	ldr	r1, [r7, #4]
 8016e00:	68f8      	ldr	r0, [r7, #12]
 8016e02:	f001 fc93 	bl	801872c <ethernet_output>
 8016e06:	4603      	mov	r3, r0
 8016e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016e0c:	e067      	b.n	8016ede <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016e0e:	7c7a      	ldrb	r2, [r7, #17]
 8016e10:	4939      	ldr	r1, [pc, #228]	; (8016ef8 <etharp_query+0x268>)
 8016e12:	4613      	mov	r3, r2
 8016e14:	005b      	lsls	r3, r3, #1
 8016e16:	4413      	add	r3, r2
 8016e18:	00db      	lsls	r3, r3, #3
 8016e1a:	440b      	add	r3, r1
 8016e1c:	3314      	adds	r3, #20
 8016e1e:	781b      	ldrb	r3, [r3, #0]
 8016e20:	2b01      	cmp	r3, #1
 8016e22:	d15c      	bne.n	8016ede <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016e24:	2300      	movs	r3, #0
 8016e26:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016e2c:	e01c      	b.n	8016e68 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016e2e:	69fb      	ldr	r3, [r7, #28]
 8016e30:	895a      	ldrh	r2, [r3, #10]
 8016e32:	69fb      	ldr	r3, [r7, #28]
 8016e34:	891b      	ldrh	r3, [r3, #8]
 8016e36:	429a      	cmp	r2, r3
 8016e38:	d10a      	bne.n	8016e50 <etharp_query+0x1c0>
 8016e3a:	69fb      	ldr	r3, [r7, #28]
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d006      	beq.n	8016e50 <etharp_query+0x1c0>
 8016e42:	4b2a      	ldr	r3, [pc, #168]	; (8016eec <etharp_query+0x25c>)
 8016e44:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016e48:	492f      	ldr	r1, [pc, #188]	; (8016f08 <etharp_query+0x278>)
 8016e4a:	482a      	ldr	r0, [pc, #168]	; (8016ef4 <etharp_query+0x264>)
 8016e4c:	f001 ffb4 	bl	8018db8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016e50:	69fb      	ldr	r3, [r7, #28]
 8016e52:	7b1b      	ldrb	r3, [r3, #12]
 8016e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d002      	beq.n	8016e62 <etharp_query+0x1d2>
        copy_needed = 1;
 8016e5c:	2301      	movs	r3, #1
 8016e5e:	61bb      	str	r3, [r7, #24]
        break;
 8016e60:	e005      	b.n	8016e6e <etharp_query+0x1de>
      }
      p = p->next;
 8016e62:	69fb      	ldr	r3, [r7, #28]
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016e68:	69fb      	ldr	r3, [r7, #28]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d1df      	bne.n	8016e2e <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016e6e:	69bb      	ldr	r3, [r7, #24]
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d007      	beq.n	8016e84 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016e74:	687a      	ldr	r2, [r7, #4]
 8016e76:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016e7a:	200e      	movs	r0, #14
 8016e7c:	f7f6 fae2 	bl	800d444 <pbuf_clone>
 8016e80:	61f8      	str	r0, [r7, #28]
 8016e82:	e004      	b.n	8016e8e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016e88:	69f8      	ldr	r0, [r7, #28]
 8016e8a:	f7f6 f909 	bl	800d0a0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016e8e:	69fb      	ldr	r3, [r7, #28]
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d021      	beq.n	8016ed8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016e94:	7c7a      	ldrb	r2, [r7, #17]
 8016e96:	4918      	ldr	r1, [pc, #96]	; (8016ef8 <etharp_query+0x268>)
 8016e98:	4613      	mov	r3, r2
 8016e9a:	005b      	lsls	r3, r3, #1
 8016e9c:	4413      	add	r3, r2
 8016e9e:	00db      	lsls	r3, r3, #3
 8016ea0:	440b      	add	r3, r1
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d00a      	beq.n	8016ebe <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016ea8:	7c7a      	ldrb	r2, [r7, #17]
 8016eaa:	4913      	ldr	r1, [pc, #76]	; (8016ef8 <etharp_query+0x268>)
 8016eac:	4613      	mov	r3, r2
 8016eae:	005b      	lsls	r3, r3, #1
 8016eb0:	4413      	add	r3, r2
 8016eb2:	00db      	lsls	r3, r3, #3
 8016eb4:	440b      	add	r3, r1
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	4618      	mov	r0, r3
 8016eba:	f7f6 f84b 	bl	800cf54 <pbuf_free>
      }
      arp_table[i].q = p;
 8016ebe:	7c7a      	ldrb	r2, [r7, #17]
 8016ec0:	490d      	ldr	r1, [pc, #52]	; (8016ef8 <etharp_query+0x268>)
 8016ec2:	4613      	mov	r3, r2
 8016ec4:	005b      	lsls	r3, r3, #1
 8016ec6:	4413      	add	r3, r2
 8016ec8:	00db      	lsls	r3, r3, #3
 8016eca:	440b      	add	r3, r1
 8016ecc:	69fa      	ldr	r2, [r7, #28]
 8016ece:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016ed0:	2300      	movs	r3, #0
 8016ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016ed6:	e002      	b.n	8016ede <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016ed8:	23ff      	movs	r3, #255	; 0xff
 8016eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016ede:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	3728      	adds	r7, #40	; 0x28
 8016ee6:	46bd      	mov	sp, r7
 8016ee8:	bd80      	pop	{r7, pc}
 8016eea:	bf00      	nop
 8016eec:	0801d6fc 	.word	0x0801d6fc
 8016ef0:	0801d8a8 	.word	0x0801d8a8
 8016ef4:	0801d774 	.word	0x0801d774
 8016ef8:	20011004 	.word	0x20011004
 8016efc:	0801d8b8 	.word	0x0801d8b8
 8016f00:	0801d89c 	.word	0x0801d89c
 8016f04:	200110f4 	.word	0x200110f4
 8016f08:	0801d8e0 	.word	0x0801d8e0

08016f0c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016f0c:	b580      	push	{r7, lr}
 8016f0e:	b08a      	sub	sp, #40	; 0x28
 8016f10:	af02      	add	r7, sp, #8
 8016f12:	60f8      	str	r0, [r7, #12]
 8016f14:	60b9      	str	r1, [r7, #8]
 8016f16:	607a      	str	r2, [r7, #4]
 8016f18:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016f1a:	2300      	movs	r3, #0
 8016f1c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d106      	bne.n	8016f32 <etharp_raw+0x26>
 8016f24:	4b3a      	ldr	r3, [pc, #232]	; (8017010 <etharp_raw+0x104>)
 8016f26:	f240 4257 	movw	r2, #1111	; 0x457
 8016f2a:	493a      	ldr	r1, [pc, #232]	; (8017014 <etharp_raw+0x108>)
 8016f2c:	483a      	ldr	r0, [pc, #232]	; (8017018 <etharp_raw+0x10c>)
 8016f2e:	f001 ff43 	bl	8018db8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016f32:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016f36:	211c      	movs	r1, #28
 8016f38:	200e      	movs	r0, #14
 8016f3a:	f7f5 fd27 	bl	800c98c <pbuf_alloc>
 8016f3e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016f40:	69bb      	ldr	r3, [r7, #24]
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d102      	bne.n	8016f4c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016f46:	f04f 33ff 	mov.w	r3, #4294967295
 8016f4a:	e05d      	b.n	8017008 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016f4c:	69bb      	ldr	r3, [r7, #24]
 8016f4e:	895b      	ldrh	r3, [r3, #10]
 8016f50:	2b1b      	cmp	r3, #27
 8016f52:	d806      	bhi.n	8016f62 <etharp_raw+0x56>
 8016f54:	4b2e      	ldr	r3, [pc, #184]	; (8017010 <etharp_raw+0x104>)
 8016f56:	f240 4262 	movw	r2, #1122	; 0x462
 8016f5a:	4930      	ldr	r1, [pc, #192]	; (801701c <etharp_raw+0x110>)
 8016f5c:	482e      	ldr	r0, [pc, #184]	; (8017018 <etharp_raw+0x10c>)
 8016f5e:	f001 ff2b 	bl	8018db8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016f62:	69bb      	ldr	r3, [r7, #24]
 8016f64:	685b      	ldr	r3, [r3, #4]
 8016f66:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016f68:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016f6a:	4618      	mov	r0, r3
 8016f6c:	f7f4 fbbe 	bl	800b6ec <lwip_htons>
 8016f70:	4603      	mov	r3, r0
 8016f72:	461a      	mov	r2, r3
 8016f74:	697b      	ldr	r3, [r7, #20]
 8016f76:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016f7e:	2b06      	cmp	r3, #6
 8016f80:	d006      	beq.n	8016f90 <etharp_raw+0x84>
 8016f82:	4b23      	ldr	r3, [pc, #140]	; (8017010 <etharp_raw+0x104>)
 8016f84:	f240 4269 	movw	r2, #1129	; 0x469
 8016f88:	4925      	ldr	r1, [pc, #148]	; (8017020 <etharp_raw+0x114>)
 8016f8a:	4823      	ldr	r0, [pc, #140]	; (8017018 <etharp_raw+0x10c>)
 8016f8c:	f001 ff14 	bl	8018db8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016f90:	697b      	ldr	r3, [r7, #20]
 8016f92:	3308      	adds	r3, #8
 8016f94:	2206      	movs	r2, #6
 8016f96:	6839      	ldr	r1, [r7, #0]
 8016f98:	4618      	mov	r0, r3
 8016f9a:	f002 f90d 	bl	80191b8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016f9e:	697b      	ldr	r3, [r7, #20]
 8016fa0:	3312      	adds	r3, #18
 8016fa2:	2206      	movs	r2, #6
 8016fa4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016fa6:	4618      	mov	r0, r3
 8016fa8:	f002 f906 	bl	80191b8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016fac:	697b      	ldr	r3, [r7, #20]
 8016fae:	330e      	adds	r3, #14
 8016fb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016fb2:	6812      	ldr	r2, [r2, #0]
 8016fb4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016fb6:	697b      	ldr	r3, [r7, #20]
 8016fb8:	3318      	adds	r3, #24
 8016fba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016fbc:	6812      	ldr	r2, [r2, #0]
 8016fbe:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016fc0:	697b      	ldr	r3, [r7, #20]
 8016fc2:	2200      	movs	r2, #0
 8016fc4:	701a      	strb	r2, [r3, #0]
 8016fc6:	2200      	movs	r2, #0
 8016fc8:	f042 0201 	orr.w	r2, r2, #1
 8016fcc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016fce:	697b      	ldr	r3, [r7, #20]
 8016fd0:	2200      	movs	r2, #0
 8016fd2:	f042 0208 	orr.w	r2, r2, #8
 8016fd6:	709a      	strb	r2, [r3, #2]
 8016fd8:	2200      	movs	r2, #0
 8016fda:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016fdc:	697b      	ldr	r3, [r7, #20]
 8016fde:	2206      	movs	r2, #6
 8016fe0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016fe2:	697b      	ldr	r3, [r7, #20]
 8016fe4:	2204      	movs	r2, #4
 8016fe6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016fe8:	f640 0306 	movw	r3, #2054	; 0x806
 8016fec:	9300      	str	r3, [sp, #0]
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	68ba      	ldr	r2, [r7, #8]
 8016ff2:	69b9      	ldr	r1, [r7, #24]
 8016ff4:	68f8      	ldr	r0, [r7, #12]
 8016ff6:	f001 fb99 	bl	801872c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016ffa:	69b8      	ldr	r0, [r7, #24]
 8016ffc:	f7f5 ffaa 	bl	800cf54 <pbuf_free>
  p = NULL;
 8017000:	2300      	movs	r3, #0
 8017002:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017004:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017008:	4618      	mov	r0, r3
 801700a:	3720      	adds	r7, #32
 801700c:	46bd      	mov	sp, r7
 801700e:	bd80      	pop	{r7, pc}
 8017010:	0801d6fc 	.word	0x0801d6fc
 8017014:	0801d84c 	.word	0x0801d84c
 8017018:	0801d774 	.word	0x0801d774
 801701c:	0801d8fc 	.word	0x0801d8fc
 8017020:	0801d930 	.word	0x0801d930

08017024 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017024:	b580      	push	{r7, lr}
 8017026:	b088      	sub	sp, #32
 8017028:	af04      	add	r7, sp, #16
 801702a:	60f8      	str	r0, [r7, #12]
 801702c:	60b9      	str	r1, [r7, #8]
 801702e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017040:	2201      	movs	r2, #1
 8017042:	9203      	str	r2, [sp, #12]
 8017044:	68ba      	ldr	r2, [r7, #8]
 8017046:	9202      	str	r2, [sp, #8]
 8017048:	4a06      	ldr	r2, [pc, #24]	; (8017064 <etharp_request_dst+0x40>)
 801704a:	9201      	str	r2, [sp, #4]
 801704c:	9300      	str	r3, [sp, #0]
 801704e:	4603      	mov	r3, r0
 8017050:	687a      	ldr	r2, [r7, #4]
 8017052:	68f8      	ldr	r0, [r7, #12]
 8017054:	f7ff ff5a 	bl	8016f0c <etharp_raw>
 8017058:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801705a:	4618      	mov	r0, r3
 801705c:	3710      	adds	r7, #16
 801705e:	46bd      	mov	sp, r7
 8017060:	bd80      	pop	{r7, pc}
 8017062:	bf00      	nop
 8017064:	08028050 	.word	0x08028050

08017068 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017068:	b580      	push	{r7, lr}
 801706a:	b082      	sub	sp, #8
 801706c:	af00      	add	r7, sp, #0
 801706e:	6078      	str	r0, [r7, #4]
 8017070:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017072:	4a05      	ldr	r2, [pc, #20]	; (8017088 <etharp_request+0x20>)
 8017074:	6839      	ldr	r1, [r7, #0]
 8017076:	6878      	ldr	r0, [r7, #4]
 8017078:	f7ff ffd4 	bl	8017024 <etharp_request_dst>
 801707c:	4603      	mov	r3, r0
}
 801707e:	4618      	mov	r0, r3
 8017080:	3708      	adds	r7, #8
 8017082:	46bd      	mov	sp, r7
 8017084:	bd80      	pop	{r7, pc}
 8017086:	bf00      	nop
 8017088:	08028048 	.word	0x08028048

0801708c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801708c:	b580      	push	{r7, lr}
 801708e:	b08e      	sub	sp, #56	; 0x38
 8017090:	af04      	add	r7, sp, #16
 8017092:	6078      	str	r0, [r7, #4]
 8017094:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017096:	4b79      	ldr	r3, [pc, #484]	; (801727c <icmp_input+0x1f0>)
 8017098:	689b      	ldr	r3, [r3, #8]
 801709a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801709e:	781b      	ldrb	r3, [r3, #0]
 80170a0:	f003 030f 	and.w	r3, r3, #15
 80170a4:	b2db      	uxtb	r3, r3
 80170a6:	009b      	lsls	r3, r3, #2
 80170a8:	b2db      	uxtb	r3, r3
 80170aa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80170ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80170ae:	2b13      	cmp	r3, #19
 80170b0:	f240 80cd 	bls.w	801724e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	895b      	ldrh	r3, [r3, #10]
 80170b8:	2b03      	cmp	r3, #3
 80170ba:	f240 80ca 	bls.w	8017252 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	685b      	ldr	r3, [r3, #4]
 80170c2:	781b      	ldrb	r3, [r3, #0]
 80170c4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80170c8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	f000 80b7 	beq.w	8017240 <icmp_input+0x1b4>
 80170d2:	2b08      	cmp	r3, #8
 80170d4:	f040 80b7 	bne.w	8017246 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80170d8:	4b69      	ldr	r3, [pc, #420]	; (8017280 <icmp_input+0x1f4>)
 80170da:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80170dc:	4b67      	ldr	r3, [pc, #412]	; (801727c <icmp_input+0x1f0>)
 80170de:	695b      	ldr	r3, [r3, #20]
 80170e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80170e4:	2be0      	cmp	r3, #224	; 0xe0
 80170e6:	f000 80bb 	beq.w	8017260 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80170ea:	4b64      	ldr	r3, [pc, #400]	; (801727c <icmp_input+0x1f0>)
 80170ec:	695b      	ldr	r3, [r3, #20]
 80170ee:	4a63      	ldr	r2, [pc, #396]	; (801727c <icmp_input+0x1f0>)
 80170f0:	6812      	ldr	r2, [r2, #0]
 80170f2:	4611      	mov	r1, r2
 80170f4:	4618      	mov	r0, r3
 80170f6:	f000 fc0b 	bl	8017910 <ip4_addr_isbroadcast_u32>
 80170fa:	4603      	mov	r3, r0
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	f040 80b1 	bne.w	8017264 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	891b      	ldrh	r3, [r3, #8]
 8017106:	2b07      	cmp	r3, #7
 8017108:	f240 80a5 	bls.w	8017256 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801710c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801710e:	330e      	adds	r3, #14
 8017110:	4619      	mov	r1, r3
 8017112:	6878      	ldr	r0, [r7, #4]
 8017114:	f7f5 fe88 	bl	800ce28 <pbuf_add_header>
 8017118:	4603      	mov	r3, r0
 801711a:	2b00      	cmp	r3, #0
 801711c:	d04b      	beq.n	80171b6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	891a      	ldrh	r2, [r3, #8]
 8017122:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017124:	4413      	add	r3, r2
 8017126:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	891b      	ldrh	r3, [r3, #8]
 801712c:	8b7a      	ldrh	r2, [r7, #26]
 801712e:	429a      	cmp	r2, r3
 8017130:	f0c0 809a 	bcc.w	8017268 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017134:	8b7b      	ldrh	r3, [r7, #26]
 8017136:	f44f 7220 	mov.w	r2, #640	; 0x280
 801713a:	4619      	mov	r1, r3
 801713c:	200e      	movs	r0, #14
 801713e:	f7f5 fc25 	bl	800c98c <pbuf_alloc>
 8017142:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017144:	697b      	ldr	r3, [r7, #20]
 8017146:	2b00      	cmp	r3, #0
 8017148:	f000 8090 	beq.w	801726c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801714c:	697b      	ldr	r3, [r7, #20]
 801714e:	895b      	ldrh	r3, [r3, #10]
 8017150:	461a      	mov	r2, r3
 8017152:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017154:	3308      	adds	r3, #8
 8017156:	429a      	cmp	r2, r3
 8017158:	d203      	bcs.n	8017162 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801715a:	6978      	ldr	r0, [r7, #20]
 801715c:	f7f5 fefa 	bl	800cf54 <pbuf_free>
          goto icmperr;
 8017160:	e085      	b.n	801726e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017162:	697b      	ldr	r3, [r7, #20]
 8017164:	685b      	ldr	r3, [r3, #4]
 8017166:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017168:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801716a:	4618      	mov	r0, r3
 801716c:	f002 f824 	bl	80191b8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017170:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017172:	4619      	mov	r1, r3
 8017174:	6978      	ldr	r0, [r7, #20]
 8017176:	f7f5 fe67 	bl	800ce48 <pbuf_remove_header>
 801717a:	4603      	mov	r3, r0
 801717c:	2b00      	cmp	r3, #0
 801717e:	d009      	beq.n	8017194 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017180:	4b40      	ldr	r3, [pc, #256]	; (8017284 <icmp_input+0x1f8>)
 8017182:	22b6      	movs	r2, #182	; 0xb6
 8017184:	4940      	ldr	r1, [pc, #256]	; (8017288 <icmp_input+0x1fc>)
 8017186:	4841      	ldr	r0, [pc, #260]	; (801728c <icmp_input+0x200>)
 8017188:	f001 fe16 	bl	8018db8 <iprintf>
          pbuf_free(r);
 801718c:	6978      	ldr	r0, [r7, #20]
 801718e:	f7f5 fee1 	bl	800cf54 <pbuf_free>
          goto icmperr;
 8017192:	e06c      	b.n	801726e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017194:	6879      	ldr	r1, [r7, #4]
 8017196:	6978      	ldr	r0, [r7, #20]
 8017198:	f7f6 f810 	bl	800d1bc <pbuf_copy>
 801719c:	4603      	mov	r3, r0
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d003      	beq.n	80171aa <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80171a2:	6978      	ldr	r0, [r7, #20]
 80171a4:	f7f5 fed6 	bl	800cf54 <pbuf_free>
          goto icmperr;
 80171a8:	e061      	b.n	801726e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80171aa:	6878      	ldr	r0, [r7, #4]
 80171ac:	f7f5 fed2 	bl	800cf54 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80171b0:	697b      	ldr	r3, [r7, #20]
 80171b2:	607b      	str	r3, [r7, #4]
 80171b4:	e00f      	b.n	80171d6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80171b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80171b8:	330e      	adds	r3, #14
 80171ba:	4619      	mov	r1, r3
 80171bc:	6878      	ldr	r0, [r7, #4]
 80171be:	f7f5 fe43 	bl	800ce48 <pbuf_remove_header>
 80171c2:	4603      	mov	r3, r0
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d006      	beq.n	80171d6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80171c8:	4b2e      	ldr	r3, [pc, #184]	; (8017284 <icmp_input+0x1f8>)
 80171ca:	22c7      	movs	r2, #199	; 0xc7
 80171cc:	4930      	ldr	r1, [pc, #192]	; (8017290 <icmp_input+0x204>)
 80171ce:	482f      	ldr	r0, [pc, #188]	; (801728c <icmp_input+0x200>)
 80171d0:	f001 fdf2 	bl	8018db8 <iprintf>
          goto icmperr;
 80171d4:	e04b      	b.n	801726e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	685b      	ldr	r3, [r3, #4]
 80171da:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80171dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80171de:	4619      	mov	r1, r3
 80171e0:	6878      	ldr	r0, [r7, #4]
 80171e2:	f7f5 fe21 	bl	800ce28 <pbuf_add_header>
 80171e6:	4603      	mov	r3, r0
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	d12b      	bne.n	8017244 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	685b      	ldr	r3, [r3, #4]
 80171f0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80171f2:	69fb      	ldr	r3, [r7, #28]
 80171f4:	681a      	ldr	r2, [r3, #0]
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80171fa:	4b20      	ldr	r3, [pc, #128]	; (801727c <icmp_input+0x1f0>)
 80171fc:	691a      	ldr	r2, [r3, #16]
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017202:	693b      	ldr	r3, [r7, #16]
 8017204:	2200      	movs	r2, #0
 8017206:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8017208:	693b      	ldr	r3, [r7, #16]
 801720a:	2200      	movs	r2, #0
 801720c:	709a      	strb	r2, [r3, #2]
 801720e:	2200      	movs	r2, #0
 8017210:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017212:	68fb      	ldr	r3, [r7, #12]
 8017214:	22ff      	movs	r2, #255	; 0xff
 8017216:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	2200      	movs	r2, #0
 801721c:	729a      	strb	r2, [r3, #10]
 801721e:	2200      	movs	r2, #0
 8017220:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017222:	683b      	ldr	r3, [r7, #0]
 8017224:	9302      	str	r3, [sp, #8]
 8017226:	2301      	movs	r3, #1
 8017228:	9301      	str	r3, [sp, #4]
 801722a:	2300      	movs	r3, #0
 801722c:	9300      	str	r3, [sp, #0]
 801722e:	23ff      	movs	r3, #255	; 0xff
 8017230:	2200      	movs	r2, #0
 8017232:	69f9      	ldr	r1, [r7, #28]
 8017234:	6878      	ldr	r0, [r7, #4]
 8017236:	f000 fa93 	bl	8017760 <ip4_output_if>
 801723a:	4603      	mov	r3, r0
 801723c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801723e:	e001      	b.n	8017244 <icmp_input+0x1b8>
      break;
 8017240:	bf00      	nop
 8017242:	e000      	b.n	8017246 <icmp_input+0x1ba>
      break;
 8017244:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017246:	6878      	ldr	r0, [r7, #4]
 8017248:	f7f5 fe84 	bl	800cf54 <pbuf_free>
  return;
 801724c:	e013      	b.n	8017276 <icmp_input+0x1ea>
    goto lenerr;
 801724e:	bf00      	nop
 8017250:	e002      	b.n	8017258 <icmp_input+0x1cc>
    goto lenerr;
 8017252:	bf00      	nop
 8017254:	e000      	b.n	8017258 <icmp_input+0x1cc>
        goto lenerr;
 8017256:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017258:	6878      	ldr	r0, [r7, #4]
 801725a:	f7f5 fe7b 	bl	800cf54 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801725e:	e00a      	b.n	8017276 <icmp_input+0x1ea>
        goto icmperr;
 8017260:	bf00      	nop
 8017262:	e004      	b.n	801726e <icmp_input+0x1e2>
        goto icmperr;
 8017264:	bf00      	nop
 8017266:	e002      	b.n	801726e <icmp_input+0x1e2>
          goto icmperr;
 8017268:	bf00      	nop
 801726a:	e000      	b.n	801726e <icmp_input+0x1e2>
          goto icmperr;
 801726c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801726e:	6878      	ldr	r0, [r7, #4]
 8017270:	f7f5 fe70 	bl	800cf54 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017274:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017276:	3728      	adds	r7, #40	; 0x28
 8017278:	46bd      	mov	sp, r7
 801727a:	bd80      	pop	{r7, pc}
 801727c:	2000d7fc 	.word	0x2000d7fc
 8017280:	2000d810 	.word	0x2000d810
 8017284:	0801d974 	.word	0x0801d974
 8017288:	0801d9ac 	.word	0x0801d9ac
 801728c:	0801d9e4 	.word	0x0801d9e4
 8017290:	0801da0c 	.word	0x0801da0c

08017294 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017294:	b580      	push	{r7, lr}
 8017296:	b082      	sub	sp, #8
 8017298:	af00      	add	r7, sp, #0
 801729a:	6078      	str	r0, [r7, #4]
 801729c:	460b      	mov	r3, r1
 801729e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80172a0:	78fb      	ldrb	r3, [r7, #3]
 80172a2:	461a      	mov	r2, r3
 80172a4:	2103      	movs	r1, #3
 80172a6:	6878      	ldr	r0, [r7, #4]
 80172a8:	f000 f814 	bl	80172d4 <icmp_send_response>
}
 80172ac:	bf00      	nop
 80172ae:	3708      	adds	r7, #8
 80172b0:	46bd      	mov	sp, r7
 80172b2:	bd80      	pop	{r7, pc}

080172b4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80172b4:	b580      	push	{r7, lr}
 80172b6:	b082      	sub	sp, #8
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	6078      	str	r0, [r7, #4]
 80172bc:	460b      	mov	r3, r1
 80172be:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80172c0:	78fb      	ldrb	r3, [r7, #3]
 80172c2:	461a      	mov	r2, r3
 80172c4:	210b      	movs	r1, #11
 80172c6:	6878      	ldr	r0, [r7, #4]
 80172c8:	f000 f804 	bl	80172d4 <icmp_send_response>
}
 80172cc:	bf00      	nop
 80172ce:	3708      	adds	r7, #8
 80172d0:	46bd      	mov	sp, r7
 80172d2:	bd80      	pop	{r7, pc}

080172d4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80172d4:	b580      	push	{r7, lr}
 80172d6:	b08c      	sub	sp, #48	; 0x30
 80172d8:	af04      	add	r7, sp, #16
 80172da:	6078      	str	r0, [r7, #4]
 80172dc:	460b      	mov	r3, r1
 80172de:	70fb      	strb	r3, [r7, #3]
 80172e0:	4613      	mov	r3, r2
 80172e2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80172e4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80172e8:	2124      	movs	r1, #36	; 0x24
 80172ea:	2022      	movs	r0, #34	; 0x22
 80172ec:	f7f5 fb4e 	bl	800c98c <pbuf_alloc>
 80172f0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80172f2:	69fb      	ldr	r3, [r7, #28]
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d04c      	beq.n	8017392 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80172f8:	69fb      	ldr	r3, [r7, #28]
 80172fa:	895b      	ldrh	r3, [r3, #10]
 80172fc:	2b23      	cmp	r3, #35	; 0x23
 80172fe:	d806      	bhi.n	801730e <icmp_send_response+0x3a>
 8017300:	4b26      	ldr	r3, [pc, #152]	; (801739c <icmp_send_response+0xc8>)
 8017302:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017306:	4926      	ldr	r1, [pc, #152]	; (80173a0 <icmp_send_response+0xcc>)
 8017308:	4826      	ldr	r0, [pc, #152]	; (80173a4 <icmp_send_response+0xd0>)
 801730a:	f001 fd55 	bl	8018db8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	685b      	ldr	r3, [r3, #4]
 8017312:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017314:	69fb      	ldr	r3, [r7, #28]
 8017316:	685b      	ldr	r3, [r3, #4]
 8017318:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801731a:	697b      	ldr	r3, [r7, #20]
 801731c:	78fa      	ldrb	r2, [r7, #3]
 801731e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017320:	697b      	ldr	r3, [r7, #20]
 8017322:	78ba      	ldrb	r2, [r7, #2]
 8017324:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017326:	697b      	ldr	r3, [r7, #20]
 8017328:	2200      	movs	r2, #0
 801732a:	711a      	strb	r2, [r3, #4]
 801732c:	2200      	movs	r2, #0
 801732e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017330:	697b      	ldr	r3, [r7, #20]
 8017332:	2200      	movs	r2, #0
 8017334:	719a      	strb	r2, [r3, #6]
 8017336:	2200      	movs	r2, #0
 8017338:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801733a:	69fb      	ldr	r3, [r7, #28]
 801733c:	685b      	ldr	r3, [r3, #4]
 801733e:	f103 0008 	add.w	r0, r3, #8
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	685b      	ldr	r3, [r3, #4]
 8017346:	221c      	movs	r2, #28
 8017348:	4619      	mov	r1, r3
 801734a:	f001 ff35 	bl	80191b8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801734e:	69bb      	ldr	r3, [r7, #24]
 8017350:	68db      	ldr	r3, [r3, #12]
 8017352:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017354:	f107 030c 	add.w	r3, r7, #12
 8017358:	4618      	mov	r0, r3
 801735a:	f000 f825 	bl	80173a8 <ip4_route>
 801735e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017360:	693b      	ldr	r3, [r7, #16]
 8017362:	2b00      	cmp	r3, #0
 8017364:	d011      	beq.n	801738a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017366:	697b      	ldr	r3, [r7, #20]
 8017368:	2200      	movs	r2, #0
 801736a:	709a      	strb	r2, [r3, #2]
 801736c:	2200      	movs	r2, #0
 801736e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017370:	f107 020c 	add.w	r2, r7, #12
 8017374:	693b      	ldr	r3, [r7, #16]
 8017376:	9302      	str	r3, [sp, #8]
 8017378:	2301      	movs	r3, #1
 801737a:	9301      	str	r3, [sp, #4]
 801737c:	2300      	movs	r3, #0
 801737e:	9300      	str	r3, [sp, #0]
 8017380:	23ff      	movs	r3, #255	; 0xff
 8017382:	2100      	movs	r1, #0
 8017384:	69f8      	ldr	r0, [r7, #28]
 8017386:	f000 f9eb 	bl	8017760 <ip4_output_if>
  }
  pbuf_free(q);
 801738a:	69f8      	ldr	r0, [r7, #28]
 801738c:	f7f5 fde2 	bl	800cf54 <pbuf_free>
 8017390:	e000      	b.n	8017394 <icmp_send_response+0xc0>
    return;
 8017392:	bf00      	nop
}
 8017394:	3720      	adds	r7, #32
 8017396:	46bd      	mov	sp, r7
 8017398:	bd80      	pop	{r7, pc}
 801739a:	bf00      	nop
 801739c:	0801d974 	.word	0x0801d974
 80173a0:	0801da40 	.word	0x0801da40
 80173a4:	0801d9e4 	.word	0x0801d9e4

080173a8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80173a8:	b480      	push	{r7}
 80173aa:	b085      	sub	sp, #20
 80173ac:	af00      	add	r7, sp, #0
 80173ae:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80173b0:	4b33      	ldr	r3, [pc, #204]	; (8017480 <ip4_route+0xd8>)
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	60fb      	str	r3, [r7, #12]
 80173b6:	e036      	b.n	8017426 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80173b8:	68fb      	ldr	r3, [r7, #12]
 80173ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80173be:	f003 0301 	and.w	r3, r3, #1
 80173c2:	b2db      	uxtb	r3, r3
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d02b      	beq.n	8017420 <ip4_route+0x78>
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80173ce:	089b      	lsrs	r3, r3, #2
 80173d0:	f003 0301 	and.w	r3, r3, #1
 80173d4:	b2db      	uxtb	r3, r3
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d022      	beq.n	8017420 <ip4_route+0x78>
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	3304      	adds	r3, #4
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d01d      	beq.n	8017420 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	681a      	ldr	r2, [r3, #0]
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	3304      	adds	r3, #4
 80173ec:	681b      	ldr	r3, [r3, #0]
 80173ee:	405a      	eors	r2, r3
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	3308      	adds	r3, #8
 80173f4:	681b      	ldr	r3, [r3, #0]
 80173f6:	4013      	ands	r3, r2
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d101      	bne.n	8017400 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	e038      	b.n	8017472 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017406:	f003 0302 	and.w	r3, r3, #2
 801740a:	2b00      	cmp	r3, #0
 801740c:	d108      	bne.n	8017420 <ip4_route+0x78>
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	681a      	ldr	r2, [r3, #0]
 8017412:	68fb      	ldr	r3, [r7, #12]
 8017414:	330c      	adds	r3, #12
 8017416:	681b      	ldr	r3, [r3, #0]
 8017418:	429a      	cmp	r2, r3
 801741a:	d101      	bne.n	8017420 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	e028      	b.n	8017472 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	60fb      	str	r3, [r7, #12]
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	2b00      	cmp	r3, #0
 801742a:	d1c5      	bne.n	80173b8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801742c:	4b15      	ldr	r3, [pc, #84]	; (8017484 <ip4_route+0xdc>)
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	2b00      	cmp	r3, #0
 8017432:	d01a      	beq.n	801746a <ip4_route+0xc2>
 8017434:	4b13      	ldr	r3, [pc, #76]	; (8017484 <ip4_route+0xdc>)
 8017436:	681b      	ldr	r3, [r3, #0]
 8017438:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801743c:	f003 0301 	and.w	r3, r3, #1
 8017440:	2b00      	cmp	r3, #0
 8017442:	d012      	beq.n	801746a <ip4_route+0xc2>
 8017444:	4b0f      	ldr	r3, [pc, #60]	; (8017484 <ip4_route+0xdc>)
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801744c:	f003 0304 	and.w	r3, r3, #4
 8017450:	2b00      	cmp	r3, #0
 8017452:	d00a      	beq.n	801746a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017454:	4b0b      	ldr	r3, [pc, #44]	; (8017484 <ip4_route+0xdc>)
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	3304      	adds	r3, #4
 801745a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801745c:	2b00      	cmp	r3, #0
 801745e:	d004      	beq.n	801746a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	b2db      	uxtb	r3, r3
 8017466:	2b7f      	cmp	r3, #127	; 0x7f
 8017468:	d101      	bne.n	801746e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801746a:	2300      	movs	r3, #0
 801746c:	e001      	b.n	8017472 <ip4_route+0xca>
  }

  return netif_default;
 801746e:	4b05      	ldr	r3, [pc, #20]	; (8017484 <ip4_route+0xdc>)
 8017470:	681b      	ldr	r3, [r3, #0]
}
 8017472:	4618      	mov	r0, r3
 8017474:	3714      	adds	r7, #20
 8017476:	46bd      	mov	sp, r7
 8017478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801747c:	4770      	bx	lr
 801747e:	bf00      	nop
 8017480:	20010f64 	.word	0x20010f64
 8017484:	20010f68 	.word	0x20010f68

08017488 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017488:	b580      	push	{r7, lr}
 801748a:	b082      	sub	sp, #8
 801748c:	af00      	add	r7, sp, #0
 801748e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017496:	f003 0301 	and.w	r3, r3, #1
 801749a:	b2db      	uxtb	r3, r3
 801749c:	2b00      	cmp	r3, #0
 801749e:	d016      	beq.n	80174ce <ip4_input_accept+0x46>
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	3304      	adds	r3, #4
 80174a4:	681b      	ldr	r3, [r3, #0]
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d011      	beq.n	80174ce <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80174aa:	4b0b      	ldr	r3, [pc, #44]	; (80174d8 <ip4_input_accept+0x50>)
 80174ac:	695a      	ldr	r2, [r3, #20]
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	3304      	adds	r3, #4
 80174b2:	681b      	ldr	r3, [r3, #0]
 80174b4:	429a      	cmp	r2, r3
 80174b6:	d008      	beq.n	80174ca <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80174b8:	4b07      	ldr	r3, [pc, #28]	; (80174d8 <ip4_input_accept+0x50>)
 80174ba:	695b      	ldr	r3, [r3, #20]
 80174bc:	6879      	ldr	r1, [r7, #4]
 80174be:	4618      	mov	r0, r3
 80174c0:	f000 fa26 	bl	8017910 <ip4_addr_isbroadcast_u32>
 80174c4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d001      	beq.n	80174ce <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80174ca:	2301      	movs	r3, #1
 80174cc:	e000      	b.n	80174d0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80174ce:	2300      	movs	r3, #0
}
 80174d0:	4618      	mov	r0, r3
 80174d2:	3708      	adds	r7, #8
 80174d4:	46bd      	mov	sp, r7
 80174d6:	bd80      	pop	{r7, pc}
 80174d8:	2000d7fc 	.word	0x2000d7fc

080174dc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80174dc:	b580      	push	{r7, lr}
 80174de:	b088      	sub	sp, #32
 80174e0:	af00      	add	r7, sp, #0
 80174e2:	6078      	str	r0, [r7, #4]
 80174e4:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80174e6:	2301      	movs	r3, #1
 80174e8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	685b      	ldr	r3, [r3, #4]
 80174ee:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80174f0:	69fb      	ldr	r3, [r7, #28]
 80174f2:	781b      	ldrb	r3, [r3, #0]
 80174f4:	091b      	lsrs	r3, r3, #4
 80174f6:	b2db      	uxtb	r3, r3
 80174f8:	2b04      	cmp	r3, #4
 80174fa:	d004      	beq.n	8017506 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80174fc:	6878      	ldr	r0, [r7, #4]
 80174fe:	f7f5 fd29 	bl	800cf54 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017502:	2300      	movs	r3, #0
 8017504:	e123      	b.n	801774e <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017506:	69fb      	ldr	r3, [r7, #28]
 8017508:	781b      	ldrb	r3, [r3, #0]
 801750a:	f003 030f 	and.w	r3, r3, #15
 801750e:	b2db      	uxtb	r3, r3
 8017510:	009b      	lsls	r3, r3, #2
 8017512:	b2db      	uxtb	r3, r3
 8017514:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017516:	69fb      	ldr	r3, [r7, #28]
 8017518:	885b      	ldrh	r3, [r3, #2]
 801751a:	b29b      	uxth	r3, r3
 801751c:	4618      	mov	r0, r3
 801751e:	f7f4 f8e5 	bl	800b6ec <lwip_htons>
 8017522:	4603      	mov	r3, r0
 8017524:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	891b      	ldrh	r3, [r3, #8]
 801752a:	8a3a      	ldrh	r2, [r7, #16]
 801752c:	429a      	cmp	r2, r3
 801752e:	d204      	bcs.n	801753a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8017530:	8a3b      	ldrh	r3, [r7, #16]
 8017532:	4619      	mov	r1, r3
 8017534:	6878      	ldr	r0, [r7, #4]
 8017536:	f7f5 fb87 	bl	800cc48 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	895b      	ldrh	r3, [r3, #10]
 801753e:	8a7a      	ldrh	r2, [r7, #18]
 8017540:	429a      	cmp	r2, r3
 8017542:	d807      	bhi.n	8017554 <ip4_input+0x78>
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	891b      	ldrh	r3, [r3, #8]
 8017548:	8a3a      	ldrh	r2, [r7, #16]
 801754a:	429a      	cmp	r2, r3
 801754c:	d802      	bhi.n	8017554 <ip4_input+0x78>
 801754e:	8a7b      	ldrh	r3, [r7, #18]
 8017550:	2b13      	cmp	r3, #19
 8017552:	d804      	bhi.n	801755e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017554:	6878      	ldr	r0, [r7, #4]
 8017556:	f7f5 fcfd 	bl	800cf54 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801755a:	2300      	movs	r3, #0
 801755c:	e0f7      	b.n	801774e <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801755e:	69fb      	ldr	r3, [r7, #28]
 8017560:	691b      	ldr	r3, [r3, #16]
 8017562:	4a7d      	ldr	r2, [pc, #500]	; (8017758 <ip4_input+0x27c>)
 8017564:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017566:	69fb      	ldr	r3, [r7, #28]
 8017568:	68db      	ldr	r3, [r3, #12]
 801756a:	4a7b      	ldr	r2, [pc, #492]	; (8017758 <ip4_input+0x27c>)
 801756c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801756e:	4b7a      	ldr	r3, [pc, #488]	; (8017758 <ip4_input+0x27c>)
 8017570:	695b      	ldr	r3, [r3, #20]
 8017572:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017576:	2be0      	cmp	r3, #224	; 0xe0
 8017578:	d112      	bne.n	80175a0 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801757a:	683b      	ldr	r3, [r7, #0]
 801757c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017580:	f003 0301 	and.w	r3, r3, #1
 8017584:	b2db      	uxtb	r3, r3
 8017586:	2b00      	cmp	r3, #0
 8017588:	d007      	beq.n	801759a <ip4_input+0xbe>
 801758a:	683b      	ldr	r3, [r7, #0]
 801758c:	3304      	adds	r3, #4
 801758e:	681b      	ldr	r3, [r3, #0]
 8017590:	2b00      	cmp	r3, #0
 8017592:	d002      	beq.n	801759a <ip4_input+0xbe>
      netif = inp;
 8017594:	683b      	ldr	r3, [r7, #0]
 8017596:	61bb      	str	r3, [r7, #24]
 8017598:	e02a      	b.n	80175f0 <ip4_input+0x114>
    } else {
      netif = NULL;
 801759a:	2300      	movs	r3, #0
 801759c:	61bb      	str	r3, [r7, #24]
 801759e:	e027      	b.n	80175f0 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80175a0:	6838      	ldr	r0, [r7, #0]
 80175a2:	f7ff ff71 	bl	8017488 <ip4_input_accept>
 80175a6:	4603      	mov	r3, r0
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d002      	beq.n	80175b2 <ip4_input+0xd6>
      netif = inp;
 80175ac:	683b      	ldr	r3, [r7, #0]
 80175ae:	61bb      	str	r3, [r7, #24]
 80175b0:	e01e      	b.n	80175f0 <ip4_input+0x114>
    } else {
      netif = NULL;
 80175b2:	2300      	movs	r3, #0
 80175b4:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80175b6:	4b68      	ldr	r3, [pc, #416]	; (8017758 <ip4_input+0x27c>)
 80175b8:	695b      	ldr	r3, [r3, #20]
 80175ba:	b2db      	uxtb	r3, r3
 80175bc:	2b7f      	cmp	r3, #127	; 0x7f
 80175be:	d017      	beq.n	80175f0 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80175c0:	4b66      	ldr	r3, [pc, #408]	; (801775c <ip4_input+0x280>)
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	61bb      	str	r3, [r7, #24]
 80175c6:	e00e      	b.n	80175e6 <ip4_input+0x10a>
          if (netif == inp) {
 80175c8:	69ba      	ldr	r2, [r7, #24]
 80175ca:	683b      	ldr	r3, [r7, #0]
 80175cc:	429a      	cmp	r2, r3
 80175ce:	d006      	beq.n	80175de <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80175d0:	69b8      	ldr	r0, [r7, #24]
 80175d2:	f7ff ff59 	bl	8017488 <ip4_input_accept>
 80175d6:	4603      	mov	r3, r0
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d108      	bne.n	80175ee <ip4_input+0x112>
 80175dc:	e000      	b.n	80175e0 <ip4_input+0x104>
            continue;
 80175de:	bf00      	nop
        NETIF_FOREACH(netif) {
 80175e0:	69bb      	ldr	r3, [r7, #24]
 80175e2:	681b      	ldr	r3, [r3, #0]
 80175e4:	61bb      	str	r3, [r7, #24]
 80175e6:	69bb      	ldr	r3, [r7, #24]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d1ed      	bne.n	80175c8 <ip4_input+0xec>
 80175ec:	e000      	b.n	80175f0 <ip4_input+0x114>
            break;
 80175ee:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80175f0:	69bb      	ldr	r3, [r7, #24]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d111      	bne.n	801761a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80175f6:	69fb      	ldr	r3, [r7, #28]
 80175f8:	7a5b      	ldrb	r3, [r3, #9]
 80175fa:	2b11      	cmp	r3, #17
 80175fc:	d10d      	bne.n	801761a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80175fe:	8a7b      	ldrh	r3, [r7, #18]
 8017600:	69fa      	ldr	r2, [r7, #28]
 8017602:	4413      	add	r3, r2
 8017604:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	885b      	ldrh	r3, [r3, #2]
 801760a:	b29b      	uxth	r3, r3
 801760c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8017610:	d103      	bne.n	801761a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8017612:	683b      	ldr	r3, [r7, #0]
 8017614:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8017616:	2300      	movs	r3, #0
 8017618:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801761a:	697b      	ldr	r3, [r7, #20]
 801761c:	2b00      	cmp	r3, #0
 801761e:	d017      	beq.n	8017650 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8017620:	4b4d      	ldr	r3, [pc, #308]	; (8017758 <ip4_input+0x27c>)
 8017622:	691b      	ldr	r3, [r3, #16]
 8017624:	2b00      	cmp	r3, #0
 8017626:	d013      	beq.n	8017650 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017628:	4b4b      	ldr	r3, [pc, #300]	; (8017758 <ip4_input+0x27c>)
 801762a:	691b      	ldr	r3, [r3, #16]
 801762c:	6839      	ldr	r1, [r7, #0]
 801762e:	4618      	mov	r0, r3
 8017630:	f000 f96e 	bl	8017910 <ip4_addr_isbroadcast_u32>
 8017634:	4603      	mov	r3, r0
 8017636:	2b00      	cmp	r3, #0
 8017638:	d105      	bne.n	8017646 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801763a:	4b47      	ldr	r3, [pc, #284]	; (8017758 <ip4_input+0x27c>)
 801763c:	691b      	ldr	r3, [r3, #16]
 801763e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017642:	2be0      	cmp	r3, #224	; 0xe0
 8017644:	d104      	bne.n	8017650 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017646:	6878      	ldr	r0, [r7, #4]
 8017648:	f7f5 fc84 	bl	800cf54 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801764c:	2300      	movs	r3, #0
 801764e:	e07e      	b.n	801774e <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017650:	69bb      	ldr	r3, [r7, #24]
 8017652:	2b00      	cmp	r3, #0
 8017654:	d104      	bne.n	8017660 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017656:	6878      	ldr	r0, [r7, #4]
 8017658:	f7f5 fc7c 	bl	800cf54 <pbuf_free>
    return ERR_OK;
 801765c:	2300      	movs	r3, #0
 801765e:	e076      	b.n	801774e <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017660:	69fb      	ldr	r3, [r7, #28]
 8017662:	88db      	ldrh	r3, [r3, #6]
 8017664:	b29b      	uxth	r3, r3
 8017666:	461a      	mov	r2, r3
 8017668:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801766c:	4013      	ands	r3, r2
 801766e:	2b00      	cmp	r3, #0
 8017670:	d00b      	beq.n	801768a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017672:	6878      	ldr	r0, [r7, #4]
 8017674:	f000 fc92 	bl	8017f9c <ip4_reass>
 8017678:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	2b00      	cmp	r3, #0
 801767e:	d101      	bne.n	8017684 <ip4_input+0x1a8>
      return ERR_OK;
 8017680:	2300      	movs	r3, #0
 8017682:	e064      	b.n	801774e <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	685b      	ldr	r3, [r3, #4]
 8017688:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801768a:	4a33      	ldr	r2, [pc, #204]	; (8017758 <ip4_input+0x27c>)
 801768c:	69bb      	ldr	r3, [r7, #24]
 801768e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017690:	4a31      	ldr	r2, [pc, #196]	; (8017758 <ip4_input+0x27c>)
 8017692:	683b      	ldr	r3, [r7, #0]
 8017694:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017696:	4a30      	ldr	r2, [pc, #192]	; (8017758 <ip4_input+0x27c>)
 8017698:	69fb      	ldr	r3, [r7, #28]
 801769a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801769c:	69fb      	ldr	r3, [r7, #28]
 801769e:	781b      	ldrb	r3, [r3, #0]
 80176a0:	f003 030f 	and.w	r3, r3, #15
 80176a4:	b2db      	uxtb	r3, r3
 80176a6:	009b      	lsls	r3, r3, #2
 80176a8:	b2db      	uxtb	r3, r3
 80176aa:	b29a      	uxth	r2, r3
 80176ac:	4b2a      	ldr	r3, [pc, #168]	; (8017758 <ip4_input+0x27c>)
 80176ae:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80176b0:	8a7b      	ldrh	r3, [r7, #18]
 80176b2:	4619      	mov	r1, r3
 80176b4:	6878      	ldr	r0, [r7, #4]
 80176b6:	f7f5 fbc7 	bl	800ce48 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80176ba:	69fb      	ldr	r3, [r7, #28]
 80176bc:	7a5b      	ldrb	r3, [r3, #9]
 80176be:	2b11      	cmp	r3, #17
 80176c0:	d006      	beq.n	80176d0 <ip4_input+0x1f4>
 80176c2:	2b11      	cmp	r3, #17
 80176c4:	dc13      	bgt.n	80176ee <ip4_input+0x212>
 80176c6:	2b01      	cmp	r3, #1
 80176c8:	d00c      	beq.n	80176e4 <ip4_input+0x208>
 80176ca:	2b06      	cmp	r3, #6
 80176cc:	d005      	beq.n	80176da <ip4_input+0x1fe>
 80176ce:	e00e      	b.n	80176ee <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80176d0:	6839      	ldr	r1, [r7, #0]
 80176d2:	6878      	ldr	r0, [r7, #4]
 80176d4:	f7fc fade 	bl	8013c94 <udp_input>
        break;
 80176d8:	e026      	b.n	8017728 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80176da:	6839      	ldr	r1, [r7, #0]
 80176dc:	6878      	ldr	r0, [r7, #4]
 80176de:	f7f7 fe97 	bl	800f410 <tcp_input>
        break;
 80176e2:	e021      	b.n	8017728 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80176e4:	6839      	ldr	r1, [r7, #0]
 80176e6:	6878      	ldr	r0, [r7, #4]
 80176e8:	f7ff fcd0 	bl	801708c <icmp_input>
        break;
 80176ec:	e01c      	b.n	8017728 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80176ee:	4b1a      	ldr	r3, [pc, #104]	; (8017758 <ip4_input+0x27c>)
 80176f0:	695b      	ldr	r3, [r3, #20]
 80176f2:	69b9      	ldr	r1, [r7, #24]
 80176f4:	4618      	mov	r0, r3
 80176f6:	f000 f90b 	bl	8017910 <ip4_addr_isbroadcast_u32>
 80176fa:	4603      	mov	r3, r0
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d10f      	bne.n	8017720 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017700:	4b15      	ldr	r3, [pc, #84]	; (8017758 <ip4_input+0x27c>)
 8017702:	695b      	ldr	r3, [r3, #20]
 8017704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017708:	2be0      	cmp	r3, #224	; 0xe0
 801770a:	d009      	beq.n	8017720 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801770c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017710:	4619      	mov	r1, r3
 8017712:	6878      	ldr	r0, [r7, #4]
 8017714:	f7f5 fc0b 	bl	800cf2e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017718:	2102      	movs	r1, #2
 801771a:	6878      	ldr	r0, [r7, #4]
 801771c:	f7ff fdba 	bl	8017294 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017720:	6878      	ldr	r0, [r7, #4]
 8017722:	f7f5 fc17 	bl	800cf54 <pbuf_free>
        break;
 8017726:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017728:	4b0b      	ldr	r3, [pc, #44]	; (8017758 <ip4_input+0x27c>)
 801772a:	2200      	movs	r2, #0
 801772c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801772e:	4b0a      	ldr	r3, [pc, #40]	; (8017758 <ip4_input+0x27c>)
 8017730:	2200      	movs	r2, #0
 8017732:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017734:	4b08      	ldr	r3, [pc, #32]	; (8017758 <ip4_input+0x27c>)
 8017736:	2200      	movs	r2, #0
 8017738:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801773a:	4b07      	ldr	r3, [pc, #28]	; (8017758 <ip4_input+0x27c>)
 801773c:	2200      	movs	r2, #0
 801773e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017740:	4b05      	ldr	r3, [pc, #20]	; (8017758 <ip4_input+0x27c>)
 8017742:	2200      	movs	r2, #0
 8017744:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017746:	4b04      	ldr	r3, [pc, #16]	; (8017758 <ip4_input+0x27c>)
 8017748:	2200      	movs	r2, #0
 801774a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801774c:	2300      	movs	r3, #0
}
 801774e:	4618      	mov	r0, r3
 8017750:	3720      	adds	r7, #32
 8017752:	46bd      	mov	sp, r7
 8017754:	bd80      	pop	{r7, pc}
 8017756:	bf00      	nop
 8017758:	2000d7fc 	.word	0x2000d7fc
 801775c:	20010f64 	.word	0x20010f64

08017760 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017760:	b580      	push	{r7, lr}
 8017762:	b08a      	sub	sp, #40	; 0x28
 8017764:	af04      	add	r7, sp, #16
 8017766:	60f8      	str	r0, [r7, #12]
 8017768:	60b9      	str	r1, [r7, #8]
 801776a:	607a      	str	r2, [r7, #4]
 801776c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801776e:	68bb      	ldr	r3, [r7, #8]
 8017770:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	2b00      	cmp	r3, #0
 8017776:	d009      	beq.n	801778c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017778:	68bb      	ldr	r3, [r7, #8]
 801777a:	2b00      	cmp	r3, #0
 801777c:	d003      	beq.n	8017786 <ip4_output_if+0x26>
 801777e:	68bb      	ldr	r3, [r7, #8]
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	2b00      	cmp	r3, #0
 8017784:	d102      	bne.n	801778c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017788:	3304      	adds	r3, #4
 801778a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801778c:	78fa      	ldrb	r2, [r7, #3]
 801778e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017790:	9302      	str	r3, [sp, #8]
 8017792:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017796:	9301      	str	r3, [sp, #4]
 8017798:	f897 3020 	ldrb.w	r3, [r7, #32]
 801779c:	9300      	str	r3, [sp, #0]
 801779e:	4613      	mov	r3, r2
 80177a0:	687a      	ldr	r2, [r7, #4]
 80177a2:	6979      	ldr	r1, [r7, #20]
 80177a4:	68f8      	ldr	r0, [r7, #12]
 80177a6:	f000 f805 	bl	80177b4 <ip4_output_if_src>
 80177aa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80177ac:	4618      	mov	r0, r3
 80177ae:	3718      	adds	r7, #24
 80177b0:	46bd      	mov	sp, r7
 80177b2:	bd80      	pop	{r7, pc}

080177b4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80177b4:	b580      	push	{r7, lr}
 80177b6:	b088      	sub	sp, #32
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	60f8      	str	r0, [r7, #12]
 80177bc:	60b9      	str	r1, [r7, #8]
 80177be:	607a      	str	r2, [r7, #4]
 80177c0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80177c2:	68fb      	ldr	r3, [r7, #12]
 80177c4:	7b9b      	ldrb	r3, [r3, #14]
 80177c6:	2b01      	cmp	r3, #1
 80177c8:	d006      	beq.n	80177d8 <ip4_output_if_src+0x24>
 80177ca:	4b4b      	ldr	r3, [pc, #300]	; (80178f8 <ip4_output_if_src+0x144>)
 80177cc:	f44f 7255 	mov.w	r2, #852	; 0x354
 80177d0:	494a      	ldr	r1, [pc, #296]	; (80178fc <ip4_output_if_src+0x148>)
 80177d2:	484b      	ldr	r0, [pc, #300]	; (8017900 <ip4_output_if_src+0x14c>)
 80177d4:	f001 faf0 	bl	8018db8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d060      	beq.n	80178a0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80177de:	2314      	movs	r3, #20
 80177e0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80177e2:	2114      	movs	r1, #20
 80177e4:	68f8      	ldr	r0, [r7, #12]
 80177e6:	f7f5 fb1f 	bl	800ce28 <pbuf_add_header>
 80177ea:	4603      	mov	r3, r0
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d002      	beq.n	80177f6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80177f0:	f06f 0301 	mvn.w	r3, #1
 80177f4:	e07c      	b.n	80178f0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80177f6:	68fb      	ldr	r3, [r7, #12]
 80177f8:	685b      	ldr	r3, [r3, #4]
 80177fa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80177fc:	68fb      	ldr	r3, [r7, #12]
 80177fe:	895b      	ldrh	r3, [r3, #10]
 8017800:	2b13      	cmp	r3, #19
 8017802:	d806      	bhi.n	8017812 <ip4_output_if_src+0x5e>
 8017804:	4b3c      	ldr	r3, [pc, #240]	; (80178f8 <ip4_output_if_src+0x144>)
 8017806:	f44f 7262 	mov.w	r2, #904	; 0x388
 801780a:	493e      	ldr	r1, [pc, #248]	; (8017904 <ip4_output_if_src+0x150>)
 801780c:	483c      	ldr	r0, [pc, #240]	; (8017900 <ip4_output_if_src+0x14c>)
 801780e:	f001 fad3 	bl	8018db8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017812:	69fb      	ldr	r3, [r7, #28]
 8017814:	78fa      	ldrb	r2, [r7, #3]
 8017816:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017818:	69fb      	ldr	r3, [r7, #28]
 801781a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801781e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	681a      	ldr	r2, [r3, #0]
 8017824:	69fb      	ldr	r3, [r7, #28]
 8017826:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017828:	8b7b      	ldrh	r3, [r7, #26]
 801782a:	089b      	lsrs	r3, r3, #2
 801782c:	b29b      	uxth	r3, r3
 801782e:	b2db      	uxtb	r3, r3
 8017830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017834:	b2da      	uxtb	r2, r3
 8017836:	69fb      	ldr	r3, [r7, #28]
 8017838:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801783a:	69fb      	ldr	r3, [r7, #28]
 801783c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017840:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	891b      	ldrh	r3, [r3, #8]
 8017846:	4618      	mov	r0, r3
 8017848:	f7f3 ff50 	bl	800b6ec <lwip_htons>
 801784c:	4603      	mov	r3, r0
 801784e:	461a      	mov	r2, r3
 8017850:	69fb      	ldr	r3, [r7, #28]
 8017852:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017854:	69fb      	ldr	r3, [r7, #28]
 8017856:	2200      	movs	r2, #0
 8017858:	719a      	strb	r2, [r3, #6]
 801785a:	2200      	movs	r2, #0
 801785c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801785e:	4b2a      	ldr	r3, [pc, #168]	; (8017908 <ip4_output_if_src+0x154>)
 8017860:	881b      	ldrh	r3, [r3, #0]
 8017862:	4618      	mov	r0, r3
 8017864:	f7f3 ff42 	bl	800b6ec <lwip_htons>
 8017868:	4603      	mov	r3, r0
 801786a:	461a      	mov	r2, r3
 801786c:	69fb      	ldr	r3, [r7, #28]
 801786e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017870:	4b25      	ldr	r3, [pc, #148]	; (8017908 <ip4_output_if_src+0x154>)
 8017872:	881b      	ldrh	r3, [r3, #0]
 8017874:	3301      	adds	r3, #1
 8017876:	b29a      	uxth	r2, r3
 8017878:	4b23      	ldr	r3, [pc, #140]	; (8017908 <ip4_output_if_src+0x154>)
 801787a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801787c:	68bb      	ldr	r3, [r7, #8]
 801787e:	2b00      	cmp	r3, #0
 8017880:	d104      	bne.n	801788c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017882:	4b22      	ldr	r3, [pc, #136]	; (801790c <ip4_output_if_src+0x158>)
 8017884:	681a      	ldr	r2, [r3, #0]
 8017886:	69fb      	ldr	r3, [r7, #28]
 8017888:	60da      	str	r2, [r3, #12]
 801788a:	e003      	b.n	8017894 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801788c:	68bb      	ldr	r3, [r7, #8]
 801788e:	681a      	ldr	r2, [r3, #0]
 8017890:	69fb      	ldr	r3, [r7, #28]
 8017892:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017894:	69fb      	ldr	r3, [r7, #28]
 8017896:	2200      	movs	r2, #0
 8017898:	729a      	strb	r2, [r3, #10]
 801789a:	2200      	movs	r2, #0
 801789c:	72da      	strb	r2, [r3, #11]
 801789e:	e00f      	b.n	80178c0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80178a0:	68fb      	ldr	r3, [r7, #12]
 80178a2:	895b      	ldrh	r3, [r3, #10]
 80178a4:	2b13      	cmp	r3, #19
 80178a6:	d802      	bhi.n	80178ae <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80178a8:	f06f 0301 	mvn.w	r3, #1
 80178ac:	e020      	b.n	80178f0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	685b      	ldr	r3, [r3, #4]
 80178b2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80178b4:	69fb      	ldr	r3, [r7, #28]
 80178b6:	691b      	ldr	r3, [r3, #16]
 80178b8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80178ba:	f107 0314 	add.w	r3, r7, #20
 80178be:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80178c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d00c      	beq.n	80178e2 <ip4_output_if_src+0x12e>
 80178c8:	68fb      	ldr	r3, [r7, #12]
 80178ca:	891a      	ldrh	r2, [r3, #8]
 80178cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80178d0:	429a      	cmp	r2, r3
 80178d2:	d906      	bls.n	80178e2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80178d4:	687a      	ldr	r2, [r7, #4]
 80178d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80178d8:	68f8      	ldr	r0, [r7, #12]
 80178da:	f000 fd53 	bl	8018384 <ip4_frag>
 80178de:	4603      	mov	r3, r0
 80178e0:	e006      	b.n	80178f0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80178e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178e4:	695b      	ldr	r3, [r3, #20]
 80178e6:	687a      	ldr	r2, [r7, #4]
 80178e8:	68f9      	ldr	r1, [r7, #12]
 80178ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80178ec:	4798      	blx	r3
 80178ee:	4603      	mov	r3, r0
}
 80178f0:	4618      	mov	r0, r3
 80178f2:	3720      	adds	r7, #32
 80178f4:	46bd      	mov	sp, r7
 80178f6:	bd80      	pop	{r7, pc}
 80178f8:	0801da6c 	.word	0x0801da6c
 80178fc:	0801daa0 	.word	0x0801daa0
 8017900:	0801daac 	.word	0x0801daac
 8017904:	0801dad4 	.word	0x0801dad4
 8017908:	200110f6 	.word	0x200110f6
 801790c:	08028040 	.word	0x08028040

08017910 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017910:	b480      	push	{r7}
 8017912:	b085      	sub	sp, #20
 8017914:	af00      	add	r7, sp, #0
 8017916:	6078      	str	r0, [r7, #4]
 8017918:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017924:	d002      	beq.n	801792c <ip4_addr_isbroadcast_u32+0x1c>
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	2b00      	cmp	r3, #0
 801792a:	d101      	bne.n	8017930 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801792c:	2301      	movs	r3, #1
 801792e:	e02a      	b.n	8017986 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017930:	683b      	ldr	r3, [r7, #0]
 8017932:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017936:	f003 0302 	and.w	r3, r3, #2
 801793a:	2b00      	cmp	r3, #0
 801793c:	d101      	bne.n	8017942 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801793e:	2300      	movs	r3, #0
 8017940:	e021      	b.n	8017986 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017942:	683b      	ldr	r3, [r7, #0]
 8017944:	3304      	adds	r3, #4
 8017946:	681b      	ldr	r3, [r3, #0]
 8017948:	687a      	ldr	r2, [r7, #4]
 801794a:	429a      	cmp	r2, r3
 801794c:	d101      	bne.n	8017952 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801794e:	2300      	movs	r3, #0
 8017950:	e019      	b.n	8017986 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017952:	68fa      	ldr	r2, [r7, #12]
 8017954:	683b      	ldr	r3, [r7, #0]
 8017956:	3304      	adds	r3, #4
 8017958:	681b      	ldr	r3, [r3, #0]
 801795a:	405a      	eors	r2, r3
 801795c:	683b      	ldr	r3, [r7, #0]
 801795e:	3308      	adds	r3, #8
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	4013      	ands	r3, r2
 8017964:	2b00      	cmp	r3, #0
 8017966:	d10d      	bne.n	8017984 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017968:	683b      	ldr	r3, [r7, #0]
 801796a:	3308      	adds	r3, #8
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	43da      	mvns	r2, r3
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017974:	683b      	ldr	r3, [r7, #0]
 8017976:	3308      	adds	r3, #8
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801797c:	429a      	cmp	r2, r3
 801797e:	d101      	bne.n	8017984 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017980:	2301      	movs	r3, #1
 8017982:	e000      	b.n	8017986 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017984:	2300      	movs	r3, #0
  }
}
 8017986:	4618      	mov	r0, r3
 8017988:	3714      	adds	r7, #20
 801798a:	46bd      	mov	sp, r7
 801798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017990:	4770      	bx	lr
	...

08017994 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017994:	b580      	push	{r7, lr}
 8017996:	b084      	sub	sp, #16
 8017998:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801799a:	2300      	movs	r3, #0
 801799c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801799e:	4b12      	ldr	r3, [pc, #72]	; (80179e8 <ip_reass_tmr+0x54>)
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80179a4:	e018      	b.n	80179d8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80179a6:	68fb      	ldr	r3, [r7, #12]
 80179a8:	7fdb      	ldrb	r3, [r3, #31]
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d00b      	beq.n	80179c6 <ip_reass_tmr+0x32>
      r->timer--;
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	7fdb      	ldrb	r3, [r3, #31]
 80179b2:	3b01      	subs	r3, #1
 80179b4:	b2da      	uxtb	r2, r3
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	60fb      	str	r3, [r7, #12]
 80179c4:	e008      	b.n	80179d8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80179c6:	68fb      	ldr	r3, [r7, #12]
 80179c8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80179d0:	68b9      	ldr	r1, [r7, #8]
 80179d2:	6878      	ldr	r0, [r7, #4]
 80179d4:	f000 f80a 	bl	80179ec <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d1e3      	bne.n	80179a6 <ip_reass_tmr+0x12>
    }
  }
}
 80179de:	bf00      	nop
 80179e0:	bf00      	nop
 80179e2:	3710      	adds	r7, #16
 80179e4:	46bd      	mov	sp, r7
 80179e6:	bd80      	pop	{r7, pc}
 80179e8:	200110f8 	.word	0x200110f8

080179ec <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80179ec:	b580      	push	{r7, lr}
 80179ee:	b088      	sub	sp, #32
 80179f0:	af00      	add	r7, sp, #0
 80179f2:	6078      	str	r0, [r7, #4]
 80179f4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80179f6:	2300      	movs	r3, #0
 80179f8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80179fa:	683a      	ldr	r2, [r7, #0]
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	429a      	cmp	r2, r3
 8017a00:	d105      	bne.n	8017a0e <ip_reass_free_complete_datagram+0x22>
 8017a02:	4b45      	ldr	r3, [pc, #276]	; (8017b18 <ip_reass_free_complete_datagram+0x12c>)
 8017a04:	22ab      	movs	r2, #171	; 0xab
 8017a06:	4945      	ldr	r1, [pc, #276]	; (8017b1c <ip_reass_free_complete_datagram+0x130>)
 8017a08:	4845      	ldr	r0, [pc, #276]	; (8017b20 <ip_reass_free_complete_datagram+0x134>)
 8017a0a:	f001 f9d5 	bl	8018db8 <iprintf>
  if (prev != NULL) {
 8017a0e:	683b      	ldr	r3, [r7, #0]
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d00a      	beq.n	8017a2a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017a14:	683b      	ldr	r3, [r7, #0]
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	687a      	ldr	r2, [r7, #4]
 8017a1a:	429a      	cmp	r2, r3
 8017a1c:	d005      	beq.n	8017a2a <ip_reass_free_complete_datagram+0x3e>
 8017a1e:	4b3e      	ldr	r3, [pc, #248]	; (8017b18 <ip_reass_free_complete_datagram+0x12c>)
 8017a20:	22ad      	movs	r2, #173	; 0xad
 8017a22:	4940      	ldr	r1, [pc, #256]	; (8017b24 <ip_reass_free_complete_datagram+0x138>)
 8017a24:	483e      	ldr	r0, [pc, #248]	; (8017b20 <ip_reass_free_complete_datagram+0x134>)
 8017a26:	f001 f9c7 	bl	8018db8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	685b      	ldr	r3, [r3, #4]
 8017a2e:	685b      	ldr	r3, [r3, #4]
 8017a30:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017a32:	697b      	ldr	r3, [r7, #20]
 8017a34:	889b      	ldrh	r3, [r3, #4]
 8017a36:	b29b      	uxth	r3, r3
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d12a      	bne.n	8017a92 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	685b      	ldr	r3, [r3, #4]
 8017a40:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017a42:	697b      	ldr	r3, [r7, #20]
 8017a44:	681a      	ldr	r2, [r3, #0]
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017a4a:	69bb      	ldr	r3, [r7, #24]
 8017a4c:	6858      	ldr	r0, [r3, #4]
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	3308      	adds	r3, #8
 8017a52:	2214      	movs	r2, #20
 8017a54:	4619      	mov	r1, r3
 8017a56:	f001 fbaf 	bl	80191b8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017a5a:	2101      	movs	r1, #1
 8017a5c:	69b8      	ldr	r0, [r7, #24]
 8017a5e:	f7ff fc29 	bl	80172b4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017a62:	69b8      	ldr	r0, [r7, #24]
 8017a64:	f7f5 fb04 	bl	800d070 <pbuf_clen>
 8017a68:	4603      	mov	r3, r0
 8017a6a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017a6c:	8bfa      	ldrh	r2, [r7, #30]
 8017a6e:	8a7b      	ldrh	r3, [r7, #18]
 8017a70:	4413      	add	r3, r2
 8017a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017a76:	db05      	blt.n	8017a84 <ip_reass_free_complete_datagram+0x98>
 8017a78:	4b27      	ldr	r3, [pc, #156]	; (8017b18 <ip_reass_free_complete_datagram+0x12c>)
 8017a7a:	22bc      	movs	r2, #188	; 0xbc
 8017a7c:	492a      	ldr	r1, [pc, #168]	; (8017b28 <ip_reass_free_complete_datagram+0x13c>)
 8017a7e:	4828      	ldr	r0, [pc, #160]	; (8017b20 <ip_reass_free_complete_datagram+0x134>)
 8017a80:	f001 f99a 	bl	8018db8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017a84:	8bfa      	ldrh	r2, [r7, #30]
 8017a86:	8a7b      	ldrh	r3, [r7, #18]
 8017a88:	4413      	add	r3, r2
 8017a8a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017a8c:	69b8      	ldr	r0, [r7, #24]
 8017a8e:	f7f5 fa61 	bl	800cf54 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	685b      	ldr	r3, [r3, #4]
 8017a96:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017a98:	e01f      	b.n	8017ada <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017a9a:	69bb      	ldr	r3, [r7, #24]
 8017a9c:	685b      	ldr	r3, [r3, #4]
 8017a9e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017aa0:	69bb      	ldr	r3, [r7, #24]
 8017aa2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017aa4:	697b      	ldr	r3, [r7, #20]
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017aaa:	68f8      	ldr	r0, [r7, #12]
 8017aac:	f7f5 fae0 	bl	800d070 <pbuf_clen>
 8017ab0:	4603      	mov	r3, r0
 8017ab2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017ab4:	8bfa      	ldrh	r2, [r7, #30]
 8017ab6:	8a7b      	ldrh	r3, [r7, #18]
 8017ab8:	4413      	add	r3, r2
 8017aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017abe:	db05      	blt.n	8017acc <ip_reass_free_complete_datagram+0xe0>
 8017ac0:	4b15      	ldr	r3, [pc, #84]	; (8017b18 <ip_reass_free_complete_datagram+0x12c>)
 8017ac2:	22cc      	movs	r2, #204	; 0xcc
 8017ac4:	4918      	ldr	r1, [pc, #96]	; (8017b28 <ip_reass_free_complete_datagram+0x13c>)
 8017ac6:	4816      	ldr	r0, [pc, #88]	; (8017b20 <ip_reass_free_complete_datagram+0x134>)
 8017ac8:	f001 f976 	bl	8018db8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017acc:	8bfa      	ldrh	r2, [r7, #30]
 8017ace:	8a7b      	ldrh	r3, [r7, #18]
 8017ad0:	4413      	add	r3, r2
 8017ad2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017ad4:	68f8      	ldr	r0, [r7, #12]
 8017ad6:	f7f5 fa3d 	bl	800cf54 <pbuf_free>
  while (p != NULL) {
 8017ada:	69bb      	ldr	r3, [r7, #24]
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d1dc      	bne.n	8017a9a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017ae0:	6839      	ldr	r1, [r7, #0]
 8017ae2:	6878      	ldr	r0, [r7, #4]
 8017ae4:	f000 f8c2 	bl	8017c6c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017ae8:	4b10      	ldr	r3, [pc, #64]	; (8017b2c <ip_reass_free_complete_datagram+0x140>)
 8017aea:	881b      	ldrh	r3, [r3, #0]
 8017aec:	8bfa      	ldrh	r2, [r7, #30]
 8017aee:	429a      	cmp	r2, r3
 8017af0:	d905      	bls.n	8017afe <ip_reass_free_complete_datagram+0x112>
 8017af2:	4b09      	ldr	r3, [pc, #36]	; (8017b18 <ip_reass_free_complete_datagram+0x12c>)
 8017af4:	22d2      	movs	r2, #210	; 0xd2
 8017af6:	490e      	ldr	r1, [pc, #56]	; (8017b30 <ip_reass_free_complete_datagram+0x144>)
 8017af8:	4809      	ldr	r0, [pc, #36]	; (8017b20 <ip_reass_free_complete_datagram+0x134>)
 8017afa:	f001 f95d 	bl	8018db8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017afe:	4b0b      	ldr	r3, [pc, #44]	; (8017b2c <ip_reass_free_complete_datagram+0x140>)
 8017b00:	881a      	ldrh	r2, [r3, #0]
 8017b02:	8bfb      	ldrh	r3, [r7, #30]
 8017b04:	1ad3      	subs	r3, r2, r3
 8017b06:	b29a      	uxth	r2, r3
 8017b08:	4b08      	ldr	r3, [pc, #32]	; (8017b2c <ip_reass_free_complete_datagram+0x140>)
 8017b0a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017b0c:	8bfb      	ldrh	r3, [r7, #30]
}
 8017b0e:	4618      	mov	r0, r3
 8017b10:	3720      	adds	r7, #32
 8017b12:	46bd      	mov	sp, r7
 8017b14:	bd80      	pop	{r7, pc}
 8017b16:	bf00      	nop
 8017b18:	0801db04 	.word	0x0801db04
 8017b1c:	0801db40 	.word	0x0801db40
 8017b20:	0801db4c 	.word	0x0801db4c
 8017b24:	0801db74 	.word	0x0801db74
 8017b28:	0801db88 	.word	0x0801db88
 8017b2c:	200110fc 	.word	0x200110fc
 8017b30:	0801dba8 	.word	0x0801dba8

08017b34 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017b34:	b580      	push	{r7, lr}
 8017b36:	b08a      	sub	sp, #40	; 0x28
 8017b38:	af00      	add	r7, sp, #0
 8017b3a:	6078      	str	r0, [r7, #4]
 8017b3c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017b3e:	2300      	movs	r3, #0
 8017b40:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017b42:	2300      	movs	r3, #0
 8017b44:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017b46:	2300      	movs	r3, #0
 8017b48:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017b4a:	2300      	movs	r3, #0
 8017b4c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017b4e:	2300      	movs	r3, #0
 8017b50:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017b52:	4b28      	ldr	r3, [pc, #160]	; (8017bf4 <ip_reass_remove_oldest_datagram+0xc0>)
 8017b54:	681b      	ldr	r3, [r3, #0]
 8017b56:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017b58:	e030      	b.n	8017bbc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b5c:	695a      	ldr	r2, [r3, #20]
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	68db      	ldr	r3, [r3, #12]
 8017b62:	429a      	cmp	r2, r3
 8017b64:	d10c      	bne.n	8017b80 <ip_reass_remove_oldest_datagram+0x4c>
 8017b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b68:	699a      	ldr	r2, [r3, #24]
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	691b      	ldr	r3, [r3, #16]
 8017b6e:	429a      	cmp	r2, r3
 8017b70:	d106      	bne.n	8017b80 <ip_reass_remove_oldest_datagram+0x4c>
 8017b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b74:	899a      	ldrh	r2, [r3, #12]
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	889b      	ldrh	r3, [r3, #4]
 8017b7a:	b29b      	uxth	r3, r3
 8017b7c:	429a      	cmp	r2, r3
 8017b7e:	d014      	beq.n	8017baa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017b80:	693b      	ldr	r3, [r7, #16]
 8017b82:	3301      	adds	r3, #1
 8017b84:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017b86:	6a3b      	ldr	r3, [r7, #32]
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d104      	bne.n	8017b96 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b8e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017b90:	69fb      	ldr	r3, [r7, #28]
 8017b92:	61bb      	str	r3, [r7, #24]
 8017b94:	e009      	b.n	8017baa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b98:	7fda      	ldrb	r2, [r3, #31]
 8017b9a:	6a3b      	ldr	r3, [r7, #32]
 8017b9c:	7fdb      	ldrb	r3, [r3, #31]
 8017b9e:	429a      	cmp	r2, r3
 8017ba0:	d803      	bhi.n	8017baa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ba4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017ba6:	69fb      	ldr	r3, [r7, #28]
 8017ba8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d001      	beq.n	8017bb6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bb4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bb8:	681b      	ldr	r3, [r3, #0]
 8017bba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d1cb      	bne.n	8017b5a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017bc2:	6a3b      	ldr	r3, [r7, #32]
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d008      	beq.n	8017bda <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017bc8:	69b9      	ldr	r1, [r7, #24]
 8017bca:	6a38      	ldr	r0, [r7, #32]
 8017bcc:	f7ff ff0e 	bl	80179ec <ip_reass_free_complete_datagram>
 8017bd0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017bd2:	697a      	ldr	r2, [r7, #20]
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	4413      	add	r3, r2
 8017bd8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017bda:	697a      	ldr	r2, [r7, #20]
 8017bdc:	683b      	ldr	r3, [r7, #0]
 8017bde:	429a      	cmp	r2, r3
 8017be0:	da02      	bge.n	8017be8 <ip_reass_remove_oldest_datagram+0xb4>
 8017be2:	693b      	ldr	r3, [r7, #16]
 8017be4:	2b01      	cmp	r3, #1
 8017be6:	dcac      	bgt.n	8017b42 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017be8:	697b      	ldr	r3, [r7, #20]
}
 8017bea:	4618      	mov	r0, r3
 8017bec:	3728      	adds	r7, #40	; 0x28
 8017bee:	46bd      	mov	sp, r7
 8017bf0:	bd80      	pop	{r7, pc}
 8017bf2:	bf00      	nop
 8017bf4:	200110f8 	.word	0x200110f8

08017bf8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017bf8:	b580      	push	{r7, lr}
 8017bfa:	b084      	sub	sp, #16
 8017bfc:	af00      	add	r7, sp, #0
 8017bfe:	6078      	str	r0, [r7, #4]
 8017c00:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017c02:	2004      	movs	r0, #4
 8017c04:	f7f4 fa80 	bl	800c108 <memp_malloc>
 8017c08:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d110      	bne.n	8017c32 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017c10:	6839      	ldr	r1, [r7, #0]
 8017c12:	6878      	ldr	r0, [r7, #4]
 8017c14:	f7ff ff8e 	bl	8017b34 <ip_reass_remove_oldest_datagram>
 8017c18:	4602      	mov	r2, r0
 8017c1a:	683b      	ldr	r3, [r7, #0]
 8017c1c:	4293      	cmp	r3, r2
 8017c1e:	dc03      	bgt.n	8017c28 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017c20:	2004      	movs	r0, #4
 8017c22:	f7f4 fa71 	bl	800c108 <memp_malloc>
 8017c26:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017c28:	68fb      	ldr	r3, [r7, #12]
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d101      	bne.n	8017c32 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017c2e:	2300      	movs	r3, #0
 8017c30:	e016      	b.n	8017c60 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017c32:	2220      	movs	r2, #32
 8017c34:	2100      	movs	r1, #0
 8017c36:	68f8      	ldr	r0, [r7, #12]
 8017c38:	f001 f95d 	bl	8018ef6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	220f      	movs	r2, #15
 8017c40:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017c42:	4b09      	ldr	r3, [pc, #36]	; (8017c68 <ip_reass_enqueue_new_datagram+0x70>)
 8017c44:	681a      	ldr	r2, [r3, #0]
 8017c46:	68fb      	ldr	r3, [r7, #12]
 8017c48:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017c4a:	4a07      	ldr	r2, [pc, #28]	; (8017c68 <ip_reass_enqueue_new_datagram+0x70>)
 8017c4c:	68fb      	ldr	r3, [r7, #12]
 8017c4e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	3308      	adds	r3, #8
 8017c54:	2214      	movs	r2, #20
 8017c56:	6879      	ldr	r1, [r7, #4]
 8017c58:	4618      	mov	r0, r3
 8017c5a:	f001 faad 	bl	80191b8 <memcpy>
  return ipr;
 8017c5e:	68fb      	ldr	r3, [r7, #12]
}
 8017c60:	4618      	mov	r0, r3
 8017c62:	3710      	adds	r7, #16
 8017c64:	46bd      	mov	sp, r7
 8017c66:	bd80      	pop	{r7, pc}
 8017c68:	200110f8 	.word	0x200110f8

08017c6c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017c6c:	b580      	push	{r7, lr}
 8017c6e:	b082      	sub	sp, #8
 8017c70:	af00      	add	r7, sp, #0
 8017c72:	6078      	str	r0, [r7, #4]
 8017c74:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017c76:	4b10      	ldr	r3, [pc, #64]	; (8017cb8 <ip_reass_dequeue_datagram+0x4c>)
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	687a      	ldr	r2, [r7, #4]
 8017c7c:	429a      	cmp	r2, r3
 8017c7e:	d104      	bne.n	8017c8a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	681b      	ldr	r3, [r3, #0]
 8017c84:	4a0c      	ldr	r2, [pc, #48]	; (8017cb8 <ip_reass_dequeue_datagram+0x4c>)
 8017c86:	6013      	str	r3, [r2, #0]
 8017c88:	e00d      	b.n	8017ca6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017c8a:	683b      	ldr	r3, [r7, #0]
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	d106      	bne.n	8017c9e <ip_reass_dequeue_datagram+0x32>
 8017c90:	4b0a      	ldr	r3, [pc, #40]	; (8017cbc <ip_reass_dequeue_datagram+0x50>)
 8017c92:	f240 1245 	movw	r2, #325	; 0x145
 8017c96:	490a      	ldr	r1, [pc, #40]	; (8017cc0 <ip_reass_dequeue_datagram+0x54>)
 8017c98:	480a      	ldr	r0, [pc, #40]	; (8017cc4 <ip_reass_dequeue_datagram+0x58>)
 8017c9a:	f001 f88d 	bl	8018db8 <iprintf>
    prev->next = ipr->next;
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	681a      	ldr	r2, [r3, #0]
 8017ca2:	683b      	ldr	r3, [r7, #0]
 8017ca4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017ca6:	6879      	ldr	r1, [r7, #4]
 8017ca8:	2004      	movs	r0, #4
 8017caa:	f7f4 faa3 	bl	800c1f4 <memp_free>
}
 8017cae:	bf00      	nop
 8017cb0:	3708      	adds	r7, #8
 8017cb2:	46bd      	mov	sp, r7
 8017cb4:	bd80      	pop	{r7, pc}
 8017cb6:	bf00      	nop
 8017cb8:	200110f8 	.word	0x200110f8
 8017cbc:	0801db04 	.word	0x0801db04
 8017cc0:	0801dbcc 	.word	0x0801dbcc
 8017cc4:	0801db4c 	.word	0x0801db4c

08017cc8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017cc8:	b580      	push	{r7, lr}
 8017cca:	b08c      	sub	sp, #48	; 0x30
 8017ccc:	af00      	add	r7, sp, #0
 8017cce:	60f8      	str	r0, [r7, #12]
 8017cd0:	60b9      	str	r1, [r7, #8]
 8017cd2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017cd4:	2300      	movs	r3, #0
 8017cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017cd8:	2301      	movs	r3, #1
 8017cda:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017cdc:	68bb      	ldr	r3, [r7, #8]
 8017cde:	685b      	ldr	r3, [r3, #4]
 8017ce0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017ce2:	69fb      	ldr	r3, [r7, #28]
 8017ce4:	885b      	ldrh	r3, [r3, #2]
 8017ce6:	b29b      	uxth	r3, r3
 8017ce8:	4618      	mov	r0, r3
 8017cea:	f7f3 fcff 	bl	800b6ec <lwip_htons>
 8017cee:	4603      	mov	r3, r0
 8017cf0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017cf2:	69fb      	ldr	r3, [r7, #28]
 8017cf4:	781b      	ldrb	r3, [r3, #0]
 8017cf6:	f003 030f 	and.w	r3, r3, #15
 8017cfa:	b2db      	uxtb	r3, r3
 8017cfc:	009b      	lsls	r3, r3, #2
 8017cfe:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017d00:	7e7b      	ldrb	r3, [r7, #25]
 8017d02:	b29b      	uxth	r3, r3
 8017d04:	8b7a      	ldrh	r2, [r7, #26]
 8017d06:	429a      	cmp	r2, r3
 8017d08:	d202      	bcs.n	8017d10 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8017d0e:	e135      	b.n	8017f7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017d10:	7e7b      	ldrb	r3, [r7, #25]
 8017d12:	b29b      	uxth	r3, r3
 8017d14:	8b7a      	ldrh	r2, [r7, #26]
 8017d16:	1ad3      	subs	r3, r2, r3
 8017d18:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017d1a:	69fb      	ldr	r3, [r7, #28]
 8017d1c:	88db      	ldrh	r3, [r3, #6]
 8017d1e:	b29b      	uxth	r3, r3
 8017d20:	4618      	mov	r0, r3
 8017d22:	f7f3 fce3 	bl	800b6ec <lwip_htons>
 8017d26:	4603      	mov	r3, r0
 8017d28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017d2c:	b29b      	uxth	r3, r3
 8017d2e:	00db      	lsls	r3, r3, #3
 8017d30:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017d32:	68bb      	ldr	r3, [r7, #8]
 8017d34:	685b      	ldr	r3, [r3, #4]
 8017d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d3a:	2200      	movs	r2, #0
 8017d3c:	701a      	strb	r2, [r3, #0]
 8017d3e:	2200      	movs	r2, #0
 8017d40:	705a      	strb	r2, [r3, #1]
 8017d42:	2200      	movs	r2, #0
 8017d44:	709a      	strb	r2, [r3, #2]
 8017d46:	2200      	movs	r2, #0
 8017d48:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d4c:	8afa      	ldrh	r2, [r7, #22]
 8017d4e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017d50:	8afa      	ldrh	r2, [r7, #22]
 8017d52:	8b7b      	ldrh	r3, [r7, #26]
 8017d54:	4413      	add	r3, r2
 8017d56:	b29a      	uxth	r2, r3
 8017d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d5a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d5e:	88db      	ldrh	r3, [r3, #6]
 8017d60:	b29b      	uxth	r3, r3
 8017d62:	8afa      	ldrh	r2, [r7, #22]
 8017d64:	429a      	cmp	r2, r3
 8017d66:	d902      	bls.n	8017d6e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017d68:	f04f 33ff 	mov.w	r3, #4294967295
 8017d6c:	e106      	b.n	8017f7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	685b      	ldr	r3, [r3, #4]
 8017d72:	627b      	str	r3, [r7, #36]	; 0x24
 8017d74:	e068      	b.n	8017e48 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d78:	685b      	ldr	r3, [r3, #4]
 8017d7a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d7e:	889b      	ldrh	r3, [r3, #4]
 8017d80:	b29a      	uxth	r2, r3
 8017d82:	693b      	ldr	r3, [r7, #16]
 8017d84:	889b      	ldrh	r3, [r3, #4]
 8017d86:	b29b      	uxth	r3, r3
 8017d88:	429a      	cmp	r2, r3
 8017d8a:	d235      	bcs.n	8017df8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d90:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d020      	beq.n	8017dda <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d9a:	889b      	ldrh	r3, [r3, #4]
 8017d9c:	b29a      	uxth	r2, r3
 8017d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017da0:	88db      	ldrh	r3, [r3, #6]
 8017da2:	b29b      	uxth	r3, r3
 8017da4:	429a      	cmp	r2, r3
 8017da6:	d307      	bcc.n	8017db8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017daa:	88db      	ldrh	r3, [r3, #6]
 8017dac:	b29a      	uxth	r2, r3
 8017dae:	693b      	ldr	r3, [r7, #16]
 8017db0:	889b      	ldrh	r3, [r3, #4]
 8017db2:	b29b      	uxth	r3, r3
 8017db4:	429a      	cmp	r2, r3
 8017db6:	d902      	bls.n	8017dbe <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017db8:	f04f 33ff 	mov.w	r3, #4294967295
 8017dbc:	e0de      	b.n	8017f7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dc0:	68ba      	ldr	r2, [r7, #8]
 8017dc2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dc6:	88db      	ldrh	r3, [r3, #6]
 8017dc8:	b29a      	uxth	r2, r3
 8017dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dcc:	889b      	ldrh	r3, [r3, #4]
 8017dce:	b29b      	uxth	r3, r3
 8017dd0:	429a      	cmp	r2, r3
 8017dd2:	d03d      	beq.n	8017e50 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017dd4:	2300      	movs	r3, #0
 8017dd6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017dd8:	e03a      	b.n	8017e50 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ddc:	88db      	ldrh	r3, [r3, #6]
 8017dde:	b29a      	uxth	r2, r3
 8017de0:	693b      	ldr	r3, [r7, #16]
 8017de2:	889b      	ldrh	r3, [r3, #4]
 8017de4:	b29b      	uxth	r3, r3
 8017de6:	429a      	cmp	r2, r3
 8017de8:	d902      	bls.n	8017df0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017dea:	f04f 33ff 	mov.w	r3, #4294967295
 8017dee:	e0c5      	b.n	8017f7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017df0:	68fb      	ldr	r3, [r7, #12]
 8017df2:	68ba      	ldr	r2, [r7, #8]
 8017df4:	605a      	str	r2, [r3, #4]
      break;
 8017df6:	e02b      	b.n	8017e50 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dfa:	889b      	ldrh	r3, [r3, #4]
 8017dfc:	b29a      	uxth	r2, r3
 8017dfe:	693b      	ldr	r3, [r7, #16]
 8017e00:	889b      	ldrh	r3, [r3, #4]
 8017e02:	b29b      	uxth	r3, r3
 8017e04:	429a      	cmp	r2, r3
 8017e06:	d102      	bne.n	8017e0e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017e08:	f04f 33ff 	mov.w	r3, #4294967295
 8017e0c:	e0b6      	b.n	8017f7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e10:	889b      	ldrh	r3, [r3, #4]
 8017e12:	b29a      	uxth	r2, r3
 8017e14:	693b      	ldr	r3, [r7, #16]
 8017e16:	88db      	ldrh	r3, [r3, #6]
 8017e18:	b29b      	uxth	r3, r3
 8017e1a:	429a      	cmp	r2, r3
 8017e1c:	d202      	bcs.n	8017e24 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8017e22:	e0ab      	b.n	8017f7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d009      	beq.n	8017e3e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e2c:	88db      	ldrh	r3, [r3, #6]
 8017e2e:	b29a      	uxth	r2, r3
 8017e30:	693b      	ldr	r3, [r7, #16]
 8017e32:	889b      	ldrh	r3, [r3, #4]
 8017e34:	b29b      	uxth	r3, r3
 8017e36:	429a      	cmp	r2, r3
 8017e38:	d001      	beq.n	8017e3e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017e3a:	2300      	movs	r3, #0
 8017e3c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017e3e:	693b      	ldr	r3, [r7, #16]
 8017e40:	681b      	ldr	r3, [r3, #0]
 8017e42:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017e44:	693b      	ldr	r3, [r7, #16]
 8017e46:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d193      	bne.n	8017d76 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017e4e:	e000      	b.n	8017e52 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017e50:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d12d      	bne.n	8017eb4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d01c      	beq.n	8017e98 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e60:	88db      	ldrh	r3, [r3, #6]
 8017e62:	b29a      	uxth	r2, r3
 8017e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e66:	889b      	ldrh	r3, [r3, #4]
 8017e68:	b29b      	uxth	r3, r3
 8017e6a:	429a      	cmp	r2, r3
 8017e6c:	d906      	bls.n	8017e7c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017e6e:	4b45      	ldr	r3, [pc, #276]	; (8017f84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017e70:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017e74:	4944      	ldr	r1, [pc, #272]	; (8017f88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017e76:	4845      	ldr	r0, [pc, #276]	; (8017f8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017e78:	f000 ff9e 	bl	8018db8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e7e:	68ba      	ldr	r2, [r7, #8]
 8017e80:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e84:	88db      	ldrh	r3, [r3, #6]
 8017e86:	b29a      	uxth	r2, r3
 8017e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e8a:	889b      	ldrh	r3, [r3, #4]
 8017e8c:	b29b      	uxth	r3, r3
 8017e8e:	429a      	cmp	r2, r3
 8017e90:	d010      	beq.n	8017eb4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017e92:	2300      	movs	r3, #0
 8017e94:	623b      	str	r3, [r7, #32]
 8017e96:	e00d      	b.n	8017eb4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017e98:	68fb      	ldr	r3, [r7, #12]
 8017e9a:	685b      	ldr	r3, [r3, #4]
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d006      	beq.n	8017eae <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017ea0:	4b38      	ldr	r3, [pc, #224]	; (8017f84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017ea2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8017ea6:	493a      	ldr	r1, [pc, #232]	; (8017f90 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017ea8:	4838      	ldr	r0, [pc, #224]	; (8017f8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017eaa:	f000 ff85 	bl	8018db8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017eae:	68fb      	ldr	r3, [r7, #12]
 8017eb0:	68ba      	ldr	r2, [r7, #8]
 8017eb2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d105      	bne.n	8017ec6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017eba:	68fb      	ldr	r3, [r7, #12]
 8017ebc:	7f9b      	ldrb	r3, [r3, #30]
 8017ebe:	f003 0301 	and.w	r3, r3, #1
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d059      	beq.n	8017f7a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017ec6:	6a3b      	ldr	r3, [r7, #32]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d04f      	beq.n	8017f6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017ecc:	68fb      	ldr	r3, [r7, #12]
 8017ece:	685b      	ldr	r3, [r3, #4]
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d006      	beq.n	8017ee2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	685b      	ldr	r3, [r3, #4]
 8017ed8:	685b      	ldr	r3, [r3, #4]
 8017eda:	889b      	ldrh	r3, [r3, #4]
 8017edc:	b29b      	uxth	r3, r3
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d002      	beq.n	8017ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017ee2:	2300      	movs	r3, #0
 8017ee4:	623b      	str	r3, [r7, #32]
 8017ee6:	e041      	b.n	8017f6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eea:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017ef2:	e012      	b.n	8017f1a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ef6:	685b      	ldr	r3, [r3, #4]
 8017ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017efc:	88db      	ldrh	r3, [r3, #6]
 8017efe:	b29a      	uxth	r2, r3
 8017f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f02:	889b      	ldrh	r3, [r3, #4]
 8017f04:	b29b      	uxth	r3, r3
 8017f06:	429a      	cmp	r2, r3
 8017f08:	d002      	beq.n	8017f10 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017f0a:	2300      	movs	r3, #0
 8017f0c:	623b      	str	r3, [r7, #32]
            break;
 8017f0e:	e007      	b.n	8017f20 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f12:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d1e9      	bne.n	8017ef4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017f20:	6a3b      	ldr	r3, [r7, #32]
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	d022      	beq.n	8017f6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017f26:	68fb      	ldr	r3, [r7, #12]
 8017f28:	685b      	ldr	r3, [r3, #4]
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d106      	bne.n	8017f3c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017f2e:	4b15      	ldr	r3, [pc, #84]	; (8017f84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017f30:	f240 12df 	movw	r2, #479	; 0x1df
 8017f34:	4917      	ldr	r1, [pc, #92]	; (8017f94 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017f36:	4815      	ldr	r0, [pc, #84]	; (8017f8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017f38:	f000 ff3e 	bl	8018db8 <iprintf>
          LWIP_ASSERT("sanity check",
 8017f3c:	68fb      	ldr	r3, [r7, #12]
 8017f3e:	685b      	ldr	r3, [r3, #4]
 8017f40:	685b      	ldr	r3, [r3, #4]
 8017f42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f44:	429a      	cmp	r2, r3
 8017f46:	d106      	bne.n	8017f56 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017f48:	4b0e      	ldr	r3, [pc, #56]	; (8017f84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017f4a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017f4e:	4911      	ldr	r1, [pc, #68]	; (8017f94 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017f50:	480e      	ldr	r0, [pc, #56]	; (8017f8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017f52:	f000 ff31 	bl	8018db8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f58:	681b      	ldr	r3, [r3, #0]
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d006      	beq.n	8017f6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017f5e:	4b09      	ldr	r3, [pc, #36]	; (8017f84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017f60:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8017f64:	490c      	ldr	r1, [pc, #48]	; (8017f98 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017f66:	4809      	ldr	r0, [pc, #36]	; (8017f8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017f68:	f000 ff26 	bl	8018db8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017f6c:	6a3b      	ldr	r3, [r7, #32]
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	bf14      	ite	ne
 8017f72:	2301      	movne	r3, #1
 8017f74:	2300      	moveq	r3, #0
 8017f76:	b2db      	uxtb	r3, r3
 8017f78:	e000      	b.n	8017f7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017f7a:	2300      	movs	r3, #0
}
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	3730      	adds	r7, #48	; 0x30
 8017f80:	46bd      	mov	sp, r7
 8017f82:	bd80      	pop	{r7, pc}
 8017f84:	0801db04 	.word	0x0801db04
 8017f88:	0801dbe8 	.word	0x0801dbe8
 8017f8c:	0801db4c 	.word	0x0801db4c
 8017f90:	0801dc08 	.word	0x0801dc08
 8017f94:	0801dc40 	.word	0x0801dc40
 8017f98:	0801dc50 	.word	0x0801dc50

08017f9c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017f9c:	b580      	push	{r7, lr}
 8017f9e:	b08e      	sub	sp, #56	; 0x38
 8017fa0:	af00      	add	r7, sp, #0
 8017fa2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	685b      	ldr	r3, [r3, #4]
 8017fa8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fac:	781b      	ldrb	r3, [r3, #0]
 8017fae:	f003 030f 	and.w	r3, r3, #15
 8017fb2:	b2db      	uxtb	r3, r3
 8017fb4:	009b      	lsls	r3, r3, #2
 8017fb6:	b2db      	uxtb	r3, r3
 8017fb8:	2b14      	cmp	r3, #20
 8017fba:	f040 8171 	bne.w	80182a0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fc0:	88db      	ldrh	r3, [r3, #6]
 8017fc2:	b29b      	uxth	r3, r3
 8017fc4:	4618      	mov	r0, r3
 8017fc6:	f7f3 fb91 	bl	800b6ec <lwip_htons>
 8017fca:	4603      	mov	r3, r0
 8017fcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017fd0:	b29b      	uxth	r3, r3
 8017fd2:	00db      	lsls	r3, r3, #3
 8017fd4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fd8:	885b      	ldrh	r3, [r3, #2]
 8017fda:	b29b      	uxth	r3, r3
 8017fdc:	4618      	mov	r0, r3
 8017fde:	f7f3 fb85 	bl	800b6ec <lwip_htons>
 8017fe2:	4603      	mov	r3, r0
 8017fe4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fe8:	781b      	ldrb	r3, [r3, #0]
 8017fea:	f003 030f 	and.w	r3, r3, #15
 8017fee:	b2db      	uxtb	r3, r3
 8017ff0:	009b      	lsls	r3, r3, #2
 8017ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017ff6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017ffa:	b29b      	uxth	r3, r3
 8017ffc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017ffe:	429a      	cmp	r2, r3
 8018000:	f0c0 8150 	bcc.w	80182a4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018004:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018008:	b29b      	uxth	r3, r3
 801800a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801800c:	1ad3      	subs	r3, r2, r3
 801800e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018010:	6878      	ldr	r0, [r7, #4]
 8018012:	f7f5 f82d 	bl	800d070 <pbuf_clen>
 8018016:	4603      	mov	r3, r0
 8018018:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801801a:	4b8c      	ldr	r3, [pc, #560]	; (801824c <ip4_reass+0x2b0>)
 801801c:	881b      	ldrh	r3, [r3, #0]
 801801e:	461a      	mov	r2, r3
 8018020:	8c3b      	ldrh	r3, [r7, #32]
 8018022:	4413      	add	r3, r2
 8018024:	2b0a      	cmp	r3, #10
 8018026:	dd10      	ble.n	801804a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018028:	8c3b      	ldrh	r3, [r7, #32]
 801802a:	4619      	mov	r1, r3
 801802c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801802e:	f7ff fd81 	bl	8017b34 <ip_reass_remove_oldest_datagram>
 8018032:	4603      	mov	r3, r0
 8018034:	2b00      	cmp	r3, #0
 8018036:	f000 8137 	beq.w	80182a8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801803a:	4b84      	ldr	r3, [pc, #528]	; (801824c <ip4_reass+0x2b0>)
 801803c:	881b      	ldrh	r3, [r3, #0]
 801803e:	461a      	mov	r2, r3
 8018040:	8c3b      	ldrh	r3, [r7, #32]
 8018042:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018044:	2b0a      	cmp	r3, #10
 8018046:	f300 812f 	bgt.w	80182a8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801804a:	4b81      	ldr	r3, [pc, #516]	; (8018250 <ip4_reass+0x2b4>)
 801804c:	681b      	ldr	r3, [r3, #0]
 801804e:	633b      	str	r3, [r7, #48]	; 0x30
 8018050:	e015      	b.n	801807e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018054:	695a      	ldr	r2, [r3, #20]
 8018056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018058:	68db      	ldr	r3, [r3, #12]
 801805a:	429a      	cmp	r2, r3
 801805c:	d10c      	bne.n	8018078 <ip4_reass+0xdc>
 801805e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018060:	699a      	ldr	r2, [r3, #24]
 8018062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018064:	691b      	ldr	r3, [r3, #16]
 8018066:	429a      	cmp	r2, r3
 8018068:	d106      	bne.n	8018078 <ip4_reass+0xdc>
 801806a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801806c:	899a      	ldrh	r2, [r3, #12]
 801806e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018070:	889b      	ldrh	r3, [r3, #4]
 8018072:	b29b      	uxth	r3, r3
 8018074:	429a      	cmp	r2, r3
 8018076:	d006      	beq.n	8018086 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	633b      	str	r3, [r7, #48]	; 0x30
 801807e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018080:	2b00      	cmp	r3, #0
 8018082:	d1e6      	bne.n	8018052 <ip4_reass+0xb6>
 8018084:	e000      	b.n	8018088 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018086:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801808a:	2b00      	cmp	r3, #0
 801808c:	d109      	bne.n	80180a2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801808e:	8c3b      	ldrh	r3, [r7, #32]
 8018090:	4619      	mov	r1, r3
 8018092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018094:	f7ff fdb0 	bl	8017bf8 <ip_reass_enqueue_new_datagram>
 8018098:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801809a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801809c:	2b00      	cmp	r3, #0
 801809e:	d11c      	bne.n	80180da <ip4_reass+0x13e>
      goto nullreturn;
 80180a0:	e105      	b.n	80182ae <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80180a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180a4:	88db      	ldrh	r3, [r3, #6]
 80180a6:	b29b      	uxth	r3, r3
 80180a8:	4618      	mov	r0, r3
 80180aa:	f7f3 fb1f 	bl	800b6ec <lwip_htons>
 80180ae:	4603      	mov	r3, r0
 80180b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d110      	bne.n	80180da <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80180b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180ba:	89db      	ldrh	r3, [r3, #14]
 80180bc:	4618      	mov	r0, r3
 80180be:	f7f3 fb15 	bl	800b6ec <lwip_htons>
 80180c2:	4603      	mov	r3, r0
 80180c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d006      	beq.n	80180da <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80180cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180ce:	3308      	adds	r3, #8
 80180d0:	2214      	movs	r2, #20
 80180d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80180d4:	4618      	mov	r0, r3
 80180d6:	f001 f86f 	bl	80191b8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80180da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180dc:	88db      	ldrh	r3, [r3, #6]
 80180de:	b29b      	uxth	r3, r3
 80180e0:	f003 0320 	and.w	r3, r3, #32
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	bf0c      	ite	eq
 80180e8:	2301      	moveq	r3, #1
 80180ea:	2300      	movne	r3, #0
 80180ec:	b2db      	uxtb	r3, r3
 80180ee:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80180f0:	69fb      	ldr	r3, [r7, #28]
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	d00e      	beq.n	8018114 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80180f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80180f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80180fa:	4413      	add	r3, r2
 80180fc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80180fe:	8b7a      	ldrh	r2, [r7, #26]
 8018100:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018102:	429a      	cmp	r2, r3
 8018104:	f0c0 80a0 	bcc.w	8018248 <ip4_reass+0x2ac>
 8018108:	8b7b      	ldrh	r3, [r7, #26]
 801810a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801810e:	4293      	cmp	r3, r2
 8018110:	f200 809a 	bhi.w	8018248 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018114:	69fa      	ldr	r2, [r7, #28]
 8018116:	6879      	ldr	r1, [r7, #4]
 8018118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801811a:	f7ff fdd5 	bl	8017cc8 <ip_reass_chain_frag_into_datagram_and_validate>
 801811e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018120:	697b      	ldr	r3, [r7, #20]
 8018122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018126:	f000 809b 	beq.w	8018260 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801812a:	4b48      	ldr	r3, [pc, #288]	; (801824c <ip4_reass+0x2b0>)
 801812c:	881a      	ldrh	r2, [r3, #0]
 801812e:	8c3b      	ldrh	r3, [r7, #32]
 8018130:	4413      	add	r3, r2
 8018132:	b29a      	uxth	r2, r3
 8018134:	4b45      	ldr	r3, [pc, #276]	; (801824c <ip4_reass+0x2b0>)
 8018136:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018138:	69fb      	ldr	r3, [r7, #28]
 801813a:	2b00      	cmp	r3, #0
 801813c:	d00d      	beq.n	801815a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801813e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018140:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018142:	4413      	add	r3, r2
 8018144:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018148:	8a7a      	ldrh	r2, [r7, #18]
 801814a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801814c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801814e:	7f9b      	ldrb	r3, [r3, #30]
 8018150:	f043 0301 	orr.w	r3, r3, #1
 8018154:	b2da      	uxtb	r2, r3
 8018156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018158:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801815a:	697b      	ldr	r3, [r7, #20]
 801815c:	2b01      	cmp	r3, #1
 801815e:	d171      	bne.n	8018244 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018162:	8b9b      	ldrh	r3, [r3, #28]
 8018164:	3314      	adds	r3, #20
 8018166:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801816a:	685b      	ldr	r3, [r3, #4]
 801816c:	685b      	ldr	r3, [r3, #4]
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018174:	685b      	ldr	r3, [r3, #4]
 8018176:	685b      	ldr	r3, [r3, #4]
 8018178:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801817a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801817c:	3308      	adds	r3, #8
 801817e:	2214      	movs	r2, #20
 8018180:	4619      	mov	r1, r3
 8018182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018184:	f001 f818 	bl	80191b8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018188:	8a3b      	ldrh	r3, [r7, #16]
 801818a:	4618      	mov	r0, r3
 801818c:	f7f3 faae 	bl	800b6ec <lwip_htons>
 8018190:	4603      	mov	r3, r0
 8018192:	461a      	mov	r2, r3
 8018194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018196:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801819a:	2200      	movs	r2, #0
 801819c:	719a      	strb	r2, [r3, #6]
 801819e:	2200      	movs	r2, #0
 80181a0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80181a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181a4:	2200      	movs	r2, #0
 80181a6:	729a      	strb	r2, [r3, #10]
 80181a8:	2200      	movs	r2, #0
 80181aa:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80181ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181ae:	685b      	ldr	r3, [r3, #4]
 80181b0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80181b2:	e00d      	b.n	80181d0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80181b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80181b6:	685b      	ldr	r3, [r3, #4]
 80181b8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80181ba:	2114      	movs	r1, #20
 80181bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80181be:	f7f4 fe43 	bl	800ce48 <pbuf_remove_header>
      pbuf_cat(p, r);
 80181c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80181c4:	6878      	ldr	r0, [r7, #4]
 80181c6:	f7f4 ff93 	bl	800d0f0 <pbuf_cat>
      r = iprh->next_pbuf;
 80181ca:	68fb      	ldr	r3, [r7, #12]
 80181cc:	681b      	ldr	r3, [r3, #0]
 80181ce:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80181d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d1ee      	bne.n	80181b4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80181d6:	4b1e      	ldr	r3, [pc, #120]	; (8018250 <ip4_reass+0x2b4>)
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80181dc:	429a      	cmp	r2, r3
 80181de:	d102      	bne.n	80181e6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80181e0:	2300      	movs	r3, #0
 80181e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80181e4:	e010      	b.n	8018208 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80181e6:	4b1a      	ldr	r3, [pc, #104]	; (8018250 <ip4_reass+0x2b4>)
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80181ec:	e007      	b.n	80181fe <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80181ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80181f4:	429a      	cmp	r2, r3
 80181f6:	d006      	beq.n	8018206 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80181f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80181fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018200:	2b00      	cmp	r3, #0
 8018202:	d1f4      	bne.n	80181ee <ip4_reass+0x252>
 8018204:	e000      	b.n	8018208 <ip4_reass+0x26c>
          break;
 8018206:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018208:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801820a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801820c:	f7ff fd2e 	bl	8017c6c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018210:	6878      	ldr	r0, [r7, #4]
 8018212:	f7f4 ff2d 	bl	800d070 <pbuf_clen>
 8018216:	4603      	mov	r3, r0
 8018218:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801821a:	4b0c      	ldr	r3, [pc, #48]	; (801824c <ip4_reass+0x2b0>)
 801821c:	881b      	ldrh	r3, [r3, #0]
 801821e:	8c3a      	ldrh	r2, [r7, #32]
 8018220:	429a      	cmp	r2, r3
 8018222:	d906      	bls.n	8018232 <ip4_reass+0x296>
 8018224:	4b0b      	ldr	r3, [pc, #44]	; (8018254 <ip4_reass+0x2b8>)
 8018226:	f240 229b 	movw	r2, #667	; 0x29b
 801822a:	490b      	ldr	r1, [pc, #44]	; (8018258 <ip4_reass+0x2bc>)
 801822c:	480b      	ldr	r0, [pc, #44]	; (801825c <ip4_reass+0x2c0>)
 801822e:	f000 fdc3 	bl	8018db8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018232:	4b06      	ldr	r3, [pc, #24]	; (801824c <ip4_reass+0x2b0>)
 8018234:	881a      	ldrh	r2, [r3, #0]
 8018236:	8c3b      	ldrh	r3, [r7, #32]
 8018238:	1ad3      	subs	r3, r2, r3
 801823a:	b29a      	uxth	r2, r3
 801823c:	4b03      	ldr	r3, [pc, #12]	; (801824c <ip4_reass+0x2b0>)
 801823e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	e038      	b.n	80182b6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018244:	2300      	movs	r3, #0
 8018246:	e036      	b.n	80182b6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018248:	bf00      	nop
 801824a:	e00a      	b.n	8018262 <ip4_reass+0x2c6>
 801824c:	200110fc 	.word	0x200110fc
 8018250:	200110f8 	.word	0x200110f8
 8018254:	0801db04 	.word	0x0801db04
 8018258:	0801dc74 	.word	0x0801dc74
 801825c:	0801db4c 	.word	0x0801db4c
    goto nullreturn_ipr;
 8018260:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018264:	2b00      	cmp	r3, #0
 8018266:	d106      	bne.n	8018276 <ip4_reass+0x2da>
 8018268:	4b15      	ldr	r3, [pc, #84]	; (80182c0 <ip4_reass+0x324>)
 801826a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801826e:	4915      	ldr	r1, [pc, #84]	; (80182c4 <ip4_reass+0x328>)
 8018270:	4815      	ldr	r0, [pc, #84]	; (80182c8 <ip4_reass+0x32c>)
 8018272:	f000 fda1 	bl	8018db8 <iprintf>
  if (ipr->p == NULL) {
 8018276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018278:	685b      	ldr	r3, [r3, #4]
 801827a:	2b00      	cmp	r3, #0
 801827c:	d116      	bne.n	80182ac <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801827e:	4b13      	ldr	r3, [pc, #76]	; (80182cc <ip4_reass+0x330>)
 8018280:	681b      	ldr	r3, [r3, #0]
 8018282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018284:	429a      	cmp	r2, r3
 8018286:	d006      	beq.n	8018296 <ip4_reass+0x2fa>
 8018288:	4b0d      	ldr	r3, [pc, #52]	; (80182c0 <ip4_reass+0x324>)
 801828a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801828e:	4910      	ldr	r1, [pc, #64]	; (80182d0 <ip4_reass+0x334>)
 8018290:	480d      	ldr	r0, [pc, #52]	; (80182c8 <ip4_reass+0x32c>)
 8018292:	f000 fd91 	bl	8018db8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018296:	2100      	movs	r1, #0
 8018298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801829a:	f7ff fce7 	bl	8017c6c <ip_reass_dequeue_datagram>
 801829e:	e006      	b.n	80182ae <ip4_reass+0x312>
    goto nullreturn;
 80182a0:	bf00      	nop
 80182a2:	e004      	b.n	80182ae <ip4_reass+0x312>
    goto nullreturn;
 80182a4:	bf00      	nop
 80182a6:	e002      	b.n	80182ae <ip4_reass+0x312>
      goto nullreturn;
 80182a8:	bf00      	nop
 80182aa:	e000      	b.n	80182ae <ip4_reass+0x312>
  }

nullreturn:
 80182ac:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80182ae:	6878      	ldr	r0, [r7, #4]
 80182b0:	f7f4 fe50 	bl	800cf54 <pbuf_free>
  return NULL;
 80182b4:	2300      	movs	r3, #0
}
 80182b6:	4618      	mov	r0, r3
 80182b8:	3738      	adds	r7, #56	; 0x38
 80182ba:	46bd      	mov	sp, r7
 80182bc:	bd80      	pop	{r7, pc}
 80182be:	bf00      	nop
 80182c0:	0801db04 	.word	0x0801db04
 80182c4:	0801dc90 	.word	0x0801dc90
 80182c8:	0801db4c 	.word	0x0801db4c
 80182cc:	200110f8 	.word	0x200110f8
 80182d0:	0801dc9c 	.word	0x0801dc9c

080182d4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80182d4:	b580      	push	{r7, lr}
 80182d6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80182d8:	2005      	movs	r0, #5
 80182da:	f7f3 ff15 	bl	800c108 <memp_malloc>
 80182de:	4603      	mov	r3, r0
}
 80182e0:	4618      	mov	r0, r3
 80182e2:	bd80      	pop	{r7, pc}

080182e4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80182e4:	b580      	push	{r7, lr}
 80182e6:	b082      	sub	sp, #8
 80182e8:	af00      	add	r7, sp, #0
 80182ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d106      	bne.n	8018300 <ip_frag_free_pbuf_custom_ref+0x1c>
 80182f2:	4b07      	ldr	r3, [pc, #28]	; (8018310 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80182f4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80182f8:	4906      	ldr	r1, [pc, #24]	; (8018314 <ip_frag_free_pbuf_custom_ref+0x30>)
 80182fa:	4807      	ldr	r0, [pc, #28]	; (8018318 <ip_frag_free_pbuf_custom_ref+0x34>)
 80182fc:	f000 fd5c 	bl	8018db8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018300:	6879      	ldr	r1, [r7, #4]
 8018302:	2005      	movs	r0, #5
 8018304:	f7f3 ff76 	bl	800c1f4 <memp_free>
}
 8018308:	bf00      	nop
 801830a:	3708      	adds	r7, #8
 801830c:	46bd      	mov	sp, r7
 801830e:	bd80      	pop	{r7, pc}
 8018310:	0801db04 	.word	0x0801db04
 8018314:	0801dcbc 	.word	0x0801dcbc
 8018318:	0801db4c 	.word	0x0801db4c

0801831c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801831c:	b580      	push	{r7, lr}
 801831e:	b084      	sub	sp, #16
 8018320:	af00      	add	r7, sp, #0
 8018322:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018328:	68fb      	ldr	r3, [r7, #12]
 801832a:	2b00      	cmp	r3, #0
 801832c:	d106      	bne.n	801833c <ipfrag_free_pbuf_custom+0x20>
 801832e:	4b11      	ldr	r3, [pc, #68]	; (8018374 <ipfrag_free_pbuf_custom+0x58>)
 8018330:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018334:	4910      	ldr	r1, [pc, #64]	; (8018378 <ipfrag_free_pbuf_custom+0x5c>)
 8018336:	4811      	ldr	r0, [pc, #68]	; (801837c <ipfrag_free_pbuf_custom+0x60>)
 8018338:	f000 fd3e 	bl	8018db8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801833c:	68fa      	ldr	r2, [r7, #12]
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	429a      	cmp	r2, r3
 8018342:	d006      	beq.n	8018352 <ipfrag_free_pbuf_custom+0x36>
 8018344:	4b0b      	ldr	r3, [pc, #44]	; (8018374 <ipfrag_free_pbuf_custom+0x58>)
 8018346:	f240 22cf 	movw	r2, #719	; 0x2cf
 801834a:	490d      	ldr	r1, [pc, #52]	; (8018380 <ipfrag_free_pbuf_custom+0x64>)
 801834c:	480b      	ldr	r0, [pc, #44]	; (801837c <ipfrag_free_pbuf_custom+0x60>)
 801834e:	f000 fd33 	bl	8018db8 <iprintf>
  if (pcr->original != NULL) {
 8018352:	68fb      	ldr	r3, [r7, #12]
 8018354:	695b      	ldr	r3, [r3, #20]
 8018356:	2b00      	cmp	r3, #0
 8018358:	d004      	beq.n	8018364 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801835a:	68fb      	ldr	r3, [r7, #12]
 801835c:	695b      	ldr	r3, [r3, #20]
 801835e:	4618      	mov	r0, r3
 8018360:	f7f4 fdf8 	bl	800cf54 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018364:	68f8      	ldr	r0, [r7, #12]
 8018366:	f7ff ffbd 	bl	80182e4 <ip_frag_free_pbuf_custom_ref>
}
 801836a:	bf00      	nop
 801836c:	3710      	adds	r7, #16
 801836e:	46bd      	mov	sp, r7
 8018370:	bd80      	pop	{r7, pc}
 8018372:	bf00      	nop
 8018374:	0801db04 	.word	0x0801db04
 8018378:	0801dcc8 	.word	0x0801dcc8
 801837c:	0801db4c 	.word	0x0801db4c
 8018380:	0801dcd4 	.word	0x0801dcd4

08018384 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018384:	b580      	push	{r7, lr}
 8018386:	b094      	sub	sp, #80	; 0x50
 8018388:	af02      	add	r7, sp, #8
 801838a:	60f8      	str	r0, [r7, #12]
 801838c:	60b9      	str	r1, [r7, #8]
 801838e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018390:	2300      	movs	r3, #0
 8018392:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018396:	68bb      	ldr	r3, [r7, #8]
 8018398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801839a:	3b14      	subs	r3, #20
 801839c:	2b00      	cmp	r3, #0
 801839e:	da00      	bge.n	80183a2 <ip4_frag+0x1e>
 80183a0:	3307      	adds	r3, #7
 80183a2:	10db      	asrs	r3, r3, #3
 80183a4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80183a6:	2314      	movs	r3, #20
 80183a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80183aa:	68fb      	ldr	r3, [r7, #12]
 80183ac:	685b      	ldr	r3, [r3, #4]
 80183ae:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80183b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183b2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80183b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183b6:	781b      	ldrb	r3, [r3, #0]
 80183b8:	f003 030f 	and.w	r3, r3, #15
 80183bc:	b2db      	uxtb	r3, r3
 80183be:	009b      	lsls	r3, r3, #2
 80183c0:	b2db      	uxtb	r3, r3
 80183c2:	2b14      	cmp	r3, #20
 80183c4:	d002      	beq.n	80183cc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80183c6:	f06f 0305 	mvn.w	r3, #5
 80183ca:	e110      	b.n	80185ee <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80183cc:	68fb      	ldr	r3, [r7, #12]
 80183ce:	895b      	ldrh	r3, [r3, #10]
 80183d0:	2b13      	cmp	r3, #19
 80183d2:	d809      	bhi.n	80183e8 <ip4_frag+0x64>
 80183d4:	4b88      	ldr	r3, [pc, #544]	; (80185f8 <ip4_frag+0x274>)
 80183d6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80183da:	4988      	ldr	r1, [pc, #544]	; (80185fc <ip4_frag+0x278>)
 80183dc:	4888      	ldr	r0, [pc, #544]	; (8018600 <ip4_frag+0x27c>)
 80183de:	f000 fceb 	bl	8018db8 <iprintf>
 80183e2:	f06f 0305 	mvn.w	r3, #5
 80183e6:	e102      	b.n	80185ee <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80183e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183ea:	88db      	ldrh	r3, [r3, #6]
 80183ec:	b29b      	uxth	r3, r3
 80183ee:	4618      	mov	r0, r3
 80183f0:	f7f3 f97c 	bl	800b6ec <lwip_htons>
 80183f4:	4603      	mov	r3, r0
 80183f6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80183f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80183fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80183fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018402:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018404:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018408:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801840a:	68fb      	ldr	r3, [r7, #12]
 801840c:	891b      	ldrh	r3, [r3, #8]
 801840e:	3b14      	subs	r3, #20
 8018410:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018414:	e0e1      	b.n	80185da <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018416:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018418:	00db      	lsls	r3, r3, #3
 801841a:	b29b      	uxth	r3, r3
 801841c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018420:	4293      	cmp	r3, r2
 8018422:	bf28      	it	cs
 8018424:	4613      	movcs	r3, r2
 8018426:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018428:	f44f 7220 	mov.w	r2, #640	; 0x280
 801842c:	2114      	movs	r1, #20
 801842e:	200e      	movs	r0, #14
 8018430:	f7f4 faac 	bl	800c98c <pbuf_alloc>
 8018434:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018438:	2b00      	cmp	r3, #0
 801843a:	f000 80d5 	beq.w	80185e8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018440:	895b      	ldrh	r3, [r3, #10]
 8018442:	2b13      	cmp	r3, #19
 8018444:	d806      	bhi.n	8018454 <ip4_frag+0xd0>
 8018446:	4b6c      	ldr	r3, [pc, #432]	; (80185f8 <ip4_frag+0x274>)
 8018448:	f44f 7249 	mov.w	r2, #804	; 0x324
 801844c:	496d      	ldr	r1, [pc, #436]	; (8018604 <ip4_frag+0x280>)
 801844e:	486c      	ldr	r0, [pc, #432]	; (8018600 <ip4_frag+0x27c>)
 8018450:	f000 fcb2 	bl	8018db8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018456:	685b      	ldr	r3, [r3, #4]
 8018458:	2214      	movs	r2, #20
 801845a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801845c:	4618      	mov	r0, r3
 801845e:	f000 feab 	bl	80191b8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018464:	685b      	ldr	r3, [r3, #4]
 8018466:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018468:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801846a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801846e:	e064      	b.n	801853a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018470:	68fb      	ldr	r3, [r7, #12]
 8018472:	895a      	ldrh	r2, [r3, #10]
 8018474:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018476:	1ad3      	subs	r3, r2, r3
 8018478:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801847a:	68fb      	ldr	r3, [r7, #12]
 801847c:	895b      	ldrh	r3, [r3, #10]
 801847e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018480:	429a      	cmp	r2, r3
 8018482:	d906      	bls.n	8018492 <ip4_frag+0x10e>
 8018484:	4b5c      	ldr	r3, [pc, #368]	; (80185f8 <ip4_frag+0x274>)
 8018486:	f240 322d 	movw	r2, #813	; 0x32d
 801848a:	495f      	ldr	r1, [pc, #380]	; (8018608 <ip4_frag+0x284>)
 801848c:	485c      	ldr	r0, [pc, #368]	; (8018600 <ip4_frag+0x27c>)
 801848e:	f000 fc93 	bl	8018db8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018492:	8bfa      	ldrh	r2, [r7, #30]
 8018494:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018498:	4293      	cmp	r3, r2
 801849a:	bf28      	it	cs
 801849c:	4613      	movcs	r3, r2
 801849e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80184a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d105      	bne.n	80184b6 <ip4_frag+0x132>
        poff = 0;
 80184aa:	2300      	movs	r3, #0
 80184ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80184ae:	68fb      	ldr	r3, [r7, #12]
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	60fb      	str	r3, [r7, #12]
        continue;
 80184b4:	e041      	b.n	801853a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80184b6:	f7ff ff0d 	bl	80182d4 <ip_frag_alloc_pbuf_custom_ref>
 80184ba:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80184bc:	69bb      	ldr	r3, [r7, #24]
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d103      	bne.n	80184ca <ip4_frag+0x146>
        pbuf_free(rambuf);
 80184c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80184c4:	f7f4 fd46 	bl	800cf54 <pbuf_free>
        goto memerr;
 80184c8:	e08f      	b.n	80185ea <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80184ca:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80184cc:	68fb      	ldr	r3, [r7, #12]
 80184ce:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80184d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80184d2:	4413      	add	r3, r2
 80184d4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80184d8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80184dc:	9201      	str	r2, [sp, #4]
 80184de:	9300      	str	r3, [sp, #0]
 80184e0:	4603      	mov	r3, r0
 80184e2:	2241      	movs	r2, #65	; 0x41
 80184e4:	2000      	movs	r0, #0
 80184e6:	f7f4 fb7b 	bl	800cbe0 <pbuf_alloced_custom>
 80184ea:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80184ec:	697b      	ldr	r3, [r7, #20]
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d106      	bne.n	8018500 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80184f2:	69b8      	ldr	r0, [r7, #24]
 80184f4:	f7ff fef6 	bl	80182e4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80184f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80184fa:	f7f4 fd2b 	bl	800cf54 <pbuf_free>
        goto memerr;
 80184fe:	e074      	b.n	80185ea <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018500:	68f8      	ldr	r0, [r7, #12]
 8018502:	f7f4 fdcd 	bl	800d0a0 <pbuf_ref>
      pcr->original = p;
 8018506:	69bb      	ldr	r3, [r7, #24]
 8018508:	68fa      	ldr	r2, [r7, #12]
 801850a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801850c:	69bb      	ldr	r3, [r7, #24]
 801850e:	4a3f      	ldr	r2, [pc, #252]	; (801860c <ip4_frag+0x288>)
 8018510:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018512:	6979      	ldr	r1, [r7, #20]
 8018514:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018516:	f7f4 fdeb 	bl	800d0f0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801851a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801851e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018522:	1ad3      	subs	r3, r2, r3
 8018524:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018528:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801852c:	2b00      	cmp	r3, #0
 801852e:	d004      	beq.n	801853a <ip4_frag+0x1b6>
        poff = 0;
 8018530:	2300      	movs	r3, #0
 8018532:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018534:	68fb      	ldr	r3, [r7, #12]
 8018536:	681b      	ldr	r3, [r3, #0]
 8018538:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801853a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801853e:	2b00      	cmp	r3, #0
 8018540:	d196      	bne.n	8018470 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018542:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018544:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018548:	4413      	add	r3, r2
 801854a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801854c:	68bb      	ldr	r3, [r7, #8]
 801854e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018550:	f1a3 0213 	sub.w	r2, r3, #19
 8018554:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018558:	429a      	cmp	r2, r3
 801855a:	bfcc      	ite	gt
 801855c:	2301      	movgt	r3, #1
 801855e:	2300      	movle	r3, #0
 8018560:	b2db      	uxtb	r3, r3
 8018562:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018564:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018568:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801856c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801856e:	6a3b      	ldr	r3, [r7, #32]
 8018570:	2b00      	cmp	r3, #0
 8018572:	d002      	beq.n	801857a <ip4_frag+0x1f6>
 8018574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018576:	2b00      	cmp	r3, #0
 8018578:	d003      	beq.n	8018582 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801857a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801857c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018580:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018582:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018584:	4618      	mov	r0, r3
 8018586:	f7f3 f8b1 	bl	800b6ec <lwip_htons>
 801858a:	4603      	mov	r3, r0
 801858c:	461a      	mov	r2, r3
 801858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018590:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018592:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018594:	3314      	adds	r3, #20
 8018596:	b29b      	uxth	r3, r3
 8018598:	4618      	mov	r0, r3
 801859a:	f7f3 f8a7 	bl	800b6ec <lwip_htons>
 801859e:	4603      	mov	r3, r0
 80185a0:	461a      	mov	r2, r3
 80185a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185a4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80185a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185a8:	2200      	movs	r2, #0
 80185aa:	729a      	strb	r2, [r3, #10]
 80185ac:	2200      	movs	r2, #0
 80185ae:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80185b0:	68bb      	ldr	r3, [r7, #8]
 80185b2:	695b      	ldr	r3, [r3, #20]
 80185b4:	687a      	ldr	r2, [r7, #4]
 80185b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80185b8:	68b8      	ldr	r0, [r7, #8]
 80185ba:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80185bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80185be:	f7f4 fcc9 	bl	800cf54 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80185c2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80185c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80185c8:	1ad3      	subs	r3, r2, r3
 80185ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80185ce:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80185d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80185d4:	4413      	add	r3, r2
 80185d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80185da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80185de:	2b00      	cmp	r3, #0
 80185e0:	f47f af19 	bne.w	8018416 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80185e4:	2300      	movs	r3, #0
 80185e6:	e002      	b.n	80185ee <ip4_frag+0x26a>
      goto memerr;
 80185e8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80185ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80185ee:	4618      	mov	r0, r3
 80185f0:	3748      	adds	r7, #72	; 0x48
 80185f2:	46bd      	mov	sp, r7
 80185f4:	bd80      	pop	{r7, pc}
 80185f6:	bf00      	nop
 80185f8:	0801db04 	.word	0x0801db04
 80185fc:	0801dce0 	.word	0x0801dce0
 8018600:	0801db4c 	.word	0x0801db4c
 8018604:	0801dcfc 	.word	0x0801dcfc
 8018608:	0801dd1c 	.word	0x0801dd1c
 801860c:	0801831d 	.word	0x0801831d

08018610 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018610:	b580      	push	{r7, lr}
 8018612:	b086      	sub	sp, #24
 8018614:	af00      	add	r7, sp, #0
 8018616:	6078      	str	r0, [r7, #4]
 8018618:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801861a:	230e      	movs	r3, #14
 801861c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	895b      	ldrh	r3, [r3, #10]
 8018622:	2b0e      	cmp	r3, #14
 8018624:	d96e      	bls.n	8018704 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	7bdb      	ldrb	r3, [r3, #15]
 801862a:	2b00      	cmp	r3, #0
 801862c:	d106      	bne.n	801863c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801862e:	683b      	ldr	r3, [r7, #0]
 8018630:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018634:	3301      	adds	r3, #1
 8018636:	b2da      	uxtb	r2, r3
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	685b      	ldr	r3, [r3, #4]
 8018640:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018642:	693b      	ldr	r3, [r7, #16]
 8018644:	7b1a      	ldrb	r2, [r3, #12]
 8018646:	7b5b      	ldrb	r3, [r3, #13]
 8018648:	021b      	lsls	r3, r3, #8
 801864a:	4313      	orrs	r3, r2
 801864c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801864e:	693b      	ldr	r3, [r7, #16]
 8018650:	781b      	ldrb	r3, [r3, #0]
 8018652:	f003 0301 	and.w	r3, r3, #1
 8018656:	2b00      	cmp	r3, #0
 8018658:	d023      	beq.n	80186a2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801865a:	693b      	ldr	r3, [r7, #16]
 801865c:	781b      	ldrb	r3, [r3, #0]
 801865e:	2b01      	cmp	r3, #1
 8018660:	d10f      	bne.n	8018682 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018662:	693b      	ldr	r3, [r7, #16]
 8018664:	785b      	ldrb	r3, [r3, #1]
 8018666:	2b00      	cmp	r3, #0
 8018668:	d11b      	bne.n	80186a2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801866a:	693b      	ldr	r3, [r7, #16]
 801866c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801866e:	2b5e      	cmp	r3, #94	; 0x5e
 8018670:	d117      	bne.n	80186a2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	7b5b      	ldrb	r3, [r3, #13]
 8018676:	f043 0310 	orr.w	r3, r3, #16
 801867a:	b2da      	uxtb	r2, r3
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	735a      	strb	r2, [r3, #13]
 8018680:	e00f      	b.n	80186a2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018682:	693b      	ldr	r3, [r7, #16]
 8018684:	2206      	movs	r2, #6
 8018686:	4928      	ldr	r1, [pc, #160]	; (8018728 <ethernet_input+0x118>)
 8018688:	4618      	mov	r0, r3
 801868a:	f000 fc0a 	bl	8018ea2 <memcmp>
 801868e:	4603      	mov	r3, r0
 8018690:	2b00      	cmp	r3, #0
 8018692:	d106      	bne.n	80186a2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	7b5b      	ldrb	r3, [r3, #13]
 8018698:	f043 0308 	orr.w	r3, r3, #8
 801869c:	b2da      	uxtb	r2, r3
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80186a2:	89fb      	ldrh	r3, [r7, #14]
 80186a4:	2b08      	cmp	r3, #8
 80186a6:	d003      	beq.n	80186b0 <ethernet_input+0xa0>
 80186a8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80186ac:	d014      	beq.n	80186d8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80186ae:	e032      	b.n	8018716 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80186b0:	683b      	ldr	r3, [r7, #0]
 80186b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80186b6:	f003 0308 	and.w	r3, r3, #8
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	d024      	beq.n	8018708 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80186be:	8afb      	ldrh	r3, [r7, #22]
 80186c0:	4619      	mov	r1, r3
 80186c2:	6878      	ldr	r0, [r7, #4]
 80186c4:	f7f4 fbc0 	bl	800ce48 <pbuf_remove_header>
 80186c8:	4603      	mov	r3, r0
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	d11e      	bne.n	801870c <ethernet_input+0xfc>
        ip4_input(p, netif);
 80186ce:	6839      	ldr	r1, [r7, #0]
 80186d0:	6878      	ldr	r0, [r7, #4]
 80186d2:	f7fe ff03 	bl	80174dc <ip4_input>
      break;
 80186d6:	e013      	b.n	8018700 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80186d8:	683b      	ldr	r3, [r7, #0]
 80186da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80186de:	f003 0308 	and.w	r3, r3, #8
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d014      	beq.n	8018710 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80186e6:	8afb      	ldrh	r3, [r7, #22]
 80186e8:	4619      	mov	r1, r3
 80186ea:	6878      	ldr	r0, [r7, #4]
 80186ec:	f7f4 fbac 	bl	800ce48 <pbuf_remove_header>
 80186f0:	4603      	mov	r3, r0
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d10e      	bne.n	8018714 <ethernet_input+0x104>
        etharp_input(p, netif);
 80186f6:	6839      	ldr	r1, [r7, #0]
 80186f8:	6878      	ldr	r0, [r7, #4]
 80186fa:	f7fe f89f 	bl	801683c <etharp_input>
      break;
 80186fe:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018700:	2300      	movs	r3, #0
 8018702:	e00c      	b.n	801871e <ethernet_input+0x10e>
    goto free_and_return;
 8018704:	bf00      	nop
 8018706:	e006      	b.n	8018716 <ethernet_input+0x106>
        goto free_and_return;
 8018708:	bf00      	nop
 801870a:	e004      	b.n	8018716 <ethernet_input+0x106>
        goto free_and_return;
 801870c:	bf00      	nop
 801870e:	e002      	b.n	8018716 <ethernet_input+0x106>
        goto free_and_return;
 8018710:	bf00      	nop
 8018712:	e000      	b.n	8018716 <ethernet_input+0x106>
        goto free_and_return;
 8018714:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018716:	6878      	ldr	r0, [r7, #4]
 8018718:	f7f4 fc1c 	bl	800cf54 <pbuf_free>
  return ERR_OK;
 801871c:	2300      	movs	r3, #0
}
 801871e:	4618      	mov	r0, r3
 8018720:	3718      	adds	r7, #24
 8018722:	46bd      	mov	sp, r7
 8018724:	bd80      	pop	{r7, pc}
 8018726:	bf00      	nop
 8018728:	08028048 	.word	0x08028048

0801872c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801872c:	b580      	push	{r7, lr}
 801872e:	b086      	sub	sp, #24
 8018730:	af00      	add	r7, sp, #0
 8018732:	60f8      	str	r0, [r7, #12]
 8018734:	60b9      	str	r1, [r7, #8]
 8018736:	607a      	str	r2, [r7, #4]
 8018738:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801873a:	8c3b      	ldrh	r3, [r7, #32]
 801873c:	4618      	mov	r0, r3
 801873e:	f7f2 ffd5 	bl	800b6ec <lwip_htons>
 8018742:	4603      	mov	r3, r0
 8018744:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018746:	210e      	movs	r1, #14
 8018748:	68b8      	ldr	r0, [r7, #8]
 801874a:	f7f4 fb6d 	bl	800ce28 <pbuf_add_header>
 801874e:	4603      	mov	r3, r0
 8018750:	2b00      	cmp	r3, #0
 8018752:	d125      	bne.n	80187a0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018754:	68bb      	ldr	r3, [r7, #8]
 8018756:	685b      	ldr	r3, [r3, #4]
 8018758:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801875a:	693b      	ldr	r3, [r7, #16]
 801875c:	8afa      	ldrh	r2, [r7, #22]
 801875e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018760:	693b      	ldr	r3, [r7, #16]
 8018762:	2206      	movs	r2, #6
 8018764:	6839      	ldr	r1, [r7, #0]
 8018766:	4618      	mov	r0, r3
 8018768:	f000 fd26 	bl	80191b8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801876c:	693b      	ldr	r3, [r7, #16]
 801876e:	3306      	adds	r3, #6
 8018770:	2206      	movs	r2, #6
 8018772:	6879      	ldr	r1, [r7, #4]
 8018774:	4618      	mov	r0, r3
 8018776:	f000 fd1f 	bl	80191b8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801877a:	68fb      	ldr	r3, [r7, #12]
 801877c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018780:	2b06      	cmp	r3, #6
 8018782:	d006      	beq.n	8018792 <ethernet_output+0x66>
 8018784:	4b0a      	ldr	r3, [pc, #40]	; (80187b0 <ethernet_output+0x84>)
 8018786:	f44f 7299 	mov.w	r2, #306	; 0x132
 801878a:	490a      	ldr	r1, [pc, #40]	; (80187b4 <ethernet_output+0x88>)
 801878c:	480a      	ldr	r0, [pc, #40]	; (80187b8 <ethernet_output+0x8c>)
 801878e:	f000 fb13 	bl	8018db8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018792:	68fb      	ldr	r3, [r7, #12]
 8018794:	699b      	ldr	r3, [r3, #24]
 8018796:	68b9      	ldr	r1, [r7, #8]
 8018798:	68f8      	ldr	r0, [r7, #12]
 801879a:	4798      	blx	r3
 801879c:	4603      	mov	r3, r0
 801879e:	e002      	b.n	80187a6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80187a0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80187a2:	f06f 0301 	mvn.w	r3, #1
}
 80187a6:	4618      	mov	r0, r3
 80187a8:	3718      	adds	r7, #24
 80187aa:	46bd      	mov	sp, r7
 80187ac:	bd80      	pop	{r7, pc}
 80187ae:	bf00      	nop
 80187b0:	0801dd2c 	.word	0x0801dd2c
 80187b4:	0801dd64 	.word	0x0801dd64
 80187b8:	0801dd98 	.word	0x0801dd98

080187bc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80187bc:	b580      	push	{r7, lr}
 80187be:	b086      	sub	sp, #24
 80187c0:	af00      	add	r7, sp, #0
 80187c2:	6078      	str	r0, [r7, #4]
 80187c4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80187c6:	683b      	ldr	r3, [r7, #0]
 80187c8:	60bb      	str	r3, [r7, #8]
 80187ca:	2304      	movs	r3, #4
 80187cc:	60fb      	str	r3, [r7, #12]
 80187ce:	2300      	movs	r3, #0
 80187d0:	613b      	str	r3, [r7, #16]
 80187d2:	2300      	movs	r3, #0
 80187d4:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80187d6:	f107 0308 	add.w	r3, r7, #8
 80187da:	2100      	movs	r1, #0
 80187dc:	4618      	mov	r0, r3
 80187de:	f7ec fee6 	bl	80055ae <osMessageCreate>
 80187e2:	4602      	mov	r2, r0
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d102      	bne.n	80187f6 <sys_mbox_new+0x3a>
    return ERR_MEM;
 80187f0:	f04f 33ff 	mov.w	r3, #4294967295
 80187f4:	e000      	b.n	80187f8 <sys_mbox_new+0x3c>

  return ERR_OK;
 80187f6:	2300      	movs	r3, #0
}
 80187f8:	4618      	mov	r0, r3
 80187fa:	3718      	adds	r7, #24
 80187fc:	46bd      	mov	sp, r7
 80187fe:	bd80      	pop	{r7, pc}

08018800 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8018800:	b580      	push	{r7, lr}
 8018802:	b082      	sub	sp, #8
 8018804:	af00      	add	r7, sp, #0
 8018806:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	4618      	mov	r0, r3
 801880e:	f7ec ffab 	bl	8005768 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	4618      	mov	r0, r3
 8018818:	f7ec ffbc 	bl	8005794 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801881c:	bf00      	nop
 801881e:	3708      	adds	r7, #8
 8018820:	46bd      	mov	sp, r7
 8018822:	bd80      	pop	{r7, pc}

08018824 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018824:	b580      	push	{r7, lr}
 8018826:	b084      	sub	sp, #16
 8018828:	af00      	add	r7, sp, #0
 801882a:	6078      	str	r0, [r7, #4]
 801882c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	6839      	ldr	r1, [r7, #0]
 8018834:	2200      	movs	r2, #0
 8018836:	4618      	mov	r0, r3
 8018838:	f7ec fee2 	bl	8005600 <osMessagePut>
 801883c:	4603      	mov	r3, r0
 801883e:	2b00      	cmp	r3, #0
 8018840:	d102      	bne.n	8018848 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8018842:	2300      	movs	r3, #0
 8018844:	73fb      	strb	r3, [r7, #15]
 8018846:	e001      	b.n	801884c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018848:	23ff      	movs	r3, #255	; 0xff
 801884a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801884c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018850:	4618      	mov	r0, r3
 8018852:	3710      	adds	r7, #16
 8018854:	46bd      	mov	sp, r7
 8018856:	bd80      	pop	{r7, pc}

08018858 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018858:	b580      	push	{r7, lr}
 801885a:	b08c      	sub	sp, #48	; 0x30
 801885c:	af00      	add	r7, sp, #0
 801885e:	61f8      	str	r0, [r7, #28]
 8018860:	61b9      	str	r1, [r7, #24]
 8018862:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8018864:	f7ec fcce 	bl	8005204 <osKernelSysTick>
 8018868:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801886a:	697b      	ldr	r3, [r7, #20]
 801886c:	2b00      	cmp	r3, #0
 801886e:	d017      	beq.n	80188a0 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8018870:	69fb      	ldr	r3, [r7, #28]
 8018872:	6819      	ldr	r1, [r3, #0]
 8018874:	f107 0320 	add.w	r3, r7, #32
 8018878:	697a      	ldr	r2, [r7, #20]
 801887a:	4618      	mov	r0, r3
 801887c:	f7ec ff00 	bl	8005680 <osMessageGet>

    if(event.status == osEventMessage)
 8018880:	6a3b      	ldr	r3, [r7, #32]
 8018882:	2b10      	cmp	r3, #16
 8018884:	d109      	bne.n	801889a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8018886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018888:	461a      	mov	r2, r3
 801888a:	69bb      	ldr	r3, [r7, #24]
 801888c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801888e:	f7ec fcb9 	bl	8005204 <osKernelSysTick>
 8018892:	4602      	mov	r2, r0
 8018894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018896:	1ad3      	subs	r3, r2, r3
 8018898:	e019      	b.n	80188ce <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801889a:	f04f 33ff 	mov.w	r3, #4294967295
 801889e:	e016      	b.n	80188ce <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80188a0:	69fb      	ldr	r3, [r7, #28]
 80188a2:	6819      	ldr	r1, [r3, #0]
 80188a4:	463b      	mov	r3, r7
 80188a6:	f04f 32ff 	mov.w	r2, #4294967295
 80188aa:	4618      	mov	r0, r3
 80188ac:	f7ec fee8 	bl	8005680 <osMessageGet>
 80188b0:	f107 0320 	add.w	r3, r7, #32
 80188b4:	463a      	mov	r2, r7
 80188b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80188b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80188bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188be:	461a      	mov	r2, r3
 80188c0:	69bb      	ldr	r3, [r7, #24]
 80188c2:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80188c4:	f7ec fc9e 	bl	8005204 <osKernelSysTick>
 80188c8:	4602      	mov	r2, r0
 80188ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188cc:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80188ce:	4618      	mov	r0, r3
 80188d0:	3730      	adds	r7, #48	; 0x30
 80188d2:	46bd      	mov	sp, r7
 80188d4:	bd80      	pop	{r7, pc}

080188d6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80188d6:	b580      	push	{r7, lr}
 80188d8:	b086      	sub	sp, #24
 80188da:	af00      	add	r7, sp, #0
 80188dc:	6078      	str	r0, [r7, #4]
 80188de:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	6819      	ldr	r1, [r3, #0]
 80188e4:	f107 030c 	add.w	r3, r7, #12
 80188e8:	2200      	movs	r2, #0
 80188ea:	4618      	mov	r0, r3
 80188ec:	f7ec fec8 	bl	8005680 <osMessageGet>

  if(event.status == osEventMessage)
 80188f0:	68fb      	ldr	r3, [r7, #12]
 80188f2:	2b10      	cmp	r3, #16
 80188f4:	d105      	bne.n	8018902 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80188f6:	693b      	ldr	r3, [r7, #16]
 80188f8:	461a      	mov	r2, r3
 80188fa:	683b      	ldr	r3, [r7, #0]
 80188fc:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 80188fe:	2300      	movs	r3, #0
 8018900:	e001      	b.n	8018906 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8018902:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8018906:	4618      	mov	r0, r3
 8018908:	3718      	adds	r7, #24
 801890a:	46bd      	mov	sp, r7
 801890c:	bd80      	pop	{r7, pc}

0801890e <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801890e:	b480      	push	{r7}
 8018910:	b083      	sub	sp, #12
 8018912:	af00      	add	r7, sp, #0
 8018914:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	2b00      	cmp	r3, #0
 801891c:	d101      	bne.n	8018922 <sys_mbox_valid+0x14>
    return 0;
 801891e:	2300      	movs	r3, #0
 8018920:	e000      	b.n	8018924 <sys_mbox_valid+0x16>
  else
    return 1;
 8018922:	2301      	movs	r3, #1
}
 8018924:	4618      	mov	r0, r3
 8018926:	370c      	adds	r7, #12
 8018928:	46bd      	mov	sp, r7
 801892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801892e:	4770      	bx	lr

08018930 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018930:	b480      	push	{r7}
 8018932:	b083      	sub	sp, #12
 8018934:	af00      	add	r7, sp, #0
 8018936:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	2200      	movs	r2, #0
 801893c:	601a      	str	r2, [r3, #0]
}
 801893e:	bf00      	nop
 8018940:	370c      	adds	r7, #12
 8018942:	46bd      	mov	sp, r7
 8018944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018948:	4770      	bx	lr

0801894a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801894a:	b580      	push	{r7, lr}
 801894c:	b084      	sub	sp, #16
 801894e:	af00      	add	r7, sp, #0
 8018950:	6078      	str	r0, [r7, #4]
 8018952:	460b      	mov	r3, r1
 8018954:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8018956:	2300      	movs	r3, #0
 8018958:	60bb      	str	r3, [r7, #8]
 801895a:	2300      	movs	r3, #0
 801895c:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801895e:	f107 0308 	add.w	r3, r7, #8
 8018962:	2101      	movs	r1, #1
 8018964:	4618      	mov	r0, r3
 8018966:	f7ec fd59 	bl	800541c <osSemaphoreCreate>
 801896a:	4602      	mov	r2, r0
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	681b      	ldr	r3, [r3, #0]
 8018974:	2b00      	cmp	r3, #0
 8018976:	d102      	bne.n	801897e <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018978:	f04f 33ff 	mov.w	r3, #4294967295
 801897c:	e009      	b.n	8018992 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801897e:	78fb      	ldrb	r3, [r7, #3]
 8018980:	2b00      	cmp	r3, #0
 8018982:	d105      	bne.n	8018990 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	681b      	ldr	r3, [r3, #0]
 8018988:	2100      	movs	r1, #0
 801898a:	4618      	mov	r0, r3
 801898c:	f7ec fd78 	bl	8005480 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018990:	2300      	movs	r3, #0
}
 8018992:	4618      	mov	r0, r3
 8018994:	3710      	adds	r7, #16
 8018996:	46bd      	mov	sp, r7
 8018998:	bd80      	pop	{r7, pc}

0801899a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801899a:	b580      	push	{r7, lr}
 801899c:	b084      	sub	sp, #16
 801899e:	af00      	add	r7, sp, #0
 80189a0:	6078      	str	r0, [r7, #4]
 80189a2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 80189a4:	f7ec fc2e 	bl	8005204 <osKernelSysTick>
 80189a8:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80189aa:	683b      	ldr	r3, [r7, #0]
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d011      	beq.n	80189d4 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	681b      	ldr	r3, [r3, #0]
 80189b4:	6839      	ldr	r1, [r7, #0]
 80189b6:	4618      	mov	r0, r3
 80189b8:	f7ec fd62 	bl	8005480 <osSemaphoreWait>
 80189bc:	4603      	mov	r3, r0
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d105      	bne.n	80189ce <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 80189c2:	f7ec fc1f 	bl	8005204 <osKernelSysTick>
 80189c6:	4602      	mov	r2, r0
 80189c8:	68fb      	ldr	r3, [r7, #12]
 80189ca:	1ad3      	subs	r3, r2, r3
 80189cc:	e012      	b.n	80189f4 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80189ce:	f04f 33ff 	mov.w	r3, #4294967295
 80189d2:	e00f      	b.n	80189f4 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80189d4:	bf00      	nop
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	681b      	ldr	r3, [r3, #0]
 80189da:	f04f 31ff 	mov.w	r1, #4294967295
 80189de:	4618      	mov	r0, r3
 80189e0:	f7ec fd4e 	bl	8005480 <osSemaphoreWait>
 80189e4:	4603      	mov	r3, r0
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d1f5      	bne.n	80189d6 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80189ea:	f7ec fc0b 	bl	8005204 <osKernelSysTick>
 80189ee:	4602      	mov	r2, r0
 80189f0:	68fb      	ldr	r3, [r7, #12]
 80189f2:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80189f4:	4618      	mov	r0, r3
 80189f6:	3710      	adds	r7, #16
 80189f8:	46bd      	mov	sp, r7
 80189fa:	bd80      	pop	{r7, pc}

080189fc <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80189fc:	b580      	push	{r7, lr}
 80189fe:	b082      	sub	sp, #8
 8018a00:	af00      	add	r7, sp, #0
 8018a02:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	681b      	ldr	r3, [r3, #0]
 8018a08:	4618      	mov	r0, r3
 8018a0a:	f7ec fd87 	bl	800551c <osSemaphoreRelease>
}
 8018a0e:	bf00      	nop
 8018a10:	3708      	adds	r7, #8
 8018a12:	46bd      	mov	sp, r7
 8018a14:	bd80      	pop	{r7, pc}

08018a16 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8018a16:	b580      	push	{r7, lr}
 8018a18:	b082      	sub	sp, #8
 8018a1a:	af00      	add	r7, sp, #0
 8018a1c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	4618      	mov	r0, r3
 8018a24:	f7ec fdb0 	bl	8005588 <osSemaphoreDelete>
}
 8018a28:	bf00      	nop
 8018a2a:	3708      	adds	r7, #8
 8018a2c:	46bd      	mov	sp, r7
 8018a2e:	bd80      	pop	{r7, pc}

08018a30 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018a30:	b480      	push	{r7}
 8018a32:	b083      	sub	sp, #12
 8018a34:	af00      	add	r7, sp, #0
 8018a36:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	681b      	ldr	r3, [r3, #0]
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d101      	bne.n	8018a44 <sys_sem_valid+0x14>
    return 0;
 8018a40:	2300      	movs	r3, #0
 8018a42:	e000      	b.n	8018a46 <sys_sem_valid+0x16>
  else
    return 1;
 8018a44:	2301      	movs	r3, #1
}
 8018a46:	4618      	mov	r0, r3
 8018a48:	370c      	adds	r7, #12
 8018a4a:	46bd      	mov	sp, r7
 8018a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a50:	4770      	bx	lr

08018a52 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8018a52:	b480      	push	{r7}
 8018a54:	b083      	sub	sp, #12
 8018a56:	af00      	add	r7, sp, #0
 8018a58:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	2200      	movs	r2, #0
 8018a5e:	601a      	str	r2, [r3, #0]
}
 8018a60:	bf00      	nop
 8018a62:	370c      	adds	r7, #12
 8018a64:	46bd      	mov	sp, r7
 8018a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a6a:	4770      	bx	lr

08018a6c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018a6c:	b580      	push	{r7, lr}
 8018a6e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8018a70:	4803      	ldr	r0, [pc, #12]	; (8018a80 <sys_init+0x14>)
 8018a72:	f7ec fc37 	bl	80052e4 <osMutexCreate>
 8018a76:	4603      	mov	r3, r0
 8018a78:	4a02      	ldr	r2, [pc, #8]	; (8018a84 <sys_init+0x18>)
 8018a7a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8018a7c:	bf00      	nop
 8018a7e:	bd80      	pop	{r7, pc}
 8018a80:	08028058 	.word	0x08028058
 8018a84:	20011100 	.word	0x20011100

08018a88 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018a88:	b580      	push	{r7, lr}
 8018a8a:	b084      	sub	sp, #16
 8018a8c:	af00      	add	r7, sp, #0
 8018a8e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8018a90:	2300      	movs	r3, #0
 8018a92:	60bb      	str	r3, [r7, #8]
 8018a94:	2300      	movs	r3, #0
 8018a96:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018a98:	f107 0308 	add.w	r3, r7, #8
 8018a9c:	4618      	mov	r0, r3
 8018a9e:	f7ec fc21 	bl	80052e4 <osMutexCreate>
 8018aa2:	4602      	mov	r2, r0
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	681b      	ldr	r3, [r3, #0]
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d102      	bne.n	8018ab6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8018ab4:	e000      	b.n	8018ab8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018ab6:	2300      	movs	r3, #0
}
 8018ab8:	4618      	mov	r0, r3
 8018aba:	3710      	adds	r7, #16
 8018abc:	46bd      	mov	sp, r7
 8018abe:	bd80      	pop	{r7, pc}

08018ac0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018ac0:	b580      	push	{r7, lr}
 8018ac2:	b082      	sub	sp, #8
 8018ac4:	af00      	add	r7, sp, #0
 8018ac6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	681b      	ldr	r3, [r3, #0]
 8018acc:	f04f 31ff 	mov.w	r1, #4294967295
 8018ad0:	4618      	mov	r0, r3
 8018ad2:	f7ec fc1f 	bl	8005314 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8018ad6:	bf00      	nop
 8018ad8:	3708      	adds	r7, #8
 8018ada:	46bd      	mov	sp, r7
 8018adc:	bd80      	pop	{r7, pc}

08018ade <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018ade:	b580      	push	{r7, lr}
 8018ae0:	b082      	sub	sp, #8
 8018ae2:	af00      	add	r7, sp, #0
 8018ae4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	4618      	mov	r0, r3
 8018aec:	f7ec fc60 	bl	80053b0 <osMutexRelease>
}
 8018af0:	bf00      	nop
 8018af2:	3708      	adds	r7, #8
 8018af4:	46bd      	mov	sp, r7
 8018af6:	bd80      	pop	{r7, pc}

08018af8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018af8:	b580      	push	{r7, lr}
 8018afa:	b08c      	sub	sp, #48	; 0x30
 8018afc:	af00      	add	r7, sp, #0
 8018afe:	60f8      	str	r0, [r7, #12]
 8018b00:	60b9      	str	r1, [r7, #8]
 8018b02:	607a      	str	r2, [r7, #4]
 8018b04:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8018b06:	f107 0314 	add.w	r3, r7, #20
 8018b0a:	2200      	movs	r2, #0
 8018b0c:	601a      	str	r2, [r3, #0]
 8018b0e:	605a      	str	r2, [r3, #4]
 8018b10:	609a      	str	r2, [r3, #8]
 8018b12:	60da      	str	r2, [r3, #12]
 8018b14:	611a      	str	r2, [r3, #16]
 8018b16:	615a      	str	r2, [r3, #20]
 8018b18:	619a      	str	r2, [r3, #24]
 8018b1a:	68fb      	ldr	r3, [r7, #12]
 8018b1c:	617b      	str	r3, [r7, #20]
 8018b1e:	68bb      	ldr	r3, [r7, #8]
 8018b20:	61bb      	str	r3, [r7, #24]
 8018b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b24:	b21b      	sxth	r3, r3
 8018b26:	83bb      	strh	r3, [r7, #28]
 8018b28:	683b      	ldr	r3, [r7, #0]
 8018b2a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018b2c:	f107 0314 	add.w	r3, r7, #20
 8018b30:	6879      	ldr	r1, [r7, #4]
 8018b32:	4618      	mov	r0, r3
 8018b34:	f7ec fb76 	bl	8005224 <osThreadCreate>
 8018b38:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8018b3a:	4618      	mov	r0, r3
 8018b3c:	3730      	adds	r7, #48	; 0x30
 8018b3e:	46bd      	mov	sp, r7
 8018b40:	bd80      	pop	{r7, pc}
	...

08018b44 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018b44:	b580      	push	{r7, lr}
 8018b46:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018b48:	4b04      	ldr	r3, [pc, #16]	; (8018b5c <sys_arch_protect+0x18>)
 8018b4a:	681b      	ldr	r3, [r3, #0]
 8018b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8018b50:	4618      	mov	r0, r3
 8018b52:	f7ec fbdf 	bl	8005314 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018b56:	2301      	movs	r3, #1
}
 8018b58:	4618      	mov	r0, r3
 8018b5a:	bd80      	pop	{r7, pc}
 8018b5c:	20011100 	.word	0x20011100

08018b60 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018b60:	b580      	push	{r7, lr}
 8018b62:	b082      	sub	sp, #8
 8018b64:	af00      	add	r7, sp, #0
 8018b66:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018b68:	4b04      	ldr	r3, [pc, #16]	; (8018b7c <sys_arch_unprotect+0x1c>)
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	4618      	mov	r0, r3
 8018b6e:	f7ec fc1f 	bl	80053b0 <osMutexRelease>
}
 8018b72:	bf00      	nop
 8018b74:	3708      	adds	r7, #8
 8018b76:	46bd      	mov	sp, r7
 8018b78:	bd80      	pop	{r7, pc}
 8018b7a:	bf00      	nop
 8018b7c:	20011100 	.word	0x20011100

08018b80 <srand>:
 8018b80:	b538      	push	{r3, r4, r5, lr}
 8018b82:	4b10      	ldr	r3, [pc, #64]	; (8018bc4 <srand+0x44>)
 8018b84:	681d      	ldr	r5, [r3, #0]
 8018b86:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8018b88:	4604      	mov	r4, r0
 8018b8a:	b9b3      	cbnz	r3, 8018bba <srand+0x3a>
 8018b8c:	2018      	movs	r0, #24
 8018b8e:	f000 fb8b 	bl	80192a8 <malloc>
 8018b92:	4602      	mov	r2, r0
 8018b94:	6328      	str	r0, [r5, #48]	; 0x30
 8018b96:	b920      	cbnz	r0, 8018ba2 <srand+0x22>
 8018b98:	4b0b      	ldr	r3, [pc, #44]	; (8018bc8 <srand+0x48>)
 8018b9a:	480c      	ldr	r0, [pc, #48]	; (8018bcc <srand+0x4c>)
 8018b9c:	2146      	movs	r1, #70	; 0x46
 8018b9e:	f000 fb19 	bl	80191d4 <__assert_func>
 8018ba2:	490b      	ldr	r1, [pc, #44]	; (8018bd0 <srand+0x50>)
 8018ba4:	4b0b      	ldr	r3, [pc, #44]	; (8018bd4 <srand+0x54>)
 8018ba6:	e9c0 1300 	strd	r1, r3, [r0]
 8018baa:	4b0b      	ldr	r3, [pc, #44]	; (8018bd8 <srand+0x58>)
 8018bac:	6083      	str	r3, [r0, #8]
 8018bae:	230b      	movs	r3, #11
 8018bb0:	8183      	strh	r3, [r0, #12]
 8018bb2:	2100      	movs	r1, #0
 8018bb4:	2001      	movs	r0, #1
 8018bb6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018bba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8018bbc:	2200      	movs	r2, #0
 8018bbe:	611c      	str	r4, [r3, #16]
 8018bc0:	615a      	str	r2, [r3, #20]
 8018bc2:	bd38      	pop	{r3, r4, r5, pc}
 8018bc4:	2000008c 	.word	0x2000008c
 8018bc8:	08028060 	.word	0x08028060
 8018bcc:	08028077 	.word	0x08028077
 8018bd0:	abcd330e 	.word	0xabcd330e
 8018bd4:	e66d1234 	.word	0xe66d1234
 8018bd8:	0005deec 	.word	0x0005deec

08018bdc <rand>:
 8018bdc:	4b16      	ldr	r3, [pc, #88]	; (8018c38 <rand+0x5c>)
 8018bde:	b510      	push	{r4, lr}
 8018be0:	681c      	ldr	r4, [r3, #0]
 8018be2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018be4:	b9b3      	cbnz	r3, 8018c14 <rand+0x38>
 8018be6:	2018      	movs	r0, #24
 8018be8:	f000 fb5e 	bl	80192a8 <malloc>
 8018bec:	4602      	mov	r2, r0
 8018bee:	6320      	str	r0, [r4, #48]	; 0x30
 8018bf0:	b920      	cbnz	r0, 8018bfc <rand+0x20>
 8018bf2:	4b12      	ldr	r3, [pc, #72]	; (8018c3c <rand+0x60>)
 8018bf4:	4812      	ldr	r0, [pc, #72]	; (8018c40 <rand+0x64>)
 8018bf6:	2152      	movs	r1, #82	; 0x52
 8018bf8:	f000 faec 	bl	80191d4 <__assert_func>
 8018bfc:	4911      	ldr	r1, [pc, #68]	; (8018c44 <rand+0x68>)
 8018bfe:	4b12      	ldr	r3, [pc, #72]	; (8018c48 <rand+0x6c>)
 8018c00:	e9c0 1300 	strd	r1, r3, [r0]
 8018c04:	4b11      	ldr	r3, [pc, #68]	; (8018c4c <rand+0x70>)
 8018c06:	6083      	str	r3, [r0, #8]
 8018c08:	230b      	movs	r3, #11
 8018c0a:	8183      	strh	r3, [r0, #12]
 8018c0c:	2100      	movs	r1, #0
 8018c0e:	2001      	movs	r0, #1
 8018c10:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018c14:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018c16:	480e      	ldr	r0, [pc, #56]	; (8018c50 <rand+0x74>)
 8018c18:	690b      	ldr	r3, [r1, #16]
 8018c1a:	694c      	ldr	r4, [r1, #20]
 8018c1c:	4a0d      	ldr	r2, [pc, #52]	; (8018c54 <rand+0x78>)
 8018c1e:	4358      	muls	r0, r3
 8018c20:	fb02 0004 	mla	r0, r2, r4, r0
 8018c24:	fba3 3202 	umull	r3, r2, r3, r2
 8018c28:	3301      	adds	r3, #1
 8018c2a:	eb40 0002 	adc.w	r0, r0, r2
 8018c2e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018c32:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018c36:	bd10      	pop	{r4, pc}
 8018c38:	2000008c 	.word	0x2000008c
 8018c3c:	08028060 	.word	0x08028060
 8018c40:	08028077 	.word	0x08028077
 8018c44:	abcd330e 	.word	0xabcd330e
 8018c48:	e66d1234 	.word	0xe66d1234
 8018c4c:	0005deec 	.word	0x0005deec
 8018c50:	5851f42d 	.word	0x5851f42d
 8018c54:	4c957f2d 	.word	0x4c957f2d

08018c58 <std>:
 8018c58:	2300      	movs	r3, #0
 8018c5a:	b510      	push	{r4, lr}
 8018c5c:	4604      	mov	r4, r0
 8018c5e:	e9c0 3300 	strd	r3, r3, [r0]
 8018c62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018c66:	6083      	str	r3, [r0, #8]
 8018c68:	8181      	strh	r1, [r0, #12]
 8018c6a:	6643      	str	r3, [r0, #100]	; 0x64
 8018c6c:	81c2      	strh	r2, [r0, #14]
 8018c6e:	6183      	str	r3, [r0, #24]
 8018c70:	4619      	mov	r1, r3
 8018c72:	2208      	movs	r2, #8
 8018c74:	305c      	adds	r0, #92	; 0x5c
 8018c76:	f000 f93e 	bl	8018ef6 <memset>
 8018c7a:	4b05      	ldr	r3, [pc, #20]	; (8018c90 <std+0x38>)
 8018c7c:	6263      	str	r3, [r4, #36]	; 0x24
 8018c7e:	4b05      	ldr	r3, [pc, #20]	; (8018c94 <std+0x3c>)
 8018c80:	62a3      	str	r3, [r4, #40]	; 0x28
 8018c82:	4b05      	ldr	r3, [pc, #20]	; (8018c98 <std+0x40>)
 8018c84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018c86:	4b05      	ldr	r3, [pc, #20]	; (8018c9c <std+0x44>)
 8018c88:	6224      	str	r4, [r4, #32]
 8018c8a:	6323      	str	r3, [r4, #48]	; 0x30
 8018c8c:	bd10      	pop	{r4, pc}
 8018c8e:	bf00      	nop
 8018c90:	08018e1d 	.word	0x08018e1d
 8018c94:	08018e3f 	.word	0x08018e3f
 8018c98:	08018e77 	.word	0x08018e77
 8018c9c:	08018e9b 	.word	0x08018e9b

08018ca0 <stdio_exit_handler>:
 8018ca0:	4a02      	ldr	r2, [pc, #8]	; (8018cac <stdio_exit_handler+0xc>)
 8018ca2:	4903      	ldr	r1, [pc, #12]	; (8018cb0 <stdio_exit_handler+0x10>)
 8018ca4:	4803      	ldr	r0, [pc, #12]	; (8018cb4 <stdio_exit_handler+0x14>)
 8018ca6:	f000 b869 	b.w	8018d7c <_fwalk_sglue>
 8018caa:	bf00      	nop
 8018cac:	20000034 	.word	0x20000034
 8018cb0:	08019d75 	.word	0x08019d75
 8018cb4:	20000040 	.word	0x20000040

08018cb8 <cleanup_stdio>:
 8018cb8:	6841      	ldr	r1, [r0, #4]
 8018cba:	4b0c      	ldr	r3, [pc, #48]	; (8018cec <cleanup_stdio+0x34>)
 8018cbc:	4299      	cmp	r1, r3
 8018cbe:	b510      	push	{r4, lr}
 8018cc0:	4604      	mov	r4, r0
 8018cc2:	d001      	beq.n	8018cc8 <cleanup_stdio+0x10>
 8018cc4:	f001 f856 	bl	8019d74 <_fflush_r>
 8018cc8:	68a1      	ldr	r1, [r4, #8]
 8018cca:	4b09      	ldr	r3, [pc, #36]	; (8018cf0 <cleanup_stdio+0x38>)
 8018ccc:	4299      	cmp	r1, r3
 8018cce:	d002      	beq.n	8018cd6 <cleanup_stdio+0x1e>
 8018cd0:	4620      	mov	r0, r4
 8018cd2:	f001 f84f 	bl	8019d74 <_fflush_r>
 8018cd6:	68e1      	ldr	r1, [r4, #12]
 8018cd8:	4b06      	ldr	r3, [pc, #24]	; (8018cf4 <cleanup_stdio+0x3c>)
 8018cda:	4299      	cmp	r1, r3
 8018cdc:	d004      	beq.n	8018ce8 <cleanup_stdio+0x30>
 8018cde:	4620      	mov	r0, r4
 8018ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ce4:	f001 b846 	b.w	8019d74 <_fflush_r>
 8018ce8:	bd10      	pop	{r4, pc}
 8018cea:	bf00      	nop
 8018cec:	20011104 	.word	0x20011104
 8018cf0:	2001116c 	.word	0x2001116c
 8018cf4:	200111d4 	.word	0x200111d4

08018cf8 <global_stdio_init.part.0>:
 8018cf8:	b510      	push	{r4, lr}
 8018cfa:	4b0b      	ldr	r3, [pc, #44]	; (8018d28 <global_stdio_init.part.0+0x30>)
 8018cfc:	4c0b      	ldr	r4, [pc, #44]	; (8018d2c <global_stdio_init.part.0+0x34>)
 8018cfe:	4a0c      	ldr	r2, [pc, #48]	; (8018d30 <global_stdio_init.part.0+0x38>)
 8018d00:	601a      	str	r2, [r3, #0]
 8018d02:	4620      	mov	r0, r4
 8018d04:	2200      	movs	r2, #0
 8018d06:	2104      	movs	r1, #4
 8018d08:	f7ff ffa6 	bl	8018c58 <std>
 8018d0c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018d10:	2201      	movs	r2, #1
 8018d12:	2109      	movs	r1, #9
 8018d14:	f7ff ffa0 	bl	8018c58 <std>
 8018d18:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8018d1c:	2202      	movs	r2, #2
 8018d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018d22:	2112      	movs	r1, #18
 8018d24:	f7ff bf98 	b.w	8018c58 <std>
 8018d28:	2001123c 	.word	0x2001123c
 8018d2c:	20011104 	.word	0x20011104
 8018d30:	08018ca1 	.word	0x08018ca1

08018d34 <__sfp_lock_acquire>:
 8018d34:	4801      	ldr	r0, [pc, #4]	; (8018d3c <__sfp_lock_acquire+0x8>)
 8018d36:	f000 ba3d 	b.w	80191b4 <__retarget_lock_acquire_recursive>
 8018d3a:	bf00      	nop
 8018d3c:	20011245 	.word	0x20011245

08018d40 <__sfp_lock_release>:
 8018d40:	4801      	ldr	r0, [pc, #4]	; (8018d48 <__sfp_lock_release+0x8>)
 8018d42:	f000 ba38 	b.w	80191b6 <__retarget_lock_release_recursive>
 8018d46:	bf00      	nop
 8018d48:	20011245 	.word	0x20011245

08018d4c <__sinit>:
 8018d4c:	b510      	push	{r4, lr}
 8018d4e:	4604      	mov	r4, r0
 8018d50:	f7ff fff0 	bl	8018d34 <__sfp_lock_acquire>
 8018d54:	6a23      	ldr	r3, [r4, #32]
 8018d56:	b11b      	cbz	r3, 8018d60 <__sinit+0x14>
 8018d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018d5c:	f7ff bff0 	b.w	8018d40 <__sfp_lock_release>
 8018d60:	4b04      	ldr	r3, [pc, #16]	; (8018d74 <__sinit+0x28>)
 8018d62:	6223      	str	r3, [r4, #32]
 8018d64:	4b04      	ldr	r3, [pc, #16]	; (8018d78 <__sinit+0x2c>)
 8018d66:	681b      	ldr	r3, [r3, #0]
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	d1f5      	bne.n	8018d58 <__sinit+0xc>
 8018d6c:	f7ff ffc4 	bl	8018cf8 <global_stdio_init.part.0>
 8018d70:	e7f2      	b.n	8018d58 <__sinit+0xc>
 8018d72:	bf00      	nop
 8018d74:	08018cb9 	.word	0x08018cb9
 8018d78:	2001123c 	.word	0x2001123c

08018d7c <_fwalk_sglue>:
 8018d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018d80:	4607      	mov	r7, r0
 8018d82:	4688      	mov	r8, r1
 8018d84:	4614      	mov	r4, r2
 8018d86:	2600      	movs	r6, #0
 8018d88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018d8c:	f1b9 0901 	subs.w	r9, r9, #1
 8018d90:	d505      	bpl.n	8018d9e <_fwalk_sglue+0x22>
 8018d92:	6824      	ldr	r4, [r4, #0]
 8018d94:	2c00      	cmp	r4, #0
 8018d96:	d1f7      	bne.n	8018d88 <_fwalk_sglue+0xc>
 8018d98:	4630      	mov	r0, r6
 8018d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018d9e:	89ab      	ldrh	r3, [r5, #12]
 8018da0:	2b01      	cmp	r3, #1
 8018da2:	d907      	bls.n	8018db4 <_fwalk_sglue+0x38>
 8018da4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018da8:	3301      	adds	r3, #1
 8018daa:	d003      	beq.n	8018db4 <_fwalk_sglue+0x38>
 8018dac:	4629      	mov	r1, r5
 8018dae:	4638      	mov	r0, r7
 8018db0:	47c0      	blx	r8
 8018db2:	4306      	orrs	r6, r0
 8018db4:	3568      	adds	r5, #104	; 0x68
 8018db6:	e7e9      	b.n	8018d8c <_fwalk_sglue+0x10>

08018db8 <iprintf>:
 8018db8:	b40f      	push	{r0, r1, r2, r3}
 8018dba:	b507      	push	{r0, r1, r2, lr}
 8018dbc:	4906      	ldr	r1, [pc, #24]	; (8018dd8 <iprintf+0x20>)
 8018dbe:	ab04      	add	r3, sp, #16
 8018dc0:	6808      	ldr	r0, [r1, #0]
 8018dc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8018dc6:	6881      	ldr	r1, [r0, #8]
 8018dc8:	9301      	str	r3, [sp, #4]
 8018dca:	f000 fca3 	bl	8019714 <_vfiprintf_r>
 8018dce:	b003      	add	sp, #12
 8018dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8018dd4:	b004      	add	sp, #16
 8018dd6:	4770      	bx	lr
 8018dd8:	2000008c 	.word	0x2000008c

08018ddc <siprintf>:
 8018ddc:	b40e      	push	{r1, r2, r3}
 8018dde:	b500      	push	{lr}
 8018de0:	b09c      	sub	sp, #112	; 0x70
 8018de2:	ab1d      	add	r3, sp, #116	; 0x74
 8018de4:	9002      	str	r0, [sp, #8]
 8018de6:	9006      	str	r0, [sp, #24]
 8018de8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018dec:	4809      	ldr	r0, [pc, #36]	; (8018e14 <siprintf+0x38>)
 8018dee:	9107      	str	r1, [sp, #28]
 8018df0:	9104      	str	r1, [sp, #16]
 8018df2:	4909      	ldr	r1, [pc, #36]	; (8018e18 <siprintf+0x3c>)
 8018df4:	f853 2b04 	ldr.w	r2, [r3], #4
 8018df8:	9105      	str	r1, [sp, #20]
 8018dfa:	6800      	ldr	r0, [r0, #0]
 8018dfc:	9301      	str	r3, [sp, #4]
 8018dfe:	a902      	add	r1, sp, #8
 8018e00:	f000 fb60 	bl	80194c4 <_svfiprintf_r>
 8018e04:	9b02      	ldr	r3, [sp, #8]
 8018e06:	2200      	movs	r2, #0
 8018e08:	701a      	strb	r2, [r3, #0]
 8018e0a:	b01c      	add	sp, #112	; 0x70
 8018e0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018e10:	b003      	add	sp, #12
 8018e12:	4770      	bx	lr
 8018e14:	2000008c 	.word	0x2000008c
 8018e18:	ffff0208 	.word	0xffff0208

08018e1c <__sread>:
 8018e1c:	b510      	push	{r4, lr}
 8018e1e:	460c      	mov	r4, r1
 8018e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e24:	f000 f97e 	bl	8019124 <_read_r>
 8018e28:	2800      	cmp	r0, #0
 8018e2a:	bfab      	itete	ge
 8018e2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018e2e:	89a3      	ldrhlt	r3, [r4, #12]
 8018e30:	181b      	addge	r3, r3, r0
 8018e32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018e36:	bfac      	ite	ge
 8018e38:	6563      	strge	r3, [r4, #84]	; 0x54
 8018e3a:	81a3      	strhlt	r3, [r4, #12]
 8018e3c:	bd10      	pop	{r4, pc}

08018e3e <__swrite>:
 8018e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e42:	461f      	mov	r7, r3
 8018e44:	898b      	ldrh	r3, [r1, #12]
 8018e46:	05db      	lsls	r3, r3, #23
 8018e48:	4605      	mov	r5, r0
 8018e4a:	460c      	mov	r4, r1
 8018e4c:	4616      	mov	r6, r2
 8018e4e:	d505      	bpl.n	8018e5c <__swrite+0x1e>
 8018e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e54:	2302      	movs	r3, #2
 8018e56:	2200      	movs	r2, #0
 8018e58:	f000 f952 	bl	8019100 <_lseek_r>
 8018e5c:	89a3      	ldrh	r3, [r4, #12]
 8018e5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018e62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018e66:	81a3      	strh	r3, [r4, #12]
 8018e68:	4632      	mov	r2, r6
 8018e6a:	463b      	mov	r3, r7
 8018e6c:	4628      	mov	r0, r5
 8018e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018e72:	f000 b969 	b.w	8019148 <_write_r>

08018e76 <__sseek>:
 8018e76:	b510      	push	{r4, lr}
 8018e78:	460c      	mov	r4, r1
 8018e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e7e:	f000 f93f 	bl	8019100 <_lseek_r>
 8018e82:	1c43      	adds	r3, r0, #1
 8018e84:	89a3      	ldrh	r3, [r4, #12]
 8018e86:	bf15      	itete	ne
 8018e88:	6560      	strne	r0, [r4, #84]	; 0x54
 8018e8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018e8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018e92:	81a3      	strheq	r3, [r4, #12]
 8018e94:	bf18      	it	ne
 8018e96:	81a3      	strhne	r3, [r4, #12]
 8018e98:	bd10      	pop	{r4, pc}

08018e9a <__sclose>:
 8018e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e9e:	f000 b8c9 	b.w	8019034 <_close_r>

08018ea2 <memcmp>:
 8018ea2:	b510      	push	{r4, lr}
 8018ea4:	3901      	subs	r1, #1
 8018ea6:	4402      	add	r2, r0
 8018ea8:	4290      	cmp	r0, r2
 8018eaa:	d101      	bne.n	8018eb0 <memcmp+0xe>
 8018eac:	2000      	movs	r0, #0
 8018eae:	e005      	b.n	8018ebc <memcmp+0x1a>
 8018eb0:	7803      	ldrb	r3, [r0, #0]
 8018eb2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018eb6:	42a3      	cmp	r3, r4
 8018eb8:	d001      	beq.n	8018ebe <memcmp+0x1c>
 8018eba:	1b18      	subs	r0, r3, r4
 8018ebc:	bd10      	pop	{r4, pc}
 8018ebe:	3001      	adds	r0, #1
 8018ec0:	e7f2      	b.n	8018ea8 <memcmp+0x6>

08018ec2 <memmove>:
 8018ec2:	4288      	cmp	r0, r1
 8018ec4:	b510      	push	{r4, lr}
 8018ec6:	eb01 0402 	add.w	r4, r1, r2
 8018eca:	d902      	bls.n	8018ed2 <memmove+0x10>
 8018ecc:	4284      	cmp	r4, r0
 8018ece:	4623      	mov	r3, r4
 8018ed0:	d807      	bhi.n	8018ee2 <memmove+0x20>
 8018ed2:	1e43      	subs	r3, r0, #1
 8018ed4:	42a1      	cmp	r1, r4
 8018ed6:	d008      	beq.n	8018eea <memmove+0x28>
 8018ed8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018edc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018ee0:	e7f8      	b.n	8018ed4 <memmove+0x12>
 8018ee2:	4402      	add	r2, r0
 8018ee4:	4601      	mov	r1, r0
 8018ee6:	428a      	cmp	r2, r1
 8018ee8:	d100      	bne.n	8018eec <memmove+0x2a>
 8018eea:	bd10      	pop	{r4, pc}
 8018eec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018ef0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018ef4:	e7f7      	b.n	8018ee6 <memmove+0x24>

08018ef6 <memset>:
 8018ef6:	4402      	add	r2, r0
 8018ef8:	4603      	mov	r3, r0
 8018efa:	4293      	cmp	r3, r2
 8018efc:	d100      	bne.n	8018f00 <memset+0xa>
 8018efe:	4770      	bx	lr
 8018f00:	f803 1b01 	strb.w	r1, [r3], #1
 8018f04:	e7f9      	b.n	8018efa <memset+0x4>
	...

08018f08 <strcasecmp>:
 8018f08:	b530      	push	{r4, r5, lr}
 8018f0a:	4d0b      	ldr	r5, [pc, #44]	; (8018f38 <strcasecmp+0x30>)
 8018f0c:	4604      	mov	r4, r0
 8018f0e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018f12:	5cea      	ldrb	r2, [r5, r3]
 8018f14:	f002 0203 	and.w	r2, r2, #3
 8018f18:	2a01      	cmp	r2, #1
 8018f1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018f1e:	5ca8      	ldrb	r0, [r5, r2]
 8018f20:	f000 0003 	and.w	r0, r0, #3
 8018f24:	bf08      	it	eq
 8018f26:	3320      	addeq	r3, #32
 8018f28:	2801      	cmp	r0, #1
 8018f2a:	bf08      	it	eq
 8018f2c:	3220      	addeq	r2, #32
 8018f2e:	1a98      	subs	r0, r3, r2
 8018f30:	d101      	bne.n	8018f36 <strcasecmp+0x2e>
 8018f32:	2a00      	cmp	r2, #0
 8018f34:	d1eb      	bne.n	8018f0e <strcasecmp+0x6>
 8018f36:	bd30      	pop	{r4, r5, pc}
 8018f38:	080280d0 	.word	0x080280d0

08018f3c <strchr>:
 8018f3c:	b2c9      	uxtb	r1, r1
 8018f3e:	4603      	mov	r3, r0
 8018f40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018f44:	b11a      	cbz	r2, 8018f4e <strchr+0x12>
 8018f46:	428a      	cmp	r2, r1
 8018f48:	d1f9      	bne.n	8018f3e <strchr+0x2>
 8018f4a:	4618      	mov	r0, r3
 8018f4c:	4770      	bx	lr
 8018f4e:	2900      	cmp	r1, #0
 8018f50:	bf18      	it	ne
 8018f52:	2300      	movne	r3, #0
 8018f54:	e7f9      	b.n	8018f4a <strchr+0xe>

08018f56 <strncmp>:
 8018f56:	b510      	push	{r4, lr}
 8018f58:	b16a      	cbz	r2, 8018f76 <strncmp+0x20>
 8018f5a:	3901      	subs	r1, #1
 8018f5c:	1884      	adds	r4, r0, r2
 8018f5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018f62:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018f66:	429a      	cmp	r2, r3
 8018f68:	d103      	bne.n	8018f72 <strncmp+0x1c>
 8018f6a:	42a0      	cmp	r0, r4
 8018f6c:	d001      	beq.n	8018f72 <strncmp+0x1c>
 8018f6e:	2a00      	cmp	r2, #0
 8018f70:	d1f5      	bne.n	8018f5e <strncmp+0x8>
 8018f72:	1ad0      	subs	r0, r2, r3
 8018f74:	bd10      	pop	{r4, pc}
 8018f76:	4610      	mov	r0, r2
 8018f78:	e7fc      	b.n	8018f74 <strncmp+0x1e>
	...

08018f7c <strtok>:
 8018f7c:	4b16      	ldr	r3, [pc, #88]	; (8018fd8 <strtok+0x5c>)
 8018f7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018f80:	681e      	ldr	r6, [r3, #0]
 8018f82:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8018f84:	4605      	mov	r5, r0
 8018f86:	b9fc      	cbnz	r4, 8018fc8 <strtok+0x4c>
 8018f88:	2050      	movs	r0, #80	; 0x50
 8018f8a:	9101      	str	r1, [sp, #4]
 8018f8c:	f000 f98c 	bl	80192a8 <malloc>
 8018f90:	9901      	ldr	r1, [sp, #4]
 8018f92:	6470      	str	r0, [r6, #68]	; 0x44
 8018f94:	4602      	mov	r2, r0
 8018f96:	b920      	cbnz	r0, 8018fa2 <strtok+0x26>
 8018f98:	4b10      	ldr	r3, [pc, #64]	; (8018fdc <strtok+0x60>)
 8018f9a:	4811      	ldr	r0, [pc, #68]	; (8018fe0 <strtok+0x64>)
 8018f9c:	215b      	movs	r1, #91	; 0x5b
 8018f9e:	f000 f919 	bl	80191d4 <__assert_func>
 8018fa2:	e9c0 4400 	strd	r4, r4, [r0]
 8018fa6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8018faa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8018fae:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8018fb2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8018fb6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8018fba:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8018fbe:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8018fc2:	6184      	str	r4, [r0, #24]
 8018fc4:	7704      	strb	r4, [r0, #28]
 8018fc6:	6244      	str	r4, [r0, #36]	; 0x24
 8018fc8:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8018fca:	2301      	movs	r3, #1
 8018fcc:	4628      	mov	r0, r5
 8018fce:	b002      	add	sp, #8
 8018fd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018fd4:	f000 b806 	b.w	8018fe4 <__strtok_r>
 8018fd8:	2000008c 	.word	0x2000008c
 8018fdc:	08028060 	.word	0x08028060
 8018fe0:	080281d0 	.word	0x080281d0

08018fe4 <__strtok_r>:
 8018fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018fe6:	b908      	cbnz	r0, 8018fec <__strtok_r+0x8>
 8018fe8:	6810      	ldr	r0, [r2, #0]
 8018fea:	b188      	cbz	r0, 8019010 <__strtok_r+0x2c>
 8018fec:	4604      	mov	r4, r0
 8018fee:	4620      	mov	r0, r4
 8018ff0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8018ff4:	460f      	mov	r7, r1
 8018ff6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8018ffa:	b91e      	cbnz	r6, 8019004 <__strtok_r+0x20>
 8018ffc:	b965      	cbnz	r5, 8019018 <__strtok_r+0x34>
 8018ffe:	6015      	str	r5, [r2, #0]
 8019000:	4628      	mov	r0, r5
 8019002:	e005      	b.n	8019010 <__strtok_r+0x2c>
 8019004:	42b5      	cmp	r5, r6
 8019006:	d1f6      	bne.n	8018ff6 <__strtok_r+0x12>
 8019008:	2b00      	cmp	r3, #0
 801900a:	d1f0      	bne.n	8018fee <__strtok_r+0xa>
 801900c:	6014      	str	r4, [r2, #0]
 801900e:	7003      	strb	r3, [r0, #0]
 8019010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019012:	461c      	mov	r4, r3
 8019014:	e00c      	b.n	8019030 <__strtok_r+0x4c>
 8019016:	b915      	cbnz	r5, 801901e <__strtok_r+0x3a>
 8019018:	f814 3b01 	ldrb.w	r3, [r4], #1
 801901c:	460e      	mov	r6, r1
 801901e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8019022:	42ab      	cmp	r3, r5
 8019024:	d1f7      	bne.n	8019016 <__strtok_r+0x32>
 8019026:	2b00      	cmp	r3, #0
 8019028:	d0f3      	beq.n	8019012 <__strtok_r+0x2e>
 801902a:	2300      	movs	r3, #0
 801902c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8019030:	6014      	str	r4, [r2, #0]
 8019032:	e7ed      	b.n	8019010 <__strtok_r+0x2c>

08019034 <_close_r>:
 8019034:	b538      	push	{r3, r4, r5, lr}
 8019036:	4d06      	ldr	r5, [pc, #24]	; (8019050 <_close_r+0x1c>)
 8019038:	2300      	movs	r3, #0
 801903a:	4604      	mov	r4, r0
 801903c:	4608      	mov	r0, r1
 801903e:	602b      	str	r3, [r5, #0]
 8019040:	f7e7 fe3f 	bl	8000cc2 <_close>
 8019044:	1c43      	adds	r3, r0, #1
 8019046:	d102      	bne.n	801904e <_close_r+0x1a>
 8019048:	682b      	ldr	r3, [r5, #0]
 801904a:	b103      	cbz	r3, 801904e <_close_r+0x1a>
 801904c:	6023      	str	r3, [r4, #0]
 801904e:	bd38      	pop	{r3, r4, r5, pc}
 8019050:	20011240 	.word	0x20011240

08019054 <_reclaim_reent>:
 8019054:	4b29      	ldr	r3, [pc, #164]	; (80190fc <_reclaim_reent+0xa8>)
 8019056:	681b      	ldr	r3, [r3, #0]
 8019058:	4283      	cmp	r3, r0
 801905a:	b570      	push	{r4, r5, r6, lr}
 801905c:	4604      	mov	r4, r0
 801905e:	d04b      	beq.n	80190f8 <_reclaim_reent+0xa4>
 8019060:	69c3      	ldr	r3, [r0, #28]
 8019062:	b143      	cbz	r3, 8019076 <_reclaim_reent+0x22>
 8019064:	68db      	ldr	r3, [r3, #12]
 8019066:	2b00      	cmp	r3, #0
 8019068:	d144      	bne.n	80190f4 <_reclaim_reent+0xa0>
 801906a:	69e3      	ldr	r3, [r4, #28]
 801906c:	6819      	ldr	r1, [r3, #0]
 801906e:	b111      	cbz	r1, 8019076 <_reclaim_reent+0x22>
 8019070:	4620      	mov	r0, r4
 8019072:	f000 f8cd 	bl	8019210 <_free_r>
 8019076:	6961      	ldr	r1, [r4, #20]
 8019078:	b111      	cbz	r1, 8019080 <_reclaim_reent+0x2c>
 801907a:	4620      	mov	r0, r4
 801907c:	f000 f8c8 	bl	8019210 <_free_r>
 8019080:	69e1      	ldr	r1, [r4, #28]
 8019082:	b111      	cbz	r1, 801908a <_reclaim_reent+0x36>
 8019084:	4620      	mov	r0, r4
 8019086:	f000 f8c3 	bl	8019210 <_free_r>
 801908a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801908c:	b111      	cbz	r1, 8019094 <_reclaim_reent+0x40>
 801908e:	4620      	mov	r0, r4
 8019090:	f000 f8be 	bl	8019210 <_free_r>
 8019094:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019096:	b111      	cbz	r1, 801909e <_reclaim_reent+0x4a>
 8019098:	4620      	mov	r0, r4
 801909a:	f000 f8b9 	bl	8019210 <_free_r>
 801909e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80190a0:	b111      	cbz	r1, 80190a8 <_reclaim_reent+0x54>
 80190a2:	4620      	mov	r0, r4
 80190a4:	f000 f8b4 	bl	8019210 <_free_r>
 80190a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80190aa:	b111      	cbz	r1, 80190b2 <_reclaim_reent+0x5e>
 80190ac:	4620      	mov	r0, r4
 80190ae:	f000 f8af 	bl	8019210 <_free_r>
 80190b2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80190b4:	b111      	cbz	r1, 80190bc <_reclaim_reent+0x68>
 80190b6:	4620      	mov	r0, r4
 80190b8:	f000 f8aa 	bl	8019210 <_free_r>
 80190bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80190be:	b111      	cbz	r1, 80190c6 <_reclaim_reent+0x72>
 80190c0:	4620      	mov	r0, r4
 80190c2:	f000 f8a5 	bl	8019210 <_free_r>
 80190c6:	6a23      	ldr	r3, [r4, #32]
 80190c8:	b1b3      	cbz	r3, 80190f8 <_reclaim_reent+0xa4>
 80190ca:	4620      	mov	r0, r4
 80190cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80190d0:	4718      	bx	r3
 80190d2:	5949      	ldr	r1, [r1, r5]
 80190d4:	b941      	cbnz	r1, 80190e8 <_reclaim_reent+0x94>
 80190d6:	3504      	adds	r5, #4
 80190d8:	69e3      	ldr	r3, [r4, #28]
 80190da:	2d80      	cmp	r5, #128	; 0x80
 80190dc:	68d9      	ldr	r1, [r3, #12]
 80190de:	d1f8      	bne.n	80190d2 <_reclaim_reent+0x7e>
 80190e0:	4620      	mov	r0, r4
 80190e2:	f000 f895 	bl	8019210 <_free_r>
 80190e6:	e7c0      	b.n	801906a <_reclaim_reent+0x16>
 80190e8:	680e      	ldr	r6, [r1, #0]
 80190ea:	4620      	mov	r0, r4
 80190ec:	f000 f890 	bl	8019210 <_free_r>
 80190f0:	4631      	mov	r1, r6
 80190f2:	e7ef      	b.n	80190d4 <_reclaim_reent+0x80>
 80190f4:	2500      	movs	r5, #0
 80190f6:	e7ef      	b.n	80190d8 <_reclaim_reent+0x84>
 80190f8:	bd70      	pop	{r4, r5, r6, pc}
 80190fa:	bf00      	nop
 80190fc:	2000008c 	.word	0x2000008c

08019100 <_lseek_r>:
 8019100:	b538      	push	{r3, r4, r5, lr}
 8019102:	4d07      	ldr	r5, [pc, #28]	; (8019120 <_lseek_r+0x20>)
 8019104:	4604      	mov	r4, r0
 8019106:	4608      	mov	r0, r1
 8019108:	4611      	mov	r1, r2
 801910a:	2200      	movs	r2, #0
 801910c:	602a      	str	r2, [r5, #0]
 801910e:	461a      	mov	r2, r3
 8019110:	f7e7 fdfe 	bl	8000d10 <_lseek>
 8019114:	1c43      	adds	r3, r0, #1
 8019116:	d102      	bne.n	801911e <_lseek_r+0x1e>
 8019118:	682b      	ldr	r3, [r5, #0]
 801911a:	b103      	cbz	r3, 801911e <_lseek_r+0x1e>
 801911c:	6023      	str	r3, [r4, #0]
 801911e:	bd38      	pop	{r3, r4, r5, pc}
 8019120:	20011240 	.word	0x20011240

08019124 <_read_r>:
 8019124:	b538      	push	{r3, r4, r5, lr}
 8019126:	4d07      	ldr	r5, [pc, #28]	; (8019144 <_read_r+0x20>)
 8019128:	4604      	mov	r4, r0
 801912a:	4608      	mov	r0, r1
 801912c:	4611      	mov	r1, r2
 801912e:	2200      	movs	r2, #0
 8019130:	602a      	str	r2, [r5, #0]
 8019132:	461a      	mov	r2, r3
 8019134:	f7e7 fd8c 	bl	8000c50 <_read>
 8019138:	1c43      	adds	r3, r0, #1
 801913a:	d102      	bne.n	8019142 <_read_r+0x1e>
 801913c:	682b      	ldr	r3, [r5, #0]
 801913e:	b103      	cbz	r3, 8019142 <_read_r+0x1e>
 8019140:	6023      	str	r3, [r4, #0]
 8019142:	bd38      	pop	{r3, r4, r5, pc}
 8019144:	20011240 	.word	0x20011240

08019148 <_write_r>:
 8019148:	b538      	push	{r3, r4, r5, lr}
 801914a:	4d07      	ldr	r5, [pc, #28]	; (8019168 <_write_r+0x20>)
 801914c:	4604      	mov	r4, r0
 801914e:	4608      	mov	r0, r1
 8019150:	4611      	mov	r1, r2
 8019152:	2200      	movs	r2, #0
 8019154:	602a      	str	r2, [r5, #0]
 8019156:	461a      	mov	r2, r3
 8019158:	f7e7 fd97 	bl	8000c8a <_write>
 801915c:	1c43      	adds	r3, r0, #1
 801915e:	d102      	bne.n	8019166 <_write_r+0x1e>
 8019160:	682b      	ldr	r3, [r5, #0]
 8019162:	b103      	cbz	r3, 8019166 <_write_r+0x1e>
 8019164:	6023      	str	r3, [r4, #0]
 8019166:	bd38      	pop	{r3, r4, r5, pc}
 8019168:	20011240 	.word	0x20011240

0801916c <__libc_init_array>:
 801916c:	b570      	push	{r4, r5, r6, lr}
 801916e:	4d0d      	ldr	r5, [pc, #52]	; (80191a4 <__libc_init_array+0x38>)
 8019170:	4c0d      	ldr	r4, [pc, #52]	; (80191a8 <__libc_init_array+0x3c>)
 8019172:	1b64      	subs	r4, r4, r5
 8019174:	10a4      	asrs	r4, r4, #2
 8019176:	2600      	movs	r6, #0
 8019178:	42a6      	cmp	r6, r4
 801917a:	d109      	bne.n	8019190 <__libc_init_array+0x24>
 801917c:	4d0b      	ldr	r5, [pc, #44]	; (80191ac <__libc_init_array+0x40>)
 801917e:	4c0c      	ldr	r4, [pc, #48]	; (80191b0 <__libc_init_array+0x44>)
 8019180:	f000 ffde 	bl	801a140 <_init>
 8019184:	1b64      	subs	r4, r4, r5
 8019186:	10a4      	asrs	r4, r4, #2
 8019188:	2600      	movs	r6, #0
 801918a:	42a6      	cmp	r6, r4
 801918c:	d105      	bne.n	801919a <__libc_init_array+0x2e>
 801918e:	bd70      	pop	{r4, r5, r6, pc}
 8019190:	f855 3b04 	ldr.w	r3, [r5], #4
 8019194:	4798      	blx	r3
 8019196:	3601      	adds	r6, #1
 8019198:	e7ee      	b.n	8019178 <__libc_init_array+0xc>
 801919a:	f855 3b04 	ldr.w	r3, [r5], #4
 801919e:	4798      	blx	r3
 80191a0:	3601      	adds	r6, #1
 80191a2:	e7f2      	b.n	801918a <__libc_init_array+0x1e>
 80191a4:	080282a4 	.word	0x080282a4
 80191a8:	080282a4 	.word	0x080282a4
 80191ac:	080282a4 	.word	0x080282a4
 80191b0:	080282a8 	.word	0x080282a8

080191b4 <__retarget_lock_acquire_recursive>:
 80191b4:	4770      	bx	lr

080191b6 <__retarget_lock_release_recursive>:
 80191b6:	4770      	bx	lr

080191b8 <memcpy>:
 80191b8:	440a      	add	r2, r1
 80191ba:	4291      	cmp	r1, r2
 80191bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80191c0:	d100      	bne.n	80191c4 <memcpy+0xc>
 80191c2:	4770      	bx	lr
 80191c4:	b510      	push	{r4, lr}
 80191c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80191ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80191ce:	4291      	cmp	r1, r2
 80191d0:	d1f9      	bne.n	80191c6 <memcpy+0xe>
 80191d2:	bd10      	pop	{r4, pc}

080191d4 <__assert_func>:
 80191d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80191d6:	4614      	mov	r4, r2
 80191d8:	461a      	mov	r2, r3
 80191da:	4b09      	ldr	r3, [pc, #36]	; (8019200 <__assert_func+0x2c>)
 80191dc:	681b      	ldr	r3, [r3, #0]
 80191de:	4605      	mov	r5, r0
 80191e0:	68d8      	ldr	r0, [r3, #12]
 80191e2:	b14c      	cbz	r4, 80191f8 <__assert_func+0x24>
 80191e4:	4b07      	ldr	r3, [pc, #28]	; (8019204 <__assert_func+0x30>)
 80191e6:	9100      	str	r1, [sp, #0]
 80191e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80191ec:	4906      	ldr	r1, [pc, #24]	; (8019208 <__assert_func+0x34>)
 80191ee:	462b      	mov	r3, r5
 80191f0:	f000 fde8 	bl	8019dc4 <fiprintf>
 80191f4:	f000 fe9e 	bl	8019f34 <abort>
 80191f8:	4b04      	ldr	r3, [pc, #16]	; (801920c <__assert_func+0x38>)
 80191fa:	461c      	mov	r4, r3
 80191fc:	e7f3      	b.n	80191e6 <__assert_func+0x12>
 80191fe:	bf00      	nop
 8019200:	2000008c 	.word	0x2000008c
 8019204:	0802822a 	.word	0x0802822a
 8019208:	08028237 	.word	0x08028237
 801920c:	08028265 	.word	0x08028265

08019210 <_free_r>:
 8019210:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019212:	2900      	cmp	r1, #0
 8019214:	d044      	beq.n	80192a0 <_free_r+0x90>
 8019216:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801921a:	9001      	str	r0, [sp, #4]
 801921c:	2b00      	cmp	r3, #0
 801921e:	f1a1 0404 	sub.w	r4, r1, #4
 8019222:	bfb8      	it	lt
 8019224:	18e4      	addlt	r4, r4, r3
 8019226:	f000 f8e7 	bl	80193f8 <__malloc_lock>
 801922a:	4a1e      	ldr	r2, [pc, #120]	; (80192a4 <_free_r+0x94>)
 801922c:	9801      	ldr	r0, [sp, #4]
 801922e:	6813      	ldr	r3, [r2, #0]
 8019230:	b933      	cbnz	r3, 8019240 <_free_r+0x30>
 8019232:	6063      	str	r3, [r4, #4]
 8019234:	6014      	str	r4, [r2, #0]
 8019236:	b003      	add	sp, #12
 8019238:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801923c:	f000 b8e2 	b.w	8019404 <__malloc_unlock>
 8019240:	42a3      	cmp	r3, r4
 8019242:	d908      	bls.n	8019256 <_free_r+0x46>
 8019244:	6825      	ldr	r5, [r4, #0]
 8019246:	1961      	adds	r1, r4, r5
 8019248:	428b      	cmp	r3, r1
 801924a:	bf01      	itttt	eq
 801924c:	6819      	ldreq	r1, [r3, #0]
 801924e:	685b      	ldreq	r3, [r3, #4]
 8019250:	1949      	addeq	r1, r1, r5
 8019252:	6021      	streq	r1, [r4, #0]
 8019254:	e7ed      	b.n	8019232 <_free_r+0x22>
 8019256:	461a      	mov	r2, r3
 8019258:	685b      	ldr	r3, [r3, #4]
 801925a:	b10b      	cbz	r3, 8019260 <_free_r+0x50>
 801925c:	42a3      	cmp	r3, r4
 801925e:	d9fa      	bls.n	8019256 <_free_r+0x46>
 8019260:	6811      	ldr	r1, [r2, #0]
 8019262:	1855      	adds	r5, r2, r1
 8019264:	42a5      	cmp	r5, r4
 8019266:	d10b      	bne.n	8019280 <_free_r+0x70>
 8019268:	6824      	ldr	r4, [r4, #0]
 801926a:	4421      	add	r1, r4
 801926c:	1854      	adds	r4, r2, r1
 801926e:	42a3      	cmp	r3, r4
 8019270:	6011      	str	r1, [r2, #0]
 8019272:	d1e0      	bne.n	8019236 <_free_r+0x26>
 8019274:	681c      	ldr	r4, [r3, #0]
 8019276:	685b      	ldr	r3, [r3, #4]
 8019278:	6053      	str	r3, [r2, #4]
 801927a:	440c      	add	r4, r1
 801927c:	6014      	str	r4, [r2, #0]
 801927e:	e7da      	b.n	8019236 <_free_r+0x26>
 8019280:	d902      	bls.n	8019288 <_free_r+0x78>
 8019282:	230c      	movs	r3, #12
 8019284:	6003      	str	r3, [r0, #0]
 8019286:	e7d6      	b.n	8019236 <_free_r+0x26>
 8019288:	6825      	ldr	r5, [r4, #0]
 801928a:	1961      	adds	r1, r4, r5
 801928c:	428b      	cmp	r3, r1
 801928e:	bf04      	itt	eq
 8019290:	6819      	ldreq	r1, [r3, #0]
 8019292:	685b      	ldreq	r3, [r3, #4]
 8019294:	6063      	str	r3, [r4, #4]
 8019296:	bf04      	itt	eq
 8019298:	1949      	addeq	r1, r1, r5
 801929a:	6021      	streq	r1, [r4, #0]
 801929c:	6054      	str	r4, [r2, #4]
 801929e:	e7ca      	b.n	8019236 <_free_r+0x26>
 80192a0:	b003      	add	sp, #12
 80192a2:	bd30      	pop	{r4, r5, pc}
 80192a4:	20011248 	.word	0x20011248

080192a8 <malloc>:
 80192a8:	4b02      	ldr	r3, [pc, #8]	; (80192b4 <malloc+0xc>)
 80192aa:	4601      	mov	r1, r0
 80192ac:	6818      	ldr	r0, [r3, #0]
 80192ae:	f000 b823 	b.w	80192f8 <_malloc_r>
 80192b2:	bf00      	nop
 80192b4:	2000008c 	.word	0x2000008c

080192b8 <sbrk_aligned>:
 80192b8:	b570      	push	{r4, r5, r6, lr}
 80192ba:	4e0e      	ldr	r6, [pc, #56]	; (80192f4 <sbrk_aligned+0x3c>)
 80192bc:	460c      	mov	r4, r1
 80192be:	6831      	ldr	r1, [r6, #0]
 80192c0:	4605      	mov	r5, r0
 80192c2:	b911      	cbnz	r1, 80192ca <sbrk_aligned+0x12>
 80192c4:	f000 fe26 	bl	8019f14 <_sbrk_r>
 80192c8:	6030      	str	r0, [r6, #0]
 80192ca:	4621      	mov	r1, r4
 80192cc:	4628      	mov	r0, r5
 80192ce:	f000 fe21 	bl	8019f14 <_sbrk_r>
 80192d2:	1c43      	adds	r3, r0, #1
 80192d4:	d00a      	beq.n	80192ec <sbrk_aligned+0x34>
 80192d6:	1cc4      	adds	r4, r0, #3
 80192d8:	f024 0403 	bic.w	r4, r4, #3
 80192dc:	42a0      	cmp	r0, r4
 80192de:	d007      	beq.n	80192f0 <sbrk_aligned+0x38>
 80192e0:	1a21      	subs	r1, r4, r0
 80192e2:	4628      	mov	r0, r5
 80192e4:	f000 fe16 	bl	8019f14 <_sbrk_r>
 80192e8:	3001      	adds	r0, #1
 80192ea:	d101      	bne.n	80192f0 <sbrk_aligned+0x38>
 80192ec:	f04f 34ff 	mov.w	r4, #4294967295
 80192f0:	4620      	mov	r0, r4
 80192f2:	bd70      	pop	{r4, r5, r6, pc}
 80192f4:	2001124c 	.word	0x2001124c

080192f8 <_malloc_r>:
 80192f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80192fc:	1ccd      	adds	r5, r1, #3
 80192fe:	f025 0503 	bic.w	r5, r5, #3
 8019302:	3508      	adds	r5, #8
 8019304:	2d0c      	cmp	r5, #12
 8019306:	bf38      	it	cc
 8019308:	250c      	movcc	r5, #12
 801930a:	2d00      	cmp	r5, #0
 801930c:	4607      	mov	r7, r0
 801930e:	db01      	blt.n	8019314 <_malloc_r+0x1c>
 8019310:	42a9      	cmp	r1, r5
 8019312:	d905      	bls.n	8019320 <_malloc_r+0x28>
 8019314:	230c      	movs	r3, #12
 8019316:	603b      	str	r3, [r7, #0]
 8019318:	2600      	movs	r6, #0
 801931a:	4630      	mov	r0, r6
 801931c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019320:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80193f4 <_malloc_r+0xfc>
 8019324:	f000 f868 	bl	80193f8 <__malloc_lock>
 8019328:	f8d8 3000 	ldr.w	r3, [r8]
 801932c:	461c      	mov	r4, r3
 801932e:	bb5c      	cbnz	r4, 8019388 <_malloc_r+0x90>
 8019330:	4629      	mov	r1, r5
 8019332:	4638      	mov	r0, r7
 8019334:	f7ff ffc0 	bl	80192b8 <sbrk_aligned>
 8019338:	1c43      	adds	r3, r0, #1
 801933a:	4604      	mov	r4, r0
 801933c:	d155      	bne.n	80193ea <_malloc_r+0xf2>
 801933e:	f8d8 4000 	ldr.w	r4, [r8]
 8019342:	4626      	mov	r6, r4
 8019344:	2e00      	cmp	r6, #0
 8019346:	d145      	bne.n	80193d4 <_malloc_r+0xdc>
 8019348:	2c00      	cmp	r4, #0
 801934a:	d048      	beq.n	80193de <_malloc_r+0xe6>
 801934c:	6823      	ldr	r3, [r4, #0]
 801934e:	4631      	mov	r1, r6
 8019350:	4638      	mov	r0, r7
 8019352:	eb04 0903 	add.w	r9, r4, r3
 8019356:	f000 fddd 	bl	8019f14 <_sbrk_r>
 801935a:	4581      	cmp	r9, r0
 801935c:	d13f      	bne.n	80193de <_malloc_r+0xe6>
 801935e:	6821      	ldr	r1, [r4, #0]
 8019360:	1a6d      	subs	r5, r5, r1
 8019362:	4629      	mov	r1, r5
 8019364:	4638      	mov	r0, r7
 8019366:	f7ff ffa7 	bl	80192b8 <sbrk_aligned>
 801936a:	3001      	adds	r0, #1
 801936c:	d037      	beq.n	80193de <_malloc_r+0xe6>
 801936e:	6823      	ldr	r3, [r4, #0]
 8019370:	442b      	add	r3, r5
 8019372:	6023      	str	r3, [r4, #0]
 8019374:	f8d8 3000 	ldr.w	r3, [r8]
 8019378:	2b00      	cmp	r3, #0
 801937a:	d038      	beq.n	80193ee <_malloc_r+0xf6>
 801937c:	685a      	ldr	r2, [r3, #4]
 801937e:	42a2      	cmp	r2, r4
 8019380:	d12b      	bne.n	80193da <_malloc_r+0xe2>
 8019382:	2200      	movs	r2, #0
 8019384:	605a      	str	r2, [r3, #4]
 8019386:	e00f      	b.n	80193a8 <_malloc_r+0xb0>
 8019388:	6822      	ldr	r2, [r4, #0]
 801938a:	1b52      	subs	r2, r2, r5
 801938c:	d41f      	bmi.n	80193ce <_malloc_r+0xd6>
 801938e:	2a0b      	cmp	r2, #11
 8019390:	d917      	bls.n	80193c2 <_malloc_r+0xca>
 8019392:	1961      	adds	r1, r4, r5
 8019394:	42a3      	cmp	r3, r4
 8019396:	6025      	str	r5, [r4, #0]
 8019398:	bf18      	it	ne
 801939a:	6059      	strne	r1, [r3, #4]
 801939c:	6863      	ldr	r3, [r4, #4]
 801939e:	bf08      	it	eq
 80193a0:	f8c8 1000 	streq.w	r1, [r8]
 80193a4:	5162      	str	r2, [r4, r5]
 80193a6:	604b      	str	r3, [r1, #4]
 80193a8:	4638      	mov	r0, r7
 80193aa:	f104 060b 	add.w	r6, r4, #11
 80193ae:	f000 f829 	bl	8019404 <__malloc_unlock>
 80193b2:	f026 0607 	bic.w	r6, r6, #7
 80193b6:	1d23      	adds	r3, r4, #4
 80193b8:	1af2      	subs	r2, r6, r3
 80193ba:	d0ae      	beq.n	801931a <_malloc_r+0x22>
 80193bc:	1b9b      	subs	r3, r3, r6
 80193be:	50a3      	str	r3, [r4, r2]
 80193c0:	e7ab      	b.n	801931a <_malloc_r+0x22>
 80193c2:	42a3      	cmp	r3, r4
 80193c4:	6862      	ldr	r2, [r4, #4]
 80193c6:	d1dd      	bne.n	8019384 <_malloc_r+0x8c>
 80193c8:	f8c8 2000 	str.w	r2, [r8]
 80193cc:	e7ec      	b.n	80193a8 <_malloc_r+0xb0>
 80193ce:	4623      	mov	r3, r4
 80193d0:	6864      	ldr	r4, [r4, #4]
 80193d2:	e7ac      	b.n	801932e <_malloc_r+0x36>
 80193d4:	4634      	mov	r4, r6
 80193d6:	6876      	ldr	r6, [r6, #4]
 80193d8:	e7b4      	b.n	8019344 <_malloc_r+0x4c>
 80193da:	4613      	mov	r3, r2
 80193dc:	e7cc      	b.n	8019378 <_malloc_r+0x80>
 80193de:	230c      	movs	r3, #12
 80193e0:	603b      	str	r3, [r7, #0]
 80193e2:	4638      	mov	r0, r7
 80193e4:	f000 f80e 	bl	8019404 <__malloc_unlock>
 80193e8:	e797      	b.n	801931a <_malloc_r+0x22>
 80193ea:	6025      	str	r5, [r4, #0]
 80193ec:	e7dc      	b.n	80193a8 <_malloc_r+0xb0>
 80193ee:	605b      	str	r3, [r3, #4]
 80193f0:	deff      	udf	#255	; 0xff
 80193f2:	bf00      	nop
 80193f4:	20011248 	.word	0x20011248

080193f8 <__malloc_lock>:
 80193f8:	4801      	ldr	r0, [pc, #4]	; (8019400 <__malloc_lock+0x8>)
 80193fa:	f7ff bedb 	b.w	80191b4 <__retarget_lock_acquire_recursive>
 80193fe:	bf00      	nop
 8019400:	20011244 	.word	0x20011244

08019404 <__malloc_unlock>:
 8019404:	4801      	ldr	r0, [pc, #4]	; (801940c <__malloc_unlock+0x8>)
 8019406:	f7ff bed6 	b.w	80191b6 <__retarget_lock_release_recursive>
 801940a:	bf00      	nop
 801940c:	20011244 	.word	0x20011244

08019410 <__ssputs_r>:
 8019410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019414:	688e      	ldr	r6, [r1, #8]
 8019416:	461f      	mov	r7, r3
 8019418:	42be      	cmp	r6, r7
 801941a:	680b      	ldr	r3, [r1, #0]
 801941c:	4682      	mov	sl, r0
 801941e:	460c      	mov	r4, r1
 8019420:	4690      	mov	r8, r2
 8019422:	d82c      	bhi.n	801947e <__ssputs_r+0x6e>
 8019424:	898a      	ldrh	r2, [r1, #12]
 8019426:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801942a:	d026      	beq.n	801947a <__ssputs_r+0x6a>
 801942c:	6965      	ldr	r5, [r4, #20]
 801942e:	6909      	ldr	r1, [r1, #16]
 8019430:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019434:	eba3 0901 	sub.w	r9, r3, r1
 8019438:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801943c:	1c7b      	adds	r3, r7, #1
 801943e:	444b      	add	r3, r9
 8019440:	106d      	asrs	r5, r5, #1
 8019442:	429d      	cmp	r5, r3
 8019444:	bf38      	it	cc
 8019446:	461d      	movcc	r5, r3
 8019448:	0553      	lsls	r3, r2, #21
 801944a:	d527      	bpl.n	801949c <__ssputs_r+0x8c>
 801944c:	4629      	mov	r1, r5
 801944e:	f7ff ff53 	bl	80192f8 <_malloc_r>
 8019452:	4606      	mov	r6, r0
 8019454:	b360      	cbz	r0, 80194b0 <__ssputs_r+0xa0>
 8019456:	6921      	ldr	r1, [r4, #16]
 8019458:	464a      	mov	r2, r9
 801945a:	f7ff fead 	bl	80191b8 <memcpy>
 801945e:	89a3      	ldrh	r3, [r4, #12]
 8019460:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019468:	81a3      	strh	r3, [r4, #12]
 801946a:	6126      	str	r6, [r4, #16]
 801946c:	6165      	str	r5, [r4, #20]
 801946e:	444e      	add	r6, r9
 8019470:	eba5 0509 	sub.w	r5, r5, r9
 8019474:	6026      	str	r6, [r4, #0]
 8019476:	60a5      	str	r5, [r4, #8]
 8019478:	463e      	mov	r6, r7
 801947a:	42be      	cmp	r6, r7
 801947c:	d900      	bls.n	8019480 <__ssputs_r+0x70>
 801947e:	463e      	mov	r6, r7
 8019480:	6820      	ldr	r0, [r4, #0]
 8019482:	4632      	mov	r2, r6
 8019484:	4641      	mov	r1, r8
 8019486:	f7ff fd1c 	bl	8018ec2 <memmove>
 801948a:	68a3      	ldr	r3, [r4, #8]
 801948c:	1b9b      	subs	r3, r3, r6
 801948e:	60a3      	str	r3, [r4, #8]
 8019490:	6823      	ldr	r3, [r4, #0]
 8019492:	4433      	add	r3, r6
 8019494:	6023      	str	r3, [r4, #0]
 8019496:	2000      	movs	r0, #0
 8019498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801949c:	462a      	mov	r2, r5
 801949e:	f000 fd50 	bl	8019f42 <_realloc_r>
 80194a2:	4606      	mov	r6, r0
 80194a4:	2800      	cmp	r0, #0
 80194a6:	d1e0      	bne.n	801946a <__ssputs_r+0x5a>
 80194a8:	6921      	ldr	r1, [r4, #16]
 80194aa:	4650      	mov	r0, sl
 80194ac:	f7ff feb0 	bl	8019210 <_free_r>
 80194b0:	230c      	movs	r3, #12
 80194b2:	f8ca 3000 	str.w	r3, [sl]
 80194b6:	89a3      	ldrh	r3, [r4, #12]
 80194b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80194bc:	81a3      	strh	r3, [r4, #12]
 80194be:	f04f 30ff 	mov.w	r0, #4294967295
 80194c2:	e7e9      	b.n	8019498 <__ssputs_r+0x88>

080194c4 <_svfiprintf_r>:
 80194c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194c8:	4698      	mov	r8, r3
 80194ca:	898b      	ldrh	r3, [r1, #12]
 80194cc:	061b      	lsls	r3, r3, #24
 80194ce:	b09d      	sub	sp, #116	; 0x74
 80194d0:	4607      	mov	r7, r0
 80194d2:	460d      	mov	r5, r1
 80194d4:	4614      	mov	r4, r2
 80194d6:	d50e      	bpl.n	80194f6 <_svfiprintf_r+0x32>
 80194d8:	690b      	ldr	r3, [r1, #16]
 80194da:	b963      	cbnz	r3, 80194f6 <_svfiprintf_r+0x32>
 80194dc:	2140      	movs	r1, #64	; 0x40
 80194de:	f7ff ff0b 	bl	80192f8 <_malloc_r>
 80194e2:	6028      	str	r0, [r5, #0]
 80194e4:	6128      	str	r0, [r5, #16]
 80194e6:	b920      	cbnz	r0, 80194f2 <_svfiprintf_r+0x2e>
 80194e8:	230c      	movs	r3, #12
 80194ea:	603b      	str	r3, [r7, #0]
 80194ec:	f04f 30ff 	mov.w	r0, #4294967295
 80194f0:	e0d0      	b.n	8019694 <_svfiprintf_r+0x1d0>
 80194f2:	2340      	movs	r3, #64	; 0x40
 80194f4:	616b      	str	r3, [r5, #20]
 80194f6:	2300      	movs	r3, #0
 80194f8:	9309      	str	r3, [sp, #36]	; 0x24
 80194fa:	2320      	movs	r3, #32
 80194fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019500:	f8cd 800c 	str.w	r8, [sp, #12]
 8019504:	2330      	movs	r3, #48	; 0x30
 8019506:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80196ac <_svfiprintf_r+0x1e8>
 801950a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801950e:	f04f 0901 	mov.w	r9, #1
 8019512:	4623      	mov	r3, r4
 8019514:	469a      	mov	sl, r3
 8019516:	f813 2b01 	ldrb.w	r2, [r3], #1
 801951a:	b10a      	cbz	r2, 8019520 <_svfiprintf_r+0x5c>
 801951c:	2a25      	cmp	r2, #37	; 0x25
 801951e:	d1f9      	bne.n	8019514 <_svfiprintf_r+0x50>
 8019520:	ebba 0b04 	subs.w	fp, sl, r4
 8019524:	d00b      	beq.n	801953e <_svfiprintf_r+0x7a>
 8019526:	465b      	mov	r3, fp
 8019528:	4622      	mov	r2, r4
 801952a:	4629      	mov	r1, r5
 801952c:	4638      	mov	r0, r7
 801952e:	f7ff ff6f 	bl	8019410 <__ssputs_r>
 8019532:	3001      	adds	r0, #1
 8019534:	f000 80a9 	beq.w	801968a <_svfiprintf_r+0x1c6>
 8019538:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801953a:	445a      	add	r2, fp
 801953c:	9209      	str	r2, [sp, #36]	; 0x24
 801953e:	f89a 3000 	ldrb.w	r3, [sl]
 8019542:	2b00      	cmp	r3, #0
 8019544:	f000 80a1 	beq.w	801968a <_svfiprintf_r+0x1c6>
 8019548:	2300      	movs	r3, #0
 801954a:	f04f 32ff 	mov.w	r2, #4294967295
 801954e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019552:	f10a 0a01 	add.w	sl, sl, #1
 8019556:	9304      	str	r3, [sp, #16]
 8019558:	9307      	str	r3, [sp, #28]
 801955a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801955e:	931a      	str	r3, [sp, #104]	; 0x68
 8019560:	4654      	mov	r4, sl
 8019562:	2205      	movs	r2, #5
 8019564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019568:	4850      	ldr	r0, [pc, #320]	; (80196ac <_svfiprintf_r+0x1e8>)
 801956a:	f7e6 fe59 	bl	8000220 <memchr>
 801956e:	9a04      	ldr	r2, [sp, #16]
 8019570:	b9d8      	cbnz	r0, 80195aa <_svfiprintf_r+0xe6>
 8019572:	06d0      	lsls	r0, r2, #27
 8019574:	bf44      	itt	mi
 8019576:	2320      	movmi	r3, #32
 8019578:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801957c:	0711      	lsls	r1, r2, #28
 801957e:	bf44      	itt	mi
 8019580:	232b      	movmi	r3, #43	; 0x2b
 8019582:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019586:	f89a 3000 	ldrb.w	r3, [sl]
 801958a:	2b2a      	cmp	r3, #42	; 0x2a
 801958c:	d015      	beq.n	80195ba <_svfiprintf_r+0xf6>
 801958e:	9a07      	ldr	r2, [sp, #28]
 8019590:	4654      	mov	r4, sl
 8019592:	2000      	movs	r0, #0
 8019594:	f04f 0c0a 	mov.w	ip, #10
 8019598:	4621      	mov	r1, r4
 801959a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801959e:	3b30      	subs	r3, #48	; 0x30
 80195a0:	2b09      	cmp	r3, #9
 80195a2:	d94d      	bls.n	8019640 <_svfiprintf_r+0x17c>
 80195a4:	b1b0      	cbz	r0, 80195d4 <_svfiprintf_r+0x110>
 80195a6:	9207      	str	r2, [sp, #28]
 80195a8:	e014      	b.n	80195d4 <_svfiprintf_r+0x110>
 80195aa:	eba0 0308 	sub.w	r3, r0, r8
 80195ae:	fa09 f303 	lsl.w	r3, r9, r3
 80195b2:	4313      	orrs	r3, r2
 80195b4:	9304      	str	r3, [sp, #16]
 80195b6:	46a2      	mov	sl, r4
 80195b8:	e7d2      	b.n	8019560 <_svfiprintf_r+0x9c>
 80195ba:	9b03      	ldr	r3, [sp, #12]
 80195bc:	1d19      	adds	r1, r3, #4
 80195be:	681b      	ldr	r3, [r3, #0]
 80195c0:	9103      	str	r1, [sp, #12]
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	bfbb      	ittet	lt
 80195c6:	425b      	neglt	r3, r3
 80195c8:	f042 0202 	orrlt.w	r2, r2, #2
 80195cc:	9307      	strge	r3, [sp, #28]
 80195ce:	9307      	strlt	r3, [sp, #28]
 80195d0:	bfb8      	it	lt
 80195d2:	9204      	strlt	r2, [sp, #16]
 80195d4:	7823      	ldrb	r3, [r4, #0]
 80195d6:	2b2e      	cmp	r3, #46	; 0x2e
 80195d8:	d10c      	bne.n	80195f4 <_svfiprintf_r+0x130>
 80195da:	7863      	ldrb	r3, [r4, #1]
 80195dc:	2b2a      	cmp	r3, #42	; 0x2a
 80195de:	d134      	bne.n	801964a <_svfiprintf_r+0x186>
 80195e0:	9b03      	ldr	r3, [sp, #12]
 80195e2:	1d1a      	adds	r2, r3, #4
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	9203      	str	r2, [sp, #12]
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	bfb8      	it	lt
 80195ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80195f0:	3402      	adds	r4, #2
 80195f2:	9305      	str	r3, [sp, #20]
 80195f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80196bc <_svfiprintf_r+0x1f8>
 80195f8:	7821      	ldrb	r1, [r4, #0]
 80195fa:	2203      	movs	r2, #3
 80195fc:	4650      	mov	r0, sl
 80195fe:	f7e6 fe0f 	bl	8000220 <memchr>
 8019602:	b138      	cbz	r0, 8019614 <_svfiprintf_r+0x150>
 8019604:	9b04      	ldr	r3, [sp, #16]
 8019606:	eba0 000a 	sub.w	r0, r0, sl
 801960a:	2240      	movs	r2, #64	; 0x40
 801960c:	4082      	lsls	r2, r0
 801960e:	4313      	orrs	r3, r2
 8019610:	3401      	adds	r4, #1
 8019612:	9304      	str	r3, [sp, #16]
 8019614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019618:	4825      	ldr	r0, [pc, #148]	; (80196b0 <_svfiprintf_r+0x1ec>)
 801961a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801961e:	2206      	movs	r2, #6
 8019620:	f7e6 fdfe 	bl	8000220 <memchr>
 8019624:	2800      	cmp	r0, #0
 8019626:	d038      	beq.n	801969a <_svfiprintf_r+0x1d6>
 8019628:	4b22      	ldr	r3, [pc, #136]	; (80196b4 <_svfiprintf_r+0x1f0>)
 801962a:	bb1b      	cbnz	r3, 8019674 <_svfiprintf_r+0x1b0>
 801962c:	9b03      	ldr	r3, [sp, #12]
 801962e:	3307      	adds	r3, #7
 8019630:	f023 0307 	bic.w	r3, r3, #7
 8019634:	3308      	adds	r3, #8
 8019636:	9303      	str	r3, [sp, #12]
 8019638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801963a:	4433      	add	r3, r6
 801963c:	9309      	str	r3, [sp, #36]	; 0x24
 801963e:	e768      	b.n	8019512 <_svfiprintf_r+0x4e>
 8019640:	fb0c 3202 	mla	r2, ip, r2, r3
 8019644:	460c      	mov	r4, r1
 8019646:	2001      	movs	r0, #1
 8019648:	e7a6      	b.n	8019598 <_svfiprintf_r+0xd4>
 801964a:	2300      	movs	r3, #0
 801964c:	3401      	adds	r4, #1
 801964e:	9305      	str	r3, [sp, #20]
 8019650:	4619      	mov	r1, r3
 8019652:	f04f 0c0a 	mov.w	ip, #10
 8019656:	4620      	mov	r0, r4
 8019658:	f810 2b01 	ldrb.w	r2, [r0], #1
 801965c:	3a30      	subs	r2, #48	; 0x30
 801965e:	2a09      	cmp	r2, #9
 8019660:	d903      	bls.n	801966a <_svfiprintf_r+0x1a6>
 8019662:	2b00      	cmp	r3, #0
 8019664:	d0c6      	beq.n	80195f4 <_svfiprintf_r+0x130>
 8019666:	9105      	str	r1, [sp, #20]
 8019668:	e7c4      	b.n	80195f4 <_svfiprintf_r+0x130>
 801966a:	fb0c 2101 	mla	r1, ip, r1, r2
 801966e:	4604      	mov	r4, r0
 8019670:	2301      	movs	r3, #1
 8019672:	e7f0      	b.n	8019656 <_svfiprintf_r+0x192>
 8019674:	ab03      	add	r3, sp, #12
 8019676:	9300      	str	r3, [sp, #0]
 8019678:	462a      	mov	r2, r5
 801967a:	4b0f      	ldr	r3, [pc, #60]	; (80196b8 <_svfiprintf_r+0x1f4>)
 801967c:	a904      	add	r1, sp, #16
 801967e:	4638      	mov	r0, r7
 8019680:	f3af 8000 	nop.w
 8019684:	1c42      	adds	r2, r0, #1
 8019686:	4606      	mov	r6, r0
 8019688:	d1d6      	bne.n	8019638 <_svfiprintf_r+0x174>
 801968a:	89ab      	ldrh	r3, [r5, #12]
 801968c:	065b      	lsls	r3, r3, #25
 801968e:	f53f af2d 	bmi.w	80194ec <_svfiprintf_r+0x28>
 8019692:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019694:	b01d      	add	sp, #116	; 0x74
 8019696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801969a:	ab03      	add	r3, sp, #12
 801969c:	9300      	str	r3, [sp, #0]
 801969e:	462a      	mov	r2, r5
 80196a0:	4b05      	ldr	r3, [pc, #20]	; (80196b8 <_svfiprintf_r+0x1f4>)
 80196a2:	a904      	add	r1, sp, #16
 80196a4:	4638      	mov	r0, r7
 80196a6:	f000 f9bd 	bl	8019a24 <_printf_i>
 80196aa:	e7eb      	b.n	8019684 <_svfiprintf_r+0x1c0>
 80196ac:	08028266 	.word	0x08028266
 80196b0:	08028270 	.word	0x08028270
 80196b4:	00000000 	.word	0x00000000
 80196b8:	08019411 	.word	0x08019411
 80196bc:	0802826c 	.word	0x0802826c

080196c0 <__sfputc_r>:
 80196c0:	6893      	ldr	r3, [r2, #8]
 80196c2:	3b01      	subs	r3, #1
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	b410      	push	{r4}
 80196c8:	6093      	str	r3, [r2, #8]
 80196ca:	da08      	bge.n	80196de <__sfputc_r+0x1e>
 80196cc:	6994      	ldr	r4, [r2, #24]
 80196ce:	42a3      	cmp	r3, r4
 80196d0:	db01      	blt.n	80196d6 <__sfputc_r+0x16>
 80196d2:	290a      	cmp	r1, #10
 80196d4:	d103      	bne.n	80196de <__sfputc_r+0x1e>
 80196d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80196da:	f000 bb85 	b.w	8019de8 <__swbuf_r>
 80196de:	6813      	ldr	r3, [r2, #0]
 80196e0:	1c58      	adds	r0, r3, #1
 80196e2:	6010      	str	r0, [r2, #0]
 80196e4:	7019      	strb	r1, [r3, #0]
 80196e6:	4608      	mov	r0, r1
 80196e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80196ec:	4770      	bx	lr

080196ee <__sfputs_r>:
 80196ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196f0:	4606      	mov	r6, r0
 80196f2:	460f      	mov	r7, r1
 80196f4:	4614      	mov	r4, r2
 80196f6:	18d5      	adds	r5, r2, r3
 80196f8:	42ac      	cmp	r4, r5
 80196fa:	d101      	bne.n	8019700 <__sfputs_r+0x12>
 80196fc:	2000      	movs	r0, #0
 80196fe:	e007      	b.n	8019710 <__sfputs_r+0x22>
 8019700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019704:	463a      	mov	r2, r7
 8019706:	4630      	mov	r0, r6
 8019708:	f7ff ffda 	bl	80196c0 <__sfputc_r>
 801970c:	1c43      	adds	r3, r0, #1
 801970e:	d1f3      	bne.n	80196f8 <__sfputs_r+0xa>
 8019710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019714 <_vfiprintf_r>:
 8019714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019718:	460d      	mov	r5, r1
 801971a:	b09d      	sub	sp, #116	; 0x74
 801971c:	4614      	mov	r4, r2
 801971e:	4698      	mov	r8, r3
 8019720:	4606      	mov	r6, r0
 8019722:	b118      	cbz	r0, 801972c <_vfiprintf_r+0x18>
 8019724:	6a03      	ldr	r3, [r0, #32]
 8019726:	b90b      	cbnz	r3, 801972c <_vfiprintf_r+0x18>
 8019728:	f7ff fb10 	bl	8018d4c <__sinit>
 801972c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801972e:	07d9      	lsls	r1, r3, #31
 8019730:	d405      	bmi.n	801973e <_vfiprintf_r+0x2a>
 8019732:	89ab      	ldrh	r3, [r5, #12]
 8019734:	059a      	lsls	r2, r3, #22
 8019736:	d402      	bmi.n	801973e <_vfiprintf_r+0x2a>
 8019738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801973a:	f7ff fd3b 	bl	80191b4 <__retarget_lock_acquire_recursive>
 801973e:	89ab      	ldrh	r3, [r5, #12]
 8019740:	071b      	lsls	r3, r3, #28
 8019742:	d501      	bpl.n	8019748 <_vfiprintf_r+0x34>
 8019744:	692b      	ldr	r3, [r5, #16]
 8019746:	b99b      	cbnz	r3, 8019770 <_vfiprintf_r+0x5c>
 8019748:	4629      	mov	r1, r5
 801974a:	4630      	mov	r0, r6
 801974c:	f000 fb8a 	bl	8019e64 <__swsetup_r>
 8019750:	b170      	cbz	r0, 8019770 <_vfiprintf_r+0x5c>
 8019752:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019754:	07dc      	lsls	r4, r3, #31
 8019756:	d504      	bpl.n	8019762 <_vfiprintf_r+0x4e>
 8019758:	f04f 30ff 	mov.w	r0, #4294967295
 801975c:	b01d      	add	sp, #116	; 0x74
 801975e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019762:	89ab      	ldrh	r3, [r5, #12]
 8019764:	0598      	lsls	r0, r3, #22
 8019766:	d4f7      	bmi.n	8019758 <_vfiprintf_r+0x44>
 8019768:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801976a:	f7ff fd24 	bl	80191b6 <__retarget_lock_release_recursive>
 801976e:	e7f3      	b.n	8019758 <_vfiprintf_r+0x44>
 8019770:	2300      	movs	r3, #0
 8019772:	9309      	str	r3, [sp, #36]	; 0x24
 8019774:	2320      	movs	r3, #32
 8019776:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801977a:	f8cd 800c 	str.w	r8, [sp, #12]
 801977e:	2330      	movs	r3, #48	; 0x30
 8019780:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8019934 <_vfiprintf_r+0x220>
 8019784:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019788:	f04f 0901 	mov.w	r9, #1
 801978c:	4623      	mov	r3, r4
 801978e:	469a      	mov	sl, r3
 8019790:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019794:	b10a      	cbz	r2, 801979a <_vfiprintf_r+0x86>
 8019796:	2a25      	cmp	r2, #37	; 0x25
 8019798:	d1f9      	bne.n	801978e <_vfiprintf_r+0x7a>
 801979a:	ebba 0b04 	subs.w	fp, sl, r4
 801979e:	d00b      	beq.n	80197b8 <_vfiprintf_r+0xa4>
 80197a0:	465b      	mov	r3, fp
 80197a2:	4622      	mov	r2, r4
 80197a4:	4629      	mov	r1, r5
 80197a6:	4630      	mov	r0, r6
 80197a8:	f7ff ffa1 	bl	80196ee <__sfputs_r>
 80197ac:	3001      	adds	r0, #1
 80197ae:	f000 80a9 	beq.w	8019904 <_vfiprintf_r+0x1f0>
 80197b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80197b4:	445a      	add	r2, fp
 80197b6:	9209      	str	r2, [sp, #36]	; 0x24
 80197b8:	f89a 3000 	ldrb.w	r3, [sl]
 80197bc:	2b00      	cmp	r3, #0
 80197be:	f000 80a1 	beq.w	8019904 <_vfiprintf_r+0x1f0>
 80197c2:	2300      	movs	r3, #0
 80197c4:	f04f 32ff 	mov.w	r2, #4294967295
 80197c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80197cc:	f10a 0a01 	add.w	sl, sl, #1
 80197d0:	9304      	str	r3, [sp, #16]
 80197d2:	9307      	str	r3, [sp, #28]
 80197d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80197d8:	931a      	str	r3, [sp, #104]	; 0x68
 80197da:	4654      	mov	r4, sl
 80197dc:	2205      	movs	r2, #5
 80197de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80197e2:	4854      	ldr	r0, [pc, #336]	; (8019934 <_vfiprintf_r+0x220>)
 80197e4:	f7e6 fd1c 	bl	8000220 <memchr>
 80197e8:	9a04      	ldr	r2, [sp, #16]
 80197ea:	b9d8      	cbnz	r0, 8019824 <_vfiprintf_r+0x110>
 80197ec:	06d1      	lsls	r1, r2, #27
 80197ee:	bf44      	itt	mi
 80197f0:	2320      	movmi	r3, #32
 80197f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80197f6:	0713      	lsls	r3, r2, #28
 80197f8:	bf44      	itt	mi
 80197fa:	232b      	movmi	r3, #43	; 0x2b
 80197fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019800:	f89a 3000 	ldrb.w	r3, [sl]
 8019804:	2b2a      	cmp	r3, #42	; 0x2a
 8019806:	d015      	beq.n	8019834 <_vfiprintf_r+0x120>
 8019808:	9a07      	ldr	r2, [sp, #28]
 801980a:	4654      	mov	r4, sl
 801980c:	2000      	movs	r0, #0
 801980e:	f04f 0c0a 	mov.w	ip, #10
 8019812:	4621      	mov	r1, r4
 8019814:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019818:	3b30      	subs	r3, #48	; 0x30
 801981a:	2b09      	cmp	r3, #9
 801981c:	d94d      	bls.n	80198ba <_vfiprintf_r+0x1a6>
 801981e:	b1b0      	cbz	r0, 801984e <_vfiprintf_r+0x13a>
 8019820:	9207      	str	r2, [sp, #28]
 8019822:	e014      	b.n	801984e <_vfiprintf_r+0x13a>
 8019824:	eba0 0308 	sub.w	r3, r0, r8
 8019828:	fa09 f303 	lsl.w	r3, r9, r3
 801982c:	4313      	orrs	r3, r2
 801982e:	9304      	str	r3, [sp, #16]
 8019830:	46a2      	mov	sl, r4
 8019832:	e7d2      	b.n	80197da <_vfiprintf_r+0xc6>
 8019834:	9b03      	ldr	r3, [sp, #12]
 8019836:	1d19      	adds	r1, r3, #4
 8019838:	681b      	ldr	r3, [r3, #0]
 801983a:	9103      	str	r1, [sp, #12]
 801983c:	2b00      	cmp	r3, #0
 801983e:	bfbb      	ittet	lt
 8019840:	425b      	neglt	r3, r3
 8019842:	f042 0202 	orrlt.w	r2, r2, #2
 8019846:	9307      	strge	r3, [sp, #28]
 8019848:	9307      	strlt	r3, [sp, #28]
 801984a:	bfb8      	it	lt
 801984c:	9204      	strlt	r2, [sp, #16]
 801984e:	7823      	ldrb	r3, [r4, #0]
 8019850:	2b2e      	cmp	r3, #46	; 0x2e
 8019852:	d10c      	bne.n	801986e <_vfiprintf_r+0x15a>
 8019854:	7863      	ldrb	r3, [r4, #1]
 8019856:	2b2a      	cmp	r3, #42	; 0x2a
 8019858:	d134      	bne.n	80198c4 <_vfiprintf_r+0x1b0>
 801985a:	9b03      	ldr	r3, [sp, #12]
 801985c:	1d1a      	adds	r2, r3, #4
 801985e:	681b      	ldr	r3, [r3, #0]
 8019860:	9203      	str	r2, [sp, #12]
 8019862:	2b00      	cmp	r3, #0
 8019864:	bfb8      	it	lt
 8019866:	f04f 33ff 	movlt.w	r3, #4294967295
 801986a:	3402      	adds	r4, #2
 801986c:	9305      	str	r3, [sp, #20]
 801986e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8019944 <_vfiprintf_r+0x230>
 8019872:	7821      	ldrb	r1, [r4, #0]
 8019874:	2203      	movs	r2, #3
 8019876:	4650      	mov	r0, sl
 8019878:	f7e6 fcd2 	bl	8000220 <memchr>
 801987c:	b138      	cbz	r0, 801988e <_vfiprintf_r+0x17a>
 801987e:	9b04      	ldr	r3, [sp, #16]
 8019880:	eba0 000a 	sub.w	r0, r0, sl
 8019884:	2240      	movs	r2, #64	; 0x40
 8019886:	4082      	lsls	r2, r0
 8019888:	4313      	orrs	r3, r2
 801988a:	3401      	adds	r4, #1
 801988c:	9304      	str	r3, [sp, #16]
 801988e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019892:	4829      	ldr	r0, [pc, #164]	; (8019938 <_vfiprintf_r+0x224>)
 8019894:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019898:	2206      	movs	r2, #6
 801989a:	f7e6 fcc1 	bl	8000220 <memchr>
 801989e:	2800      	cmp	r0, #0
 80198a0:	d03f      	beq.n	8019922 <_vfiprintf_r+0x20e>
 80198a2:	4b26      	ldr	r3, [pc, #152]	; (801993c <_vfiprintf_r+0x228>)
 80198a4:	bb1b      	cbnz	r3, 80198ee <_vfiprintf_r+0x1da>
 80198a6:	9b03      	ldr	r3, [sp, #12]
 80198a8:	3307      	adds	r3, #7
 80198aa:	f023 0307 	bic.w	r3, r3, #7
 80198ae:	3308      	adds	r3, #8
 80198b0:	9303      	str	r3, [sp, #12]
 80198b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198b4:	443b      	add	r3, r7
 80198b6:	9309      	str	r3, [sp, #36]	; 0x24
 80198b8:	e768      	b.n	801978c <_vfiprintf_r+0x78>
 80198ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80198be:	460c      	mov	r4, r1
 80198c0:	2001      	movs	r0, #1
 80198c2:	e7a6      	b.n	8019812 <_vfiprintf_r+0xfe>
 80198c4:	2300      	movs	r3, #0
 80198c6:	3401      	adds	r4, #1
 80198c8:	9305      	str	r3, [sp, #20]
 80198ca:	4619      	mov	r1, r3
 80198cc:	f04f 0c0a 	mov.w	ip, #10
 80198d0:	4620      	mov	r0, r4
 80198d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80198d6:	3a30      	subs	r2, #48	; 0x30
 80198d8:	2a09      	cmp	r2, #9
 80198da:	d903      	bls.n	80198e4 <_vfiprintf_r+0x1d0>
 80198dc:	2b00      	cmp	r3, #0
 80198de:	d0c6      	beq.n	801986e <_vfiprintf_r+0x15a>
 80198e0:	9105      	str	r1, [sp, #20]
 80198e2:	e7c4      	b.n	801986e <_vfiprintf_r+0x15a>
 80198e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80198e8:	4604      	mov	r4, r0
 80198ea:	2301      	movs	r3, #1
 80198ec:	e7f0      	b.n	80198d0 <_vfiprintf_r+0x1bc>
 80198ee:	ab03      	add	r3, sp, #12
 80198f0:	9300      	str	r3, [sp, #0]
 80198f2:	462a      	mov	r2, r5
 80198f4:	4b12      	ldr	r3, [pc, #72]	; (8019940 <_vfiprintf_r+0x22c>)
 80198f6:	a904      	add	r1, sp, #16
 80198f8:	4630      	mov	r0, r6
 80198fa:	f3af 8000 	nop.w
 80198fe:	4607      	mov	r7, r0
 8019900:	1c78      	adds	r0, r7, #1
 8019902:	d1d6      	bne.n	80198b2 <_vfiprintf_r+0x19e>
 8019904:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019906:	07d9      	lsls	r1, r3, #31
 8019908:	d405      	bmi.n	8019916 <_vfiprintf_r+0x202>
 801990a:	89ab      	ldrh	r3, [r5, #12]
 801990c:	059a      	lsls	r2, r3, #22
 801990e:	d402      	bmi.n	8019916 <_vfiprintf_r+0x202>
 8019910:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019912:	f7ff fc50 	bl	80191b6 <__retarget_lock_release_recursive>
 8019916:	89ab      	ldrh	r3, [r5, #12]
 8019918:	065b      	lsls	r3, r3, #25
 801991a:	f53f af1d 	bmi.w	8019758 <_vfiprintf_r+0x44>
 801991e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019920:	e71c      	b.n	801975c <_vfiprintf_r+0x48>
 8019922:	ab03      	add	r3, sp, #12
 8019924:	9300      	str	r3, [sp, #0]
 8019926:	462a      	mov	r2, r5
 8019928:	4b05      	ldr	r3, [pc, #20]	; (8019940 <_vfiprintf_r+0x22c>)
 801992a:	a904      	add	r1, sp, #16
 801992c:	4630      	mov	r0, r6
 801992e:	f000 f879 	bl	8019a24 <_printf_i>
 8019932:	e7e4      	b.n	80198fe <_vfiprintf_r+0x1ea>
 8019934:	08028266 	.word	0x08028266
 8019938:	08028270 	.word	0x08028270
 801993c:	00000000 	.word	0x00000000
 8019940:	080196ef 	.word	0x080196ef
 8019944:	0802826c 	.word	0x0802826c

08019948 <_printf_common>:
 8019948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801994c:	4616      	mov	r6, r2
 801994e:	4699      	mov	r9, r3
 8019950:	688a      	ldr	r2, [r1, #8]
 8019952:	690b      	ldr	r3, [r1, #16]
 8019954:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019958:	4293      	cmp	r3, r2
 801995a:	bfb8      	it	lt
 801995c:	4613      	movlt	r3, r2
 801995e:	6033      	str	r3, [r6, #0]
 8019960:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019964:	4607      	mov	r7, r0
 8019966:	460c      	mov	r4, r1
 8019968:	b10a      	cbz	r2, 801996e <_printf_common+0x26>
 801996a:	3301      	adds	r3, #1
 801996c:	6033      	str	r3, [r6, #0]
 801996e:	6823      	ldr	r3, [r4, #0]
 8019970:	0699      	lsls	r1, r3, #26
 8019972:	bf42      	ittt	mi
 8019974:	6833      	ldrmi	r3, [r6, #0]
 8019976:	3302      	addmi	r3, #2
 8019978:	6033      	strmi	r3, [r6, #0]
 801997a:	6825      	ldr	r5, [r4, #0]
 801997c:	f015 0506 	ands.w	r5, r5, #6
 8019980:	d106      	bne.n	8019990 <_printf_common+0x48>
 8019982:	f104 0a19 	add.w	sl, r4, #25
 8019986:	68e3      	ldr	r3, [r4, #12]
 8019988:	6832      	ldr	r2, [r6, #0]
 801998a:	1a9b      	subs	r3, r3, r2
 801998c:	42ab      	cmp	r3, r5
 801998e:	dc26      	bgt.n	80199de <_printf_common+0x96>
 8019990:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019994:	1e13      	subs	r3, r2, #0
 8019996:	6822      	ldr	r2, [r4, #0]
 8019998:	bf18      	it	ne
 801999a:	2301      	movne	r3, #1
 801999c:	0692      	lsls	r2, r2, #26
 801999e:	d42b      	bmi.n	80199f8 <_printf_common+0xb0>
 80199a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80199a4:	4649      	mov	r1, r9
 80199a6:	4638      	mov	r0, r7
 80199a8:	47c0      	blx	r8
 80199aa:	3001      	adds	r0, #1
 80199ac:	d01e      	beq.n	80199ec <_printf_common+0xa4>
 80199ae:	6823      	ldr	r3, [r4, #0]
 80199b0:	6922      	ldr	r2, [r4, #16]
 80199b2:	f003 0306 	and.w	r3, r3, #6
 80199b6:	2b04      	cmp	r3, #4
 80199b8:	bf02      	ittt	eq
 80199ba:	68e5      	ldreq	r5, [r4, #12]
 80199bc:	6833      	ldreq	r3, [r6, #0]
 80199be:	1aed      	subeq	r5, r5, r3
 80199c0:	68a3      	ldr	r3, [r4, #8]
 80199c2:	bf0c      	ite	eq
 80199c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80199c8:	2500      	movne	r5, #0
 80199ca:	4293      	cmp	r3, r2
 80199cc:	bfc4      	itt	gt
 80199ce:	1a9b      	subgt	r3, r3, r2
 80199d0:	18ed      	addgt	r5, r5, r3
 80199d2:	2600      	movs	r6, #0
 80199d4:	341a      	adds	r4, #26
 80199d6:	42b5      	cmp	r5, r6
 80199d8:	d11a      	bne.n	8019a10 <_printf_common+0xc8>
 80199da:	2000      	movs	r0, #0
 80199dc:	e008      	b.n	80199f0 <_printf_common+0xa8>
 80199de:	2301      	movs	r3, #1
 80199e0:	4652      	mov	r2, sl
 80199e2:	4649      	mov	r1, r9
 80199e4:	4638      	mov	r0, r7
 80199e6:	47c0      	blx	r8
 80199e8:	3001      	adds	r0, #1
 80199ea:	d103      	bne.n	80199f4 <_printf_common+0xac>
 80199ec:	f04f 30ff 	mov.w	r0, #4294967295
 80199f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199f4:	3501      	adds	r5, #1
 80199f6:	e7c6      	b.n	8019986 <_printf_common+0x3e>
 80199f8:	18e1      	adds	r1, r4, r3
 80199fa:	1c5a      	adds	r2, r3, #1
 80199fc:	2030      	movs	r0, #48	; 0x30
 80199fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019a02:	4422      	add	r2, r4
 8019a04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019a08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019a0c:	3302      	adds	r3, #2
 8019a0e:	e7c7      	b.n	80199a0 <_printf_common+0x58>
 8019a10:	2301      	movs	r3, #1
 8019a12:	4622      	mov	r2, r4
 8019a14:	4649      	mov	r1, r9
 8019a16:	4638      	mov	r0, r7
 8019a18:	47c0      	blx	r8
 8019a1a:	3001      	adds	r0, #1
 8019a1c:	d0e6      	beq.n	80199ec <_printf_common+0xa4>
 8019a1e:	3601      	adds	r6, #1
 8019a20:	e7d9      	b.n	80199d6 <_printf_common+0x8e>
	...

08019a24 <_printf_i>:
 8019a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019a28:	7e0f      	ldrb	r7, [r1, #24]
 8019a2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019a2c:	2f78      	cmp	r7, #120	; 0x78
 8019a2e:	4691      	mov	r9, r2
 8019a30:	4680      	mov	r8, r0
 8019a32:	460c      	mov	r4, r1
 8019a34:	469a      	mov	sl, r3
 8019a36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019a3a:	d807      	bhi.n	8019a4c <_printf_i+0x28>
 8019a3c:	2f62      	cmp	r7, #98	; 0x62
 8019a3e:	d80a      	bhi.n	8019a56 <_printf_i+0x32>
 8019a40:	2f00      	cmp	r7, #0
 8019a42:	f000 80d4 	beq.w	8019bee <_printf_i+0x1ca>
 8019a46:	2f58      	cmp	r7, #88	; 0x58
 8019a48:	f000 80c0 	beq.w	8019bcc <_printf_i+0x1a8>
 8019a4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019a50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019a54:	e03a      	b.n	8019acc <_printf_i+0xa8>
 8019a56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019a5a:	2b15      	cmp	r3, #21
 8019a5c:	d8f6      	bhi.n	8019a4c <_printf_i+0x28>
 8019a5e:	a101      	add	r1, pc, #4	; (adr r1, 8019a64 <_printf_i+0x40>)
 8019a60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019a64:	08019abd 	.word	0x08019abd
 8019a68:	08019ad1 	.word	0x08019ad1
 8019a6c:	08019a4d 	.word	0x08019a4d
 8019a70:	08019a4d 	.word	0x08019a4d
 8019a74:	08019a4d 	.word	0x08019a4d
 8019a78:	08019a4d 	.word	0x08019a4d
 8019a7c:	08019ad1 	.word	0x08019ad1
 8019a80:	08019a4d 	.word	0x08019a4d
 8019a84:	08019a4d 	.word	0x08019a4d
 8019a88:	08019a4d 	.word	0x08019a4d
 8019a8c:	08019a4d 	.word	0x08019a4d
 8019a90:	08019bd5 	.word	0x08019bd5
 8019a94:	08019afd 	.word	0x08019afd
 8019a98:	08019b8f 	.word	0x08019b8f
 8019a9c:	08019a4d 	.word	0x08019a4d
 8019aa0:	08019a4d 	.word	0x08019a4d
 8019aa4:	08019bf7 	.word	0x08019bf7
 8019aa8:	08019a4d 	.word	0x08019a4d
 8019aac:	08019afd 	.word	0x08019afd
 8019ab0:	08019a4d 	.word	0x08019a4d
 8019ab4:	08019a4d 	.word	0x08019a4d
 8019ab8:	08019b97 	.word	0x08019b97
 8019abc:	682b      	ldr	r3, [r5, #0]
 8019abe:	1d1a      	adds	r2, r3, #4
 8019ac0:	681b      	ldr	r3, [r3, #0]
 8019ac2:	602a      	str	r2, [r5, #0]
 8019ac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019ac8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019acc:	2301      	movs	r3, #1
 8019ace:	e09f      	b.n	8019c10 <_printf_i+0x1ec>
 8019ad0:	6820      	ldr	r0, [r4, #0]
 8019ad2:	682b      	ldr	r3, [r5, #0]
 8019ad4:	0607      	lsls	r7, r0, #24
 8019ad6:	f103 0104 	add.w	r1, r3, #4
 8019ada:	6029      	str	r1, [r5, #0]
 8019adc:	d501      	bpl.n	8019ae2 <_printf_i+0xbe>
 8019ade:	681e      	ldr	r6, [r3, #0]
 8019ae0:	e003      	b.n	8019aea <_printf_i+0xc6>
 8019ae2:	0646      	lsls	r6, r0, #25
 8019ae4:	d5fb      	bpl.n	8019ade <_printf_i+0xba>
 8019ae6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019aea:	2e00      	cmp	r6, #0
 8019aec:	da03      	bge.n	8019af6 <_printf_i+0xd2>
 8019aee:	232d      	movs	r3, #45	; 0x2d
 8019af0:	4276      	negs	r6, r6
 8019af2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019af6:	485a      	ldr	r0, [pc, #360]	; (8019c60 <_printf_i+0x23c>)
 8019af8:	230a      	movs	r3, #10
 8019afa:	e012      	b.n	8019b22 <_printf_i+0xfe>
 8019afc:	682b      	ldr	r3, [r5, #0]
 8019afe:	6820      	ldr	r0, [r4, #0]
 8019b00:	1d19      	adds	r1, r3, #4
 8019b02:	6029      	str	r1, [r5, #0]
 8019b04:	0605      	lsls	r5, r0, #24
 8019b06:	d501      	bpl.n	8019b0c <_printf_i+0xe8>
 8019b08:	681e      	ldr	r6, [r3, #0]
 8019b0a:	e002      	b.n	8019b12 <_printf_i+0xee>
 8019b0c:	0641      	lsls	r1, r0, #25
 8019b0e:	d5fb      	bpl.n	8019b08 <_printf_i+0xe4>
 8019b10:	881e      	ldrh	r6, [r3, #0]
 8019b12:	4853      	ldr	r0, [pc, #332]	; (8019c60 <_printf_i+0x23c>)
 8019b14:	2f6f      	cmp	r7, #111	; 0x6f
 8019b16:	bf0c      	ite	eq
 8019b18:	2308      	moveq	r3, #8
 8019b1a:	230a      	movne	r3, #10
 8019b1c:	2100      	movs	r1, #0
 8019b1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019b22:	6865      	ldr	r5, [r4, #4]
 8019b24:	60a5      	str	r5, [r4, #8]
 8019b26:	2d00      	cmp	r5, #0
 8019b28:	bfa2      	ittt	ge
 8019b2a:	6821      	ldrge	r1, [r4, #0]
 8019b2c:	f021 0104 	bicge.w	r1, r1, #4
 8019b30:	6021      	strge	r1, [r4, #0]
 8019b32:	b90e      	cbnz	r6, 8019b38 <_printf_i+0x114>
 8019b34:	2d00      	cmp	r5, #0
 8019b36:	d04b      	beq.n	8019bd0 <_printf_i+0x1ac>
 8019b38:	4615      	mov	r5, r2
 8019b3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8019b3e:	fb03 6711 	mls	r7, r3, r1, r6
 8019b42:	5dc7      	ldrb	r7, [r0, r7]
 8019b44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019b48:	4637      	mov	r7, r6
 8019b4a:	42bb      	cmp	r3, r7
 8019b4c:	460e      	mov	r6, r1
 8019b4e:	d9f4      	bls.n	8019b3a <_printf_i+0x116>
 8019b50:	2b08      	cmp	r3, #8
 8019b52:	d10b      	bne.n	8019b6c <_printf_i+0x148>
 8019b54:	6823      	ldr	r3, [r4, #0]
 8019b56:	07de      	lsls	r6, r3, #31
 8019b58:	d508      	bpl.n	8019b6c <_printf_i+0x148>
 8019b5a:	6923      	ldr	r3, [r4, #16]
 8019b5c:	6861      	ldr	r1, [r4, #4]
 8019b5e:	4299      	cmp	r1, r3
 8019b60:	bfde      	ittt	le
 8019b62:	2330      	movle	r3, #48	; 0x30
 8019b64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019b68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019b6c:	1b52      	subs	r2, r2, r5
 8019b6e:	6122      	str	r2, [r4, #16]
 8019b70:	f8cd a000 	str.w	sl, [sp]
 8019b74:	464b      	mov	r3, r9
 8019b76:	aa03      	add	r2, sp, #12
 8019b78:	4621      	mov	r1, r4
 8019b7a:	4640      	mov	r0, r8
 8019b7c:	f7ff fee4 	bl	8019948 <_printf_common>
 8019b80:	3001      	adds	r0, #1
 8019b82:	d14a      	bne.n	8019c1a <_printf_i+0x1f6>
 8019b84:	f04f 30ff 	mov.w	r0, #4294967295
 8019b88:	b004      	add	sp, #16
 8019b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b8e:	6823      	ldr	r3, [r4, #0]
 8019b90:	f043 0320 	orr.w	r3, r3, #32
 8019b94:	6023      	str	r3, [r4, #0]
 8019b96:	4833      	ldr	r0, [pc, #204]	; (8019c64 <_printf_i+0x240>)
 8019b98:	2778      	movs	r7, #120	; 0x78
 8019b9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019b9e:	6823      	ldr	r3, [r4, #0]
 8019ba0:	6829      	ldr	r1, [r5, #0]
 8019ba2:	061f      	lsls	r7, r3, #24
 8019ba4:	f851 6b04 	ldr.w	r6, [r1], #4
 8019ba8:	d402      	bmi.n	8019bb0 <_printf_i+0x18c>
 8019baa:	065f      	lsls	r7, r3, #25
 8019bac:	bf48      	it	mi
 8019bae:	b2b6      	uxthmi	r6, r6
 8019bb0:	07df      	lsls	r7, r3, #31
 8019bb2:	bf48      	it	mi
 8019bb4:	f043 0320 	orrmi.w	r3, r3, #32
 8019bb8:	6029      	str	r1, [r5, #0]
 8019bba:	bf48      	it	mi
 8019bbc:	6023      	strmi	r3, [r4, #0]
 8019bbe:	b91e      	cbnz	r6, 8019bc8 <_printf_i+0x1a4>
 8019bc0:	6823      	ldr	r3, [r4, #0]
 8019bc2:	f023 0320 	bic.w	r3, r3, #32
 8019bc6:	6023      	str	r3, [r4, #0]
 8019bc8:	2310      	movs	r3, #16
 8019bca:	e7a7      	b.n	8019b1c <_printf_i+0xf8>
 8019bcc:	4824      	ldr	r0, [pc, #144]	; (8019c60 <_printf_i+0x23c>)
 8019bce:	e7e4      	b.n	8019b9a <_printf_i+0x176>
 8019bd0:	4615      	mov	r5, r2
 8019bd2:	e7bd      	b.n	8019b50 <_printf_i+0x12c>
 8019bd4:	682b      	ldr	r3, [r5, #0]
 8019bd6:	6826      	ldr	r6, [r4, #0]
 8019bd8:	6961      	ldr	r1, [r4, #20]
 8019bda:	1d18      	adds	r0, r3, #4
 8019bdc:	6028      	str	r0, [r5, #0]
 8019bde:	0635      	lsls	r5, r6, #24
 8019be0:	681b      	ldr	r3, [r3, #0]
 8019be2:	d501      	bpl.n	8019be8 <_printf_i+0x1c4>
 8019be4:	6019      	str	r1, [r3, #0]
 8019be6:	e002      	b.n	8019bee <_printf_i+0x1ca>
 8019be8:	0670      	lsls	r0, r6, #25
 8019bea:	d5fb      	bpl.n	8019be4 <_printf_i+0x1c0>
 8019bec:	8019      	strh	r1, [r3, #0]
 8019bee:	2300      	movs	r3, #0
 8019bf0:	6123      	str	r3, [r4, #16]
 8019bf2:	4615      	mov	r5, r2
 8019bf4:	e7bc      	b.n	8019b70 <_printf_i+0x14c>
 8019bf6:	682b      	ldr	r3, [r5, #0]
 8019bf8:	1d1a      	adds	r2, r3, #4
 8019bfa:	602a      	str	r2, [r5, #0]
 8019bfc:	681d      	ldr	r5, [r3, #0]
 8019bfe:	6862      	ldr	r2, [r4, #4]
 8019c00:	2100      	movs	r1, #0
 8019c02:	4628      	mov	r0, r5
 8019c04:	f7e6 fb0c 	bl	8000220 <memchr>
 8019c08:	b108      	cbz	r0, 8019c0e <_printf_i+0x1ea>
 8019c0a:	1b40      	subs	r0, r0, r5
 8019c0c:	6060      	str	r0, [r4, #4]
 8019c0e:	6863      	ldr	r3, [r4, #4]
 8019c10:	6123      	str	r3, [r4, #16]
 8019c12:	2300      	movs	r3, #0
 8019c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019c18:	e7aa      	b.n	8019b70 <_printf_i+0x14c>
 8019c1a:	6923      	ldr	r3, [r4, #16]
 8019c1c:	462a      	mov	r2, r5
 8019c1e:	4649      	mov	r1, r9
 8019c20:	4640      	mov	r0, r8
 8019c22:	47d0      	blx	sl
 8019c24:	3001      	adds	r0, #1
 8019c26:	d0ad      	beq.n	8019b84 <_printf_i+0x160>
 8019c28:	6823      	ldr	r3, [r4, #0]
 8019c2a:	079b      	lsls	r3, r3, #30
 8019c2c:	d413      	bmi.n	8019c56 <_printf_i+0x232>
 8019c2e:	68e0      	ldr	r0, [r4, #12]
 8019c30:	9b03      	ldr	r3, [sp, #12]
 8019c32:	4298      	cmp	r0, r3
 8019c34:	bfb8      	it	lt
 8019c36:	4618      	movlt	r0, r3
 8019c38:	e7a6      	b.n	8019b88 <_printf_i+0x164>
 8019c3a:	2301      	movs	r3, #1
 8019c3c:	4632      	mov	r2, r6
 8019c3e:	4649      	mov	r1, r9
 8019c40:	4640      	mov	r0, r8
 8019c42:	47d0      	blx	sl
 8019c44:	3001      	adds	r0, #1
 8019c46:	d09d      	beq.n	8019b84 <_printf_i+0x160>
 8019c48:	3501      	adds	r5, #1
 8019c4a:	68e3      	ldr	r3, [r4, #12]
 8019c4c:	9903      	ldr	r1, [sp, #12]
 8019c4e:	1a5b      	subs	r3, r3, r1
 8019c50:	42ab      	cmp	r3, r5
 8019c52:	dcf2      	bgt.n	8019c3a <_printf_i+0x216>
 8019c54:	e7eb      	b.n	8019c2e <_printf_i+0x20a>
 8019c56:	2500      	movs	r5, #0
 8019c58:	f104 0619 	add.w	r6, r4, #25
 8019c5c:	e7f5      	b.n	8019c4a <_printf_i+0x226>
 8019c5e:	bf00      	nop
 8019c60:	08028277 	.word	0x08028277
 8019c64:	08028288 	.word	0x08028288

08019c68 <__sflush_r>:
 8019c68:	898a      	ldrh	r2, [r1, #12]
 8019c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c6e:	4605      	mov	r5, r0
 8019c70:	0710      	lsls	r0, r2, #28
 8019c72:	460c      	mov	r4, r1
 8019c74:	d458      	bmi.n	8019d28 <__sflush_r+0xc0>
 8019c76:	684b      	ldr	r3, [r1, #4]
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	dc05      	bgt.n	8019c88 <__sflush_r+0x20>
 8019c7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019c7e:	2b00      	cmp	r3, #0
 8019c80:	dc02      	bgt.n	8019c88 <__sflush_r+0x20>
 8019c82:	2000      	movs	r0, #0
 8019c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019c8a:	2e00      	cmp	r6, #0
 8019c8c:	d0f9      	beq.n	8019c82 <__sflush_r+0x1a>
 8019c8e:	2300      	movs	r3, #0
 8019c90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019c94:	682f      	ldr	r7, [r5, #0]
 8019c96:	6a21      	ldr	r1, [r4, #32]
 8019c98:	602b      	str	r3, [r5, #0]
 8019c9a:	d032      	beq.n	8019d02 <__sflush_r+0x9a>
 8019c9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019c9e:	89a3      	ldrh	r3, [r4, #12]
 8019ca0:	075a      	lsls	r2, r3, #29
 8019ca2:	d505      	bpl.n	8019cb0 <__sflush_r+0x48>
 8019ca4:	6863      	ldr	r3, [r4, #4]
 8019ca6:	1ac0      	subs	r0, r0, r3
 8019ca8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019caa:	b10b      	cbz	r3, 8019cb0 <__sflush_r+0x48>
 8019cac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019cae:	1ac0      	subs	r0, r0, r3
 8019cb0:	2300      	movs	r3, #0
 8019cb2:	4602      	mov	r2, r0
 8019cb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019cb6:	6a21      	ldr	r1, [r4, #32]
 8019cb8:	4628      	mov	r0, r5
 8019cba:	47b0      	blx	r6
 8019cbc:	1c43      	adds	r3, r0, #1
 8019cbe:	89a3      	ldrh	r3, [r4, #12]
 8019cc0:	d106      	bne.n	8019cd0 <__sflush_r+0x68>
 8019cc2:	6829      	ldr	r1, [r5, #0]
 8019cc4:	291d      	cmp	r1, #29
 8019cc6:	d82b      	bhi.n	8019d20 <__sflush_r+0xb8>
 8019cc8:	4a29      	ldr	r2, [pc, #164]	; (8019d70 <__sflush_r+0x108>)
 8019cca:	410a      	asrs	r2, r1
 8019ccc:	07d6      	lsls	r6, r2, #31
 8019cce:	d427      	bmi.n	8019d20 <__sflush_r+0xb8>
 8019cd0:	2200      	movs	r2, #0
 8019cd2:	6062      	str	r2, [r4, #4]
 8019cd4:	04d9      	lsls	r1, r3, #19
 8019cd6:	6922      	ldr	r2, [r4, #16]
 8019cd8:	6022      	str	r2, [r4, #0]
 8019cda:	d504      	bpl.n	8019ce6 <__sflush_r+0x7e>
 8019cdc:	1c42      	adds	r2, r0, #1
 8019cde:	d101      	bne.n	8019ce4 <__sflush_r+0x7c>
 8019ce0:	682b      	ldr	r3, [r5, #0]
 8019ce2:	b903      	cbnz	r3, 8019ce6 <__sflush_r+0x7e>
 8019ce4:	6560      	str	r0, [r4, #84]	; 0x54
 8019ce6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019ce8:	602f      	str	r7, [r5, #0]
 8019cea:	2900      	cmp	r1, #0
 8019cec:	d0c9      	beq.n	8019c82 <__sflush_r+0x1a>
 8019cee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019cf2:	4299      	cmp	r1, r3
 8019cf4:	d002      	beq.n	8019cfc <__sflush_r+0x94>
 8019cf6:	4628      	mov	r0, r5
 8019cf8:	f7ff fa8a 	bl	8019210 <_free_r>
 8019cfc:	2000      	movs	r0, #0
 8019cfe:	6360      	str	r0, [r4, #52]	; 0x34
 8019d00:	e7c0      	b.n	8019c84 <__sflush_r+0x1c>
 8019d02:	2301      	movs	r3, #1
 8019d04:	4628      	mov	r0, r5
 8019d06:	47b0      	blx	r6
 8019d08:	1c41      	adds	r1, r0, #1
 8019d0a:	d1c8      	bne.n	8019c9e <__sflush_r+0x36>
 8019d0c:	682b      	ldr	r3, [r5, #0]
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	d0c5      	beq.n	8019c9e <__sflush_r+0x36>
 8019d12:	2b1d      	cmp	r3, #29
 8019d14:	d001      	beq.n	8019d1a <__sflush_r+0xb2>
 8019d16:	2b16      	cmp	r3, #22
 8019d18:	d101      	bne.n	8019d1e <__sflush_r+0xb6>
 8019d1a:	602f      	str	r7, [r5, #0]
 8019d1c:	e7b1      	b.n	8019c82 <__sflush_r+0x1a>
 8019d1e:	89a3      	ldrh	r3, [r4, #12]
 8019d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019d24:	81a3      	strh	r3, [r4, #12]
 8019d26:	e7ad      	b.n	8019c84 <__sflush_r+0x1c>
 8019d28:	690f      	ldr	r7, [r1, #16]
 8019d2a:	2f00      	cmp	r7, #0
 8019d2c:	d0a9      	beq.n	8019c82 <__sflush_r+0x1a>
 8019d2e:	0793      	lsls	r3, r2, #30
 8019d30:	680e      	ldr	r6, [r1, #0]
 8019d32:	bf08      	it	eq
 8019d34:	694b      	ldreq	r3, [r1, #20]
 8019d36:	600f      	str	r7, [r1, #0]
 8019d38:	bf18      	it	ne
 8019d3a:	2300      	movne	r3, #0
 8019d3c:	eba6 0807 	sub.w	r8, r6, r7
 8019d40:	608b      	str	r3, [r1, #8]
 8019d42:	f1b8 0f00 	cmp.w	r8, #0
 8019d46:	dd9c      	ble.n	8019c82 <__sflush_r+0x1a>
 8019d48:	6a21      	ldr	r1, [r4, #32]
 8019d4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019d4c:	4643      	mov	r3, r8
 8019d4e:	463a      	mov	r2, r7
 8019d50:	4628      	mov	r0, r5
 8019d52:	47b0      	blx	r6
 8019d54:	2800      	cmp	r0, #0
 8019d56:	dc06      	bgt.n	8019d66 <__sflush_r+0xfe>
 8019d58:	89a3      	ldrh	r3, [r4, #12]
 8019d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019d5e:	81a3      	strh	r3, [r4, #12]
 8019d60:	f04f 30ff 	mov.w	r0, #4294967295
 8019d64:	e78e      	b.n	8019c84 <__sflush_r+0x1c>
 8019d66:	4407      	add	r7, r0
 8019d68:	eba8 0800 	sub.w	r8, r8, r0
 8019d6c:	e7e9      	b.n	8019d42 <__sflush_r+0xda>
 8019d6e:	bf00      	nop
 8019d70:	dfbffffe 	.word	0xdfbffffe

08019d74 <_fflush_r>:
 8019d74:	b538      	push	{r3, r4, r5, lr}
 8019d76:	690b      	ldr	r3, [r1, #16]
 8019d78:	4605      	mov	r5, r0
 8019d7a:	460c      	mov	r4, r1
 8019d7c:	b913      	cbnz	r3, 8019d84 <_fflush_r+0x10>
 8019d7e:	2500      	movs	r5, #0
 8019d80:	4628      	mov	r0, r5
 8019d82:	bd38      	pop	{r3, r4, r5, pc}
 8019d84:	b118      	cbz	r0, 8019d8e <_fflush_r+0x1a>
 8019d86:	6a03      	ldr	r3, [r0, #32]
 8019d88:	b90b      	cbnz	r3, 8019d8e <_fflush_r+0x1a>
 8019d8a:	f7fe ffdf 	bl	8018d4c <__sinit>
 8019d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	d0f3      	beq.n	8019d7e <_fflush_r+0xa>
 8019d96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019d98:	07d0      	lsls	r0, r2, #31
 8019d9a:	d404      	bmi.n	8019da6 <_fflush_r+0x32>
 8019d9c:	0599      	lsls	r1, r3, #22
 8019d9e:	d402      	bmi.n	8019da6 <_fflush_r+0x32>
 8019da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019da2:	f7ff fa07 	bl	80191b4 <__retarget_lock_acquire_recursive>
 8019da6:	4628      	mov	r0, r5
 8019da8:	4621      	mov	r1, r4
 8019daa:	f7ff ff5d 	bl	8019c68 <__sflush_r>
 8019dae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019db0:	07da      	lsls	r2, r3, #31
 8019db2:	4605      	mov	r5, r0
 8019db4:	d4e4      	bmi.n	8019d80 <_fflush_r+0xc>
 8019db6:	89a3      	ldrh	r3, [r4, #12]
 8019db8:	059b      	lsls	r3, r3, #22
 8019dba:	d4e1      	bmi.n	8019d80 <_fflush_r+0xc>
 8019dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019dbe:	f7ff f9fa 	bl	80191b6 <__retarget_lock_release_recursive>
 8019dc2:	e7dd      	b.n	8019d80 <_fflush_r+0xc>

08019dc4 <fiprintf>:
 8019dc4:	b40e      	push	{r1, r2, r3}
 8019dc6:	b503      	push	{r0, r1, lr}
 8019dc8:	4601      	mov	r1, r0
 8019dca:	ab03      	add	r3, sp, #12
 8019dcc:	4805      	ldr	r0, [pc, #20]	; (8019de4 <fiprintf+0x20>)
 8019dce:	f853 2b04 	ldr.w	r2, [r3], #4
 8019dd2:	6800      	ldr	r0, [r0, #0]
 8019dd4:	9301      	str	r3, [sp, #4]
 8019dd6:	f7ff fc9d 	bl	8019714 <_vfiprintf_r>
 8019dda:	b002      	add	sp, #8
 8019ddc:	f85d eb04 	ldr.w	lr, [sp], #4
 8019de0:	b003      	add	sp, #12
 8019de2:	4770      	bx	lr
 8019de4:	2000008c 	.word	0x2000008c

08019de8 <__swbuf_r>:
 8019de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019dea:	460e      	mov	r6, r1
 8019dec:	4614      	mov	r4, r2
 8019dee:	4605      	mov	r5, r0
 8019df0:	b118      	cbz	r0, 8019dfa <__swbuf_r+0x12>
 8019df2:	6a03      	ldr	r3, [r0, #32]
 8019df4:	b90b      	cbnz	r3, 8019dfa <__swbuf_r+0x12>
 8019df6:	f7fe ffa9 	bl	8018d4c <__sinit>
 8019dfa:	69a3      	ldr	r3, [r4, #24]
 8019dfc:	60a3      	str	r3, [r4, #8]
 8019dfe:	89a3      	ldrh	r3, [r4, #12]
 8019e00:	071a      	lsls	r2, r3, #28
 8019e02:	d525      	bpl.n	8019e50 <__swbuf_r+0x68>
 8019e04:	6923      	ldr	r3, [r4, #16]
 8019e06:	b31b      	cbz	r3, 8019e50 <__swbuf_r+0x68>
 8019e08:	6823      	ldr	r3, [r4, #0]
 8019e0a:	6922      	ldr	r2, [r4, #16]
 8019e0c:	1a98      	subs	r0, r3, r2
 8019e0e:	6963      	ldr	r3, [r4, #20]
 8019e10:	b2f6      	uxtb	r6, r6
 8019e12:	4283      	cmp	r3, r0
 8019e14:	4637      	mov	r7, r6
 8019e16:	dc04      	bgt.n	8019e22 <__swbuf_r+0x3a>
 8019e18:	4621      	mov	r1, r4
 8019e1a:	4628      	mov	r0, r5
 8019e1c:	f7ff ffaa 	bl	8019d74 <_fflush_r>
 8019e20:	b9e0      	cbnz	r0, 8019e5c <__swbuf_r+0x74>
 8019e22:	68a3      	ldr	r3, [r4, #8]
 8019e24:	3b01      	subs	r3, #1
 8019e26:	60a3      	str	r3, [r4, #8]
 8019e28:	6823      	ldr	r3, [r4, #0]
 8019e2a:	1c5a      	adds	r2, r3, #1
 8019e2c:	6022      	str	r2, [r4, #0]
 8019e2e:	701e      	strb	r6, [r3, #0]
 8019e30:	6962      	ldr	r2, [r4, #20]
 8019e32:	1c43      	adds	r3, r0, #1
 8019e34:	429a      	cmp	r2, r3
 8019e36:	d004      	beq.n	8019e42 <__swbuf_r+0x5a>
 8019e38:	89a3      	ldrh	r3, [r4, #12]
 8019e3a:	07db      	lsls	r3, r3, #31
 8019e3c:	d506      	bpl.n	8019e4c <__swbuf_r+0x64>
 8019e3e:	2e0a      	cmp	r6, #10
 8019e40:	d104      	bne.n	8019e4c <__swbuf_r+0x64>
 8019e42:	4621      	mov	r1, r4
 8019e44:	4628      	mov	r0, r5
 8019e46:	f7ff ff95 	bl	8019d74 <_fflush_r>
 8019e4a:	b938      	cbnz	r0, 8019e5c <__swbuf_r+0x74>
 8019e4c:	4638      	mov	r0, r7
 8019e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e50:	4621      	mov	r1, r4
 8019e52:	4628      	mov	r0, r5
 8019e54:	f000 f806 	bl	8019e64 <__swsetup_r>
 8019e58:	2800      	cmp	r0, #0
 8019e5a:	d0d5      	beq.n	8019e08 <__swbuf_r+0x20>
 8019e5c:	f04f 37ff 	mov.w	r7, #4294967295
 8019e60:	e7f4      	b.n	8019e4c <__swbuf_r+0x64>
	...

08019e64 <__swsetup_r>:
 8019e64:	b538      	push	{r3, r4, r5, lr}
 8019e66:	4b2a      	ldr	r3, [pc, #168]	; (8019f10 <__swsetup_r+0xac>)
 8019e68:	4605      	mov	r5, r0
 8019e6a:	6818      	ldr	r0, [r3, #0]
 8019e6c:	460c      	mov	r4, r1
 8019e6e:	b118      	cbz	r0, 8019e78 <__swsetup_r+0x14>
 8019e70:	6a03      	ldr	r3, [r0, #32]
 8019e72:	b90b      	cbnz	r3, 8019e78 <__swsetup_r+0x14>
 8019e74:	f7fe ff6a 	bl	8018d4c <__sinit>
 8019e78:	89a3      	ldrh	r3, [r4, #12]
 8019e7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019e7e:	0718      	lsls	r0, r3, #28
 8019e80:	d422      	bmi.n	8019ec8 <__swsetup_r+0x64>
 8019e82:	06d9      	lsls	r1, r3, #27
 8019e84:	d407      	bmi.n	8019e96 <__swsetup_r+0x32>
 8019e86:	2309      	movs	r3, #9
 8019e88:	602b      	str	r3, [r5, #0]
 8019e8a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019e8e:	81a3      	strh	r3, [r4, #12]
 8019e90:	f04f 30ff 	mov.w	r0, #4294967295
 8019e94:	e034      	b.n	8019f00 <__swsetup_r+0x9c>
 8019e96:	0758      	lsls	r0, r3, #29
 8019e98:	d512      	bpl.n	8019ec0 <__swsetup_r+0x5c>
 8019e9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019e9c:	b141      	cbz	r1, 8019eb0 <__swsetup_r+0x4c>
 8019e9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019ea2:	4299      	cmp	r1, r3
 8019ea4:	d002      	beq.n	8019eac <__swsetup_r+0x48>
 8019ea6:	4628      	mov	r0, r5
 8019ea8:	f7ff f9b2 	bl	8019210 <_free_r>
 8019eac:	2300      	movs	r3, #0
 8019eae:	6363      	str	r3, [r4, #52]	; 0x34
 8019eb0:	89a3      	ldrh	r3, [r4, #12]
 8019eb2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019eb6:	81a3      	strh	r3, [r4, #12]
 8019eb8:	2300      	movs	r3, #0
 8019eba:	6063      	str	r3, [r4, #4]
 8019ebc:	6923      	ldr	r3, [r4, #16]
 8019ebe:	6023      	str	r3, [r4, #0]
 8019ec0:	89a3      	ldrh	r3, [r4, #12]
 8019ec2:	f043 0308 	orr.w	r3, r3, #8
 8019ec6:	81a3      	strh	r3, [r4, #12]
 8019ec8:	6923      	ldr	r3, [r4, #16]
 8019eca:	b94b      	cbnz	r3, 8019ee0 <__swsetup_r+0x7c>
 8019ecc:	89a3      	ldrh	r3, [r4, #12]
 8019ece:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019ed6:	d003      	beq.n	8019ee0 <__swsetup_r+0x7c>
 8019ed8:	4621      	mov	r1, r4
 8019eda:	4628      	mov	r0, r5
 8019edc:	f000 f886 	bl	8019fec <__smakebuf_r>
 8019ee0:	89a0      	ldrh	r0, [r4, #12]
 8019ee2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019ee6:	f010 0301 	ands.w	r3, r0, #1
 8019eea:	d00a      	beq.n	8019f02 <__swsetup_r+0x9e>
 8019eec:	2300      	movs	r3, #0
 8019eee:	60a3      	str	r3, [r4, #8]
 8019ef0:	6963      	ldr	r3, [r4, #20]
 8019ef2:	425b      	negs	r3, r3
 8019ef4:	61a3      	str	r3, [r4, #24]
 8019ef6:	6923      	ldr	r3, [r4, #16]
 8019ef8:	b943      	cbnz	r3, 8019f0c <__swsetup_r+0xa8>
 8019efa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019efe:	d1c4      	bne.n	8019e8a <__swsetup_r+0x26>
 8019f00:	bd38      	pop	{r3, r4, r5, pc}
 8019f02:	0781      	lsls	r1, r0, #30
 8019f04:	bf58      	it	pl
 8019f06:	6963      	ldrpl	r3, [r4, #20]
 8019f08:	60a3      	str	r3, [r4, #8]
 8019f0a:	e7f4      	b.n	8019ef6 <__swsetup_r+0x92>
 8019f0c:	2000      	movs	r0, #0
 8019f0e:	e7f7      	b.n	8019f00 <__swsetup_r+0x9c>
 8019f10:	2000008c 	.word	0x2000008c

08019f14 <_sbrk_r>:
 8019f14:	b538      	push	{r3, r4, r5, lr}
 8019f16:	4d06      	ldr	r5, [pc, #24]	; (8019f30 <_sbrk_r+0x1c>)
 8019f18:	2300      	movs	r3, #0
 8019f1a:	4604      	mov	r4, r0
 8019f1c:	4608      	mov	r0, r1
 8019f1e:	602b      	str	r3, [r5, #0]
 8019f20:	f7e6 ff04 	bl	8000d2c <_sbrk>
 8019f24:	1c43      	adds	r3, r0, #1
 8019f26:	d102      	bne.n	8019f2e <_sbrk_r+0x1a>
 8019f28:	682b      	ldr	r3, [r5, #0]
 8019f2a:	b103      	cbz	r3, 8019f2e <_sbrk_r+0x1a>
 8019f2c:	6023      	str	r3, [r4, #0]
 8019f2e:	bd38      	pop	{r3, r4, r5, pc}
 8019f30:	20011240 	.word	0x20011240

08019f34 <abort>:
 8019f34:	b508      	push	{r3, lr}
 8019f36:	2006      	movs	r0, #6
 8019f38:	f000 f8bc 	bl	801a0b4 <raise>
 8019f3c:	2001      	movs	r0, #1
 8019f3e:	f7e6 fe7d 	bl	8000c3c <_exit>

08019f42 <_realloc_r>:
 8019f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f46:	4680      	mov	r8, r0
 8019f48:	4614      	mov	r4, r2
 8019f4a:	460e      	mov	r6, r1
 8019f4c:	b921      	cbnz	r1, 8019f58 <_realloc_r+0x16>
 8019f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019f52:	4611      	mov	r1, r2
 8019f54:	f7ff b9d0 	b.w	80192f8 <_malloc_r>
 8019f58:	b92a      	cbnz	r2, 8019f66 <_realloc_r+0x24>
 8019f5a:	f7ff f959 	bl	8019210 <_free_r>
 8019f5e:	4625      	mov	r5, r4
 8019f60:	4628      	mov	r0, r5
 8019f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f66:	f000 f8e3 	bl	801a130 <_malloc_usable_size_r>
 8019f6a:	4284      	cmp	r4, r0
 8019f6c:	4607      	mov	r7, r0
 8019f6e:	d802      	bhi.n	8019f76 <_realloc_r+0x34>
 8019f70:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019f74:	d812      	bhi.n	8019f9c <_realloc_r+0x5a>
 8019f76:	4621      	mov	r1, r4
 8019f78:	4640      	mov	r0, r8
 8019f7a:	f7ff f9bd 	bl	80192f8 <_malloc_r>
 8019f7e:	4605      	mov	r5, r0
 8019f80:	2800      	cmp	r0, #0
 8019f82:	d0ed      	beq.n	8019f60 <_realloc_r+0x1e>
 8019f84:	42bc      	cmp	r4, r7
 8019f86:	4622      	mov	r2, r4
 8019f88:	4631      	mov	r1, r6
 8019f8a:	bf28      	it	cs
 8019f8c:	463a      	movcs	r2, r7
 8019f8e:	f7ff f913 	bl	80191b8 <memcpy>
 8019f92:	4631      	mov	r1, r6
 8019f94:	4640      	mov	r0, r8
 8019f96:	f7ff f93b 	bl	8019210 <_free_r>
 8019f9a:	e7e1      	b.n	8019f60 <_realloc_r+0x1e>
 8019f9c:	4635      	mov	r5, r6
 8019f9e:	e7df      	b.n	8019f60 <_realloc_r+0x1e>

08019fa0 <__swhatbuf_r>:
 8019fa0:	b570      	push	{r4, r5, r6, lr}
 8019fa2:	460c      	mov	r4, r1
 8019fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019fa8:	2900      	cmp	r1, #0
 8019faa:	b096      	sub	sp, #88	; 0x58
 8019fac:	4615      	mov	r5, r2
 8019fae:	461e      	mov	r6, r3
 8019fb0:	da0d      	bge.n	8019fce <__swhatbuf_r+0x2e>
 8019fb2:	89a3      	ldrh	r3, [r4, #12]
 8019fb4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8019fb8:	f04f 0100 	mov.w	r1, #0
 8019fbc:	bf0c      	ite	eq
 8019fbe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8019fc2:	2340      	movne	r3, #64	; 0x40
 8019fc4:	2000      	movs	r0, #0
 8019fc6:	6031      	str	r1, [r6, #0]
 8019fc8:	602b      	str	r3, [r5, #0]
 8019fca:	b016      	add	sp, #88	; 0x58
 8019fcc:	bd70      	pop	{r4, r5, r6, pc}
 8019fce:	466a      	mov	r2, sp
 8019fd0:	f000 f878 	bl	801a0c4 <_fstat_r>
 8019fd4:	2800      	cmp	r0, #0
 8019fd6:	dbec      	blt.n	8019fb2 <__swhatbuf_r+0x12>
 8019fd8:	9901      	ldr	r1, [sp, #4]
 8019fda:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8019fde:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8019fe2:	4259      	negs	r1, r3
 8019fe4:	4159      	adcs	r1, r3
 8019fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019fea:	e7eb      	b.n	8019fc4 <__swhatbuf_r+0x24>

08019fec <__smakebuf_r>:
 8019fec:	898b      	ldrh	r3, [r1, #12]
 8019fee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019ff0:	079d      	lsls	r5, r3, #30
 8019ff2:	4606      	mov	r6, r0
 8019ff4:	460c      	mov	r4, r1
 8019ff6:	d507      	bpl.n	801a008 <__smakebuf_r+0x1c>
 8019ff8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019ffc:	6023      	str	r3, [r4, #0]
 8019ffe:	6123      	str	r3, [r4, #16]
 801a000:	2301      	movs	r3, #1
 801a002:	6163      	str	r3, [r4, #20]
 801a004:	b002      	add	sp, #8
 801a006:	bd70      	pop	{r4, r5, r6, pc}
 801a008:	ab01      	add	r3, sp, #4
 801a00a:	466a      	mov	r2, sp
 801a00c:	f7ff ffc8 	bl	8019fa0 <__swhatbuf_r>
 801a010:	9900      	ldr	r1, [sp, #0]
 801a012:	4605      	mov	r5, r0
 801a014:	4630      	mov	r0, r6
 801a016:	f7ff f96f 	bl	80192f8 <_malloc_r>
 801a01a:	b948      	cbnz	r0, 801a030 <__smakebuf_r+0x44>
 801a01c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a020:	059a      	lsls	r2, r3, #22
 801a022:	d4ef      	bmi.n	801a004 <__smakebuf_r+0x18>
 801a024:	f023 0303 	bic.w	r3, r3, #3
 801a028:	f043 0302 	orr.w	r3, r3, #2
 801a02c:	81a3      	strh	r3, [r4, #12]
 801a02e:	e7e3      	b.n	8019ff8 <__smakebuf_r+0xc>
 801a030:	89a3      	ldrh	r3, [r4, #12]
 801a032:	6020      	str	r0, [r4, #0]
 801a034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a038:	81a3      	strh	r3, [r4, #12]
 801a03a:	9b00      	ldr	r3, [sp, #0]
 801a03c:	6163      	str	r3, [r4, #20]
 801a03e:	9b01      	ldr	r3, [sp, #4]
 801a040:	6120      	str	r0, [r4, #16]
 801a042:	b15b      	cbz	r3, 801a05c <__smakebuf_r+0x70>
 801a044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a048:	4630      	mov	r0, r6
 801a04a:	f000 f84d 	bl	801a0e8 <_isatty_r>
 801a04e:	b128      	cbz	r0, 801a05c <__smakebuf_r+0x70>
 801a050:	89a3      	ldrh	r3, [r4, #12]
 801a052:	f023 0303 	bic.w	r3, r3, #3
 801a056:	f043 0301 	orr.w	r3, r3, #1
 801a05a:	81a3      	strh	r3, [r4, #12]
 801a05c:	89a3      	ldrh	r3, [r4, #12]
 801a05e:	431d      	orrs	r5, r3
 801a060:	81a5      	strh	r5, [r4, #12]
 801a062:	e7cf      	b.n	801a004 <__smakebuf_r+0x18>

0801a064 <_raise_r>:
 801a064:	291f      	cmp	r1, #31
 801a066:	b538      	push	{r3, r4, r5, lr}
 801a068:	4604      	mov	r4, r0
 801a06a:	460d      	mov	r5, r1
 801a06c:	d904      	bls.n	801a078 <_raise_r+0x14>
 801a06e:	2316      	movs	r3, #22
 801a070:	6003      	str	r3, [r0, #0]
 801a072:	f04f 30ff 	mov.w	r0, #4294967295
 801a076:	bd38      	pop	{r3, r4, r5, pc}
 801a078:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801a07a:	b112      	cbz	r2, 801a082 <_raise_r+0x1e>
 801a07c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a080:	b94b      	cbnz	r3, 801a096 <_raise_r+0x32>
 801a082:	4620      	mov	r0, r4
 801a084:	f000 f852 	bl	801a12c <_getpid_r>
 801a088:	462a      	mov	r2, r5
 801a08a:	4601      	mov	r1, r0
 801a08c:	4620      	mov	r0, r4
 801a08e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a092:	f000 b839 	b.w	801a108 <_kill_r>
 801a096:	2b01      	cmp	r3, #1
 801a098:	d00a      	beq.n	801a0b0 <_raise_r+0x4c>
 801a09a:	1c59      	adds	r1, r3, #1
 801a09c:	d103      	bne.n	801a0a6 <_raise_r+0x42>
 801a09e:	2316      	movs	r3, #22
 801a0a0:	6003      	str	r3, [r0, #0]
 801a0a2:	2001      	movs	r0, #1
 801a0a4:	e7e7      	b.n	801a076 <_raise_r+0x12>
 801a0a6:	2400      	movs	r4, #0
 801a0a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a0ac:	4628      	mov	r0, r5
 801a0ae:	4798      	blx	r3
 801a0b0:	2000      	movs	r0, #0
 801a0b2:	e7e0      	b.n	801a076 <_raise_r+0x12>

0801a0b4 <raise>:
 801a0b4:	4b02      	ldr	r3, [pc, #8]	; (801a0c0 <raise+0xc>)
 801a0b6:	4601      	mov	r1, r0
 801a0b8:	6818      	ldr	r0, [r3, #0]
 801a0ba:	f7ff bfd3 	b.w	801a064 <_raise_r>
 801a0be:	bf00      	nop
 801a0c0:	2000008c 	.word	0x2000008c

0801a0c4 <_fstat_r>:
 801a0c4:	b538      	push	{r3, r4, r5, lr}
 801a0c6:	4d07      	ldr	r5, [pc, #28]	; (801a0e4 <_fstat_r+0x20>)
 801a0c8:	2300      	movs	r3, #0
 801a0ca:	4604      	mov	r4, r0
 801a0cc:	4608      	mov	r0, r1
 801a0ce:	4611      	mov	r1, r2
 801a0d0:	602b      	str	r3, [r5, #0]
 801a0d2:	f7e6 fe02 	bl	8000cda <_fstat>
 801a0d6:	1c43      	adds	r3, r0, #1
 801a0d8:	d102      	bne.n	801a0e0 <_fstat_r+0x1c>
 801a0da:	682b      	ldr	r3, [r5, #0]
 801a0dc:	b103      	cbz	r3, 801a0e0 <_fstat_r+0x1c>
 801a0de:	6023      	str	r3, [r4, #0]
 801a0e0:	bd38      	pop	{r3, r4, r5, pc}
 801a0e2:	bf00      	nop
 801a0e4:	20011240 	.word	0x20011240

0801a0e8 <_isatty_r>:
 801a0e8:	b538      	push	{r3, r4, r5, lr}
 801a0ea:	4d06      	ldr	r5, [pc, #24]	; (801a104 <_isatty_r+0x1c>)
 801a0ec:	2300      	movs	r3, #0
 801a0ee:	4604      	mov	r4, r0
 801a0f0:	4608      	mov	r0, r1
 801a0f2:	602b      	str	r3, [r5, #0]
 801a0f4:	f7e6 fe01 	bl	8000cfa <_isatty>
 801a0f8:	1c43      	adds	r3, r0, #1
 801a0fa:	d102      	bne.n	801a102 <_isatty_r+0x1a>
 801a0fc:	682b      	ldr	r3, [r5, #0]
 801a0fe:	b103      	cbz	r3, 801a102 <_isatty_r+0x1a>
 801a100:	6023      	str	r3, [r4, #0]
 801a102:	bd38      	pop	{r3, r4, r5, pc}
 801a104:	20011240 	.word	0x20011240

0801a108 <_kill_r>:
 801a108:	b538      	push	{r3, r4, r5, lr}
 801a10a:	4d07      	ldr	r5, [pc, #28]	; (801a128 <_kill_r+0x20>)
 801a10c:	2300      	movs	r3, #0
 801a10e:	4604      	mov	r4, r0
 801a110:	4608      	mov	r0, r1
 801a112:	4611      	mov	r1, r2
 801a114:	602b      	str	r3, [r5, #0]
 801a116:	f7e6 fd7f 	bl	8000c18 <_kill>
 801a11a:	1c43      	adds	r3, r0, #1
 801a11c:	d102      	bne.n	801a124 <_kill_r+0x1c>
 801a11e:	682b      	ldr	r3, [r5, #0]
 801a120:	b103      	cbz	r3, 801a124 <_kill_r+0x1c>
 801a122:	6023      	str	r3, [r4, #0]
 801a124:	bd38      	pop	{r3, r4, r5, pc}
 801a126:	bf00      	nop
 801a128:	20011240 	.word	0x20011240

0801a12c <_getpid_r>:
 801a12c:	f7e6 bd6c 	b.w	8000c08 <_getpid>

0801a130 <_malloc_usable_size_r>:
 801a130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a134:	1f18      	subs	r0, r3, #4
 801a136:	2b00      	cmp	r3, #0
 801a138:	bfbc      	itt	lt
 801a13a:	580b      	ldrlt	r3, [r1, r0]
 801a13c:	18c0      	addlt	r0, r0, r3
 801a13e:	4770      	bx	lr

0801a140 <_init>:
 801a140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a142:	bf00      	nop
 801a144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a146:	bc08      	pop	{r3}
 801a148:	469e      	mov	lr, r3
 801a14a:	4770      	bx	lr

0801a14c <_fini>:
 801a14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a14e:	bf00      	nop
 801a150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a152:	bc08      	pop	{r3}
 801a154:	469e      	mov	lr, r3
 801a156:	4770      	bx	lr
