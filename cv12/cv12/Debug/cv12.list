
cv12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018ea0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000deec  08019050  08019050  00029050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026f3c  08026f3c  00040090  2**0
                  CONTENTS
  4 .ARM          00000008  08026f3c  08026f3c  00036f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026f44  08026f44  00040090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026f44  08026f44  00036f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08026f48  08026f48  00036f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08026f4c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040090  2**0
                  CONTENTS
 10 .bss          00010fac  20000090  20000090  00040090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001103c  2001103c  00040090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040090  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000400c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00033a75  00000000  00000000  00040103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008192  00000000  00000000  00073b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000024d8  00000000  00000000  0007bd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001d2f  00000000  00000000  0007e1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00036e72  00000000  00000000  0007ff17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003bd00  00000000  00000000  000b6d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00102034  00000000  00000000  000f2a89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000a088  00000000  00000000  001f4ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  001feb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08019038 	.word	0x08019038

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	08019038 	.word	0x08019038

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4a06      	ldr	r2, [pc, #24]	; (80005ec <vApplicationGetIdleTaskMemory+0x30>)
 80005d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	200000ac 	.word	0x200000ac
 80005ec:	2000014c 	.word	0x2000014c

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fd9b 	bl	8001130 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f81d 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f8af 	bl	8000760 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000602:	f000 f883 	bl	800070c <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <main+0x40>)
 8000608:	1d3c      	adds	r4, r7, #4
 800060a:	461d      	mov	r5, r3
 800060c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000610:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000614:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f004 fa83 	bl	8004b28 <osThreadCreate>
 8000622:	4603      	mov	r3, r0
 8000624:	4a03      	ldr	r2, [pc, #12]	; (8000634 <main+0x44>)
 8000626:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000628:	f004 fa67 	bl	8004afa <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062c:	e7fe      	b.n	800062c <main+0x3c>
 800062e:	bf00      	nop
 8000630:	0801905c 	.word	0x0801905c
 8000634:	20000390 	.word	0x20000390

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	; 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f017 fdd7 	bl	80181fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a27      	ldr	r2, [pc, #156]	; (8000704 <SystemClock_Config+0xcc>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b22      	ldr	r3, [pc, #136]	; (8000708 <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <SystemClock_Config+0xd0>)
 8000682:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000694:	2301      	movs	r3, #1
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000698:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a8:	2304      	movs	r3, #4
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006ac:	23a8      	movs	r3, #168	; 0xa8
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b4:	2307      	movs	r3, #7
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 fa95 	bl	8002bec <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c8:	f000 f938 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2105      	movs	r1, #5
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 fcf6 	bl	80030dc <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006f6:	f000 f921 	bl	800093c <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	; 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000712:	4a12      	ldr	r2, [pc, #72]	; (800075c <MX_USART3_UART_Init+0x50>)
 8000714:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000744:	f003 f9ca 	bl	8003adc <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800074e:	f000 f8f5 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000034c 	.word	0x2000034c
 800075c:	40004800 	.word	0x40004800

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08c      	sub	sp, #48	; 0x30
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
 800077a:	4b5b      	ldr	r3, [pc, #364]	; (80008e8 <MX_GPIO_Init+0x188>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a5a      	ldr	r2, [pc, #360]	; (80008e8 <MX_GPIO_Init+0x188>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b58      	ldr	r3, [pc, #352]	; (80008e8 <MX_GPIO_Init+0x188>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	61bb      	str	r3, [r7, #24]
 8000790:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	4b54      	ldr	r3, [pc, #336]	; (80008e8 <MX_GPIO_Init+0x188>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a53      	ldr	r2, [pc, #332]	; (80008e8 <MX_GPIO_Init+0x188>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b51      	ldr	r3, [pc, #324]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	4b4d      	ldr	r3, [pc, #308]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a4c      	ldr	r2, [pc, #304]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b4a      	ldr	r3, [pc, #296]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	4b46      	ldr	r3, [pc, #280]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a45      	ldr	r2, [pc, #276]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b43      	ldr	r3, [pc, #268]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	4b3f      	ldr	r3, [pc, #252]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a3e      	ldr	r2, [pc, #248]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007f0:	f043 0308 	orr.w	r3, r3, #8
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b3c      	ldr	r3, [pc, #240]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b38      	ldr	r3, [pc, #224]	; (80008e8 <MX_GPIO_Init+0x188>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a37      	ldr	r2, [pc, #220]	; (80008e8 <MX_GPIO_Init+0x188>)
 800080c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <MX_GPIO_Init+0x188>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f244 0181 	movw	r1, #16513	; 0x4081
 8000824:	4831      	ldr	r0, [pc, #196]	; (80008ec <MX_GPIO_Init+0x18c>)
 8000826:	f002 f9c7 	bl	8002bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2140      	movs	r1, #64	; 0x40
 800082e:	4830      	ldr	r0, [pc, #192]	; (80008f0 <MX_GPIO_Init+0x190>)
 8000830:	f002 f9c2 	bl	8002bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000834:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800083a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	482a      	ldr	r0, [pc, #168]	; (80008f4 <MX_GPIO_Init+0x194>)
 800084c:	f002 f808 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000850:	f244 0381 	movw	r3, #16513	; 0x4081
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4820      	ldr	r0, [pc, #128]	; (80008ec <MX_GPIO_Init+0x18c>)
 800086a:	f001 fff9 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800086e:	2340      	movs	r3, #64	; 0x40
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	481a      	ldr	r0, [pc, #104]	; (80008f0 <MX_GPIO_Init+0x190>)
 8000886:	f001 ffeb 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800088a:	2380      	movs	r3, #128	; 0x80
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4814      	ldr	r0, [pc, #80]	; (80008f0 <MX_GPIO_Init+0x190>)
 800089e:	f001 ffdf 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008a2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b0:	2303      	movs	r3, #3
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008b4:	230a      	movs	r3, #10
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	480e      	ldr	r0, [pc, #56]	; (80008f8 <MX_GPIO_Init+0x198>)
 80008c0:	f001 ffce 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	4807      	ldr	r0, [pc, #28]	; (80008f8 <MX_GPIO_Init+0x198>)
 80008da:	f001 ffc1 	bl	8002860 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008de:	bf00      	nop
 80008e0:	3730      	adds	r7, #48	; 0x30
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020400 	.word	0x40020400
 80008f0:	40021800 	.word	0x40021800
 80008f4:	40020800 	.word	0x40020800
 80008f8:	40020000 	.word	0x40020000

080008fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000904:	f003 fbac 	bl	8004060 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpecho_init();
 8000908:	f000 fa74 	bl	8000df4 <tcpecho_init>
  /* Initialize HTTP server */
  httpd_init();
 800090c:	f00a f9d0 	bl	800acb0 <httpd_init>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f004 f955 	bl	8004bc0 <osDelay>
 8000916:	e7fb      	b.n	8000910 <StartDefaultTask+0x14>

08000918 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a04      	ldr	r2, [pc, #16]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d101      	bne.n	800092e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092a:	f000 fc23 	bl	8001174 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40002000 	.word	0x40002000

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_MspInit+0x54>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	4a11      	ldr	r2, [pc, #68]	; (800099c <HAL_MspInit+0x54>)
 8000958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095c:	6453      	str	r3, [r2, #68]	; 0x44
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <HAL_MspInit+0x54>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <HAL_MspInit+0x54>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4a0a      	ldr	r2, [pc, #40]	; (800099c <HAL_MspInit+0x54>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000978:	6413      	str	r3, [r2, #64]	; 0x40
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <HAL_MspInit+0x54>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	210f      	movs	r1, #15
 800098a:	f06f 0001 	mvn.w	r0, #1
 800098e:	f000 fced 	bl	800136c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800

080009a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <HAL_UART_MspInit+0x84>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d12c      	bne.n	8000a1c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a17      	ldr	r2, [pc, #92]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a10      	ldr	r2, [pc, #64]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009e8:	f043 0308 	orr.w	r3, r3, #8
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0308 	and.w	r3, r3, #8
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a0c:	2307      	movs	r3, #7
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <HAL_UART_MspInit+0x8c>)
 8000a18:	f001 ff22 	bl	8002860 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a1c:	bf00      	nop
 8000a1e:	3728      	adds	r7, #40	; 0x28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40004800 	.word	0x40004800
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020c00 	.word	0x40020c00

08000a30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08e      	sub	sp, #56	; 0x38
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000a40:	2300      	movs	r3, #0
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	4b33      	ldr	r3, [pc, #204]	; (8000b14 <HAL_InitTick+0xe4>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	4a32      	ldr	r2, [pc, #200]	; (8000b14 <HAL_InitTick+0xe4>)
 8000a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a50:	4b30      	ldr	r3, [pc, #192]	; (8000b14 <HAL_InitTick+0xe4>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a5c:	f107 0210 	add.w	r2, r7, #16
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4611      	mov	r1, r2
 8000a66:	4618      	mov	r0, r3
 8000a68:	f002 fd58 	bl	800351c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a6c:	6a3b      	ldr	r3, [r7, #32]
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d103      	bne.n	8000a7e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a76:	f002 fd29 	bl	80034cc <HAL_RCC_GetPCLK1Freq>
 8000a7a:	6378      	str	r0, [r7, #52]	; 0x34
 8000a7c:	e004      	b.n	8000a88 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a7e:	f002 fd25 	bl	80034cc <HAL_RCC_GetPCLK1Freq>
 8000a82:	4603      	mov	r3, r0
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a8a:	4a23      	ldr	r2, [pc, #140]	; (8000b18 <HAL_InitTick+0xe8>)
 8000a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a90:	0c9b      	lsrs	r3, r3, #18
 8000a92:	3b01      	subs	r3, #1
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a96:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <HAL_InitTick+0xec>)
 8000a98:	4a21      	ldr	r2, [pc, #132]	; (8000b20 <HAL_InitTick+0xf0>)
 8000a9a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <HAL_InitTick+0xec>)
 8000a9e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aa2:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000aa4:	4a1d      	ldr	r2, [pc, #116]	; (8000b1c <HAL_InitTick+0xec>)
 8000aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa8:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <HAL_InitTick+0xec>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <HAL_InitTick+0xec>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <HAL_InitTick+0xec>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000abc:	4817      	ldr	r0, [pc, #92]	; (8000b1c <HAL_InitTick+0xec>)
 8000abe:	f002 fd5f 	bl	8003580 <HAL_TIM_Base_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ac8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d11b      	bne.n	8000b08 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000ad0:	4812      	ldr	r0, [pc, #72]	; (8000b1c <HAL_InitTick+0xec>)
 8000ad2:	f002 fdaf 	bl	8003634 <HAL_TIM_Base_Start_IT>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000adc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d111      	bne.n	8000b08 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000ae4:	202d      	movs	r0, #45	; 0x2d
 8000ae6:	f000 fc5d 	bl	80013a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b0f      	cmp	r3, #15
 8000aee:	d808      	bhi.n	8000b02 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	202d      	movs	r0, #45	; 0x2d
 8000af6:	f000 fc39 	bl	800136c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <HAL_InitTick+0xf4>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6013      	str	r3, [r2, #0]
 8000b00:	e002      	b.n	8000b08 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3738      	adds	r7, #56	; 0x38
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40023800 	.word	0x40023800
 8000b18:	431bde83 	.word	0x431bde83
 8000b1c:	20000394 	.word	0x20000394
 8000b20:	40002000 	.word	0x40002000
 8000b24:	20000004 	.word	0x20000004

08000b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <NMI_Handler+0x4>

08000b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <HardFault_Handler+0x4>

08000b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <MemManage_Handler+0x4>

08000b3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <BusFault_Handler+0x4>

08000b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <UsageFault_Handler+0x4>

08000b46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b58:	4802      	ldr	r0, [pc, #8]	; (8000b64 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000b5a:	f002 fddb 	bl	8003714 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000394 	.word	0x20000394

08000b68 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <ETH_IRQHandler+0x10>)
 8000b6e:	f000 ffa1 	bl	8001ab4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20004efc 	.word	0x20004efc

08000b7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return 1;
 8000b80:	2301      	movs	r3, #1
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <_kill>:

int _kill(int pid, int sig)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <_kill+0x20>)
 8000b98:	2216      	movs	r2, #22
 8000b9a:	601a      	str	r2, [r3, #0]
  return -1;
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	2001102c 	.word	0x2001102c

08000bb0 <_exit>:

void _exit (int status)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f7ff ffe5 	bl	8000b8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bc2:	e7fe      	b.n	8000bc2 <_exit+0x12>

08000bc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	e00a      	b.n	8000bec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bd6:	f3af 8000 	nop.w
 8000bda:	4601      	mov	r1, r0
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	1c5a      	adds	r2, r3, #1
 8000be0:	60ba      	str	r2, [r7, #8]
 8000be2:	b2ca      	uxtb	r2, r1
 8000be4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	3301      	adds	r3, #1
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	697a      	ldr	r2, [r7, #20]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	dbf0      	blt.n	8000bd6 <_read+0x12>
  }

  return len;
 8000bf4:	687b      	ldr	r3, [r7, #4]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b086      	sub	sp, #24
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	60f8      	str	r0, [r7, #12]
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	e009      	b.n	8000c24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	1c5a      	adds	r2, r3, #1
 8000c14:	60ba      	str	r2, [r7, #8]
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	3301      	adds	r3, #1
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	697a      	ldr	r2, [r7, #20]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	dbf1      	blt.n	8000c10 <_write+0x12>
  }
  return len;
 8000c2c:	687b      	ldr	r3, [r7, #4]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <_close>:

int _close(int file)
{
 8000c36:	b480      	push	{r7}
 8000c38:	b083      	sub	sp, #12
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	b083      	sub	sp, #12
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c5e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <_isatty>:

int _isatty(int file)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
	...

08000ca0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b087      	sub	sp, #28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca8:	4a14      	ldr	r2, [pc, #80]	; (8000cfc <_sbrk+0x5c>)
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <_sbrk+0x60>)
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <_sbrk+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d102      	bne.n	8000cc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <_sbrk+0x64>)
 8000cbe:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <_sbrk+0x68>)
 8000cc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <_sbrk+0x64>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d205      	bcs.n	8000cdc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <_sbrk+0x6c>)
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	e009      	b.n	8000cf0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <_sbrk+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	4a06      	ldr	r2, [pc, #24]	; (8000d04 <_sbrk+0x64>)
 8000cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	371c      	adds	r7, #28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	20030000 	.word	0x20030000
 8000d00:	00000400 	.word	0x00000400
 8000d04:	200003dc 	.word	0x200003dc
 8000d08:	20011040 	.word	0x20011040
 8000d0c:	2001102c 	.word	0x2001102c

08000d10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <SystemInit+0x20>)
 8000d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1a:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <SystemInit+0x20>)
 8000d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af02      	add	r7, sp, #8
 8000d3a:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2010      	movs	r0, #16
 8000d42:	f006 fec9 	bl	8007ad8 <netconn_new_with_proto_and_callback>
 8000d46:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d04e      	beq.n	8000dec <tcpecho_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000d4e:	2207      	movs	r2, #7
 8000d50:	2100      	movs	r1, #0
 8000d52:	69f8      	ldr	r0, [r7, #28]
 8000d54:	f006 ff7a 	bl	8007c4c <netconn_bind>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000d5c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d13f      	bne.n	8000de4 <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000d64:	21ff      	movs	r1, #255	; 0xff
 8000d66:	69f8      	ldr	r0, [r7, #28]
 8000d68:	f006 ffa8 	bl	8007cbc <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4619      	mov	r1, r3
 8000d72:	69f8      	ldr	r0, [r7, #28]
 8000d74:	f006 ffce 	bl	8007d14 <netconn_accept>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000d7c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1f3      	bne.n	8000d6c <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000d84:	e01b      	b.n	8000dbe <tcpecho_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	f107 020a 	add.w	r2, r7, #10
 8000d8c:	f107 010c 	add.w	r1, r7, #12
 8000d90:	4618      	mov	r0, r3
 8000d92:	f008 ff61 	bl	8009c58 <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000d96:	6978      	ldr	r0, [r7, #20]
 8000d98:	68f9      	ldr	r1, [r7, #12]
 8000d9a:	897b      	ldrh	r3, [r7, #10]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	2300      	movs	r3, #0
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2301      	movs	r3, #1
 8000da4:	f007 fa38 	bl	8008218 <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f008 ff9e 	bl	8009cec <netbuf_next>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	dae7      	bge.n	8000d86 <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f008 ff2d 	bl	8009c18 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	f107 0210 	add.w	r2, r7, #16
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f007 f9ac 	bl	8008124 <netconn_recv>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d0d9      	beq.n	8000d86 <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f007 fb21 	bl	800841c <netconn_close>
          netconn_delete(newconn);
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f006 ff19 	bl	8007c14 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000de2:	e7c3      	b.n	8000d6c <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f006 ff14 	bl	8007c14 <netconn_delete>
    }
  }
}
 8000dec:	bf00      	nop
 8000dee:	3720      	adds	r7, #32
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e02:	2200      	movs	r2, #0
 8000e04:	4903      	ldr	r1, [pc, #12]	; (8000e14 <tcpecho_init+0x20>)
 8000e06:	4804      	ldr	r0, [pc, #16]	; (8000e18 <tcpecho_init+0x24>)
 8000e08:	f017 f860 	bl	8017ecc <sys_thread_new>
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	08000d35 	.word	0x08000d35
 8000e18:	08019078 	.word	0x08019078

08000e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e54 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e22:	490e      	ldr	r1, [pc, #56]	; (8000e5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e24:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0b      	ldr	r2, [pc, #44]	; (8000e64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e38:	4c0b      	ldr	r4, [pc, #44]	; (8000e68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e46:	f7ff ff63 	bl	8000d10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f017 fa99 	bl	8018380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4e:	f7ff fbcf 	bl	80005f0 <main>
  bx  lr    
 8000e52:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e54:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e60:	08026f4c 	.word	0x08026f4c
  ldr r2, =_sbss
 8000e64:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000e68:	2001103c 	.word	0x2001103c

08000e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC_IRQHandler>

08000e6e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
 8000e76:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d00b      	beq.n	8000e96 <LAN8742_RegisterBusIO+0x28>
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d007      	beq.n	8000e96 <LAN8742_RegisterBusIO+0x28>
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <LAN8742_RegisterBusIO+0x28>
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	691b      	ldr	r3, [r3, #16]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d102      	bne.n	8000e9c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9a:	e014      	b.n	8000ec6 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	68da      	ldr	r2, [r3, #12]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	691a      	ldr	r2, [r3, #16]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d17c      	bne.n	8000fec <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d002      	beq.n	8000f00 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2220      	movs	r2, #32
 8000f04:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	e01c      	b.n	8000f46 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	f107 0208 	add.w	r2, r7, #8
 8000f14:	2112      	movs	r1, #18
 8000f16:	6978      	ldr	r0, [r7, #20]
 8000f18:	4798      	blx	r3
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	da03      	bge.n	8000f28 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000f20:	f06f 0304 	mvn.w	r3, #4
 8000f24:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000f26:	e00b      	b.n	8000f40 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	f003 031f 	and.w	r3, r3, #31
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d105      	bne.n	8000f40 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
         break;
 8000f3e:	e005      	b.n	8000f4c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	3301      	adds	r3, #1
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	2b1f      	cmp	r3, #31
 8000f4a:	d9df      	bls.n	8000f0c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b1f      	cmp	r3, #31
 8000f52:	d902      	bls.n	8000f5a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000f54:	f06f 0302 	mvn.w	r3, #2
 8000f58:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d145      	bne.n	8000fec <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	6810      	ldr	r0, [r2, #0]
 8000f68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4798      	blx	r3
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	db37      	blt.n	8000fe6 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	6810      	ldr	r0, [r2, #0]
 8000f7e:	f107 0208 	add.w	r2, r7, #8
 8000f82:	2100      	movs	r1, #0
 8000f84:	4798      	blx	r3
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	db28      	blt.n	8000fde <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4798      	blx	r3
 8000f92:	4603      	mov	r3, r0
 8000f94:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000f96:	e01c      	b.n	8000fd2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	4798      	blx	r3
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000faa:	d80e      	bhi.n	8000fca <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	6810      	ldr	r0, [r2, #0]
 8000fb4:	f107 0208 	add.w	r2, r7, #8
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4798      	blx	r3
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	da07      	bge.n	8000fd2 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000fc2:	f06f 0304 	mvn.w	r3, #4
 8000fc6:	613b      	str	r3, [r7, #16]
                 break;
 8000fc8:	e010      	b.n	8000fec <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000fca:	f06f 0301 	mvn.w	r3, #1
 8000fce:	613b      	str	r3, [r7, #16]
               break;
 8000fd0:	e00c      	b.n	8000fec <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1dd      	bne.n	8000f98 <LAN8742_Init+0xc6>
 8000fdc:	e006      	b.n	8000fec <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000fde:	f06f 0304 	mvn.w	r3, #4
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	e002      	b.n	8000fec <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000fe6:	f06f 0303 	mvn.w	r3, #3
 8000fea:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d112      	bne.n	8001018 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	4798      	blx	r3
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000ffc:	bf00      	nop
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	4798      	blx	r3
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001010:	d9f5      	bls.n	8000ffe <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2201      	movs	r2, #1
 8001016:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001018:	693b      	ldr	r3, [r7, #16]
 }
 800101a:	4618      	mov	r0, r3
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b084      	sub	sp, #16
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	6810      	ldr	r0, [r2, #0]
 8001036:	f107 020c 	add.w	r2, r7, #12
 800103a:	2101      	movs	r1, #1
 800103c:	4798      	blx	r3
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	da02      	bge.n	800104a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001044:	f06f 0304 	mvn.w	r3, #4
 8001048:	e06e      	b.n	8001128 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	6810      	ldr	r0, [r2, #0]
 8001052:	f107 020c 	add.w	r2, r7, #12
 8001056:	2101      	movs	r1, #1
 8001058:	4798      	blx	r3
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	da02      	bge.n	8001066 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001060:	f06f 0304 	mvn.w	r3, #4
 8001064:	e060      	b.n	8001128 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	2b00      	cmp	r3, #0
 800106e:	d101      	bne.n	8001074 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001070:	2301      	movs	r3, #1
 8001072:	e059      	b.n	8001128 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	6810      	ldr	r0, [r2, #0]
 800107c:	f107 020c 	add.w	r2, r7, #12
 8001080:	2100      	movs	r1, #0
 8001082:	4798      	blx	r3
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	da02      	bge.n	8001090 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800108a:	f06f 0304 	mvn.w	r3, #4
 800108e:	e04b      	b.n	8001128 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d11b      	bne.n	80010d2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d006      	beq.n	80010b2 <LAN8742_GetLinkState+0x90>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80010ae:	2302      	movs	r3, #2
 80010b0:	e03a      	b.n	8001128 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80010bc:	2303      	movs	r3, #3
 80010be:	e033      	b.n	8001128 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80010ca:	2304      	movs	r3, #4
 80010cc:	e02c      	b.n	8001128 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80010ce:	2305      	movs	r3, #5
 80010d0:	e02a      	b.n	8001128 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	6810      	ldr	r0, [r2, #0]
 80010da:	f107 020c 	add.w	r2, r7, #12
 80010de:	211f      	movs	r1, #31
 80010e0:	4798      	blx	r3
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	da02      	bge.n	80010ee <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80010e8:	f06f 0304 	mvn.w	r3, #4
 80010ec:	e01c      	b.n	8001128 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80010f8:	2306      	movs	r3, #6
 80010fa:	e015      	b.n	8001128 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f003 031c 	and.w	r3, r3, #28
 8001102:	2b18      	cmp	r3, #24
 8001104:	d101      	bne.n	800110a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001106:	2302      	movs	r3, #2
 8001108:	e00e      	b.n	8001128 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f003 031c 	and.w	r3, r3, #28
 8001110:	2b08      	cmp	r3, #8
 8001112:	d101      	bne.n	8001118 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001114:	2303      	movs	r3, #3
 8001116:	e007      	b.n	8001128 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f003 031c 	and.w	r3, r3, #28
 800111e:	2b14      	cmp	r3, #20
 8001120:	d101      	bne.n	8001126 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001122:	2304      	movs	r3, #4
 8001124:	e000      	b.n	8001128 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001126:	2305      	movs	r3, #5
    }				
  }
}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001134:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <HAL_Init+0x40>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <HAL_Init+0x40>)
 800113a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800113e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <HAL_Init+0x40>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <HAL_Init+0x40>)
 8001146:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800114a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <HAL_Init+0x40>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a07      	ldr	r2, [pc, #28]	; (8001170 <HAL_Init+0x40>)
 8001152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001156:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001158:	2003      	movs	r0, #3
 800115a:	f000 f8fc 	bl	8001356 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115e:	200f      	movs	r0, #15
 8001160:	f7ff fc66 	bl	8000a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001164:	f7ff fbf0 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023c00 	.word	0x40023c00

08001174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_IncTick+0x20>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_IncTick+0x24>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4413      	add	r3, r2
 8001184:	4a04      	ldr	r2, [pc, #16]	; (8001198 <HAL_IncTick+0x24>)
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000008 	.word	0x20000008
 8001198:	200003e0 	.word	0x200003e0

0800119c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <HAL_GetTick+0x14>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	200003e0 	.word	0x200003e0

080011b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011bc:	f7ff ffee 	bl	800119c <HAL_GetTick>
 80011c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011cc:	d005      	beq.n	80011da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <HAL_Delay+0x44>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4413      	add	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011da:	bf00      	nop
 80011dc:	f7ff ffde 	bl	800119c <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d8f7      	bhi.n	80011dc <HAL_Delay+0x28>
  {
  }
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000008 	.word	0x20000008

080011fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001218:	4013      	ands	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	60d3      	str	r3, [r2, #12]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <__NVIC_GetPriorityGrouping+0x18>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	f003 0307 	and.w	r3, r3, #7
}
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	2b00      	cmp	r3, #0
 8001270:	db0b      	blt.n	800128a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	f003 021f 	and.w	r2, r3, #31
 8001278:	4907      	ldr	r1, [pc, #28]	; (8001298 <__NVIC_EnableIRQ+0x38>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	095b      	lsrs	r3, r3, #5
 8001280:	2001      	movs	r0, #1
 8001282:	fa00 f202 	lsl.w	r2, r0, r2
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000e100 	.word	0xe000e100

0800129c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	db0a      	blt.n	80012c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	490c      	ldr	r1, [pc, #48]	; (80012e8 <__NVIC_SetPriority+0x4c>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	0112      	lsls	r2, r2, #4
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	440b      	add	r3, r1
 80012c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c4:	e00a      	b.n	80012dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4908      	ldr	r1, [pc, #32]	; (80012ec <__NVIC_SetPriority+0x50>)
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	3b04      	subs	r3, #4
 80012d4:	0112      	lsls	r2, r2, #4
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	440b      	add	r3, r1
 80012da:	761a      	strb	r2, [r3, #24]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000e100 	.word	0xe000e100
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	; 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f1c3 0307 	rsb	r3, r3, #7
 800130a:	2b04      	cmp	r3, #4
 800130c:	bf28      	it	cs
 800130e:	2304      	movcs	r3, #4
 8001310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3304      	adds	r3, #4
 8001316:	2b06      	cmp	r3, #6
 8001318:	d902      	bls.n	8001320 <NVIC_EncodePriority+0x30>
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3b03      	subs	r3, #3
 800131e:	e000      	b.n	8001322 <NVIC_EncodePriority+0x32>
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	f04f 32ff 	mov.w	r2, #4294967295
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	401a      	ands	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001338:	f04f 31ff 	mov.w	r1, #4294967295
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	43d9      	mvns	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	4313      	orrs	r3, r2
         );
}
 800134a:	4618      	mov	r0, r3
 800134c:	3724      	adds	r7, #36	; 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ff4c 	bl	80011fc <__NVIC_SetPriorityGrouping>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
 8001378:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800137e:	f7ff ff61 	bl	8001244 <__NVIC_GetPriorityGrouping>
 8001382:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	68b9      	ldr	r1, [r7, #8]
 8001388:	6978      	ldr	r0, [r7, #20]
 800138a:	f7ff ffb1 	bl	80012f0 <NVIC_EncodePriority>
 800138e:	4602      	mov	r2, r0
 8001390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001394:	4611      	mov	r1, r2
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ff80 	bl	800129c <__NVIC_SetPriority>
}
 800139c:	bf00      	nop
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ff54 	bl	8001260 <__NVIC_EnableIRQ>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e06c      	b.n	80014ac <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d106      	bne.n	80013ea <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2223      	movs	r2, #35	; 0x23
 80013e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f003 f939 	bl	800465c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	4b31      	ldr	r3, [pc, #196]	; (80014b4 <HAL_ETH_Init+0xf4>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	4a30      	ldr	r2, [pc, #192]	; (80014b4 <HAL_ETH_Init+0xf4>)
 80013f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f8:	6453      	str	r3, [r2, #68]	; 0x44
 80013fa:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <HAL_ETH_Init+0xf4>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001406:	4b2c      	ldr	r3, [pc, #176]	; (80014b8 <HAL_ETH_Init+0xf8>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	4a2b      	ldr	r2, [pc, #172]	; (80014b8 <HAL_ETH_Init+0xf8>)
 800140c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001410:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001412:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <HAL_ETH_Init+0xf8>)
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	4927      	ldr	r1, [pc, #156]	; (80014b8 <HAL_ETH_Init+0xf8>)
 800141c:	4313      	orrs	r3, r2
 800141e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001420:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <HAL_ETH_Init+0xf8>)
 8001422:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800143a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800143c:	f7ff feae 	bl	800119c <HAL_GetTick>
 8001440:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001442:	e011      	b.n	8001468 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001444:	f7ff feaa 	bl	800119c <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001452:	d909      	bls.n	8001468 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2204      	movs	r2, #4
 8001458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	22e0      	movs	r2, #224	; 0xe0
 8001460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e021      	b.n	80014ac <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1e4      	bne.n	8001444 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 ff4a 	bl	8002314 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 fff1 	bl	8002468 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f001 f847 	bl	800251a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	461a      	mov	r2, r3
 8001492:	2100      	movs	r1, #0
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 ffaf 	bl	80023f8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2210      	movs	r2, #16
 80014a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40013800 	.word	0x40013800

080014bc <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014ca:	2b10      	cmp	r3, #16
 80014cc:	d17f      	bne.n	80015ce <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2223      	movs	r2, #35	; 0x23
 80014d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2201      	movs	r2, #1
 80014da:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80014ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6812      	ldr	r2, [r2, #0]
 80014f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001500:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001514:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2204      	movs	r2, #4
 800151c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 f9f8 	bl	8001914 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0208 	orr.w	r2, r2, #8
 8001532:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800153c:	2001      	movs	r0, #1
 800153e:	f7ff fe39 	bl	80011b4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f042 0204 	orr.w	r2, r2, #4
 8001558:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001562:	2001      	movs	r0, #1
 8001564:	f7ff fe26 	bl	80011b4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 fd70 	bl	8002056 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6812      	ldr	r2, [r2, #0]
 8001584:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001588:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800158c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015a4:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	6812      	ldr	r2, [r2, #0]
 80015b4:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 80015b8:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 80015bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015c0:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2223      	movs	r2, #35	; 0x23
 80015c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e000      	b.n	80015d0 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
  }
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015e6:	2b23      	cmp	r3, #35	; 0x23
 80015e8:	d170      	bne.n	80016cc <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2223      	movs	r2, #35	; 0x23
 80015ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 8001604:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8001608:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800160c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001620:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001624:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	f023 0302 	bic.w	r3, r3, #2
 8001638:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800163c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 0204 	bic.w	r2, r2, #4
 800164c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001656:	2001      	movs	r0, #1
 8001658:	f7ff fdac 	bl	80011b4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 fcf6 	bl	8002056 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0208 	bic.w	r2, r2, #8
 8001678:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001682:	2001      	movs	r0, #1
 8001684:	f7ff fd96 	bl	80011b4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	e00e      	b.n	80016b4 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	3212      	adds	r2, #18
 800169c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a0:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	3301      	adds	r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d9ed      	bls.n	8001696 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2210      	movs	r2, #16
 80016c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	e000      	b.n	80016ce <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
  }
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d109      	bne.n	80016fa <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ec:	f043 0201 	orr.w	r2, r3, #1
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e045      	b.n	8001786 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001700:	2b23      	cmp	r3, #35	; 0x23
 8001702:	d13f      	bne.n	8001784 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800170c:	2201      	movs	r2, #1
 800170e:	6839      	ldr	r1, [r7, #0]
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 ff6f 	bl	80025f4 <ETH_Prepare_Tx_Descriptors>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d009      	beq.n	8001730 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001722:	f043 0202 	orr.w	r2, r3, #2
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e02a      	b.n	8001786 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001730:	f3bf 8f4f 	dsb	sy
}
 8001734:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	629a      	str	r2, [r3, #40]	; 0x28
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001744:	2b03      	cmp	r3, #3
 8001746:	d904      	bls.n	8001752 <HAL_ETH_Transmit_IT+0x7c>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	1f1a      	subs	r2, r3, #4
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00d      	beq.n	8001780 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800176c:	461a      	mov	r2, r3
 800176e:	2304      	movs	r3, #4
 8001770:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800177a:	461a      	mov	r2, r3
 800177c:	2300      	movs	r3, #0
 800177e:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001780:	2300      	movs	r3, #0
 8001782:	e000      	b.n	8001786 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
  }
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b088      	sub	sp, #32
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d109      	bne.n	80017ba <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ac:	f043 0201 	orr.w	r2, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e0a8      	b.n	800190c <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017c0:	2b23      	cmp	r3, #35	; 0x23
 80017c2:	d001      	beq.n	80017c8 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0a1      	b.n	800190c <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017cc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69fa      	ldr	r2, [r7, #28]
 80017d2:	3212      	adds	r2, #18
 80017d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d8:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017de:	f1c3 0304 	rsb	r3, r3, #4
 80017e2:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80017e4:	e06a      	b.n	80018bc <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d007      	beq.n	8001802 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	699a      	ldr	r2, [r3, #24]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	69da      	ldr	r2, [r3, #28]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800180a:	2b00      	cmp	r3, #0
 800180c:	d103      	bne.n	8001816 <HAL_ETH_ReadData+0x88>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001812:	2b00      	cmp	r3, #0
 8001814:	d040      	beq.n	8001898 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800181e:	2b00      	cmp	r3, #0
 8001820:	d005      	beq.n	800182e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00c      	beq.n	800185a <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	0c1b      	lsrs	r3, r3, #16
 8001846:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800184a:	3b04      	subs	r3, #4
 800184c:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001856:	2301      	movs	r3, #1
 8001858:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001872:	461a      	mov	r2, r3
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	b29b      	uxth	r3, r3
 8001878:	f003 f8ca 	bl	8004a10 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001880:	1c5a      	adds	r2, r3, #1
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	441a      	add	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	2200      	movs	r2, #0
 8001896:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	3301      	adds	r3, #1
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	2b03      	cmp	r3, #3
 80018a2:	d902      	bls.n	80018aa <HAL_ETH_ReadData+0x11c>
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	3b04      	subs	r3, #4
 80018a8:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	3212      	adds	r2, #18
 80018b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b4:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	3301      	adds	r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	db06      	blt.n	80018d2 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d202      	bcs.n	80018d2 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d089      	beq.n	80017e6 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	441a      	add	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d002      	beq.n	80018ec <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 f814 	bl	8001914 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d108      	bne.n	800190a <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	e000      	b.n	800190c <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
}
 800190c:	4618      	mov	r0, r3
 800190e:	3720      	adds	r7, #32
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001920:	2301      	movs	r3, #1
 8001922:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001928:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69fa      	ldr	r2, [r7, #28]
 800192e:	3212      	adds	r2, #18
 8001930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001934:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800193a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800193c:	e040      	b.n	80019c0 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d112      	bne.n	800196c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001946:	f107 030c 	add.w	r3, r7, #12
 800194a:	4618      	mov	r0, r3
 800194c:	f003 f830 	bl	80049b0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d102      	bne.n	800195c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001956:	2300      	movs	r3, #0
 8001958:	74fb      	strb	r3, [r7, #19]
 800195a:	e007      	b.n	800196c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	461a      	mov	r2, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	461a      	mov	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800196c:	7cfb      	ldrb	r3, [r7, #19]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d026      	beq.n	80019c0 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001976:	2b00      	cmp	r3, #0
 8001978:	d103      	bne.n	8001982 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	4a1e      	ldr	r2, [pc, #120]	; (80019f8 <ETH_UpdateDescriptor+0xe4>)
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	e003      	b.n	800198a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001988:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800198a:	f3bf 8f5f 	dmb	sy
}
 800198e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	3301      	adds	r3, #1
 80019a0:	61fb      	str	r3, [r7, #28]
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	d902      	bls.n	80019ae <ETH_UpdateDescriptor+0x9a>
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	3b04      	subs	r3, #4
 80019ac:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69fa      	ldr	r2, [r7, #28]
 80019b2:	3212      	adds	r2, #18
 80019b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b8:	617b      	str	r3, [r7, #20]
      desccount--;
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	3b01      	subs	r3, #1
 80019be:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d002      	beq.n	80019cc <ETH_UpdateDescriptor+0xb8>
 80019c6:	7cfb      	ldrb	r3, [r7, #19]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1b8      	bne.n	800193e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d00c      	beq.n	80019f0 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019de:	461a      	mov	r2, r3
 80019e0:	2300      	movs	r3, #0
 80019e2:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80019f0:	bf00      	nop
 80019f2:	3720      	adds	r7, #32
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	80004600 	.word	0x80004600

080019fc <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3318      	adds	r3, #24
 8001a08:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a14:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001a16:	2301      	movs	r3, #1
 8001a18:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001a1a:	e03f      	b.n	8001a9c <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d106      	bne.n	8001a44 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001a44:	7bbb      	ldrb	r3, [r7, #14]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d028      	beq.n	8001a9c <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68d9      	ldr	r1, [r3, #12]
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	440b      	add	r3, r1
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	db1b      	blt.n	8001a98 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	3304      	adds	r3, #4
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f003 f80f 	bl	8004a90 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	3304      	adds	r3, #4
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	3301      	adds	r3, #1
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a96:	e001      	b.n	8001a9c <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d002      	beq.n	8001aa8 <HAL_ETH_ReleaseTxPacket+0xac>
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1b9      	bne.n	8001a1c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aca:	2b40      	cmp	r3, #64	; 0x40
 8001acc:	d112      	bne.n	8001af4 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001adc:	2b40      	cmp	r3, #64	; 0x40
 8001ade:	d109      	bne.n	8001af4 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4b50      	ldr	r3, [pc, #320]	; (8001c2c <HAL_ETH_IRQHandler+0x178>)
 8001aec:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f002 fb18 	bl	8004124 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d113      	bne.n	8001b2e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d10a      	bne.n	8001b2e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b20:	461a      	mov	r2, r3
 8001b22:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001b26:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f002 fb0b 	bl	8004144 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b40:	d14c      	bne.n	8001bdc <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b54:	d142      	bne.n	8001bdc <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5c:	f043 0208 	orr.w	r2, r3, #8
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b78:	d11a      	bne.n	8001bb0 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b82:	695a      	ldr	r2, [r3, #20]
 8001b84:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <HAL_ETH_IRQHandler+0x17c>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001ba0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ba4:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	22e0      	movs	r2, #224	; 0xe0
 8001baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001bae:	e012      	b.n	8001bd6 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb8:	695a      	ldr	r2, [r3, #20]
 8001bba:	f248 6380 	movw	r3, #34432	; 0x8680
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f248 6380 	movw	r3, #34432	; 0x8680
 8001bd4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f002 fac4 	bl	8004164 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d10e      	bne.n	8001c08 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f81c 	bl	8001c38 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001c08:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <HAL_ETH_IRQHandler+0x180>)
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d006      	beq.n	8001c22 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <HAL_ETH_IRQHandler+0x180>)
 8001c16:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c1a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f815 	bl	8001c4c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	00010040 	.word	0x00010040
 8001c30:	007e2000 	.word	0x007e2000
 8001c34:	40013c00 	.word	0x40013c00

08001c38 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f003 031c 	and.w	r3, r3, #28
 8001c7c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	02db      	lsls	r3, r3, #11
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	019b      	lsls	r3, r3, #6
 8001c8e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f023 0302 	bic.w	r3, r3, #2
 8001c9e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001cb0:	f7ff fa74 	bl	800119c <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cb6:	e00d      	b.n	8001cd4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001cb8:	f7ff fa70 	bl	800119c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc6:	d301      	bcc.n	8001ccc <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e010      	b.n	8001cee <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1ec      	bne.n	8001cb8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b086      	sub	sp, #24
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f003 031c 	and.w	r3, r3, #28
 8001d12:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	02db      	lsls	r3, r3, #11
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	019b      	lsls	r3, r3, #6
 8001d24:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d50:	f7ff fa24 	bl	800119c <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d56:	e00d      	b.n	8001d74 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001d58:	f7ff fa20 	bl	800119c <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d66:	d301      	bcc.n	8001d6c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e009      	b.n	8001d80 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1ec      	bne.n	8001d58 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0d9      	b.n	8001f50 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0310 	and.w	r3, r3, #16
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	bf14      	ite	ne
 8001daa:	2301      	movne	r3, #1
 8001dac:	2300      	moveq	r3, #0
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	461a      	mov	r2, r3
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	bf0c      	ite	eq
 8001dd4:	2301      	moveq	r3, #1
 8001dd6:	2300      	movne	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	461a      	mov	r2, r3
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf14      	ite	ne
 8001df0:	2301      	movne	r3, #1
 8001df2:	2300      	moveq	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	bf0c      	ite	eq
 8001e0a:	2301      	moveq	r3, #1
 8001e0c:	2300      	movne	r3, #0
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	461a      	mov	r2, r3
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	bf14      	ite	ne
 8001e24:	2301      	movne	r3, #1
 8001e26:	2300      	moveq	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	bf0c      	ite	eq
 8001e5a:	2301      	moveq	r3, #1
 8001e5c:	2300      	movne	r3, #0
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	461a      	mov	r2, r3
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bf0c      	ite	eq
 8001e74:	2301      	moveq	r3, #1
 8001e76:	2300      	movne	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	bf14      	ite	ne
 8001e8e:	2301      	movne	r3, #1
 8001e90:	2300      	moveq	r3, #0
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	461a      	mov	r2, r3
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	bf14      	ite	ne
 8001eb6:	2301      	movne	r3, #1
 8001eb8:	2300      	moveq	r3, #0
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	bf14      	ite	ne
 8001ed0:	2301      	movne	r3, #1
 8001ed2:	2300      	moveq	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf0c      	ite	eq
 8001eec:	2301      	moveq	r3, #1
 8001eee:	2300      	movne	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	0c1b      	lsrs	r3, r3, #16
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bf14      	ite	ne
 8001f24:	2301      	movne	r3, #1
 8001f26:	2300      	moveq	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	bf14      	ite	ne
 8001f40:	2301      	movne	r3, #1
 8001f42:	2300      	moveq	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e00b      	b.n	8001f88 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f76:	2b10      	cmp	r3, #16
 8001f78:	d105      	bne.n	8001f86 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001f7a:	6839      	ldr	r1, [r7, #0]
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f88f 	bl	80020a0 <ETH_SetMACConfig>

    return HAL_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e000      	b.n	8001f88 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
  }
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f023 031c 	bic.w	r3, r3, #28
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001fa8:	f001 fa84 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 8001fac:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	4a1d      	ldr	r2, [pc, #116]	; (8002028 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d908      	bls.n	8001fc8 <HAL_ETH_SetMDIOClockRange+0x38>
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	4a1c      	ldr	r2, [pc, #112]	; (800202c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d804      	bhi.n	8001fc8 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f043 0308 	orr.w	r3, r3, #8
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	e027      	b.n	8002018 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	4a18      	ldr	r2, [pc, #96]	; (800202c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d908      	bls.n	8001fe2 <HAL_ETH_SetMDIOClockRange+0x52>
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	4a17      	ldr	r2, [pc, #92]	; (8002030 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d204      	bcs.n	8001fe2 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f043 030c 	orr.w	r3, r3, #12
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	e01a      	b.n	8002018 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	4a12      	ldr	r2, [pc, #72]	; (8002030 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d303      	bcc.n	8001ff2 <HAL_ETH_SetMDIOClockRange+0x62>
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	4a11      	ldr	r2, [pc, #68]	; (8002034 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d911      	bls.n	8002016 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	4a0f      	ldr	r2, [pc, #60]	; (8002034 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d908      	bls.n	800200c <HAL_ETH_SetMDIOClockRange+0x7c>
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	4a0e      	ldr	r2, [pc, #56]	; (8002038 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d804      	bhi.n	800200c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f043 0304 	orr.w	r3, r3, #4
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	e005      	b.n	8002018 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f043 0310 	orr.w	r3, r3, #16
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	e000      	b.n	8002018 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002016:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	611a      	str	r2, [r3, #16]
}
 8002020:	bf00      	nop
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	01312cff 	.word	0x01312cff
 800202c:	02160ebf 	.word	0x02160ebf
 8002030:	03938700 	.word	0x03938700
 8002034:	05f5e0ff 	.word	0x05f5e0ff
 8002038:	08f0d17f 	.word	0x08f0d17f

0800203c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800204a:	4618      	mov	r0, r3
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b084      	sub	sp, #16
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6812      	ldr	r2, [r2, #0]
 8002070:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002074:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002078:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002086:	2001      	movs	r0, #1
 8002088:	f7ff f894 	bl	80011b4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002096:	6193      	str	r3, [r2, #24]
}
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4b51      	ldr	r3, [pc, #324]	; (80021fc <ETH_SetMACConfig+0x15c>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	7c1b      	ldrb	r3, [r3, #16]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d102      	bne.n	80020c8 <ETH_SetMACConfig+0x28>
 80020c2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80020c6:	e000      	b.n	80020ca <ETH_SetMACConfig+0x2a>
 80020c8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	7c5b      	ldrb	r3, [r3, #17]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d102      	bne.n	80020d8 <ETH_SetMACConfig+0x38>
 80020d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020d6:	e000      	b.n	80020da <ETH_SetMACConfig+0x3a>
 80020d8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020da:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80020e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	7fdb      	ldrb	r3, [r3, #31]
 80020e6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80020e8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80020ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	7f92      	ldrb	r2, [r2, #30]
 80020f4:	2a00      	cmp	r2, #0
 80020f6:	d102      	bne.n	80020fe <ETH_SetMACConfig+0x5e>
 80020f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020fc:	e000      	b.n	8002100 <ETH_SetMACConfig+0x60>
 80020fe:	2200      	movs	r2, #0
                        macconf->Speed |
 8002100:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	7f1b      	ldrb	r3, [r3, #28]
 8002106:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002108:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800210e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	791b      	ldrb	r3, [r3, #4]
 8002114:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002116:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800211e:	2a00      	cmp	r2, #0
 8002120:	d102      	bne.n	8002128 <ETH_SetMACConfig+0x88>
 8002122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002126:	e000      	b.n	800212a <ETH_SetMACConfig+0x8a>
 8002128:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800212a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	7bdb      	ldrb	r3, [r3, #15]
 8002130:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002132:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002138:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002140:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002142:	4313      	orrs	r3, r2
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	4313      	orrs	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800215a:	2001      	movs	r0, #1
 800215c:	f7ff f82a 	bl	80011b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002176:	4013      	ands	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800217e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002186:	2a00      	cmp	r2, #0
 8002188:	d101      	bne.n	800218e <ETH_SetMACConfig+0xee>
 800218a:	2280      	movs	r2, #128	; 0x80
 800218c:	e000      	b.n	8002190 <ETH_SetMACConfig+0xf0>
 800218e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002190:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002196:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800219e:	2a01      	cmp	r2, #1
 80021a0:	d101      	bne.n	80021a6 <ETH_SetMACConfig+0x106>
 80021a2:	2208      	movs	r2, #8
 80021a4:	e000      	b.n	80021a8 <ETH_SetMACConfig+0x108>
 80021a6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80021a8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80021b0:	2a01      	cmp	r2, #1
 80021b2:	d101      	bne.n	80021b8 <ETH_SetMACConfig+0x118>
 80021b4:	2204      	movs	r2, #4
 80021b6:	e000      	b.n	80021ba <ETH_SetMACConfig+0x11a>
 80021b8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80021ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80021c2:	2a01      	cmp	r2, #1
 80021c4:	d101      	bne.n	80021ca <ETH_SetMACConfig+0x12a>
 80021c6:	2202      	movs	r2, #2
 80021c8:	e000      	b.n	80021cc <ETH_SetMACConfig+0x12c>
 80021ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80021cc:	4313      	orrs	r3, r2
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021e4:	2001      	movs	r0, #1
 80021e6:	f7fe ffe5 	bl	80011b4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	619a      	str	r2, [r3, #24]
}
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	ff20810f 	.word	0xff20810f

08002200 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4b3d      	ldr	r3, [pc, #244]	; (8002310 <ETH_SetDMAConfig+0x110>)
 800221a:	4013      	ands	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	7b1b      	ldrb	r3, [r3, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d102      	bne.n	800222c <ETH_SetDMAConfig+0x2c>
 8002226:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800222a:	e000      	b.n	800222e <ETH_SetDMAConfig+0x2e>
 800222c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	7b5b      	ldrb	r3, [r3, #13]
 8002232:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002234:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	7f52      	ldrb	r2, [r2, #29]
 800223a:	2a00      	cmp	r2, #0
 800223c:	d102      	bne.n	8002244 <ETH_SetDMAConfig+0x44>
 800223e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002242:	e000      	b.n	8002246 <ETH_SetDMAConfig+0x46>
 8002244:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002246:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	7b9b      	ldrb	r3, [r3, #14]
 800224c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800224e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002254:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	7f1b      	ldrb	r3, [r3, #28]
 800225a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800225c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	7f9b      	ldrb	r3, [r3, #30]
 8002262:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002264:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800226a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002272:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002274:	4313      	orrs	r3, r2
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4313      	orrs	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002284:	461a      	mov	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002296:	2001      	movs	r0, #1
 8002298:	f7fe ff8c 	bl	80011b4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a4:	461a      	mov	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	791b      	ldrb	r3, [r3, #4]
 80022ae:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80022b4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80022ba:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80022c0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022c8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80022ca:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80022d2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80022d8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022e6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022f4:	2001      	movs	r0, #1
 80022f6:	f7fe ff5d 	bl	80011b4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002302:	461a      	mov	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6013      	str	r3, [r2, #0]
}
 8002308:	bf00      	nop
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	f8de3f23 	.word	0xf8de3f23

08002314 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b0a6      	sub	sp, #152	; 0x98
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800231c:	2301      	movs	r3, #1
 800231e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002322:	2301      	movs	r3, #1
 8002324:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002328:	2300      	movs	r3, #0
 800232a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800232c:	2300      	movs	r3, #0
 800232e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002332:	2301      	movs	r3, #1
 8002334:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002338:	2300      	movs	r3, #0
 800233a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800233e:	2301      	movs	r3, #1
 8002340:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002344:	2300      	movs	r3, #0
 8002346:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002350:	2300      	movs	r3, #0
 8002352:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002354:	2300      	movs	r3, #0
 8002356:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800235a:	2300      	movs	r3, #0
 800235c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800235e:	2300      	movs	r3, #0
 8002360:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002364:	2300      	movs	r3, #0
 8002366:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800236a:	2300      	movs	r3, #0
 800236c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002370:	2300      	movs	r3, #0
 8002372:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002376:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800237a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800237c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002380:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002388:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800238c:	4619      	mov	r1, r3
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff fe86 	bl	80020a0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002394:	2301      	movs	r3, #1
 8002396:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002398:	2301      	movs	r3, #1
 800239a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800239c:	2301      	movs	r3, #1
 800239e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80023a2:	2301      	movs	r3, #1
 80023a4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80023aa:	2300      	movs	r3, #0
 80023ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80023b6:	2300      	movs	r3, #0
 80023b8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80023ba:	2301      	movs	r3, #1
 80023bc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80023c0:	2301      	movs	r3, #1
 80023c2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80023c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023c8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80023ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023ce:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80023d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023d4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80023d6:	2301      	movs	r3, #1
 80023d8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80023e4:	f107 0308 	add.w	r3, r7, #8
 80023e8:	4619      	mov	r1, r3
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff ff08 	bl	8002200 <ETH_SetDMAConfig>
}
 80023f0:	bf00      	nop
 80023f2:	3798      	adds	r7, #152	; 0x98
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b087      	sub	sp, #28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3305      	adds	r3, #5
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	3204      	adds	r2, #4
 8002410:	7812      	ldrb	r2, [r2, #0]
 8002412:	4313      	orrs	r3, r2
 8002414:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	4b11      	ldr	r3, [pc, #68]	; (8002460 <ETH_MACAddressConfig+0x68>)
 800241a:	4413      	add	r3, r2
 800241c:	461a      	mov	r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3303      	adds	r3, #3
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	061a      	lsls	r2, r3, #24
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3302      	adds	r3, #2
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	041b      	lsls	r3, r3, #16
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3301      	adds	r3, #1
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	021b      	lsls	r3, r3, #8
 800243c:	4313      	orrs	r3, r2
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	7812      	ldrb	r2, [r2, #0]
 8002442:	4313      	orrs	r3, r2
 8002444:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <ETH_MACAddressConfig+0x6c>)
 800244a:	4413      	add	r3, r2
 800244c:	461a      	mov	r2, r3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	6013      	str	r3, [r2, #0]
}
 8002452:	bf00      	nop
 8002454:	371c      	adds	r7, #28
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40028040 	.word	0x40028040
 8002464:	40028044 	.word	0x40028044

08002468 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	e03e      	b.n	80024f4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68d9      	ldr	r1, [r3, #12]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	440b      	add	r3, r1
 8002486:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2200      	movs	r2, #0
 8002492:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2200      	movs	r2, #0
 800249e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80024a0:	68b9      	ldr	r1, [r7, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	3206      	adds	r2, #6
 80024a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d80c      	bhi.n	80024d8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68d9      	ldr	r1, [r3, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	440b      	add	r3, r1
 80024d0:	461a      	mov	r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	e004      	b.n	80024e2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	461a      	mov	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	3301      	adds	r3, #1
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d9bd      	bls.n	8002476 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800250c:	611a      	str	r2, [r3, #16]
}
 800250e:	bf00      	nop
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800251a:	b480      	push	{r7}
 800251c:	b085      	sub	sp, #20
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	e046      	b.n	80025b6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6919      	ldr	r1, [r3, #16]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	440b      	add	r3, r1
 8002538:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2200      	movs	r2, #0
 8002544:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2200      	movs	r2, #0
 800254a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2200      	movs	r2, #0
 8002550:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	2200      	movs	r2, #0
 8002556:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2200      	movs	r2, #0
 800255c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002564:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 800256c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800257a:	68b9      	ldr	r1, [r7, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	3212      	adds	r2, #18
 8002582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d80c      	bhi.n	80025a6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6919      	ldr	r1, [r3, #16]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	440b      	add	r3, r1
 800259e:	461a      	mov	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	60da      	str	r2, [r3, #12]
 80025a4:	e004      	b.n	80025b0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	461a      	mov	r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	3301      	adds	r3, #1
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d9b5      	bls.n	8002528 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691a      	ldr	r2, [r3, #16]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025e6:	60da      	str	r2, [r3, #12]
}
 80025e8:	bf00      	nop
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b08d      	sub	sp, #52	; 0x34
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	3318      	adds	r3, #24
 8002604:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800261a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800261e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002636:	d007      	beq.n	8002648 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263c:	3304      	adds	r3, #4
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002648:	2302      	movs	r3, #2
 800264a:	e103      	b.n	8002854 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	3301      	adds	r3, #1
 8002650:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002664:	f023 031f 	bic.w	r3, r3, #31
 8002668:	69fa      	ldr	r2, [r7, #28]
 800266a:	6852      	ldr	r2, [r2, #4]
 800266c:	431a      	orrs	r2, r3
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d008      	beq.n	8002690 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	431a      	orrs	r2, r3
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d008      	beq.n	80026ae <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d005      	beq.n	80026c6 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80026d2:	f3bf 8f5f 	dmb	sy
}
 80026d6:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80026e4:	e084      	b.n	80027f0 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d006      	beq.n	8002706 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	e005      	b.n	8002712 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002714:	3301      	adds	r3, #1
 8002716:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271a:	2b03      	cmp	r3, #3
 800271c:	d902      	bls.n	8002724 <ETH_Prepare_Tx_Descriptors+0x130>
 800271e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002720:	3b04      	subs	r3, #4
 8002722:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800272c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002742:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002746:	d007      	beq.n	8002758 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274c:	3304      	adds	r3, #4
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d029      	beq.n	80027ac <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002764:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002766:	2300      	movs	r3, #0
 8002768:	62bb      	str	r3, [r7, #40]	; 0x28
 800276a:	e019      	b.n	80027a0 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 800276c:	f3bf 8f5f 	dmb	sy
}
 8002770:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002780:	3301      	adds	r3, #1
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002786:	2b03      	cmp	r3, #3
 8002788:	d902      	bls.n	8002790 <ETH_Prepare_Tx_Descriptors+0x19c>
 800278a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278c:	3b04      	subs	r3, #4
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002798:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800279a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279c:	3301      	adds	r3, #1
 800279e:	62bb      	str	r3, [r7, #40]	; 0x28
 80027a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d3e1      	bcc.n	800276c <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80027a8:	2302      	movs	r3, #2
 80027aa:	e053      	b.n	8002854 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	3301      	adds	r3, #1
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	461a      	mov	r2, r3
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80027ca:	f023 031f 	bic.w	r3, r3, #31
 80027ce:	69fa      	ldr	r2, [r7, #28]
 80027d0:	6852      	ldr	r2, [r2, #4]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	3301      	adds	r3, #1
 80027dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80027de:	f3bf 8f5f 	dmb	sy
}
 80027e2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f47f af76 	bne.w	80026e6 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d006      	beq.n	800280e <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	e005      	b.n	800281a <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800282a:	6979      	ldr	r1, [r7, #20]
 800282c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282e:	3304      	adds	r3, #4
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800283a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800283c:	b672      	cpsid	i
}
 800283e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	4413      	add	r3, r2
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800284e:	b662      	cpsie	i
}
 8002850:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3734      	adds	r7, #52	; 0x34
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002860:	b480      	push	{r7}
 8002862:	b089      	sub	sp, #36	; 0x24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002872:	2300      	movs	r3, #0
 8002874:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
 800287a:	e177      	b.n	8002b6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800287c:	2201      	movs	r2, #1
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4013      	ands	r3, r2
 800288e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	429a      	cmp	r2, r3
 8002896:	f040 8166 	bne.w	8002b66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d005      	beq.n	80028b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d130      	bne.n	8002914 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	2203      	movs	r2, #3
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028e8:	2201      	movs	r2, #1
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 0201 	and.w	r2, r3, #1
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	2b03      	cmp	r3, #3
 800291e:	d017      	beq.n	8002950 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	2203      	movs	r2, #3
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d123      	bne.n	80029a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	08da      	lsrs	r2, r3, #3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3208      	adds	r2, #8
 8002964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002968:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	220f      	movs	r2, #15
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	08da      	lsrs	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3208      	adds	r2, #8
 800299e:	69b9      	ldr	r1, [r7, #24]
 80029a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	2203      	movs	r2, #3
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0203 	and.w	r2, r3, #3
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80c0 	beq.w	8002b66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	4b66      	ldr	r3, [pc, #408]	; (8002b84 <HAL_GPIO_Init+0x324>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	4a65      	ldr	r2, [pc, #404]	; (8002b84 <HAL_GPIO_Init+0x324>)
 80029f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f4:	6453      	str	r3, [r2, #68]	; 0x44
 80029f6:	4b63      	ldr	r3, [pc, #396]	; (8002b84 <HAL_GPIO_Init+0x324>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a02:	4a61      	ldr	r2, [pc, #388]	; (8002b88 <HAL_GPIO_Init+0x328>)
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	089b      	lsrs	r3, r3, #2
 8002a08:	3302      	adds	r3, #2
 8002a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	220f      	movs	r2, #15
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a58      	ldr	r2, [pc, #352]	; (8002b8c <HAL_GPIO_Init+0x32c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d037      	beq.n	8002a9e <HAL_GPIO_Init+0x23e>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a57      	ldr	r2, [pc, #348]	; (8002b90 <HAL_GPIO_Init+0x330>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d031      	beq.n	8002a9a <HAL_GPIO_Init+0x23a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a56      	ldr	r2, [pc, #344]	; (8002b94 <HAL_GPIO_Init+0x334>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d02b      	beq.n	8002a96 <HAL_GPIO_Init+0x236>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a55      	ldr	r2, [pc, #340]	; (8002b98 <HAL_GPIO_Init+0x338>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d025      	beq.n	8002a92 <HAL_GPIO_Init+0x232>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a54      	ldr	r2, [pc, #336]	; (8002b9c <HAL_GPIO_Init+0x33c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d01f      	beq.n	8002a8e <HAL_GPIO_Init+0x22e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a53      	ldr	r2, [pc, #332]	; (8002ba0 <HAL_GPIO_Init+0x340>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d019      	beq.n	8002a8a <HAL_GPIO_Init+0x22a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a52      	ldr	r2, [pc, #328]	; (8002ba4 <HAL_GPIO_Init+0x344>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d013      	beq.n	8002a86 <HAL_GPIO_Init+0x226>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a51      	ldr	r2, [pc, #324]	; (8002ba8 <HAL_GPIO_Init+0x348>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00d      	beq.n	8002a82 <HAL_GPIO_Init+0x222>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a50      	ldr	r2, [pc, #320]	; (8002bac <HAL_GPIO_Init+0x34c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d007      	beq.n	8002a7e <HAL_GPIO_Init+0x21e>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a4f      	ldr	r2, [pc, #316]	; (8002bb0 <HAL_GPIO_Init+0x350>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d101      	bne.n	8002a7a <HAL_GPIO_Init+0x21a>
 8002a76:	2309      	movs	r3, #9
 8002a78:	e012      	b.n	8002aa0 <HAL_GPIO_Init+0x240>
 8002a7a:	230a      	movs	r3, #10
 8002a7c:	e010      	b.n	8002aa0 <HAL_GPIO_Init+0x240>
 8002a7e:	2308      	movs	r3, #8
 8002a80:	e00e      	b.n	8002aa0 <HAL_GPIO_Init+0x240>
 8002a82:	2307      	movs	r3, #7
 8002a84:	e00c      	b.n	8002aa0 <HAL_GPIO_Init+0x240>
 8002a86:	2306      	movs	r3, #6
 8002a88:	e00a      	b.n	8002aa0 <HAL_GPIO_Init+0x240>
 8002a8a:	2305      	movs	r3, #5
 8002a8c:	e008      	b.n	8002aa0 <HAL_GPIO_Init+0x240>
 8002a8e:	2304      	movs	r3, #4
 8002a90:	e006      	b.n	8002aa0 <HAL_GPIO_Init+0x240>
 8002a92:	2303      	movs	r3, #3
 8002a94:	e004      	b.n	8002aa0 <HAL_GPIO_Init+0x240>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e002      	b.n	8002aa0 <HAL_GPIO_Init+0x240>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <HAL_GPIO_Init+0x240>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	69fa      	ldr	r2, [r7, #28]
 8002aa2:	f002 0203 	and.w	r2, r2, #3
 8002aa6:	0092      	lsls	r2, r2, #2
 8002aa8:	4093      	lsls	r3, r2
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ab0:	4935      	ldr	r1, [pc, #212]	; (8002b88 <HAL_GPIO_Init+0x328>)
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	089b      	lsrs	r3, r3, #2
 8002ab6:	3302      	adds	r3, #2
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002abe:	4b3d      	ldr	r3, [pc, #244]	; (8002bb4 <HAL_GPIO_Init+0x354>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4013      	ands	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ae2:	4a34      	ldr	r2, [pc, #208]	; (8002bb4 <HAL_GPIO_Init+0x354>)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ae8:	4b32      	ldr	r3, [pc, #200]	; (8002bb4 <HAL_GPIO_Init+0x354>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b0c:	4a29      	ldr	r2, [pc, #164]	; (8002bb4 <HAL_GPIO_Init+0x354>)
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b12:	4b28      	ldr	r3, [pc, #160]	; (8002bb4 <HAL_GPIO_Init+0x354>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b36:	4a1f      	ldr	r2, [pc, #124]	; (8002bb4 <HAL_GPIO_Init+0x354>)
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b3c:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <HAL_GPIO_Init+0x354>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b60:	4a14      	ldr	r2, [pc, #80]	; (8002bb4 <HAL_GPIO_Init+0x354>)
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	61fb      	str	r3, [r7, #28]
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	2b0f      	cmp	r3, #15
 8002b70:	f67f ae84 	bls.w	800287c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b74:	bf00      	nop
 8002b76:	bf00      	nop
 8002b78:	3724      	adds	r7, #36	; 0x24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40013800 	.word	0x40013800
 8002b8c:	40020000 	.word	0x40020000
 8002b90:	40020400 	.word	0x40020400
 8002b94:	40020800 	.word	0x40020800
 8002b98:	40020c00 	.word	0x40020c00
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	40021400 	.word	0x40021400
 8002ba4:	40021800 	.word	0x40021800
 8002ba8:	40021c00 	.word	0x40021c00
 8002bac:	40022000 	.word	0x40022000
 8002bb0:	40022400 	.word	0x40022400
 8002bb4:	40013c00 	.word	0x40013c00

08002bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	807b      	strh	r3, [r7, #2]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc8:	787b      	ldrb	r3, [r7, #1]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bce:	887a      	ldrh	r2, [r7, #2]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bd4:	e003      	b.n	8002bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bd6:	887b      	ldrh	r3, [r7, #2]
 8002bd8:	041a      	lsls	r2, r3, #16
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	619a      	str	r2, [r3, #24]
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e267      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d075      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c0a:	4b88      	ldr	r3, [pc, #544]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d00c      	beq.n	8002c30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c16:	4b85      	ldr	r3, [pc, #532]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d112      	bne.n	8002c48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c22:	4b82      	ldr	r3, [pc, #520]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c2e:	d10b      	bne.n	8002c48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c30:	4b7e      	ldr	r3, [pc, #504]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d05b      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x108>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d157      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e242      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c50:	d106      	bne.n	8002c60 <HAL_RCC_OscConfig+0x74>
 8002c52:	4b76      	ldr	r3, [pc, #472]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a75      	ldr	r2, [pc, #468]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e01d      	b.n	8002c9c <HAL_RCC_OscConfig+0xb0>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCC_OscConfig+0x98>
 8002c6a:	4b70      	ldr	r3, [pc, #448]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a6f      	ldr	r2, [pc, #444]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	4b6d      	ldr	r3, [pc, #436]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a6c      	ldr	r2, [pc, #432]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	e00b      	b.n	8002c9c <HAL_RCC_OscConfig+0xb0>
 8002c84:	4b69      	ldr	r3, [pc, #420]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a68      	ldr	r2, [pc, #416]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	4b66      	ldr	r3, [pc, #408]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a65      	ldr	r2, [pc, #404]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d013      	beq.n	8002ccc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca4:	f7fe fa7a 	bl	800119c <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cac:	f7fe fa76 	bl	800119c <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b64      	cmp	r3, #100	; 0x64
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e207      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	4b5b      	ldr	r3, [pc, #364]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0xc0>
 8002cca:	e014      	b.n	8002cf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ccc:	f7fe fa66 	bl	800119c <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd4:	f7fe fa62 	bl	800119c <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b64      	cmp	r3, #100	; 0x64
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e1f3      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce6:	4b51      	ldr	r3, [pc, #324]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0xe8>
 8002cf2:	e000      	b.n	8002cf6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d063      	beq.n	8002dca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d02:	4b4a      	ldr	r3, [pc, #296]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00b      	beq.n	8002d26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d0e:	4b47      	ldr	r3, [pc, #284]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d16:	2b08      	cmp	r3, #8
 8002d18:	d11c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d1a:	4b44      	ldr	r3, [pc, #272]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d116      	bne.n	8002d54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d26:	4b41      	ldr	r3, [pc, #260]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d005      	beq.n	8002d3e <HAL_RCC_OscConfig+0x152>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d001      	beq.n	8002d3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e1c7      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3e:	4b3b      	ldr	r3, [pc, #236]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4937      	ldr	r1, [pc, #220]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d52:	e03a      	b.n	8002dca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d020      	beq.n	8002d9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d5c:	4b34      	ldr	r3, [pc, #208]	; (8002e30 <HAL_RCC_OscConfig+0x244>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d62:	f7fe fa1b 	bl	800119c <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d6a:	f7fe fa17 	bl	800119c <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e1a8      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7c:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0f0      	beq.n	8002d6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d88:	4b28      	ldr	r3, [pc, #160]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	4925      	ldr	r1, [pc, #148]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	600b      	str	r3, [r1, #0]
 8002d9c:	e015      	b.n	8002dca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d9e:	4b24      	ldr	r3, [pc, #144]	; (8002e30 <HAL_RCC_OscConfig+0x244>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da4:	f7fe f9fa 	bl	800119c <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dac:	f7fe f9f6 	bl	800119c <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e187      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dbe:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d036      	beq.n	8002e44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d016      	beq.n	8002e0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dde:	4b15      	ldr	r3, [pc, #84]	; (8002e34 <HAL_RCC_OscConfig+0x248>)
 8002de0:	2201      	movs	r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de4:	f7fe f9da 	bl	800119c <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dec:	f7fe f9d6 	bl	800119c <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e167      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfe:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0x200>
 8002e0a:	e01b      	b.n	8002e44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e0c:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <HAL_RCC_OscConfig+0x248>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e12:	f7fe f9c3 	bl	800119c <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e18:	e00e      	b.n	8002e38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e1a:	f7fe f9bf 	bl	800119c <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d907      	bls.n	8002e38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e150      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	42470000 	.word	0x42470000
 8002e34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e38:	4b88      	ldr	r3, [pc, #544]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1ea      	bne.n	8002e1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 8097 	beq.w	8002f80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e52:	2300      	movs	r3, #0
 8002e54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e56:	4b81      	ldr	r3, [pc, #516]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10f      	bne.n	8002e82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	4b7d      	ldr	r3, [pc, #500]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	4a7c      	ldr	r2, [pc, #496]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e70:	6413      	str	r3, [r2, #64]	; 0x40
 8002e72:	4b7a      	ldr	r3, [pc, #488]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e82:	4b77      	ldr	r3, [pc, #476]	; (8003060 <HAL_RCC_OscConfig+0x474>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d118      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e8e:	4b74      	ldr	r3, [pc, #464]	; (8003060 <HAL_RCC_OscConfig+0x474>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a73      	ldr	r2, [pc, #460]	; (8003060 <HAL_RCC_OscConfig+0x474>)
 8002e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e9a:	f7fe f97f 	bl	800119c <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea2:	f7fe f97b 	bl	800119c <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e10c      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb4:	4b6a      	ldr	r3, [pc, #424]	; (8003060 <HAL_RCC_OscConfig+0x474>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0f0      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d106      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x2ea>
 8002ec8:	4b64      	ldr	r3, [pc, #400]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ecc:	4a63      	ldr	r2, [pc, #396]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed4:	e01c      	b.n	8002f10 <HAL_RCC_OscConfig+0x324>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b05      	cmp	r3, #5
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x30c>
 8002ede:	4b5f      	ldr	r3, [pc, #380]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	4a5e      	ldr	r2, [pc, #376]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002ee4:	f043 0304 	orr.w	r3, r3, #4
 8002ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eea:	4b5c      	ldr	r3, [pc, #368]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eee:	4a5b      	ldr	r2, [pc, #364]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef6:	e00b      	b.n	8002f10 <HAL_RCC_OscConfig+0x324>
 8002ef8:	4b58      	ldr	r3, [pc, #352]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efc:	4a57      	ldr	r2, [pc, #348]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002efe:	f023 0301 	bic.w	r3, r3, #1
 8002f02:	6713      	str	r3, [r2, #112]	; 0x70
 8002f04:	4b55      	ldr	r3, [pc, #340]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f08:	4a54      	ldr	r2, [pc, #336]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002f0a:	f023 0304 	bic.w	r3, r3, #4
 8002f0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d015      	beq.n	8002f44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f18:	f7fe f940 	bl	800119c <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1e:	e00a      	b.n	8002f36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f20:	f7fe f93c 	bl	800119c <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e0cb      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f36:	4b49      	ldr	r3, [pc, #292]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0ee      	beq.n	8002f20 <HAL_RCC_OscConfig+0x334>
 8002f42:	e014      	b.n	8002f6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f44:	f7fe f92a 	bl	800119c <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f4c:	f7fe f926 	bl	800119c <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e0b5      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f62:	4b3e      	ldr	r3, [pc, #248]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1ee      	bne.n	8002f4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f6e:	7dfb      	ldrb	r3, [r7, #23]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d105      	bne.n	8002f80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f74:	4b39      	ldr	r3, [pc, #228]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	4a38      	ldr	r2, [pc, #224]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002f7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 80a1 	beq.w	80030cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f8a:	4b34      	ldr	r3, [pc, #208]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d05c      	beq.n	8003050 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d141      	bne.n	8003022 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9e:	4b31      	ldr	r3, [pc, #196]	; (8003064 <HAL_RCC_OscConfig+0x478>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa4:	f7fe f8fa 	bl	800119c <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fac:	f7fe f8f6 	bl	800119c <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e087      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fbe:	4b27      	ldr	r3, [pc, #156]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69da      	ldr	r2, [r3, #28]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	019b      	lsls	r3, r3, #6
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	085b      	lsrs	r3, r3, #1
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	041b      	lsls	r3, r3, #16
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	061b      	lsls	r3, r3, #24
 8002fee:	491b      	ldr	r1, [pc, #108]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff4:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <HAL_RCC_OscConfig+0x478>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffa:	f7fe f8cf 	bl	800119c <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003002:	f7fe f8cb 	bl	800119c <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e05c      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0f0      	beq.n	8003002 <HAL_RCC_OscConfig+0x416>
 8003020:	e054      	b.n	80030cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003022:	4b10      	ldr	r3, [pc, #64]	; (8003064 <HAL_RCC_OscConfig+0x478>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003028:	f7fe f8b8 	bl	800119c <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003030:	f7fe f8b4 	bl	800119c <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e045      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x444>
 800304e:	e03d      	b.n	80030cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d107      	bne.n	8003068 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e038      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
 800305c:	40023800 	.word	0x40023800
 8003060:	40007000 	.word	0x40007000
 8003064:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003068:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <HAL_RCC_OscConfig+0x4ec>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d028      	beq.n	80030c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003080:	429a      	cmp	r2, r3
 8003082:	d121      	bne.n	80030c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308e:	429a      	cmp	r2, r3
 8003090:	d11a      	bne.n	80030c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003098:	4013      	ands	r3, r2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800309e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d111      	bne.n	80030c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	085b      	lsrs	r3, r3, #1
 80030b0:	3b01      	subs	r3, #1
 80030b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d107      	bne.n	80030c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40023800 	.word	0x40023800

080030dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0cc      	b.n	800328a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030f0:	4b68      	ldr	r3, [pc, #416]	; (8003294 <HAL_RCC_ClockConfig+0x1b8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 030f 	and.w	r3, r3, #15
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d90c      	bls.n	8003118 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fe:	4b65      	ldr	r3, [pc, #404]	; (8003294 <HAL_RCC_ClockConfig+0x1b8>)
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003106:	4b63      	ldr	r3, [pc, #396]	; (8003294 <HAL_RCC_ClockConfig+0x1b8>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d001      	beq.n	8003118 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0b8      	b.n	800328a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d020      	beq.n	8003166 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003130:	4b59      	ldr	r3, [pc, #356]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	4a58      	ldr	r2, [pc, #352]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800313a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003148:	4b53      	ldr	r3, [pc, #332]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	4a52      	ldr	r2, [pc, #328]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003152:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003154:	4b50      	ldr	r3, [pc, #320]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	494d      	ldr	r1, [pc, #308]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	4313      	orrs	r3, r2
 8003164:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d044      	beq.n	80031fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d107      	bne.n	800318a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317a:	4b47      	ldr	r3, [pc, #284]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d119      	bne.n	80031ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e07f      	b.n	800328a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d003      	beq.n	800319a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003196:	2b03      	cmp	r3, #3
 8003198:	d107      	bne.n	80031aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319a:	4b3f      	ldr	r3, [pc, #252]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d109      	bne.n	80031ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e06f      	b.n	800328a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031aa:	4b3b      	ldr	r3, [pc, #236]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e067      	b.n	800328a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ba:	4b37      	ldr	r3, [pc, #220]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f023 0203 	bic.w	r2, r3, #3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	4934      	ldr	r1, [pc, #208]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031cc:	f7fd ffe6 	bl	800119c <HAL_GetTick>
 80031d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d2:	e00a      	b.n	80031ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d4:	f7fd ffe2 	bl	800119c <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e04f      	b.n	800328a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ea:	4b2b      	ldr	r3, [pc, #172]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 020c 	and.w	r2, r3, #12
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d1eb      	bne.n	80031d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031fc:	4b25      	ldr	r3, [pc, #148]	; (8003294 <HAL_RCC_ClockConfig+0x1b8>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 030f 	and.w	r3, r3, #15
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	429a      	cmp	r2, r3
 8003208:	d20c      	bcs.n	8003224 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320a:	4b22      	ldr	r3, [pc, #136]	; (8003294 <HAL_RCC_ClockConfig+0x1b8>)
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003212:	4b20      	ldr	r3, [pc, #128]	; (8003294 <HAL_RCC_ClockConfig+0x1b8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d001      	beq.n	8003224 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e032      	b.n	800328a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003230:	4b19      	ldr	r3, [pc, #100]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4916      	ldr	r1, [pc, #88]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 800323e:	4313      	orrs	r3, r2
 8003240:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d009      	beq.n	8003262 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800324e:	4b12      	ldr	r3, [pc, #72]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	490e      	ldr	r1, [pc, #56]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	4313      	orrs	r3, r2
 8003260:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003262:	f000 f821 	bl	80032a8 <HAL_RCC_GetSysClockFreq>
 8003266:	4602      	mov	r2, r0
 8003268:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	091b      	lsrs	r3, r3, #4
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	490a      	ldr	r1, [pc, #40]	; (800329c <HAL_RCC_ClockConfig+0x1c0>)
 8003274:	5ccb      	ldrb	r3, [r1, r3]
 8003276:	fa22 f303 	lsr.w	r3, r2, r3
 800327a:	4a09      	ldr	r2, [pc, #36]	; (80032a0 <HAL_RCC_ClockConfig+0x1c4>)
 800327c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800327e:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7fd fbd4 	bl	8000a30 <HAL_InitTick>

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40023c00 	.word	0x40023c00
 8003298:	40023800 	.word	0x40023800
 800329c:	0801cbbc 	.word	0x0801cbbc
 80032a0:	20000000 	.word	0x20000000
 80032a4:	20000004 	.word	0x20000004

080032a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032ac:	b094      	sub	sp, #80	; 0x50
 80032ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	647b      	str	r3, [r7, #68]	; 0x44
 80032b4:	2300      	movs	r3, #0
 80032b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032b8:	2300      	movs	r3, #0
 80032ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032c0:	4b79      	ldr	r3, [pc, #484]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 030c 	and.w	r3, r3, #12
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d00d      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x40>
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	f200 80e1 	bhi.w	8003494 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <HAL_RCC_GetSysClockFreq+0x34>
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d003      	beq.n	80032e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80032da:	e0db      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032dc:	4b73      	ldr	r3, [pc, #460]	; (80034ac <HAL_RCC_GetSysClockFreq+0x204>)
 80032de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80032e0:	e0db      	b.n	800349a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032e2:	4b73      	ldr	r3, [pc, #460]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80032e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032e6:	e0d8      	b.n	800349a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032e8:	4b6f      	ldr	r3, [pc, #444]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032f2:	4b6d      	ldr	r3, [pc, #436]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d063      	beq.n	80033c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032fe:	4b6a      	ldr	r3, [pc, #424]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	099b      	lsrs	r3, r3, #6
 8003304:	2200      	movs	r2, #0
 8003306:	63bb      	str	r3, [r7, #56]	; 0x38
 8003308:	63fa      	str	r2, [r7, #60]	; 0x3c
 800330a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003310:	633b      	str	r3, [r7, #48]	; 0x30
 8003312:	2300      	movs	r3, #0
 8003314:	637b      	str	r3, [r7, #52]	; 0x34
 8003316:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800331a:	4622      	mov	r2, r4
 800331c:	462b      	mov	r3, r5
 800331e:	f04f 0000 	mov.w	r0, #0
 8003322:	f04f 0100 	mov.w	r1, #0
 8003326:	0159      	lsls	r1, r3, #5
 8003328:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800332c:	0150      	lsls	r0, r2, #5
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	4621      	mov	r1, r4
 8003334:	1a51      	subs	r1, r2, r1
 8003336:	6139      	str	r1, [r7, #16]
 8003338:	4629      	mov	r1, r5
 800333a:	eb63 0301 	sbc.w	r3, r3, r1
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800334c:	4659      	mov	r1, fp
 800334e:	018b      	lsls	r3, r1, #6
 8003350:	4651      	mov	r1, sl
 8003352:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003356:	4651      	mov	r1, sl
 8003358:	018a      	lsls	r2, r1, #6
 800335a:	4651      	mov	r1, sl
 800335c:	ebb2 0801 	subs.w	r8, r2, r1
 8003360:	4659      	mov	r1, fp
 8003362:	eb63 0901 	sbc.w	r9, r3, r1
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003372:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003376:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800337a:	4690      	mov	r8, r2
 800337c:	4699      	mov	r9, r3
 800337e:	4623      	mov	r3, r4
 8003380:	eb18 0303 	adds.w	r3, r8, r3
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	462b      	mov	r3, r5
 8003388:	eb49 0303 	adc.w	r3, r9, r3
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800339a:	4629      	mov	r1, r5
 800339c:	024b      	lsls	r3, r1, #9
 800339e:	4621      	mov	r1, r4
 80033a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033a4:	4621      	mov	r1, r4
 80033a6:	024a      	lsls	r2, r1, #9
 80033a8:	4610      	mov	r0, r2
 80033aa:	4619      	mov	r1, r3
 80033ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ae:	2200      	movs	r2, #0
 80033b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80033b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033b8:	f7fc ff82 	bl	80002c0 <__aeabi_uldivmod>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4613      	mov	r3, r2
 80033c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033c4:	e058      	b.n	8003478 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c6:	4b38      	ldr	r3, [pc, #224]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	099b      	lsrs	r3, r3, #6
 80033cc:	2200      	movs	r2, #0
 80033ce:	4618      	mov	r0, r3
 80033d0:	4611      	mov	r1, r2
 80033d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033d6:	623b      	str	r3, [r7, #32]
 80033d8:	2300      	movs	r3, #0
 80033da:	627b      	str	r3, [r7, #36]	; 0x24
 80033dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033e0:	4642      	mov	r2, r8
 80033e2:	464b      	mov	r3, r9
 80033e4:	f04f 0000 	mov.w	r0, #0
 80033e8:	f04f 0100 	mov.w	r1, #0
 80033ec:	0159      	lsls	r1, r3, #5
 80033ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033f2:	0150      	lsls	r0, r2, #5
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4641      	mov	r1, r8
 80033fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80033fe:	4649      	mov	r1, r9
 8003400:	eb63 0b01 	sbc.w	fp, r3, r1
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003410:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003414:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003418:	ebb2 040a 	subs.w	r4, r2, sl
 800341c:	eb63 050b 	sbc.w	r5, r3, fp
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	00eb      	lsls	r3, r5, #3
 800342a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800342e:	00e2      	lsls	r2, r4, #3
 8003430:	4614      	mov	r4, r2
 8003432:	461d      	mov	r5, r3
 8003434:	4643      	mov	r3, r8
 8003436:	18e3      	adds	r3, r4, r3
 8003438:	603b      	str	r3, [r7, #0]
 800343a:	464b      	mov	r3, r9
 800343c:	eb45 0303 	adc.w	r3, r5, r3
 8003440:	607b      	str	r3, [r7, #4]
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800344e:	4629      	mov	r1, r5
 8003450:	028b      	lsls	r3, r1, #10
 8003452:	4621      	mov	r1, r4
 8003454:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003458:	4621      	mov	r1, r4
 800345a:	028a      	lsls	r2, r1, #10
 800345c:	4610      	mov	r0, r2
 800345e:	4619      	mov	r1, r3
 8003460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003462:	2200      	movs	r2, #0
 8003464:	61bb      	str	r3, [r7, #24]
 8003466:	61fa      	str	r2, [r7, #28]
 8003468:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800346c:	f7fc ff28 	bl	80002c0 <__aeabi_uldivmod>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4613      	mov	r3, r2
 8003476:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003478:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	0c1b      	lsrs	r3, r3, #16
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	3301      	adds	r3, #1
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003488:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800348a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800348c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003490:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003492:	e002      	b.n	800349a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003494:	4b05      	ldr	r3, [pc, #20]	; (80034ac <HAL_RCC_GetSysClockFreq+0x204>)
 8003496:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003498:	bf00      	nop
    }
  }
  return sysclockfreq;
 800349a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800349c:	4618      	mov	r0, r3
 800349e:	3750      	adds	r7, #80	; 0x50
 80034a0:	46bd      	mov	sp, r7
 80034a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034a6:	bf00      	nop
 80034a8:	40023800 	.word	0x40023800
 80034ac:	00f42400 	.word	0x00f42400
 80034b0:	007a1200 	.word	0x007a1200

080034b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b8:	4b03      	ldr	r3, [pc, #12]	; (80034c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034ba:	681b      	ldr	r3, [r3, #0]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	20000000 	.word	0x20000000

080034cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034d0:	f7ff fff0 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 80034d4:	4602      	mov	r2, r0
 80034d6:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	0a9b      	lsrs	r3, r3, #10
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	4903      	ldr	r1, [pc, #12]	; (80034f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e2:	5ccb      	ldrb	r3, [r1, r3]
 80034e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40023800 	.word	0x40023800
 80034f0:	0801cbcc 	.word	0x0801cbcc

080034f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034f8:	f7ff ffdc 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 80034fc:	4602      	mov	r2, r0
 80034fe:	4b05      	ldr	r3, [pc, #20]	; (8003514 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	0b5b      	lsrs	r3, r3, #13
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	4903      	ldr	r1, [pc, #12]	; (8003518 <HAL_RCC_GetPCLK2Freq+0x24>)
 800350a:	5ccb      	ldrb	r3, [r1, r3]
 800350c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003510:	4618      	mov	r0, r3
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40023800 	.word	0x40023800
 8003518:	0801cbcc 	.word	0x0801cbcc

0800351c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	220f      	movs	r2, #15
 800352a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800352c:	4b12      	ldr	r3, [pc, #72]	; (8003578 <HAL_RCC_GetClockConfig+0x5c>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 0203 	and.w	r2, r3, #3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003538:	4b0f      	ldr	r3, [pc, #60]	; (8003578 <HAL_RCC_GetClockConfig+0x5c>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003544:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <HAL_RCC_GetClockConfig+0x5c>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003550:	4b09      	ldr	r3, [pc, #36]	; (8003578 <HAL_RCC_GetClockConfig+0x5c>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	08db      	lsrs	r3, r3, #3
 8003556:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800355e:	4b07      	ldr	r3, [pc, #28]	; (800357c <HAL_RCC_GetClockConfig+0x60>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 020f 	and.w	r2, r3, #15
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	601a      	str	r2, [r3, #0]
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40023800 	.word	0x40023800
 800357c:	40023c00 	.word	0x40023c00

08003580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e041      	b.n	8003616 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f839 	bl	800361e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3304      	adds	r3, #4
 80035bc:	4619      	mov	r1, r3
 80035be:	4610      	mov	r0, r2
 80035c0:	f000 f9d8 	bl	8003974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
	...

08003634 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	d001      	beq.n	800364c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e04e      	b.n	80036ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0201 	orr.w	r2, r2, #1
 8003662:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a23      	ldr	r2, [pc, #140]	; (80036f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d022      	beq.n	80036b4 <HAL_TIM_Base_Start_IT+0x80>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003676:	d01d      	beq.n	80036b4 <HAL_TIM_Base_Start_IT+0x80>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a1f      	ldr	r2, [pc, #124]	; (80036fc <HAL_TIM_Base_Start_IT+0xc8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d018      	beq.n	80036b4 <HAL_TIM_Base_Start_IT+0x80>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1e      	ldr	r2, [pc, #120]	; (8003700 <HAL_TIM_Base_Start_IT+0xcc>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d013      	beq.n	80036b4 <HAL_TIM_Base_Start_IT+0x80>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a1c      	ldr	r2, [pc, #112]	; (8003704 <HAL_TIM_Base_Start_IT+0xd0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d00e      	beq.n	80036b4 <HAL_TIM_Base_Start_IT+0x80>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a1b      	ldr	r2, [pc, #108]	; (8003708 <HAL_TIM_Base_Start_IT+0xd4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d009      	beq.n	80036b4 <HAL_TIM_Base_Start_IT+0x80>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a19      	ldr	r2, [pc, #100]	; (800370c <HAL_TIM_Base_Start_IT+0xd8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d004      	beq.n	80036b4 <HAL_TIM_Base_Start_IT+0x80>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a18      	ldr	r2, [pc, #96]	; (8003710 <HAL_TIM_Base_Start_IT+0xdc>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d111      	bne.n	80036d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2b06      	cmp	r3, #6
 80036c4:	d010      	beq.n	80036e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f042 0201 	orr.w	r2, r2, #1
 80036d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d6:	e007      	b.n	80036e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0201 	orr.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40010000 	.word	0x40010000
 80036fc:	40000400 	.word	0x40000400
 8003700:	40000800 	.word	0x40000800
 8003704:	40000c00 	.word	0x40000c00
 8003708:	40010400 	.word	0x40010400
 800370c:	40014000 	.word	0x40014000
 8003710:	40001800 	.word	0x40001800

08003714 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b02      	cmp	r3, #2
 8003728:	d122      	bne.n	8003770 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b02      	cmp	r3, #2
 8003736:	d11b      	bne.n	8003770 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0202 	mvn.w	r2, #2
 8003740:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f8ee 	bl	8003938 <HAL_TIM_IC_CaptureCallback>
 800375c:	e005      	b.n	800376a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f8e0 	bl	8003924 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f8f1 	bl	800394c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b04      	cmp	r3, #4
 800377c:	d122      	bne.n	80037c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b04      	cmp	r3, #4
 800378a:	d11b      	bne.n	80037c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0204 	mvn.w	r2, #4
 8003794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2202      	movs	r2, #2
 800379a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f8c4 	bl	8003938 <HAL_TIM_IC_CaptureCallback>
 80037b0:	e005      	b.n	80037be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f8b6 	bl	8003924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f8c7 	bl	800394c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d122      	bne.n	8003818 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d11b      	bne.n	8003818 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0208 	mvn.w	r2, #8
 80037e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2204      	movs	r2, #4
 80037ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f89a 	bl	8003938 <HAL_TIM_IC_CaptureCallback>
 8003804:	e005      	b.n	8003812 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f88c 	bl	8003924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f89d 	bl	800394c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	2b10      	cmp	r3, #16
 8003824:	d122      	bne.n	800386c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0310 	and.w	r3, r3, #16
 8003830:	2b10      	cmp	r3, #16
 8003832:	d11b      	bne.n	800386c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0210 	mvn.w	r2, #16
 800383c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2208      	movs	r2, #8
 8003842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f870 	bl	8003938 <HAL_TIM_IC_CaptureCallback>
 8003858:	e005      	b.n	8003866 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f862 	bl	8003924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f873 	bl	800394c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b01      	cmp	r3, #1
 8003878:	d10e      	bne.n	8003898 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b01      	cmp	r3, #1
 8003886:	d107      	bne.n	8003898 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f06f 0201 	mvn.w	r2, #1
 8003890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7fd f840 	bl	8000918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a2:	2b80      	cmp	r3, #128	; 0x80
 80038a4:	d10e      	bne.n	80038c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b0:	2b80      	cmp	r3, #128	; 0x80
 80038b2:	d107      	bne.n	80038c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f902 	bl	8003ac8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ce:	2b40      	cmp	r3, #64	; 0x40
 80038d0:	d10e      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038dc:	2b40      	cmp	r3, #64	; 0x40
 80038de:	d107      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f838 	bl	8003960 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	2b20      	cmp	r3, #32
 80038fc:	d10e      	bne.n	800391c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f003 0320 	and.w	r3, r3, #32
 8003908:	2b20      	cmp	r3, #32
 800390a:	d107      	bne.n	800391c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f06f 0220 	mvn.w	r2, #32
 8003914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f8cc 	bl	8003ab4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800391c:	bf00      	nop
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a40      	ldr	r2, [pc, #256]	; (8003a88 <TIM_Base_SetConfig+0x114>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d013      	beq.n	80039b4 <TIM_Base_SetConfig+0x40>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003992:	d00f      	beq.n	80039b4 <TIM_Base_SetConfig+0x40>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a3d      	ldr	r2, [pc, #244]	; (8003a8c <TIM_Base_SetConfig+0x118>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00b      	beq.n	80039b4 <TIM_Base_SetConfig+0x40>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a3c      	ldr	r2, [pc, #240]	; (8003a90 <TIM_Base_SetConfig+0x11c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d007      	beq.n	80039b4 <TIM_Base_SetConfig+0x40>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a3b      	ldr	r2, [pc, #236]	; (8003a94 <TIM_Base_SetConfig+0x120>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d003      	beq.n	80039b4 <TIM_Base_SetConfig+0x40>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a3a      	ldr	r2, [pc, #232]	; (8003a98 <TIM_Base_SetConfig+0x124>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d108      	bne.n	80039c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a2f      	ldr	r2, [pc, #188]	; (8003a88 <TIM_Base_SetConfig+0x114>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d02b      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d4:	d027      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a2c      	ldr	r2, [pc, #176]	; (8003a8c <TIM_Base_SetConfig+0x118>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d023      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a2b      	ldr	r2, [pc, #172]	; (8003a90 <TIM_Base_SetConfig+0x11c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d01f      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a2a      	ldr	r2, [pc, #168]	; (8003a94 <TIM_Base_SetConfig+0x120>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d01b      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a29      	ldr	r2, [pc, #164]	; (8003a98 <TIM_Base_SetConfig+0x124>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d017      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a28      	ldr	r2, [pc, #160]	; (8003a9c <TIM_Base_SetConfig+0x128>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d013      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a27      	ldr	r2, [pc, #156]	; (8003aa0 <TIM_Base_SetConfig+0x12c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00f      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a26      	ldr	r2, [pc, #152]	; (8003aa4 <TIM_Base_SetConfig+0x130>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00b      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a25      	ldr	r2, [pc, #148]	; (8003aa8 <TIM_Base_SetConfig+0x134>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d007      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a24      	ldr	r2, [pc, #144]	; (8003aac <TIM_Base_SetConfig+0x138>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d003      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a23      	ldr	r2, [pc, #140]	; (8003ab0 <TIM_Base_SetConfig+0x13c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d108      	bne.n	8003a38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a0a      	ldr	r2, [pc, #40]	; (8003a88 <TIM_Base_SetConfig+0x114>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d003      	beq.n	8003a6c <TIM_Base_SetConfig+0xf8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a0c      	ldr	r2, [pc, #48]	; (8003a98 <TIM_Base_SetConfig+0x124>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d103      	bne.n	8003a74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	615a      	str	r2, [r3, #20]
}
 8003a7a:	bf00      	nop
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40010000 	.word	0x40010000
 8003a8c:	40000400 	.word	0x40000400
 8003a90:	40000800 	.word	0x40000800
 8003a94:	40000c00 	.word	0x40000c00
 8003a98:	40010400 	.word	0x40010400
 8003a9c:	40014000 	.word	0x40014000
 8003aa0:	40014400 	.word	0x40014400
 8003aa4:	40014800 	.word	0x40014800
 8003aa8:	40001800 	.word	0x40001800
 8003aac:	40001c00 	.word	0x40001c00
 8003ab0:	40002000 	.word	0x40002000

08003ab4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e03f      	b.n	8003b6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d106      	bne.n	8003b08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fc ff4c 	bl	80009a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2224      	movs	r2, #36	; 0x24
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f829 	bl	8003b78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	691a      	ldr	r2, [r3, #16]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695a      	ldr	r2, [r3, #20]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b7c:	b0c0      	sub	sp, #256	; 0x100
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b94:	68d9      	ldr	r1, [r3, #12]
 8003b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	ea40 0301 	orr.w	r3, r0, r1
 8003ba0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003bd0:	f021 010c 	bic.w	r1, r1, #12
 8003bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003bde:	430b      	orrs	r3, r1
 8003be0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf2:	6999      	ldr	r1, [r3, #24]
 8003bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	ea40 0301 	orr.w	r3, r0, r1
 8003bfe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	4b8f      	ldr	r3, [pc, #572]	; (8003e44 <UART_SetConfig+0x2cc>)
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d005      	beq.n	8003c18 <UART_SetConfig+0xa0>
 8003c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	4b8d      	ldr	r3, [pc, #564]	; (8003e48 <UART_SetConfig+0x2d0>)
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d104      	bne.n	8003c22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c18:	f7ff fc6c 	bl	80034f4 <HAL_RCC_GetPCLK2Freq>
 8003c1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c20:	e003      	b.n	8003c2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c22:	f7ff fc53 	bl	80034cc <HAL_RCC_GetPCLK1Freq>
 8003c26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c34:	f040 810c 	bne.w	8003e50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c4a:	4622      	mov	r2, r4
 8003c4c:	462b      	mov	r3, r5
 8003c4e:	1891      	adds	r1, r2, r2
 8003c50:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c52:	415b      	adcs	r3, r3
 8003c54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c5a:	4621      	mov	r1, r4
 8003c5c:	eb12 0801 	adds.w	r8, r2, r1
 8003c60:	4629      	mov	r1, r5
 8003c62:	eb43 0901 	adc.w	r9, r3, r1
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c7a:	4690      	mov	r8, r2
 8003c7c:	4699      	mov	r9, r3
 8003c7e:	4623      	mov	r3, r4
 8003c80:	eb18 0303 	adds.w	r3, r8, r3
 8003c84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c88:	462b      	mov	r3, r5
 8003c8a:	eb49 0303 	adc.w	r3, r9, r3
 8003c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ca2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	18db      	adds	r3, r3, r3
 8003caa:	653b      	str	r3, [r7, #80]	; 0x50
 8003cac:	4613      	mov	r3, r2
 8003cae:	eb42 0303 	adc.w	r3, r2, r3
 8003cb2:	657b      	str	r3, [r7, #84]	; 0x54
 8003cb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003cb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003cbc:	f7fc fb00 	bl	80002c0 <__aeabi_uldivmod>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4b61      	ldr	r3, [pc, #388]	; (8003e4c <UART_SetConfig+0x2d4>)
 8003cc6:	fba3 2302 	umull	r2, r3, r3, r2
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	011c      	lsls	r4, r3, #4
 8003cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cd8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003cdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ce0:	4642      	mov	r2, r8
 8003ce2:	464b      	mov	r3, r9
 8003ce4:	1891      	adds	r1, r2, r2
 8003ce6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ce8:	415b      	adcs	r3, r3
 8003cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003cf0:	4641      	mov	r1, r8
 8003cf2:	eb12 0a01 	adds.w	sl, r2, r1
 8003cf6:	4649      	mov	r1, r9
 8003cf8:	eb43 0b01 	adc.w	fp, r3, r1
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d10:	4692      	mov	sl, r2
 8003d12:	469b      	mov	fp, r3
 8003d14:	4643      	mov	r3, r8
 8003d16:	eb1a 0303 	adds.w	r3, sl, r3
 8003d1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d1e:	464b      	mov	r3, r9
 8003d20:	eb4b 0303 	adc.w	r3, fp, r3
 8003d24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	18db      	adds	r3, r3, r3
 8003d40:	643b      	str	r3, [r7, #64]	; 0x40
 8003d42:	4613      	mov	r3, r2
 8003d44:	eb42 0303 	adc.w	r3, r2, r3
 8003d48:	647b      	str	r3, [r7, #68]	; 0x44
 8003d4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d52:	f7fc fab5 	bl	80002c0 <__aeabi_uldivmod>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	4b3b      	ldr	r3, [pc, #236]	; (8003e4c <UART_SetConfig+0x2d4>)
 8003d5e:	fba3 2301 	umull	r2, r3, r3, r1
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	2264      	movs	r2, #100	; 0x64
 8003d66:	fb02 f303 	mul.w	r3, r2, r3
 8003d6a:	1acb      	subs	r3, r1, r3
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d72:	4b36      	ldr	r3, [pc, #216]	; (8003e4c <UART_SetConfig+0x2d4>)
 8003d74:	fba3 2302 	umull	r2, r3, r3, r2
 8003d78:	095b      	lsrs	r3, r3, #5
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d80:	441c      	add	r4, r3
 8003d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d86:	2200      	movs	r2, #0
 8003d88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d94:	4642      	mov	r2, r8
 8003d96:	464b      	mov	r3, r9
 8003d98:	1891      	adds	r1, r2, r2
 8003d9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d9c:	415b      	adcs	r3, r3
 8003d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003da0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003da4:	4641      	mov	r1, r8
 8003da6:	1851      	adds	r1, r2, r1
 8003da8:	6339      	str	r1, [r7, #48]	; 0x30
 8003daa:	4649      	mov	r1, r9
 8003dac:	414b      	adcs	r3, r1
 8003dae:	637b      	str	r3, [r7, #52]	; 0x34
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f04f 0300 	mov.w	r3, #0
 8003db8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003dbc:	4659      	mov	r1, fp
 8003dbe:	00cb      	lsls	r3, r1, #3
 8003dc0:	4651      	mov	r1, sl
 8003dc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dc6:	4651      	mov	r1, sl
 8003dc8:	00ca      	lsls	r2, r1, #3
 8003dca:	4610      	mov	r0, r2
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4603      	mov	r3, r0
 8003dd0:	4642      	mov	r2, r8
 8003dd2:	189b      	adds	r3, r3, r2
 8003dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003dd8:	464b      	mov	r3, r9
 8003dda:	460a      	mov	r2, r1
 8003ddc:	eb42 0303 	adc.w	r3, r2, r3
 8003de0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003df0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003df4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003df8:	460b      	mov	r3, r1
 8003dfa:	18db      	adds	r3, r3, r3
 8003dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dfe:	4613      	mov	r3, r2
 8003e00:	eb42 0303 	adc.w	r3, r2, r3
 8003e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e0e:	f7fc fa57 	bl	80002c0 <__aeabi_uldivmod>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	4b0d      	ldr	r3, [pc, #52]	; (8003e4c <UART_SetConfig+0x2d4>)
 8003e18:	fba3 1302 	umull	r1, r3, r3, r2
 8003e1c:	095b      	lsrs	r3, r3, #5
 8003e1e:	2164      	movs	r1, #100	; 0x64
 8003e20:	fb01 f303 	mul.w	r3, r1, r3
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	3332      	adds	r3, #50	; 0x32
 8003e2a:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <UART_SetConfig+0x2d4>)
 8003e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e30:	095b      	lsrs	r3, r3, #5
 8003e32:	f003 0207 	and.w	r2, r3, #7
 8003e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4422      	add	r2, r4
 8003e3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e40:	e106      	b.n	8004050 <UART_SetConfig+0x4d8>
 8003e42:	bf00      	nop
 8003e44:	40011000 	.word	0x40011000
 8003e48:	40011400 	.word	0x40011400
 8003e4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e54:	2200      	movs	r2, #0
 8003e56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e62:	4642      	mov	r2, r8
 8003e64:	464b      	mov	r3, r9
 8003e66:	1891      	adds	r1, r2, r2
 8003e68:	6239      	str	r1, [r7, #32]
 8003e6a:	415b      	adcs	r3, r3
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e72:	4641      	mov	r1, r8
 8003e74:	1854      	adds	r4, r2, r1
 8003e76:	4649      	mov	r1, r9
 8003e78:	eb43 0501 	adc.w	r5, r3, r1
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	00eb      	lsls	r3, r5, #3
 8003e86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e8a:	00e2      	lsls	r2, r4, #3
 8003e8c:	4614      	mov	r4, r2
 8003e8e:	461d      	mov	r5, r3
 8003e90:	4643      	mov	r3, r8
 8003e92:	18e3      	adds	r3, r4, r3
 8003e94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e98:	464b      	mov	r3, r9
 8003e9a:	eb45 0303 	adc.w	r3, r5, r3
 8003e9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003eae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	008b      	lsls	r3, r1, #2
 8003ec2:	4621      	mov	r1, r4
 8003ec4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ec8:	4621      	mov	r1, r4
 8003eca:	008a      	lsls	r2, r1, #2
 8003ecc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ed0:	f7fc f9f6 	bl	80002c0 <__aeabi_uldivmod>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4b60      	ldr	r3, [pc, #384]	; (800405c <UART_SetConfig+0x4e4>)
 8003eda:	fba3 2302 	umull	r2, r3, r3, r2
 8003ede:	095b      	lsrs	r3, r3, #5
 8003ee0:	011c      	lsls	r4, r3, #4
 8003ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003eec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ef0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ef4:	4642      	mov	r2, r8
 8003ef6:	464b      	mov	r3, r9
 8003ef8:	1891      	adds	r1, r2, r2
 8003efa:	61b9      	str	r1, [r7, #24]
 8003efc:	415b      	adcs	r3, r3
 8003efe:	61fb      	str	r3, [r7, #28]
 8003f00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f04:	4641      	mov	r1, r8
 8003f06:	1851      	adds	r1, r2, r1
 8003f08:	6139      	str	r1, [r7, #16]
 8003f0a:	4649      	mov	r1, r9
 8003f0c:	414b      	adcs	r3, r1
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f1c:	4659      	mov	r1, fp
 8003f1e:	00cb      	lsls	r3, r1, #3
 8003f20:	4651      	mov	r1, sl
 8003f22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f26:	4651      	mov	r1, sl
 8003f28:	00ca      	lsls	r2, r1, #3
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4603      	mov	r3, r0
 8003f30:	4642      	mov	r2, r8
 8003f32:	189b      	adds	r3, r3, r2
 8003f34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f38:	464b      	mov	r3, r9
 8003f3a:	460a      	mov	r2, r1
 8003f3c:	eb42 0303 	adc.w	r3, r2, r3
 8003f40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f5c:	4649      	mov	r1, r9
 8003f5e:	008b      	lsls	r3, r1, #2
 8003f60:	4641      	mov	r1, r8
 8003f62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f66:	4641      	mov	r1, r8
 8003f68:	008a      	lsls	r2, r1, #2
 8003f6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f6e:	f7fc f9a7 	bl	80002c0 <__aeabi_uldivmod>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	4611      	mov	r1, r2
 8003f78:	4b38      	ldr	r3, [pc, #224]	; (800405c <UART_SetConfig+0x4e4>)
 8003f7a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	2264      	movs	r2, #100	; 0x64
 8003f82:	fb02 f303 	mul.w	r3, r2, r3
 8003f86:	1acb      	subs	r3, r1, r3
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	3332      	adds	r3, #50	; 0x32
 8003f8c:	4a33      	ldr	r2, [pc, #204]	; (800405c <UART_SetConfig+0x4e4>)
 8003f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f92:	095b      	lsrs	r3, r3, #5
 8003f94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f98:	441c      	add	r4, r3
 8003f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	673b      	str	r3, [r7, #112]	; 0x70
 8003fa2:	677a      	str	r2, [r7, #116]	; 0x74
 8003fa4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003fa8:	4642      	mov	r2, r8
 8003faa:	464b      	mov	r3, r9
 8003fac:	1891      	adds	r1, r2, r2
 8003fae:	60b9      	str	r1, [r7, #8]
 8003fb0:	415b      	adcs	r3, r3
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fb8:	4641      	mov	r1, r8
 8003fba:	1851      	adds	r1, r2, r1
 8003fbc:	6039      	str	r1, [r7, #0]
 8003fbe:	4649      	mov	r1, r9
 8003fc0:	414b      	adcs	r3, r1
 8003fc2:	607b      	str	r3, [r7, #4]
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	f04f 0300 	mov.w	r3, #0
 8003fcc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003fd0:	4659      	mov	r1, fp
 8003fd2:	00cb      	lsls	r3, r1, #3
 8003fd4:	4651      	mov	r1, sl
 8003fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fda:	4651      	mov	r1, sl
 8003fdc:	00ca      	lsls	r2, r1, #3
 8003fde:	4610      	mov	r0, r2
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4642      	mov	r2, r8
 8003fe6:	189b      	adds	r3, r3, r2
 8003fe8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fea:	464b      	mov	r3, r9
 8003fec:	460a      	mov	r2, r1
 8003fee:	eb42 0303 	adc.w	r3, r2, r3
 8003ff2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	663b      	str	r3, [r7, #96]	; 0x60
 8003ffe:	667a      	str	r2, [r7, #100]	; 0x64
 8004000:	f04f 0200 	mov.w	r2, #0
 8004004:	f04f 0300 	mov.w	r3, #0
 8004008:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800400c:	4649      	mov	r1, r9
 800400e:	008b      	lsls	r3, r1, #2
 8004010:	4641      	mov	r1, r8
 8004012:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004016:	4641      	mov	r1, r8
 8004018:	008a      	lsls	r2, r1, #2
 800401a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800401e:	f7fc f94f 	bl	80002c0 <__aeabi_uldivmod>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	4b0d      	ldr	r3, [pc, #52]	; (800405c <UART_SetConfig+0x4e4>)
 8004028:	fba3 1302 	umull	r1, r3, r3, r2
 800402c:	095b      	lsrs	r3, r3, #5
 800402e:	2164      	movs	r1, #100	; 0x64
 8004030:	fb01 f303 	mul.w	r3, r1, r3
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	3332      	adds	r3, #50	; 0x32
 800403a:	4a08      	ldr	r2, [pc, #32]	; (800405c <UART_SetConfig+0x4e4>)
 800403c:	fba2 2303 	umull	r2, r3, r2, r3
 8004040:	095b      	lsrs	r3, r3, #5
 8004042:	f003 020f 	and.w	r2, r3, #15
 8004046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4422      	add	r2, r4
 800404e:	609a      	str	r2, [r3, #8]
}
 8004050:	bf00      	nop
 8004052:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004056:	46bd      	mov	sp, r7
 8004058:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800405c:	51eb851f 	.word	0x51eb851f

08004060 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004060:	b5b0      	push	{r4, r5, r7, lr}
 8004062:	b08c      	sub	sp, #48	; 0x30
 8004064:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004066:	2100      	movs	r1, #0
 8004068:	2000      	movs	r0, #0
 800406a:	f005 ffdd 	bl	800a028 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800406e:	4b20      	ldr	r3, [pc, #128]	; (80040f0 <MX_LWIP_Init+0x90>)
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004074:	4b1f      	ldr	r3, [pc, #124]	; (80040f4 <MX_LWIP_Init+0x94>)
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800407a:	4b1f      	ldr	r3, [pc, #124]	; (80040f8 <MX_LWIP_Init+0x98>)
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004080:	4b1e      	ldr	r3, [pc, #120]	; (80040fc <MX_LWIP_Init+0x9c>)
 8004082:	9302      	str	r3, [sp, #8]
 8004084:	4b1e      	ldr	r3, [pc, #120]	; (8004100 <MX_LWIP_Init+0xa0>)
 8004086:	9301      	str	r3, [sp, #4]
 8004088:	2300      	movs	r3, #0
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	4b1a      	ldr	r3, [pc, #104]	; (80040f8 <MX_LWIP_Init+0x98>)
 800408e:	4a19      	ldr	r2, [pc, #100]	; (80040f4 <MX_LWIP_Init+0x94>)
 8004090:	4917      	ldr	r1, [pc, #92]	; (80040f0 <MX_LWIP_Init+0x90>)
 8004092:	481c      	ldr	r0, [pc, #112]	; (8004104 <MX_LWIP_Init+0xa4>)
 8004094:	f007 fbe2 	bl	800b85c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004098:	481a      	ldr	r0, [pc, #104]	; (8004104 <MX_LWIP_Init+0xa4>)
 800409a:	f007 fd99 	bl	800bbd0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800409e:	4b19      	ldr	r3, [pc, #100]	; (8004104 <MX_LWIP_Init+0xa4>)
 80040a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80040a4:	089b      	lsrs	r3, r3, #2
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80040b0:	4814      	ldr	r0, [pc, #80]	; (8004104 <MX_LWIP_Init+0xa4>)
 80040b2:	f007 fd9d 	bl	800bbf0 <netif_set_up>
 80040b6:	e002      	b.n	80040be <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80040b8:	4812      	ldr	r0, [pc, #72]	; (8004104 <MX_LWIP_Init+0xa4>)
 80040ba:	f007 fe05 	bl	800bcc8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80040be:	4912      	ldr	r1, [pc, #72]	; (8004108 <MX_LWIP_Init+0xa8>)
 80040c0:	4810      	ldr	r0, [pc, #64]	; (8004104 <MX_LWIP_Init+0xa4>)
 80040c2:	f007 fe9b 	bl	800bdfc <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 80040c6:	4b11      	ldr	r3, [pc, #68]	; (800410c <MX_LWIP_Init+0xac>)
 80040c8:	1d3c      	adds	r4, r7, #4
 80040ca:	461d      	mov	r5, r3
 80040cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80040d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 80040d8:	1d3b      	adds	r3, r7, #4
 80040da:	490a      	ldr	r1, [pc, #40]	; (8004104 <MX_LWIP_Init+0xa4>)
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 fd23 	bl	8004b28 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80040e2:	4808      	ldr	r0, [pc, #32]	; (8004104 <MX_LWIP_Init+0xa4>)
 80040e4:	f00f ff56 	bl	8013f94 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80040e8:	bf00      	nop
 80040ea:	3720      	adds	r7, #32
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bdb0      	pop	{r4, r5, r7, pc}
 80040f0:	2000041c 	.word	0x2000041c
 80040f4:	20000420 	.word	0x20000420
 80040f8:	20000424 	.word	0x20000424
 80040fc:	08009f39 	.word	0x08009f39
 8004100:	080045b1 	.word	0x080045b1
 8004104:	200003e4 	.word	0x200003e4
 8004108:	08004111 	.word	0x08004111
 800410c:	08019090 	.word	0x08019090

08004110 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800412c:	4b04      	ldr	r3, [pc, #16]	; (8004140 <HAL_ETH_RxCpltCallback+0x1c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fe75 	bl	8004e20 <osSemaphoreRelease>
}
 8004136:	bf00      	nop
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	20004ef4 	.word	0x20004ef4

08004144 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800414c:	4b04      	ldr	r3, [pc, #16]	; (8004160 <HAL_ETH_TxCpltCallback+0x1c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fe65 	bl	8004e20 <osSemaphoreRelease>
}
 8004156:	bf00      	nop
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	20004ef8 	.word	0x20004ef8

08004164 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7fd ff65 	bl	800203c <HAL_ETH_GetDMAError>
 8004172:	4603      	mov	r3, r0
 8004174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004178:	2b80      	cmp	r3, #128	; 0x80
 800417a:	d104      	bne.n	8004186 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800417c:	4b04      	ldr	r3, [pc, #16]	; (8004190 <HAL_ETH_ErrorCallback+0x2c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f000 fe4d 	bl	8004e20 <osSemaphoreRelease>
  }
}
 8004186:	bf00      	nop
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20004ef4 	.word	0x20004ef4

08004194 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004194:	b5b0      	push	{r4, r5, r7, lr}
 8004196:	b0a8      	sub	sp, #160	; 0xa0
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800419c:	2300      	movs	r3, #0
 800419e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 80041a2:	2300      	movs	r3, #0
 80041a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 80041ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041b2:	2264      	movs	r2, #100	; 0x64
 80041b4:	2100      	movs	r1, #0
 80041b6:	4618      	mov	r0, r3
 80041b8:	f014 f81f 	bl	80181fa <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80041bc:	4b85      	ldr	r3, [pc, #532]	; (80043d4 <low_level_init+0x240>)
 80041be:	4a86      	ldr	r2, [pc, #536]	; (80043d8 <low_level_init+0x244>)
 80041c0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80041c2:	2300      	movs	r3, #0
 80041c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 80041ce:	23e1      	movs	r3, #225	; 0xe1
 80041d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0xFE;
 80041d4:	23fe      	movs	r3, #254	; 0xfe
 80041d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0xEC;
 80041da:	23ec      	movs	r3, #236	; 0xec
 80041dc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x79;
 80041e0:	2379      	movs	r3, #121	; 0x79
 80041e2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 80041e6:	4a7b      	ldr	r2, [pc, #492]	; (80043d4 <low_level_init+0x240>)
 80041e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041ec:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80041ee:	4b79      	ldr	r3, [pc, #484]	; (80043d4 <low_level_init+0x240>)
 80041f0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80041f4:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80041f6:	4b77      	ldr	r3, [pc, #476]	; (80043d4 <low_level_init+0x240>)
 80041f8:	4a78      	ldr	r2, [pc, #480]	; (80043dc <low_level_init+0x248>)
 80041fa:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80041fc:	4b75      	ldr	r3, [pc, #468]	; (80043d4 <low_level_init+0x240>)
 80041fe:	4a78      	ldr	r2, [pc, #480]	; (80043e0 <low_level_init+0x24c>)
 8004200:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004202:	4b74      	ldr	r3, [pc, #464]	; (80043d4 <low_level_init+0x240>)
 8004204:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004208:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800420a:	4872      	ldr	r0, [pc, #456]	; (80043d4 <low_level_init+0x240>)
 800420c:	f7fd f8d8 	bl	80013c0 <HAL_ETH_Init>
 8004210:	4603      	mov	r3, r0
 8004212:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004216:	2238      	movs	r2, #56	; 0x38
 8004218:	2100      	movs	r1, #0
 800421a:	4872      	ldr	r0, [pc, #456]	; (80043e4 <low_level_init+0x250>)
 800421c:	f013 ffed 	bl	80181fa <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004220:	4b70      	ldr	r3, [pc, #448]	; (80043e4 <low_level_init+0x250>)
 8004222:	2221      	movs	r2, #33	; 0x21
 8004224:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004226:	4b6f      	ldr	r3, [pc, #444]	; (80043e4 <low_level_init+0x250>)
 8004228:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800422c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800422e:	4b6d      	ldr	r3, [pc, #436]	; (80043e4 <low_level_init+0x250>)
 8004230:	2200      	movs	r2, #0
 8004232:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004234:	486c      	ldr	r0, [pc, #432]	; (80043e8 <low_level_init+0x254>)
 8004236:	f007 f9cb 	bl	800b5d0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2206      	movs	r2, #6
 800423e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004242:	4b64      	ldr	r3, [pc, #400]	; (80043d4 <low_level_init+0x240>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	781a      	ldrb	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800424e:	4b61      	ldr	r3, [pc, #388]	; (80043d4 <low_level_init+0x240>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	785a      	ldrb	r2, [r3, #1]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800425a:	4b5e      	ldr	r3, [pc, #376]	; (80043d4 <low_level_init+0x240>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	789a      	ldrb	r2, [r3, #2]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004266:	4b5b      	ldr	r3, [pc, #364]	; (80043d4 <low_level_init+0x240>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	78da      	ldrb	r2, [r3, #3]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004272:	4b58      	ldr	r3, [pc, #352]	; (80043d4 <low_level_init+0x240>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	791a      	ldrb	r2, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800427e:	4b55      	ldr	r3, [pc, #340]	; (80043d4 <low_level_init+0x240>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	795a      	ldrb	r2, [r3, #5]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004290:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004298:	f043 030a 	orr.w	r3, r3, #10
 800429c:	b2da      	uxtb	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 80042a4:	2203      	movs	r2, #3
 80042a6:	2100      	movs	r1, #0
 80042a8:	2001      	movs	r0, #1
 80042aa:	f001 f89d 	bl	80053e8 <xQueueGenericCreate>
 80042ae:	4603      	mov	r3, r0
 80042b0:	4a4e      	ldr	r2, [pc, #312]	; (80043ec <low_level_init+0x258>)
 80042b2:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 80042b4:	2203      	movs	r2, #3
 80042b6:	2100      	movs	r1, #0
 80042b8:	2001      	movs	r0, #1
 80042ba:	f001 f895 	bl	80053e8 <xQueueGenericCreate>
 80042be:	4603      	mov	r3, r0
 80042c0:	4a4b      	ldr	r2, [pc, #300]	; (80043f0 <low_level_init+0x25c>)
 80042c2:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80042c4:	4b4b      	ldr	r3, [pc, #300]	; (80043f4 <low_level_init+0x260>)
 80042c6:	f107 0408 	add.w	r4, r7, #8
 80042ca:	461d      	mov	r5, r3
 80042cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80042d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80042d8:	f107 0308 	add.w	r3, r7, #8
 80042dc:	6879      	ldr	r1, [r7, #4]
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fc22 	bl	8004b28 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80042e4:	4944      	ldr	r1, [pc, #272]	; (80043f8 <low_level_init+0x264>)
 80042e6:	4845      	ldr	r0, [pc, #276]	; (80043fc <low_level_init+0x268>)
 80042e8:	f7fc fdc1 	bl	8000e6e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80042ec:	4843      	ldr	r0, [pc, #268]	; (80043fc <low_level_init+0x268>)
 80042ee:	f7fc fdf0 	bl	8000ed2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80042f2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d165      	bne.n	80043c6 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80042fa:	4840      	ldr	r0, [pc, #256]	; (80043fc <low_level_init+0x268>)
 80042fc:	f7fc fe91 	bl	8001022 <LAN8742_GetLinkState>
 8004300:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004304:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004308:	2b01      	cmp	r3, #1
 800430a:	dc06      	bgt.n	800431a <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f007 fd45 	bl	800bd9c <netif_set_link_down>
      netif_set_down(netif);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f007 fcd8 	bl	800bcc8 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004318:	e057      	b.n	80043ca <low_level_init+0x236>
      switch (PHYLinkState)
 800431a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800431e:	3b02      	subs	r3, #2
 8004320:	2b03      	cmp	r3, #3
 8004322:	d82b      	bhi.n	800437c <low_level_init+0x1e8>
 8004324:	a201      	add	r2, pc, #4	; (adr r2, 800432c <low_level_init+0x198>)
 8004326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432a:	bf00      	nop
 800432c:	0800433d 	.word	0x0800433d
 8004330:	0800434f 	.word	0x0800434f
 8004334:	0800435f 	.word	0x0800435f
 8004338:	0800436f 	.word	0x0800436f
        duplex = ETH_FULLDUPLEX_MODE;
 800433c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004340:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004344:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800434c:	e01f      	b.n	800438e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800434e:	2300      	movs	r3, #0
 8004350:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004354:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004358:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800435c:	e017      	b.n	800438e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800435e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004362:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004366:	2300      	movs	r3, #0
 8004368:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800436c:	e00f      	b.n	800438e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800436e:	2300      	movs	r3, #0
 8004370:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004374:	2300      	movs	r3, #0
 8004376:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800437a:	e008      	b.n	800438e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800437c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004380:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004384:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004388:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800438c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800438e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004392:	4619      	mov	r1, r3
 8004394:	480f      	ldr	r0, [pc, #60]	; (80043d4 <low_level_init+0x240>)
 8004396:	f7fd fcf7 	bl	8001d88 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800439a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800439e:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 80043a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043a4:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80043a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043aa:	4619      	mov	r1, r3
 80043ac:	4809      	ldr	r0, [pc, #36]	; (80043d4 <low_level_init+0x240>)
 80043ae:	f7fd fdd5 	bl	8001f5c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80043b2:	4808      	ldr	r0, [pc, #32]	; (80043d4 <low_level_init+0x240>)
 80043b4:	f7fd f882 	bl	80014bc <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f007 fc19 	bl	800bbf0 <netif_set_up>
    netif_set_link_up(netif);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f007 fcb4 	bl	800bd2c <netif_set_link_up>
}
 80043c4:	e001      	b.n	80043ca <low_level_init+0x236>
    Error_Handler();
 80043c6:	f7fc fab9 	bl	800093c <Error_Handler>
}
 80043ca:	bf00      	nop
 80043cc:	37a0      	adds	r7, #160	; 0xa0
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bdb0      	pop	{r4, r5, r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20004efc 	.word	0x20004efc
 80043d8:	40028000 	.word	0x40028000
 80043dc:	20004e54 	.word	0x20004e54
 80043e0:	20004db4 	.word	0x20004db4
 80043e4:	20004fac 	.word	0x20004fac
 80043e8:	0801cbd4 	.word	0x0801cbd4
 80043ec:	20004ef4 	.word	0x20004ef4
 80043f0:	20004ef8 	.word	0x20004ef8
 80043f4:	080190b4 	.word	0x080190b4
 80043f8:	2000000c 	.word	0x2000000c
 80043fc:	20004fe4 	.word	0x20004fe4

08004400 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b092      	sub	sp, #72	; 0x48
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800440e:	2300      	movs	r3, #0
 8004410:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004418:	f107 030c 	add.w	r3, r7, #12
 800441c:	2230      	movs	r2, #48	; 0x30
 800441e:	2100      	movs	r1, #0
 8004420:	4618      	mov	r0, r3
 8004422:	f013 feea 	bl	80181fa <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004426:	f107 030c 	add.w	r3, r7, #12
 800442a:	2230      	movs	r2, #48	; 0x30
 800442c:	2100      	movs	r1, #0
 800442e:	4618      	mov	r0, r3
 8004430:	f013 fee3 	bl	80181fa <memset>

  for(q = p; q != NULL; q = q->next)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	643b      	str	r3, [r7, #64]	; 0x40
 8004438:	e045      	b.n	80044c6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800443a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800443c:	2b03      	cmp	r3, #3
 800443e:	d902      	bls.n	8004446 <low_level_output+0x46>
      return ERR_IF;
 8004440:	f06f 030b 	mvn.w	r3, #11
 8004444:	e065      	b.n	8004512 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8004446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004448:	6859      	ldr	r1, [r3, #4]
 800444a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800444c:	4613      	mov	r3, r2
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	3348      	adds	r3, #72	; 0x48
 8004456:	443b      	add	r3, r7
 8004458:	3b3c      	subs	r3, #60	; 0x3c
 800445a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800445c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800445e:	895b      	ldrh	r3, [r3, #10]
 8004460:	4619      	mov	r1, r3
 8004462:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004464:	4613      	mov	r3, r2
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	3348      	adds	r3, #72	; 0x48
 800446e:	443b      	add	r3, r7
 8004470:	3b38      	subs	r3, #56	; 0x38
 8004472:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004476:	2b00      	cmp	r3, #0
 8004478:	d011      	beq.n	800449e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800447a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800447c:	1e5a      	subs	r2, r3, #1
 800447e:	f107 000c 	add.w	r0, r7, #12
 8004482:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004484:	460b      	mov	r3, r1
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	440b      	add	r3, r1
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	18c1      	adds	r1, r0, r3
 800448e:	4613      	mov	r3, r2
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	4413      	add	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	3348      	adds	r3, #72	; 0x48
 8004498:	443b      	add	r3, r7
 800449a:	3b34      	subs	r3, #52	; 0x34
 800449c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800449e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d109      	bne.n	80044ba <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80044a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044a8:	4613      	mov	r3, r2
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	4413      	add	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	3348      	adds	r3, #72	; 0x48
 80044b2:	443b      	add	r3, r7
 80044b4:	3b34      	subs	r3, #52	; 0x34
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]
    }

    i++;
 80044ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044bc:	3301      	adds	r3, #1
 80044be:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80044c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	643b      	str	r3, [r7, #64]	; 0x40
 80044c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1b6      	bne.n	800443a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	891b      	ldrh	r3, [r3, #8]
 80044d0:	461a      	mov	r2, r3
 80044d2:	4b12      	ldr	r3, [pc, #72]	; (800451c <low_level_output+0x11c>)
 80044d4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80044d6:	4a11      	ldr	r2, [pc, #68]	; (800451c <low_level_output+0x11c>)
 80044d8:	f107 030c 	add.w	r3, r7, #12
 80044dc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80044de:	4a0f      	ldr	r2, [pc, #60]	; (800451c <low_level_output+0x11c>)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 80044e4:	6838      	ldr	r0, [r7, #0]
 80044e6:	f008 f8dd 	bl	800c6a4 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 80044ea:	490c      	ldr	r1, [pc, #48]	; (800451c <low_level_output+0x11c>)
 80044ec:	480c      	ldr	r0, [pc, #48]	; (8004520 <low_level_output+0x120>)
 80044ee:	f7fd f8f2 	bl	80016d6 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80044f2:	bf00      	nop
 80044f4:	4b0b      	ldr	r3, [pc, #44]	; (8004524 <low_level_output+0x124>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f04f 31ff 	mov.w	r1, #4294967295
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 fc41 	bl	8004d84 <osSemaphoreWait>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1f5      	bne.n	80044f4 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8004508:	4805      	ldr	r0, [pc, #20]	; (8004520 <low_level_output+0x120>)
 800450a:	f7fd fa77 	bl	80019fc <HAL_ETH_ReleaseTxPacket>

  return errval;
 800450e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004512:	4618      	mov	r0, r3
 8004514:	3748      	adds	r7, #72	; 0x48
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20004fac 	.word	0x20004fac
 8004520:	20004efc 	.word	0x20004efc
 8004524:	20004ef8 	.word	0x20004ef8

08004528 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004530:	2300      	movs	r3, #0
 8004532:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004534:	4b07      	ldr	r3, [pc, #28]	; (8004554 <low_level_input+0x2c>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d105      	bne.n	8004548 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800453c:	f107 030c 	add.w	r3, r7, #12
 8004540:	4619      	mov	r1, r3
 8004542:	4805      	ldr	r0, [pc, #20]	; (8004558 <low_level_input+0x30>)
 8004544:	f7fd f923 	bl	800178e <HAL_ETH_ReadData>
  }

  return p;
 8004548:	68fb      	ldr	r3, [r7, #12]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20004db0 	.word	0x20004db0
 8004558:	20004efc 	.word	0x20004efc

0800455c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800456c:	4b0f      	ldr	r3, [pc, #60]	; (80045ac <ethernetif_input+0x50>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f04f 31ff 	mov.w	r1, #4294967295
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fc05 	bl	8004d84 <osSemaphoreWait>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1f5      	bne.n	800456c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004580:	68b8      	ldr	r0, [r7, #8]
 8004582:	f7ff ffd1 	bl	8004528 <low_level_input>
 8004586:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	68b9      	ldr	r1, [r7, #8]
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	4798      	blx	r3
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f007 ffda 	bl	800c558 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1ea      	bne.n	8004580 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80045aa:	e7df      	b.n	800456c <ethernetif_input+0x10>
 80045ac:	20004ef4 	.word	0x20004ef4

080045b0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d106      	bne.n	80045cc <ethernetif_init+0x1c>
 80045be:	4b0e      	ldr	r3, [pc, #56]	; (80045f8 <ethernetif_init+0x48>)
 80045c0:	f240 12df 	movw	r2, #479	; 0x1df
 80045c4:	490d      	ldr	r1, [pc, #52]	; (80045fc <ethernetif_init+0x4c>)
 80045c6:	480e      	ldr	r0, [pc, #56]	; (8004600 <ethernetif_init+0x50>)
 80045c8:	f013 fdb2 	bl	8018130 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2273      	movs	r2, #115	; 0x73
 80045d0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2274      	movs	r2, #116	; 0x74
 80045d8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a09      	ldr	r2, [pc, #36]	; (8004604 <ethernetif_init+0x54>)
 80045e0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a08      	ldr	r2, [pc, #32]	; (8004608 <ethernetif_init+0x58>)
 80045e6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7ff fdd3 	bl	8004194 <low_level_init>

  return ERR_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	080190d0 	.word	0x080190d0
 80045fc:	080190ec 	.word	0x080190ec
 8004600:	080190fc 	.word	0x080190fc
 8004604:	08015e61 	.word	0x08015e61
 8004608:	08004401 	.word	0x08004401

0800460c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004618:	68f9      	ldr	r1, [r7, #12]
 800461a:	4809      	ldr	r0, [pc, #36]	; (8004640 <pbuf_free_custom+0x34>)
 800461c:	f007 f8c8 	bl	800b7b0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004620:	4b08      	ldr	r3, [pc, #32]	; (8004644 <pbuf_free_custom+0x38>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d107      	bne.n	8004638 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004628:	4b06      	ldr	r3, [pc, #24]	; (8004644 <pbuf_free_custom+0x38>)
 800462a:	2200      	movs	r2, #0
 800462c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800462e:	4b06      	ldr	r3, [pc, #24]	; (8004648 <pbuf_free_custom+0x3c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fbf4 	bl	8004e20 <osSemaphoreRelease>
  }
}
 8004638:	bf00      	nop
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	0801cbd4 	.word	0x0801cbd4
 8004644:	20004db0 	.word	0x20004db0
 8004648:	20004ef4 	.word	0x20004ef4

0800464c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004650:	f7fc fda4 	bl	800119c <HAL_GetTick>
 8004654:	4603      	mov	r3, r0
}
 8004656:	4618      	mov	r0, r3
 8004658:	bd80      	pop	{r7, pc}
	...

0800465c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08e      	sub	sp, #56	; 0x38
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	605a      	str	r2, [r3, #4]
 800466e:	609a      	str	r2, [r3, #8]
 8004670:	60da      	str	r2, [r3, #12]
 8004672:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a59      	ldr	r2, [pc, #356]	; (80047e0 <HAL_ETH_MspInit+0x184>)
 800467a:	4293      	cmp	r3, r2
 800467c:	f040 80ac 	bne.w	80047d8 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004680:	2300      	movs	r3, #0
 8004682:	623b      	str	r3, [r7, #32]
 8004684:	4b57      	ldr	r3, [pc, #348]	; (80047e4 <HAL_ETH_MspInit+0x188>)
 8004686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004688:	4a56      	ldr	r2, [pc, #344]	; (80047e4 <HAL_ETH_MspInit+0x188>)
 800468a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800468e:	6313      	str	r3, [r2, #48]	; 0x30
 8004690:	4b54      	ldr	r3, [pc, #336]	; (80047e4 <HAL_ETH_MspInit+0x188>)
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004698:	623b      	str	r3, [r7, #32]
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	2300      	movs	r3, #0
 800469e:	61fb      	str	r3, [r7, #28]
 80046a0:	4b50      	ldr	r3, [pc, #320]	; (80047e4 <HAL_ETH_MspInit+0x188>)
 80046a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a4:	4a4f      	ldr	r2, [pc, #316]	; (80047e4 <HAL_ETH_MspInit+0x188>)
 80046a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046aa:	6313      	str	r3, [r2, #48]	; 0x30
 80046ac:	4b4d      	ldr	r3, [pc, #308]	; (80047e4 <HAL_ETH_MspInit+0x188>)
 80046ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046b4:	61fb      	str	r3, [r7, #28]
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	2300      	movs	r3, #0
 80046ba:	61bb      	str	r3, [r7, #24]
 80046bc:	4b49      	ldr	r3, [pc, #292]	; (80047e4 <HAL_ETH_MspInit+0x188>)
 80046be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c0:	4a48      	ldr	r2, [pc, #288]	; (80047e4 <HAL_ETH_MspInit+0x188>)
 80046c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046c6:	6313      	str	r3, [r2, #48]	; 0x30
 80046c8:	4b46      	ldr	r3, [pc, #280]	; (80047e4 <HAL_ETH_MspInit+0x188>)
 80046ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046d0:	61bb      	str	r3, [r7, #24]
 80046d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	4b42      	ldr	r3, [pc, #264]	; (80047e4 <HAL_ETH_MspInit+0x188>)
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	4a41      	ldr	r2, [pc, #260]	; (80047e4 <HAL_ETH_MspInit+0x188>)
 80046de:	f043 0304 	orr.w	r3, r3, #4
 80046e2:	6313      	str	r3, [r2, #48]	; 0x30
 80046e4:	4b3f      	ldr	r3, [pc, #252]	; (80047e4 <HAL_ETH_MspInit+0x188>)
 80046e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	617b      	str	r3, [r7, #20]
 80046ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046f0:	2300      	movs	r3, #0
 80046f2:	613b      	str	r3, [r7, #16]
 80046f4:	4b3b      	ldr	r3, [pc, #236]	; (80047e4 <HAL_ETH_MspInit+0x188>)
 80046f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f8:	4a3a      	ldr	r2, [pc, #232]	; (80047e4 <HAL_ETH_MspInit+0x188>)
 80046fa:	f043 0301 	orr.w	r3, r3, #1
 80046fe:	6313      	str	r3, [r2, #48]	; 0x30
 8004700:	4b38      	ldr	r3, [pc, #224]	; (80047e4 <HAL_ETH_MspInit+0x188>)
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	613b      	str	r3, [r7, #16]
 800470a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800470c:	2300      	movs	r3, #0
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	4b34      	ldr	r3, [pc, #208]	; (80047e4 <HAL_ETH_MspInit+0x188>)
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	4a33      	ldr	r2, [pc, #204]	; (80047e4 <HAL_ETH_MspInit+0x188>)
 8004716:	f043 0302 	orr.w	r3, r3, #2
 800471a:	6313      	str	r3, [r2, #48]	; 0x30
 800471c:	4b31      	ldr	r3, [pc, #196]	; (80047e4 <HAL_ETH_MspInit+0x188>)
 800471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004728:	2300      	movs	r3, #0
 800472a:	60bb      	str	r3, [r7, #8]
 800472c:	4b2d      	ldr	r3, [pc, #180]	; (80047e4 <HAL_ETH_MspInit+0x188>)
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	4a2c      	ldr	r2, [pc, #176]	; (80047e4 <HAL_ETH_MspInit+0x188>)
 8004732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004736:	6313      	str	r3, [r2, #48]	; 0x30
 8004738:	4b2a      	ldr	r3, [pc, #168]	; (80047e4 <HAL_ETH_MspInit+0x188>)
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004740:	60bb      	str	r3, [r7, #8]
 8004742:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004744:	2332      	movs	r3, #50	; 0x32
 8004746:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004748:	2302      	movs	r3, #2
 800474a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800474c:	2300      	movs	r3, #0
 800474e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004750:	2303      	movs	r3, #3
 8004752:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004754:	230b      	movs	r3, #11
 8004756:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800475c:	4619      	mov	r1, r3
 800475e:	4822      	ldr	r0, [pc, #136]	; (80047e8 <HAL_ETH_MspInit+0x18c>)
 8004760:	f7fe f87e 	bl	8002860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004764:	2386      	movs	r3, #134	; 0x86
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004768:	2302      	movs	r3, #2
 800476a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476c:	2300      	movs	r3, #0
 800476e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004770:	2303      	movs	r3, #3
 8004772:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004774:	230b      	movs	r3, #11
 8004776:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800477c:	4619      	mov	r1, r3
 800477e:	481b      	ldr	r0, [pc, #108]	; (80047ec <HAL_ETH_MspInit+0x190>)
 8004780:	f7fe f86e 	bl	8002860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800478a:	2302      	movs	r3, #2
 800478c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478e:	2300      	movs	r3, #0
 8004790:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004792:	2303      	movs	r3, #3
 8004794:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004796:	230b      	movs	r3, #11
 8004798:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800479a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800479e:	4619      	mov	r1, r3
 80047a0:	4813      	ldr	r0, [pc, #76]	; (80047f0 <HAL_ETH_MspInit+0x194>)
 80047a2:	f7fe f85d 	bl	8002860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80047a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ac:	2302      	movs	r3, #2
 80047ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b0:	2300      	movs	r3, #0
 80047b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047b4:	2303      	movs	r3, #3
 80047b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047b8:	230b      	movs	r3, #11
 80047ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80047bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047c0:	4619      	mov	r1, r3
 80047c2:	480c      	ldr	r0, [pc, #48]	; (80047f4 <HAL_ETH_MspInit+0x198>)
 80047c4:	f7fe f84c 	bl	8002860 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80047c8:	2200      	movs	r2, #0
 80047ca:	2105      	movs	r1, #5
 80047cc:	203d      	movs	r0, #61	; 0x3d
 80047ce:	f7fc fdcd 	bl	800136c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80047d2:	203d      	movs	r0, #61	; 0x3d
 80047d4:	f7fc fde6 	bl	80013a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80047d8:	bf00      	nop
 80047da:	3738      	adds	r7, #56	; 0x38
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40028000 	.word	0x40028000
 80047e4:	40023800 	.word	0x40023800
 80047e8:	40020800 	.word	0x40020800
 80047ec:	40020000 	.word	0x40020000
 80047f0:	40020400 	.word	0x40020400
 80047f4:	40021800 	.word	0x40021800

080047f8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80047fc:	4802      	ldr	r0, [pc, #8]	; (8004808 <ETH_PHY_IO_Init+0x10>)
 80047fe:	f7fd fbc7 	bl	8001f90 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	bd80      	pop	{r7, pc}
 8004808:	20004efc 	.word	0x20004efc

0800480c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
  return 0;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	68f9      	ldr	r1, [r7, #12]
 800482e:	4807      	ldr	r0, [pc, #28]	; (800484c <ETH_PHY_IO_ReadReg+0x30>)
 8004830:	f7fd fa16 	bl	8001c60 <HAL_ETH_ReadPHYRegister>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800483a:	f04f 33ff 	mov.w	r3, #4294967295
 800483e:	e000      	b.n	8004842 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	20004efc 	.word	0x20004efc

08004850 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	68f9      	ldr	r1, [r7, #12]
 8004862:	4807      	ldr	r0, [pc, #28]	; (8004880 <ETH_PHY_IO_WriteReg+0x30>)
 8004864:	f7fd fa47 	bl	8001cf6 <HAL_ETH_WritePHYRegister>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800486e:	f04f 33ff 	mov.w	r3, #4294967295
 8004872:	e000      	b.n	8004876 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20004efc 	.word	0x20004efc

08004884 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004888:	f7fc fc88 	bl	800119c <HAL_GetTick>
 800488c:	4603      	mov	r3, r0
}
 800488e:	4618      	mov	r0, r3
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b0a0      	sub	sp, #128	; 0x80
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800489c:	f107 0308 	add.w	r3, r7, #8
 80048a0:	2264      	movs	r2, #100	; 0x64
 80048a2:	2100      	movs	r1, #0
 80048a4:	4618      	mov	r0, r3
 80048a6:	f013 fca8 	bl	80181fa <memset>
  int32_t PHYLinkState = 0;
 80048aa:	2300      	movs	r3, #0
 80048ac:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048b2:	2300      	movs	r3, #0
 80048b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80048b6:	2300      	movs	r3, #0
 80048b8:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80048be:	483a      	ldr	r0, [pc, #232]	; (80049a8 <ethernet_link_thread+0x114>)
 80048c0:	f7fc fbaf 	bl	8001022 <LAN8742_GetLinkState>
 80048c4:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80048c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80048cc:	089b      	lsrs	r3, r3, #2
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00c      	beq.n	80048f2 <ethernet_link_thread+0x5e>
 80048d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048da:	2b01      	cmp	r3, #1
 80048dc:	dc09      	bgt.n	80048f2 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80048de:	4833      	ldr	r0, [pc, #204]	; (80049ac <ethernet_link_thread+0x118>)
 80048e0:	f7fc fe7a 	bl	80015d8 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80048e4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80048e6:	f007 f9ef 	bl	800bcc8 <netif_set_down>
    netif_set_link_down(netif);
 80048ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80048ec:	f007 fa56 	bl	800bd9c <netif_set_link_down>
 80048f0:	e055      	b.n	800499e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80048f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d14e      	bne.n	800499e <ethernet_link_thread+0x10a>
 8004900:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004902:	2b01      	cmp	r3, #1
 8004904:	dd4b      	ble.n	800499e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8004906:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004908:	3b02      	subs	r3, #2
 800490a:	2b03      	cmp	r3, #3
 800490c:	d82a      	bhi.n	8004964 <ethernet_link_thread+0xd0>
 800490e:	a201      	add	r2, pc, #4	; (adr r2, 8004914 <ethernet_link_thread+0x80>)
 8004910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004914:	08004925 	.word	0x08004925
 8004918:	08004937 	.word	0x08004937
 800491c:	08004947 	.word	0x08004947
 8004920:	08004957 	.word	0x08004957
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004924:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004928:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800492a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800492e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004930:	2301      	movs	r3, #1
 8004932:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004934:	e017      	b.n	8004966 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004936:	2300      	movs	r3, #0
 8004938:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800493a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800493e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004940:	2301      	movs	r3, #1
 8004942:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004944:	e00f      	b.n	8004966 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004946:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800494a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800494c:	2300      	movs	r3, #0
 800494e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004950:	2301      	movs	r3, #1
 8004952:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004954:	e007      	b.n	8004966 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004956:	2300      	movs	r3, #0
 8004958:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800495a:	2300      	movs	r3, #0
 800495c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800495e:	2301      	movs	r3, #1
 8004960:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004962:	e000      	b.n	8004966 <ethernet_link_thread+0xd2>
    default:
      break;
 8004964:	bf00      	nop
    }

    if(linkchanged)
 8004966:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004968:	2b00      	cmp	r3, #0
 800496a:	d018      	beq.n	800499e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800496c:	f107 0308 	add.w	r3, r7, #8
 8004970:	4619      	mov	r1, r3
 8004972:	480e      	ldr	r0, [pc, #56]	; (80049ac <ethernet_link_thread+0x118>)
 8004974:	f7fd fa08 	bl	8001d88 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004978:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800497a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800497c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800497e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004980:	f107 0308 	add.w	r3, r7, #8
 8004984:	4619      	mov	r1, r3
 8004986:	4809      	ldr	r0, [pc, #36]	; (80049ac <ethernet_link_thread+0x118>)
 8004988:	f7fd fae8 	bl	8001f5c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800498c:	4807      	ldr	r0, [pc, #28]	; (80049ac <ethernet_link_thread+0x118>)
 800498e:	f7fc fd95 	bl	80014bc <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8004992:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004994:	f007 f92c 	bl	800bbf0 <netif_set_up>
      netif_set_link_up(netif);
 8004998:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800499a:	f007 f9c7 	bl	800bd2c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800499e:	2064      	movs	r0, #100	; 0x64
 80049a0:	f000 f90e 	bl	8004bc0 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80049a4:	e78b      	b.n	80048be <ethernet_link_thread+0x2a>
 80049a6:	bf00      	nop
 80049a8:	20004fe4 	.word	0x20004fe4
 80049ac:	20004efc 	.word	0x20004efc

080049b0 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80049b8:	4812      	ldr	r0, [pc, #72]	; (8004a04 <HAL_ETH_RxAllocateCallback+0x54>)
 80049ba:	f006 fe85 	bl	800b6c8 <memp_malloc_pool>
 80049be:	60f8      	str	r0, [r7, #12]
  if (p)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d014      	beq.n	80049f0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f103 0220 	add.w	r2, r3, #32
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4a0d      	ldr	r2, [pc, #52]	; (8004a08 <HAL_ETH_RxAllocateCallback+0x58>)
 80049d4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80049de:	9201      	str	r2, [sp, #4]
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2241      	movs	r2, #65	; 0x41
 80049e6:	2100      	movs	r1, #0
 80049e8:	2000      	movs	r0, #0
 80049ea:	f007 fbfb 	bl	800c1e4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80049ee:	e005      	b.n	80049fc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80049f0:	4b06      	ldr	r3, [pc, #24]	; (8004a0c <HAL_ETH_RxAllocateCallback+0x5c>)
 80049f2:	2201      	movs	r2, #1
 80049f4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]
}
 80049fc:	bf00      	nop
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	0801cbd4 	.word	0x0801cbd4
 8004a08:	0800460d 	.word	0x0800460d
 8004a0c:	20004db0 	.word	0x20004db0

08004a10 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b089      	sub	sp, #36	; 0x24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	3b20      	subs	r3, #32
 8004a2e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	887a      	ldrh	r2, [r7, #2]
 8004a40:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d103      	bne.n	8004a52 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	69fa      	ldr	r2, [r7, #28]
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	e003      	b.n	8004a5a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69fa      	ldr	r2, [r7, #28]
 8004a58:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	69fa      	ldr	r2, [r7, #28]
 8004a5e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	61fb      	str	r3, [r7, #28]
 8004a66:	e009      	b.n	8004a7c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	891a      	ldrh	r2, [r3, #8]
 8004a6c:	887b      	ldrh	r3, [r7, #2]
 8004a6e:	4413      	add	r3, r2
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	61fb      	str	r3, [r7, #28]
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1f2      	bne.n	8004a68 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004a82:	bf00      	nop
 8004a84:	bf00      	nop
 8004a86:	3724      	adds	r7, #36	; 0x24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f007 fd5d 	bl	800c558 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8004a9e:	bf00      	nop
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b085      	sub	sp, #20
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	4603      	mov	r3, r0
 8004aae:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004ab4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ab8:	2b84      	cmp	r3, #132	; 0x84
 8004aba:	d005      	beq.n	8004ac8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004abc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3303      	adds	r3, #3
 8004ac6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004adc:	f3ef 8305 	mrs	r3, IPSR
 8004ae0:	607b      	str	r3, [r7, #4]
  return(result);
 8004ae2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	bf14      	ite	ne
 8004ae8:	2301      	movne	r3, #1
 8004aea:	2300      	moveq	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004afe:	f001 fd3b 	bl	8006578 <vTaskStartScheduler>
  
  return osOK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004b0c:	f7ff ffe3 	bl	8004ad6 <inHandlerMode>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004b16:	f001 fe53 	bl	80067c0 <xTaskGetTickCountFromISR>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	e002      	b.n	8004b24 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004b1e:	f001 fe3f 	bl	80067a0 <xTaskGetTickCount>
 8004b22:	4603      	mov	r3, r0
  }
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b2a:	b089      	sub	sp, #36	; 0x24
 8004b2c:	af04      	add	r7, sp, #16
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d020      	beq.n	8004b7c <osThreadCreate+0x54>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d01c      	beq.n	8004b7c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685c      	ldr	r4, [r3, #4]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691e      	ldr	r6, [r3, #16]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7ff ffa6 	bl	8004aa6 <makeFreeRtosPriority>
 8004b5a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b64:	9202      	str	r2, [sp, #8]
 8004b66:	9301      	str	r3, [sp, #4]
 8004b68:	9100      	str	r1, [sp, #0]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	4632      	mov	r2, r6
 8004b6e:	4629      	mov	r1, r5
 8004b70:	4620      	mov	r0, r4
 8004b72:	f001 fb23 	bl	80061bc <xTaskCreateStatic>
 8004b76:	4603      	mov	r3, r0
 8004b78:	60fb      	str	r3, [r7, #12]
 8004b7a:	e01c      	b.n	8004bb6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685c      	ldr	r4, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b88:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff ff88 	bl	8004aa6 <makeFreeRtosPriority>
 8004b96:	4602      	mov	r2, r0
 8004b98:	f107 030c 	add.w	r3, r7, #12
 8004b9c:	9301      	str	r3, [sp, #4]
 8004b9e:	9200      	str	r2, [sp, #0]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	4632      	mov	r2, r6
 8004ba4:	4629      	mov	r1, r5
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	f001 fb65 	bl	8006276 <xTaskCreate>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d001      	beq.n	8004bb6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	e000      	b.n	8004bb8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004bc0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <osDelay+0x16>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	e000      	b.n	8004bd8 <osDelay+0x18>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f001 fc99 	bl	8006510 <vTaskDelay>
  
  return osOK;
 8004bde:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d007      	beq.n	8004c08 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	2001      	movs	r0, #1
 8004c00:	f000 fc7d 	bl	80054fe <xQueueCreateMutexStatic>
 8004c04:	4603      	mov	r3, r0
 8004c06:	e003      	b.n	8004c10 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004c08:	2001      	movs	r0, #1
 8004c0a:	f000 fc60 	bl	80054ce <xQueueCreateMutex>
 8004c0e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004c22:	2300      	movs	r3, #0
 8004c24:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <osMutexWait+0x18>
    return osErrorParameter;
 8004c2c:	2380      	movs	r3, #128	; 0x80
 8004c2e:	e03a      	b.n	8004ca6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3a:	d103      	bne.n	8004c44 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	e009      	b.n	8004c58 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d006      	beq.n	8004c58 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <osMutexWait+0x40>
      ticks = 1;
 8004c54:	2301      	movs	r3, #1
 8004c56:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004c58:	f7ff ff3d 	bl	8004ad6 <inHandlerMode>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d017      	beq.n	8004c92 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004c62:	f107 0308 	add.w	r3, r7, #8
 8004c66:	461a      	mov	r2, r3
 8004c68:	2100      	movs	r1, #0
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f001 f874 	bl	8005d58 <xQueueReceiveFromISR>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d001      	beq.n	8004c7a <osMutexWait+0x62>
      return osErrorOS;
 8004c76:	23ff      	movs	r3, #255	; 0xff
 8004c78:	e015      	b.n	8004ca6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d011      	beq.n	8004ca4 <osMutexWait+0x8c>
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <osMutexWait+0x98>)
 8004c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	e008      	b.n	8004ca4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004c92:	68f9      	ldr	r1, [r7, #12]
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 ff53 	bl	8005b40 <xQueueSemaphoreTake>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d001      	beq.n	8004ca4 <osMutexWait+0x8c>
    return osErrorOS;
 8004ca0:	23ff      	movs	r3, #255	; 0xff
 8004ca2:	e000      	b.n	8004ca6 <osMutexWait+0x8e>
  }
  
  return osOK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	e000ed04 	.word	0xe000ed04

08004cb4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004cc4:	f7ff ff07 	bl	8004ad6 <inHandlerMode>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d016      	beq.n	8004cfc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004cce:	f107 0308 	add.w	r3, r7, #8
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fdc6 	bl	8005866 <xQueueGiveFromISR>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d001      	beq.n	8004ce4 <osMutexRelease+0x30>
      return osErrorOS;
 8004ce0:	23ff      	movs	r3, #255	; 0xff
 8004ce2:	e017      	b.n	8004d14 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d013      	beq.n	8004d12 <osMutexRelease+0x5e>
 8004cea:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <osMutexRelease+0x68>)
 8004cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	e00a      	b.n	8004d12 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	2200      	movs	r2, #0
 8004d00:	2100      	movs	r1, #0
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 fc16 	bl	8005534 <xQueueGenericSend>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d001      	beq.n	8004d12 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004d0e:	23ff      	movs	r3, #255	; 0xff
 8004d10:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004d12:	68fb      	ldr	r3, [r7, #12]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	e000ed04 	.word	0xe000ed04

08004d20 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00f      	beq.n	8004d52 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d10a      	bne.n	8004d4e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2203      	movs	r2, #3
 8004d3e:	9200      	str	r2, [sp, #0]
 8004d40:	2200      	movs	r2, #0
 8004d42:	2100      	movs	r1, #0
 8004d44:	2001      	movs	r0, #1
 8004d46:	f000 fad7 	bl	80052f8 <xQueueGenericCreateStatic>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	e016      	b.n	8004d7c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	e014      	b.n	8004d7c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d110      	bne.n	8004d7a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8004d58:	2203      	movs	r2, #3
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	2001      	movs	r0, #1
 8004d5e:	f000 fb43 	bl	80053e8 <xQueueGenericCreate>
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d005      	beq.n	8004d76 <osSemaphoreCreate+0x56>
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	2100      	movs	r1, #0
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 fbdf 	bl	8005534 <xQueueGenericSend>
      return sema;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	e000      	b.n	8004d7c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004d7a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004d98:	2380      	movs	r3, #128	; 0x80
 8004d9a:	e03a      	b.n	8004e12 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da6:	d103      	bne.n	8004db0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004da8:	f04f 33ff 	mov.w	r3, #4294967295
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	e009      	b.n	8004dc4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d006      	beq.n	8004dc4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <osSemaphoreWait+0x40>
      ticks = 1;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004dc4:	f7ff fe87 	bl	8004ad6 <inHandlerMode>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d017      	beq.n	8004dfe <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004dce:	f107 0308 	add.w	r3, r7, #8
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 ffbe 	bl	8005d58 <xQueueReceiveFromISR>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d001      	beq.n	8004de6 <osSemaphoreWait+0x62>
      return osErrorOS;
 8004de2:	23ff      	movs	r3, #255	; 0xff
 8004de4:	e015      	b.n	8004e12 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d011      	beq.n	8004e10 <osSemaphoreWait+0x8c>
 8004dec:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <osSemaphoreWait+0x98>)
 8004dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	e008      	b.n	8004e10 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004dfe:	68f9      	ldr	r1, [r7, #12]
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 fe9d 	bl	8005b40 <xQueueSemaphoreTake>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d001      	beq.n	8004e10 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004e0c:	23ff      	movs	r3, #255	; 0xff
 8004e0e:	e000      	b.n	8004e12 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	e000ed04 	.word	0xe000ed04

08004e20 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004e30:	f7ff fe51 	bl	8004ad6 <inHandlerMode>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d016      	beq.n	8004e68 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004e3a:	f107 0308 	add.w	r3, r7, #8
 8004e3e:	4619      	mov	r1, r3
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fd10 	bl	8005866 <xQueueGiveFromISR>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d001      	beq.n	8004e50 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004e4c:	23ff      	movs	r3, #255	; 0xff
 8004e4e:	e017      	b.n	8004e80 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d013      	beq.n	8004e7e <osSemaphoreRelease+0x5e>
 8004e56:	4b0c      	ldr	r3, [pc, #48]	; (8004e88 <osSemaphoreRelease+0x68>)
 8004e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	e00a      	b.n	8004e7e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004e68:	2300      	movs	r3, #0
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 fb60 	bl	8005534 <xQueueGenericSend>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d001      	beq.n	8004e7e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004e7a:	23ff      	movs	r3, #255	; 0xff
 8004e7c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	e000ed04 	.word	0xe000ed04

08004e8c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004e94:	f7ff fe1f 	bl	8004ad6 <inHandlerMode>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8004e9e:	2382      	movs	r3, #130	; 0x82
 8004ea0:	e003      	b.n	8004eaa <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f001 f814 	bl	8005ed0 <vQueueDelete>

  return osOK; 
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004eb2:	b590      	push	{r4, r7, lr}
 8004eb4:	b085      	sub	sp, #20
 8004eb6:	af02      	add	r7, sp, #8
 8004eb8:	6078      	str	r0, [r7, #4]
 8004eba:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d011      	beq.n	8004ee8 <osMessageCreate+0x36>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00d      	beq.n	8004ee8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6818      	ldr	r0, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6859      	ldr	r1, [r3, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	2400      	movs	r4, #0
 8004ede:	9400      	str	r4, [sp, #0]
 8004ee0:	f000 fa0a 	bl	80052f8 <xQueueGenericCreateStatic>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	e008      	b.n	8004efa <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6818      	ldr	r0, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	f000 fa78 	bl	80053e8 <xQueueGenericCreate>
 8004ef8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd90      	pop	{r4, r7, pc}
	...

08004f04 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004f10:	2300      	movs	r3, #0
 8004f12:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <osMessagePut+0x1e>
    ticks = 1;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004f22:	f7ff fdd8 	bl	8004ad6 <inHandlerMode>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d018      	beq.n	8004f5e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004f2c:	f107 0210 	add.w	r2, r7, #16
 8004f30:	f107 0108 	add.w	r1, r7, #8
 8004f34:	2300      	movs	r3, #0
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 fbfa 	bl	8005730 <xQueueGenericSendFromISR>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d001      	beq.n	8004f46 <osMessagePut+0x42>
      return osErrorOS;
 8004f42:	23ff      	movs	r3, #255	; 0xff
 8004f44:	e018      	b.n	8004f78 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d014      	beq.n	8004f76 <osMessagePut+0x72>
 8004f4c:	4b0c      	ldr	r3, [pc, #48]	; (8004f80 <osMessagePut+0x7c>)
 8004f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	e00b      	b.n	8004f76 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004f5e:	f107 0108 	add.w	r1, r7, #8
 8004f62:	2300      	movs	r3, #0
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 fae4 	bl	8005534 <xQueueGenericSend>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d001      	beq.n	8004f76 <osMessagePut+0x72>
      return osErrorOS;
 8004f72:	23ff      	movs	r3, #255	; 0xff
 8004f74:	e000      	b.n	8004f78 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	e000ed04 	.word	0xe000ed04

08004f84 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004f84:	b590      	push	{r4, r7, lr}
 8004f86:	b08b      	sub	sp, #44	; 0x2c
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004f94:	2300      	movs	r3, #0
 8004f96:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10a      	bne.n	8004fb4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004f9e:	2380      	movs	r3, #128	; 0x80
 8004fa0:	617b      	str	r3, [r7, #20]
    return event;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	461c      	mov	r4, r3
 8004fa6:	f107 0314 	add.w	r3, r7, #20
 8004faa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004fae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004fb2:	e054      	b.n	800505e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc2:	d103      	bne.n	8004fcc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004fca:	e009      	b.n	8004fe0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d006      	beq.n	8004fe0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <osMessageGet+0x5c>
      ticks = 1;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004fe0:	f7ff fd79 	bl	8004ad6 <inHandlerMode>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d01c      	beq.n	8005024 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004fea:	f107 0220 	add.w	r2, r7, #32
 8004fee:	f107 0314 	add.w	r3, r7, #20
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	68b8      	ldr	r0, [r7, #8]
 8004ff8:	f000 feae 	bl	8005d58 <xQueueReceiveFromISR>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d102      	bne.n	8005008 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005002:	2310      	movs	r3, #16
 8005004:	617b      	str	r3, [r7, #20]
 8005006:	e001      	b.n	800500c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005008:	2300      	movs	r3, #0
 800500a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d01d      	beq.n	800504e <osMessageGet+0xca>
 8005012:	4b15      	ldr	r3, [pc, #84]	; (8005068 <osMessageGet+0xe4>)
 8005014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	e014      	b.n	800504e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005024:	f107 0314 	add.w	r3, r7, #20
 8005028:	3304      	adds	r3, #4
 800502a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800502c:	4619      	mov	r1, r3
 800502e:	68b8      	ldr	r0, [r7, #8]
 8005030:	f000 fca6 	bl	8005980 <xQueueReceive>
 8005034:	4603      	mov	r3, r0
 8005036:	2b01      	cmp	r3, #1
 8005038:	d102      	bne.n	8005040 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800503a:	2310      	movs	r3, #16
 800503c:	617b      	str	r3, [r7, #20]
 800503e:	e006      	b.n	800504e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <osMessageGet+0xc6>
 8005046:	2300      	movs	r3, #0
 8005048:	e000      	b.n	800504c <osMessageGet+0xc8>
 800504a:	2340      	movs	r3, #64	; 0x40
 800504c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	461c      	mov	r4, r3
 8005052:	f107 0314 	add.w	r3, r7, #20
 8005056:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800505a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	372c      	adds	r7, #44	; 0x2c
 8005062:	46bd      	mov	sp, r7
 8005064:	bd90      	pop	{r4, r7, pc}
 8005066:	bf00      	nop
 8005068:	e000ed04 	.word	0xe000ed04

0800506c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005074:	f7ff fd2f 	bl	8004ad6 <inHandlerMode>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d004      	beq.n	8005088 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 ff08 	bl	8005e94 <uxQueueMessagesWaitingFromISR>
 8005084:	4603      	mov	r3, r0
 8005086:	e003      	b.n	8005090 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 fee5 	bl	8005e58 <uxQueueMessagesWaiting>
 800508e:	4603      	mov	r3, r0
  }
}
 8005090:	4618      	mov	r0, r3
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80050a0:	f7ff fd19 	bl	8004ad6 <inHandlerMode>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <osMessageDelete+0x16>
    return osErrorISR;
 80050aa:	2382      	movs	r3, #130	; 0x82
 80050ac:	e003      	b.n	80050b6 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 ff0e 	bl	8005ed0 <vQueueDelete>

  return osOK; 
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f103 0208 	add.w	r2, r3, #8
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f04f 32ff 	mov.w	r2, #4294967295
 80050d6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f103 0208 	add.w	r2, r3, #8
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f103 0208 	add.w	r2, r3, #8
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	689a      	ldr	r2, [r3, #8]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	601a      	str	r2, [r3, #0]
}
 8005154:	bf00      	nop
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005176:	d103      	bne.n	8005180 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	e00c      	b.n	800519a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3308      	adds	r3, #8
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	e002      	b.n	800518e <vListInsert+0x2e>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	60fb      	str	r3, [r7, #12]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	429a      	cmp	r2, r3
 8005198:	d2f6      	bcs.n	8005188 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	601a      	str	r2, [r3, #0]
}
 80051c6:	bf00      	nop
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051d2:	b480      	push	{r7}
 80051d4:	b085      	sub	sp, #20
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6892      	ldr	r2, [r2, #8]
 80051e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6852      	ldr	r2, [r2, #4]
 80051f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d103      	bne.n	8005206 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689a      	ldr	r2, [r3, #8]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	1e5a      	subs	r2, r3, #1
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
	...

08005228 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10a      	bne.n	8005252 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800524e:	bf00      	nop
 8005250:	e7fe      	b.n	8005250 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005252:	f002 f917 	bl	8007484 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525e:	68f9      	ldr	r1, [r7, #12]
 8005260:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005262:	fb01 f303 	mul.w	r3, r1, r3
 8005266:	441a      	add	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005282:	3b01      	subs	r3, #1
 8005284:	68f9      	ldr	r1, [r7, #12]
 8005286:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005288:	fb01 f303 	mul.w	r3, r1, r3
 800528c:	441a      	add	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	22ff      	movs	r2, #255	; 0xff
 8005296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	22ff      	movs	r2, #255	; 0xff
 800529e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d114      	bne.n	80052d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d01a      	beq.n	80052e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	3310      	adds	r3, #16
 80052b4:	4618      	mov	r0, r3
 80052b6:	f001 fbd3 	bl	8006a60 <xTaskRemoveFromEventList>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d012      	beq.n	80052e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80052c0:	4b0c      	ldr	r3, [pc, #48]	; (80052f4 <xQueueGenericReset+0xcc>)
 80052c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	e009      	b.n	80052e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	3310      	adds	r3, #16
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff fef1 	bl	80050be <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	3324      	adds	r3, #36	; 0x24
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7ff feec 	bl	80050be <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80052e6:	f002 f8fd 	bl	80074e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80052ea:	2301      	movs	r3, #1
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	e000ed04 	.word	0xe000ed04

080052f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08e      	sub	sp, #56	; 0x38
 80052fc:	af02      	add	r7, sp, #8
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10a      	bne.n	8005322 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800530c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800531e:	bf00      	nop
 8005320:	e7fe      	b.n	8005320 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10a      	bne.n	800533e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532c:	f383 8811 	msr	BASEPRI, r3
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
}
 800533a:	bf00      	nop
 800533c:	e7fe      	b.n	800533c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d002      	beq.n	800534a <xQueueGenericCreateStatic+0x52>
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <xQueueGenericCreateStatic+0x56>
 800534a:	2301      	movs	r3, #1
 800534c:	e000      	b.n	8005350 <xQueueGenericCreateStatic+0x58>
 800534e:	2300      	movs	r3, #0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10a      	bne.n	800536a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	623b      	str	r3, [r7, #32]
}
 8005366:	bf00      	nop
 8005368:	e7fe      	b.n	8005368 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d102      	bne.n	8005376 <xQueueGenericCreateStatic+0x7e>
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <xQueueGenericCreateStatic+0x82>
 8005376:	2301      	movs	r3, #1
 8005378:	e000      	b.n	800537c <xQueueGenericCreateStatic+0x84>
 800537a:	2300      	movs	r3, #0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10a      	bne.n	8005396 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	61fb      	str	r3, [r7, #28]
}
 8005392:	bf00      	nop
 8005394:	e7fe      	b.n	8005394 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005396:	2348      	movs	r3, #72	; 0x48
 8005398:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2b48      	cmp	r3, #72	; 0x48
 800539e:	d00a      	beq.n	80053b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	61bb      	str	r3, [r7, #24]
}
 80053b2:	bf00      	nop
 80053b4:	e7fe      	b.n	80053b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80053b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80053bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00d      	beq.n	80053de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80053c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80053ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	4613      	mov	r3, r2
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	68b9      	ldr	r1, [r7, #8]
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f000 f83f 	bl	800545c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80053de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3730      	adds	r7, #48	; 0x30
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08a      	sub	sp, #40	; 0x28
 80053ec:	af02      	add	r7, sp, #8
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	4613      	mov	r3, r2
 80053f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10a      	bne.n	8005412 <xQueueGenericCreate+0x2a>
	__asm volatile
 80053fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	613b      	str	r3, [r7, #16]
}
 800540e:	bf00      	nop
 8005410:	e7fe      	b.n	8005410 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	fb02 f303 	mul.w	r3, r2, r3
 800541a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	3348      	adds	r3, #72	; 0x48
 8005420:	4618      	mov	r0, r3
 8005422:	f002 f951 	bl	80076c8 <pvPortMalloc>
 8005426:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d011      	beq.n	8005452 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	3348      	adds	r3, #72	; 0x48
 8005436:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005440:	79fa      	ldrb	r2, [r7, #7]
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	4613      	mov	r3, r2
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	68b9      	ldr	r1, [r7, #8]
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f805 	bl	800545c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005452:	69bb      	ldr	r3, [r7, #24]
	}
 8005454:	4618      	mov	r0, r3
 8005456:	3720      	adds	r7, #32
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
 8005468:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d103      	bne.n	8005478 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	69ba      	ldr	r2, [r7, #24]
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	e002      	b.n	800547e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800548a:	2101      	movs	r1, #1
 800548c:	69b8      	ldr	r0, [r7, #24]
 800548e:	f7ff fecb 	bl	8005228 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005492:	bf00      	nop
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800549a:	b580      	push	{r7, lr}
 800549c:	b082      	sub	sp, #8
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00e      	beq.n	80054c6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80054ba:	2300      	movs	r3, #0
 80054bc:	2200      	movs	r2, #0
 80054be:	2100      	movs	r1, #0
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f837 	bl	8005534 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80054c6:	bf00      	nop
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b086      	sub	sp, #24
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	4603      	mov	r3, r0
 80054d6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80054d8:	2301      	movs	r3, #1
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	2300      	movs	r3, #0
 80054de:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80054e0:	79fb      	ldrb	r3, [r7, #7]
 80054e2:	461a      	mov	r2, r3
 80054e4:	6939      	ldr	r1, [r7, #16]
 80054e6:	6978      	ldr	r0, [r7, #20]
 80054e8:	f7ff ff7e 	bl	80053e8 <xQueueGenericCreate>
 80054ec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f7ff ffd3 	bl	800549a <prvInitialiseMutex>

		return xNewQueue;
 80054f4:	68fb      	ldr	r3, [r7, #12]
	}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3718      	adds	r7, #24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b088      	sub	sp, #32
 8005502:	af02      	add	r7, sp, #8
 8005504:	4603      	mov	r3, r0
 8005506:	6039      	str	r1, [r7, #0]
 8005508:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800550a:	2301      	movs	r3, #1
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	2300      	movs	r3, #0
 8005510:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005512:	79fb      	ldrb	r3, [r7, #7]
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2200      	movs	r2, #0
 800551a:	6939      	ldr	r1, [r7, #16]
 800551c:	6978      	ldr	r0, [r7, #20]
 800551e:	f7ff feeb 	bl	80052f8 <xQueueGenericCreateStatic>
 8005522:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f7ff ffb8 	bl	800549a <prvInitialiseMutex>

		return xNewQueue;
 800552a:	68fb      	ldr	r3, [r7, #12]
	}
 800552c:	4618      	mov	r0, r3
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b08e      	sub	sp, #56	; 0x38
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
 8005540:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005542:	2300      	movs	r3, #0
 8005544:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10a      	bne.n	8005566 <xQueueGenericSend+0x32>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005562:	bf00      	nop
 8005564:	e7fe      	b.n	8005564 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d103      	bne.n	8005574 <xQueueGenericSend+0x40>
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <xQueueGenericSend+0x44>
 8005574:	2301      	movs	r3, #1
 8005576:	e000      	b.n	800557a <xQueueGenericSend+0x46>
 8005578:	2300      	movs	r3, #0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10a      	bne.n	8005594 <xQueueGenericSend+0x60>
	__asm volatile
 800557e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005590:	bf00      	nop
 8005592:	e7fe      	b.n	8005592 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b02      	cmp	r3, #2
 8005598:	d103      	bne.n	80055a2 <xQueueGenericSend+0x6e>
 800559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d101      	bne.n	80055a6 <xQueueGenericSend+0x72>
 80055a2:	2301      	movs	r3, #1
 80055a4:	e000      	b.n	80055a8 <xQueueGenericSend+0x74>
 80055a6:	2300      	movs	r3, #0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10a      	bne.n	80055c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	623b      	str	r3, [r7, #32]
}
 80055be:	bf00      	nop
 80055c0:	e7fe      	b.n	80055c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055c2:	f001 fc0d 	bl	8006de0 <xTaskGetSchedulerState>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d102      	bne.n	80055d2 <xQueueGenericSend+0x9e>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <xQueueGenericSend+0xa2>
 80055d2:	2301      	movs	r3, #1
 80055d4:	e000      	b.n	80055d8 <xQueueGenericSend+0xa4>
 80055d6:	2300      	movs	r3, #0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10a      	bne.n	80055f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	61fb      	str	r3, [r7, #28]
}
 80055ee:	bf00      	nop
 80055f0:	e7fe      	b.n	80055f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055f2:	f001 ff47 	bl	8007484 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055fe:	429a      	cmp	r2, r3
 8005600:	d302      	bcc.n	8005608 <xQueueGenericSend+0xd4>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b02      	cmp	r3, #2
 8005606:	d129      	bne.n	800565c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	68b9      	ldr	r1, [r7, #8]
 800560c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800560e:	f000 fc9a 	bl	8005f46 <prvCopyDataToQueue>
 8005612:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	2b00      	cmp	r3, #0
 800561a:	d010      	beq.n	800563e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800561c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561e:	3324      	adds	r3, #36	; 0x24
 8005620:	4618      	mov	r0, r3
 8005622:	f001 fa1d 	bl	8006a60 <xTaskRemoveFromEventList>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d013      	beq.n	8005654 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800562c:	4b3f      	ldr	r3, [pc, #252]	; (800572c <xQueueGenericSend+0x1f8>)
 800562e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	f3bf 8f4f 	dsb	sy
 8005638:	f3bf 8f6f 	isb	sy
 800563c:	e00a      	b.n	8005654 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800563e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005640:	2b00      	cmp	r3, #0
 8005642:	d007      	beq.n	8005654 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005644:	4b39      	ldr	r3, [pc, #228]	; (800572c <xQueueGenericSend+0x1f8>)
 8005646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005654:	f001 ff46 	bl	80074e4 <vPortExitCritical>
				return pdPASS;
 8005658:	2301      	movs	r3, #1
 800565a:	e063      	b.n	8005724 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d103      	bne.n	800566a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005662:	f001 ff3f 	bl	80074e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005666:	2300      	movs	r3, #0
 8005668:	e05c      	b.n	8005724 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800566a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566c:	2b00      	cmp	r3, #0
 800566e:	d106      	bne.n	800567e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005670:	f107 0314 	add.w	r3, r7, #20
 8005674:	4618      	mov	r0, r3
 8005676:	f001 fa55 	bl	8006b24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800567a:	2301      	movs	r3, #1
 800567c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800567e:	f001 ff31 	bl	80074e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005682:	f000 ffe3 	bl	800664c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005686:	f001 fefd 	bl	8007484 <vPortEnterCritical>
 800568a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005690:	b25b      	sxtb	r3, r3
 8005692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005696:	d103      	bne.n	80056a0 <xQueueGenericSend+0x16c>
 8005698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056a6:	b25b      	sxtb	r3, r3
 80056a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ac:	d103      	bne.n	80056b6 <xQueueGenericSend+0x182>
 80056ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056b6:	f001 ff15 	bl	80074e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056ba:	1d3a      	adds	r2, r7, #4
 80056bc:	f107 0314 	add.w	r3, r7, #20
 80056c0:	4611      	mov	r1, r2
 80056c2:	4618      	mov	r0, r3
 80056c4:	f001 fa44 	bl	8006b50 <xTaskCheckForTimeOut>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d124      	bne.n	8005718 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80056ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056d0:	f000 fd31 	bl	8006136 <prvIsQueueFull>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d018      	beq.n	800570c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80056da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056dc:	3310      	adds	r3, #16
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	4611      	mov	r1, r2
 80056e2:	4618      	mov	r0, r3
 80056e4:	f001 f998 	bl	8006a18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80056e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056ea:	f000 fcbc 	bl	8006066 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80056ee:	f000 ffbb 	bl	8006668 <xTaskResumeAll>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f47f af7c 	bne.w	80055f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80056fa:	4b0c      	ldr	r3, [pc, #48]	; (800572c <xQueueGenericSend+0x1f8>)
 80056fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	e772      	b.n	80055f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800570c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800570e:	f000 fcaa 	bl	8006066 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005712:	f000 ffa9 	bl	8006668 <xTaskResumeAll>
 8005716:	e76c      	b.n	80055f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800571a:	f000 fca4 	bl	8006066 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800571e:	f000 ffa3 	bl	8006668 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005722:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005724:	4618      	mov	r0, r3
 8005726:	3738      	adds	r7, #56	; 0x38
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	e000ed04 	.word	0xe000ed04

08005730 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b090      	sub	sp, #64	; 0x40
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
 800573c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10a      	bne.n	800575e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800575a:	bf00      	nop
 800575c:	e7fe      	b.n	800575c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d103      	bne.n	800576c <xQueueGenericSendFromISR+0x3c>
 8005764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <xQueueGenericSendFromISR+0x40>
 800576c:	2301      	movs	r3, #1
 800576e:	e000      	b.n	8005772 <xQueueGenericSendFromISR+0x42>
 8005770:	2300      	movs	r3, #0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10a      	bne.n	800578c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577a:	f383 8811 	msr	BASEPRI, r3
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005788:	bf00      	nop
 800578a:	e7fe      	b.n	800578a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	2b02      	cmp	r3, #2
 8005790:	d103      	bne.n	800579a <xQueueGenericSendFromISR+0x6a>
 8005792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005796:	2b01      	cmp	r3, #1
 8005798:	d101      	bne.n	800579e <xQueueGenericSendFromISR+0x6e>
 800579a:	2301      	movs	r3, #1
 800579c:	e000      	b.n	80057a0 <xQueueGenericSendFromISR+0x70>
 800579e:	2300      	movs	r3, #0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10a      	bne.n	80057ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80057a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	623b      	str	r3, [r7, #32]
}
 80057b6:	bf00      	nop
 80057b8:	e7fe      	b.n	80057b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057ba:	f001 ff45 	bl	8007648 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80057be:	f3ef 8211 	mrs	r2, BASEPRI
 80057c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	61fa      	str	r2, [r7, #28]
 80057d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80057d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d302      	bcc.n	80057ec <xQueueGenericSendFromISR+0xbc>
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d12f      	bne.n	800584c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80057ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	68b9      	ldr	r1, [r7, #8]
 8005800:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005802:	f000 fba0 	bl	8005f46 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005806:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800580a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580e:	d112      	bne.n	8005836 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	2b00      	cmp	r3, #0
 8005816:	d016      	beq.n	8005846 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581a:	3324      	adds	r3, #36	; 0x24
 800581c:	4618      	mov	r0, r3
 800581e:	f001 f91f 	bl	8006a60 <xTaskRemoveFromEventList>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00e      	beq.n	8005846 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00b      	beq.n	8005846 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	e007      	b.n	8005846 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005836:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800583a:	3301      	adds	r3, #1
 800583c:	b2db      	uxtb	r3, r3
 800583e:	b25a      	sxtb	r2, r3
 8005840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005846:	2301      	movs	r3, #1
 8005848:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800584a:	e001      	b.n	8005850 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800584c:	2300      	movs	r3, #0
 800584e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005852:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800585a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800585c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800585e:	4618      	mov	r0, r3
 8005860:	3740      	adds	r7, #64	; 0x40
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b08e      	sub	sp, #56	; 0x38
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
 800586e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10a      	bne.n	8005890 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800587a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587e:	f383 8811 	msr	BASEPRI, r3
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	623b      	str	r3, [r7, #32]
}
 800588c:	bf00      	nop
 800588e:	e7fe      	b.n	800588e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00a      	beq.n	80058ae <xQueueGiveFromISR+0x48>
	__asm volatile
 8005898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589c:	f383 8811 	msr	BASEPRI, r3
 80058a0:	f3bf 8f6f 	isb	sy
 80058a4:	f3bf 8f4f 	dsb	sy
 80058a8:	61fb      	str	r3, [r7, #28]
}
 80058aa:	bf00      	nop
 80058ac:	e7fe      	b.n	80058ac <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80058ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d103      	bne.n	80058be <xQueueGiveFromISR+0x58>
 80058b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <xQueueGiveFromISR+0x5c>
 80058be:	2301      	movs	r3, #1
 80058c0:	e000      	b.n	80058c4 <xQueueGiveFromISR+0x5e>
 80058c2:	2300      	movs	r3, #0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10a      	bne.n	80058de <xQueueGiveFromISR+0x78>
	__asm volatile
 80058c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058cc:	f383 8811 	msr	BASEPRI, r3
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	61bb      	str	r3, [r7, #24]
}
 80058da:	bf00      	nop
 80058dc:	e7fe      	b.n	80058dc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058de:	f001 feb3 	bl	8007648 <vPortValidateInterruptPriority>
	__asm volatile
 80058e2:	f3ef 8211 	mrs	r2, BASEPRI
 80058e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ea:	f383 8811 	msr	BASEPRI, r3
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	617a      	str	r2, [r7, #20]
 80058f8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80058fa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005902:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800590a:	429a      	cmp	r2, r3
 800590c:	d22b      	bcs.n	8005966 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800590e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005910:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591a:	1c5a      	adds	r2, r3, #1
 800591c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005920:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005928:	d112      	bne.n	8005950 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	2b00      	cmp	r3, #0
 8005930:	d016      	beq.n	8005960 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005934:	3324      	adds	r3, #36	; 0x24
 8005936:	4618      	mov	r0, r3
 8005938:	f001 f892 	bl	8006a60 <xTaskRemoveFromEventList>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00e      	beq.n	8005960 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00b      	beq.n	8005960 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	2201      	movs	r2, #1
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	e007      	b.n	8005960 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005954:	3301      	adds	r3, #1
 8005956:	b2db      	uxtb	r3, r3
 8005958:	b25a      	sxtb	r2, r3
 800595a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005960:	2301      	movs	r3, #1
 8005962:	637b      	str	r3, [r7, #52]	; 0x34
 8005964:	e001      	b.n	800596a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005966:	2300      	movs	r3, #0
 8005968:	637b      	str	r3, [r7, #52]	; 0x34
 800596a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f383 8811 	msr	BASEPRI, r3
}
 8005974:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005978:	4618      	mov	r0, r3
 800597a:	3738      	adds	r7, #56	; 0x38
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b08c      	sub	sp, #48	; 0x30
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800598c:	2300      	movs	r3, #0
 800598e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10a      	bne.n	80059b0 <xQueueReceive+0x30>
	__asm volatile
 800599a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	623b      	str	r3, [r7, #32]
}
 80059ac:	bf00      	nop
 80059ae:	e7fe      	b.n	80059ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d103      	bne.n	80059be <xQueueReceive+0x3e>
 80059b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <xQueueReceive+0x42>
 80059be:	2301      	movs	r3, #1
 80059c0:	e000      	b.n	80059c4 <xQueueReceive+0x44>
 80059c2:	2300      	movs	r3, #0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10a      	bne.n	80059de <xQueueReceive+0x5e>
	__asm volatile
 80059c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	61fb      	str	r3, [r7, #28]
}
 80059da:	bf00      	nop
 80059dc:	e7fe      	b.n	80059dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059de:	f001 f9ff 	bl	8006de0 <xTaskGetSchedulerState>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d102      	bne.n	80059ee <xQueueReceive+0x6e>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <xQueueReceive+0x72>
 80059ee:	2301      	movs	r3, #1
 80059f0:	e000      	b.n	80059f4 <xQueueReceive+0x74>
 80059f2:	2300      	movs	r3, #0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10a      	bne.n	8005a0e <xQueueReceive+0x8e>
	__asm volatile
 80059f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	61bb      	str	r3, [r7, #24]
}
 8005a0a:	bf00      	nop
 8005a0c:	e7fe      	b.n	8005a0c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a0e:	f001 fd39 	bl	8007484 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a16:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d01f      	beq.n	8005a5e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a1e:	68b9      	ldr	r1, [r7, #8]
 8005a20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a22:	f000 fafa 	bl	800601a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	1e5a      	subs	r2, r3, #1
 8005a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00f      	beq.n	8005a56 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a38:	3310      	adds	r3, #16
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f001 f810 	bl	8006a60 <xTaskRemoveFromEventList>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d007      	beq.n	8005a56 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a46:	4b3d      	ldr	r3, [pc, #244]	; (8005b3c <xQueueReceive+0x1bc>)
 8005a48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a4c:	601a      	str	r2, [r3, #0]
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a56:	f001 fd45 	bl	80074e4 <vPortExitCritical>
				return pdPASS;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e069      	b.n	8005b32 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d103      	bne.n	8005a6c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a64:	f001 fd3e 	bl	80074e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	e062      	b.n	8005b32 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d106      	bne.n	8005a80 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a72:	f107 0310 	add.w	r3, r7, #16
 8005a76:	4618      	mov	r0, r3
 8005a78:	f001 f854 	bl	8006b24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a80:	f001 fd30 	bl	80074e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a84:	f000 fde2 	bl	800664c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a88:	f001 fcfc 	bl	8007484 <vPortEnterCritical>
 8005a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a92:	b25b      	sxtb	r3, r3
 8005a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a98:	d103      	bne.n	8005aa2 <xQueueReceive+0x122>
 8005a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005aa8:	b25b      	sxtb	r3, r3
 8005aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aae:	d103      	bne.n	8005ab8 <xQueueReceive+0x138>
 8005ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ab8:	f001 fd14 	bl	80074e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005abc:	1d3a      	adds	r2, r7, #4
 8005abe:	f107 0310 	add.w	r3, r7, #16
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f001 f843 	bl	8006b50 <xTaskCheckForTimeOut>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d123      	bne.n	8005b18 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ad2:	f000 fb1a 	bl	800610a <prvIsQueueEmpty>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d017      	beq.n	8005b0c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ade:	3324      	adds	r3, #36	; 0x24
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 ff97 	bl	8006a18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005aea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aec:	f000 fabb 	bl	8006066 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005af0:	f000 fdba 	bl	8006668 <xTaskResumeAll>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d189      	bne.n	8005a0e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005afa:	4b10      	ldr	r3, [pc, #64]	; (8005b3c <xQueueReceive+0x1bc>)
 8005afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	f3bf 8f4f 	dsb	sy
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	e780      	b.n	8005a0e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b0e:	f000 faaa 	bl	8006066 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b12:	f000 fda9 	bl	8006668 <xTaskResumeAll>
 8005b16:	e77a      	b.n	8005a0e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b1a:	f000 faa4 	bl	8006066 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b1e:	f000 fda3 	bl	8006668 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b24:	f000 faf1 	bl	800610a <prvIsQueueEmpty>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f43f af6f 	beq.w	8005a0e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3730      	adds	r7, #48	; 0x30
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	e000ed04 	.word	0xe000ed04

08005b40 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08e      	sub	sp, #56	; 0x38
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005b52:	2300      	movs	r3, #0
 8005b54:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10a      	bne.n	8005b72 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	623b      	str	r3, [r7, #32]
}
 8005b6e:	bf00      	nop
 8005b70:	e7fe      	b.n	8005b70 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00a      	beq.n	8005b90 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	61fb      	str	r3, [r7, #28]
}
 8005b8c:	bf00      	nop
 8005b8e:	e7fe      	b.n	8005b8e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b90:	f001 f926 	bl	8006de0 <xTaskGetSchedulerState>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d102      	bne.n	8005ba0 <xQueueSemaphoreTake+0x60>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <xQueueSemaphoreTake+0x64>
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e000      	b.n	8005ba6 <xQueueSemaphoreTake+0x66>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10a      	bne.n	8005bc0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	61bb      	str	r3, [r7, #24]
}
 8005bbc:	bf00      	nop
 8005bbe:	e7fe      	b.n	8005bbe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bc0:	f001 fc60 	bl	8007484 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d024      	beq.n	8005c1a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd2:	1e5a      	subs	r2, r3, #1
 8005bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d104      	bne.n	8005bea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005be0:	f001 faa6 	bl	8007130 <pvTaskIncrementMutexHeldCount>
 8005be4:	4602      	mov	r2, r0
 8005be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00f      	beq.n	8005c12 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf4:	3310      	adds	r3, #16
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 ff32 	bl	8006a60 <xTaskRemoveFromEventList>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d007      	beq.n	8005c12 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c02:	4b54      	ldr	r3, [pc, #336]	; (8005d54 <xQueueSemaphoreTake+0x214>)
 8005c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c12:	f001 fc67 	bl	80074e4 <vPortExitCritical>
				return pdPASS;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e097      	b.n	8005d4a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d111      	bne.n	8005c44 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00a      	beq.n	8005c3c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	617b      	str	r3, [r7, #20]
}
 8005c38:	bf00      	nop
 8005c3a:	e7fe      	b.n	8005c3a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005c3c:	f001 fc52 	bl	80074e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c40:	2300      	movs	r3, #0
 8005c42:	e082      	b.n	8005d4a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d106      	bne.n	8005c58 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c4a:	f107 030c 	add.w	r3, r7, #12
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 ff68 	bl	8006b24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c54:	2301      	movs	r3, #1
 8005c56:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c58:	f001 fc44 	bl	80074e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c5c:	f000 fcf6 	bl	800664c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c60:	f001 fc10 	bl	8007484 <vPortEnterCritical>
 8005c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c6a:	b25b      	sxtb	r3, r3
 8005c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c70:	d103      	bne.n	8005c7a <xQueueSemaphoreTake+0x13a>
 8005c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c80:	b25b      	sxtb	r3, r3
 8005c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c86:	d103      	bne.n	8005c90 <xQueueSemaphoreTake+0x150>
 8005c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c90:	f001 fc28 	bl	80074e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c94:	463a      	mov	r2, r7
 8005c96:	f107 030c 	add.w	r3, r7, #12
 8005c9a:	4611      	mov	r1, r2
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 ff57 	bl	8006b50 <xTaskCheckForTimeOut>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d132      	bne.n	8005d0e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ca8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005caa:	f000 fa2e 	bl	800610a <prvIsQueueEmpty>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d026      	beq.n	8005d02 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d109      	bne.n	8005cd0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005cbc:	f001 fbe2 	bl	8007484 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f001 f8a9 	bl	8006e1c <xTaskPriorityInherit>
 8005cca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005ccc:	f001 fc0a 	bl	80074e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd2:	3324      	adds	r3, #36	; 0x24
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 fe9d 	bl	8006a18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005cde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ce0:	f000 f9c1 	bl	8006066 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ce4:	f000 fcc0 	bl	8006668 <xTaskResumeAll>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f47f af68 	bne.w	8005bc0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005cf0:	4b18      	ldr	r3, [pc, #96]	; (8005d54 <xQueueSemaphoreTake+0x214>)
 8005cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	e75e      	b.n	8005bc0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005d02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d04:	f000 f9af 	bl	8006066 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d08:	f000 fcae 	bl	8006668 <xTaskResumeAll>
 8005d0c:	e758      	b.n	8005bc0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005d0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d10:	f000 f9a9 	bl	8006066 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d14:	f000 fca8 	bl	8006668 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d1a:	f000 f9f6 	bl	800610a <prvIsQueueEmpty>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f43f af4d 	beq.w	8005bc0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00d      	beq.n	8005d48 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005d2c:	f001 fbaa 	bl	8007484 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005d30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d32:	f000 f8f0 	bl	8005f16 <prvGetDisinheritPriorityAfterTimeout>
 8005d36:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f001 f968 	bl	8007014 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005d44:	f001 fbce 	bl	80074e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3738      	adds	r7, #56	; 0x38
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	e000ed04 	.word	0xe000ed04

08005d58 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b08e      	sub	sp, #56	; 0x38
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10a      	bne.n	8005d84 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	623b      	str	r3, [r7, #32]
}
 8005d80:	bf00      	nop
 8005d82:	e7fe      	b.n	8005d82 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d103      	bne.n	8005d92 <xQueueReceiveFromISR+0x3a>
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <xQueueReceiveFromISR+0x3e>
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <xQueueReceiveFromISR+0x40>
 8005d96:	2300      	movs	r3, #0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10a      	bne.n	8005db2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	61fb      	str	r3, [r7, #28]
}
 8005dae:	bf00      	nop
 8005db0:	e7fe      	b.n	8005db0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005db2:	f001 fc49 	bl	8007648 <vPortValidateInterruptPriority>
	__asm volatile
 8005db6:	f3ef 8211 	mrs	r2, BASEPRI
 8005dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbe:	f383 8811 	msr	BASEPRI, r3
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	61ba      	str	r2, [r7, #24]
 8005dcc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005dce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d02f      	beq.n	8005e3e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005de8:	68b9      	ldr	r1, [r7, #8]
 8005dea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dec:	f000 f915 	bl	800601a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df2:	1e5a      	subs	r2, r3, #1
 8005df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005df8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e00:	d112      	bne.n	8005e28 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d016      	beq.n	8005e38 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0c:	3310      	adds	r3, #16
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 fe26 	bl	8006a60 <xTaskRemoveFromEventList>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00e      	beq.n	8005e38 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00b      	beq.n	8005e38 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	e007      	b.n	8005e38 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005e28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	b25a      	sxtb	r2, r3
 8005e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e3c:	e001      	b.n	8005e42 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	637b      	str	r3, [r7, #52]	; 0x34
 8005e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e44:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	f383 8811 	msr	BASEPRI, r3
}
 8005e4c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3738      	adds	r7, #56	; 0x38
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10a      	bne.n	8005e7c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8005e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6a:	f383 8811 	msr	BASEPRI, r3
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f3bf 8f4f 	dsb	sy
 8005e76:	60bb      	str	r3, [r7, #8]
}
 8005e78:	bf00      	nop
 8005e7a:	e7fe      	b.n	8005e7a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005e7c:	f001 fb02 	bl	8007484 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e84:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005e86:	f001 fb2d 	bl	80074e4 <vPortExitCritical>

	return uxReturn;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10a      	bne.n	8005ebc <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8005ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	60fb      	str	r3, [r7, #12]
}
 8005eb8:	bf00      	nop
 8005eba:	e7fe      	b.n	8005eba <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005ec2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	371c      	adds	r7, #28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10a      	bne.n	8005ef8 <vQueueDelete+0x28>
	__asm volatile
 8005ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	60bb      	str	r3, [r7, #8]
}
 8005ef4:	bf00      	nop
 8005ef6:	e7fe      	b.n	8005ef6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f000 f935 	bl	8006168 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d102      	bne.n	8005f0e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f001 fca9 	bl	8007860 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005f0e:	bf00      	nop
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005f16:	b480      	push	{r7}
 8005f18:	b085      	sub	sp, #20
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d006      	beq.n	8005f34 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f1c3 0307 	rsb	r3, r3, #7
 8005f30:	60fb      	str	r3, [r7, #12]
 8005f32:	e001      	b.n	8005f38 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005f34:	2300      	movs	r3, #0
 8005f36:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005f38:	68fb      	ldr	r3, [r7, #12]
	}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b086      	sub	sp, #24
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	60f8      	str	r0, [r7, #12]
 8005f4e:	60b9      	str	r1, [r7, #8]
 8005f50:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f52:	2300      	movs	r3, #0
 8005f54:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10d      	bne.n	8005f80 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d14d      	bne.n	8006008 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f000 ffc9 	bl	8006f08 <xTaskPriorityDisinherit>
 8005f76:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	609a      	str	r2, [r3, #8]
 8005f7e:	e043      	b.n	8006008 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d119      	bne.n	8005fba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6858      	ldr	r0, [r3, #4]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	461a      	mov	r2, r3
 8005f90:	68b9      	ldr	r1, [r7, #8]
 8005f92:	f012 fa1b 	bl	80183cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	685a      	ldr	r2, [r3, #4]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9e:	441a      	add	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d32b      	bcc.n	8006008 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	605a      	str	r2, [r3, #4]
 8005fb8:	e026      	b.n	8006008 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	68d8      	ldr	r0, [r3, #12]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	68b9      	ldr	r1, [r7, #8]
 8005fc6:	f012 fa01 	bl	80183cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	425b      	negs	r3, r3
 8005fd4:	441a      	add	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d207      	bcs.n	8005ff6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	689a      	ldr	r2, [r3, #8]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	425b      	negs	r3, r3
 8005ff0:	441a      	add	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d105      	bne.n	8006008 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d002      	beq.n	8006008 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	3b01      	subs	r3, #1
 8006006:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006010:	697b      	ldr	r3, [r7, #20]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b082      	sub	sp, #8
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006028:	2b00      	cmp	r3, #0
 800602a:	d018      	beq.n	800605e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	68da      	ldr	r2, [r3, #12]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006034:	441a      	add	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68da      	ldr	r2, [r3, #12]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	429a      	cmp	r2, r3
 8006044:	d303      	bcc.n	800604e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68d9      	ldr	r1, [r3, #12]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006056:	461a      	mov	r2, r3
 8006058:	6838      	ldr	r0, [r7, #0]
 800605a:	f012 f9b7 	bl	80183cc <memcpy>
	}
}
 800605e:	bf00      	nop
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b084      	sub	sp, #16
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800606e:	f001 fa09 	bl	8007484 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006078:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800607a:	e011      	b.n	80060a0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006080:	2b00      	cmp	r3, #0
 8006082:	d012      	beq.n	80060aa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	3324      	adds	r3, #36	; 0x24
 8006088:	4618      	mov	r0, r3
 800608a:	f000 fce9 	bl	8006a60 <xTaskRemoveFromEventList>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006094:	f000 fdbe 	bl	8006c14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006098:	7bfb      	ldrb	r3, [r7, #15]
 800609a:	3b01      	subs	r3, #1
 800609c:	b2db      	uxtb	r3, r3
 800609e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	dce9      	bgt.n	800607c <prvUnlockQueue+0x16>
 80060a8:	e000      	b.n	80060ac <prvUnlockQueue+0x46>
					break;
 80060aa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	22ff      	movs	r2, #255	; 0xff
 80060b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80060b4:	f001 fa16 	bl	80074e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80060b8:	f001 f9e4 	bl	8007484 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060c2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060c4:	e011      	b.n	80060ea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d012      	beq.n	80060f4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3310      	adds	r3, #16
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 fcc4 	bl	8006a60 <xTaskRemoveFromEventList>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80060de:	f000 fd99 	bl	8006c14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80060e2:	7bbb      	ldrb	r3, [r7, #14]
 80060e4:	3b01      	subs	r3, #1
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	dce9      	bgt.n	80060c6 <prvUnlockQueue+0x60>
 80060f2:	e000      	b.n	80060f6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80060f4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	22ff      	movs	r2, #255	; 0xff
 80060fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80060fe:	f001 f9f1 	bl	80074e4 <vPortExitCritical>
}
 8006102:	bf00      	nop
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b084      	sub	sp, #16
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006112:	f001 f9b7 	bl	8007484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611a:	2b00      	cmp	r3, #0
 800611c:	d102      	bne.n	8006124 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800611e:	2301      	movs	r3, #1
 8006120:	60fb      	str	r3, [r7, #12]
 8006122:	e001      	b.n	8006128 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006124:	2300      	movs	r3, #0
 8006126:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006128:	f001 f9dc 	bl	80074e4 <vPortExitCritical>

	return xReturn;
 800612c:	68fb      	ldr	r3, [r7, #12]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b084      	sub	sp, #16
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800613e:	f001 f9a1 	bl	8007484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614a:	429a      	cmp	r2, r3
 800614c:	d102      	bne.n	8006154 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800614e:	2301      	movs	r3, #1
 8006150:	60fb      	str	r3, [r7, #12]
 8006152:	e001      	b.n	8006158 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006154:	2300      	movs	r3, #0
 8006156:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006158:	f001 f9c4 	bl	80074e4 <vPortExitCritical>

	return xReturn;
 800615c:	68fb      	ldr	r3, [r7, #12]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
	...

08006168 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006170:	2300      	movs	r3, #0
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	e016      	b.n	80061a4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006176:	4a10      	ldr	r2, [pc, #64]	; (80061b8 <vQueueUnregisterQueue+0x50>)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	4413      	add	r3, r2
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	429a      	cmp	r2, r3
 8006184:	d10b      	bne.n	800619e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006186:	4a0c      	ldr	r2, [pc, #48]	; (80061b8 <vQueueUnregisterQueue+0x50>)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2100      	movs	r1, #0
 800618c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006190:	4a09      	ldr	r2, [pc, #36]	; (80061b8 <vQueueUnregisterQueue+0x50>)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	4413      	add	r3, r2
 8006198:	2200      	movs	r2, #0
 800619a:	605a      	str	r2, [r3, #4]
				break;
 800619c:	e006      	b.n	80061ac <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	3301      	adds	r3, #1
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b07      	cmp	r3, #7
 80061a8:	d9e5      	bls.n	8006176 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80061aa:	bf00      	nop
 80061ac:	bf00      	nop
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	20005004 	.word	0x20005004

080061bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b08e      	sub	sp, #56	; 0x38
 80061c0:	af04      	add	r7, sp, #16
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
 80061c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80061ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10a      	bne.n	80061e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80061d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	623b      	str	r3, [r7, #32]
}
 80061e2:	bf00      	nop
 80061e4:	e7fe      	b.n	80061e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80061e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10a      	bne.n	8006202 <xTaskCreateStatic+0x46>
	__asm volatile
 80061ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f0:	f383 8811 	msr	BASEPRI, r3
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	61fb      	str	r3, [r7, #28]
}
 80061fe:	bf00      	nop
 8006200:	e7fe      	b.n	8006200 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006202:	23a0      	movs	r3, #160	; 0xa0
 8006204:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	2ba0      	cmp	r3, #160	; 0xa0
 800620a:	d00a      	beq.n	8006222 <xTaskCreateStatic+0x66>
	__asm volatile
 800620c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	61bb      	str	r3, [r7, #24]
}
 800621e:	bf00      	nop
 8006220:	e7fe      	b.n	8006220 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006222:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006226:	2b00      	cmp	r3, #0
 8006228:	d01e      	beq.n	8006268 <xTaskCreateStatic+0xac>
 800622a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800622c:	2b00      	cmp	r3, #0
 800622e:	d01b      	beq.n	8006268 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006232:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006238:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	2202      	movs	r2, #2
 800623e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006242:	2300      	movs	r3, #0
 8006244:	9303      	str	r3, [sp, #12]
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	9302      	str	r3, [sp, #8]
 800624a:	f107 0314 	add.w	r3, r7, #20
 800624e:	9301      	str	r3, [sp, #4]
 8006250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	68b9      	ldr	r1, [r7, #8]
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f000 f850 	bl	8006300 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006260:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006262:	f000 f8eb 	bl	800643c <prvAddNewTaskToReadyList>
 8006266:	e001      	b.n	800626c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006268:	2300      	movs	r3, #0
 800626a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800626c:	697b      	ldr	r3, [r7, #20]
	}
 800626e:	4618      	mov	r0, r3
 8006270:	3728      	adds	r7, #40	; 0x28
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006276:	b580      	push	{r7, lr}
 8006278:	b08c      	sub	sp, #48	; 0x30
 800627a:	af04      	add	r7, sp, #16
 800627c:	60f8      	str	r0, [r7, #12]
 800627e:	60b9      	str	r1, [r7, #8]
 8006280:	603b      	str	r3, [r7, #0]
 8006282:	4613      	mov	r3, r2
 8006284:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006286:	88fb      	ldrh	r3, [r7, #6]
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4618      	mov	r0, r3
 800628c:	f001 fa1c 	bl	80076c8 <pvPortMalloc>
 8006290:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00e      	beq.n	80062b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006298:	20a0      	movs	r0, #160	; 0xa0
 800629a:	f001 fa15 	bl	80076c8 <pvPortMalloc>
 800629e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	631a      	str	r2, [r3, #48]	; 0x30
 80062ac:	e005      	b.n	80062ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80062ae:	6978      	ldr	r0, [r7, #20]
 80062b0:	f001 fad6 	bl	8007860 <vPortFree>
 80062b4:	e001      	b.n	80062ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80062b6:	2300      	movs	r3, #0
 80062b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d017      	beq.n	80062f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80062c8:	88fa      	ldrh	r2, [r7, #6]
 80062ca:	2300      	movs	r3, #0
 80062cc:	9303      	str	r3, [sp, #12]
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	9302      	str	r3, [sp, #8]
 80062d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d4:	9301      	str	r3, [sp, #4]
 80062d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	68b9      	ldr	r1, [r7, #8]
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 f80e 	bl	8006300 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062e4:	69f8      	ldr	r0, [r7, #28]
 80062e6:	f000 f8a9 	bl	800643c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80062ea:	2301      	movs	r3, #1
 80062ec:	61bb      	str	r3, [r7, #24]
 80062ee:	e002      	b.n	80062f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80062f0:	f04f 33ff 	mov.w	r3, #4294967295
 80062f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80062f6:	69bb      	ldr	r3, [r7, #24]
	}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3720      	adds	r7, #32
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b088      	sub	sp, #32
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
 800630c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800630e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006318:	3b01      	subs	r3, #1
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	4413      	add	r3, r2
 800631e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	f023 0307 	bic.w	r3, r3, #7
 8006326:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	f003 0307 	and.w	r3, r3, #7
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00a      	beq.n	8006348 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	617b      	str	r3, [r7, #20]
}
 8006344:	bf00      	nop
 8006346:	e7fe      	b.n	8006346 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d01f      	beq.n	800638e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800634e:	2300      	movs	r3, #0
 8006350:	61fb      	str	r3, [r7, #28]
 8006352:	e012      	b.n	800637a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	4413      	add	r3, r2
 800635a:	7819      	ldrb	r1, [r3, #0]
 800635c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	4413      	add	r3, r2
 8006362:	3334      	adds	r3, #52	; 0x34
 8006364:	460a      	mov	r2, r1
 8006366:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	4413      	add	r3, r2
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d006      	beq.n	8006382 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	3301      	adds	r3, #1
 8006378:	61fb      	str	r3, [r7, #28]
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	2b0f      	cmp	r3, #15
 800637e:	d9e9      	bls.n	8006354 <prvInitialiseNewTask+0x54>
 8006380:	e000      	b.n	8006384 <prvInitialiseNewTask+0x84>
			{
				break;
 8006382:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800638c:	e003      	b.n	8006396 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006398:	2b06      	cmp	r3, #6
 800639a:	d901      	bls.n	80063a0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800639c:	2306      	movs	r3, #6
 800639e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80063a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80063a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063aa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80063ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ae:	2200      	movs	r2, #0
 80063b0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80063b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b4:	3304      	adds	r3, #4
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7fe fea1 	bl	80050fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	3318      	adds	r3, #24
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7fe fe9c 	bl	80050fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80063c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ce:	f1c3 0207 	rsb	r2, r3, #7
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80063d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80063dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063de:	2200      	movs	r2, #0
 80063e0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80063ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ee:	334c      	adds	r3, #76	; 0x4c
 80063f0:	224c      	movs	r2, #76	; 0x4c
 80063f2:	2100      	movs	r1, #0
 80063f4:	4618      	mov	r0, r3
 80063f6:	f011 ff00 	bl	80181fa <memset>
 80063fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fc:	4a0c      	ldr	r2, [pc, #48]	; (8006430 <prvInitialiseNewTask+0x130>)
 80063fe:	651a      	str	r2, [r3, #80]	; 0x50
 8006400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006402:	4a0c      	ldr	r2, [pc, #48]	; (8006434 <prvInitialiseNewTask+0x134>)
 8006404:	655a      	str	r2, [r3, #84]	; 0x54
 8006406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006408:	4a0b      	ldr	r2, [pc, #44]	; (8006438 <prvInitialiseNewTask+0x138>)
 800640a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	68f9      	ldr	r1, [r7, #12]
 8006410:	69b8      	ldr	r0, [r7, #24]
 8006412:	f000 ff07 	bl	8007224 <pxPortInitialiseStack>
 8006416:	4602      	mov	r2, r0
 8006418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800641c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641e:	2b00      	cmp	r3, #0
 8006420:	d002      	beq.n	8006428 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006426:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006428:	bf00      	nop
 800642a:	3720      	adds	r7, #32
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	20010ef0 	.word	0x20010ef0
 8006434:	20010f58 	.word	0x20010f58
 8006438:	20010fc0 	.word	0x20010fc0

0800643c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006444:	f001 f81e 	bl	8007484 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006448:	4b2a      	ldr	r3, [pc, #168]	; (80064f4 <prvAddNewTaskToReadyList+0xb8>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	3301      	adds	r3, #1
 800644e:	4a29      	ldr	r2, [pc, #164]	; (80064f4 <prvAddNewTaskToReadyList+0xb8>)
 8006450:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006452:	4b29      	ldr	r3, [pc, #164]	; (80064f8 <prvAddNewTaskToReadyList+0xbc>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d109      	bne.n	800646e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800645a:	4a27      	ldr	r2, [pc, #156]	; (80064f8 <prvAddNewTaskToReadyList+0xbc>)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006460:	4b24      	ldr	r3, [pc, #144]	; (80064f4 <prvAddNewTaskToReadyList+0xb8>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d110      	bne.n	800648a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006468:	f000 fbf8 	bl	8006c5c <prvInitialiseTaskLists>
 800646c:	e00d      	b.n	800648a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800646e:	4b23      	ldr	r3, [pc, #140]	; (80064fc <prvAddNewTaskToReadyList+0xc0>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d109      	bne.n	800648a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006476:	4b20      	ldr	r3, [pc, #128]	; (80064f8 <prvAddNewTaskToReadyList+0xbc>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006480:	429a      	cmp	r2, r3
 8006482:	d802      	bhi.n	800648a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006484:	4a1c      	ldr	r2, [pc, #112]	; (80064f8 <prvAddNewTaskToReadyList+0xbc>)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800648a:	4b1d      	ldr	r3, [pc, #116]	; (8006500 <prvAddNewTaskToReadyList+0xc4>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	3301      	adds	r3, #1
 8006490:	4a1b      	ldr	r2, [pc, #108]	; (8006500 <prvAddNewTaskToReadyList+0xc4>)
 8006492:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006498:	2201      	movs	r2, #1
 800649a:	409a      	lsls	r2, r3
 800649c:	4b19      	ldr	r3, [pc, #100]	; (8006504 <prvAddNewTaskToReadyList+0xc8>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	4a18      	ldr	r2, [pc, #96]	; (8006504 <prvAddNewTaskToReadyList+0xc8>)
 80064a4:	6013      	str	r3, [r2, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064aa:	4613      	mov	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4a15      	ldr	r2, [pc, #84]	; (8006508 <prvAddNewTaskToReadyList+0xcc>)
 80064b4:	441a      	add	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	3304      	adds	r3, #4
 80064ba:	4619      	mov	r1, r3
 80064bc:	4610      	mov	r0, r2
 80064be:	f7fe fe2b 	bl	8005118 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80064c2:	f001 f80f 	bl	80074e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80064c6:	4b0d      	ldr	r3, [pc, #52]	; (80064fc <prvAddNewTaskToReadyList+0xc0>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00e      	beq.n	80064ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064ce:	4b0a      	ldr	r3, [pc, #40]	; (80064f8 <prvAddNewTaskToReadyList+0xbc>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d8:	429a      	cmp	r2, r3
 80064da:	d207      	bcs.n	80064ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80064dc:	4b0b      	ldr	r3, [pc, #44]	; (800650c <prvAddNewTaskToReadyList+0xd0>)
 80064de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064ec:	bf00      	nop
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	20005144 	.word	0x20005144
 80064f8:	20005044 	.word	0x20005044
 80064fc:	20005150 	.word	0x20005150
 8006500:	20005160 	.word	0x20005160
 8006504:	2000514c 	.word	0x2000514c
 8006508:	20005048 	.word	0x20005048
 800650c:	e000ed04 	.word	0xe000ed04

08006510 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006518:	2300      	movs	r3, #0
 800651a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d017      	beq.n	8006552 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006522:	4b13      	ldr	r3, [pc, #76]	; (8006570 <vTaskDelay+0x60>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00a      	beq.n	8006540 <vTaskDelay+0x30>
	__asm volatile
 800652a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652e:	f383 8811 	msr	BASEPRI, r3
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	60bb      	str	r3, [r7, #8]
}
 800653c:	bf00      	nop
 800653e:	e7fe      	b.n	800653e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006540:	f000 f884 	bl	800664c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006544:	2100      	movs	r1, #0
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fe06 	bl	8007158 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800654c:	f000 f88c 	bl	8006668 <xTaskResumeAll>
 8006550:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d107      	bne.n	8006568 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006558:	4b06      	ldr	r3, [pc, #24]	; (8006574 <vTaskDelay+0x64>)
 800655a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006568:	bf00      	nop
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	2000516c 	.word	0x2000516c
 8006574:	e000ed04 	.word	0xe000ed04

08006578 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b08a      	sub	sp, #40	; 0x28
 800657c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800657e:	2300      	movs	r3, #0
 8006580:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006582:	2300      	movs	r3, #0
 8006584:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006586:	463a      	mov	r2, r7
 8006588:	1d39      	adds	r1, r7, #4
 800658a:	f107 0308 	add.w	r3, r7, #8
 800658e:	4618      	mov	r0, r3
 8006590:	f7fa f814 	bl	80005bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006594:	6839      	ldr	r1, [r7, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	9202      	str	r2, [sp, #8]
 800659c:	9301      	str	r3, [sp, #4]
 800659e:	2300      	movs	r3, #0
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	2300      	movs	r3, #0
 80065a4:	460a      	mov	r2, r1
 80065a6:	4921      	ldr	r1, [pc, #132]	; (800662c <vTaskStartScheduler+0xb4>)
 80065a8:	4821      	ldr	r0, [pc, #132]	; (8006630 <vTaskStartScheduler+0xb8>)
 80065aa:	f7ff fe07 	bl	80061bc <xTaskCreateStatic>
 80065ae:	4603      	mov	r3, r0
 80065b0:	4a20      	ldr	r2, [pc, #128]	; (8006634 <vTaskStartScheduler+0xbc>)
 80065b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80065b4:	4b1f      	ldr	r3, [pc, #124]	; (8006634 <vTaskStartScheduler+0xbc>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d002      	beq.n	80065c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80065bc:	2301      	movs	r3, #1
 80065be:	617b      	str	r3, [r7, #20]
 80065c0:	e001      	b.n	80065c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80065c2:	2300      	movs	r3, #0
 80065c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d11b      	bne.n	8006604 <vTaskStartScheduler+0x8c>
	__asm volatile
 80065cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	613b      	str	r3, [r7, #16]
}
 80065de:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80065e0:	4b15      	ldr	r3, [pc, #84]	; (8006638 <vTaskStartScheduler+0xc0>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	334c      	adds	r3, #76	; 0x4c
 80065e6:	4a15      	ldr	r2, [pc, #84]	; (800663c <vTaskStartScheduler+0xc4>)
 80065e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80065ea:	4b15      	ldr	r3, [pc, #84]	; (8006640 <vTaskStartScheduler+0xc8>)
 80065ec:	f04f 32ff 	mov.w	r2, #4294967295
 80065f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065f2:	4b14      	ldr	r3, [pc, #80]	; (8006644 <vTaskStartScheduler+0xcc>)
 80065f4:	2201      	movs	r2, #1
 80065f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065f8:	4b13      	ldr	r3, [pc, #76]	; (8006648 <vTaskStartScheduler+0xd0>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065fe:	f000 fe9f 	bl	8007340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006602:	e00e      	b.n	8006622 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800660a:	d10a      	bne.n	8006622 <vTaskStartScheduler+0xaa>
	__asm volatile
 800660c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006610:	f383 8811 	msr	BASEPRI, r3
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	f3bf 8f4f 	dsb	sy
 800661c:	60fb      	str	r3, [r7, #12]
}
 800661e:	bf00      	nop
 8006620:	e7fe      	b.n	8006620 <vTaskStartScheduler+0xa8>
}
 8006622:	bf00      	nop
 8006624:	3718      	adds	r7, #24
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	08019124 	.word	0x08019124
 8006630:	08006c2d 	.word	0x08006c2d
 8006634:	20005168 	.word	0x20005168
 8006638:	20005044 	.word	0x20005044
 800663c:	2000008c 	.word	0x2000008c
 8006640:	20005164 	.word	0x20005164
 8006644:	20005150 	.word	0x20005150
 8006648:	20005148 	.word	0x20005148

0800664c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800664c:	b480      	push	{r7}
 800664e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006650:	4b04      	ldr	r3, [pc, #16]	; (8006664 <vTaskSuspendAll+0x18>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	3301      	adds	r3, #1
 8006656:	4a03      	ldr	r2, [pc, #12]	; (8006664 <vTaskSuspendAll+0x18>)
 8006658:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800665a:	bf00      	nop
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	2000516c 	.word	0x2000516c

08006668 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800666e:	2300      	movs	r3, #0
 8006670:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006672:	2300      	movs	r3, #0
 8006674:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006676:	4b41      	ldr	r3, [pc, #260]	; (800677c <xTaskResumeAll+0x114>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10a      	bne.n	8006694 <xTaskResumeAll+0x2c>
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	603b      	str	r3, [r7, #0]
}
 8006690:	bf00      	nop
 8006692:	e7fe      	b.n	8006692 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006694:	f000 fef6 	bl	8007484 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006698:	4b38      	ldr	r3, [pc, #224]	; (800677c <xTaskResumeAll+0x114>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	3b01      	subs	r3, #1
 800669e:	4a37      	ldr	r2, [pc, #220]	; (800677c <xTaskResumeAll+0x114>)
 80066a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066a2:	4b36      	ldr	r3, [pc, #216]	; (800677c <xTaskResumeAll+0x114>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d161      	bne.n	800676e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80066aa:	4b35      	ldr	r3, [pc, #212]	; (8006780 <xTaskResumeAll+0x118>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d05d      	beq.n	800676e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066b2:	e02e      	b.n	8006712 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066b4:	4b33      	ldr	r3, [pc, #204]	; (8006784 <xTaskResumeAll+0x11c>)
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	3318      	adds	r3, #24
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fe fd86 	bl	80051d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	3304      	adds	r3, #4
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7fe fd81 	bl	80051d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d4:	2201      	movs	r2, #1
 80066d6:	409a      	lsls	r2, r3
 80066d8:	4b2b      	ldr	r3, [pc, #172]	; (8006788 <xTaskResumeAll+0x120>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4313      	orrs	r3, r2
 80066de:	4a2a      	ldr	r2, [pc, #168]	; (8006788 <xTaskResumeAll+0x120>)
 80066e0:	6013      	str	r3, [r2, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e6:	4613      	mov	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4413      	add	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4a27      	ldr	r2, [pc, #156]	; (800678c <xTaskResumeAll+0x124>)
 80066f0:	441a      	add	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	3304      	adds	r3, #4
 80066f6:	4619      	mov	r1, r3
 80066f8:	4610      	mov	r0, r2
 80066fa:	f7fe fd0d 	bl	8005118 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006702:	4b23      	ldr	r3, [pc, #140]	; (8006790 <xTaskResumeAll+0x128>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006708:	429a      	cmp	r2, r3
 800670a:	d302      	bcc.n	8006712 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800670c:	4b21      	ldr	r3, [pc, #132]	; (8006794 <xTaskResumeAll+0x12c>)
 800670e:	2201      	movs	r2, #1
 8006710:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006712:	4b1c      	ldr	r3, [pc, #112]	; (8006784 <xTaskResumeAll+0x11c>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1cc      	bne.n	80066b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006720:	f000 fb3e 	bl	8006da0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006724:	4b1c      	ldr	r3, [pc, #112]	; (8006798 <xTaskResumeAll+0x130>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d010      	beq.n	8006752 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006730:	f000 f858 	bl	80067e4 <xTaskIncrementTick>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d002      	beq.n	8006740 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800673a:	4b16      	ldr	r3, [pc, #88]	; (8006794 <xTaskResumeAll+0x12c>)
 800673c:	2201      	movs	r2, #1
 800673e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3b01      	subs	r3, #1
 8006744:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1f1      	bne.n	8006730 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800674c:	4b12      	ldr	r3, [pc, #72]	; (8006798 <xTaskResumeAll+0x130>)
 800674e:	2200      	movs	r2, #0
 8006750:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006752:	4b10      	ldr	r3, [pc, #64]	; (8006794 <xTaskResumeAll+0x12c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d009      	beq.n	800676e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800675a:	2301      	movs	r3, #1
 800675c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800675e:	4b0f      	ldr	r3, [pc, #60]	; (800679c <xTaskResumeAll+0x134>)
 8006760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006764:	601a      	str	r2, [r3, #0]
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800676e:	f000 feb9 	bl	80074e4 <vPortExitCritical>

	return xAlreadyYielded;
 8006772:	68bb      	ldr	r3, [r7, #8]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	2000516c 	.word	0x2000516c
 8006780:	20005144 	.word	0x20005144
 8006784:	20005104 	.word	0x20005104
 8006788:	2000514c 	.word	0x2000514c
 800678c:	20005048 	.word	0x20005048
 8006790:	20005044 	.word	0x20005044
 8006794:	20005158 	.word	0x20005158
 8006798:	20005154 	.word	0x20005154
 800679c:	e000ed04 	.word	0xe000ed04

080067a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80067a6:	4b05      	ldr	r3, [pc, #20]	; (80067bc <xTaskGetTickCount+0x1c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80067ac:	687b      	ldr	r3, [r7, #4]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	20005148 	.word	0x20005148

080067c0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067c6:	f000 ff3f 	bl	8007648 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80067ca:	2300      	movs	r3, #0
 80067cc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80067ce:	4b04      	ldr	r3, [pc, #16]	; (80067e0 <xTaskGetTickCountFromISR+0x20>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067d4:	683b      	ldr	r3, [r7, #0]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20005148 	.word	0x20005148

080067e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80067ea:	2300      	movs	r3, #0
 80067ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067ee:	4b4e      	ldr	r3, [pc, #312]	; (8006928 <xTaskIncrementTick+0x144>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f040 808e 	bne.w	8006914 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80067f8:	4b4c      	ldr	r3, [pc, #304]	; (800692c <xTaskIncrementTick+0x148>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3301      	adds	r3, #1
 80067fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006800:	4a4a      	ldr	r2, [pc, #296]	; (800692c <xTaskIncrementTick+0x148>)
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d120      	bne.n	800684e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800680c:	4b48      	ldr	r3, [pc, #288]	; (8006930 <xTaskIncrementTick+0x14c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00a      	beq.n	800682c <xTaskIncrementTick+0x48>
	__asm volatile
 8006816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681a:	f383 8811 	msr	BASEPRI, r3
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	603b      	str	r3, [r7, #0]
}
 8006828:	bf00      	nop
 800682a:	e7fe      	b.n	800682a <xTaskIncrementTick+0x46>
 800682c:	4b40      	ldr	r3, [pc, #256]	; (8006930 <xTaskIncrementTick+0x14c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	60fb      	str	r3, [r7, #12]
 8006832:	4b40      	ldr	r3, [pc, #256]	; (8006934 <xTaskIncrementTick+0x150>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a3e      	ldr	r2, [pc, #248]	; (8006930 <xTaskIncrementTick+0x14c>)
 8006838:	6013      	str	r3, [r2, #0]
 800683a:	4a3e      	ldr	r2, [pc, #248]	; (8006934 <xTaskIncrementTick+0x150>)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6013      	str	r3, [r2, #0]
 8006840:	4b3d      	ldr	r3, [pc, #244]	; (8006938 <xTaskIncrementTick+0x154>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3301      	adds	r3, #1
 8006846:	4a3c      	ldr	r2, [pc, #240]	; (8006938 <xTaskIncrementTick+0x154>)
 8006848:	6013      	str	r3, [r2, #0]
 800684a:	f000 faa9 	bl	8006da0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800684e:	4b3b      	ldr	r3, [pc, #236]	; (800693c <xTaskIncrementTick+0x158>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	429a      	cmp	r2, r3
 8006856:	d348      	bcc.n	80068ea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006858:	4b35      	ldr	r3, [pc, #212]	; (8006930 <xTaskIncrementTick+0x14c>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d104      	bne.n	800686c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006862:	4b36      	ldr	r3, [pc, #216]	; (800693c <xTaskIncrementTick+0x158>)
 8006864:	f04f 32ff 	mov.w	r2, #4294967295
 8006868:	601a      	str	r2, [r3, #0]
					break;
 800686a:	e03e      	b.n	80068ea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800686c:	4b30      	ldr	r3, [pc, #192]	; (8006930 <xTaskIncrementTick+0x14c>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	429a      	cmp	r2, r3
 8006882:	d203      	bcs.n	800688c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006884:	4a2d      	ldr	r2, [pc, #180]	; (800693c <xTaskIncrementTick+0x158>)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800688a:	e02e      	b.n	80068ea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	3304      	adds	r3, #4
 8006890:	4618      	mov	r0, r3
 8006892:	f7fe fc9e 	bl	80051d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689a:	2b00      	cmp	r3, #0
 800689c:	d004      	beq.n	80068a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	3318      	adds	r3, #24
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7fe fc95 	bl	80051d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ac:	2201      	movs	r2, #1
 80068ae:	409a      	lsls	r2, r3
 80068b0:	4b23      	ldr	r3, [pc, #140]	; (8006940 <xTaskIncrementTick+0x15c>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	4a22      	ldr	r2, [pc, #136]	; (8006940 <xTaskIncrementTick+0x15c>)
 80068b8:	6013      	str	r3, [r2, #0]
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068be:	4613      	mov	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4a1f      	ldr	r2, [pc, #124]	; (8006944 <xTaskIncrementTick+0x160>)
 80068c8:	441a      	add	r2, r3
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	3304      	adds	r3, #4
 80068ce:	4619      	mov	r1, r3
 80068d0:	4610      	mov	r0, r2
 80068d2:	f7fe fc21 	bl	8005118 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068da:	4b1b      	ldr	r3, [pc, #108]	; (8006948 <xTaskIncrementTick+0x164>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d3b9      	bcc.n	8006858 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80068e4:	2301      	movs	r3, #1
 80068e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068e8:	e7b6      	b.n	8006858 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80068ea:	4b17      	ldr	r3, [pc, #92]	; (8006948 <xTaskIncrementTick+0x164>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f0:	4914      	ldr	r1, [pc, #80]	; (8006944 <xTaskIncrementTick+0x160>)
 80068f2:	4613      	mov	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	440b      	add	r3, r1
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d901      	bls.n	8006906 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006902:	2301      	movs	r3, #1
 8006904:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006906:	4b11      	ldr	r3, [pc, #68]	; (800694c <xTaskIncrementTick+0x168>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d007      	beq.n	800691e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800690e:	2301      	movs	r3, #1
 8006910:	617b      	str	r3, [r7, #20]
 8006912:	e004      	b.n	800691e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006914:	4b0e      	ldr	r3, [pc, #56]	; (8006950 <xTaskIncrementTick+0x16c>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	3301      	adds	r3, #1
 800691a:	4a0d      	ldr	r2, [pc, #52]	; (8006950 <xTaskIncrementTick+0x16c>)
 800691c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800691e:	697b      	ldr	r3, [r7, #20]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3718      	adds	r7, #24
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	2000516c 	.word	0x2000516c
 800692c:	20005148 	.word	0x20005148
 8006930:	200050fc 	.word	0x200050fc
 8006934:	20005100 	.word	0x20005100
 8006938:	2000515c 	.word	0x2000515c
 800693c:	20005164 	.word	0x20005164
 8006940:	2000514c 	.word	0x2000514c
 8006944:	20005048 	.word	0x20005048
 8006948:	20005044 	.word	0x20005044
 800694c:	20005158 	.word	0x20005158
 8006950:	20005154 	.word	0x20005154

08006954 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006954:	b480      	push	{r7}
 8006956:	b087      	sub	sp, #28
 8006958:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800695a:	4b29      	ldr	r3, [pc, #164]	; (8006a00 <vTaskSwitchContext+0xac>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006962:	4b28      	ldr	r3, [pc, #160]	; (8006a04 <vTaskSwitchContext+0xb0>)
 8006964:	2201      	movs	r2, #1
 8006966:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006968:	e044      	b.n	80069f4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800696a:	4b26      	ldr	r3, [pc, #152]	; (8006a04 <vTaskSwitchContext+0xb0>)
 800696c:	2200      	movs	r2, #0
 800696e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006970:	4b25      	ldr	r3, [pc, #148]	; (8006a08 <vTaskSwitchContext+0xb4>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	fab3 f383 	clz	r3, r3
 800697c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800697e:	7afb      	ldrb	r3, [r7, #11]
 8006980:	f1c3 031f 	rsb	r3, r3, #31
 8006984:	617b      	str	r3, [r7, #20]
 8006986:	4921      	ldr	r1, [pc, #132]	; (8006a0c <vTaskSwitchContext+0xb8>)
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	4613      	mov	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	440b      	add	r3, r1
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10a      	bne.n	80069b0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800699a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	607b      	str	r3, [r7, #4]
}
 80069ac:	bf00      	nop
 80069ae:	e7fe      	b.n	80069ae <vTaskSwitchContext+0x5a>
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	4613      	mov	r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4413      	add	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4a14      	ldr	r2, [pc, #80]	; (8006a0c <vTaskSwitchContext+0xb8>)
 80069bc:	4413      	add	r3, r2
 80069be:	613b      	str	r3, [r7, #16]
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	605a      	str	r2, [r3, #4]
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	3308      	adds	r3, #8
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d104      	bne.n	80069e0 <vTaskSwitchContext+0x8c>
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	605a      	str	r2, [r3, #4]
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	4a0a      	ldr	r2, [pc, #40]	; (8006a10 <vTaskSwitchContext+0xbc>)
 80069e8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80069ea:	4b09      	ldr	r3, [pc, #36]	; (8006a10 <vTaskSwitchContext+0xbc>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	334c      	adds	r3, #76	; 0x4c
 80069f0:	4a08      	ldr	r2, [pc, #32]	; (8006a14 <vTaskSwitchContext+0xc0>)
 80069f2:	6013      	str	r3, [r2, #0]
}
 80069f4:	bf00      	nop
 80069f6:	371c      	adds	r7, #28
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	2000516c 	.word	0x2000516c
 8006a04:	20005158 	.word	0x20005158
 8006a08:	2000514c 	.word	0x2000514c
 8006a0c:	20005048 	.word	0x20005048
 8006a10:	20005044 	.word	0x20005044
 8006a14:	2000008c 	.word	0x2000008c

08006a18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10a      	bne.n	8006a3e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2c:	f383 8811 	msr	BASEPRI, r3
 8006a30:	f3bf 8f6f 	isb	sy
 8006a34:	f3bf 8f4f 	dsb	sy
 8006a38:	60fb      	str	r3, [r7, #12]
}
 8006a3a:	bf00      	nop
 8006a3c:	e7fe      	b.n	8006a3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a3e:	4b07      	ldr	r3, [pc, #28]	; (8006a5c <vTaskPlaceOnEventList+0x44>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	3318      	adds	r3, #24
 8006a44:	4619      	mov	r1, r3
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7fe fb8a 	bl	8005160 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	6838      	ldr	r0, [r7, #0]
 8006a50:	f000 fb82 	bl	8007158 <prvAddCurrentTaskToDelayedList>
}
 8006a54:	bf00      	nop
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	20005044 	.word	0x20005044

08006a60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10a      	bne.n	8006a8c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7a:	f383 8811 	msr	BASEPRI, r3
 8006a7e:	f3bf 8f6f 	isb	sy
 8006a82:	f3bf 8f4f 	dsb	sy
 8006a86:	60fb      	str	r3, [r7, #12]
}
 8006a88:	bf00      	nop
 8006a8a:	e7fe      	b.n	8006a8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	3318      	adds	r3, #24
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fe fb9e 	bl	80051d2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a96:	4b1d      	ldr	r3, [pc, #116]	; (8006b0c <xTaskRemoveFromEventList+0xac>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d11c      	bne.n	8006ad8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	3304      	adds	r3, #4
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7fe fb95 	bl	80051d2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aac:	2201      	movs	r2, #1
 8006aae:	409a      	lsls	r2, r3
 8006ab0:	4b17      	ldr	r3, [pc, #92]	; (8006b10 <xTaskRemoveFromEventList+0xb0>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	4a16      	ldr	r2, [pc, #88]	; (8006b10 <xTaskRemoveFromEventList+0xb0>)
 8006ab8:	6013      	str	r3, [r2, #0]
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006abe:	4613      	mov	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4a13      	ldr	r2, [pc, #76]	; (8006b14 <xTaskRemoveFromEventList+0xb4>)
 8006ac8:	441a      	add	r2, r3
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	3304      	adds	r3, #4
 8006ace:	4619      	mov	r1, r3
 8006ad0:	4610      	mov	r0, r2
 8006ad2:	f7fe fb21 	bl	8005118 <vListInsertEnd>
 8006ad6:	e005      	b.n	8006ae4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	3318      	adds	r3, #24
 8006adc:	4619      	mov	r1, r3
 8006ade:	480e      	ldr	r0, [pc, #56]	; (8006b18 <xTaskRemoveFromEventList+0xb8>)
 8006ae0:	f7fe fb1a 	bl	8005118 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae8:	4b0c      	ldr	r3, [pc, #48]	; (8006b1c <xTaskRemoveFromEventList+0xbc>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d905      	bls.n	8006afe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006af2:	2301      	movs	r3, #1
 8006af4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006af6:	4b0a      	ldr	r3, [pc, #40]	; (8006b20 <xTaskRemoveFromEventList+0xc0>)
 8006af8:	2201      	movs	r2, #1
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	e001      	b.n	8006b02 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006afe:	2300      	movs	r3, #0
 8006b00:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b02:	697b      	ldr	r3, [r7, #20]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3718      	adds	r7, #24
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	2000516c 	.word	0x2000516c
 8006b10:	2000514c 	.word	0x2000514c
 8006b14:	20005048 	.word	0x20005048
 8006b18:	20005104 	.word	0x20005104
 8006b1c:	20005044 	.word	0x20005044
 8006b20:	20005158 	.word	0x20005158

08006b24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b2c:	4b06      	ldr	r3, [pc, #24]	; (8006b48 <vTaskInternalSetTimeOutState+0x24>)
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b34:	4b05      	ldr	r3, [pc, #20]	; (8006b4c <vTaskInternalSetTimeOutState+0x28>)
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	605a      	str	r2, [r3, #4]
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	2000515c 	.word	0x2000515c
 8006b4c:	20005148 	.word	0x20005148

08006b50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b088      	sub	sp, #32
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10a      	bne.n	8006b76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	613b      	str	r3, [r7, #16]
}
 8006b72:	bf00      	nop
 8006b74:	e7fe      	b.n	8006b74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10a      	bne.n	8006b92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	60fb      	str	r3, [r7, #12]
}
 8006b8e:	bf00      	nop
 8006b90:	e7fe      	b.n	8006b90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006b92:	f000 fc77 	bl	8007484 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b96:	4b1d      	ldr	r3, [pc, #116]	; (8006c0c <xTaskCheckForTimeOut+0xbc>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	69ba      	ldr	r2, [r7, #24]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bae:	d102      	bne.n	8006bb6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	61fb      	str	r3, [r7, #28]
 8006bb4:	e023      	b.n	8006bfe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	4b15      	ldr	r3, [pc, #84]	; (8006c10 <xTaskCheckForTimeOut+0xc0>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d007      	beq.n	8006bd2 <xTaskCheckForTimeOut+0x82>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d302      	bcc.n	8006bd2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	61fb      	str	r3, [r7, #28]
 8006bd0:	e015      	b.n	8006bfe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d20b      	bcs.n	8006bf4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	1ad2      	subs	r2, r2, r3
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f7ff ff9b 	bl	8006b24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	61fb      	str	r3, [r7, #28]
 8006bf2:	e004      	b.n	8006bfe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006bfe:	f000 fc71 	bl	80074e4 <vPortExitCritical>

	return xReturn;
 8006c02:	69fb      	ldr	r3, [r7, #28]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3720      	adds	r7, #32
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	20005148 	.word	0x20005148
 8006c10:	2000515c 	.word	0x2000515c

08006c14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c14:	b480      	push	{r7}
 8006c16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c18:	4b03      	ldr	r3, [pc, #12]	; (8006c28 <vTaskMissedYield+0x14>)
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]
}
 8006c1e:	bf00      	nop
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	20005158 	.word	0x20005158

08006c2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c34:	f000 f852 	bl	8006cdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c38:	4b06      	ldr	r3, [pc, #24]	; (8006c54 <prvIdleTask+0x28>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d9f9      	bls.n	8006c34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c40:	4b05      	ldr	r3, [pc, #20]	; (8006c58 <prvIdleTask+0x2c>)
 8006c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c50:	e7f0      	b.n	8006c34 <prvIdleTask+0x8>
 8006c52:	bf00      	nop
 8006c54:	20005048 	.word	0x20005048
 8006c58:	e000ed04 	.word	0xe000ed04

08006c5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c62:	2300      	movs	r3, #0
 8006c64:	607b      	str	r3, [r7, #4]
 8006c66:	e00c      	b.n	8006c82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4a12      	ldr	r2, [pc, #72]	; (8006cbc <prvInitialiseTaskLists+0x60>)
 8006c74:	4413      	add	r3, r2
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7fe fa21 	bl	80050be <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	607b      	str	r3, [r7, #4]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2b06      	cmp	r3, #6
 8006c86:	d9ef      	bls.n	8006c68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c88:	480d      	ldr	r0, [pc, #52]	; (8006cc0 <prvInitialiseTaskLists+0x64>)
 8006c8a:	f7fe fa18 	bl	80050be <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c8e:	480d      	ldr	r0, [pc, #52]	; (8006cc4 <prvInitialiseTaskLists+0x68>)
 8006c90:	f7fe fa15 	bl	80050be <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c94:	480c      	ldr	r0, [pc, #48]	; (8006cc8 <prvInitialiseTaskLists+0x6c>)
 8006c96:	f7fe fa12 	bl	80050be <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c9a:	480c      	ldr	r0, [pc, #48]	; (8006ccc <prvInitialiseTaskLists+0x70>)
 8006c9c:	f7fe fa0f 	bl	80050be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ca0:	480b      	ldr	r0, [pc, #44]	; (8006cd0 <prvInitialiseTaskLists+0x74>)
 8006ca2:	f7fe fa0c 	bl	80050be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ca6:	4b0b      	ldr	r3, [pc, #44]	; (8006cd4 <prvInitialiseTaskLists+0x78>)
 8006ca8:	4a05      	ldr	r2, [pc, #20]	; (8006cc0 <prvInitialiseTaskLists+0x64>)
 8006caa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006cac:	4b0a      	ldr	r3, [pc, #40]	; (8006cd8 <prvInitialiseTaskLists+0x7c>)
 8006cae:	4a05      	ldr	r2, [pc, #20]	; (8006cc4 <prvInitialiseTaskLists+0x68>)
 8006cb0:	601a      	str	r2, [r3, #0]
}
 8006cb2:	bf00      	nop
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	20005048 	.word	0x20005048
 8006cc0:	200050d4 	.word	0x200050d4
 8006cc4:	200050e8 	.word	0x200050e8
 8006cc8:	20005104 	.word	0x20005104
 8006ccc:	20005118 	.word	0x20005118
 8006cd0:	20005130 	.word	0x20005130
 8006cd4:	200050fc 	.word	0x200050fc
 8006cd8:	20005100 	.word	0x20005100

08006cdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ce2:	e019      	b.n	8006d18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ce4:	f000 fbce 	bl	8007484 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ce8:	4b10      	ldr	r3, [pc, #64]	; (8006d2c <prvCheckTasksWaitingTermination+0x50>)
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	3304      	adds	r3, #4
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fe fa6c 	bl	80051d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006cfa:	4b0d      	ldr	r3, [pc, #52]	; (8006d30 <prvCheckTasksWaitingTermination+0x54>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	4a0b      	ldr	r2, [pc, #44]	; (8006d30 <prvCheckTasksWaitingTermination+0x54>)
 8006d02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d04:	4b0b      	ldr	r3, [pc, #44]	; (8006d34 <prvCheckTasksWaitingTermination+0x58>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	4a0a      	ldr	r2, [pc, #40]	; (8006d34 <prvCheckTasksWaitingTermination+0x58>)
 8006d0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d0e:	f000 fbe9 	bl	80074e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f810 	bl	8006d38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d18:	4b06      	ldr	r3, [pc, #24]	; (8006d34 <prvCheckTasksWaitingTermination+0x58>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1e1      	bne.n	8006ce4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d20:	bf00      	nop
 8006d22:	bf00      	nop
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	20005118 	.word	0x20005118
 8006d30:	20005144 	.word	0x20005144
 8006d34:	2000512c 	.word	0x2000512c

08006d38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	334c      	adds	r3, #76	; 0x4c
 8006d44:	4618      	mov	r0, r3
 8006d46:	f011 fa8f 	bl	8018268 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d108      	bne.n	8006d66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f000 fd81 	bl	8007860 <vPortFree>
				vPortFree( pxTCB );
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fd7e 	bl	8007860 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d64:	e018      	b.n	8006d98 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d103      	bne.n	8006d78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fd75 	bl	8007860 <vPortFree>
	}
 8006d76:	e00f      	b.n	8006d98 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d00a      	beq.n	8006d98 <prvDeleteTCB+0x60>
	__asm volatile
 8006d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d86:	f383 8811 	msr	BASEPRI, r3
 8006d8a:	f3bf 8f6f 	isb	sy
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	60fb      	str	r3, [r7, #12]
}
 8006d94:	bf00      	nop
 8006d96:	e7fe      	b.n	8006d96 <prvDeleteTCB+0x5e>
	}
 8006d98:	bf00      	nop
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006da6:	4b0c      	ldr	r3, [pc, #48]	; (8006dd8 <prvResetNextTaskUnblockTime+0x38>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d104      	bne.n	8006dba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006db0:	4b0a      	ldr	r3, [pc, #40]	; (8006ddc <prvResetNextTaskUnblockTime+0x3c>)
 8006db2:	f04f 32ff 	mov.w	r2, #4294967295
 8006db6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006db8:	e008      	b.n	8006dcc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dba:	4b07      	ldr	r3, [pc, #28]	; (8006dd8 <prvResetNextTaskUnblockTime+0x38>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	4a04      	ldr	r2, [pc, #16]	; (8006ddc <prvResetNextTaskUnblockTime+0x3c>)
 8006dca:	6013      	str	r3, [r2, #0]
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	200050fc 	.word	0x200050fc
 8006ddc:	20005164 	.word	0x20005164

08006de0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006de6:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <xTaskGetSchedulerState+0x34>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d102      	bne.n	8006df4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006dee:	2301      	movs	r3, #1
 8006df0:	607b      	str	r3, [r7, #4]
 8006df2:	e008      	b.n	8006e06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006df4:	4b08      	ldr	r3, [pc, #32]	; (8006e18 <xTaskGetSchedulerState+0x38>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d102      	bne.n	8006e02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	607b      	str	r3, [r7, #4]
 8006e00:	e001      	b.n	8006e06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e02:	2300      	movs	r3, #0
 8006e04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e06:	687b      	ldr	r3, [r7, #4]
	}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	20005150 	.word	0x20005150
 8006e18:	2000516c 	.word	0x2000516c

08006e1c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d05e      	beq.n	8006ef0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e36:	4b31      	ldr	r3, [pc, #196]	; (8006efc <xTaskPriorityInherit+0xe0>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d24e      	bcs.n	8006ede <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	db06      	blt.n	8006e56 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e48:	4b2c      	ldr	r3, [pc, #176]	; (8006efc <xTaskPriorityInherit+0xe0>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4e:	f1c3 0207 	rsb	r2, r3, #7
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	6959      	ldr	r1, [r3, #20]
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e5e:	4613      	mov	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4a26      	ldr	r2, [pc, #152]	; (8006f00 <xTaskPriorityInherit+0xe4>)
 8006e68:	4413      	add	r3, r2
 8006e6a:	4299      	cmp	r1, r3
 8006e6c:	d12f      	bne.n	8006ece <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	3304      	adds	r3, #4
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fe f9ad 	bl	80051d2 <uxListRemove>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10a      	bne.n	8006e94 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e82:	2201      	movs	r2, #1
 8006e84:	fa02 f303 	lsl.w	r3, r2, r3
 8006e88:	43da      	mvns	r2, r3
 8006e8a:	4b1e      	ldr	r3, [pc, #120]	; (8006f04 <xTaskPriorityInherit+0xe8>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4013      	ands	r3, r2
 8006e90:	4a1c      	ldr	r2, [pc, #112]	; (8006f04 <xTaskPriorityInherit+0xe8>)
 8006e92:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e94:	4b19      	ldr	r3, [pc, #100]	; (8006efc <xTaskPriorityInherit+0xe0>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	409a      	lsls	r2, r3
 8006ea6:	4b17      	ldr	r3, [pc, #92]	; (8006f04 <xTaskPriorityInherit+0xe8>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	4a15      	ldr	r2, [pc, #84]	; (8006f04 <xTaskPriorityInherit+0xe8>)
 8006eae:	6013      	str	r3, [r2, #0]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	4413      	add	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4a10      	ldr	r2, [pc, #64]	; (8006f00 <xTaskPriorityInherit+0xe4>)
 8006ebe:	441a      	add	r2, r3
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	3304      	adds	r3, #4
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	4610      	mov	r0, r2
 8006ec8:	f7fe f926 	bl	8005118 <vListInsertEnd>
 8006ecc:	e004      	b.n	8006ed8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ece:	4b0b      	ldr	r3, [pc, #44]	; (8006efc <xTaskPriorityInherit+0xe0>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	60fb      	str	r3, [r7, #12]
 8006edc:	e008      	b.n	8006ef0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ee2:	4b06      	ldr	r3, [pc, #24]	; (8006efc <xTaskPriorityInherit+0xe0>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d201      	bcs.n	8006ef0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006eec:	2301      	movs	r3, #1
 8006eee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
	}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	20005044 	.word	0x20005044
 8006f00:	20005048 	.word	0x20005048
 8006f04:	2000514c 	.word	0x2000514c

08006f08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006f14:	2300      	movs	r3, #0
 8006f16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d06e      	beq.n	8006ffc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006f1e:	4b3a      	ldr	r3, [pc, #232]	; (8007008 <xTaskPriorityDisinherit+0x100>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	693a      	ldr	r2, [r7, #16]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d00a      	beq.n	8006f3e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2c:	f383 8811 	msr	BASEPRI, r3
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	60fb      	str	r3, [r7, #12]
}
 8006f3a:	bf00      	nop
 8006f3c:	e7fe      	b.n	8006f3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10a      	bne.n	8006f5c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	60bb      	str	r3, [r7, #8]
}
 8006f58:	bf00      	nop
 8006f5a:	e7fe      	b.n	8006f5a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f60:	1e5a      	subs	r2, r3, #1
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d044      	beq.n	8006ffc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d140      	bne.n	8006ffc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	3304      	adds	r3, #4
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7fe f927 	bl	80051d2 <uxListRemove>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d115      	bne.n	8006fb6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f8e:	491f      	ldr	r1, [pc, #124]	; (800700c <xTaskPriorityDisinherit+0x104>)
 8006f90:	4613      	mov	r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	440b      	add	r3, r1
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10a      	bne.n	8006fb6 <xTaskPriorityDisinherit+0xae>
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006faa:	43da      	mvns	r2, r3
 8006fac:	4b18      	ldr	r3, [pc, #96]	; (8007010 <xTaskPriorityDisinherit+0x108>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	4a17      	ldr	r2, [pc, #92]	; (8007010 <xTaskPriorityDisinherit+0x108>)
 8006fb4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc2:	f1c3 0207 	rsb	r2, r3, #7
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fce:	2201      	movs	r2, #1
 8006fd0:	409a      	lsls	r2, r3
 8006fd2:	4b0f      	ldr	r3, [pc, #60]	; (8007010 <xTaskPriorityDisinherit+0x108>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	4a0d      	ldr	r2, [pc, #52]	; (8007010 <xTaskPriorityDisinherit+0x108>)
 8006fda:	6013      	str	r3, [r2, #0]
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4a08      	ldr	r2, [pc, #32]	; (800700c <xTaskPriorityDisinherit+0x104>)
 8006fea:	441a      	add	r2, r3
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	3304      	adds	r3, #4
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	4610      	mov	r0, r2
 8006ff4:	f7fe f890 	bl	8005118 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ffc:	697b      	ldr	r3, [r7, #20]
	}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3718      	adds	r7, #24
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	20005044 	.word	0x20005044
 800700c:	20005048 	.word	0x20005048
 8007010:	2000514c 	.word	0x2000514c

08007014 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007014:	b580      	push	{r7, lr}
 8007016:	b088      	sub	sp, #32
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007022:	2301      	movs	r3, #1
 8007024:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d077      	beq.n	800711c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10a      	bne.n	800704a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007038:	f383 8811 	msr	BASEPRI, r3
 800703c:	f3bf 8f6f 	isb	sy
 8007040:	f3bf 8f4f 	dsb	sy
 8007044:	60fb      	str	r3, [r7, #12]
}
 8007046:	bf00      	nop
 8007048:	e7fe      	b.n	8007048 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	429a      	cmp	r2, r3
 8007052:	d902      	bls.n	800705a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	61fb      	str	r3, [r7, #28]
 8007058:	e002      	b.n	8007060 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800705e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007064:	69fa      	ldr	r2, [r7, #28]
 8007066:	429a      	cmp	r2, r3
 8007068:	d058      	beq.n	800711c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	429a      	cmp	r2, r3
 8007072:	d153      	bne.n	800711c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007074:	4b2b      	ldr	r3, [pc, #172]	; (8007124 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	69ba      	ldr	r2, [r7, #24]
 800707a:	429a      	cmp	r2, r3
 800707c:	d10a      	bne.n	8007094 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	60bb      	str	r3, [r7, #8]
}
 8007090:	bf00      	nop
 8007092:	e7fe      	b.n	8007092 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007098:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	69fa      	ldr	r2, [r7, #28]
 800709e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	db04      	blt.n	80070b2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	f1c3 0207 	rsb	r2, r3, #7
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	6959      	ldr	r1, [r3, #20]
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	4613      	mov	r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4413      	add	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4a19      	ldr	r2, [pc, #100]	; (8007128 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80070c2:	4413      	add	r3, r2
 80070c4:	4299      	cmp	r1, r3
 80070c6:	d129      	bne.n	800711c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	3304      	adds	r3, #4
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7fe f880 	bl	80051d2 <uxListRemove>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10a      	bne.n	80070ee <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070dc:	2201      	movs	r2, #1
 80070de:	fa02 f303 	lsl.w	r3, r2, r3
 80070e2:	43da      	mvns	r2, r3
 80070e4:	4b11      	ldr	r3, [pc, #68]	; (800712c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4013      	ands	r3, r2
 80070ea:	4a10      	ldr	r2, [pc, #64]	; (800712c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80070ec:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f2:	2201      	movs	r2, #1
 80070f4:	409a      	lsls	r2, r3
 80070f6:	4b0d      	ldr	r3, [pc, #52]	; (800712c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	4a0b      	ldr	r2, [pc, #44]	; (800712c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80070fe:	6013      	str	r3, [r2, #0]
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007104:	4613      	mov	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	4a06      	ldr	r2, [pc, #24]	; (8007128 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800710e:	441a      	add	r2, r3
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	3304      	adds	r3, #4
 8007114:	4619      	mov	r1, r3
 8007116:	4610      	mov	r0, r2
 8007118:	f7fd fffe 	bl	8005118 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800711c:	bf00      	nop
 800711e:	3720      	adds	r7, #32
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	20005044 	.word	0x20005044
 8007128:	20005048 	.word	0x20005048
 800712c:	2000514c 	.word	0x2000514c

08007130 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007130:	b480      	push	{r7}
 8007132:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007134:	4b07      	ldr	r3, [pc, #28]	; (8007154 <pvTaskIncrementMutexHeldCount+0x24>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d004      	beq.n	8007146 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800713c:	4b05      	ldr	r3, [pc, #20]	; (8007154 <pvTaskIncrementMutexHeldCount+0x24>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007142:	3201      	adds	r2, #1
 8007144:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007146:	4b03      	ldr	r3, [pc, #12]	; (8007154 <pvTaskIncrementMutexHeldCount+0x24>)
 8007148:	681b      	ldr	r3, [r3, #0]
	}
 800714a:	4618      	mov	r0, r3
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	20005044 	.word	0x20005044

08007158 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007162:	4b29      	ldr	r3, [pc, #164]	; (8007208 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007168:	4b28      	ldr	r3, [pc, #160]	; (800720c <prvAddCurrentTaskToDelayedList+0xb4>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3304      	adds	r3, #4
 800716e:	4618      	mov	r0, r3
 8007170:	f7fe f82f 	bl	80051d2 <uxListRemove>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10b      	bne.n	8007192 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800717a:	4b24      	ldr	r3, [pc, #144]	; (800720c <prvAddCurrentTaskToDelayedList+0xb4>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007180:	2201      	movs	r2, #1
 8007182:	fa02 f303 	lsl.w	r3, r2, r3
 8007186:	43da      	mvns	r2, r3
 8007188:	4b21      	ldr	r3, [pc, #132]	; (8007210 <prvAddCurrentTaskToDelayedList+0xb8>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4013      	ands	r3, r2
 800718e:	4a20      	ldr	r2, [pc, #128]	; (8007210 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007190:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007198:	d10a      	bne.n	80071b0 <prvAddCurrentTaskToDelayedList+0x58>
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d007      	beq.n	80071b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071a0:	4b1a      	ldr	r3, [pc, #104]	; (800720c <prvAddCurrentTaskToDelayedList+0xb4>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	3304      	adds	r3, #4
 80071a6:	4619      	mov	r1, r3
 80071a8:	481a      	ldr	r0, [pc, #104]	; (8007214 <prvAddCurrentTaskToDelayedList+0xbc>)
 80071aa:	f7fd ffb5 	bl	8005118 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80071ae:	e026      	b.n	80071fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4413      	add	r3, r2
 80071b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80071b8:	4b14      	ldr	r3, [pc, #80]	; (800720c <prvAddCurrentTaskToDelayedList+0xb4>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d209      	bcs.n	80071dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071c8:	4b13      	ldr	r3, [pc, #76]	; (8007218 <prvAddCurrentTaskToDelayedList+0xc0>)
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	4b0f      	ldr	r3, [pc, #60]	; (800720c <prvAddCurrentTaskToDelayedList+0xb4>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	3304      	adds	r3, #4
 80071d2:	4619      	mov	r1, r3
 80071d4:	4610      	mov	r0, r2
 80071d6:	f7fd ffc3 	bl	8005160 <vListInsert>
}
 80071da:	e010      	b.n	80071fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071dc:	4b0f      	ldr	r3, [pc, #60]	; (800721c <prvAddCurrentTaskToDelayedList+0xc4>)
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	4b0a      	ldr	r3, [pc, #40]	; (800720c <prvAddCurrentTaskToDelayedList+0xb4>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	3304      	adds	r3, #4
 80071e6:	4619      	mov	r1, r3
 80071e8:	4610      	mov	r0, r2
 80071ea:	f7fd ffb9 	bl	8005160 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80071ee:	4b0c      	ldr	r3, [pc, #48]	; (8007220 <prvAddCurrentTaskToDelayedList+0xc8>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d202      	bcs.n	80071fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80071f8:	4a09      	ldr	r2, [pc, #36]	; (8007220 <prvAddCurrentTaskToDelayedList+0xc8>)
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	6013      	str	r3, [r2, #0]
}
 80071fe:	bf00      	nop
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	20005148 	.word	0x20005148
 800720c:	20005044 	.word	0x20005044
 8007210:	2000514c 	.word	0x2000514c
 8007214:	20005130 	.word	0x20005130
 8007218:	20005100 	.word	0x20005100
 800721c:	200050fc 	.word	0x200050fc
 8007220:	20005164 	.word	0x20005164

08007224 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	3b04      	subs	r3, #4
 8007234:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800723c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	3b04      	subs	r3, #4
 8007242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	f023 0201 	bic.w	r2, r3, #1
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	3b04      	subs	r3, #4
 8007252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007254:	4a0c      	ldr	r2, [pc, #48]	; (8007288 <pxPortInitialiseStack+0x64>)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	3b14      	subs	r3, #20
 800725e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	3b04      	subs	r3, #4
 800726a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f06f 0202 	mvn.w	r2, #2
 8007272:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	3b20      	subs	r3, #32
 8007278:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800727a:	68fb      	ldr	r3, [r7, #12]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr
 8007288:	0800728d 	.word	0x0800728d

0800728c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007292:	2300      	movs	r3, #0
 8007294:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007296:	4b12      	ldr	r3, [pc, #72]	; (80072e0 <prvTaskExitError+0x54>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800729e:	d00a      	beq.n	80072b6 <prvTaskExitError+0x2a>
	__asm volatile
 80072a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a4:	f383 8811 	msr	BASEPRI, r3
 80072a8:	f3bf 8f6f 	isb	sy
 80072ac:	f3bf 8f4f 	dsb	sy
 80072b0:	60fb      	str	r3, [r7, #12]
}
 80072b2:	bf00      	nop
 80072b4:	e7fe      	b.n	80072b4 <prvTaskExitError+0x28>
	__asm volatile
 80072b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ba:	f383 8811 	msr	BASEPRI, r3
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f3bf 8f4f 	dsb	sy
 80072c6:	60bb      	str	r3, [r7, #8]
}
 80072c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80072ca:	bf00      	nop
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d0fc      	beq.n	80072cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80072d2:	bf00      	nop
 80072d4:	bf00      	nop
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	20000020 	.word	0x20000020
	...

080072f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80072f0:	4b07      	ldr	r3, [pc, #28]	; (8007310 <pxCurrentTCBConst2>)
 80072f2:	6819      	ldr	r1, [r3, #0]
 80072f4:	6808      	ldr	r0, [r1, #0]
 80072f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072fa:	f380 8809 	msr	PSP, r0
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f04f 0000 	mov.w	r0, #0
 8007306:	f380 8811 	msr	BASEPRI, r0
 800730a:	4770      	bx	lr
 800730c:	f3af 8000 	nop.w

08007310 <pxCurrentTCBConst2>:
 8007310:	20005044 	.word	0x20005044
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007314:	bf00      	nop
 8007316:	bf00      	nop

08007318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007318:	4808      	ldr	r0, [pc, #32]	; (800733c <prvPortStartFirstTask+0x24>)
 800731a:	6800      	ldr	r0, [r0, #0]
 800731c:	6800      	ldr	r0, [r0, #0]
 800731e:	f380 8808 	msr	MSP, r0
 8007322:	f04f 0000 	mov.w	r0, #0
 8007326:	f380 8814 	msr	CONTROL, r0
 800732a:	b662      	cpsie	i
 800732c:	b661      	cpsie	f
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	df00      	svc	0
 8007338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800733a:	bf00      	nop
 800733c:	e000ed08 	.word	0xe000ed08

08007340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007346:	4b46      	ldr	r3, [pc, #280]	; (8007460 <xPortStartScheduler+0x120>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a46      	ldr	r2, [pc, #280]	; (8007464 <xPortStartScheduler+0x124>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d10a      	bne.n	8007366 <xPortStartScheduler+0x26>
	__asm volatile
 8007350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	613b      	str	r3, [r7, #16]
}
 8007362:	bf00      	nop
 8007364:	e7fe      	b.n	8007364 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007366:	4b3e      	ldr	r3, [pc, #248]	; (8007460 <xPortStartScheduler+0x120>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a3f      	ldr	r2, [pc, #252]	; (8007468 <xPortStartScheduler+0x128>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d10a      	bne.n	8007386 <xPortStartScheduler+0x46>
	__asm volatile
 8007370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007374:	f383 8811 	msr	BASEPRI, r3
 8007378:	f3bf 8f6f 	isb	sy
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	60fb      	str	r3, [r7, #12]
}
 8007382:	bf00      	nop
 8007384:	e7fe      	b.n	8007384 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007386:	4b39      	ldr	r3, [pc, #228]	; (800746c <xPortStartScheduler+0x12c>)
 8007388:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	b2db      	uxtb	r3, r3
 8007390:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	22ff      	movs	r2, #255	; 0xff
 8007396:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	b2db      	uxtb	r3, r3
 800739e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80073a8:	b2da      	uxtb	r2, r3
 80073aa:	4b31      	ldr	r3, [pc, #196]	; (8007470 <xPortStartScheduler+0x130>)
 80073ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80073ae:	4b31      	ldr	r3, [pc, #196]	; (8007474 <xPortStartScheduler+0x134>)
 80073b0:	2207      	movs	r2, #7
 80073b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073b4:	e009      	b.n	80073ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80073b6:	4b2f      	ldr	r3, [pc, #188]	; (8007474 <xPortStartScheduler+0x134>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	3b01      	subs	r3, #1
 80073bc:	4a2d      	ldr	r2, [pc, #180]	; (8007474 <xPortStartScheduler+0x134>)
 80073be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80073c0:	78fb      	ldrb	r3, [r7, #3]
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	005b      	lsls	r3, r3, #1
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073ca:	78fb      	ldrb	r3, [r7, #3]
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d2:	2b80      	cmp	r3, #128	; 0x80
 80073d4:	d0ef      	beq.n	80073b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80073d6:	4b27      	ldr	r3, [pc, #156]	; (8007474 <xPortStartScheduler+0x134>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f1c3 0307 	rsb	r3, r3, #7
 80073de:	2b04      	cmp	r3, #4
 80073e0:	d00a      	beq.n	80073f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	60bb      	str	r3, [r7, #8]
}
 80073f4:	bf00      	nop
 80073f6:	e7fe      	b.n	80073f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80073f8:	4b1e      	ldr	r3, [pc, #120]	; (8007474 <xPortStartScheduler+0x134>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	021b      	lsls	r3, r3, #8
 80073fe:	4a1d      	ldr	r2, [pc, #116]	; (8007474 <xPortStartScheduler+0x134>)
 8007400:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007402:	4b1c      	ldr	r3, [pc, #112]	; (8007474 <xPortStartScheduler+0x134>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800740a:	4a1a      	ldr	r2, [pc, #104]	; (8007474 <xPortStartScheduler+0x134>)
 800740c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	b2da      	uxtb	r2, r3
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007416:	4b18      	ldr	r3, [pc, #96]	; (8007478 <xPortStartScheduler+0x138>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a17      	ldr	r2, [pc, #92]	; (8007478 <xPortStartScheduler+0x138>)
 800741c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007420:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007422:	4b15      	ldr	r3, [pc, #84]	; (8007478 <xPortStartScheduler+0x138>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a14      	ldr	r2, [pc, #80]	; (8007478 <xPortStartScheduler+0x138>)
 8007428:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800742c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800742e:	f000 f8dd 	bl	80075ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007432:	4b12      	ldr	r3, [pc, #72]	; (800747c <xPortStartScheduler+0x13c>)
 8007434:	2200      	movs	r2, #0
 8007436:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007438:	f000 f8fc 	bl	8007634 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800743c:	4b10      	ldr	r3, [pc, #64]	; (8007480 <xPortStartScheduler+0x140>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a0f      	ldr	r2, [pc, #60]	; (8007480 <xPortStartScheduler+0x140>)
 8007442:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007446:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007448:	f7ff ff66 	bl	8007318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800744c:	f7ff fa82 	bl	8006954 <vTaskSwitchContext>
	prvTaskExitError();
 8007450:	f7ff ff1c 	bl	800728c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3718      	adds	r7, #24
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	e000ed00 	.word	0xe000ed00
 8007464:	410fc271 	.word	0x410fc271
 8007468:	410fc270 	.word	0x410fc270
 800746c:	e000e400 	.word	0xe000e400
 8007470:	20005170 	.word	0x20005170
 8007474:	20005174 	.word	0x20005174
 8007478:	e000ed20 	.word	0xe000ed20
 800747c:	20000020 	.word	0x20000020
 8007480:	e000ef34 	.word	0xe000ef34

08007484 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
	__asm volatile
 800748a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	607b      	str	r3, [r7, #4]
}
 800749c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800749e:	4b0f      	ldr	r3, [pc, #60]	; (80074dc <vPortEnterCritical+0x58>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3301      	adds	r3, #1
 80074a4:	4a0d      	ldr	r2, [pc, #52]	; (80074dc <vPortEnterCritical+0x58>)
 80074a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80074a8:	4b0c      	ldr	r3, [pc, #48]	; (80074dc <vPortEnterCritical+0x58>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d10f      	bne.n	80074d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80074b0:	4b0b      	ldr	r3, [pc, #44]	; (80074e0 <vPortEnterCritical+0x5c>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00a      	beq.n	80074d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80074ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	603b      	str	r3, [r7, #0]
}
 80074cc:	bf00      	nop
 80074ce:	e7fe      	b.n	80074ce <vPortEnterCritical+0x4a>
	}
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	20000020 	.word	0x20000020
 80074e0:	e000ed04 	.word	0xe000ed04

080074e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80074ea:	4b12      	ldr	r3, [pc, #72]	; (8007534 <vPortExitCritical+0x50>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10a      	bne.n	8007508 <vPortExitCritical+0x24>
	__asm volatile
 80074f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	607b      	str	r3, [r7, #4]
}
 8007504:	bf00      	nop
 8007506:	e7fe      	b.n	8007506 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007508:	4b0a      	ldr	r3, [pc, #40]	; (8007534 <vPortExitCritical+0x50>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3b01      	subs	r3, #1
 800750e:	4a09      	ldr	r2, [pc, #36]	; (8007534 <vPortExitCritical+0x50>)
 8007510:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007512:	4b08      	ldr	r3, [pc, #32]	; (8007534 <vPortExitCritical+0x50>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d105      	bne.n	8007526 <vPortExitCritical+0x42>
 800751a:	2300      	movs	r3, #0
 800751c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	f383 8811 	msr	BASEPRI, r3
}
 8007524:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007526:	bf00      	nop
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	20000020 	.word	0x20000020
	...

08007540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007540:	f3ef 8009 	mrs	r0, PSP
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	4b15      	ldr	r3, [pc, #84]	; (80075a0 <pxCurrentTCBConst>)
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	f01e 0f10 	tst.w	lr, #16
 8007550:	bf08      	it	eq
 8007552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800755a:	6010      	str	r0, [r2, #0]
 800755c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007560:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007564:	f380 8811 	msr	BASEPRI, r0
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f7ff f9f0 	bl	8006954 <vTaskSwitchContext>
 8007574:	f04f 0000 	mov.w	r0, #0
 8007578:	f380 8811 	msr	BASEPRI, r0
 800757c:	bc09      	pop	{r0, r3}
 800757e:	6819      	ldr	r1, [r3, #0]
 8007580:	6808      	ldr	r0, [r1, #0]
 8007582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007586:	f01e 0f10 	tst.w	lr, #16
 800758a:	bf08      	it	eq
 800758c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007590:	f380 8809 	msr	PSP, r0
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	f3af 8000 	nop.w

080075a0 <pxCurrentTCBConst>:
 80075a0:	20005044 	.word	0x20005044
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop

080075a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	607b      	str	r3, [r7, #4]
}
 80075c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80075c2:	f7ff f90f 	bl	80067e4 <xTaskIncrementTick>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80075cc:	4b06      	ldr	r3, [pc, #24]	; (80075e8 <SysTick_Handler+0x40>)
 80075ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075d2:	601a      	str	r2, [r3, #0]
 80075d4:	2300      	movs	r3, #0
 80075d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	f383 8811 	msr	BASEPRI, r3
}
 80075de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80075e0:	bf00      	nop
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	e000ed04 	.word	0xe000ed04

080075ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80075ec:	b480      	push	{r7}
 80075ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075f0:	4b0b      	ldr	r3, [pc, #44]	; (8007620 <vPortSetupTimerInterrupt+0x34>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075f6:	4b0b      	ldr	r3, [pc, #44]	; (8007624 <vPortSetupTimerInterrupt+0x38>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075fc:	4b0a      	ldr	r3, [pc, #40]	; (8007628 <vPortSetupTimerInterrupt+0x3c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a0a      	ldr	r2, [pc, #40]	; (800762c <vPortSetupTimerInterrupt+0x40>)
 8007602:	fba2 2303 	umull	r2, r3, r2, r3
 8007606:	099b      	lsrs	r3, r3, #6
 8007608:	4a09      	ldr	r2, [pc, #36]	; (8007630 <vPortSetupTimerInterrupt+0x44>)
 800760a:	3b01      	subs	r3, #1
 800760c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800760e:	4b04      	ldr	r3, [pc, #16]	; (8007620 <vPortSetupTimerInterrupt+0x34>)
 8007610:	2207      	movs	r2, #7
 8007612:	601a      	str	r2, [r3, #0]
}
 8007614:	bf00      	nop
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	e000e010 	.word	0xe000e010
 8007624:	e000e018 	.word	0xe000e018
 8007628:	20000000 	.word	0x20000000
 800762c:	10624dd3 	.word	0x10624dd3
 8007630:	e000e014 	.word	0xe000e014

08007634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007634:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007644 <vPortEnableVFP+0x10>
 8007638:	6801      	ldr	r1, [r0, #0]
 800763a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800763e:	6001      	str	r1, [r0, #0]
 8007640:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007642:	bf00      	nop
 8007644:	e000ed88 	.word	0xe000ed88

08007648 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800764e:	f3ef 8305 	mrs	r3, IPSR
 8007652:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2b0f      	cmp	r3, #15
 8007658:	d914      	bls.n	8007684 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800765a:	4a17      	ldr	r2, [pc, #92]	; (80076b8 <vPortValidateInterruptPriority+0x70>)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4413      	add	r3, r2
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007664:	4b15      	ldr	r3, [pc, #84]	; (80076bc <vPortValidateInterruptPriority+0x74>)
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	7afa      	ldrb	r2, [r7, #11]
 800766a:	429a      	cmp	r2, r3
 800766c:	d20a      	bcs.n	8007684 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800766e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	607b      	str	r3, [r7, #4]
}
 8007680:	bf00      	nop
 8007682:	e7fe      	b.n	8007682 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007684:	4b0e      	ldr	r3, [pc, #56]	; (80076c0 <vPortValidateInterruptPriority+0x78>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800768c:	4b0d      	ldr	r3, [pc, #52]	; (80076c4 <vPortValidateInterruptPriority+0x7c>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	429a      	cmp	r2, r3
 8007692:	d90a      	bls.n	80076aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007698:	f383 8811 	msr	BASEPRI, r3
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	f3bf 8f4f 	dsb	sy
 80076a4:	603b      	str	r3, [r7, #0]
}
 80076a6:	bf00      	nop
 80076a8:	e7fe      	b.n	80076a8 <vPortValidateInterruptPriority+0x60>
	}
 80076aa:	bf00      	nop
 80076ac:	3714      	adds	r7, #20
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	e000e3f0 	.word	0xe000e3f0
 80076bc:	20005170 	.word	0x20005170
 80076c0:	e000ed0c 	.word	0xe000ed0c
 80076c4:	20005174 	.word	0x20005174

080076c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b08a      	sub	sp, #40	; 0x28
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80076d0:	2300      	movs	r3, #0
 80076d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80076d4:	f7fe ffba 	bl	800664c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80076d8:	4b5b      	ldr	r3, [pc, #364]	; (8007848 <pvPortMalloc+0x180>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80076e0:	f000 f920 	bl	8007924 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80076e4:	4b59      	ldr	r3, [pc, #356]	; (800784c <pvPortMalloc+0x184>)
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4013      	ands	r3, r2
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f040 8093 	bne.w	8007818 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d01d      	beq.n	8007734 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80076f8:	2208      	movs	r2, #8
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4413      	add	r3, r2
 80076fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f003 0307 	and.w	r3, r3, #7
 8007706:	2b00      	cmp	r3, #0
 8007708:	d014      	beq.n	8007734 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f023 0307 	bic.w	r3, r3, #7
 8007710:	3308      	adds	r3, #8
 8007712:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f003 0307 	and.w	r3, r3, #7
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00a      	beq.n	8007734 <pvPortMalloc+0x6c>
	__asm volatile
 800771e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	617b      	str	r3, [r7, #20]
}
 8007730:	bf00      	nop
 8007732:	e7fe      	b.n	8007732 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d06e      	beq.n	8007818 <pvPortMalloc+0x150>
 800773a:	4b45      	ldr	r3, [pc, #276]	; (8007850 <pvPortMalloc+0x188>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	429a      	cmp	r2, r3
 8007742:	d869      	bhi.n	8007818 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007744:	4b43      	ldr	r3, [pc, #268]	; (8007854 <pvPortMalloc+0x18c>)
 8007746:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007748:	4b42      	ldr	r3, [pc, #264]	; (8007854 <pvPortMalloc+0x18c>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800774e:	e004      	b.n	800775a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007752:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800775a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	429a      	cmp	r2, r3
 8007762:	d903      	bls.n	800776c <pvPortMalloc+0xa4>
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1f1      	bne.n	8007750 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800776c:	4b36      	ldr	r3, [pc, #216]	; (8007848 <pvPortMalloc+0x180>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007772:	429a      	cmp	r2, r3
 8007774:	d050      	beq.n	8007818 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007776:	6a3b      	ldr	r3, [r7, #32]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2208      	movs	r2, #8
 800777c:	4413      	add	r3, r2
 800777e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	685a      	ldr	r2, [r3, #4]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	1ad2      	subs	r2, r2, r3
 8007790:	2308      	movs	r3, #8
 8007792:	005b      	lsls	r3, r3, #1
 8007794:	429a      	cmp	r2, r3
 8007796:	d91f      	bls.n	80077d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4413      	add	r3, r2
 800779e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	f003 0307 	and.w	r3, r3, #7
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00a      	beq.n	80077c0 <pvPortMalloc+0xf8>
	__asm volatile
 80077aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ae:	f383 8811 	msr	BASEPRI, r3
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	f3bf 8f4f 	dsb	sy
 80077ba:	613b      	str	r3, [r7, #16]
}
 80077bc:	bf00      	nop
 80077be:	e7fe      	b.n	80077be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	1ad2      	subs	r2, r2, r3
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80077cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80077d2:	69b8      	ldr	r0, [r7, #24]
 80077d4:	f000 f908 	bl	80079e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80077d8:	4b1d      	ldr	r3, [pc, #116]	; (8007850 <pvPortMalloc+0x188>)
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	4a1b      	ldr	r2, [pc, #108]	; (8007850 <pvPortMalloc+0x188>)
 80077e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80077e6:	4b1a      	ldr	r3, [pc, #104]	; (8007850 <pvPortMalloc+0x188>)
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	4b1b      	ldr	r3, [pc, #108]	; (8007858 <pvPortMalloc+0x190>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d203      	bcs.n	80077fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80077f2:	4b17      	ldr	r3, [pc, #92]	; (8007850 <pvPortMalloc+0x188>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a18      	ldr	r2, [pc, #96]	; (8007858 <pvPortMalloc+0x190>)
 80077f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	4b13      	ldr	r3, [pc, #76]	; (800784c <pvPortMalloc+0x184>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	431a      	orrs	r2, r3
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	2200      	movs	r2, #0
 800780c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800780e:	4b13      	ldr	r3, [pc, #76]	; (800785c <pvPortMalloc+0x194>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	3301      	adds	r3, #1
 8007814:	4a11      	ldr	r2, [pc, #68]	; (800785c <pvPortMalloc+0x194>)
 8007816:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007818:	f7fe ff26 	bl	8006668 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	f003 0307 	and.w	r3, r3, #7
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00a      	beq.n	800783c <pvPortMalloc+0x174>
	__asm volatile
 8007826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782a:	f383 8811 	msr	BASEPRI, r3
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	60fb      	str	r3, [r7, #12]
}
 8007838:	bf00      	nop
 800783a:	e7fe      	b.n	800783a <pvPortMalloc+0x172>
	return pvReturn;
 800783c:	69fb      	ldr	r3, [r7, #28]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3728      	adds	r7, #40	; 0x28
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	2000d180 	.word	0x2000d180
 800784c:	2000d194 	.word	0x2000d194
 8007850:	2000d184 	.word	0x2000d184
 8007854:	2000d178 	.word	0x2000d178
 8007858:	2000d188 	.word	0x2000d188
 800785c:	2000d18c 	.word	0x2000d18c

08007860 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d04d      	beq.n	800790e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007872:	2308      	movs	r3, #8
 8007874:	425b      	negs	r3, r3
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	4413      	add	r3, r2
 800787a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	685a      	ldr	r2, [r3, #4]
 8007884:	4b24      	ldr	r3, [pc, #144]	; (8007918 <vPortFree+0xb8>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4013      	ands	r3, r2
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10a      	bne.n	80078a4 <vPortFree+0x44>
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	60fb      	str	r3, [r7, #12]
}
 80078a0:	bf00      	nop
 80078a2:	e7fe      	b.n	80078a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00a      	beq.n	80078c2 <vPortFree+0x62>
	__asm volatile
 80078ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	60bb      	str	r3, [r7, #8]
}
 80078be:	bf00      	nop
 80078c0:	e7fe      	b.n	80078c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	685a      	ldr	r2, [r3, #4]
 80078c6:	4b14      	ldr	r3, [pc, #80]	; (8007918 <vPortFree+0xb8>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4013      	ands	r3, r2
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d01e      	beq.n	800790e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d11a      	bne.n	800790e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	4b0e      	ldr	r3, [pc, #56]	; (8007918 <vPortFree+0xb8>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	43db      	mvns	r3, r3
 80078e2:	401a      	ands	r2, r3
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80078e8:	f7fe feb0 	bl	800664c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	685a      	ldr	r2, [r3, #4]
 80078f0:	4b0a      	ldr	r3, [pc, #40]	; (800791c <vPortFree+0xbc>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4413      	add	r3, r2
 80078f6:	4a09      	ldr	r2, [pc, #36]	; (800791c <vPortFree+0xbc>)
 80078f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80078fa:	6938      	ldr	r0, [r7, #16]
 80078fc:	f000 f874 	bl	80079e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007900:	4b07      	ldr	r3, [pc, #28]	; (8007920 <vPortFree+0xc0>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3301      	adds	r3, #1
 8007906:	4a06      	ldr	r2, [pc, #24]	; (8007920 <vPortFree+0xc0>)
 8007908:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800790a:	f7fe fead 	bl	8006668 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800790e:	bf00      	nop
 8007910:	3718      	adds	r7, #24
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	2000d194 	.word	0x2000d194
 800791c:	2000d184 	.word	0x2000d184
 8007920:	2000d190 	.word	0x2000d190

08007924 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800792a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800792e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007930:	4b27      	ldr	r3, [pc, #156]	; (80079d0 <prvHeapInit+0xac>)
 8007932:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f003 0307 	and.w	r3, r3, #7
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00c      	beq.n	8007958 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	3307      	adds	r3, #7
 8007942:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f023 0307 	bic.w	r3, r3, #7
 800794a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	4a1f      	ldr	r2, [pc, #124]	; (80079d0 <prvHeapInit+0xac>)
 8007954:	4413      	add	r3, r2
 8007956:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800795c:	4a1d      	ldr	r2, [pc, #116]	; (80079d4 <prvHeapInit+0xb0>)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007962:	4b1c      	ldr	r3, [pc, #112]	; (80079d4 <prvHeapInit+0xb0>)
 8007964:	2200      	movs	r2, #0
 8007966:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	4413      	add	r3, r2
 800796e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007970:	2208      	movs	r2, #8
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	1a9b      	subs	r3, r3, r2
 8007976:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f023 0307 	bic.w	r3, r3, #7
 800797e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	4a15      	ldr	r2, [pc, #84]	; (80079d8 <prvHeapInit+0xb4>)
 8007984:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007986:	4b14      	ldr	r3, [pc, #80]	; (80079d8 <prvHeapInit+0xb4>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2200      	movs	r2, #0
 800798c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800798e:	4b12      	ldr	r3, [pc, #72]	; (80079d8 <prvHeapInit+0xb4>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2200      	movs	r2, #0
 8007994:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	1ad2      	subs	r2, r2, r3
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80079a4:	4b0c      	ldr	r3, [pc, #48]	; (80079d8 <prvHeapInit+0xb4>)
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	4a0a      	ldr	r2, [pc, #40]	; (80079dc <prvHeapInit+0xb8>)
 80079b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	4a09      	ldr	r2, [pc, #36]	; (80079e0 <prvHeapInit+0xbc>)
 80079ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80079bc:	4b09      	ldr	r3, [pc, #36]	; (80079e4 <prvHeapInit+0xc0>)
 80079be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80079c2:	601a      	str	r2, [r3, #0]
}
 80079c4:	bf00      	nop
 80079c6:	3714      	adds	r7, #20
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr
 80079d0:	20005178 	.word	0x20005178
 80079d4:	2000d178 	.word	0x2000d178
 80079d8:	2000d180 	.word	0x2000d180
 80079dc:	2000d188 	.word	0x2000d188
 80079e0:	2000d184 	.word	0x2000d184
 80079e4:	2000d194 	.word	0x2000d194

080079e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80079f0:	4b28      	ldr	r3, [pc, #160]	; (8007a94 <prvInsertBlockIntoFreeList+0xac>)
 80079f2:	60fb      	str	r3, [r7, #12]
 80079f4:	e002      	b.n	80079fc <prvInsertBlockIntoFreeList+0x14>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	60fb      	str	r3, [r7, #12]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d8f7      	bhi.n	80079f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	68ba      	ldr	r2, [r7, #8]
 8007a10:	4413      	add	r3, r2
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d108      	bne.n	8007a2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	441a      	add	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	441a      	add	r2, r3
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d118      	bne.n	8007a70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	4b15      	ldr	r3, [pc, #84]	; (8007a98 <prvInsertBlockIntoFreeList+0xb0>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d00d      	beq.n	8007a66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	685a      	ldr	r2, [r3, #4]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	441a      	add	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	e008      	b.n	8007a78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a66:	4b0c      	ldr	r3, [pc, #48]	; (8007a98 <prvInsertBlockIntoFreeList+0xb0>)
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	601a      	str	r2, [r3, #0]
 8007a6e:	e003      	b.n	8007a78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d002      	beq.n	8007a86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a86:	bf00      	nop
 8007a88:	3714      	adds	r7, #20
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	2000d178 	.word	0x2000d178
 8007a98:	2000d180 	.word	0x2000d180

08007a9c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	330c      	adds	r3, #12
 8007aac:	461a      	mov	r2, r3
 8007aae:	6839      	ldr	r1, [r7, #0]
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f002 faa3 	bl	8009ffc <tcpip_send_msg_wait_sem>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8007aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d103      	bne.n	8007aca <netconn_apimsg+0x2e>
    return apimsg->err;
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007ac8:	e001      	b.n	8007ace <netconn_apimsg+0x32>
  }
  return err;
 8007aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
	...

08007ad8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b08c      	sub	sp, #48	; 0x30
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	4603      	mov	r3, r0
 8007ae0:	603a      	str	r2, [r7, #0]
 8007ae2:	71fb      	strb	r3, [r7, #7]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007ae8:	79fb      	ldrb	r3, [r7, #7]
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f001 f923 	bl	8008d38 <netconn_alloc>
 8007af2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8007af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d054      	beq.n	8007ba4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8007afa:	79bb      	ldrb	r3, [r7, #6]
 8007afc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8007afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b00:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007b02:	f107 0308 	add.w	r3, r7, #8
 8007b06:	4619      	mov	r1, r3
 8007b08:	4829      	ldr	r0, [pc, #164]	; (8007bb0 <netconn_new_with_proto_and_callback+0xd8>)
 8007b0a:	f7ff ffc7 	bl	8007a9c <netconn_apimsg>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8007b14:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d043      	beq.n	8007ba4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8007b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d005      	beq.n	8007b30 <netconn_new_with_proto_and_callback+0x58>
 8007b24:	4b23      	ldr	r3, [pc, #140]	; (8007bb4 <netconn_new_with_proto_and_callback+0xdc>)
 8007b26:	22a3      	movs	r2, #163	; 0xa3
 8007b28:	4923      	ldr	r1, [pc, #140]	; (8007bb8 <netconn_new_with_proto_and_callback+0xe0>)
 8007b2a:	4824      	ldr	r0, [pc, #144]	; (8007bbc <netconn_new_with_proto_and_callback+0xe4>)
 8007b2c:	f010 fb00 	bl	8018130 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b32:	3310      	adds	r3, #16
 8007b34:	4618      	mov	r0, r3
 8007b36:	f010 f8d4 	bl	8017ce2 <sys_mbox_valid>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d105      	bne.n	8007b4c <netconn_new_with_proto_and_callback+0x74>
 8007b40:	4b1c      	ldr	r3, [pc, #112]	; (8007bb4 <netconn_new_with_proto_and_callback+0xdc>)
 8007b42:	22a4      	movs	r2, #164	; 0xa4
 8007b44:	491e      	ldr	r1, [pc, #120]	; (8007bc0 <netconn_new_with_proto_and_callback+0xe8>)
 8007b46:	481d      	ldr	r0, [pc, #116]	; (8007bbc <netconn_new_with_proto_and_callback+0xe4>)
 8007b48:	f010 faf2 	bl	8018130 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8007b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4e:	3314      	adds	r3, #20
 8007b50:	4618      	mov	r0, r3
 8007b52:	f010 f8c6 	bl	8017ce2 <sys_mbox_valid>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d005      	beq.n	8007b68 <netconn_new_with_proto_and_callback+0x90>
 8007b5c:	4b15      	ldr	r3, [pc, #84]	; (8007bb4 <netconn_new_with_proto_and_callback+0xdc>)
 8007b5e:	22a6      	movs	r2, #166	; 0xa6
 8007b60:	4918      	ldr	r1, [pc, #96]	; (8007bc4 <netconn_new_with_proto_and_callback+0xec>)
 8007b62:	4816      	ldr	r0, [pc, #88]	; (8007bbc <netconn_new_with_proto_and_callback+0xe4>)
 8007b64:	f010 fae4 	bl	8018130 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6a:	330c      	adds	r3, #12
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f010 f949 	bl	8017e04 <sys_sem_valid>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d105      	bne.n	8007b84 <netconn_new_with_proto_and_callback+0xac>
 8007b78:	4b0e      	ldr	r3, [pc, #56]	; (8007bb4 <netconn_new_with_proto_and_callback+0xdc>)
 8007b7a:	22a9      	movs	r2, #169	; 0xa9
 8007b7c:	4912      	ldr	r1, [pc, #72]	; (8007bc8 <netconn_new_with_proto_and_callback+0xf0>)
 8007b7e:	480f      	ldr	r0, [pc, #60]	; (8007bbc <netconn_new_with_proto_and_callback+0xe4>)
 8007b80:	f010 fad6 	bl	8018130 <iprintf>
      sys_sem_free(&conn->op_completed);
 8007b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b86:	330c      	adds	r3, #12
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f010 f92e 	bl	8017dea <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8007b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b90:	3310      	adds	r3, #16
 8007b92:	4618      	mov	r0, r3
 8007b94:	f010 f81e 	bl	8017bd4 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007b98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b9a:	2007      	movs	r0, #7
 8007b9c:	f003 fe2c 	bl	800b7f8 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	e000      	b.n	8007ba6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8007ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3730      	adds	r7, #48	; 0x30
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	08008d0d 	.word	0x08008d0d
 8007bb4:	0801912c 	.word	0x0801912c
 8007bb8:	08019160 	.word	0x08019160
 8007bbc:	08019184 	.word	0x08019184
 8007bc0:	080191ac 	.word	0x080191ac
 8007bc4:	080191c4 	.word	0x080191c4
 8007bc8:	080191e8 	.word	0x080191e8

08007bcc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b08c      	sub	sp, #48	; 0x30
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d101      	bne.n	8007bde <netconn_prepare_delete+0x12>
    return ERR_OK;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	e014      	b.n	8007c08 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007be2:	2329      	movs	r3, #41	; 0x29
 8007be4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8007be6:	f107 030c 	add.w	r3, r7, #12
 8007bea:	4619      	mov	r1, r3
 8007bec:	4808      	ldr	r0, [pc, #32]	; (8007c10 <netconn_prepare_delete+0x44>)
 8007bee:	f7ff ff55 	bl	8007a9c <netconn_apimsg>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8007bf8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d002      	beq.n	8007c06 <netconn_prepare_delete+0x3a>
    return err;
 8007c00:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007c04:	e000      	b.n	8007c08 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3730      	adds	r7, #48	; 0x30
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	08009279 	.word	0x08009279

08007c14 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <netconn_delete+0x12>
    return ERR_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	e00d      	b.n	8007c42 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f7ff ffd0 	bl	8007bcc <netconn_prepare_delete>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8007c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d102      	bne.n	8007c3e <netconn_delete+0x2a>
    netconn_free(conn);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f001 f8eb 	bl	8008e14 <netconn_free>
  }
  return err;
 8007c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
	...

08007c4c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b08e      	sub	sp, #56	; 0x38
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	4613      	mov	r3, r2
 8007c58:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d109      	bne.n	8007c74 <netconn_bind+0x28>
 8007c60:	4b11      	ldr	r3, [pc, #68]	; (8007ca8 <netconn_bind+0x5c>)
 8007c62:	f44f 729c 	mov.w	r2, #312	; 0x138
 8007c66:	4911      	ldr	r1, [pc, #68]	; (8007cac <netconn_bind+0x60>)
 8007c68:	4811      	ldr	r0, [pc, #68]	; (8007cb0 <netconn_bind+0x64>)
 8007c6a:	f010 fa61 	bl	8018130 <iprintf>
 8007c6e:	f06f 030f 	mvn.w	r3, #15
 8007c72:	e015      	b.n	8007ca0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8007c7a:	4b0e      	ldr	r3, [pc, #56]	; (8007cb4 <netconn_bind+0x68>)
 8007c7c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007c86:	88fb      	ldrh	r3, [r7, #6]
 8007c88:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007c8a:	f107 0314 	add.w	r3, r7, #20
 8007c8e:	4619      	mov	r1, r3
 8007c90:	4809      	ldr	r0, [pc, #36]	; (8007cb8 <netconn_bind+0x6c>)
 8007c92:	f7ff ff03 	bl	8007a9c <netconn_apimsg>
 8007c96:	4603      	mov	r3, r0
 8007c98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8007c9c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3738      	adds	r7, #56	; 0x38
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	0801912c 	.word	0x0801912c
 8007cac:	08019264 	.word	0x08019264
 8007cb0:	08019184 	.word	0x08019184
 8007cb4:	08026e3c 	.word	0x08026e3c
 8007cb8:	08009441 	.word	0x08009441

08007cbc <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b08c      	sub	sp, #48	; 0x30
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d109      	bne.n	8007ce2 <netconn_listen_with_backlog+0x26>
 8007cce:	4b0d      	ldr	r3, [pc, #52]	; (8007d04 <netconn_listen_with_backlog+0x48>)
 8007cd0:	f240 12bb 	movw	r2, #443	; 0x1bb
 8007cd4:	490c      	ldr	r1, [pc, #48]	; (8007d08 <netconn_listen_with_backlog+0x4c>)
 8007cd6:	480d      	ldr	r0, [pc, #52]	; (8007d0c <netconn_listen_with_backlog+0x50>)
 8007cd8:	f010 fa2a 	bl	8018130 <iprintf>
 8007cdc:	f06f 030f 	mvn.w	r3, #15
 8007ce0:	e00c      	b.n	8007cfc <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8007ce6:	f107 030c 	add.w	r3, r7, #12
 8007cea:	4619      	mov	r1, r3
 8007cec:	4808      	ldr	r0, [pc, #32]	; (8007d10 <netconn_listen_with_backlog+0x54>)
 8007cee:	f7ff fed5 	bl	8007a9c <netconn_apimsg>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8007cf8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3730      	adds	r7, #48	; 0x30
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	0801912c 	.word	0x0801912c
 8007d08:	080192e4 	.word	0x080192e4
 8007d0c:	08019184 	.word	0x08019184
 8007d10:	080094b5 	.word	0x080094b5

08007d14 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b086      	sub	sp, #24
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d109      	bne.n	8007d38 <netconn_accept+0x24>
 8007d24:	4b3d      	ldr	r3, [pc, #244]	; (8007e1c <netconn_accept+0x108>)
 8007d26:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007d2a:	493d      	ldr	r1, [pc, #244]	; (8007e20 <netconn_accept+0x10c>)
 8007d2c:	483d      	ldr	r0, [pc, #244]	; (8007e24 <netconn_accept+0x110>)
 8007d2e:	f010 f9ff 	bl	8018130 <iprintf>
 8007d32:	f06f 030f 	mvn.w	r3, #15
 8007d36:	e06c      	b.n	8007e12 <netconn_accept+0xfe>
  *new_conn = NULL;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d109      	bne.n	8007d58 <netconn_accept+0x44>
 8007d44:	4b35      	ldr	r3, [pc, #212]	; (8007e1c <netconn_accept+0x108>)
 8007d46:	f240 12e3 	movw	r2, #483	; 0x1e3
 8007d4a:	4937      	ldr	r1, [pc, #220]	; (8007e28 <netconn_accept+0x114>)
 8007d4c:	4835      	ldr	r0, [pc, #212]	; (8007e24 <netconn_accept+0x110>)
 8007d4e:	f010 f9ef 	bl	8018130 <iprintf>
 8007d52:	f06f 030f 	mvn.w	r3, #15
 8007d56:	e05c      	b.n	8007e12 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fb6c 	bl	8008436 <netconn_err>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8007d62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d002      	beq.n	8007d70 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8007d6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007d6e:	e050      	b.n	8007e12 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	3314      	adds	r3, #20
 8007d74:	4618      	mov	r0, r3
 8007d76:	f00f ffb4 	bl	8017ce2 <sys_mbox_valid>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d005      	beq.n	8007d8c <netconn_accept+0x78>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	7f1b      	ldrb	r3, [r3, #28]
 8007d84:	f003 0301 	and.w	r3, r3, #1
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d002      	beq.n	8007d92 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8007d8c:	f06f 030e 	mvn.w	r3, #14
 8007d90:	e03f      	b.n	8007e12 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	7f1b      	ldrb	r3, [r3, #28]
 8007d96:	f003 0302 	and.w	r3, r3, #2
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00e      	beq.n	8007dbc <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	3314      	adds	r3, #20
 8007da2:	f107 020c 	add.w	r2, r7, #12
 8007da6:	4611      	mov	r1, r2
 8007da8:	4618      	mov	r0, r3
 8007daa:	f00f ff7e 	bl	8017caa <sys_arch_mbox_tryfetch>
 8007dae:	4603      	mov	r3, r0
 8007db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db4:	d10a      	bne.n	8007dcc <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8007db6:	f06f 0306 	mvn.w	r3, #6
 8007dba:	e02a      	b.n	8007e12 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	3314      	adds	r3, #20
 8007dc0:	f107 010c 	add.w	r1, r7, #12
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f00f ff30 	bl	8017c2c <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d005      	beq.n	8007de0 <netconn_accept+0xcc>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd8:	2200      	movs	r2, #0
 8007dda:	2101      	movs	r1, #1
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f107 0213 	add.w	r2, r7, #19
 8007de6:	4611      	mov	r1, r2
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 fb75 	bl	80084d8 <lwip_netconn_is_err_msg>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d002      	beq.n	8007dfa <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8007df4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007df8:	e00b      	b.n	8007e12 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d102      	bne.n	8007e06 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8007e00:	f06f 030e 	mvn.w	r3, #14
 8007e04:	e005      	b.n	8007e12 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007e10:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3718      	adds	r7, #24
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	0801912c 	.word	0x0801912c
 8007e20:	08019304 	.word	0x08019304
 8007e24:	08019184 	.word	0x08019184
 8007e28:	08019324 	.word	0x08019324

08007e2c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b088      	sub	sp, #32
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	4613      	mov	r3, r2
 8007e38:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d109      	bne.n	8007e58 <netconn_recv_data+0x2c>
 8007e44:	4b58      	ldr	r3, [pc, #352]	; (8007fa8 <netconn_recv_data+0x17c>)
 8007e46:	f44f 7212 	mov.w	r2, #584	; 0x248
 8007e4a:	4958      	ldr	r1, [pc, #352]	; (8007fac <netconn_recv_data+0x180>)
 8007e4c:	4858      	ldr	r0, [pc, #352]	; (8007fb0 <netconn_recv_data+0x184>)
 8007e4e:	f010 f96f 	bl	8018130 <iprintf>
 8007e52:	f06f 030f 	mvn.w	r3, #15
 8007e56:	e0a2      	b.n	8007f9e <netconn_recv_data+0x172>
  *new_buf = NULL;
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d109      	bne.n	8007e78 <netconn_recv_data+0x4c>
 8007e64:	4b50      	ldr	r3, [pc, #320]	; (8007fa8 <netconn_recv_data+0x17c>)
 8007e66:	f240 224a 	movw	r2, #586	; 0x24a
 8007e6a:	4952      	ldr	r1, [pc, #328]	; (8007fb4 <netconn_recv_data+0x188>)
 8007e6c:	4850      	ldr	r0, [pc, #320]	; (8007fb0 <netconn_recv_data+0x184>)
 8007e6e:	f010 f95f 	bl	8018130 <iprintf>
 8007e72:	f06f 030f 	mvn.w	r3, #15
 8007e76:	e092      	b.n	8007f9e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	3310      	adds	r3, #16
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f00f ff30 	bl	8017ce2 <sys_mbox_valid>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10e      	bne.n	8007ea6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f000 fad4 	bl	8008436 <netconn_err>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8007e92:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d002      	beq.n	8007ea0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8007e9a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007e9e:	e07e      	b.n	8007f9e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8007ea0:	f06f 030a 	mvn.w	r3, #10
 8007ea4:	e07b      	b.n	8007f9e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	7f1b      	ldrb	r3, [r3, #28]
 8007eaa:	f003 0302 	and.w	r3, r3, #2
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10f      	bne.n	8007ed2 <netconn_recv_data+0xa6>
 8007eb2:	79fb      	ldrb	r3, [r7, #7]
 8007eb4:	f003 0304 	and.w	r3, r3, #4
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10a      	bne.n	8007ed2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	7f1b      	ldrb	r3, [r3, #28]
 8007ec0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d104      	bne.n	8007ed2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d023      	beq.n	8007f1a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	3310      	adds	r3, #16
 8007ed6:	f107 0218 	add.w	r2, r7, #24
 8007eda:	4611      	mov	r1, r2
 8007edc:	4618      	mov	r0, r3
 8007ede:	f00f fee4 	bl	8017caa <sys_arch_mbox_tryfetch>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee8:	d11f      	bne.n	8007f2a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f000 faa3 	bl	8008436 <netconn_err>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8007ef4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d002      	beq.n	8007f02 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8007efc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007f00:	e04d      	b.n	8007f9e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	7f1b      	ldrb	r3, [r3, #28]
 8007f06:	f003 0301 	and.w	r3, r3, #1
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d002      	beq.n	8007f14 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8007f0e:	f06f 030a 	mvn.w	r3, #10
 8007f12:	e044      	b.n	8007f9e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8007f14:	f06f 0306 	mvn.w	r3, #6
 8007f18:	e041      	b.n	8007f9e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	3310      	adds	r3, #16
 8007f1e:	f107 0118 	add.w	r1, r7, #24
 8007f22:	2200      	movs	r2, #0
 8007f24:	4618      	mov	r0, r3
 8007f26:	f00f fe81 	bl	8017c2c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f32:	2b10      	cmp	r3, #16
 8007f34:	d117      	bne.n	8007f66 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	f107 0217 	add.w	r2, r7, #23
 8007f3c:	4611      	mov	r1, r2
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 faca 	bl	80084d8 <lwip_netconn_is_err_msg>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d009      	beq.n	8007f5e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8007f4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f4e:	f113 0f0f 	cmn.w	r3, #15
 8007f52:	d101      	bne.n	8007f58 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8007f54:	2300      	movs	r3, #0
 8007f56:	e022      	b.n	8007f9e <netconn_recv_data+0x172>
      }
      return err;
 8007f58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f5c:	e01f      	b.n	8007f9e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	891b      	ldrh	r3, [r3, #8]
 8007f62:	83fb      	strh	r3, [r7, #30]
 8007f64:	e00d      	b.n	8007f82 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d106      	bne.n	8007f7a <netconn_recv_data+0x14e>
 8007f6c:	4b0e      	ldr	r3, [pc, #56]	; (8007fa8 <netconn_recv_data+0x17c>)
 8007f6e:	f240 2291 	movw	r2, #657	; 0x291
 8007f72:	4911      	ldr	r1, [pc, #68]	; (8007fb8 <netconn_recv_data+0x18c>)
 8007f74:	480e      	ldr	r0, [pc, #56]	; (8007fb0 <netconn_recv_data+0x184>)
 8007f76:	f010 f8db 	bl	8018130 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	891b      	ldrh	r3, [r3, #8]
 8007f80:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d005      	beq.n	8007f96 <netconn_recv_data+0x16a>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8e:	8bfa      	ldrh	r2, [r7, #30]
 8007f90:	2101      	movs	r1, #1
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8007f96:	69ba      	ldr	r2, [r7, #24]
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3720      	adds	r7, #32
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	0801912c 	.word	0x0801912c
 8007fac:	08019344 	.word	0x08019344
 8007fb0:	08019184 	.word	0x08019184
 8007fb4:	08019364 	.word	0x08019364
 8007fb8:	08019380 	.word	0x08019380

08007fbc <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d005      	beq.n	8007fda <netconn_tcp_recvd_msg+0x1e>
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fd6:	2b10      	cmp	r3, #16
 8007fd8:	d009      	beq.n	8007fee <netconn_tcp_recvd_msg+0x32>
 8007fda:	4b0c      	ldr	r3, [pc, #48]	; (800800c <netconn_tcp_recvd_msg+0x50>)
 8007fdc:	f240 22a7 	movw	r2, #679	; 0x2a7
 8007fe0:	490b      	ldr	r1, [pc, #44]	; (8008010 <netconn_tcp_recvd_msg+0x54>)
 8007fe2:	480c      	ldr	r0, [pc, #48]	; (8008014 <netconn_tcp_recvd_msg+0x58>)
 8007fe4:	f010 f8a4 	bl	8018130 <iprintf>
 8007fe8:	f06f 030f 	mvn.w	r3, #15
 8007fec:	e00a      	b.n	8008004 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8007ffa:	6879      	ldr	r1, [r7, #4]
 8007ffc:	4806      	ldr	r0, [pc, #24]	; (8008018 <netconn_tcp_recvd_msg+0x5c>)
 8007ffe:	f7ff fd4d 	bl	8007a9c <netconn_apimsg>
 8008002:	4603      	mov	r3, r0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	0801912c 	.word	0x0801912c
 8008010:	0801938c 	.word	0x0801938c
 8008014:	08019184 	.word	0x08019184
 8008018:	080095e5 	.word	0x080095e5

0800801c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b090      	sub	sp, #64	; 0x40
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	4613      	mov	r3, r2
 8008028:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	3310      	adds	r3, #16
 800802e:	4618      	mov	r0, r3
 8008030:	f00f fe57 	bl	8017ce2 <sys_mbox_valid>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d102      	bne.n	8008040 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800803a:	f06f 030a 	mvn.w	r3, #10
 800803e:	e06d      	b.n	800811c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	7f1b      	ldrb	r3, [r3, #28]
 8008044:	b25b      	sxtb	r3, r3
 8008046:	2b00      	cmp	r3, #0
 8008048:	da07      	bge.n	800805a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	7f1b      	ldrb	r3, [r3, #28]
 800804e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008052:	b2da      	uxtb	r2, r3
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8008058:	e039      	b.n	80080ce <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800805a:	79fb      	ldrb	r3, [r7, #7]
 800805c:	461a      	mov	r2, r3
 800805e:	68b9      	ldr	r1, [r7, #8]
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f7ff fee3 	bl	8007e2c <netconn_recv_data>
 8008066:	4603      	mov	r3, r0
 8008068:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800806c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008070:	2b00      	cmp	r3, #0
 8008072:	d002      	beq.n	800807a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8008074:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008078:	e050      	b.n	800811c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8008080:	79fb      	ldrb	r3, [r7, #7]
 8008082:	f003 0308 	and.w	r3, r3, #8
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10e      	bne.n	80080a8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800808a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808c:	2b00      	cmp	r3, #0
 800808e:	d002      	beq.n	8008096 <netconn_recv_data_tcp+0x7a>
 8008090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008092:	891b      	ldrh	r3, [r3, #8]
 8008094:	e000      	b.n	8008098 <netconn_recv_data_tcp+0x7c>
 8008096:	2301      	movs	r3, #1
 8008098:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800809a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800809c:	f107 0214 	add.w	r2, r7, #20
 80080a0:	4619      	mov	r1, r3
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f7ff ff8a 	bl	8007fbc <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80080a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d134      	bne.n	8008118 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80080ae:	79fb      	ldrb	r3, [r7, #7]
 80080b0:	f003 0310 	and.w	r3, r3, #16
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d009      	beq.n	80080cc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	7f1b      	ldrb	r3, [r3, #28]
 80080bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80080c0:	b2da      	uxtb	r2, r3
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 80080c6:	f06f 0306 	mvn.w	r3, #6
 80080ca:	e027      	b.n	800811c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 80080cc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d005      	beq.n	80080e2 <netconn_recv_data_tcp+0xc6>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080da:	2200      	movs	r2, #0
 80080dc:	2101      	movs	r1, #1
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d10f      	bne.n	800810a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f000 f9a3 	bl	8008436 <netconn_err>
 80080f0:	4603      	mov	r3, r0
 80080f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 80080f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d002      	beq.n	8008104 <netconn_recv_data_tcp+0xe8>
          return err;
 80080fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008102:	e00b      	b.n	800811c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8008104:	f06f 030d 	mvn.w	r3, #13
 8008108:	e008      	b.n	800811c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800810a:	2101      	movs	r1, #1
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f000 f955 	bl	80083bc <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008112:	f06f 030e 	mvn.w	r3, #14
 8008116:	e001      	b.n	800811c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8008118:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800811c:	4618      	mov	r0, r3
 800811e:	3740      	adds	r7, #64	; 0x40
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b086      	sub	sp, #24
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800812e:	2300      	movs	r3, #0
 8008130:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d109      	bne.n	800814c <netconn_recv+0x28>
 8008138:	4b32      	ldr	r3, [pc, #200]	; (8008204 <netconn_recv+0xe0>)
 800813a:	f240 3263 	movw	r2, #867	; 0x363
 800813e:	4932      	ldr	r1, [pc, #200]	; (8008208 <netconn_recv+0xe4>)
 8008140:	4832      	ldr	r0, [pc, #200]	; (800820c <netconn_recv+0xe8>)
 8008142:	f00f fff5 	bl	8018130 <iprintf>
 8008146:	f06f 030f 	mvn.w	r3, #15
 800814a:	e056      	b.n	80081fa <netconn_recv+0xd6>
  *new_buf = NULL;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	2200      	movs	r2, #0
 8008150:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d109      	bne.n	800816c <netconn_recv+0x48>
 8008158:	4b2a      	ldr	r3, [pc, #168]	; (8008204 <netconn_recv+0xe0>)
 800815a:	f240 3265 	movw	r2, #869	; 0x365
 800815e:	492c      	ldr	r1, [pc, #176]	; (8008210 <netconn_recv+0xec>)
 8008160:	482a      	ldr	r0, [pc, #168]	; (800820c <netconn_recv+0xe8>)
 8008162:	f00f ffe5 	bl	8018130 <iprintf>
 8008166:	f06f 030f 	mvn.w	r3, #15
 800816a:	e046      	b.n	80081fa <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008174:	2b10      	cmp	r3, #16
 8008176:	d13a      	bne.n	80081ee <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8008178:	2300      	movs	r3, #0
 800817a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800817c:	2006      	movs	r0, #6
 800817e:	f003 fac5 	bl	800b70c <memp_malloc>
 8008182:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d102      	bne.n	8008190 <netconn_recv+0x6c>
      return ERR_MEM;
 800818a:	f04f 33ff 	mov.w	r3, #4294967295
 800818e:	e034      	b.n	80081fa <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8008190:	f107 030c 	add.w	r3, r7, #12
 8008194:	2200      	movs	r2, #0
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f7ff ff3f 	bl	800801c <netconn_recv_data_tcp>
 800819e:	4603      	mov	r3, r0
 80081a0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80081a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d006      	beq.n	80081b8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80081aa:	6979      	ldr	r1, [r7, #20]
 80081ac:	2006      	movs	r0, #6
 80081ae:	f003 fb23 	bl	800b7f8 <memp_free>
      return err;
 80081b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80081b6:	e020      	b.n	80081fa <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d106      	bne.n	80081cc <netconn_recv+0xa8>
 80081be:	4b11      	ldr	r3, [pc, #68]	; (8008204 <netconn_recv+0xe0>)
 80081c0:	f240 3279 	movw	r2, #889	; 0x379
 80081c4:	4913      	ldr	r1, [pc, #76]	; (8008214 <netconn_recv+0xf0>)
 80081c6:	4811      	ldr	r0, [pc, #68]	; (800820c <netconn_recv+0xe8>)
 80081c8:	f00f ffb2 	bl	8018130 <iprintf>

    buf->p = p;
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	2200      	movs	r2, #0
 80081dc:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	2200      	movs	r2, #0
 80081e2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	e005      	b.n	80081fa <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80081ee:	2200      	movs	r2, #0
 80081f0:	6839      	ldr	r1, [r7, #0]
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f7ff fe1a 	bl	8007e2c <netconn_recv_data>
 80081f8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3718      	adds	r7, #24
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	0801912c 	.word	0x0801912c
 8008208:	08019344 	.word	0x08019344
 800820c:	08019184 	.word	0x08019184
 8008210:	08019364 	.word	0x08019364
 8008214:	080193dc 	.word	0x080193dc

08008218 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b088      	sub	sp, #32
 800821c:	af02      	add	r7, sp, #8
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
 8008224:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800822e:	78fa      	ldrb	r2, [r7, #3]
 8008230:	f107 0110 	add.w	r1, r7, #16
 8008234:	6a3b      	ldr	r3, [r7, #32]
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	4613      	mov	r3, r2
 800823a:	2201      	movs	r2, #1
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f000 f805 	bl	800824c <netconn_write_vectors_partly>
 8008242:	4603      	mov	r3, r0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3718      	adds	r7, #24
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b092      	sub	sp, #72	; 0x48
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	4611      	mov	r1, r2
 8008258:	461a      	mov	r2, r3
 800825a:	460b      	mov	r3, r1
 800825c:	80fb      	strh	r3, [r7, #6]
 800825e:	4613      	mov	r3, r2
 8008260:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d109      	bne.n	800827c <netconn_write_vectors_partly+0x30>
 8008268:	4b4e      	ldr	r3, [pc, #312]	; (80083a4 <netconn_write_vectors_partly+0x158>)
 800826a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800826e:	494e      	ldr	r1, [pc, #312]	; (80083a8 <netconn_write_vectors_partly+0x15c>)
 8008270:	484e      	ldr	r0, [pc, #312]	; (80083ac <netconn_write_vectors_partly+0x160>)
 8008272:	f00f ff5d 	bl	8018130 <iprintf>
 8008276:	f06f 030f 	mvn.w	r3, #15
 800827a:	e08e      	b.n	800839a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008284:	2b10      	cmp	r3, #16
 8008286:	d009      	beq.n	800829c <netconn_write_vectors_partly+0x50>
 8008288:	4b46      	ldr	r3, [pc, #280]	; (80083a4 <netconn_write_vectors_partly+0x158>)
 800828a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800828e:	4948      	ldr	r1, [pc, #288]	; (80083b0 <netconn_write_vectors_partly+0x164>)
 8008290:	4846      	ldr	r0, [pc, #280]	; (80083ac <netconn_write_vectors_partly+0x160>)
 8008292:	f00f ff4d 	bl	8018130 <iprintf>
 8008296:	f06f 0305 	mvn.w	r3, #5
 800829a:	e07e      	b.n	800839a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	7f1b      	ldrb	r3, [r3, #28]
 80082a0:	f003 0302 	and.w	r3, r3, #2
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d104      	bne.n	80082b2 <netconn_write_vectors_partly+0x66>
 80082a8:	797b      	ldrb	r3, [r7, #5]
 80082aa:	f003 0304 	and.w	r3, r3, #4
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d001      	beq.n	80082b6 <netconn_write_vectors_partly+0x6a>
 80082b2:	2301      	movs	r3, #1
 80082b4:	e000      	b.n	80082b8 <netconn_write_vectors_partly+0x6c>
 80082b6:	2300      	movs	r3, #0
 80082b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80082bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d005      	beq.n	80082d0 <netconn_write_vectors_partly+0x84>
 80082c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d102      	bne.n	80082d0 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80082ca:	f06f 0305 	mvn.w	r3, #5
 80082ce:	e064      	b.n	800839a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 80082d0:	2300      	movs	r3, #0
 80082d2:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 80082d4:	2300      	movs	r3, #0
 80082d6:	643b      	str	r3, [r7, #64]	; 0x40
 80082d8:	e015      	b.n	8008306 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 80082da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082dc:	00db      	lsls	r3, r3, #3
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	4413      	add	r3, r2
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082e6:	4413      	add	r3, r2
 80082e8:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 80082ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082ec:	00db      	lsls	r3, r3, #3
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	4413      	add	r3, r2
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d202      	bcs.n	8008300 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 80082fa:	f06f 0305 	mvn.w	r3, #5
 80082fe:	e04c      	b.n	800839a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008302:	3301      	adds	r3, #1
 8008304:	643b      	str	r3, [r7, #64]	; 0x40
 8008306:	88fb      	ldrh	r3, [r7, #6]
 8008308:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800830a:	429a      	cmp	r2, r3
 800830c:	dbe5      	blt.n	80082da <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800830e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008310:	2b00      	cmp	r3, #0
 8008312:	d101      	bne.n	8008318 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8008314:	2300      	movs	r3, #0
 8008316:	e040      	b.n	800839a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800831a:	2b00      	cmp	r3, #0
 800831c:	da0a      	bge.n	8008334 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800831e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008320:	2b00      	cmp	r3, #0
 8008322:	d102      	bne.n	800832a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8008324:	f06f 0305 	mvn.w	r3, #5
 8008328:	e037      	b.n	800839a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800832a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800832e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8008330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008332:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800833c:	88fb      	ldrh	r3, [r7, #6]
 800833e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008340:	2300      	movs	r3, #0
 8008342:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008344:	797b      	ldrb	r3, [r7, #5]
 8008346:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800834a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800834c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800834e:	2300      	movs	r3, #0
 8008350:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008352:	f107 0314 	add.w	r3, r7, #20
 8008356:	4619      	mov	r1, r3
 8008358:	4816      	ldr	r0, [pc, #88]	; (80083b4 <netconn_write_vectors_partly+0x168>)
 800835a:	f7ff fb9f 	bl	8007a9c <netconn_apimsg>
 800835e:	4603      	mov	r3, r0
 8008360:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8008364:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008368:	2b00      	cmp	r3, #0
 800836a:	d114      	bne.n	8008396 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800836c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800836e:	2b00      	cmp	r3, #0
 8008370:	d002      	beq.n	8008378 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008376:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008378:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10a      	bne.n	8008396 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008382:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008384:	429a      	cmp	r2, r3
 8008386:	d006      	beq.n	8008396 <netconn_write_vectors_partly+0x14a>
 8008388:	4b06      	ldr	r3, [pc, #24]	; (80083a4 <netconn_write_vectors_partly+0x158>)
 800838a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800838e:	490a      	ldr	r1, [pc, #40]	; (80083b8 <netconn_write_vectors_partly+0x16c>)
 8008390:	4806      	ldr	r0, [pc, #24]	; (80083ac <netconn_write_vectors_partly+0x160>)
 8008392:	f00f fecd 	bl	8018130 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008396:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800839a:	4618      	mov	r0, r3
 800839c:	3748      	adds	r7, #72	; 0x48
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	0801912c 	.word	0x0801912c
 80083a8:	08019404 	.word	0x08019404
 80083ac:	08019184 	.word	0x08019184
 80083b0:	08019420 	.word	0x08019420
 80083b4:	080099e9 	.word	0x080099e9
 80083b8:	08019444 	.word	0x08019444

080083bc <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b08c      	sub	sp, #48	; 0x30
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	460b      	mov	r3, r1
 80083c6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d109      	bne.n	80083e2 <netconn_close_shutdown+0x26>
 80083ce:	4b0f      	ldr	r3, [pc, #60]	; (800840c <netconn_close_shutdown+0x50>)
 80083d0:	f240 4247 	movw	r2, #1095	; 0x447
 80083d4:	490e      	ldr	r1, [pc, #56]	; (8008410 <netconn_close_shutdown+0x54>)
 80083d6:	480f      	ldr	r0, [pc, #60]	; (8008414 <netconn_close_shutdown+0x58>)
 80083d8:	f00f feaa 	bl	8018130 <iprintf>
 80083dc:	f06f 030f 	mvn.w	r3, #15
 80083e0:	e010      	b.n	8008404 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80083e6:	78fb      	ldrb	r3, [r7, #3]
 80083e8:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80083ea:	2329      	movs	r3, #41	; 0x29
 80083ec:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80083ee:	f107 030c 	add.w	r3, r7, #12
 80083f2:	4619      	mov	r1, r3
 80083f4:	4808      	ldr	r0, [pc, #32]	; (8008418 <netconn_close_shutdown+0x5c>)
 80083f6:	f7ff fb51 	bl	8007a9c <netconn_apimsg>
 80083fa:	4603      	mov	r3, r0
 80083fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008400:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008404:	4618      	mov	r0, r3
 8008406:	3730      	adds	r7, #48	; 0x30
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	0801912c 	.word	0x0801912c
 8008410:	08019468 	.word	0x08019468
 8008414:	08019184 	.word	0x08019184
 8008418:	08009b01 	.word	0x08009b01

0800841c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008424:	2103      	movs	r1, #3
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f7ff ffc8 	bl	80083bc <netconn_close_shutdown>
 800842c:	4603      	mov	r3, r0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3708      	adds	r7, #8
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b084      	sub	sp, #16
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d101      	bne.n	8008448 <netconn_err+0x12>
    return ERR_OK;
 8008444:	2300      	movs	r3, #0
 8008446:	e00d      	b.n	8008464 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008448:	f00f fd66 	bl	8017f18 <sys_arch_protect>
 800844c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	7a1b      	ldrb	r3, [r3, #8]
 8008452:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	f00f fd6a 	bl	8017f34 <sys_arch_unprotect>
  return err;
 8008460:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	4603      	mov	r3, r0
 8008474:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800847a:	f113 0f0d 	cmn.w	r3, #13
 800847e:	d009      	beq.n	8008494 <lwip_netconn_err_to_msg+0x28>
 8008480:	f113 0f0d 	cmn.w	r3, #13
 8008484:	dc0c      	bgt.n	80084a0 <lwip_netconn_err_to_msg+0x34>
 8008486:	f113 0f0f 	cmn.w	r3, #15
 800848a:	d007      	beq.n	800849c <lwip_netconn_err_to_msg+0x30>
 800848c:	f113 0f0e 	cmn.w	r3, #14
 8008490:	d002      	beq.n	8008498 <lwip_netconn_err_to_msg+0x2c>
 8008492:	e005      	b.n	80084a0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008494:	4b0a      	ldr	r3, [pc, #40]	; (80084c0 <lwip_netconn_err_to_msg+0x54>)
 8008496:	e00e      	b.n	80084b6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008498:	4b0a      	ldr	r3, [pc, #40]	; (80084c4 <lwip_netconn_err_to_msg+0x58>)
 800849a:	e00c      	b.n	80084b6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800849c:	4b0a      	ldr	r3, [pc, #40]	; (80084c8 <lwip_netconn_err_to_msg+0x5c>)
 800849e:	e00a      	b.n	80084b6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80084a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d005      	beq.n	80084b4 <lwip_netconn_err_to_msg+0x48>
 80084a8:	4b08      	ldr	r3, [pc, #32]	; (80084cc <lwip_netconn_err_to_msg+0x60>)
 80084aa:	227d      	movs	r2, #125	; 0x7d
 80084ac:	4908      	ldr	r1, [pc, #32]	; (80084d0 <lwip_netconn_err_to_msg+0x64>)
 80084ae:	4809      	ldr	r0, [pc, #36]	; (80084d4 <lwip_netconn_err_to_msg+0x68>)
 80084b0:	f00f fe3e 	bl	8018130 <iprintf>
      return NULL;
 80084b4:	2300      	movs	r3, #0
  }
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	0801cbe0 	.word	0x0801cbe0
 80084c4:	0801cbe1 	.word	0x0801cbe1
 80084c8:	0801cbe2 	.word	0x0801cbe2
 80084cc:	08019484 	.word	0x08019484
 80084d0:	080194b8 	.word	0x080194b8
 80084d4:	080194c8 	.word	0x080194c8

080084d8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d105      	bne.n	80084f4 <lwip_netconn_is_err_msg+0x1c>
 80084e8:	4b12      	ldr	r3, [pc, #72]	; (8008534 <lwip_netconn_is_err_msg+0x5c>)
 80084ea:	2285      	movs	r2, #133	; 0x85
 80084ec:	4912      	ldr	r1, [pc, #72]	; (8008538 <lwip_netconn_is_err_msg+0x60>)
 80084ee:	4813      	ldr	r0, [pc, #76]	; (800853c <lwip_netconn_is_err_msg+0x64>)
 80084f0:	f00f fe1e 	bl	8018130 <iprintf>

  if (msg == &netconn_aborted) {
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a12      	ldr	r2, [pc, #72]	; (8008540 <lwip_netconn_is_err_msg+0x68>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d104      	bne.n	8008506 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	22f3      	movs	r2, #243	; 0xf3
 8008500:	701a      	strb	r2, [r3, #0]
    return 1;
 8008502:	2301      	movs	r3, #1
 8008504:	e012      	b.n	800852c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a0e      	ldr	r2, [pc, #56]	; (8008544 <lwip_netconn_is_err_msg+0x6c>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d104      	bne.n	8008518 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	22f2      	movs	r2, #242	; 0xf2
 8008512:	701a      	strb	r2, [r3, #0]
    return 1;
 8008514:	2301      	movs	r3, #1
 8008516:	e009      	b.n	800852c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a0b      	ldr	r2, [pc, #44]	; (8008548 <lwip_netconn_is_err_msg+0x70>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d104      	bne.n	800852a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	22f1      	movs	r2, #241	; 0xf1
 8008524:	701a      	strb	r2, [r3, #0]
    return 1;
 8008526:	2301      	movs	r3, #1
 8008528:	e000      	b.n	800852c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	08019484 	.word	0x08019484
 8008538:	080194f0 	.word	0x080194f0
 800853c:	080194c8 	.word	0x080194c8
 8008540:	0801cbe0 	.word	0x0801cbe0
 8008544:	0801cbe1 	.word	0x0801cbe1
 8008548:	0801cbe2 	.word	0x0801cbe2

0800854c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b088      	sub	sp, #32
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	607a      	str	r2, [r7, #4]
 8008558:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d105      	bne.n	800856c <recv_udp+0x20>
 8008560:	4b34      	ldr	r3, [pc, #208]	; (8008634 <recv_udp+0xe8>)
 8008562:	22e5      	movs	r2, #229	; 0xe5
 8008564:	4934      	ldr	r1, [pc, #208]	; (8008638 <recv_udp+0xec>)
 8008566:	4835      	ldr	r0, [pc, #212]	; (800863c <recv_udp+0xf0>)
 8008568:	f00f fde2 	bl	8018130 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d105      	bne.n	800857e <recv_udp+0x32>
 8008572:	4b30      	ldr	r3, [pc, #192]	; (8008634 <recv_udp+0xe8>)
 8008574:	22e6      	movs	r2, #230	; 0xe6
 8008576:	4932      	ldr	r1, [pc, #200]	; (8008640 <recv_udp+0xf4>)
 8008578:	4830      	ldr	r0, [pc, #192]	; (800863c <recv_udp+0xf0>)
 800857a:	f00f fdd9 	bl	8018130 <iprintf>
  conn = (struct netconn *)arg;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d103      	bne.n	8008590 <recv_udp+0x44>
    pbuf_free(p);
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f003 ffe5 	bl	800c558 <pbuf_free>
    return;
 800858e:	e04d      	b.n	800862c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	68ba      	ldr	r2, [r7, #8]
 8008596:	429a      	cmp	r2, r3
 8008598:	d005      	beq.n	80085a6 <recv_udp+0x5a>
 800859a:	4b26      	ldr	r3, [pc, #152]	; (8008634 <recv_udp+0xe8>)
 800859c:	22ee      	movs	r2, #238	; 0xee
 800859e:	4929      	ldr	r1, [pc, #164]	; (8008644 <recv_udp+0xf8>)
 80085a0:	4826      	ldr	r0, [pc, #152]	; (800863c <recv_udp+0xf0>)
 80085a2:	f00f fdc5 	bl	8018130 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	3310      	adds	r3, #16
 80085aa:	4618      	mov	r0, r3
 80085ac:	f00f fb99 	bl	8017ce2 <sys_mbox_valid>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d103      	bne.n	80085be <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f003 ffce 	bl	800c558 <pbuf_free>
    return;
 80085bc:	e036      	b.n	800862c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80085be:	2006      	movs	r0, #6
 80085c0:	f003 f8a4 	bl	800b70c <memp_malloc>
 80085c4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d103      	bne.n	80085d4 <recv_udp+0x88>
    pbuf_free(p);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f003 ffc3 	bl	800c558 <pbuf_free>
    return;
 80085d2:	e02b      	b.n	800862c <recv_udp+0xe0>
  } else {
    buf->p = p;
 80085d4:	69bb      	ldr	r3, [r7, #24]
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d002      	beq.n	80085ec <recv_udp+0xa0>
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	e000      	b.n	80085ee <recv_udp+0xa2>
 80085ec:	2300      	movs	r3, #0
 80085ee:	69ba      	ldr	r2, [r7, #24]
 80085f0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80085f6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	891b      	ldrh	r3, [r3, #8]
 80085fc:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	3310      	adds	r3, #16
 8008602:	69b9      	ldr	r1, [r7, #24]
 8008604:	4618      	mov	r0, r3
 8008606:	f00f faf7 	bl	8017bf8 <sys_mbox_trypost>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d003      	beq.n	8008618 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008610:	69b8      	ldr	r0, [r7, #24]
 8008612:	f001 fb01 	bl	8009c18 <netbuf_delete>
    return;
 8008616:	e009      	b.n	800862c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861c:	2b00      	cmp	r3, #0
 800861e:	d005      	beq.n	800862c <recv_udp+0xe0>
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008624:	8afa      	ldrh	r2, [r7, #22]
 8008626:	2100      	movs	r1, #0
 8008628:	69f8      	ldr	r0, [r7, #28]
 800862a:	4798      	blx	r3
  }
}
 800862c:	3720      	adds	r7, #32
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	08019484 	.word	0x08019484
 8008638:	080194fc 	.word	0x080194fc
 800863c:	080194c8 	.word	0x080194c8
 8008640:	08019520 	.word	0x08019520
 8008644:	08019540 	.word	0x08019540

08008648 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b088      	sub	sp, #32
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
 8008654:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d106      	bne.n	800866a <recv_tcp+0x22>
 800865c:	4b36      	ldr	r3, [pc, #216]	; (8008738 <recv_tcp+0xf0>)
 800865e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008662:	4936      	ldr	r1, [pc, #216]	; (800873c <recv_tcp+0xf4>)
 8008664:	4836      	ldr	r0, [pc, #216]	; (8008740 <recv_tcp+0xf8>)
 8008666:	f00f fd63 	bl	8018130 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d106      	bne.n	800867e <recv_tcp+0x36>
 8008670:	4b31      	ldr	r3, [pc, #196]	; (8008738 <recv_tcp+0xf0>)
 8008672:	f240 122d 	movw	r2, #301	; 0x12d
 8008676:	4933      	ldr	r1, [pc, #204]	; (8008744 <recv_tcp+0xfc>)
 8008678:	4831      	ldr	r0, [pc, #196]	; (8008740 <recv_tcp+0xf8>)
 800867a:	f00f fd59 	bl	8018130 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800867e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d006      	beq.n	8008694 <recv_tcp+0x4c>
 8008686:	4b2c      	ldr	r3, [pc, #176]	; (8008738 <recv_tcp+0xf0>)
 8008688:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800868c:	492e      	ldr	r1, [pc, #184]	; (8008748 <recv_tcp+0x100>)
 800868e:	482c      	ldr	r0, [pc, #176]	; (8008740 <recv_tcp+0xf8>)
 8008690:	f00f fd4e 	bl	8018130 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d102      	bne.n	80086a4 <recv_tcp+0x5c>
    return ERR_VAL;
 800869e:	f06f 0305 	mvn.w	r3, #5
 80086a2:	e045      	b.n	8008730 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d006      	beq.n	80086bc <recv_tcp+0x74>
 80086ae:	4b22      	ldr	r3, [pc, #136]	; (8008738 <recv_tcp+0xf0>)
 80086b0:	f240 1235 	movw	r2, #309	; 0x135
 80086b4:	4925      	ldr	r1, [pc, #148]	; (800874c <recv_tcp+0x104>)
 80086b6:	4822      	ldr	r0, [pc, #136]	; (8008740 <recv_tcp+0xf8>)
 80086b8:	f00f fd3a 	bl	8018130 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	3310      	adds	r3, #16
 80086c0:	4618      	mov	r0, r3
 80086c2:	f00f fb0e 	bl	8017ce2 <sys_mbox_valid>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d10d      	bne.n	80086e8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d008      	beq.n	80086e4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	891b      	ldrh	r3, [r3, #8]
 80086d6:	4619      	mov	r1, r3
 80086d8:	68b8      	ldr	r0, [r7, #8]
 80086da:	f004 ff17 	bl	800d50c <tcp_recved>
      pbuf_free(p);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f003 ff3a 	bl	800c558 <pbuf_free>
    }
    return ERR_OK;
 80086e4:	2300      	movs	r3, #0
 80086e6:	e023      	b.n	8008730 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d005      	beq.n	80086fa <recv_tcp+0xb2>
    msg = p;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	891b      	ldrh	r3, [r3, #8]
 80086f6:	83fb      	strh	r3, [r7, #30]
 80086f8:	e003      	b.n	8008702 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80086fa:	4b15      	ldr	r3, [pc, #84]	; (8008750 <recv_tcp+0x108>)
 80086fc:	61bb      	str	r3, [r7, #24]
    len = 0;
 80086fe:	2300      	movs	r3, #0
 8008700:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	3310      	adds	r3, #16
 8008706:	69b9      	ldr	r1, [r7, #24]
 8008708:	4618      	mov	r0, r3
 800870a:	f00f fa75 	bl	8017bf8 <sys_mbox_trypost>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d002      	beq.n	800871a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008714:	f04f 33ff 	mov.w	r3, #4294967295
 8008718:	e00a      	b.n	8008730 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871e:	2b00      	cmp	r3, #0
 8008720:	d005      	beq.n	800872e <recv_tcp+0xe6>
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008726:	8bfa      	ldrh	r2, [r7, #30]
 8008728:	2100      	movs	r1, #0
 800872a:	6978      	ldr	r0, [r7, #20]
 800872c:	4798      	blx	r3
  }

  return ERR_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3720      	adds	r7, #32
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	08019484 	.word	0x08019484
 800873c:	08019560 	.word	0x08019560
 8008740:	080194c8 	.word	0x080194c8
 8008744:	08019584 	.word	0x08019584
 8008748:	080195a4 	.word	0x080195a4
 800874c:	080195bc 	.word	0x080195bc
 8008750:	0801cbe2 	.word	0x0801cbe2

08008754 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d106      	bne.n	8008776 <poll_tcp+0x22>
 8008768:	4b29      	ldr	r3, [pc, #164]	; (8008810 <poll_tcp+0xbc>)
 800876a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800876e:	4929      	ldr	r1, [pc, #164]	; (8008814 <poll_tcp+0xc0>)
 8008770:	4829      	ldr	r0, [pc, #164]	; (8008818 <poll_tcp+0xc4>)
 8008772:	f00f fcdd 	bl	8018130 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	785b      	ldrb	r3, [r3, #1]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d104      	bne.n	8008788 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800877e:	2101      	movs	r1, #1
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f000 ff65 	bl	8009650 <lwip_netconn_do_writemore>
 8008786:	e016      	b.n	80087b6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	785b      	ldrb	r3, [r3, #1]
 800878c:	2b04      	cmp	r3, #4
 800878e:	d112      	bne.n	80087b6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6a1b      	ldr	r3, [r3, #32]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00a      	beq.n	80087ae <poll_tcp+0x5a>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6a1b      	ldr	r3, [r3, #32]
 800879c:	7a5b      	ldrb	r3, [r3, #9]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d005      	beq.n	80087ae <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	7a5a      	ldrb	r2, [r3, #9]
 80087a8:	3a01      	subs	r2, #1
 80087aa:	b2d2      	uxtb	r2, r2
 80087ac:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80087ae:	2101      	movs	r1, #1
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f000 fbf7 	bl	8008fa4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	7f1b      	ldrb	r3, [r3, #28]
 80087ba:	f003 0310 	and.w	r3, r3, #16
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d021      	beq.n	8008806 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d01d      	beq.n	8008806 <poll_tcp+0xb2>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80087d2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80087d6:	d316      	bcc.n	8008806 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80087e0:	2b04      	cmp	r3, #4
 80087e2:	d810      	bhi.n	8008806 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	7f1b      	ldrb	r3, [r3, #28]
 80087e8:	f023 0310 	bic.w	r3, r3, #16
 80087ec:	b2da      	uxtb	r2, r3
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d005      	beq.n	8008806 <poll_tcp+0xb2>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fe:	2200      	movs	r2, #0
 8008800:	2102      	movs	r1, #2
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	08019484 	.word	0x08019484
 8008814:	080195dc 	.word	0x080195dc
 8008818:	080194c8 	.word	0x080194c8

0800881c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b086      	sub	sp, #24
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	4613      	mov	r3, r2
 8008828:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d106      	bne.n	8008842 <sent_tcp+0x26>
 8008834:	4b20      	ldr	r3, [pc, #128]	; (80088b8 <sent_tcp+0x9c>)
 8008836:	f240 1293 	movw	r2, #403	; 0x193
 800883a:	4920      	ldr	r1, [pc, #128]	; (80088bc <sent_tcp+0xa0>)
 800883c:	4820      	ldr	r0, [pc, #128]	; (80088c0 <sent_tcp+0xa4>)
 800883e:	f00f fc77 	bl	8018130 <iprintf>

  if (conn) {
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d032      	beq.n	80088ae <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	785b      	ldrb	r3, [r3, #1]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d104      	bne.n	800885a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008850:	2101      	movs	r1, #1
 8008852:	6978      	ldr	r0, [r7, #20]
 8008854:	f000 fefc 	bl	8009650 <lwip_netconn_do_writemore>
 8008858:	e007      	b.n	800886a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	785b      	ldrb	r3, [r3, #1]
 800885e:	2b04      	cmp	r3, #4
 8008860:	d103      	bne.n	800886a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008862:	2101      	movs	r1, #1
 8008864:	6978      	ldr	r0, [r7, #20]
 8008866:	f000 fb9d 	bl	8008fa4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d01d      	beq.n	80088ae <sent_tcp+0x92>
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800887a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800887e:	d316      	bcc.n	80088ae <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008888:	2b04      	cmp	r3, #4
 800888a:	d810      	bhi.n	80088ae <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	7f1b      	ldrb	r3, [r3, #28]
 8008890:	f023 0310 	bic.w	r3, r3, #16
 8008894:	b2da      	uxtb	r2, r3
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d005      	beq.n	80088ae <sent_tcp+0x92>
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a6:	88fa      	ldrh	r2, [r7, #6]
 80088a8:	2102      	movs	r1, #2
 80088aa:	6978      	ldr	r0, [r7, #20]
 80088ac:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3718      	adds	r7, #24
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	08019484 	.word	0x08019484
 80088bc:	080195dc 	.word	0x080195dc
 80088c0:	080194c8 	.word	0x080194c8

080088c4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b088      	sub	sp, #32
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	460b      	mov	r3, r1
 80088ce:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d106      	bne.n	80088e8 <err_tcp+0x24>
 80088da:	4b5f      	ldr	r3, [pc, #380]	; (8008a58 <err_tcp+0x194>)
 80088dc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80088e0:	495e      	ldr	r1, [pc, #376]	; (8008a5c <err_tcp+0x198>)
 80088e2:	485f      	ldr	r0, [pc, #380]	; (8008a60 <err_tcp+0x19c>)
 80088e4:	f00f fc24 	bl	8018130 <iprintf>

  SYS_ARCH_PROTECT(lev);
 80088e8:	f00f fb16 	bl	8017f18 <sys_arch_protect>
 80088ec:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	2200      	movs	r2, #0
 80088f2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	78fa      	ldrb	r2, [r7, #3]
 80088f8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	7f1b      	ldrb	r3, [r3, #28]
 80088fe:	f043 0301 	orr.w	r3, r3, #1
 8008902:	b2da      	uxtb	r2, r3
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	785b      	ldrb	r3, [r3, #1]
 800890c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	2200      	movs	r2, #0
 8008912:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8008914:	69b8      	ldr	r0, [r7, #24]
 8008916:	f00f fb0d 	bl	8017f34 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891e:	2b00      	cmp	r3, #0
 8008920:	d005      	beq.n	800892e <err_tcp+0x6a>
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008926:	2200      	movs	r2, #0
 8008928:	2104      	movs	r1, #4
 800892a:	69f8      	ldr	r0, [r7, #28]
 800892c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008932:	2b00      	cmp	r3, #0
 8008934:	d005      	beq.n	8008942 <err_tcp+0x7e>
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893a:	2200      	movs	r2, #0
 800893c:	2100      	movs	r1, #0
 800893e:	69f8      	ldr	r0, [r7, #28]
 8008940:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008946:	2b00      	cmp	r3, #0
 8008948:	d005      	beq.n	8008956 <err_tcp+0x92>
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894e:	2200      	movs	r2, #0
 8008950:	2102      	movs	r1, #2
 8008952:	69f8      	ldr	r0, [r7, #28]
 8008954:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8008956:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800895a:	4618      	mov	r0, r3
 800895c:	f7ff fd86 	bl	800846c <lwip_netconn_err_to_msg>
 8008960:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	3310      	adds	r3, #16
 8008966:	4618      	mov	r0, r3
 8008968:	f00f f9bb 	bl	8017ce2 <sys_mbox_valid>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d005      	beq.n	800897e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	3310      	adds	r3, #16
 8008976:	6939      	ldr	r1, [r7, #16]
 8008978:	4618      	mov	r0, r3
 800897a:	f00f f93d 	bl	8017bf8 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	3314      	adds	r3, #20
 8008982:	4618      	mov	r0, r3
 8008984:	f00f f9ad 	bl	8017ce2 <sys_mbox_valid>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d005      	beq.n	800899a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	3314      	adds	r3, #20
 8008992:	6939      	ldr	r1, [r7, #16]
 8008994:	4618      	mov	r0, r3
 8008996:	f00f f92f 	bl	8017bf8 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800899a:	7dfb      	ldrb	r3, [r7, #23]
 800899c:	2b01      	cmp	r3, #1
 800899e:	d005      	beq.n	80089ac <err_tcp+0xe8>
 80089a0:	7dfb      	ldrb	r3, [r7, #23]
 80089a2:	2b04      	cmp	r3, #4
 80089a4:	d002      	beq.n	80089ac <err_tcp+0xe8>
 80089a6:	7dfb      	ldrb	r3, [r7, #23]
 80089a8:	2b03      	cmp	r3, #3
 80089aa:	d143      	bne.n	8008a34 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	7f1b      	ldrb	r3, [r3, #28]
 80089b0:	f003 0304 	and.w	r3, r3, #4
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	bf14      	ite	ne
 80089b8:	2301      	movne	r3, #1
 80089ba:	2300      	moveq	r3, #0
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	7f1b      	ldrb	r3, [r3, #28]
 80089c4:	f023 0304 	bic.w	r3, r3, #4
 80089c8:	b2da      	uxtb	r2, r3
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d13b      	bne.n	8008a4c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	6a1b      	ldr	r3, [r3, #32]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d106      	bne.n	80089ea <err_tcp+0x126>
 80089dc:	4b1e      	ldr	r3, [pc, #120]	; (8008a58 <err_tcp+0x194>)
 80089de:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80089e2:	4920      	ldr	r1, [pc, #128]	; (8008a64 <err_tcp+0x1a0>)
 80089e4:	481e      	ldr	r0, [pc, #120]	; (8008a60 <err_tcp+0x19c>)
 80089e6:	f00f fba3 	bl	8018130 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80089ea:	7dfb      	ldrb	r3, [r7, #23]
 80089ec:	2b04      	cmp	r3, #4
 80089ee:	d104      	bne.n	80089fa <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	6a1b      	ldr	r3, [r3, #32]
 80089f4:	2200      	movs	r2, #0
 80089f6:	711a      	strb	r2, [r3, #4]
 80089f8:	e003      	b.n	8008a02 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	78fa      	ldrb	r2, [r7, #3]
 8008a00:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	330c      	adds	r3, #12
 8008a0a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8008a0c:	68b8      	ldr	r0, [r7, #8]
 8008a0e:	f00f f9f9 	bl	8017e04 <sys_sem_valid>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d106      	bne.n	8008a26 <err_tcp+0x162>
 8008a18:	4b0f      	ldr	r3, [pc, #60]	; (8008a58 <err_tcp+0x194>)
 8008a1a:	f240 12ef 	movw	r2, #495	; 0x1ef
 8008a1e:	4912      	ldr	r1, [pc, #72]	; (8008a68 <err_tcp+0x1a4>)
 8008a20:	480f      	ldr	r0, [pc, #60]	; (8008a60 <err_tcp+0x19c>)
 8008a22:	f00f fb85 	bl	8018130 <iprintf>
      conn->current_msg = NULL;
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8008a2c:	68b8      	ldr	r0, [r7, #8]
 8008a2e:	f00f f9cf 	bl	8017dd0 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8008a32:	e00b      	b.n	8008a4c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	6a1b      	ldr	r3, [r3, #32]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d008      	beq.n	8008a4e <err_tcp+0x18a>
 8008a3c:	4b06      	ldr	r3, [pc, #24]	; (8008a58 <err_tcp+0x194>)
 8008a3e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8008a42:	490a      	ldr	r1, [pc, #40]	; (8008a6c <err_tcp+0x1a8>)
 8008a44:	4806      	ldr	r0, [pc, #24]	; (8008a60 <err_tcp+0x19c>)
 8008a46:	f00f fb73 	bl	8018130 <iprintf>
  }
}
 8008a4a:	e000      	b.n	8008a4e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8008a4c:	bf00      	nop
}
 8008a4e:	bf00      	nop
 8008a50:	3720      	adds	r7, #32
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	08019484 	.word	0x08019484
 8008a5c:	080195dc 	.word	0x080195dc
 8008a60:	080194c8 	.word	0x080194c8
 8008a64:	080195ec 	.word	0x080195ec
 8008a68:	08019608 	.word	0x08019608
 8008a6c:	08019624 	.word	0x08019624

08008a70 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8008a7e:	6879      	ldr	r1, [r7, #4]
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f005 fc27 	bl	800e2d4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8008a86:	490a      	ldr	r1, [pc, #40]	; (8008ab0 <setup_tcp+0x40>)
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f005 fc35 	bl	800e2f8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8008a8e:	4909      	ldr	r1, [pc, #36]	; (8008ab4 <setup_tcp+0x44>)
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	f005 fc53 	bl	800e33c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8008a96:	2202      	movs	r2, #2
 8008a98:	4907      	ldr	r1, [pc, #28]	; (8008ab8 <setup_tcp+0x48>)
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f005 fcaa 	bl	800e3f4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8008aa0:	4906      	ldr	r1, [pc, #24]	; (8008abc <setup_tcp+0x4c>)
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f005 fc6c 	bl	800e380 <tcp_err>
}
 8008aa8:	bf00      	nop
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	08008649 	.word	0x08008649
 8008ab4:	0800881d 	.word	0x0800881d
 8008ab8:	08008755 	.word	0x08008755
 8008abc:	080088c5 	.word	0x080088c5

08008ac0 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8008ac0:	b590      	push	{r4, r7, lr}
 8008ac2:	b089      	sub	sp, #36	; 0x24
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	4613      	mov	r3, r2
 8008acc:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d102      	bne.n	8008ade <accept_function+0x1e>
    return ERR_VAL;
 8008ad8:	f06f 0305 	mvn.w	r3, #5
 8008adc:	e0a1      	b.n	8008c22 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	3314      	adds	r3, #20
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f00f f8fd 	bl	8017ce2 <sys_mbox_valid>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d102      	bne.n	8008af4 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8008aee:	f06f 0305 	mvn.w	r3, #5
 8008af2:	e096      	b.n	8008c22 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d11b      	bne.n	8008b32 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	f103 0414 	add.w	r4, r3, #20
 8008b00:	f06f 000c 	mvn.w	r0, #12
 8008b04:	f7ff fcb2 	bl	800846c <lwip_netconn_err_to_msg>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	f00f f873 	bl	8017bf8 <sys_mbox_trypost>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d109      	bne.n	8008b2c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d005      	beq.n	8008b2c <accept_function+0x6c>
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b24:	2200      	movs	r2, #0
 8008b26:	2100      	movs	r1, #0
 8008b28:	69f8      	ldr	r0, [r7, #28]
 8008b2a:	4798      	blx	r3
    }
    return ERR_VAL;
 8008b2c:	f06f 0305 	mvn.w	r3, #5
 8008b30:	e077      	b.n	8008c22 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8008b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d006      	beq.n	8008b48 <accept_function+0x88>
 8008b3a:	4b3c      	ldr	r3, [pc, #240]	; (8008c2c <accept_function+0x16c>)
 8008b3c:	f240 222a 	movw	r2, #554	; 0x22a
 8008b40:	493b      	ldr	r1, [pc, #236]	; (8008c30 <accept_function+0x170>)
 8008b42:	483c      	ldr	r0, [pc, #240]	; (8008c34 <accept_function+0x174>)
 8008b44:	f00f faf4 	bl	8018130 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	781a      	ldrb	r2, [r3, #0]
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b50:	4619      	mov	r1, r3
 8008b52:	4610      	mov	r0, r2
 8008b54:	f000 f8f0 	bl	8008d38 <netconn_alloc>
 8008b58:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d11b      	bne.n	8008b98 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	f103 0414 	add.w	r4, r3, #20
 8008b66:	f06f 000c 	mvn.w	r0, #12
 8008b6a:	f7ff fc7f 	bl	800846c <lwip_netconn_err_to_msg>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	4619      	mov	r1, r3
 8008b72:	4620      	mov	r0, r4
 8008b74:	f00f f840 	bl	8017bf8 <sys_mbox_trypost>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d109      	bne.n	8008b92 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d005      	beq.n	8008b92 <accept_function+0xd2>
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	69f8      	ldr	r0, [r7, #28]
 8008b90:	4798      	blx	r3
    }
    return ERR_MEM;
 8008b92:	f04f 33ff 	mov.w	r3, #4294967295
 8008b96:	e044      	b.n	8008c22 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8008b9e:	69b8      	ldr	r0, [r7, #24]
 8008ba0:	f7ff ff66 	bl	8008a70 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	3314      	adds	r3, #20
 8008ba8:	69b9      	ldr	r1, [r7, #24]
 8008baa:	4618      	mov	r0, r3
 8008bac:	f00f f824 	bl	8017bf8 <sys_mbox_trypost>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d02a      	beq.n	8008c0c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	6978      	ldr	r0, [r7, #20]
 8008bc0:	f005 fb88 	bl	800e2d4 <tcp_arg>
    tcp_recv(pcb, NULL);
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	6978      	ldr	r0, [r7, #20]
 8008bc8:	f005 fb96 	bl	800e2f8 <tcp_recv>
    tcp_sent(pcb, NULL);
 8008bcc:	2100      	movs	r1, #0
 8008bce:	6978      	ldr	r0, [r7, #20]
 8008bd0:	f005 fbb4 	bl	800e33c <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	6978      	ldr	r0, [r7, #20]
 8008bda:	f005 fc0b 	bl	800e3f4 <tcp_poll>
    tcp_err(pcb, NULL);
 8008bde:	2100      	movs	r1, #0
 8008be0:	6978      	ldr	r0, [r7, #20]
 8008be2:	f005 fbcd 	bl	800e380 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	2200      	movs	r2, #0
 8008bea:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	3310      	adds	r3, #16
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f00e ffef 	bl	8017bd4 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	3310      	adds	r3, #16
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f00f f882 	bl	8017d04 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8008c00:	69b8      	ldr	r0, [r7, #24]
 8008c02:	f000 f907 	bl	8008e14 <netconn_free>
    return ERR_MEM;
 8008c06:	f04f 33ff 	mov.w	r3, #4294967295
 8008c0a:	e00a      	b.n	8008c22 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d005      	beq.n	8008c20 <accept_function+0x160>
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c18:	2200      	movs	r2, #0
 8008c1a:	2100      	movs	r1, #0
 8008c1c:	69f8      	ldr	r0, [r7, #28]
 8008c1e:	4798      	blx	r3
  }

  return ERR_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3724      	adds	r7, #36	; 0x24
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd90      	pop	{r4, r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	08019484 	.word	0x08019484
 8008c30:	08019640 	.word	0x08019640
 8008c34:	080194c8 	.word	0x080194c8

08008c38 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8008c38:	b590      	push	{r4, r7, lr}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008c40:	2300      	movs	r3, #0
 8008c42:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d006      	beq.n	8008c5c <pcb_new+0x24>
 8008c4e:	4b2b      	ldr	r3, [pc, #172]	; (8008cfc <pcb_new+0xc4>)
 8008c50:	f240 2265 	movw	r2, #613	; 0x265
 8008c54:	492a      	ldr	r1, [pc, #168]	; (8008d00 <pcb_new+0xc8>)
 8008c56:	482b      	ldr	r0, [pc, #172]	; (8008d04 <pcb_new+0xcc>)
 8008c58:	f00f fa6a 	bl	8018130 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c66:	2b10      	cmp	r3, #16
 8008c68:	d022      	beq.n	8008cb0 <pcb_new+0x78>
 8008c6a:	2b20      	cmp	r3, #32
 8008c6c:	d133      	bne.n	8008cd6 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681c      	ldr	r4, [r3, #0]
 8008c72:	7bfb      	ldrb	r3, [r7, #15]
 8008c74:	4618      	mov	r0, r3
 8008c76:	f00a fdd4 	bl	8013822 <udp_new_ip_type>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d02a      	beq.n	8008cde <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	2b22      	cmp	r3, #34	; 0x22
 8008c90:	d104      	bne.n	8008c9c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	6858      	ldr	r0, [r3, #4]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	4917      	ldr	r1, [pc, #92]	; (8008d08 <pcb_new+0xd0>)
 8008caa:	f00a fd41 	bl	8013730 <udp_recv>
      }
      break;
 8008cae:	e016      	b.n	8008cde <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681c      	ldr	r4, [r3, #0]
 8008cb4:	7bfb      	ldrb	r3, [r7, #15]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f005 fafe 	bl	800e2b8 <tcp_new_ip_type>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00b      	beq.n	8008ce2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7ff fece 	bl	8008a70 <setup_tcp>
      }
      break;
 8008cd4:	e005      	b.n	8008ce2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	22fa      	movs	r2, #250	; 0xfa
 8008cda:	711a      	strb	r2, [r3, #4]
      return;
 8008cdc:	e00a      	b.n	8008cf4 <pcb_new+0xbc>
      break;
 8008cde:	bf00      	nop
 8008ce0:	e000      	b.n	8008ce4 <pcb_new+0xac>
      break;
 8008ce2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d102      	bne.n	8008cf4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	22ff      	movs	r2, #255	; 0xff
 8008cf2:	711a      	strb	r2, [r3, #4]
  }
}
 8008cf4:	3714      	adds	r7, #20
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd90      	pop	{r4, r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	08019484 	.word	0x08019484
 8008d00:	08019668 	.word	0x08019668
 8008d04:	080194c8 	.word	0x080194c8
 8008d08:	0800854d 	.word	0x0800854d

08008d0c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d102      	bne.n	8008d2e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f7ff ff85 	bl	8008c38 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8008d2e:	bf00      	nop
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
	...

08008d38 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b086      	sub	sp, #24
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	4603      	mov	r3, r0
 8008d40:	6039      	str	r1, [r7, #0]
 8008d42:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8008d44:	2300      	movs	r3, #0
 8008d46:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008d48:	2007      	movs	r0, #7
 8008d4a:	f002 fcdf 	bl	800b70c <memp_malloc>
 8008d4e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d101      	bne.n	8008d5a <netconn_alloc+0x22>
    return NULL;
 8008d56:	2300      	movs	r3, #0
 8008d58:	e052      	b.n	8008e00 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	79fa      	ldrb	r2, [r7, #7]
 8008d64:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8008d6c:	79fb      	ldrb	r3, [r7, #7]
 8008d6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d72:	2b10      	cmp	r3, #16
 8008d74:	d004      	beq.n	8008d80 <netconn_alloc+0x48>
 8008d76:	2b20      	cmp	r3, #32
 8008d78:	d105      	bne.n	8008d86 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8008d7a:	2306      	movs	r3, #6
 8008d7c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8008d7e:	e00a      	b.n	8008d96 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8008d80:	2306      	movs	r3, #6
 8008d82:	617b      	str	r3, [r7, #20]
      break;
 8008d84:	e007      	b.n	8008d96 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8008d86:	4b20      	ldr	r3, [pc, #128]	; (8008e08 <netconn_alloc+0xd0>)
 8008d88:	f240 22e5 	movw	r2, #741	; 0x2e5
 8008d8c:	491f      	ldr	r1, [pc, #124]	; (8008e0c <netconn_alloc+0xd4>)
 8008d8e:	4820      	ldr	r0, [pc, #128]	; (8008e10 <netconn_alloc+0xd8>)
 8008d90:	f00f f9ce 	bl	8018130 <iprintf>
      goto free_and_return;
 8008d94:	e02f      	b.n	8008df6 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	3310      	adds	r3, #16
 8008d9a:	6979      	ldr	r1, [r7, #20]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f00e fef7 	bl	8017b90 <sys_mbox_new>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d125      	bne.n	8008df4 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	330c      	adds	r3, #12
 8008dac:	2100      	movs	r1, #0
 8008dae:	4618      	mov	r0, r3
 8008db0:	f00e ffb5 	bl	8017d1e <sys_sem_new>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d005      	beq.n	8008dc6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	3310      	adds	r3, #16
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f00e ff08 	bl	8017bd4 <sys_mbox_free>
    goto free_and_return;
 8008dc4:	e017      	b.n	8008df6 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	3314      	adds	r3, #20
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f00e ff9a 	bl	8017d04 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8008ddc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	683a      	ldr	r2, [r7, #0]
 8008de2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2200      	movs	r2, #0
 8008de8:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	7cfa      	ldrb	r2, [r7, #19]
 8008dee:	771a      	strb	r2, [r3, #28]
  return conn;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	e005      	b.n	8008e00 <netconn_alloc+0xc8>
    goto free_and_return;
 8008df4:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8008df6:	68f9      	ldr	r1, [r7, #12]
 8008df8:	2007      	movs	r0, #7
 8008dfa:	f002 fcfd 	bl	800b7f8 <memp_free>
  return NULL;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3718      	adds	r7, #24
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	08019484 	.word	0x08019484
 8008e0c:	08019688 	.word	0x08019688
 8008e10:	080194c8 	.word	0x080194c8

08008e14 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d006      	beq.n	8008e32 <netconn_free+0x1e>
 8008e24:	4b1b      	ldr	r3, [pc, #108]	; (8008e94 <netconn_free+0x80>)
 8008e26:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008e2a:	491b      	ldr	r1, [pc, #108]	; (8008e98 <netconn_free+0x84>)
 8008e2c:	481b      	ldr	r0, [pc, #108]	; (8008e9c <netconn_free+0x88>)
 8008e2e:	f00f f97f 	bl	8018130 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	3310      	adds	r3, #16
 8008e36:	4618      	mov	r0, r3
 8008e38:	f00e ff53 	bl	8017ce2 <sys_mbox_valid>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d006      	beq.n	8008e50 <netconn_free+0x3c>
 8008e42:	4b14      	ldr	r3, [pc, #80]	; (8008e94 <netconn_free+0x80>)
 8008e44:	f240 3223 	movw	r2, #803	; 0x323
 8008e48:	4915      	ldr	r1, [pc, #84]	; (8008ea0 <netconn_free+0x8c>)
 8008e4a:	4814      	ldr	r0, [pc, #80]	; (8008e9c <netconn_free+0x88>)
 8008e4c:	f00f f970 	bl	8018130 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	3314      	adds	r3, #20
 8008e54:	4618      	mov	r0, r3
 8008e56:	f00e ff44 	bl	8017ce2 <sys_mbox_valid>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d006      	beq.n	8008e6e <netconn_free+0x5a>
 8008e60:	4b0c      	ldr	r3, [pc, #48]	; (8008e94 <netconn_free+0x80>)
 8008e62:	f240 3226 	movw	r2, #806	; 0x326
 8008e66:	490f      	ldr	r1, [pc, #60]	; (8008ea4 <netconn_free+0x90>)
 8008e68:	480c      	ldr	r0, [pc, #48]	; (8008e9c <netconn_free+0x88>)
 8008e6a:	f00f f961 	bl	8018130 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	330c      	adds	r3, #12
 8008e72:	4618      	mov	r0, r3
 8008e74:	f00e ffb9 	bl	8017dea <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	330c      	adds	r3, #12
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f00e ffd2 	bl	8017e26 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8008e82:	6879      	ldr	r1, [r7, #4]
 8008e84:	2007      	movs	r0, #7
 8008e86:	f002 fcb7 	bl	800b7f8 <memp_free>
}
 8008e8a:	bf00      	nop
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	08019484 	.word	0x08019484
 8008e98:	080196b0 	.word	0x080196b0
 8008e9c:	080194c8 	.word	0x080194c8
 8008ea0:	080196e0 	.word	0x080196e0
 8008ea4:	0801971c 	.word	0x0801971c

08008ea8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b086      	sub	sp, #24
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	3310      	adds	r3, #16
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f00e ff14 	bl	8017ce2 <sys_mbox_valid>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d02f      	beq.n	8008f20 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008ec0:	e018      	b.n	8008ef4 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008eca:	2b10      	cmp	r3, #16
 8008ecc:	d10e      	bne.n	8008eec <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	f107 020f 	add.w	r2, r7, #15
 8008ed4:	4611      	mov	r1, r2
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7ff fafe 	bl	80084d8 <lwip_netconn_is_err_msg>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d108      	bne.n	8008ef4 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f003 fb37 	bl	800c558 <pbuf_free>
 8008eea:	e003      	b.n	8008ef4 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f000 fe92 	bl	8009c18 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	3310      	adds	r3, #16
 8008ef8:	f107 0210 	add.w	r2, r7, #16
 8008efc:	4611      	mov	r1, r2
 8008efe:	4618      	mov	r0, r3
 8008f00:	f00e fed3 	bl	8017caa <sys_arch_mbox_tryfetch>
 8008f04:	4603      	mov	r3, r0
 8008f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f0a:	d1da      	bne.n	8008ec2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	3310      	adds	r3, #16
 8008f10:	4618      	mov	r0, r3
 8008f12:	f00e fe5f 	bl	8017bd4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	3310      	adds	r3, #16
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f00e fef2 	bl	8017d04 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	3314      	adds	r3, #20
 8008f24:	4618      	mov	r0, r3
 8008f26:	f00e fedc 	bl	8017ce2 <sys_mbox_valid>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d034      	beq.n	8008f9a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008f30:	e01d      	b.n	8008f6e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	f107 020e 	add.w	r2, r7, #14
 8008f38:	4611      	mov	r1, r2
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7ff facc 	bl	80084d8 <lwip_netconn_is_err_msg>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d113      	bne.n	8008f6e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8008f4a:	6978      	ldr	r0, [r7, #20]
 8008f4c:	f7ff ffac 	bl	8008ea8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d007      	beq.n	8008f68 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f004 f8fb 	bl	800d158 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	2200      	movs	r2, #0
 8008f66:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8008f68:	6978      	ldr	r0, [r7, #20]
 8008f6a:	f7ff ff53 	bl	8008e14 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	3314      	adds	r3, #20
 8008f72:	f107 0210 	add.w	r2, r7, #16
 8008f76:	4611      	mov	r1, r2
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f00e fe96 	bl	8017caa <sys_arch_mbox_tryfetch>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f84:	d1d5      	bne.n	8008f32 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	3314      	adds	r3, #20
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f00e fe22 	bl	8017bd4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	3314      	adds	r3, #20
 8008f94:	4618      	mov	r0, r3
 8008f96:	f00e feb5 	bl	8017d04 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8008f9a:	bf00      	nop
 8008f9c:	3718      	adds	r7, #24
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
	...

08008fa4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b086      	sub	sp, #24
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	460b      	mov	r3, r1
 8008fae:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d106      	bne.n	8008fc8 <lwip_netconn_do_close_internal+0x24>
 8008fba:	4b87      	ldr	r3, [pc, #540]	; (80091d8 <lwip_netconn_do_close_internal+0x234>)
 8008fbc:	f240 32a2 	movw	r2, #930	; 0x3a2
 8008fc0:	4986      	ldr	r1, [pc, #536]	; (80091dc <lwip_netconn_do_close_internal+0x238>)
 8008fc2:	4887      	ldr	r0, [pc, #540]	; (80091e0 <lwip_netconn_do_close_internal+0x23c>)
 8008fc4:	f00f f8b4 	bl	8018130 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fd0:	2b10      	cmp	r3, #16
 8008fd2:	d006      	beq.n	8008fe2 <lwip_netconn_do_close_internal+0x3e>
 8008fd4:	4b80      	ldr	r3, [pc, #512]	; (80091d8 <lwip_netconn_do_close_internal+0x234>)
 8008fd6:	f240 32a3 	movw	r2, #931	; 0x3a3
 8008fda:	4982      	ldr	r1, [pc, #520]	; (80091e4 <lwip_netconn_do_close_internal+0x240>)
 8008fdc:	4880      	ldr	r0, [pc, #512]	; (80091e0 <lwip_netconn_do_close_internal+0x23c>)
 8008fde:	f00f f8a7 	bl	8018130 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	785b      	ldrb	r3, [r3, #1]
 8008fe6:	2b04      	cmp	r3, #4
 8008fe8:	d006      	beq.n	8008ff8 <lwip_netconn_do_close_internal+0x54>
 8008fea:	4b7b      	ldr	r3, [pc, #492]	; (80091d8 <lwip_netconn_do_close_internal+0x234>)
 8008fec:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8008ff0:	497d      	ldr	r1, [pc, #500]	; (80091e8 <lwip_netconn_do_close_internal+0x244>)
 8008ff2:	487b      	ldr	r0, [pc, #492]	; (80091e0 <lwip_netconn_do_close_internal+0x23c>)
 8008ff4:	f00f f89c 	bl	8018130 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d106      	bne.n	800900e <lwip_netconn_do_close_internal+0x6a>
 8009000:	4b75      	ldr	r3, [pc, #468]	; (80091d8 <lwip_netconn_do_close_internal+0x234>)
 8009002:	f240 32a5 	movw	r2, #933	; 0x3a5
 8009006:	4979      	ldr	r1, [pc, #484]	; (80091ec <lwip_netconn_do_close_internal+0x248>)
 8009008:	4875      	ldr	r0, [pc, #468]	; (80091e0 <lwip_netconn_do_close_internal+0x23c>)
 800900a:	f00f f891 	bl	8018130 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a1b      	ldr	r3, [r3, #32]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d106      	bne.n	8009024 <lwip_netconn_do_close_internal+0x80>
 8009016:	4b70      	ldr	r3, [pc, #448]	; (80091d8 <lwip_netconn_do_close_internal+0x234>)
 8009018:	f240 32a6 	movw	r2, #934	; 0x3a6
 800901c:	4974      	ldr	r1, [pc, #464]	; (80091f0 <lwip_netconn_do_close_internal+0x24c>)
 800901e:	4870      	ldr	r0, [pc, #448]	; (80091e0 <lwip_netconn_do_close_internal+0x23c>)
 8009020:	f00f f886 	bl	8018130 <iprintf>

  tpcb = conn->pcb.tcp;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a1b      	ldr	r3, [r3, #32]
 800902e:	7a1b      	ldrb	r3, [r3, #8]
 8009030:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8009032:	7bfb      	ldrb	r3, [r7, #15]
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800903a:	7bfb      	ldrb	r3, [r7, #15]
 800903c:	f003 0302 	and.w	r3, r3, #2
 8009040:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8009042:	7bfb      	ldrb	r3, [r7, #15]
 8009044:	2b03      	cmp	r3, #3
 8009046:	d102      	bne.n	800904e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8009048:	2301      	movs	r3, #1
 800904a:	75bb      	strb	r3, [r7, #22]
 800904c:	e01f      	b.n	800908e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800904e:	7bbb      	ldrb	r3, [r7, #14]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00e      	beq.n	8009072 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009058:	2b05      	cmp	r3, #5
 800905a:	d007      	beq.n	800906c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8009060:	2b06      	cmp	r3, #6
 8009062:	d003      	beq.n	800906c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009068:	2b08      	cmp	r3, #8
 800906a:	d102      	bne.n	8009072 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800906c:	2301      	movs	r3, #1
 800906e:	75bb      	strb	r3, [r7, #22]
 8009070:	e00d      	b.n	800908e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8009072:	7b7b      	ldrb	r3, [r7, #13]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d008      	beq.n	800908a <lwip_netconn_do_close_internal+0xe6>
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	8b5b      	ldrh	r3, [r3, #26]
 800907c:	f003 0310 	and.w	r3, r3, #16
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8009084:	2301      	movs	r3, #1
 8009086:	75bb      	strb	r3, [r7, #22]
 8009088:	e001      	b.n	800908e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800908a:	2300      	movs	r3, #0
 800908c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800908e:	7dbb      	ldrb	r3, [r7, #22]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d003      	beq.n	800909c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009094:	2100      	movs	r1, #0
 8009096:	6938      	ldr	r0, [r7, #16]
 8009098:	f005 f91c 	bl	800e2d4 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	7d1b      	ldrb	r3, [r3, #20]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d104      	bne.n	80090ae <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80090a4:	2100      	movs	r1, #0
 80090a6:	6938      	ldr	r0, [r7, #16]
 80090a8:	f005 f98c 	bl	800e3c4 <tcp_accept>
 80090ac:	e01d      	b.n	80090ea <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80090ae:	7bbb      	ldrb	r3, [r7, #14]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d007      	beq.n	80090c4 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 80090b4:	2100      	movs	r1, #0
 80090b6:	6938      	ldr	r0, [r7, #16]
 80090b8:	f005 f91e 	bl	800e2f8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80090bc:	2100      	movs	r1, #0
 80090be:	6938      	ldr	r0, [r7, #16]
 80090c0:	f005 f980 	bl	800e3c4 <tcp_accept>
    }
    if (shut_tx) {
 80090c4:	7b7b      	ldrb	r3, [r7, #13]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d003      	beq.n	80090d2 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80090ca:	2100      	movs	r1, #0
 80090cc:	6938      	ldr	r0, [r7, #16]
 80090ce:	f005 f935 	bl	800e33c <tcp_sent>
    }
    if (shut_close) {
 80090d2:	7dbb      	ldrb	r3, [r7, #22]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d008      	beq.n	80090ea <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 80090d8:	2200      	movs	r2, #0
 80090da:	2100      	movs	r1, #0
 80090dc:	6938      	ldr	r0, [r7, #16]
 80090de:	f005 f989 	bl	800e3f4 <tcp_poll>
      tcp_err(tpcb, NULL);
 80090e2:	2100      	movs	r1, #0
 80090e4:	6938      	ldr	r0, [r7, #16]
 80090e6:	f005 f94b 	bl	800e380 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80090ea:	7dbb      	ldrb	r3, [r7, #22]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d005      	beq.n	80090fc <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80090f0:	6938      	ldr	r0, [r7, #16]
 80090f2:	f003 feeb 	bl	800cecc <tcp_close>
 80090f6:	4603      	mov	r3, r0
 80090f8:	75fb      	strb	r3, [r7, #23]
 80090fa:	e007      	b.n	800910c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80090fc:	7bbb      	ldrb	r3, [r7, #14]
 80090fe:	7b7a      	ldrb	r2, [r7, #13]
 8009100:	4619      	mov	r1, r3
 8009102:	6938      	ldr	r0, [r7, #16]
 8009104:	f003 ff0e 	bl	800cf24 <tcp_shutdown>
 8009108:	4603      	mov	r3, r0
 800910a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800910c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d102      	bne.n	800911a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009114:	2301      	movs	r3, #1
 8009116:	757b      	strb	r3, [r7, #21]
 8009118:	e016      	b.n	8009148 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800911a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800911e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009122:	d10f      	bne.n	8009144 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6a1b      	ldr	r3, [r3, #32]
 8009128:	7a5b      	ldrb	r3, [r3, #9]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d10c      	bne.n	8009148 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800912e:	2301      	movs	r3, #1
 8009130:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8009132:	7dbb      	ldrb	r3, [r7, #22]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d007      	beq.n	8009148 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009138:	6938      	ldr	r0, [r7, #16]
 800913a:	f004 f80d 	bl	800d158 <tcp_abort>
          err = ERR_OK;
 800913e:	2300      	movs	r3, #0
 8009140:	75fb      	strb	r3, [r7, #23]
 8009142:	e001      	b.n	8009148 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009144:	2301      	movs	r3, #1
 8009146:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009148:	7d7b      	ldrb	r3, [r7, #21]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d052      	beq.n	80091f4 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a1b      	ldr	r3, [r3, #32]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	330c      	adds	r3, #12
 8009156:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6a1b      	ldr	r3, [r3, #32]
 800915c:	7dfa      	ldrb	r2, [r7, #23]
 800915e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800916c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d129      	bne.n	80091c8 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8009174:	7dbb      	ldrb	r3, [r7, #22]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00c      	beq.n	8009194 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009184:	2b00      	cmp	r3, #0
 8009186:	d005      	beq.n	8009194 <lwip_netconn_do_close_internal+0x1f0>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918c:	2200      	movs	r2, #0
 800918e:	2104      	movs	r1, #4
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	4798      	blx	r3
      }
      if (shut_rx) {
 8009194:	7bbb      	ldrb	r3, [r7, #14]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d009      	beq.n	80091ae <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d005      	beq.n	80091ae <lwip_netconn_do_close_internal+0x20a>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a6:	2200      	movs	r2, #0
 80091a8:	2100      	movs	r1, #0
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	4798      	blx	r3
      }
      if (shut_tx) {
 80091ae:	7b7b      	ldrb	r3, [r7, #13]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d009      	beq.n	80091c8 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d005      	beq.n	80091c8 <lwip_netconn_do_close_internal+0x224>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c0:	2200      	movs	r2, #0
 80091c2:	2102      	movs	r1, #2
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80091c8:	78fb      	ldrb	r3, [r7, #3]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d002      	beq.n	80091d4 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80091ce:	68b8      	ldr	r0, [r7, #8]
 80091d0:	f00e fdfe 	bl	8017dd0 <sys_sem_signal>
    }
    return ERR_OK;
 80091d4:	2300      	movs	r3, #0
 80091d6:	e03c      	b.n	8009252 <lwip_netconn_do_close_internal+0x2ae>
 80091d8:	08019484 	.word	0x08019484
 80091dc:	08019758 	.word	0x08019758
 80091e0:	080194c8 	.word	0x080194c8
 80091e4:	08019768 	.word	0x08019768
 80091e8:	08019788 	.word	0x08019788
 80091ec:	080197ac 	.word	0x080197ac
 80091f0:	080195ec 	.word	0x080195ec
  }
  if (!close_finished) {
 80091f4:	7d7b      	ldrb	r3, [r7, #21]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d11e      	bne.n	8009238 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	7d1b      	ldrb	r3, [r3, #20]
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d106      	bne.n	8009210 <lwip_netconn_do_close_internal+0x26c>
 8009202:	4b16      	ldr	r3, [pc, #88]	; (800925c <lwip_netconn_do_close_internal+0x2b8>)
 8009204:	f240 4241 	movw	r2, #1089	; 0x441
 8009208:	4915      	ldr	r1, [pc, #84]	; (8009260 <lwip_netconn_do_close_internal+0x2bc>)
 800920a:	4816      	ldr	r0, [pc, #88]	; (8009264 <lwip_netconn_do_close_internal+0x2c0>)
 800920c:	f00e ff90 	bl	8018130 <iprintf>
    if (shut_tx) {
 8009210:	7b7b      	ldrb	r3, [r7, #13]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d003      	beq.n	800921e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8009216:	4914      	ldr	r1, [pc, #80]	; (8009268 <lwip_netconn_do_close_internal+0x2c4>)
 8009218:	6938      	ldr	r0, [r7, #16]
 800921a:	f005 f88f 	bl	800e33c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800921e:	2201      	movs	r2, #1
 8009220:	4912      	ldr	r1, [pc, #72]	; (800926c <lwip_netconn_do_close_internal+0x2c8>)
 8009222:	6938      	ldr	r0, [r7, #16]
 8009224:	f005 f8e6 	bl	800e3f4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009228:	4911      	ldr	r1, [pc, #68]	; (8009270 <lwip_netconn_do_close_internal+0x2cc>)
 800922a:	6938      	ldr	r0, [r7, #16]
 800922c:	f005 f8a8 	bl	800e380 <tcp_err>
    tcp_arg(tpcb, conn);
 8009230:	6879      	ldr	r1, [r7, #4]
 8009232:	6938      	ldr	r0, [r7, #16]
 8009234:	f005 f84e 	bl	800e2d4 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009238:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d106      	bne.n	800924e <lwip_netconn_do_close_internal+0x2aa>
 8009240:	4b06      	ldr	r3, [pc, #24]	; (800925c <lwip_netconn_do_close_internal+0x2b8>)
 8009242:	f240 424d 	movw	r2, #1101	; 0x44d
 8009246:	490b      	ldr	r1, [pc, #44]	; (8009274 <lwip_netconn_do_close_internal+0x2d0>)
 8009248:	4806      	ldr	r0, [pc, #24]	; (8009264 <lwip_netconn_do_close_internal+0x2c0>)
 800924a:	f00e ff71 	bl	8018130 <iprintf>
  return err;
 800924e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3718      	adds	r7, #24
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	08019484 	.word	0x08019484
 8009260:	080197c0 	.word	0x080197c0
 8009264:	080194c8 	.word	0x080194c8
 8009268:	0800881d 	.word	0x0800881d
 800926c:	08008755 	.word	0x08008755
 8009270:	080088c5 	.word	0x080088c5
 8009274:	080197e4 	.word	0x080197e4

08009278 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	785b      	ldrb	r3, [r3, #1]
 800928a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800928c:	7afb      	ldrb	r3, [r7, #11]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00d      	beq.n	80092ae <lwip_netconn_do_delconn+0x36>
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800929c:	2b10      	cmp	r3, #16
 800929e:	d006      	beq.n	80092ae <lwip_netconn_do_delconn+0x36>
 80092a0:	4b60      	ldr	r3, [pc, #384]	; (8009424 <lwip_netconn_do_delconn+0x1ac>)
 80092a2:	f240 425e 	movw	r2, #1118	; 0x45e
 80092a6:	4960      	ldr	r1, [pc, #384]	; (8009428 <lwip_netconn_do_delconn+0x1b0>)
 80092a8:	4860      	ldr	r0, [pc, #384]	; (800942c <lwip_netconn_do_delconn+0x1b4>)
 80092aa:	f00e ff41 	bl	8018130 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80092ae:	7afb      	ldrb	r3, [r7, #11]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d005      	beq.n	80092c0 <lwip_netconn_do_delconn+0x48>
 80092b4:	7afb      	ldrb	r3, [r7, #11]
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	d002      	beq.n	80092c0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80092ba:	7afb      	ldrb	r3, [r7, #11]
 80092bc:	2b03      	cmp	r3, #3
 80092be:	d109      	bne.n	80092d4 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80092c0:	7afb      	ldrb	r3, [r7, #11]
 80092c2:	2b03      	cmp	r3, #3
 80092c4:	d10a      	bne.n	80092dc <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	7f1b      	ldrb	r3, [r3, #28]
 80092cc:	f003 0304 	and.w	r3, r3, #4
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d103      	bne.n	80092dc <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	22fb      	movs	r2, #251	; 0xfb
 80092d8:	711a      	strb	r2, [r3, #4]
 80092da:	e097      	b.n	800940c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80092dc:	7afb      	ldrb	r3, [r7, #11]
 80092de:	2b03      	cmp	r3, #3
 80092e0:	d10d      	bne.n	80092fe <lwip_netconn_do_delconn+0x86>
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	7f1b      	ldrb	r3, [r3, #28]
 80092e8:	f003 0304 	and.w	r3, r3, #4
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d106      	bne.n	80092fe <lwip_netconn_do_delconn+0x86>
 80092f0:	4b4c      	ldr	r3, [pc, #304]	; (8009424 <lwip_netconn_do_delconn+0x1ac>)
 80092f2:	f240 427a 	movw	r2, #1146	; 0x47a
 80092f6:	494e      	ldr	r1, [pc, #312]	; (8009430 <lwip_netconn_do_delconn+0x1b8>)
 80092f8:	484c      	ldr	r0, [pc, #304]	; (800942c <lwip_netconn_do_delconn+0x1b4>)
 80092fa:	f00e ff19 	bl	8018130 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2200      	movs	r2, #0
 8009302:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4618      	mov	r0, r3
 800930a:	f7ff fdcd 	bl	8008ea8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d05f      	beq.n	80093d8 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009322:	2b10      	cmp	r3, #16
 8009324:	d00d      	beq.n	8009342 <lwip_netconn_do_delconn+0xca>
 8009326:	2b20      	cmp	r3, #32
 8009328:	d151      	bne.n	80093ce <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	4618      	mov	r0, r3
 800933c:	f00a fa18 	bl	8013770 <udp_remove>
          break;
 8009340:	e046      	b.n	80093d0 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	6a1b      	ldr	r3, [r3, #32]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d006      	beq.n	800935a <lwip_netconn_do_delconn+0xe2>
 800934c:	4b35      	ldr	r3, [pc, #212]	; (8009424 <lwip_netconn_do_delconn+0x1ac>)
 800934e:	f240 4294 	movw	r2, #1172	; 0x494
 8009352:	4938      	ldr	r1, [pc, #224]	; (8009434 <lwip_netconn_do_delconn+0x1bc>)
 8009354:	4835      	ldr	r0, [pc, #212]	; (800942c <lwip_netconn_do_delconn+0x1b4>)
 8009356:	f00e feeb 	bl	8018130 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2204      	movs	r2, #4
 8009360:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2203      	movs	r2, #3
 8009366:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2100      	movs	r1, #0
 8009376:	4618      	mov	r0, r3
 8009378:	f7ff fe14 	bl	8008fa4 <lwip_netconn_do_close_internal>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d04b      	beq.n	800941a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	785b      	ldrb	r3, [r3, #1]
 8009388:	2b04      	cmp	r3, #4
 800938a:	d006      	beq.n	800939a <lwip_netconn_do_delconn+0x122>
 800938c:	4b25      	ldr	r3, [pc, #148]	; (8009424 <lwip_netconn_do_delconn+0x1ac>)
 800938e:	f240 429a 	movw	r2, #1178	; 0x49a
 8009392:	4929      	ldr	r1, [pc, #164]	; (8009438 <lwip_netconn_do_delconn+0x1c0>)
 8009394:	4825      	ldr	r0, [pc, #148]	; (800942c <lwip_netconn_do_delconn+0x1b4>)
 8009396:	f00e fecb 	bl	8018130 <iprintf>
            UNLOCK_TCPIP_CORE();
 800939a:	4828      	ldr	r0, [pc, #160]	; (800943c <lwip_netconn_do_delconn+0x1c4>)
 800939c:	f00e fd89 	bl	8017eb2 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	330c      	adds	r3, #12
 80093a6:	2100      	movs	r1, #0
 80093a8:	4618      	mov	r0, r3
 80093aa:	f00e fce0 	bl	8017d6e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80093ae:	4823      	ldr	r0, [pc, #140]	; (800943c <lwip_netconn_do_delconn+0x1c4>)
 80093b0:	f00e fd70 	bl	8017e94 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	785b      	ldrb	r3, [r3, #1]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d02d      	beq.n	800941a <lwip_netconn_do_delconn+0x1a2>
 80093be:	4b19      	ldr	r3, [pc, #100]	; (8009424 <lwip_netconn_do_delconn+0x1ac>)
 80093c0:	f240 429e 	movw	r2, #1182	; 0x49e
 80093c4:	491c      	ldr	r1, [pc, #112]	; (8009438 <lwip_netconn_do_delconn+0x1c0>)
 80093c6:	4819      	ldr	r0, [pc, #100]	; (800942c <lwip_netconn_do_delconn+0x1b4>)
 80093c8:	f00e feb2 	bl	8018130 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80093cc:	e025      	b.n	800941a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 80093ce:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2200      	movs	r2, #0
 80093d6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d007      	beq.n	80093f2 <lwip_netconn_do_delconn+0x17a>
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	6810      	ldr	r0, [r2, #0]
 80093ec:	2200      	movs	r2, #0
 80093ee:	2100      	movs	r1, #0
 80093f0:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d007      	beq.n	800940c <lwip_netconn_do_delconn+0x194>
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	6810      	ldr	r0, [r2, #0]
 8009406:	2200      	movs	r2, #0
 8009408:	2102      	movs	r1, #2
 800940a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	330c      	adds	r3, #12
 8009412:	4618      	mov	r0, r3
 8009414:	f00e fcf6 	bl	8017e04 <sys_sem_valid>
 8009418:	e000      	b.n	800941c <lwip_netconn_do_delconn+0x1a4>
          return;
 800941a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	08019484 	.word	0x08019484
 8009428:	080197f4 	.word	0x080197f4
 800942c:	080194c8 	.word	0x080194c8
 8009430:	08019808 	.word	0x08019808
 8009434:	08019828 	.word	0x08019828
 8009438:	08019844 	.word	0x08019844
 800943c:	2000d1a4 	.word	0x2000d1a4

08009440 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d025      	beq.n	80094a2 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009460:	2b10      	cmp	r3, #16
 8009462:	d00e      	beq.n	8009482 <lwip_netconn_do_bind+0x42>
 8009464:	2b20      	cmp	r3, #32
 8009466:	d119      	bne.n	800949c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6858      	ldr	r0, [r3, #4]
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	6899      	ldr	r1, [r3, #8]
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	899b      	ldrh	r3, [r3, #12]
 8009476:	461a      	mov	r2, r3
 8009478:	f00a f864 	bl	8013544 <udp_bind>
 800947c:	4603      	mov	r3, r0
 800947e:	73fb      	strb	r3, [r7, #15]
        break;
 8009480:	e011      	b.n	80094a6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	6858      	ldr	r0, [r3, #4]
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	6899      	ldr	r1, [r3, #8]
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	899b      	ldrh	r3, [r3, #12]
 8009490:	461a      	mov	r2, r3
 8009492:	f003 fe6d 	bl	800d170 <tcp_bind>
 8009496:	4603      	mov	r3, r0
 8009498:	73fb      	strb	r3, [r7, #15]
        break;
 800949a:	e004      	b.n	80094a6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800949c:	23fa      	movs	r3, #250	; 0xfa
 800949e:	73fb      	strb	r3, [r7, #15]
        break;
 80094a0:	e001      	b.n	80094a6 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 80094a2:	23fa      	movs	r3, #250	; 0xfa
 80094a4:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	7bfa      	ldrb	r2, [r7, #15]
 80094aa:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80094ac:	bf00      	nop
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b086      	sub	sp, #24
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d07f      	beq.n	80095ca <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094d4:	2b10      	cmp	r3, #16
 80094d6:	d175      	bne.n	80095c4 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	785b      	ldrb	r3, [r3, #1]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d165      	bne.n	80095ae <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	7d1b      	ldrb	r3, [r3, #20]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d002      	beq.n	80094f4 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 80094ee:	23fa      	movs	r3, #250	; 0xfa
 80094f0:	72fb      	strb	r3, [r7, #11]
 80094f2:	e06c      	b.n	80095ce <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 80094f4:	23ff      	movs	r3, #255	; 0xff
 80094f6:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	f107 020b 	add.w	r2, r7, #11
 8009502:	7cf9      	ldrb	r1, [r7, #19]
 8009504:	4618      	mov	r0, r3
 8009506:	f003 fefd 	bl	800d304 <tcp_listen_with_backlog_and_err>
 800950a:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d05d      	beq.n	80095ce <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	3310      	adds	r3, #16
 8009518:	4618      	mov	r0, r3
 800951a:	f00e fbe2 	bl	8017ce2 <sys_mbox_valid>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00b      	beq.n	800953c <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	3310      	adds	r3, #16
 800952a:	4618      	mov	r0, r3
 800952c:	f00e fb52 	bl	8017bd4 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	3310      	adds	r3, #16
 8009536:	4618      	mov	r0, r3
 8009538:	f00e fbe4 	bl	8017d04 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800953c:	2300      	movs	r3, #0
 800953e:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	3314      	adds	r3, #20
 8009546:	4618      	mov	r0, r3
 8009548:	f00e fbcb 	bl	8017ce2 <sys_mbox_valid>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d108      	bne.n	8009564 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	3314      	adds	r3, #20
 8009558:	2106      	movs	r1, #6
 800955a:	4618      	mov	r0, r3
 800955c:	f00e fb18 	bl	8017b90 <sys_mbox_new>
 8009560:	4603      	mov	r3, r0
 8009562:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8009564:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d118      	bne.n	800959e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2202      	movs	r2, #2
 8009572:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	685a      	ldr	r2, [r3, #4]
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4619      	mov	r1, r3
 8009588:	4610      	mov	r0, r2
 800958a:	f004 fea3 	bl	800e2d4 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	4912      	ldr	r1, [pc, #72]	; (80095e0 <lwip_netconn_do_listen+0x12c>)
 8009596:	4618      	mov	r0, r3
 8009598:	f004 ff14 	bl	800e3c4 <tcp_accept>
 800959c:	e017      	b.n	80095ce <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f003 fc94 	bl	800cecc <tcp_close>
              msg->conn->pcb.tcp = NULL;
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2200      	movs	r2, #0
 80095aa:	605a      	str	r2, [r3, #4]
 80095ac:	e00f      	b.n	80095ce <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	785b      	ldrb	r3, [r3, #1]
 80095b4:	2b02      	cmp	r3, #2
 80095b6:	d102      	bne.n	80095be <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 80095b8:	2300      	movs	r3, #0
 80095ba:	72fb      	strb	r3, [r7, #11]
 80095bc:	e007      	b.n	80095ce <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 80095be:	23f5      	movs	r3, #245	; 0xf5
 80095c0:	72fb      	strb	r3, [r7, #11]
 80095c2:	e004      	b.n	80095ce <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 80095c4:	23f0      	movs	r3, #240	; 0xf0
 80095c6:	72fb      	strb	r3, [r7, #11]
 80095c8:	e001      	b.n	80095ce <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 80095ca:	23f5      	movs	r3, #245	; 0xf5
 80095cc:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 80095ce:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80095d6:	bf00      	nop
 80095d8:	3718      	adds	r7, #24
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	08008ac1 	.word	0x08008ac1

080095e4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b086      	sub	sp, #24
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	2200      	movs	r2, #0
 80095f4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d022      	beq.n	8009646 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800960a:	2b10      	cmp	r3, #16
 800960c:	d11b      	bne.n	8009646 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800961a:	d202      	bcs.n	8009622 <lwip_netconn_do_recv+0x3e>
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	b29b      	uxth	r3, r3
 8009620:	e001      	b.n	8009626 <lwip_netconn_do_recv+0x42>
 8009622:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009626:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	89fa      	ldrh	r2, [r7, #14]
 8009630:	4611      	mov	r1, r2
 8009632:	4618      	mov	r0, r3
 8009634:	f003 ff6a 	bl	800d50c <tcp_recved>
        remaining -= recved;
 8009638:	89fb      	ldrh	r3, [r7, #14]
 800963a:	697a      	ldr	r2, [r7, #20]
 800963c:	1ad3      	subs	r3, r2, r3
 800963e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d1e6      	bne.n	8009614 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009646:	bf00      	nop
 8009648:	3718      	adds	r7, #24
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
	...

08009650 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b088      	sub	sp, #32
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	460b      	mov	r3, r1
 800965a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800965c:	2300      	movs	r3, #0
 800965e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d106      	bne.n	8009674 <lwip_netconn_do_writemore+0x24>
 8009666:	4b96      	ldr	r3, [pc, #600]	; (80098c0 <lwip_netconn_do_writemore+0x270>)
 8009668:	f240 6273 	movw	r2, #1651	; 0x673
 800966c:	4995      	ldr	r1, [pc, #596]	; (80098c4 <lwip_netconn_do_writemore+0x274>)
 800966e:	4896      	ldr	r0, [pc, #600]	; (80098c8 <lwip_netconn_do_writemore+0x278>)
 8009670:	f00e fd5e 	bl	8018130 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	785b      	ldrb	r3, [r3, #1]
 8009678:	2b01      	cmp	r3, #1
 800967a:	d006      	beq.n	800968a <lwip_netconn_do_writemore+0x3a>
 800967c:	4b90      	ldr	r3, [pc, #576]	; (80098c0 <lwip_netconn_do_writemore+0x270>)
 800967e:	f240 6274 	movw	r2, #1652	; 0x674
 8009682:	4992      	ldr	r1, [pc, #584]	; (80098cc <lwip_netconn_do_writemore+0x27c>)
 8009684:	4890      	ldr	r0, [pc, #576]	; (80098c8 <lwip_netconn_do_writemore+0x278>)
 8009686:	f00e fd53 	bl	8018130 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a1b      	ldr	r3, [r3, #32]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d106      	bne.n	80096a0 <lwip_netconn_do_writemore+0x50>
 8009692:	4b8b      	ldr	r3, [pc, #556]	; (80098c0 <lwip_netconn_do_writemore+0x270>)
 8009694:	f240 6275 	movw	r2, #1653	; 0x675
 8009698:	498d      	ldr	r1, [pc, #564]	; (80098d0 <lwip_netconn_do_writemore+0x280>)
 800969a:	488b      	ldr	r0, [pc, #556]	; (80098c8 <lwip_netconn_do_writemore+0x278>)
 800969c:	f00e fd48 	bl	8018130 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d106      	bne.n	80096b6 <lwip_netconn_do_writemore+0x66>
 80096a8:	4b85      	ldr	r3, [pc, #532]	; (80098c0 <lwip_netconn_do_writemore+0x270>)
 80096aa:	f240 6276 	movw	r2, #1654	; 0x676
 80096ae:	4989      	ldr	r1, [pc, #548]	; (80098d4 <lwip_netconn_do_writemore+0x284>)
 80096b0:	4885      	ldr	r0, [pc, #532]	; (80098c8 <lwip_netconn_do_writemore+0x278>)
 80096b2:	f00e fd3d 	bl	8018130 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a1b      	ldr	r3, [r3, #32]
 80096ba:	699a      	ldr	r2, [r3, #24]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6a1b      	ldr	r3, [r3, #32]
 80096c0:	695b      	ldr	r3, [r3, #20]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d306      	bcc.n	80096d4 <lwip_netconn_do_writemore+0x84>
 80096c6:	4b7e      	ldr	r3, [pc, #504]	; (80098c0 <lwip_netconn_do_writemore+0x270>)
 80096c8:	f240 6277 	movw	r2, #1655	; 0x677
 80096cc:	4982      	ldr	r1, [pc, #520]	; (80098d8 <lwip_netconn_do_writemore+0x288>)
 80096ce:	487e      	ldr	r0, [pc, #504]	; (80098c8 <lwip_netconn_do_writemore+0x278>)
 80096d0:	f00e fd2e 	bl	8018130 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6a1b      	ldr	r3, [r3, #32]
 80096d8:	899b      	ldrh	r3, [r3, #12]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d106      	bne.n	80096ec <lwip_netconn_do_writemore+0x9c>
 80096de:	4b78      	ldr	r3, [pc, #480]	; (80098c0 <lwip_netconn_do_writemore+0x270>)
 80096e0:	f240 6279 	movw	r2, #1657	; 0x679
 80096e4:	497d      	ldr	r1, [pc, #500]	; (80098dc <lwip_netconn_do_writemore+0x28c>)
 80096e6:	4878      	ldr	r0, [pc, #480]	; (80098c8 <lwip_netconn_do_writemore+0x278>)
 80096e8:	f00e fd22 	bl	8018130 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6a1b      	ldr	r3, [r3, #32]
 80096f0:	7f1b      	ldrb	r3, [r3, #28]
 80096f2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	7f1b      	ldrb	r3, [r3, #28]
 80096f8:	f003 0302 	and.w	r3, r3, #2
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d104      	bne.n	800970a <lwip_netconn_do_writemore+0xba>
 8009700:	7ebb      	ldrb	r3, [r7, #26]
 8009702:	f003 0304 	and.w	r3, r3, #4
 8009706:	2b00      	cmp	r3, #0
 8009708:	d001      	beq.n	800970e <lwip_netconn_do_writemore+0xbe>
 800970a:	2301      	movs	r3, #1
 800970c:	e000      	b.n	8009710 <lwip_netconn_do_writemore+0xc0>
 800970e:	2300      	movs	r3, #0
 8009710:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6a1b      	ldr	r3, [r3, #32]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	691b      	ldr	r3, [r3, #16]
 8009720:	4413      	add	r3, r2
 8009722:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6a1b      	ldr	r3, [r3, #32]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	685a      	ldr	r2, [r3, #4]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6a1b      	ldr	r3, [r3, #32]
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800973c:	d307      	bcc.n	800974e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800973e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009742:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009744:	7ebb      	ldrb	r3, [r7, #26]
 8009746:	f043 0302 	orr.w	r3, r3, #2
 800974a:	76bb      	strb	r3, [r7, #26]
 800974c:	e001      	b.n	8009752 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800975a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800975c:	89fa      	ldrh	r2, [r7, #14]
 800975e:	8bbb      	ldrh	r3, [r7, #28]
 8009760:	429a      	cmp	r2, r3
 8009762:	d216      	bcs.n	8009792 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8009764:	89fb      	ldrh	r3, [r7, #14]
 8009766:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8009768:	7e3b      	ldrb	r3, [r7, #24]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00d      	beq.n	800978a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800976e:	8bbb      	ldrh	r3, [r7, #28]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d10e      	bne.n	8009792 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6a1b      	ldr	r3, [r3, #32]
 8009778:	699b      	ldr	r3, [r3, #24]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d102      	bne.n	8009784 <lwip_netconn_do_writemore+0x134>
 800977e:	f06f 0306 	mvn.w	r3, #6
 8009782:	e000      	b.n	8009786 <lwip_netconn_do_writemore+0x136>
 8009784:	2300      	movs	r3, #0
 8009786:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8009788:	e07d      	b.n	8009886 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800978a:	7ebb      	ldrb	r3, [r7, #26]
 800978c:	f043 0302 	orr.w	r3, r3, #2
 8009790:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a1b      	ldr	r3, [r3, #32]
 8009796:	691a      	ldr	r2, [r3, #16]
 8009798:	8bbb      	ldrh	r3, [r7, #28]
 800979a:	441a      	add	r2, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a1b      	ldr	r3, [r3, #32]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d906      	bls.n	80097b6 <lwip_netconn_do_writemore+0x166>
 80097a8:	4b45      	ldr	r3, [pc, #276]	; (80098c0 <lwip_netconn_do_writemore+0x270>)
 80097aa:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80097ae:	494c      	ldr	r1, [pc, #304]	; (80098e0 <lwip_netconn_do_writemore+0x290>)
 80097b0:	4845      	ldr	r0, [pc, #276]	; (80098c8 <lwip_netconn_do_writemore+0x278>)
 80097b2:	f00e fcbd 	bl	8018130 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80097b6:	8bbb      	ldrh	r3, [r7, #28]
 80097b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097bc:	4293      	cmp	r3, r2
 80097be:	d103      	bne.n	80097c8 <lwip_netconn_do_writemore+0x178>
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097c6:	d209      	bcs.n	80097dc <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80097cc:	8bba      	ldrh	r2, [r7, #28]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d10b      	bne.n	80097ea <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a1b      	ldr	r3, [r3, #32]
 80097d6:	899b      	ldrh	r3, [r3, #12]
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d906      	bls.n	80097ea <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80097dc:	2301      	movs	r3, #1
 80097de:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80097e0:	7ebb      	ldrb	r3, [r7, #26]
 80097e2:	f043 0302 	orr.w	r3, r3, #2
 80097e6:	76bb      	strb	r3, [r7, #26]
 80097e8:	e001      	b.n	80097ee <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80097ea:	2300      	movs	r3, #0
 80097ec:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6858      	ldr	r0, [r3, #4]
 80097f2:	7ebb      	ldrb	r3, [r7, #26]
 80097f4:	8bba      	ldrh	r2, [r7, #28]
 80097f6:	6979      	ldr	r1, [r7, #20]
 80097f8:	f007 fcae 	bl	8011158 <tcp_write>
 80097fc:	4603      	mov	r3, r0
 80097fe:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8009800:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d12c      	bne.n	8009862 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a1b      	ldr	r3, [r3, #32]
 800980c:	6999      	ldr	r1, [r3, #24]
 800980e:	8bba      	ldrh	r2, [r7, #28]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6a1b      	ldr	r3, [r3, #32]
 8009814:	440a      	add	r2, r1
 8009816:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6a1b      	ldr	r3, [r3, #32]
 800981c:	6919      	ldr	r1, [r3, #16]
 800981e:	8bba      	ldrh	r2, [r7, #28]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6a1b      	ldr	r3, [r3, #32]
 8009824:	440a      	add	r2, r1
 8009826:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6a1b      	ldr	r3, [r3, #32]
 800982c:	691a      	ldr	r2, [r3, #16]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6a1b      	ldr	r3, [r3, #32]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	429a      	cmp	r2, r3
 8009838:	d113      	bne.n	8009862 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a1b      	ldr	r3, [r3, #32]
 800983e:	899a      	ldrh	r2, [r3, #12]
 8009840:	3a01      	subs	r2, #1
 8009842:	b292      	uxth	r2, r2
 8009844:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6a1b      	ldr	r3, [r3, #32]
 800984a:	899b      	ldrh	r3, [r3, #12]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d008      	beq.n	8009862 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6a1b      	ldr	r3, [r3, #32]
 8009854:	689a      	ldr	r2, [r3, #8]
 8009856:	3208      	adds	r2, #8
 8009858:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a1b      	ldr	r3, [r3, #32]
 800985e:	2200      	movs	r2, #0
 8009860:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8009862:	7e7b      	ldrb	r3, [r7, #25]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d004      	beq.n	8009872 <lwip_netconn_do_writemore+0x222>
 8009868:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800986c:	2b00      	cmp	r3, #0
 800986e:	f43f af50 	beq.w	8009712 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8009872:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d004      	beq.n	8009884 <lwip_netconn_do_writemore+0x234>
 800987a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800987e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009882:	d146      	bne.n	8009912 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8009884:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8009886:	7e3b      	ldrb	r3, [r7, #24]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d02b      	beq.n	80098e4 <lwip_netconn_do_writemore+0x294>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6a1b      	ldr	r3, [r3, #32]
 8009890:	699a      	ldr	r2, [r3, #24]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a1b      	ldr	r3, [r3, #32]
 8009896:	695b      	ldr	r3, [r3, #20]
 8009898:	429a      	cmp	r2, r3
 800989a:	d223      	bcs.n	80098e4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d005      	beq.n	80098b0 <lwip_netconn_do_writemore+0x260>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a8:	2200      	movs	r2, #0
 80098aa:	2103      	movs	r1, #3
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	7f1b      	ldrb	r3, [r3, #28]
 80098b4:	f043 0310 	orr.w	r3, r3, #16
 80098b8:	b2da      	uxtb	r2, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	771a      	strb	r2, [r3, #28]
 80098be:	e028      	b.n	8009912 <lwip_netconn_do_writemore+0x2c2>
 80098c0:	08019484 	.word	0x08019484
 80098c4:	080195dc 	.word	0x080195dc
 80098c8:	080194c8 	.word	0x080194c8
 80098cc:	080198e4 	.word	0x080198e4
 80098d0:	080195ec 	.word	0x080195ec
 80098d4:	08019904 	.word	0x08019904
 80098d8:	0801991c 	.word	0x0801991c
 80098dc:	0801995c 	.word	0x0801995c
 80098e0:	08019984 	.word	0x08019984
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80098ec:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80098f0:	d305      	bcc.n	80098fe <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80098fa:	2b04      	cmp	r3, #4
 80098fc:	d909      	bls.n	8009912 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009902:	2b00      	cmp	r3, #0
 8009904:	d005      	beq.n	8009912 <lwip_netconn_do_writemore+0x2c2>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990a:	2200      	movs	r2, #0
 800990c:	2103      	movs	r1, #3
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8009912:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d11d      	bne.n	8009956 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a1b      	ldr	r3, [r3, #32]
 800991e:	699a      	ldr	r2, [r3, #24]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6a1b      	ldr	r3, [r3, #32]
 8009924:	695b      	ldr	r3, [r3, #20]
 8009926:	429a      	cmp	r2, r3
 8009928:	d002      	beq.n	8009930 <lwip_netconn_do_writemore+0x2e0>
 800992a:	7e3b      	ldrb	r3, [r7, #24]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d001      	beq.n	8009934 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8009930:	2301      	movs	r3, #1
 8009932:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	4618      	mov	r0, r3
 800993a:	f008 f9f7 	bl	8011d2c <tcp_output>
 800993e:	4603      	mov	r3, r0
 8009940:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8009942:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009946:	f113 0f04 	cmn.w	r3, #4
 800994a:	d12c      	bne.n	80099a6 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800994c:	7b3b      	ldrb	r3, [r7, #12]
 800994e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009950:	2301      	movs	r3, #1
 8009952:	76fb      	strb	r3, [r7, #27]
 8009954:	e027      	b.n	80099a6 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8009956:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800995a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800995e:	d120      	bne.n	80099a2 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	4618      	mov	r0, r3
 8009966:	f008 f9e1 	bl	8011d2c <tcp_output>
 800996a:	4603      	mov	r3, r0
 800996c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800996e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009972:	f113 0f04 	cmn.w	r3, #4
 8009976:	d104      	bne.n	8009982 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009978:	7b7b      	ldrb	r3, [r7, #13]
 800997a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800997c:	2301      	movs	r3, #1
 800997e:	76fb      	strb	r3, [r7, #27]
 8009980:	e011      	b.n	80099a6 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8009982:	7e3b      	ldrb	r3, [r7, #24]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d00e      	beq.n	80099a6 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6a1b      	ldr	r3, [r3, #32]
 800998c:	699b      	ldr	r3, [r3, #24]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d102      	bne.n	8009998 <lwip_netconn_do_writemore+0x348>
 8009992:	f06f 0306 	mvn.w	r3, #6
 8009996:	e000      	b.n	800999a <lwip_netconn_do_writemore+0x34a>
 8009998:	2300      	movs	r3, #0
 800999a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800999c:	2301      	movs	r3, #1
 800999e:	76fb      	strb	r3, [r7, #27]
 80099a0:	e001      	b.n	80099a6 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80099a2:	2301      	movs	r3, #1
 80099a4:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 80099a6:	7efb      	ldrb	r3, [r7, #27]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d015      	beq.n	80099d8 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6a1b      	ldr	r3, [r3, #32]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	330c      	adds	r3, #12
 80099b4:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a1b      	ldr	r3, [r3, #32]
 80099ba:	7ffa      	ldrb	r2, [r7, #31]
 80099bc:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80099ca:	78fb      	ldrb	r3, [r7, #3]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d006      	beq.n	80099de <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80099d0:	68b8      	ldr	r0, [r7, #8]
 80099d2:	f00e f9fd 	bl	8017dd0 <sys_sem_signal>
 80099d6:	e002      	b.n	80099de <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80099d8:	f04f 33ff 	mov.w	r3, #4294967295
 80099dc:	e000      	b.n	80099e0 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 80099de:	2300      	movs	r3, #0
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3720      	adds	r7, #32
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7fe fd1c 	bl	8008436 <netconn_err>
 80099fe:	4603      	mov	r3, r0
 8009a00:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d166      	bne.n	8009ad8 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a14:	2b10      	cmp	r3, #16
 8009a16:	d15d      	bne.n	8009ad4 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	785b      	ldrb	r3, [r3, #1]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d002      	beq.n	8009a28 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8009a22:	23fb      	movs	r3, #251	; 0xfb
 8009a24:	73fb      	strb	r3, [r7, #15]
 8009a26:	e057      	b.n	8009ad8 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d04d      	beq.n	8009ace <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2201      	movs	r2, #1
 8009a38:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	6a1b      	ldr	r3, [r3, #32]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d006      	beq.n	8009a52 <lwip_netconn_do_write+0x6a>
 8009a44:	4b28      	ldr	r3, [pc, #160]	; (8009ae8 <lwip_netconn_do_write+0x100>)
 8009a46:	f240 7223 	movw	r2, #1827	; 0x723
 8009a4a:	4928      	ldr	r1, [pc, #160]	; (8009aec <lwip_netconn_do_write+0x104>)
 8009a4c:	4828      	ldr	r0, [pc, #160]	; (8009af0 <lwip_netconn_do_write+0x108>)
 8009a4e:	f00e fb6f 	bl	8018130 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	695b      	ldr	r3, [r3, #20]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d106      	bne.n	8009a68 <lwip_netconn_do_write+0x80>
 8009a5a:	4b23      	ldr	r3, [pc, #140]	; (8009ae8 <lwip_netconn_do_write+0x100>)
 8009a5c:	f240 7224 	movw	r2, #1828	; 0x724
 8009a60:	4924      	ldr	r1, [pc, #144]	; (8009af4 <lwip_netconn_do_write+0x10c>)
 8009a62:	4823      	ldr	r0, [pc, #140]	; (8009af0 <lwip_netconn_do_write+0x108>)
 8009a64:	f00e fb64 	bl	8018130 <iprintf>
        msg->conn->current_msg = msg;
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	68ba      	ldr	r2, [r7, #8]
 8009a6e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2100      	movs	r1, #0
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7ff fdea 	bl	8009650 <lwip_netconn_do_writemore>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d02e      	beq.n	8009ae0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	785b      	ldrb	r3, [r3, #1]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d006      	beq.n	8009a9a <lwip_netconn_do_write+0xb2>
 8009a8c:	4b16      	ldr	r3, [pc, #88]	; (8009ae8 <lwip_netconn_do_write+0x100>)
 8009a8e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8009a92:	4919      	ldr	r1, [pc, #100]	; (8009af8 <lwip_netconn_do_write+0x110>)
 8009a94:	4816      	ldr	r0, [pc, #88]	; (8009af0 <lwip_netconn_do_write+0x108>)
 8009a96:	f00e fb4b 	bl	8018130 <iprintf>
          UNLOCK_TCPIP_CORE();
 8009a9a:	4818      	ldr	r0, [pc, #96]	; (8009afc <lwip_netconn_do_write+0x114>)
 8009a9c:	f00e fa09 	bl	8017eb2 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	330c      	adds	r3, #12
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f00e f960 	bl	8017d6e <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8009aae:	4813      	ldr	r0, [pc, #76]	; (8009afc <lwip_netconn_do_write+0x114>)
 8009ab0:	f00e f9f0 	bl	8017e94 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	785b      	ldrb	r3, [r3, #1]
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d110      	bne.n	8009ae0 <lwip_netconn_do_write+0xf8>
 8009abe:	4b0a      	ldr	r3, [pc, #40]	; (8009ae8 <lwip_netconn_do_write+0x100>)
 8009ac0:	f240 722c 	movw	r2, #1836	; 0x72c
 8009ac4:	490c      	ldr	r1, [pc, #48]	; (8009af8 <lwip_netconn_do_write+0x110>)
 8009ac6:	480a      	ldr	r0, [pc, #40]	; (8009af0 <lwip_netconn_do_write+0x108>)
 8009ac8:	f00e fb32 	bl	8018130 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8009acc:	e008      	b.n	8009ae0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8009ace:	23f5      	movs	r3, #245	; 0xf5
 8009ad0:	73fb      	strb	r3, [r7, #15]
 8009ad2:	e001      	b.n	8009ad8 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8009ad4:	23fa      	movs	r3, #250	; 0xfa
 8009ad6:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	7bfa      	ldrb	r2, [r7, #15]
 8009adc:	711a      	strb	r2, [r3, #4]
 8009ade:	e000      	b.n	8009ae2 <lwip_netconn_do_write+0xfa>
        return;
 8009ae0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8009ae2:	3710      	adds	r7, #16
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	08019484 	.word	0x08019484
 8009aec:	08019828 	.word	0x08019828
 8009af0:	080194c8 	.word	0x080194c8
 8009af4:	080199b0 	.word	0x080199b0
 8009af8:	08019844 	.word	0x08019844
 8009afc:	2000d1a4 	.word	0x2000d1a4

08009b00 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	785b      	ldrb	r3, [r3, #1]
 8009b12:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d069      	beq.n	8009bf2 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8009b28:	2b10      	cmp	r3, #16
 8009b2a:	d162      	bne.n	8009bf2 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009b30:	2b03      	cmp	r3, #3
 8009b32:	d002      	beq.n	8009b3a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009b34:	7afb      	ldrb	r3, [r7, #11]
 8009b36:	2b02      	cmp	r3, #2
 8009b38:	d05b      	beq.n	8009bf2 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8009b3a:	7afb      	ldrb	r3, [r7, #11]
 8009b3c:	2b03      	cmp	r3, #3
 8009b3e:	d103      	bne.n	8009b48 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	22f5      	movs	r2, #245	; 0xf5
 8009b44:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009b46:	e059      	b.n	8009bfc <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8009b48:	7afb      	ldrb	r3, [r7, #11]
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d103      	bne.n	8009b56 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	22fb      	movs	r2, #251	; 0xfb
 8009b52:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009b54:	e052      	b.n	8009bfc <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	7a1b      	ldrb	r3, [r3, #8]
 8009b5a:	f003 0301 	and.w	r3, r3, #1
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d004      	beq.n	8009b6c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7ff f99e 	bl	8008ea8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6a1b      	ldr	r3, [r3, #32]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d006      	beq.n	8009b84 <lwip_netconn_do_close+0x84>
 8009b76:	4b23      	ldr	r3, [pc, #140]	; (8009c04 <lwip_netconn_do_close+0x104>)
 8009b78:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8009b7c:	4922      	ldr	r1, [pc, #136]	; (8009c08 <lwip_netconn_do_close+0x108>)
 8009b7e:	4823      	ldr	r0, [pc, #140]	; (8009c0c <lwip_netconn_do_close+0x10c>)
 8009b80:	f00e fad6 	bl	8018130 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2204      	movs	r2, #4
 8009b8a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	68fa      	ldr	r2, [r7, #12]
 8009b92:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2100      	movs	r1, #0
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7ff fa02 	bl	8008fa4 <lwip_netconn_do_close_internal>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d029      	beq.n	8009bfa <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	785b      	ldrb	r3, [r3, #1]
 8009bac:	2b04      	cmp	r3, #4
 8009bae:	d006      	beq.n	8009bbe <lwip_netconn_do_close+0xbe>
 8009bb0:	4b14      	ldr	r3, [pc, #80]	; (8009c04 <lwip_netconn_do_close+0x104>)
 8009bb2:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8009bb6:	4916      	ldr	r1, [pc, #88]	; (8009c10 <lwip_netconn_do_close+0x110>)
 8009bb8:	4814      	ldr	r0, [pc, #80]	; (8009c0c <lwip_netconn_do_close+0x10c>)
 8009bba:	f00e fab9 	bl	8018130 <iprintf>
        UNLOCK_TCPIP_CORE();
 8009bbe:	4815      	ldr	r0, [pc, #84]	; (8009c14 <lwip_netconn_do_close+0x114>)
 8009bc0:	f00e f977 	bl	8017eb2 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	330c      	adds	r3, #12
 8009bca:	2100      	movs	r1, #0
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f00e f8ce 	bl	8017d6e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8009bd2:	4810      	ldr	r0, [pc, #64]	; (8009c14 <lwip_netconn_do_close+0x114>)
 8009bd4:	f00e f95e 	bl	8017e94 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	785b      	ldrb	r3, [r3, #1]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d00b      	beq.n	8009bfa <lwip_netconn_do_close+0xfa>
 8009be2:	4b08      	ldr	r3, [pc, #32]	; (8009c04 <lwip_netconn_do_close+0x104>)
 8009be4:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8009be8:	4909      	ldr	r1, [pc, #36]	; (8009c10 <lwip_netconn_do_close+0x110>)
 8009bea:	4808      	ldr	r0, [pc, #32]	; (8009c0c <lwip_netconn_do_close+0x10c>)
 8009bec:	f00e faa0 	bl	8018130 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8009bf0:	e003      	b.n	8009bfa <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	22f5      	movs	r2, #245	; 0xf5
 8009bf6:	711a      	strb	r2, [r3, #4]
 8009bf8:	e000      	b.n	8009bfc <lwip_netconn_do_close+0xfc>
      return;
 8009bfa:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	08019484 	.word	0x08019484
 8009c08:	08019828 	.word	0x08019828
 8009c0c:	080194c8 	.word	0x080194c8
 8009c10:	08019844 	.word	0x08019844
 8009c14:	2000d1a4 	.word	0x2000d1a4

08009c18 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d013      	beq.n	8009c4e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d00b      	beq.n	8009c46 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4618      	mov	r0, r3
 8009c34:	f002 fc90 	bl	800c558 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	605a      	str	r2, [r3, #4]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	685a      	ldr	r2, [r3, #4]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8009c46:	6879      	ldr	r1, [r7, #4]
 8009c48:	2006      	movs	r0, #6
 8009c4a:	f001 fdd5 	bl	800b7f8 <memp_free>
  }
}
 8009c4e:	bf00      	nop
 8009c50:	3708      	adds	r7, #8
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
	...

08009c58 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d108      	bne.n	8009c7c <netbuf_data+0x24>
 8009c6a:	4b1b      	ldr	r3, [pc, #108]	; (8009cd8 <netbuf_data+0x80>)
 8009c6c:	22c6      	movs	r2, #198	; 0xc6
 8009c6e:	491b      	ldr	r1, [pc, #108]	; (8009cdc <netbuf_data+0x84>)
 8009c70:	481b      	ldr	r0, [pc, #108]	; (8009ce0 <netbuf_data+0x88>)
 8009c72:	f00e fa5d 	bl	8018130 <iprintf>
 8009c76:	f06f 030f 	mvn.w	r3, #15
 8009c7a:	e029      	b.n	8009cd0 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d108      	bne.n	8009c94 <netbuf_data+0x3c>
 8009c82:	4b15      	ldr	r3, [pc, #84]	; (8009cd8 <netbuf_data+0x80>)
 8009c84:	22c7      	movs	r2, #199	; 0xc7
 8009c86:	4917      	ldr	r1, [pc, #92]	; (8009ce4 <netbuf_data+0x8c>)
 8009c88:	4815      	ldr	r0, [pc, #84]	; (8009ce0 <netbuf_data+0x88>)
 8009c8a:	f00e fa51 	bl	8018130 <iprintf>
 8009c8e:	f06f 030f 	mvn.w	r3, #15
 8009c92:	e01d      	b.n	8009cd0 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d108      	bne.n	8009cac <netbuf_data+0x54>
 8009c9a:	4b0f      	ldr	r3, [pc, #60]	; (8009cd8 <netbuf_data+0x80>)
 8009c9c:	22c8      	movs	r2, #200	; 0xc8
 8009c9e:	4912      	ldr	r1, [pc, #72]	; (8009ce8 <netbuf_data+0x90>)
 8009ca0:	480f      	ldr	r0, [pc, #60]	; (8009ce0 <netbuf_data+0x88>)
 8009ca2:	f00e fa45 	bl	8018130 <iprintf>
 8009ca6:	f06f 030f 	mvn.w	r3, #15
 8009caa:	e011      	b.n	8009cd0 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d102      	bne.n	8009cba <netbuf_data+0x62>
    return ERR_BUF;
 8009cb4:	f06f 0301 	mvn.w	r3, #1
 8009cb8:	e00a      	b.n	8009cd0 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	685a      	ldr	r2, [r3, #4]
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	895a      	ldrh	r2, [r3, #10]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	080199dc 	.word	0x080199dc
 8009cdc:	08019ae4 	.word	0x08019ae4
 8009ce0:	08019a2c 	.word	0x08019a2c
 8009ce4:	08019b00 	.word	0x08019b00
 8009ce8:	08019b20 	.word	0x08019b20

08009cec <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d108      	bne.n	8009d0c <netbuf_next+0x20>
 8009cfa:	4b11      	ldr	r3, [pc, #68]	; (8009d40 <netbuf_next+0x54>)
 8009cfc:	22e0      	movs	r2, #224	; 0xe0
 8009cfe:	4911      	ldr	r1, [pc, #68]	; (8009d44 <netbuf_next+0x58>)
 8009d00:	4811      	ldr	r0, [pc, #68]	; (8009d48 <netbuf_next+0x5c>)
 8009d02:	f00e fa15 	bl	8018130 <iprintf>
 8009d06:	f04f 33ff 	mov.w	r3, #4294967295
 8009d0a:	e014      	b.n	8009d36 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d102      	bne.n	8009d1c <netbuf_next+0x30>
    return -1;
 8009d16:	f04f 33ff 	mov.w	r3, #4294967295
 8009d1a:	e00c      	b.n	8009d36 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d101      	bne.n	8009d34 <netbuf_next+0x48>
    return 1;
 8009d30:	2301      	movs	r3, #1
 8009d32:	e000      	b.n	8009d36 <netbuf_next+0x4a>
  }
  return 0;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3708      	adds	r7, #8
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	080199dc 	.word	0x080199dc
 8009d44:	08019b3c 	.word	0x08019b3c
 8009d48:	08019a2c 	.word	0x08019a2c

08009d4c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009d56:	f009 f8a1 	bl	8012e9c <sys_timeouts_sleeptime>
 8009d5a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d62:	d10b      	bne.n	8009d7c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009d64:	4813      	ldr	r0, [pc, #76]	; (8009db4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009d66:	f00e f8a4 	bl	8017eb2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	6839      	ldr	r1, [r7, #0]
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f00d ff5c 	bl	8017c2c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009d74:	480f      	ldr	r0, [pc, #60]	; (8009db4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009d76:	f00e f88d 	bl	8017e94 <sys_mutex_lock>
    return;
 8009d7a:	e018      	b.n	8009dae <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d102      	bne.n	8009d88 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009d82:	f009 f851 	bl	8012e28 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009d86:	e7e6      	b.n	8009d56 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009d88:	480a      	ldr	r0, [pc, #40]	; (8009db4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009d8a:	f00e f892 	bl	8017eb2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009d8e:	68fa      	ldr	r2, [r7, #12]
 8009d90:	6839      	ldr	r1, [r7, #0]
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f00d ff4a 	bl	8017c2c <sys_arch_mbox_fetch>
 8009d98:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009d9a:	4806      	ldr	r0, [pc, #24]	; (8009db4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009d9c:	f00e f87a 	bl	8017e94 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009da6:	d102      	bne.n	8009dae <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009da8:	f009 f83e 	bl	8012e28 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009dac:	e7d3      	b.n	8009d56 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	2000d1a4 	.word	0x2000d1a4

08009db8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009dc0:	4810      	ldr	r0, [pc, #64]	; (8009e04 <tcpip_thread+0x4c>)
 8009dc2:	f00e f867 	bl	8017e94 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009dc6:	4b10      	ldr	r3, [pc, #64]	; (8009e08 <tcpip_thread+0x50>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d005      	beq.n	8009dda <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009dce:	4b0e      	ldr	r3, [pc, #56]	; (8009e08 <tcpip_thread+0x50>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a0e      	ldr	r2, [pc, #56]	; (8009e0c <tcpip_thread+0x54>)
 8009dd4:	6812      	ldr	r2, [r2, #0]
 8009dd6:	4610      	mov	r0, r2
 8009dd8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009dda:	f107 030c 	add.w	r3, r7, #12
 8009dde:	4619      	mov	r1, r3
 8009de0:	480b      	ldr	r0, [pc, #44]	; (8009e10 <tcpip_thread+0x58>)
 8009de2:	f7ff ffb3 	bl	8009d4c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d106      	bne.n	8009dfa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009dec:	4b09      	ldr	r3, [pc, #36]	; (8009e14 <tcpip_thread+0x5c>)
 8009dee:	2291      	movs	r2, #145	; 0x91
 8009df0:	4909      	ldr	r1, [pc, #36]	; (8009e18 <tcpip_thread+0x60>)
 8009df2:	480a      	ldr	r0, [pc, #40]	; (8009e1c <tcpip_thread+0x64>)
 8009df4:	f00e f99c 	bl	8018130 <iprintf>
      continue;
 8009df8:	e003      	b.n	8009e02 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f000 f80f 	bl	8009e20 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009e02:	e7ea      	b.n	8009dda <tcpip_thread+0x22>
 8009e04:	2000d1a4 	.word	0x2000d1a4
 8009e08:	2000d198 	.word	0x2000d198
 8009e0c:	2000d19c 	.word	0x2000d19c
 8009e10:	2000d1a0 	.word	0x2000d1a0
 8009e14:	08019b74 	.word	0x08019b74
 8009e18:	08019ba4 	.word	0x08019ba4
 8009e1c:	08019bc4 	.word	0x08019bc4

08009e20 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	d026      	beq.n	8009e7e <tcpip_thread_handle_msg+0x5e>
 8009e30:	2b02      	cmp	r3, #2
 8009e32:	dc2b      	bgt.n	8009e8c <tcpip_thread_handle_msg+0x6c>
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d002      	beq.n	8009e3e <tcpip_thread_handle_msg+0x1e>
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d015      	beq.n	8009e68 <tcpip_thread_handle_msg+0x48>
 8009e3c:	e026      	b.n	8009e8c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	6850      	ldr	r0, [r2, #4]
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	6892      	ldr	r2, [r2, #8]
 8009e4a:	4611      	mov	r1, r2
 8009e4c:	4798      	blx	r3
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d004      	beq.n	8009e5e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f002 fb7d 	bl	800c558 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009e5e:	6879      	ldr	r1, [r7, #4]
 8009e60:	2009      	movs	r0, #9
 8009e62:	f001 fcc9 	bl	800b7f8 <memp_free>
      break;
 8009e66:	e018      	b.n	8009e9a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	6892      	ldr	r2, [r2, #8]
 8009e70:	4610      	mov	r0, r2
 8009e72:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009e74:	6879      	ldr	r1, [r7, #4]
 8009e76:	2008      	movs	r0, #8
 8009e78:	f001 fcbe 	bl	800b7f8 <memp_free>
      break;
 8009e7c:	e00d      	b.n	8009e9a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	6892      	ldr	r2, [r2, #8]
 8009e86:	4610      	mov	r0, r2
 8009e88:	4798      	blx	r3
      break;
 8009e8a:	e006      	b.n	8009e9a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009e8c:	4b05      	ldr	r3, [pc, #20]	; (8009ea4 <tcpip_thread_handle_msg+0x84>)
 8009e8e:	22cf      	movs	r2, #207	; 0xcf
 8009e90:	4905      	ldr	r1, [pc, #20]	; (8009ea8 <tcpip_thread_handle_msg+0x88>)
 8009e92:	4806      	ldr	r0, [pc, #24]	; (8009eac <tcpip_thread_handle_msg+0x8c>)
 8009e94:	f00e f94c 	bl	8018130 <iprintf>
      break;
 8009e98:	bf00      	nop
  }
}
 8009e9a:	bf00      	nop
 8009e9c:	3708      	adds	r7, #8
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	08019b74 	.word	0x08019b74
 8009ea8:	08019ba4 	.word	0x08019ba4
 8009eac:	08019bc4 	.word	0x08019bc4

08009eb0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b086      	sub	sp, #24
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009ebc:	481a      	ldr	r0, [pc, #104]	; (8009f28 <tcpip_inpkt+0x78>)
 8009ebe:	f00d ff10 	bl	8017ce2 <sys_mbox_valid>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d105      	bne.n	8009ed4 <tcpip_inpkt+0x24>
 8009ec8:	4b18      	ldr	r3, [pc, #96]	; (8009f2c <tcpip_inpkt+0x7c>)
 8009eca:	22fc      	movs	r2, #252	; 0xfc
 8009ecc:	4918      	ldr	r1, [pc, #96]	; (8009f30 <tcpip_inpkt+0x80>)
 8009ece:	4819      	ldr	r0, [pc, #100]	; (8009f34 <tcpip_inpkt+0x84>)
 8009ed0:	f00e f92e 	bl	8018130 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009ed4:	2009      	movs	r0, #9
 8009ed6:	f001 fc19 	bl	800b70c <memp_malloc>
 8009eda:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d102      	bne.n	8009ee8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ee6:	e01a      	b.n	8009f1e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	2200      	movs	r2, #0
 8009eec:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	68fa      	ldr	r2, [r7, #12]
 8009ef2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	68ba      	ldr	r2, [r7, #8]
 8009ef8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009f00:	6979      	ldr	r1, [r7, #20]
 8009f02:	4809      	ldr	r0, [pc, #36]	; (8009f28 <tcpip_inpkt+0x78>)
 8009f04:	f00d fe78 	bl	8017bf8 <sys_mbox_trypost>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d006      	beq.n	8009f1c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009f0e:	6979      	ldr	r1, [r7, #20]
 8009f10:	2009      	movs	r0, #9
 8009f12:	f001 fc71 	bl	800b7f8 <memp_free>
    return ERR_MEM;
 8009f16:	f04f 33ff 	mov.w	r3, #4294967295
 8009f1a:	e000      	b.n	8009f1e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009f1c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3718      	adds	r7, #24
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	2000d1a0 	.word	0x2000d1a0
 8009f2c:	08019b74 	.word	0x08019b74
 8009f30:	08019bec 	.word	0x08019bec
 8009f34:	08019bc4 	.word	0x08019bc4

08009f38 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009f48:	f003 0318 	and.w	r3, r3, #24
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d006      	beq.n	8009f5e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009f50:	4a08      	ldr	r2, [pc, #32]	; (8009f74 <tcpip_input+0x3c>)
 8009f52:	6839      	ldr	r1, [r7, #0]
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f7ff ffab 	bl	8009eb0 <tcpip_inpkt>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	e005      	b.n	8009f6a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009f5e:	4a06      	ldr	r2, [pc, #24]	; (8009f78 <tcpip_input+0x40>)
 8009f60:	6839      	ldr	r1, [r7, #0]
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f7ff ffa4 	bl	8009eb0 <tcpip_inpkt>
 8009f68:	4603      	mov	r3, r0
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3708      	adds	r7, #8
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	080179e5 	.word	0x080179e5
 8009f78:	080168b1 	.word	0x080168b1

08009f7c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009f86:	4819      	ldr	r0, [pc, #100]	; (8009fec <tcpip_try_callback+0x70>)
 8009f88:	f00d feab 	bl	8017ce2 <sys_mbox_valid>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d106      	bne.n	8009fa0 <tcpip_try_callback+0x24>
 8009f92:	4b17      	ldr	r3, [pc, #92]	; (8009ff0 <tcpip_try_callback+0x74>)
 8009f94:	f240 125d 	movw	r2, #349	; 0x15d
 8009f98:	4916      	ldr	r1, [pc, #88]	; (8009ff4 <tcpip_try_callback+0x78>)
 8009f9a:	4817      	ldr	r0, [pc, #92]	; (8009ff8 <tcpip_try_callback+0x7c>)
 8009f9c:	f00e f8c8 	bl	8018130 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009fa0:	2008      	movs	r0, #8
 8009fa2:	f001 fbb3 	bl	800b70c <memp_malloc>
 8009fa6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d102      	bne.n	8009fb4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009fae:	f04f 33ff 	mov.w	r3, #4294967295
 8009fb2:	e017      	b.n	8009fe4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	683a      	ldr	r2, [r7, #0]
 8009fc4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009fc6:	68f9      	ldr	r1, [r7, #12]
 8009fc8:	4808      	ldr	r0, [pc, #32]	; (8009fec <tcpip_try_callback+0x70>)
 8009fca:	f00d fe15 	bl	8017bf8 <sys_mbox_trypost>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d006      	beq.n	8009fe2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009fd4:	68f9      	ldr	r1, [r7, #12]
 8009fd6:	2008      	movs	r0, #8
 8009fd8:	f001 fc0e 	bl	800b7f8 <memp_free>
    return ERR_MEM;
 8009fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8009fe0:	e000      	b.n	8009fe4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009fe2:	2300      	movs	r3, #0
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3710      	adds	r7, #16
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	2000d1a0 	.word	0x2000d1a0
 8009ff0:	08019b74 	.word	0x08019b74
 8009ff4:	08019bec 	.word	0x08019bec
 8009ff8:	08019bc4 	.word	0x08019bc4

08009ffc <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	60b9      	str	r1, [r7, #8]
 800a006:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800a008:	4806      	ldr	r0, [pc, #24]	; (800a024 <tcpip_send_msg_wait_sem+0x28>)
 800a00a:	f00d ff43 	bl	8017e94 <sys_mutex_lock>
  fn(apimsg);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	68b8      	ldr	r0, [r7, #8]
 800a012:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800a014:	4803      	ldr	r0, [pc, #12]	; (800a024 <tcpip_send_msg_wait_sem+0x28>)
 800a016:	f00d ff4c 	bl	8017eb2 <sys_mutex_unlock>
  return ERR_OK;
 800a01a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	2000d1a4 	.word	0x2000d1a4

0800a028 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af02      	add	r7, sp, #8
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a032:	f000 fec1 	bl	800adb8 <lwip_init>

  tcpip_init_done = initfunc;
 800a036:	4a17      	ldr	r2, [pc, #92]	; (800a094 <tcpip_init+0x6c>)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a03c:	4a16      	ldr	r2, [pc, #88]	; (800a098 <tcpip_init+0x70>)
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a042:	2106      	movs	r1, #6
 800a044:	4815      	ldr	r0, [pc, #84]	; (800a09c <tcpip_init+0x74>)
 800a046:	f00d fda3 	bl	8017b90 <sys_mbox_new>
 800a04a:	4603      	mov	r3, r0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d006      	beq.n	800a05e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a050:	4b13      	ldr	r3, [pc, #76]	; (800a0a0 <tcpip_init+0x78>)
 800a052:	f240 2261 	movw	r2, #609	; 0x261
 800a056:	4913      	ldr	r1, [pc, #76]	; (800a0a4 <tcpip_init+0x7c>)
 800a058:	4813      	ldr	r0, [pc, #76]	; (800a0a8 <tcpip_init+0x80>)
 800a05a:	f00e f869 	bl	8018130 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a05e:	4813      	ldr	r0, [pc, #76]	; (800a0ac <tcpip_init+0x84>)
 800a060:	f00d fefc 	bl	8017e5c <sys_mutex_new>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d006      	beq.n	800a078 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a06a:	4b0d      	ldr	r3, [pc, #52]	; (800a0a0 <tcpip_init+0x78>)
 800a06c:	f240 2265 	movw	r2, #613	; 0x265
 800a070:	490f      	ldr	r1, [pc, #60]	; (800a0b0 <tcpip_init+0x88>)
 800a072:	480d      	ldr	r0, [pc, #52]	; (800a0a8 <tcpip_init+0x80>)
 800a074:	f00e f85c 	bl	8018130 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a078:	2300      	movs	r3, #0
 800a07a:	9300      	str	r3, [sp, #0]
 800a07c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a080:	2200      	movs	r2, #0
 800a082:	490c      	ldr	r1, [pc, #48]	; (800a0b4 <tcpip_init+0x8c>)
 800a084:	480c      	ldr	r0, [pc, #48]	; (800a0b8 <tcpip_init+0x90>)
 800a086:	f00d ff21 	bl	8017ecc <sys_thread_new>
}
 800a08a:	bf00      	nop
 800a08c:	3708      	adds	r7, #8
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	2000d198 	.word	0x2000d198
 800a098:	2000d19c 	.word	0x2000d19c
 800a09c:	2000d1a0 	.word	0x2000d1a0
 800a0a0:	08019b74 	.word	0x08019b74
 800a0a4:	08019bfc 	.word	0x08019bfc
 800a0a8:	08019bc4 	.word	0x08019bc4
 800a0ac:	2000d1a4 	.word	0x2000d1a4
 800a0b0:	08019c20 	.word	0x08019c20
 800a0b4:	08009db9 	.word	0x08009db9
 800a0b8:	08019c44 	.word	0x08019c44

0800a0bc <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d002      	beq.n	800a0d2 <fs_open+0x16>
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d102      	bne.n	800a0d8 <fs_open+0x1c>
    return ERR_ARG;
 800a0d2:	f06f 030f 	mvn.w	r3, #15
 800a0d6:	e028      	b.n	800a12a <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a0d8:	4b16      	ldr	r3, [pc, #88]	; (800a134 <fs_open+0x78>)
 800a0da:	60fb      	str	r3, [r7, #12]
 800a0dc:	e020      	b.n	800a120 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	6838      	ldr	r0, [r7, #0]
 800a0e6:	f7f6 f883 	bl	80001f0 <strcmp>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d114      	bne.n	800a11a <fs_open+0x5e>
      file->data = (const char *)f->data;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	689a      	ldr	r2, [r3, #8]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	68da      	ldr	r2, [r3, #12]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	68da      	ldr	r2, [r3, #12]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	7c1a      	ldrb	r2, [r3, #16]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800a116:	2300      	movs	r3, #0
 800a118:	e007      	b.n	800a12a <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	60fb      	str	r3, [r7, #12]
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d1db      	bne.n	800a0de <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800a126:	f06f 0305 	mvn.w	r3, #5
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	08026ce0 	.word	0x08026ce0

0800a138 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800a140:	bf00      	nop
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	685a      	ldr	r2, [r3, #4]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	1ad3      	subs	r3, r2, r3
}
 800a15e:	4618      	mov	r0, r3
 800a160:	370c      	adds	r7, #12
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr

0800a16a <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b082      	sub	sp, #8
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800a172:	222c      	movs	r2, #44	; 0x2c
 800a174:	2100      	movs	r1, #0
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f00e f83f 	bl	80181fa <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800a17c:	bf00      	nop
 800a17e:	3708      	adds	r7, #8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800a18a:	202c      	movs	r0, #44	; 0x2c
 800a18c:	f001 f91a 	bl	800b3c4 <mem_malloc>
 800a190:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d002      	beq.n	800a19e <http_state_alloc+0x1a>
    http_state_init(ret);
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f7ff ffe6 	bl	800a16a <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800a19e:	687b      	ldr	r3, [r7, #4]
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3708      	adds	r7, #8
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	695b      	ldr	r3, [r3, #20]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d007      	beq.n	800a1c8 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	695b      	ldr	r3, [r3, #20]
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f7ff ffbb 	bl	800a138 <fs_close>
    hs->handle = NULL;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6a1b      	ldr	r3, [r3, #32]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d007      	beq.n	800a1e0 <http_state_eof+0x38>
    pbuf_free(hs->req);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6a1b      	ldr	r3, [r3, #32]
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f002 f9bf 	bl	800c558 <pbuf_free>
    hs->req = NULL;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800a1e0:	bf00      	nop
 800a1e2:	3708      	adds	r7, #8
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d005      	beq.n	800a202 <http_state_free+0x1a>
    http_state_eof(hs);
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f7ff ffd6 	bl	800a1a8 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 ff47 	bl	800b090 <mem_free>
  }
}
 800a202:	bf00      	nop
 800a204:	3708      	adds	r7, #8
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
	...

0800a20c <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b086      	sub	sp, #24
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	607a      	str	r2, [r7, #4]
 800a218:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d106      	bne.n	800a22e <http_write+0x22>
 800a220:	4b2c      	ldr	r3, [pc, #176]	; (800a2d4 <http_write+0xc8>)
 800a222:	f240 2219 	movw	r2, #537	; 0x219
 800a226:	492c      	ldr	r1, [pc, #176]	; (800a2d8 <http_write+0xcc>)
 800a228:	482c      	ldr	r0, [pc, #176]	; (800a2dc <http_write+0xd0>)
 800a22a:	f00d ff81 	bl	8018130 <iprintf>
  len = *length;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	881b      	ldrh	r3, [r3, #0]
 800a232:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800a234:	8afb      	ldrh	r3, [r7, #22]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d101      	bne.n	800a23e <http_write+0x32>
    return ERR_OK;
 800a23a:	2300      	movs	r3, #0
 800a23c:	e045      	b.n	800a2ca <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a244:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800a246:	8aba      	ldrh	r2, [r7, #20]
 800a248:	8afb      	ldrh	r3, [r7, #22]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d201      	bcs.n	800a252 <http_write+0x46>
    len = max_len;
 800a24e:	8abb      	ldrh	r3, [r7, #20]
 800a250:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a256:	005b      	lsls	r3, r3, #1
 800a258:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800a25a:	8afa      	ldrh	r2, [r7, #22]
 800a25c:	8abb      	ldrh	r3, [r7, #20]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d901      	bls.n	800a266 <http_write+0x5a>
    len = max_len;
 800a262:	8abb      	ldrh	r3, [r7, #20]
 800a264:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800a266:	78fb      	ldrb	r3, [r7, #3]
 800a268:	8afa      	ldrh	r2, [r7, #22]
 800a26a:	68b9      	ldr	r1, [r7, #8]
 800a26c:	68f8      	ldr	r0, [r7, #12]
 800a26e:	f006 ff73 	bl	8011158 <tcp_write>
 800a272:	4603      	mov	r3, r0
 800a274:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800a276:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a27a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a27e:	d10f      	bne.n	800a2a0 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a286:	2b00      	cmp	r3, #0
 800a288:	d004      	beq.n	800a294 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800a290:	2b08      	cmp	r3, #8
 800a292:	d902      	bls.n	800a29a <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800a294:	2301      	movs	r3, #1
 800a296:	82fb      	strh	r3, [r7, #22]
 800a298:	e002      	b.n	800a2a0 <http_write+0x94>
      } else {
        len /= 2;
 800a29a:	8afb      	ldrh	r3, [r7, #22]
 800a29c:	085b      	lsrs	r3, r3, #1
 800a29e:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800a2a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a2a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2a8:	d102      	bne.n	800a2b0 <http_write+0xa4>
 800a2aa:	8afb      	ldrh	r3, [r7, #22]
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d8da      	bhi.n	800a266 <http_write+0x5a>

  if (err == ERR_OK) {
 800a2b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d103      	bne.n	800a2c0 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	8afa      	ldrh	r2, [r7, #22]
 800a2bc:	801a      	strh	r2, [r3, #0]
 800a2be:	e002      	b.n	800a2c6 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800a2c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3718      	adds	r7, #24
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	08019c94 	.word	0x08019c94
 800a2d8:	08019ccc 	.word	0x08019ccc
 800a2dc:	08019cdc 	.word	0x08019cdc

0800a2e0 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b086      	sub	sp, #24
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	f003 ffef 	bl	800e2d4 <tcp_arg>
  altcp_recv(pcb, NULL);
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	68f8      	ldr	r0, [r7, #12]
 800a2fa:	f003 fffd 	bl	800e2f8 <tcp_recv>
  altcp_err(pcb, NULL);
 800a2fe:	2100      	movs	r1, #0
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	f004 f83d 	bl	800e380 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800a306:	2200      	movs	r2, #0
 800a308:	2100      	movs	r1, #0
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f004 f872 	bl	800e3f4 <tcp_poll>
  altcp_sent(pcb, NULL);
 800a310:	2100      	movs	r1, #0
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f004 f812 	bl	800e33c <tcp_sent>
  if (hs != NULL) {
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d002      	beq.n	800a324 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800a31e:	68b8      	ldr	r0, [r7, #8]
 800a320:	f7ff ff62 	bl	800a1e8 <http_state_free>
  }

  if (abort_conn) {
 800a324:	79fb      	ldrb	r3, [r7, #7]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d004      	beq.n	800a334 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f002 ff14 	bl	800d158 <tcp_abort>
    return ERR_OK;
 800a330:	2300      	movs	r3, #0
 800a332:	e00f      	b.n	800a354 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800a334:	68f8      	ldr	r0, [r7, #12]
 800a336:	f002 fdc9 	bl	800cecc <tcp_close>
 800a33a:	4603      	mov	r3, r0
 800a33c:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800a33e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d004      	beq.n	800a350 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800a346:	2204      	movs	r2, #4
 800a348:	4904      	ldr	r1, [pc, #16]	; (800a35c <http_close_or_abort_conn+0x7c>)
 800a34a:	68f8      	ldr	r0, [r7, #12]
 800a34c:	f004 f852 	bl	800e3f4 <tcp_poll>
  }
  return err;
 800a350:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a354:	4618      	mov	r0, r3
 800a356:	3718      	adds	r7, #24
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	0800aa23 	.word	0x0800aa23

0800a360 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800a36a:	2200      	movs	r2, #0
 800a36c:	6839      	ldr	r1, [r7, #0]
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f7ff ffb6 	bl	800a2e0 <http_close_or_abort_conn>
 800a374:	4603      	mov	r3, r0
}
 800a376:	4618      	mov	r0, r3
 800a378:	3708      	adds	r7, #8
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b082      	sub	sp, #8
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
 800a386:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800a388:	6839      	ldr	r1, [r7, #0]
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f7ff ffe8 	bl	800a360 <http_close_conn>
  }
}
 800a390:	bf00      	nop
 800a392:	3708      	adds	r7, #8
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d105      	bne.n	800a3b6 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800a3aa:	6839      	ldr	r1, [r7, #0]
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f7ff ffe6 	bl	800a37e <http_eof>
    return 0;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	e016      	b.n	800a3e4 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	695b      	ldr	r3, [r3, #20]
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7ff fec6 	bl	800a14c <fs_bytes_left>
 800a3c0:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	dc05      	bgt.n	800a3d4 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800a3c8:	6839      	ldr	r1, [r7, #0]
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f7ff ffd7 	bl	800a37e <http_eof>
    return 0;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	e007      	b.n	800a3e4 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800a3d4:	4b05      	ldr	r3, [pc, #20]	; (800a3ec <http_check_eof+0x54>)
 800a3d6:	f240 429d 	movw	r2, #1181	; 0x49d
 800a3da:	4905      	ldr	r1, [pc, #20]	; (800a3f0 <http_check_eof+0x58>)
 800a3dc:	4805      	ldr	r0, [pc, #20]	; (800a3f4 <http_check_eof+0x5c>)
 800a3de:	f00d fea7 	bl	8018130 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800a3e2:	2301      	movs	r3, #1
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3710      	adds	r7, #16
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	08019c94 	.word	0x08019c94
 800a3f0:	08019d04 	.word	0x08019d04
 800a3f4:	08019cdc 	.word	0x08019cdc

0800a3f8 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800a402:	2300      	movs	r3, #0
 800a404:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a40e:	4293      	cmp	r3, r2
 800a410:	d803      	bhi.n	800a41a <http_send_data_nonssi+0x22>
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a416:	b29b      	uxth	r3, r3
 800a418:	e001      	b.n	800a41e <http_send_data_nonssi+0x26>
 800a41a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a41e:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	6999      	ldr	r1, [r3, #24]
 800a424:	f107 020c 	add.w	r2, r7, #12
 800a428:	2300      	movs	r3, #0
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f7ff feee 	bl	800a20c <http_write>
 800a430:	4603      	mov	r3, r0
 800a432:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800a434:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d10d      	bne.n	800a458 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800a43c:	2301      	movs	r3, #1
 800a43e:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	699b      	ldr	r3, [r3, #24]
 800a444:	89ba      	ldrh	r2, [r7, #12]
 800a446:	441a      	add	r2, r3
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a450:	89ba      	ldrh	r2, [r7, #12]
 800a452:	1a9a      	subs	r2, r3, r2
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800a458:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b084      	sub	sp, #16
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
 800a46a:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800a46c:	2300      	movs	r3, #0
 800a46e:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d101      	bne.n	800a47a <http_send+0x18>
    return 0;
 800a476:	2300      	movs	r3, #0
 800a478:	e025      	b.n	800a4c6 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d108      	bne.n	800a494 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800a482:	6839      	ldr	r1, [r7, #0]
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f7ff ff87 	bl	800a398 <http_check_eof>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d101      	bne.n	800a494 <http_send+0x32>
      return 0;
 800a490:	2300      	movs	r3, #0
 800a492:	e018      	b.n	800a4c6 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800a494:	6839      	ldr	r1, [r7, #0]
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f7ff ffae 	bl	800a3f8 <http_send_data_nonssi>
 800a49c:	4603      	mov	r3, r0
 800a49e:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d10d      	bne.n	800a4c4 <http_send+0x62>
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	695b      	ldr	r3, [r3, #20]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7ff fe4d 	bl	800a14c <fs_bytes_left>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	dc05      	bgt.n	800a4c4 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800a4b8:	6839      	ldr	r1, [r7, #0]
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f7ff ff5f 	bl	800a37e <http_eof>
    return 0;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	e000      	b.n	800a4c6 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800a4c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3710      	adds	r7, #16
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
	...

0800a4d0 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	4a1c      	ldr	r2, [pc, #112]	; (800a550 <http_get_404_file+0x80>)
 800a4de:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	4610      	mov	r0, r2
 800a4ea:	f7ff fde7 	bl	800a0bc <fs_open>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a4f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d024      	beq.n	800a544 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	4a15      	ldr	r2, [pc, #84]	; (800a554 <http_get_404_file+0x84>)
 800a4fe:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4619      	mov	r1, r3
 800a508:	4610      	mov	r0, r2
 800a50a:	f7ff fdd7 	bl	800a0bc <fs_open>
 800a50e:	4603      	mov	r3, r0
 800a510:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d014      	beq.n	800a544 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	4a0e      	ldr	r2, [pc, #56]	; (800a558 <http_get_404_file+0x88>)
 800a51e:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4619      	mov	r1, r3
 800a528:	4610      	mov	r0, r2
 800a52a:	f7ff fdc7 	bl	800a0bc <fs_open>
 800a52e:	4603      	mov	r3, r0
 800a530:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800a532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d004      	beq.n	800a544 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	2200      	movs	r2, #0
 800a53e:	601a      	str	r2, [r3, #0]
        return NULL;
 800a540:	2300      	movs	r3, #0
 800a542:	e000      	b.n	800a546 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800a544:	687b      	ldr	r3, [r7, #4]
}
 800a546:	4618      	mov	r0, r3
 800a548:	3710      	adds	r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	08019d3c 	.word	0x08019d3c
 800a554:	08019d48 	.word	0x08019d48
 800a558:	08019d54 	.word	0x08019d54

0800a55c <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b08e      	sub	sp, #56	; 0x38
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800a56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d106      	bne.n	800a580 <http_parse_request+0x24>
 800a572:	4b65      	ldr	r3, [pc, #404]	; (800a708 <http_parse_request+0x1ac>)
 800a574:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800a578:	4964      	ldr	r1, [pc, #400]	; (800a70c <http_parse_request+0x1b0>)
 800a57a:	4865      	ldr	r0, [pc, #404]	; (800a710 <http_parse_request+0x1b4>)
 800a57c:	f00d fdd8 	bl	8018130 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d106      	bne.n	800a594 <http_parse_request+0x38>
 800a586:	4b60      	ldr	r3, [pc, #384]	; (800a708 <http_parse_request+0x1ac>)
 800a588:	f240 72af 	movw	r2, #1967	; 0x7af
 800a58c:	4961      	ldr	r1, [pc, #388]	; (800a714 <http_parse_request+0x1b8>)
 800a58e:	4860      	ldr	r0, [pc, #384]	; (800a710 <http_parse_request+0x1b4>)
 800a590:	f00d fdce 	bl	8018130 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	695b      	ldr	r3, [r3, #20]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d103      	bne.n	800a5a4 <http_parse_request+0x48>
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	699b      	ldr	r3, [r3, #24]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d002      	beq.n	800a5aa <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800a5a4:	f06f 0307 	mvn.w	r3, #7
 800a5a8:	e0a9      	b.n	800a6fe <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	6a1b      	ldr	r3, [r3, #32]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d103      	bne.n	800a5ba <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5b6:	621a      	str	r2, [r3, #32]
 800a5b8:	e005      	b.n	800a5c6 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	6a1b      	ldr	r3, [r3, #32]
 800a5be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f002 f897 	bl	800c6f4 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800a5c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a5c8:	f002 f86c 	bl	800c6a4 <pbuf_ref>

  if (hs->req->next != NULL) {
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	6a1b      	ldr	r3, [r3, #32]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d012      	beq.n	800a5fc <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	6a1b      	ldr	r3, [r3, #32]
 800a5da:	891b      	ldrh	r3, [r3, #8]
 800a5dc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	bf28      	it	cs
 800a5e4:	4613      	movcs	r3, r2
 800a5e6:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	6a18      	ldr	r0, [r3, #32]
 800a5ec:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	4949      	ldr	r1, [pc, #292]	; (800a718 <http_parse_request+0x1bc>)
 800a5f2:	f002 f9b7 	bl	800c964 <pbuf_copy_partial>
    data = httpd_req_buf;
 800a5f6:	4b48      	ldr	r3, [pc, #288]	; (800a718 <http_parse_request+0x1bc>)
 800a5f8:	637b      	str	r3, [r7, #52]	; 0x34
 800a5fa:	e005      	b.n	800a608 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800a5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800a602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a604:	895b      	ldrh	r3, [r3, #10]
 800a606:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800a608:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a60a:	2b06      	cmp	r3, #6
 800a60c:	d962      	bls.n	800a6d4 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800a60e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a610:	461a      	mov	r2, r3
 800a612:	4942      	ldr	r1, [pc, #264]	; (800a71c <http_parse_request+0x1c0>)
 800a614:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a616:	f000 fb99 	bl	800ad4c <lwip_strnstr>
 800a61a:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800a61c:	6a3b      	ldr	r3, [r7, #32]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d058      	beq.n	800a6d4 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800a622:	2300      	movs	r3, #0
 800a624:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800a626:	2204      	movs	r2, #4
 800a628:	493d      	ldr	r1, [pc, #244]	; (800a720 <http_parse_request+0x1c4>)
 800a62a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a62c:	f00d fdfa 	bl	8018224 <strncmp>
 800a630:	4603      	mov	r3, r0
 800a632:	2b00      	cmp	r3, #0
 800a634:	d116      	bne.n	800a664 <http_parse_request+0x108>
        sp1 = data + 3;
 800a636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a638:	3303      	adds	r3, #3
 800a63a:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800a63c:	69fb      	ldr	r3, [r7, #28]
 800a63e:	1c5a      	adds	r2, r3, #1
 800a640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a642:	1ad3      	subs	r3, r2, r3
 800a644:	b29b      	uxth	r3, r3
 800a646:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a648:	1ad3      	subs	r3, r2, r3
 800a64a:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	3301      	adds	r3, #1
 800a650:	8b7a      	ldrh	r2, [r7, #26]
 800a652:	4934      	ldr	r1, [pc, #208]	; (800a724 <http_parse_request+0x1c8>)
 800a654:	4618      	mov	r0, r3
 800a656:	f000 fb79 	bl	800ad4c <lwip_strnstr>
 800a65a:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800a65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d111      	bne.n	800a686 <http_parse_request+0x12a>
 800a662:	e006      	b.n	800a672 <http_parse_request+0x116>
        data[4] = 0;
 800a664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a666:	3304      	adds	r3, #4
 800a668:	2200      	movs	r2, #0
 800a66a:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800a66c:	f06f 030f 	mvn.w	r3, #15
 800a670:	e045      	b.n	800a6fe <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800a672:	69fb      	ldr	r3, [r7, #28]
 800a674:	3301      	adds	r3, #1
 800a676:	8b7a      	ldrh	r2, [r7, #26]
 800a678:	4928      	ldr	r1, [pc, #160]	; (800a71c <http_parse_request+0x1c0>)
 800a67a:	4618      	mov	r0, r3
 800a67c:	f000 fb66 	bl	800ad4c <lwip_strnstr>
 800a680:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800a682:	2301      	movs	r3, #1
 800a684:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	3301      	adds	r3, #1
 800a68a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a68c:	1ad3      	subs	r3, r2, r3
 800a68e:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800a690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a692:	2b00      	cmp	r3, #0
 800a694:	d01e      	beq.n	800a6d4 <http_parse_request+0x178>
 800a696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a698:	69fb      	ldr	r3, [r7, #28]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d91a      	bls.n	800a6d4 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800a69e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	4921      	ldr	r1, [pc, #132]	; (800a728 <http_parse_request+0x1cc>)
 800a6a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a6a6:	f000 fb51 	bl	800ad4c <lwip_strnstr>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d011      	beq.n	800a6d4 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800a6b6:	69fb      	ldr	r3, [r7, #28]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800a6bc:	8b3b      	ldrh	r3, [r7, #24]
 800a6be:	697a      	ldr	r2, [r7, #20]
 800a6c0:	4413      	add	r3, r2
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800a6c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6c8:	6979      	ldr	r1, [r7, #20]
 800a6ca:	68b8      	ldr	r0, [r7, #8]
 800a6cc:	f000 f82e 	bl	800a72c <http_find_file>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	e014      	b.n	800a6fe <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	6a1b      	ldr	r3, [r3, #32]
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f001 ffcb 	bl	800c674 <pbuf_clen>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	6a1b      	ldr	r3, [r3, #32]
 800a6e6:	891b      	ldrh	r3, [r3, #8]
 800a6e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6ec:	d205      	bcs.n	800a6fa <http_parse_request+0x19e>
 800a6ee:	8a7b      	ldrh	r3, [r7, #18]
 800a6f0:	2b05      	cmp	r3, #5
 800a6f2:	d802      	bhi.n	800a6fa <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800a6f4:	f06f 0304 	mvn.w	r3, #4
 800a6f8:	e001      	b.n	800a6fe <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800a6fa:	f06f 030f 	mvn.w	r3, #15
  }
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3738      	adds	r7, #56	; 0x38
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	08019c94 	.word	0x08019c94
 800a70c:	08019d60 	.word	0x08019d60
 800a710:	08019cdc 	.word	0x08019cdc
 800a714:	08019d6c 	.word	0x08019d6c
 800a718:	2000d1a8 	.word	0x2000d1a8
 800a71c:	08019d78 	.word	0x08019d78
 800a720:	08019d7c 	.word	0x08019d7c
 800a724:	08019d84 	.word	0x08019d84
 800a728:	08019d88 	.word	0x08019d88

0800a72c <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b092      	sub	sp, #72	; 0x48
 800a730:	af02      	add	r7, sp, #8
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800a738:	2300      	movs	r3, #0
 800a73a:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800a73c:	2300      	movs	r3, #0
 800a73e:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800a740:	2300      	movs	r3, #0
 800a742:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	4618      	mov	r0, r3
 800a74a:	f7f5 fd5b 	bl	8000204 <strlen>
 800a74e:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800a750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a752:	2b00      	cmp	r3, #0
 800a754:	d06b      	beq.n	800a82e <http_find_file+0x102>
 800a756:	68ba      	ldr	r2, [r7, #8]
 800a758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75a:	3b01      	subs	r3, #1
 800a75c:	4413      	add	r3, r2
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	2b2f      	cmp	r3, #47	; 0x2f
 800a762:	d164      	bne.n	800a82e <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800a764:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800a766:	4a53      	ldr	r2, [pc, #332]	; (800a8b4 <http_find_file+0x188>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d102      	bne.n	800a772 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800a76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d15d      	bne.n	800a82e <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800a772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a774:	3b01      	subs	r3, #1
 800a776:	2b3f      	cmp	r3, #63	; 0x3f
 800a778:	bf28      	it	cs
 800a77a:	233f      	movcs	r3, #63	; 0x3f
 800a77c:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800a77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a780:	2b00      	cmp	r3, #0
 800a782:	d00a      	beq.n	800a79a <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a788:	4619      	mov	r1, r3
 800a78a:	484a      	ldr	r0, [pc, #296]	; (800a8b4 <http_find_file+0x188>)
 800a78c:	f00d fe1e 	bl	80183cc <memcpy>
      http_uri_buf[copy_len] = 0;
 800a790:	4a48      	ldr	r2, [pc, #288]	; (800a8b4 <http_find_file+0x188>)
 800a792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a794:	4413      	add	r3, r2
 800a796:	2200      	movs	r2, #0
 800a798:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800a79a:	2300      	movs	r3, #0
 800a79c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a79e:	e043      	b.n	800a828 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800a7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d028      	beq.n	800a7f8 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800a7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a8:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800a7ac:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800a7ae:	6a3b      	ldr	r3, [r7, #32]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d01e      	beq.n	800a7f2 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800a7b4:	4a40      	ldr	r2, [pc, #256]	; (800a8b8 <http_find_file+0x18c>)
 800a7b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f7f5 fd21 	bl	8000204 <strlen>
 800a7c2:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800a7c4:	69fa      	ldr	r2, [r7, #28]
 800a7c6:	6a3b      	ldr	r3, [r7, #32]
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	bf28      	it	cs
 800a7cc:	4613      	movcs	r3, r2
 800a7ce:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d2:	4a38      	ldr	r2, [pc, #224]	; (800a8b4 <http_find_file+0x188>)
 800a7d4:	1898      	adds	r0, r3, r2
 800a7d6:	4a38      	ldr	r2, [pc, #224]	; (800a8b8 <http_find_file+0x18c>)
 800a7d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7da:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a7de:	69ba      	ldr	r2, [r7, #24]
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	f00d fdf3 	bl	80183cc <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800a7e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	4a31      	ldr	r2, [pc, #196]	; (800a8b4 <http_find_file+0x188>)
 800a7ee:	2100      	movs	r1, #0
 800a7f0:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800a7f2:	4b30      	ldr	r3, [pc, #192]	; (800a8b4 <http_find_file+0x188>)
 800a7f4:	633b      	str	r3, [r7, #48]	; 0x30
 800a7f6:	e004      	b.n	800a802 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800a7f8:	4a2f      	ldr	r2, [pc, #188]	; (800a8b8 <http_find_file+0x18c>)
 800a7fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a800:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a806:	4618      	mov	r0, r3
 800a808:	f7ff fc58 	bl	800a0bc <fs_open>
 800a80c:	4603      	mov	r3, r0
 800a80e:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800a810:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d104      	bne.n	800a822 <http_find_file+0xf6>
        uri = file_name;
 800a818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81a:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800a820:	e005      	b.n	800a82e <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800a822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a824:	3301      	adds	r3, #1
 800a826:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a82a:	2b04      	cmp	r3, #4
 800a82c:	d9b8      	bls.n	800a7a0 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800a82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a830:	2b00      	cmp	r3, #0
 800a832:	d124      	bne.n	800a87e <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	213f      	movs	r1, #63	; 0x3f
 800a838:	4618      	mov	r0, r3
 800a83a:	f00d fce6 	bl	801820a <strchr>
 800a83e:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800a840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a842:	2b00      	cmp	r3, #0
 800a844:	d005      	beq.n	800a852 <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800a846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a848:	2200      	movs	r2, #0
 800a84a:	701a      	strb	r2, [r3, #0]
      params++;
 800a84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a84e:	3301      	adds	r3, #1
 800a850:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	68ba      	ldr	r2, [r7, #8]
 800a856:	4611      	mov	r1, r2
 800a858:	4618      	mov	r0, r3
 800a85a:	f7ff fc2f 	bl	800a0bc <fs_open>
 800a85e:	4603      	mov	r3, r0
 800a860:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800a862:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d102      	bne.n	800a870 <http_find_file+0x144>
      file = &hs->file_handle;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a86e:	e006      	b.n	800a87e <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800a870:	f107 0308 	add.w	r3, r7, #8
 800a874:	4619      	mov	r1, r3
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	f7ff fe2a 	bl	800a4d0 <http_get_404_file>
 800a87c:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800a87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a880:	2b00      	cmp	r3, #0
 800a882:	d106      	bne.n	800a892 <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800a884:	f107 0308 	add.w	r3, r7, #8
 800a888:	4619      	mov	r1, r3
 800a88a:	68f8      	ldr	r0, [r7, #12]
 800a88c:	f7ff fe20 	bl	800a4d0 <http_get_404_file>
 800a890:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800a892:	68ba      	ldr	r2, [r7, #8]
 800a894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a896:	9301      	str	r3, [sp, #4]
 800a898:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a89c:	9300      	str	r3, [sp, #0]
 800a89e:	4613      	mov	r3, r2
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f000 f809 	bl	800a8bc <http_init_file>
 800a8aa:	4603      	mov	r3, r0
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3740      	adds	r7, #64	; 0x40
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	2000d5a8 	.word	0x2000d5a8
 800a8b8:	08026cf4 	.word	0x08026cf4

0800a8bc <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b086      	sub	sp, #24
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	607a      	str	r2, [r7, #4]
 800a8c8:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d05c      	beq.n	800a98a <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d106      	bne.n	800a8e6 <http_init_file+0x2a>
 800a8d8:	4b35      	ldr	r3, [pc, #212]	; (800a9b0 <http_init_file+0xf4>)
 800a8da:	f640 120b 	movw	r2, #2315	; 0x90b
 800a8de:	4935      	ldr	r1, [pc, #212]	; (800a9b4 <http_init_file+0xf8>)
 800a8e0:	4835      	ldr	r0, [pc, #212]	; (800a9b8 <http_init_file+0xfc>)
 800a8e2:	f00d fc25 	bl	8018130 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	68ba      	ldr	r2, [r7, #8]
 800a8ea:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	da06      	bge.n	800a90a <http_init_file+0x4e>
 800a8fc:	4b2c      	ldr	r3, [pc, #176]	; (800a9b0 <http_init_file+0xf4>)
 800a8fe:	f640 1234 	movw	r2, #2356	; 0x934
 800a902:	492e      	ldr	r1, [pc, #184]	; (800a9bc <http_init_file+0x100>)
 800a904:	482c      	ldr	r0, [pc, #176]	; (800a9b8 <http_init_file+0xfc>)
 800a906:	f00d fc13 	bl	8018130 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	461a      	mov	r2, r3
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2200      	movs	r2, #0
 800a918:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	695b      	ldr	r3, [r3, #20]
 800a920:	7c1b      	ldrb	r3, [r3, #16]
 800a922:	f003 0301 	and.w	r3, r3, #1
 800a926:	2b00      	cmp	r3, #0
 800a928:	d106      	bne.n	800a938 <http_init_file+0x7c>
 800a92a:	4b21      	ldr	r3, [pc, #132]	; (800a9b0 <http_init_file+0xf4>)
 800a92c:	f640 1243 	movw	r2, #2371	; 0x943
 800a930:	4923      	ldr	r1, [pc, #140]	; (800a9c0 <http_init_file+0x104>)
 800a932:	4821      	ldr	r0, [pc, #132]	; (800a9b8 <http_init_file+0xfc>)
 800a934:	f00d fbfc 	bl	8018130 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d032      	beq.n	800a9a4 <http_init_file+0xe8>
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	695b      	ldr	r3, [r3, #20]
 800a942:	7c1b      	ldrb	r3, [r3, #16]
 800a944:	f003 0301 	and.w	r3, r3, #1
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d02b      	beq.n	800a9a4 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6998      	ldr	r0, [r3, #24]
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a954:	461a      	mov	r2, r3
 800a956:	491b      	ldr	r1, [pc, #108]	; (800a9c4 <http_init_file+0x108>)
 800a958:	f000 f9f8 	bl	800ad4c <lwip_strnstr>
 800a95c:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d01f      	beq.n	800a9a4 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	1d1a      	adds	r2, r3, #4
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	699b      	ldr	r3, [r3, #24]
 800a96c:	1ad3      	subs	r3, r2, r3
 800a96e:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	699a      	ldr	r2, [r3, #24]
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	441a      	add	r2, r3
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	1ad2      	subs	r2, r2, r3
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	625a      	str	r2, [r3, #36]	; 0x24
 800a988:	e00c      	b.n	800a9a4 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2200      	movs	r2, #0
 800a98e:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2200      	movs	r2, #0
 800a994:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2200      	movs	r2, #0
 800a99a:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3718      	adds	r7, #24
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	08019c94 	.word	0x08019c94
 800a9b4:	08019d90 	.word	0x08019d90
 800a9b8:	08019cdc 	.word	0x08019cdc
 800a9bc:	08019da4 	.word	0x08019da4
 800a9c0:	08019dc4 	.word	0x08019dc4
 800a9c4:	08019d88 	.word	0x08019d88

0800a9c8 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d002      	beq.n	800a9e4 <http_err+0x1c>
    http_state_free(hs);
 800a9de:	68f8      	ldr	r0, [r7, #12]
 800a9e0:	f7ff fc02 	bl	800a1e8 <http_state_free>
  }
}
 800a9e4:	bf00      	nop
 800a9e6:	3710      	adds	r7, #16
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b086      	sub	sp, #24
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	4613      	mov	r3, r2
 800a9f8:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d101      	bne.n	800aa08 <http_sent+0x1c>
    return ERR_OK;
 800aa04:	2300      	movs	r3, #0
 800aa06:	e008      	b.n	800aa1a <http_sent+0x2e>
  }

  hs->retries = 0;
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800aa10:	6979      	ldr	r1, [r7, #20]
 800aa12:	68b8      	ldr	r0, [r7, #8]
 800aa14:	f7ff fd25 	bl	800a462 <http_send>

  return ERR_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3718      	adds	r7, #24
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b084      	sub	sp, #16
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
 800aa2a:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d107      	bne.n	800aa46 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800aa36:	2100      	movs	r1, #0
 800aa38:	6838      	ldr	r0, [r7, #0]
 800aa3a:	f7ff fc91 	bl	800a360 <http_close_conn>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800aa42:	2300      	movs	r3, #0
 800aa44:	e021      	b.n	800aa8a <http_poll+0x68>
  } else {
    hs->retries++;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	b2da      	uxtb	r2, r3
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa5c:	2b04      	cmp	r3, #4
 800aa5e:	d105      	bne.n	800aa6c <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800aa60:	68f9      	ldr	r1, [r7, #12]
 800aa62:	6838      	ldr	r0, [r7, #0]
 800aa64:	f7ff fc7c 	bl	800a360 <http_close_conn>
      return ERR_OK;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	e00e      	b.n	800aa8a <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	695b      	ldr	r3, [r3, #20]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d009      	beq.n	800aa88 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800aa74:	68f9      	ldr	r1, [r7, #12]
 800aa76:	6838      	ldr	r0, [r7, #0]
 800aa78:	f7ff fcf3 	bl	800a462 <http_send>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d002      	beq.n	800aa88 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800aa82:	6838      	ldr	r0, [r7, #0]
 800aa84:	f007 f952 	bl	8011d2c <tcp_output>
      }
    }
  }

  return ERR_OK;
 800aa88:	2300      	movs	r3, #0
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
	...

0800aa94 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b086      	sub	sp, #24
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	60b9      	str	r1, [r7, #8]
 800aa9e:	607a      	str	r2, [r7, #4]
 800aaa0:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800aaa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d105      	bne.n	800aaba <http_recv+0x26>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d002      	beq.n	800aaba <http_recv+0x26>
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d111      	bne.n	800aade <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d008      	beq.n	800aad2 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	891b      	ldrh	r3, [r3, #8]
 800aac4:	4619      	mov	r1, r3
 800aac6:	68b8      	ldr	r0, [r7, #8]
 800aac8:	f002 fd20 	bl	800d50c <tcp_recved>
      pbuf_free(p);
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f001 fd43 	bl	800c558 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800aad2:	6979      	ldr	r1, [r7, #20]
 800aad4:	68b8      	ldr	r0, [r7, #8]
 800aad6:	f7ff fc43 	bl	800a360 <http_close_conn>
    return ERR_OK;
 800aada:	2300      	movs	r3, #0
 800aadc:	e055      	b.n	800ab8a <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	891b      	ldrh	r3, [r3, #8]
 800aae2:	4619      	mov	r1, r3
 800aae4:	68b8      	ldr	r0, [r7, #8]
 800aae6:	f002 fd11 	bl	800d50c <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	695b      	ldr	r3, [r3, #20]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d147      	bne.n	800ab82 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800aaf2:	68ba      	ldr	r2, [r7, #8]
 800aaf4:	6979      	ldr	r1, [r7, #20]
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f7ff fd30 	bl	800a55c <http_parse_request>
 800aafc:	4603      	mov	r3, r0
 800aafe:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800ab00:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d015      	beq.n	800ab34 <http_recv+0xa0>
 800ab08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab0c:	f113 0f05 	cmn.w	r3, #5
 800ab10:	d010      	beq.n	800ab34 <http_recv+0xa0>
 800ab12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab16:	f113 0f10 	cmn.w	r3, #16
 800ab1a:	d00b      	beq.n	800ab34 <http_recv+0xa0>
 800ab1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab20:	f113 0f08 	cmn.w	r3, #8
 800ab24:	d006      	beq.n	800ab34 <http_recv+0xa0>
 800ab26:	4b1b      	ldr	r3, [pc, #108]	; (800ab94 <http_recv+0x100>)
 800ab28:	f640 2204 	movw	r2, #2564	; 0xa04
 800ab2c:	491a      	ldr	r1, [pc, #104]	; (800ab98 <http_recv+0x104>)
 800ab2e:	481b      	ldr	r0, [pc, #108]	; (800ab9c <http_recv+0x108>)
 800ab30:	f00d fafe 	bl	8018130 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800ab34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab38:	f113 0f05 	cmn.w	r3, #5
 800ab3c:	d00b      	beq.n	800ab56 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	6a1b      	ldr	r3, [r3, #32]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d007      	beq.n	800ab56 <http_recv+0xc2>
          pbuf_free(hs->req);
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	6a1b      	ldr	r3, [r3, #32]
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f001 fd04 	bl	800c558 <pbuf_free>
          hs->req = NULL;
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	2200      	movs	r2, #0
 800ab54:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f001 fcfe 	bl	800c558 <pbuf_free>
      if (parsed == ERR_OK) {
 800ab5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d104      	bne.n	800ab6e <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800ab64:	6979      	ldr	r1, [r7, #20]
 800ab66:	68b8      	ldr	r0, [r7, #8]
 800ab68:	f7ff fc7b 	bl	800a462 <http_send>
 800ab6c:	e00c      	b.n	800ab88 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800ab6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab72:	f113 0f10 	cmn.w	r3, #16
 800ab76:	d107      	bne.n	800ab88 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800ab78:	6979      	ldr	r1, [r7, #20]
 800ab7a:	68b8      	ldr	r0, [r7, #8]
 800ab7c:	f7ff fbf0 	bl	800a360 <http_close_conn>
 800ab80:	e002      	b.n	800ab88 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f001 fce8 	bl	800c558 <pbuf_free>
    }
  }
  return ERR_OK;
 800ab88:	2300      	movs	r3, #0
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3718      	adds	r7, #24
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	08019c94 	.word	0x08019c94
 800ab98:	08019df0 	.word	0x08019df0
 800ab9c:	08019cdc 	.word	0x08019cdc

0800aba0 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b086      	sub	sp, #24
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	4613      	mov	r3, r2
 800abac:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800abae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d102      	bne.n	800abbc <http_accept+0x1c>
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d102      	bne.n	800abc2 <http_accept+0x22>
    return ERR_VAL;
 800abbc:	f06f 0305 	mvn.w	r3, #5
 800abc0:	e025      	b.n	800ac0e <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800abc2:	2101      	movs	r1, #1
 800abc4:	68b8      	ldr	r0, [r7, #8]
 800abc6:	f003 f985 	bl	800ded4 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800abca:	f7ff fadb 	bl	800a184 <http_state_alloc>
 800abce:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d102      	bne.n	800abdc <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800abd6:	f04f 33ff 	mov.w	r3, #4294967295
 800abda:	e018      	b.n	800ac0e <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	68ba      	ldr	r2, [r7, #8]
 800abe0:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800abe2:	6979      	ldr	r1, [r7, #20]
 800abe4:	68b8      	ldr	r0, [r7, #8]
 800abe6:	f003 fb75 	bl	800e2d4 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800abea:	490b      	ldr	r1, [pc, #44]	; (800ac18 <http_accept+0x78>)
 800abec:	68b8      	ldr	r0, [r7, #8]
 800abee:	f003 fb83 	bl	800e2f8 <tcp_recv>
  altcp_err(pcb, http_err);
 800abf2:	490a      	ldr	r1, [pc, #40]	; (800ac1c <http_accept+0x7c>)
 800abf4:	68b8      	ldr	r0, [r7, #8]
 800abf6:	f003 fbc3 	bl	800e380 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800abfa:	2204      	movs	r2, #4
 800abfc:	4908      	ldr	r1, [pc, #32]	; (800ac20 <http_accept+0x80>)
 800abfe:	68b8      	ldr	r0, [r7, #8]
 800ac00:	f003 fbf8 	bl	800e3f4 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800ac04:	4907      	ldr	r1, [pc, #28]	; (800ac24 <http_accept+0x84>)
 800ac06:	68b8      	ldr	r0, [r7, #8]
 800ac08:	f003 fb98 	bl	800e33c <tcp_sent>

  return ERR_OK;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3718      	adds	r7, #24
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
 800ac16:	bf00      	nop
 800ac18:	0800aa95 	.word	0x0800aa95
 800ac1c:	0800a9c9 	.word	0x0800a9c9
 800ac20:	0800aa23 	.word	0x0800aa23
 800ac24:	0800a9ed 	.word	0x0800a9ed

0800ac28 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	460b      	mov	r3, r1
 800ac32:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d029      	beq.n	800ac8e <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800ac3a:	2101      	movs	r1, #1
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f003 f949 	bl	800ded4 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800ac42:	887b      	ldrh	r3, [r7, #2]
 800ac44:	461a      	mov	r2, r3
 800ac46:	4914      	ldr	r1, [pc, #80]	; (800ac98 <httpd_init_pcb+0x70>)
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f002 fa91 	bl	800d170 <tcp_bind>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800ac52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d006      	beq.n	800ac68 <httpd_init_pcb+0x40>
 800ac5a:	4b10      	ldr	r3, [pc, #64]	; (800ac9c <httpd_init_pcb+0x74>)
 800ac5c:	f640 2257 	movw	r2, #2647	; 0xa57
 800ac60:	490f      	ldr	r1, [pc, #60]	; (800aca0 <httpd_init_pcb+0x78>)
 800ac62:	4810      	ldr	r0, [pc, #64]	; (800aca4 <httpd_init_pcb+0x7c>)
 800ac64:	f00d fa64 	bl	8018130 <iprintf>
    pcb = altcp_listen(pcb);
 800ac68:	21ff      	movs	r1, #255	; 0xff
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f002 fb38 	bl	800d2e0 <tcp_listen_with_backlog>
 800ac70:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d106      	bne.n	800ac86 <httpd_init_pcb+0x5e>
 800ac78:	4b08      	ldr	r3, [pc, #32]	; (800ac9c <httpd_init_pcb+0x74>)
 800ac7a:	f640 2259 	movw	r2, #2649	; 0xa59
 800ac7e:	490a      	ldr	r1, [pc, #40]	; (800aca8 <httpd_init_pcb+0x80>)
 800ac80:	4808      	ldr	r0, [pc, #32]	; (800aca4 <httpd_init_pcb+0x7c>)
 800ac82:	f00d fa55 	bl	8018130 <iprintf>
    altcp_accept(pcb, http_accept);
 800ac86:	4909      	ldr	r1, [pc, #36]	; (800acac <httpd_init_pcb+0x84>)
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f003 fb9b 	bl	800e3c4 <tcp_accept>
  }
}
 800ac8e:	bf00      	nop
 800ac90:	3710      	adds	r7, #16
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	08026e3c 	.word	0x08026e3c
 800ac9c:	08019c94 	.word	0x08019c94
 800aca0:	08019e1c 	.word	0x08019e1c
 800aca4:	08019cdc 	.word	0x08019cdc
 800aca8:	08019e38 	.word	0x08019e38
 800acac:	0800aba1 	.word	0x0800aba1

0800acb0 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800acb6:	202e      	movs	r0, #46	; 0x2e
 800acb8:	f003 fafe 	bl	800e2b8 <tcp_new_ip_type>
 800acbc:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d106      	bne.n	800acd2 <httpd_init+0x22>
 800acc4:	4b07      	ldr	r3, [pc, #28]	; (800ace4 <httpd_init+0x34>)
 800acc6:	f640 2272 	movw	r2, #2674	; 0xa72
 800acca:	4907      	ldr	r1, [pc, #28]	; (800ace8 <httpd_init+0x38>)
 800accc:	4807      	ldr	r0, [pc, #28]	; (800acec <httpd_init+0x3c>)
 800acce:	f00d fa2f 	bl	8018130 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800acd2:	2150      	movs	r1, #80	; 0x50
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f7ff ffa7 	bl	800ac28 <httpd_init_pcb>
}
 800acda:	bf00      	nop
 800acdc:	3708      	adds	r7, #8
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop
 800ace4:	08019c94 	.word	0x08019c94
 800ace8:	08019e58 	.word	0x08019e58
 800acec:	08019cdc 	.word	0x08019cdc

0800acf0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	4603      	mov	r3, r0
 800acf8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800acfa:	88fb      	ldrh	r3, [r7, #6]
 800acfc:	021b      	lsls	r3, r3, #8
 800acfe:	b21a      	sxth	r2, r3
 800ad00:	88fb      	ldrh	r3, [r7, #6]
 800ad02:	0a1b      	lsrs	r3, r3, #8
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	b21b      	sxth	r3, r3
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	b21b      	sxth	r3, r3
 800ad0c:	b29b      	uxth	r3, r3
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	370c      	adds	r7, #12
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr

0800ad1a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ad1a:	b480      	push	{r7}
 800ad1c:	b083      	sub	sp, #12
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	061a      	lsls	r2, r3, #24
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	021b      	lsls	r3, r3, #8
 800ad2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ad2e:	431a      	orrs	r2, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	0a1b      	lsrs	r3, r3, #8
 800ad34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ad38:	431a      	orrs	r2, r3
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	0e1b      	lsrs	r3, r3, #24
 800ad3e:	4313      	orrs	r3, r2
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	370c      	adds	r7, #12
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b086      	sub	sp, #24
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800ad58:	68b8      	ldr	r0, [r7, #8]
 800ad5a:	f7f5 fa53 	bl	8000204 <strlen>
 800ad5e:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d101      	bne.n	800ad6a <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	e022      	b.n	800adb0 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	617b      	str	r3, [r7, #20]
 800ad6e:	e012      	b.n	800ad96 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	781a      	ldrb	r2, [r3, #0]
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d109      	bne.n	800ad90 <lwip_strnstr+0x44>
 800ad7c:	693a      	ldr	r2, [r7, #16]
 800ad7e:	68b9      	ldr	r1, [r7, #8]
 800ad80:	6978      	ldr	r0, [r7, #20]
 800ad82:	f00d fa4f 	bl	8018224 <strncmp>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d101      	bne.n	800ad90 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	e00f      	b.n	800adb0 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	3301      	adds	r3, #1
 800ad94:	617b      	str	r3, [r7, #20]
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d007      	beq.n	800adae <lwip_strnstr+0x62>
 800ad9e:	697a      	ldr	r2, [r7, #20]
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	441a      	add	r2, r3
 800ada4:	68f9      	ldr	r1, [r7, #12]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	440b      	add	r3, r1
 800adaa:	429a      	cmp	r2, r3
 800adac:	d9e0      	bls.n	800ad70 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800adae:	2300      	movs	r3, #0
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3718      	adds	r7, #24
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800adbe:	2300      	movs	r3, #0
 800adc0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800adc2:	f00d f83d 	bl	8017e40 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800adc6:	f000 f8d5 	bl	800af74 <mem_init>
  memp_init();
 800adca:	f000 fc31 	bl	800b630 <memp_init>
  pbuf_init();
  netif_init();
 800adce:	f000 fd3d 	bl	800b84c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800add2:	f008 f89b 	bl	8012f0c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800add6:	f001 fe69 	bl	800caac <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800adda:	f007 ffdd 	bl	8012d98 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800adde:	bf00      	nop
 800ade0:	3708      	adds	r7, #8
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
	...

0800ade8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ade8:	b480      	push	{r7}
 800adea:	b083      	sub	sp, #12
 800adec:	af00      	add	r7, sp, #0
 800adee:	4603      	mov	r3, r0
 800adf0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800adf2:	4b05      	ldr	r3, [pc, #20]	; (800ae08 <ptr_to_mem+0x20>)
 800adf4:	681a      	ldr	r2, [r3, #0]
 800adf6:	88fb      	ldrh	r3, [r7, #6]
 800adf8:	4413      	add	r3, r2
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	370c      	adds	r7, #12
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	2000dc54 	.word	0x2000dc54

0800ae0c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ae14:	4b05      	ldr	r3, [pc, #20]	; (800ae2c <mem_to_ptr+0x20>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	1ad3      	subs	r3, r2, r3
 800ae1c:	b29b      	uxth	r3, r3
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	370c      	adds	r7, #12
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr
 800ae2a:	bf00      	nop
 800ae2c:	2000dc54 	.word	0x2000dc54

0800ae30 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ae30:	b590      	push	{r4, r7, lr}
 800ae32:	b085      	sub	sp, #20
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ae38:	4b45      	ldr	r3, [pc, #276]	; (800af50 <plug_holes+0x120>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d206      	bcs.n	800ae50 <plug_holes+0x20>
 800ae42:	4b44      	ldr	r3, [pc, #272]	; (800af54 <plug_holes+0x124>)
 800ae44:	f240 12df 	movw	r2, #479	; 0x1df
 800ae48:	4943      	ldr	r1, [pc, #268]	; (800af58 <plug_holes+0x128>)
 800ae4a:	4844      	ldr	r0, [pc, #272]	; (800af5c <plug_holes+0x12c>)
 800ae4c:	f00d f970 	bl	8018130 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ae50:	4b43      	ldr	r3, [pc, #268]	; (800af60 <plug_holes+0x130>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d306      	bcc.n	800ae68 <plug_holes+0x38>
 800ae5a:	4b3e      	ldr	r3, [pc, #248]	; (800af54 <plug_holes+0x124>)
 800ae5c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ae60:	4940      	ldr	r1, [pc, #256]	; (800af64 <plug_holes+0x134>)
 800ae62:	483e      	ldr	r0, [pc, #248]	; (800af5c <plug_holes+0x12c>)
 800ae64:	f00d f964 	bl	8018130 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	791b      	ldrb	r3, [r3, #4]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d006      	beq.n	800ae7e <plug_holes+0x4e>
 800ae70:	4b38      	ldr	r3, [pc, #224]	; (800af54 <plug_holes+0x124>)
 800ae72:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ae76:	493c      	ldr	r1, [pc, #240]	; (800af68 <plug_holes+0x138>)
 800ae78:	4838      	ldr	r0, [pc, #224]	; (800af5c <plug_holes+0x12c>)
 800ae7a:	f00d f959 	bl	8018130 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	881b      	ldrh	r3, [r3, #0]
 800ae82:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae86:	d906      	bls.n	800ae96 <plug_holes+0x66>
 800ae88:	4b32      	ldr	r3, [pc, #200]	; (800af54 <plug_holes+0x124>)
 800ae8a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ae8e:	4937      	ldr	r1, [pc, #220]	; (800af6c <plug_holes+0x13c>)
 800ae90:	4832      	ldr	r0, [pc, #200]	; (800af5c <plug_holes+0x12c>)
 800ae92:	f00d f94d 	bl	8018130 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	881b      	ldrh	r3, [r3, #0]
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f7ff ffa4 	bl	800ade8 <ptr_to_mem>
 800aea0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800aea2:	687a      	ldr	r2, [r7, #4]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d024      	beq.n	800aef4 <plug_holes+0xc4>
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	791b      	ldrb	r3, [r3, #4]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d120      	bne.n	800aef4 <plug_holes+0xc4>
 800aeb2:	4b2b      	ldr	r3, [pc, #172]	; (800af60 <plug_holes+0x130>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	68fa      	ldr	r2, [r7, #12]
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d01b      	beq.n	800aef4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800aebc:	4b2c      	ldr	r3, [pc, #176]	; (800af70 <plug_holes+0x140>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	68fa      	ldr	r2, [r7, #12]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d102      	bne.n	800aecc <plug_holes+0x9c>
      lfree = mem;
 800aec6:	4a2a      	ldr	r2, [pc, #168]	; (800af70 <plug_holes+0x140>)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	881a      	ldrh	r2, [r3, #0]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	881b      	ldrh	r3, [r3, #0]
 800aed8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aedc:	d00a      	beq.n	800aef4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	881b      	ldrh	r3, [r3, #0]
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7ff ff80 	bl	800ade8 <ptr_to_mem>
 800aee8:	4604      	mov	r4, r0
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f7ff ff8e 	bl	800ae0c <mem_to_ptr>
 800aef0:	4603      	mov	r3, r0
 800aef2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	885b      	ldrh	r3, [r3, #2]
 800aef8:	4618      	mov	r0, r3
 800aefa:	f7ff ff75 	bl	800ade8 <ptr_to_mem>
 800aefe:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800af00:	68ba      	ldr	r2, [r7, #8]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	429a      	cmp	r2, r3
 800af06:	d01f      	beq.n	800af48 <plug_holes+0x118>
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	791b      	ldrb	r3, [r3, #4]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d11b      	bne.n	800af48 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800af10:	4b17      	ldr	r3, [pc, #92]	; (800af70 <plug_holes+0x140>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	429a      	cmp	r2, r3
 800af18:	d102      	bne.n	800af20 <plug_holes+0xf0>
      lfree = pmem;
 800af1a:	4a15      	ldr	r2, [pc, #84]	; (800af70 <plug_holes+0x140>)
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	881a      	ldrh	r2, [r3, #0]
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	881b      	ldrh	r3, [r3, #0]
 800af2c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af30:	d00a      	beq.n	800af48 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	881b      	ldrh	r3, [r3, #0]
 800af36:	4618      	mov	r0, r3
 800af38:	f7ff ff56 	bl	800ade8 <ptr_to_mem>
 800af3c:	4604      	mov	r4, r0
 800af3e:	68b8      	ldr	r0, [r7, #8]
 800af40:	f7ff ff64 	bl	800ae0c <mem_to_ptr>
 800af44:	4603      	mov	r3, r0
 800af46:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800af48:	bf00      	nop
 800af4a:	3714      	adds	r7, #20
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd90      	pop	{r4, r7, pc}
 800af50:	2000dc54 	.word	0x2000dc54
 800af54:	08019e74 	.word	0x08019e74
 800af58:	08019ea4 	.word	0x08019ea4
 800af5c:	08019ebc 	.word	0x08019ebc
 800af60:	2000dc58 	.word	0x2000dc58
 800af64:	08019ee4 	.word	0x08019ee4
 800af68:	08019f00 	.word	0x08019f00
 800af6c:	08019f1c 	.word	0x08019f1c
 800af70:	2000dc60 	.word	0x2000dc60

0800af74 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800af7a:	4b1f      	ldr	r3, [pc, #124]	; (800aff8 <mem_init+0x84>)
 800af7c:	3303      	adds	r3, #3
 800af7e:	f023 0303 	bic.w	r3, r3, #3
 800af82:	461a      	mov	r2, r3
 800af84:	4b1d      	ldr	r3, [pc, #116]	; (800affc <mem_init+0x88>)
 800af86:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800af88:	4b1c      	ldr	r3, [pc, #112]	; (800affc <mem_init+0x88>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800af94:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2200      	movs	r2, #0
 800af9a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2200      	movs	r2, #0
 800afa0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800afa2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800afa6:	f7ff ff1f 	bl	800ade8 <ptr_to_mem>
 800afaa:	4603      	mov	r3, r0
 800afac:	4a14      	ldr	r2, [pc, #80]	; (800b000 <mem_init+0x8c>)
 800afae:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800afb0:	4b13      	ldr	r3, [pc, #76]	; (800b000 <mem_init+0x8c>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	2201      	movs	r2, #1
 800afb6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800afb8:	4b11      	ldr	r3, [pc, #68]	; (800b000 <mem_init+0x8c>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800afc0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800afc2:	4b0f      	ldr	r3, [pc, #60]	; (800b000 <mem_init+0x8c>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800afca:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800afcc:	4b0b      	ldr	r3, [pc, #44]	; (800affc <mem_init+0x88>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a0c      	ldr	r2, [pc, #48]	; (800b004 <mem_init+0x90>)
 800afd2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800afd4:	480c      	ldr	r0, [pc, #48]	; (800b008 <mem_init+0x94>)
 800afd6:	f00c ff41 	bl	8017e5c <sys_mutex_new>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d006      	beq.n	800afee <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800afe0:	4b0a      	ldr	r3, [pc, #40]	; (800b00c <mem_init+0x98>)
 800afe2:	f240 221f 	movw	r2, #543	; 0x21f
 800afe6:	490a      	ldr	r1, [pc, #40]	; (800b010 <mem_init+0x9c>)
 800afe8:	480a      	ldr	r0, [pc, #40]	; (800b014 <mem_init+0xa0>)
 800afea:	f00d f8a1 	bl	8018130 <iprintf>
  }
}
 800afee:	bf00      	nop
 800aff0:	3708      	adds	r7, #8
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	2000d600 	.word	0x2000d600
 800affc:	2000dc54 	.word	0x2000dc54
 800b000:	2000dc58 	.word	0x2000dc58
 800b004:	2000dc60 	.word	0x2000dc60
 800b008:	2000dc5c 	.word	0x2000dc5c
 800b00c:	08019e74 	.word	0x08019e74
 800b010:	08019f48 	.word	0x08019f48
 800b014:	08019ebc 	.word	0x08019ebc

0800b018 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b086      	sub	sp, #24
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f7ff fef3 	bl	800ae0c <mem_to_ptr>
 800b026:	4603      	mov	r3, r0
 800b028:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	881b      	ldrh	r3, [r3, #0]
 800b02e:	4618      	mov	r0, r3
 800b030:	f7ff feda 	bl	800ade8 <ptr_to_mem>
 800b034:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	885b      	ldrh	r3, [r3, #2]
 800b03a:	4618      	mov	r0, r3
 800b03c:	f7ff fed4 	bl	800ade8 <ptr_to_mem>
 800b040:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	881b      	ldrh	r3, [r3, #0]
 800b046:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b04a:	d818      	bhi.n	800b07e <mem_link_valid+0x66>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	885b      	ldrh	r3, [r3, #2]
 800b050:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b054:	d813      	bhi.n	800b07e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b05a:	8afa      	ldrh	r2, [r7, #22]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d004      	beq.n	800b06a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	881b      	ldrh	r3, [r3, #0]
 800b064:	8afa      	ldrh	r2, [r7, #22]
 800b066:	429a      	cmp	r2, r3
 800b068:	d109      	bne.n	800b07e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b06a:	4b08      	ldr	r3, [pc, #32]	; (800b08c <mem_link_valid+0x74>)
 800b06c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b06e:	693a      	ldr	r2, [r7, #16]
 800b070:	429a      	cmp	r2, r3
 800b072:	d006      	beq.n	800b082 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	885b      	ldrh	r3, [r3, #2]
 800b078:	8afa      	ldrh	r2, [r7, #22]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d001      	beq.n	800b082 <mem_link_valid+0x6a>
    return 0;
 800b07e:	2300      	movs	r3, #0
 800b080:	e000      	b.n	800b084 <mem_link_valid+0x6c>
  }
  return 1;
 800b082:	2301      	movs	r3, #1
}
 800b084:	4618      	mov	r0, r3
 800b086:	3718      	adds	r7, #24
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	2000dc58 	.word	0x2000dc58

0800b090 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b088      	sub	sp, #32
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d070      	beq.n	800b180 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f003 0303 	and.w	r3, r3, #3
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d00d      	beq.n	800b0c4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b0a8:	4b37      	ldr	r3, [pc, #220]	; (800b188 <mem_free+0xf8>)
 800b0aa:	f240 2273 	movw	r2, #627	; 0x273
 800b0ae:	4937      	ldr	r1, [pc, #220]	; (800b18c <mem_free+0xfc>)
 800b0b0:	4837      	ldr	r0, [pc, #220]	; (800b190 <mem_free+0x100>)
 800b0b2:	f00d f83d 	bl	8018130 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b0b6:	f00c ff2f 	bl	8017f18 <sys_arch_protect>
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	f00c ff39 	bl	8017f34 <sys_arch_unprotect>
    return;
 800b0c2:	e05e      	b.n	800b182 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	3b08      	subs	r3, #8
 800b0c8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b0ca:	4b32      	ldr	r3, [pc, #200]	; (800b194 <mem_free+0x104>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	69fa      	ldr	r2, [r7, #28]
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d306      	bcc.n	800b0e2 <mem_free+0x52>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f103 020c 	add.w	r2, r3, #12
 800b0da:	4b2f      	ldr	r3, [pc, #188]	; (800b198 <mem_free+0x108>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d90d      	bls.n	800b0fe <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b0e2:	4b29      	ldr	r3, [pc, #164]	; (800b188 <mem_free+0xf8>)
 800b0e4:	f240 227f 	movw	r2, #639	; 0x27f
 800b0e8:	492c      	ldr	r1, [pc, #176]	; (800b19c <mem_free+0x10c>)
 800b0ea:	4829      	ldr	r0, [pc, #164]	; (800b190 <mem_free+0x100>)
 800b0ec:	f00d f820 	bl	8018130 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b0f0:	f00c ff12 	bl	8017f18 <sys_arch_protect>
 800b0f4:	6138      	str	r0, [r7, #16]
 800b0f6:	6938      	ldr	r0, [r7, #16]
 800b0f8:	f00c ff1c 	bl	8017f34 <sys_arch_unprotect>
    return;
 800b0fc:	e041      	b.n	800b182 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b0fe:	4828      	ldr	r0, [pc, #160]	; (800b1a0 <mem_free+0x110>)
 800b100:	f00c fec8 	bl	8017e94 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	791b      	ldrb	r3, [r3, #4]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d110      	bne.n	800b12e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b10c:	4b1e      	ldr	r3, [pc, #120]	; (800b188 <mem_free+0xf8>)
 800b10e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b112:	4924      	ldr	r1, [pc, #144]	; (800b1a4 <mem_free+0x114>)
 800b114:	481e      	ldr	r0, [pc, #120]	; (800b190 <mem_free+0x100>)
 800b116:	f00d f80b 	bl	8018130 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b11a:	4821      	ldr	r0, [pc, #132]	; (800b1a0 <mem_free+0x110>)
 800b11c:	f00c fec9 	bl	8017eb2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b120:	f00c fefa 	bl	8017f18 <sys_arch_protect>
 800b124:	6178      	str	r0, [r7, #20]
 800b126:	6978      	ldr	r0, [r7, #20]
 800b128:	f00c ff04 	bl	8017f34 <sys_arch_unprotect>
    return;
 800b12c:	e029      	b.n	800b182 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b12e:	69f8      	ldr	r0, [r7, #28]
 800b130:	f7ff ff72 	bl	800b018 <mem_link_valid>
 800b134:	4603      	mov	r3, r0
 800b136:	2b00      	cmp	r3, #0
 800b138:	d110      	bne.n	800b15c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b13a:	4b13      	ldr	r3, [pc, #76]	; (800b188 <mem_free+0xf8>)
 800b13c:	f240 2295 	movw	r2, #661	; 0x295
 800b140:	4919      	ldr	r1, [pc, #100]	; (800b1a8 <mem_free+0x118>)
 800b142:	4813      	ldr	r0, [pc, #76]	; (800b190 <mem_free+0x100>)
 800b144:	f00c fff4 	bl	8018130 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b148:	4815      	ldr	r0, [pc, #84]	; (800b1a0 <mem_free+0x110>)
 800b14a:	f00c feb2 	bl	8017eb2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b14e:	f00c fee3 	bl	8017f18 <sys_arch_protect>
 800b152:	61b8      	str	r0, [r7, #24]
 800b154:	69b8      	ldr	r0, [r7, #24]
 800b156:	f00c feed 	bl	8017f34 <sys_arch_unprotect>
    return;
 800b15a:	e012      	b.n	800b182 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	2200      	movs	r2, #0
 800b160:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b162:	4b12      	ldr	r3, [pc, #72]	; (800b1ac <mem_free+0x11c>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	69fa      	ldr	r2, [r7, #28]
 800b168:	429a      	cmp	r2, r3
 800b16a:	d202      	bcs.n	800b172 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b16c:	4a0f      	ldr	r2, [pc, #60]	; (800b1ac <mem_free+0x11c>)
 800b16e:	69fb      	ldr	r3, [r7, #28]
 800b170:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b172:	69f8      	ldr	r0, [r7, #28]
 800b174:	f7ff fe5c 	bl	800ae30 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b178:	4809      	ldr	r0, [pc, #36]	; (800b1a0 <mem_free+0x110>)
 800b17a:	f00c fe9a 	bl	8017eb2 <sys_mutex_unlock>
 800b17e:	e000      	b.n	800b182 <mem_free+0xf2>
    return;
 800b180:	bf00      	nop
}
 800b182:	3720      	adds	r7, #32
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}
 800b188:	08019e74 	.word	0x08019e74
 800b18c:	08019f64 	.word	0x08019f64
 800b190:	08019ebc 	.word	0x08019ebc
 800b194:	2000dc54 	.word	0x2000dc54
 800b198:	2000dc58 	.word	0x2000dc58
 800b19c:	08019f88 	.word	0x08019f88
 800b1a0:	2000dc5c 	.word	0x2000dc5c
 800b1a4:	08019fa4 	.word	0x08019fa4
 800b1a8:	08019fcc 	.word	0x08019fcc
 800b1ac:	2000dc60 	.word	0x2000dc60

0800b1b0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b088      	sub	sp, #32
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	460b      	mov	r3, r1
 800b1ba:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b1bc:	887b      	ldrh	r3, [r7, #2]
 800b1be:	3303      	adds	r3, #3
 800b1c0:	b29b      	uxth	r3, r3
 800b1c2:	f023 0303 	bic.w	r3, r3, #3
 800b1c6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b1c8:	8bfb      	ldrh	r3, [r7, #30]
 800b1ca:	2b0b      	cmp	r3, #11
 800b1cc:	d801      	bhi.n	800b1d2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b1ce:	230c      	movs	r3, #12
 800b1d0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b1d2:	8bfb      	ldrh	r3, [r7, #30]
 800b1d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b1d8:	d803      	bhi.n	800b1e2 <mem_trim+0x32>
 800b1da:	8bfa      	ldrh	r2, [r7, #30]
 800b1dc:	887b      	ldrh	r3, [r7, #2]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d201      	bcs.n	800b1e6 <mem_trim+0x36>
    return NULL;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	e0d8      	b.n	800b398 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b1e6:	4b6e      	ldr	r3, [pc, #440]	; (800b3a0 <mem_trim+0x1f0>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d304      	bcc.n	800b1fa <mem_trim+0x4a>
 800b1f0:	4b6c      	ldr	r3, [pc, #432]	; (800b3a4 <mem_trim+0x1f4>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d306      	bcc.n	800b208 <mem_trim+0x58>
 800b1fa:	4b6b      	ldr	r3, [pc, #428]	; (800b3a8 <mem_trim+0x1f8>)
 800b1fc:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b200:	496a      	ldr	r1, [pc, #424]	; (800b3ac <mem_trim+0x1fc>)
 800b202:	486b      	ldr	r0, [pc, #428]	; (800b3b0 <mem_trim+0x200>)
 800b204:	f00c ff94 	bl	8018130 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b208:	4b65      	ldr	r3, [pc, #404]	; (800b3a0 <mem_trim+0x1f0>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	429a      	cmp	r2, r3
 800b210:	d304      	bcc.n	800b21c <mem_trim+0x6c>
 800b212:	4b64      	ldr	r3, [pc, #400]	; (800b3a4 <mem_trim+0x1f4>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	687a      	ldr	r2, [r7, #4]
 800b218:	429a      	cmp	r2, r3
 800b21a:	d307      	bcc.n	800b22c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b21c:	f00c fe7c 	bl	8017f18 <sys_arch_protect>
 800b220:	60b8      	str	r0, [r7, #8]
 800b222:	68b8      	ldr	r0, [r7, #8]
 800b224:	f00c fe86 	bl	8017f34 <sys_arch_unprotect>
    return rmem;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	e0b5      	b.n	800b398 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	3b08      	subs	r3, #8
 800b230:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b232:	69b8      	ldr	r0, [r7, #24]
 800b234:	f7ff fdea 	bl	800ae0c <mem_to_ptr>
 800b238:	4603      	mov	r3, r0
 800b23a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b23c:	69bb      	ldr	r3, [r7, #24]
 800b23e:	881a      	ldrh	r2, [r3, #0]
 800b240:	8afb      	ldrh	r3, [r7, #22]
 800b242:	1ad3      	subs	r3, r2, r3
 800b244:	b29b      	uxth	r3, r3
 800b246:	3b08      	subs	r3, #8
 800b248:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b24a:	8bfa      	ldrh	r2, [r7, #30]
 800b24c:	8abb      	ldrh	r3, [r7, #20]
 800b24e:	429a      	cmp	r2, r3
 800b250:	d906      	bls.n	800b260 <mem_trim+0xb0>
 800b252:	4b55      	ldr	r3, [pc, #340]	; (800b3a8 <mem_trim+0x1f8>)
 800b254:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b258:	4956      	ldr	r1, [pc, #344]	; (800b3b4 <mem_trim+0x204>)
 800b25a:	4855      	ldr	r0, [pc, #340]	; (800b3b0 <mem_trim+0x200>)
 800b25c:	f00c ff68 	bl	8018130 <iprintf>
  if (newsize > size) {
 800b260:	8bfa      	ldrh	r2, [r7, #30]
 800b262:	8abb      	ldrh	r3, [r7, #20]
 800b264:	429a      	cmp	r2, r3
 800b266:	d901      	bls.n	800b26c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800b268:	2300      	movs	r3, #0
 800b26a:	e095      	b.n	800b398 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800b26c:	8bfa      	ldrh	r2, [r7, #30]
 800b26e:	8abb      	ldrh	r3, [r7, #20]
 800b270:	429a      	cmp	r2, r3
 800b272:	d101      	bne.n	800b278 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	e08f      	b.n	800b398 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b278:	484f      	ldr	r0, [pc, #316]	; (800b3b8 <mem_trim+0x208>)
 800b27a:	f00c fe0b 	bl	8017e94 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	881b      	ldrh	r3, [r3, #0]
 800b282:	4618      	mov	r0, r3
 800b284:	f7ff fdb0 	bl	800ade8 <ptr_to_mem>
 800b288:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	791b      	ldrb	r3, [r3, #4]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d13f      	bne.n	800b312 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	881b      	ldrh	r3, [r3, #0]
 800b296:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b29a:	d106      	bne.n	800b2aa <mem_trim+0xfa>
 800b29c:	4b42      	ldr	r3, [pc, #264]	; (800b3a8 <mem_trim+0x1f8>)
 800b29e:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b2a2:	4946      	ldr	r1, [pc, #280]	; (800b3bc <mem_trim+0x20c>)
 800b2a4:	4842      	ldr	r0, [pc, #264]	; (800b3b0 <mem_trim+0x200>)
 800b2a6:	f00c ff43 	bl	8018130 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	881b      	ldrh	r3, [r3, #0]
 800b2ae:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b2b0:	8afa      	ldrh	r2, [r7, #22]
 800b2b2:	8bfb      	ldrh	r3, [r7, #30]
 800b2b4:	4413      	add	r3, r2
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	3308      	adds	r3, #8
 800b2ba:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b2bc:	4b40      	ldr	r3, [pc, #256]	; (800b3c0 <mem_trim+0x210>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	693a      	ldr	r2, [r7, #16]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d106      	bne.n	800b2d4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800b2c6:	89fb      	ldrh	r3, [r7, #14]
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f7ff fd8d 	bl	800ade8 <ptr_to_mem>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	4a3b      	ldr	r2, [pc, #236]	; (800b3c0 <mem_trim+0x210>)
 800b2d2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b2d4:	89fb      	ldrh	r3, [r7, #14]
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7ff fd86 	bl	800ade8 <ptr_to_mem>
 800b2dc:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	89ba      	ldrh	r2, [r7, #12]
 800b2e8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	8afa      	ldrh	r2, [r7, #22]
 800b2ee:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b2f0:	69bb      	ldr	r3, [r7, #24]
 800b2f2:	89fa      	ldrh	r2, [r7, #14]
 800b2f4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	881b      	ldrh	r3, [r3, #0]
 800b2fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b2fe:	d047      	beq.n	800b390 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	881b      	ldrh	r3, [r3, #0]
 800b304:	4618      	mov	r0, r3
 800b306:	f7ff fd6f 	bl	800ade8 <ptr_to_mem>
 800b30a:	4602      	mov	r2, r0
 800b30c:	89fb      	ldrh	r3, [r7, #14]
 800b30e:	8053      	strh	r3, [r2, #2]
 800b310:	e03e      	b.n	800b390 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b312:	8bfb      	ldrh	r3, [r7, #30]
 800b314:	f103 0214 	add.w	r2, r3, #20
 800b318:	8abb      	ldrh	r3, [r7, #20]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d838      	bhi.n	800b390 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b31e:	8afa      	ldrh	r2, [r7, #22]
 800b320:	8bfb      	ldrh	r3, [r7, #30]
 800b322:	4413      	add	r3, r2
 800b324:	b29b      	uxth	r3, r3
 800b326:	3308      	adds	r3, #8
 800b328:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	881b      	ldrh	r3, [r3, #0]
 800b32e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b332:	d106      	bne.n	800b342 <mem_trim+0x192>
 800b334:	4b1c      	ldr	r3, [pc, #112]	; (800b3a8 <mem_trim+0x1f8>)
 800b336:	f240 3216 	movw	r2, #790	; 0x316
 800b33a:	4920      	ldr	r1, [pc, #128]	; (800b3bc <mem_trim+0x20c>)
 800b33c:	481c      	ldr	r0, [pc, #112]	; (800b3b0 <mem_trim+0x200>)
 800b33e:	f00c fef7 	bl	8018130 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b342:	89fb      	ldrh	r3, [r7, #14]
 800b344:	4618      	mov	r0, r3
 800b346:	f7ff fd4f 	bl	800ade8 <ptr_to_mem>
 800b34a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b34c:	4b1c      	ldr	r3, [pc, #112]	; (800b3c0 <mem_trim+0x210>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	693a      	ldr	r2, [r7, #16]
 800b352:	429a      	cmp	r2, r3
 800b354:	d202      	bcs.n	800b35c <mem_trim+0x1ac>
      lfree = mem2;
 800b356:	4a1a      	ldr	r2, [pc, #104]	; (800b3c0 <mem_trim+0x210>)
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	2200      	movs	r2, #0
 800b360:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b362:	69bb      	ldr	r3, [r7, #24]
 800b364:	881a      	ldrh	r2, [r3, #0]
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	8afa      	ldrh	r2, [r7, #22]
 800b36e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b370:	69bb      	ldr	r3, [r7, #24]
 800b372:	89fa      	ldrh	r2, [r7, #14]
 800b374:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	881b      	ldrh	r3, [r3, #0]
 800b37a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b37e:	d007      	beq.n	800b390 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	881b      	ldrh	r3, [r3, #0]
 800b384:	4618      	mov	r0, r3
 800b386:	f7ff fd2f 	bl	800ade8 <ptr_to_mem>
 800b38a:	4602      	mov	r2, r0
 800b38c:	89fb      	ldrh	r3, [r7, #14]
 800b38e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b390:	4809      	ldr	r0, [pc, #36]	; (800b3b8 <mem_trim+0x208>)
 800b392:	f00c fd8e 	bl	8017eb2 <sys_mutex_unlock>
  return rmem;
 800b396:	687b      	ldr	r3, [r7, #4]
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3720      	adds	r7, #32
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	2000dc54 	.word	0x2000dc54
 800b3a4:	2000dc58 	.word	0x2000dc58
 800b3a8:	08019e74 	.word	0x08019e74
 800b3ac:	0801a000 	.word	0x0801a000
 800b3b0:	08019ebc 	.word	0x08019ebc
 800b3b4:	0801a018 	.word	0x0801a018
 800b3b8:	2000dc5c 	.word	0x2000dc5c
 800b3bc:	0801a038 	.word	0x0801a038
 800b3c0:	2000dc60 	.word	0x2000dc60

0800b3c4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b088      	sub	sp, #32
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b3ce:	88fb      	ldrh	r3, [r7, #6]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d101      	bne.n	800b3d8 <mem_malloc+0x14>
    return NULL;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	e0e2      	b.n	800b59e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b3d8:	88fb      	ldrh	r3, [r7, #6]
 800b3da:	3303      	adds	r3, #3
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	f023 0303 	bic.w	r3, r3, #3
 800b3e2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b3e4:	8bbb      	ldrh	r3, [r7, #28]
 800b3e6:	2b0b      	cmp	r3, #11
 800b3e8:	d801      	bhi.n	800b3ee <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b3ea:	230c      	movs	r3, #12
 800b3ec:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b3ee:	8bbb      	ldrh	r3, [r7, #28]
 800b3f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b3f4:	d803      	bhi.n	800b3fe <mem_malloc+0x3a>
 800b3f6:	8bba      	ldrh	r2, [r7, #28]
 800b3f8:	88fb      	ldrh	r3, [r7, #6]
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d201      	bcs.n	800b402 <mem_malloc+0x3e>
    return NULL;
 800b3fe:	2300      	movs	r3, #0
 800b400:	e0cd      	b.n	800b59e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b402:	4869      	ldr	r0, [pc, #420]	; (800b5a8 <mem_malloc+0x1e4>)
 800b404:	f00c fd46 	bl	8017e94 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b408:	4b68      	ldr	r3, [pc, #416]	; (800b5ac <mem_malloc+0x1e8>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4618      	mov	r0, r3
 800b40e:	f7ff fcfd 	bl	800ae0c <mem_to_ptr>
 800b412:	4603      	mov	r3, r0
 800b414:	83fb      	strh	r3, [r7, #30]
 800b416:	e0b7      	b.n	800b588 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b418:	8bfb      	ldrh	r3, [r7, #30]
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7ff fce4 	bl	800ade8 <ptr_to_mem>
 800b420:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	791b      	ldrb	r3, [r3, #4]
 800b426:	2b00      	cmp	r3, #0
 800b428:	f040 80a7 	bne.w	800b57a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	881b      	ldrh	r3, [r3, #0]
 800b430:	461a      	mov	r2, r3
 800b432:	8bfb      	ldrh	r3, [r7, #30]
 800b434:	1ad3      	subs	r3, r2, r3
 800b436:	f1a3 0208 	sub.w	r2, r3, #8
 800b43a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b43c:	429a      	cmp	r2, r3
 800b43e:	f0c0 809c 	bcc.w	800b57a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	881b      	ldrh	r3, [r3, #0]
 800b446:	461a      	mov	r2, r3
 800b448:	8bfb      	ldrh	r3, [r7, #30]
 800b44a:	1ad3      	subs	r3, r2, r3
 800b44c:	f1a3 0208 	sub.w	r2, r3, #8
 800b450:	8bbb      	ldrh	r3, [r7, #28]
 800b452:	3314      	adds	r3, #20
 800b454:	429a      	cmp	r2, r3
 800b456:	d333      	bcc.n	800b4c0 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b458:	8bfa      	ldrh	r2, [r7, #30]
 800b45a:	8bbb      	ldrh	r3, [r7, #28]
 800b45c:	4413      	add	r3, r2
 800b45e:	b29b      	uxth	r3, r3
 800b460:	3308      	adds	r3, #8
 800b462:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b464:	8a7b      	ldrh	r3, [r7, #18]
 800b466:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b46a:	d106      	bne.n	800b47a <mem_malloc+0xb6>
 800b46c:	4b50      	ldr	r3, [pc, #320]	; (800b5b0 <mem_malloc+0x1ec>)
 800b46e:	f240 3287 	movw	r2, #903	; 0x387
 800b472:	4950      	ldr	r1, [pc, #320]	; (800b5b4 <mem_malloc+0x1f0>)
 800b474:	4850      	ldr	r0, [pc, #320]	; (800b5b8 <mem_malloc+0x1f4>)
 800b476:	f00c fe5b 	bl	8018130 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b47a:	8a7b      	ldrh	r3, [r7, #18]
 800b47c:	4618      	mov	r0, r3
 800b47e:	f7ff fcb3 	bl	800ade8 <ptr_to_mem>
 800b482:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2200      	movs	r2, #0
 800b488:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	881a      	ldrh	r2, [r3, #0]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	8bfa      	ldrh	r2, [r7, #30]
 800b496:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	8a7a      	ldrh	r2, [r7, #18]
 800b49c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	881b      	ldrh	r3, [r3, #0]
 800b4a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b4ac:	d00b      	beq.n	800b4c6 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	881b      	ldrh	r3, [r3, #0]
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7ff fc98 	bl	800ade8 <ptr_to_mem>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	8a7b      	ldrh	r3, [r7, #18]
 800b4bc:	8053      	strh	r3, [r2, #2]
 800b4be:	e002      	b.n	800b4c6 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b4c6:	4b39      	ldr	r3, [pc, #228]	; (800b5ac <mem_malloc+0x1e8>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	697a      	ldr	r2, [r7, #20]
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d127      	bne.n	800b520 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800b4d0:	4b36      	ldr	r3, [pc, #216]	; (800b5ac <mem_malloc+0x1e8>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b4d6:	e005      	b.n	800b4e4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b4d8:	69bb      	ldr	r3, [r7, #24]
 800b4da:	881b      	ldrh	r3, [r3, #0]
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7ff fc83 	bl	800ade8 <ptr_to_mem>
 800b4e2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b4e4:	69bb      	ldr	r3, [r7, #24]
 800b4e6:	791b      	ldrb	r3, [r3, #4]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d004      	beq.n	800b4f6 <mem_malloc+0x132>
 800b4ec:	4b33      	ldr	r3, [pc, #204]	; (800b5bc <mem_malloc+0x1f8>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	69ba      	ldr	r2, [r7, #24]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d1f0      	bne.n	800b4d8 <mem_malloc+0x114>
          }
          lfree = cur;
 800b4f6:	4a2d      	ldr	r2, [pc, #180]	; (800b5ac <mem_malloc+0x1e8>)
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b4fc:	4b2b      	ldr	r3, [pc, #172]	; (800b5ac <mem_malloc+0x1e8>)
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	4b2e      	ldr	r3, [pc, #184]	; (800b5bc <mem_malloc+0x1f8>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	429a      	cmp	r2, r3
 800b506:	d00b      	beq.n	800b520 <mem_malloc+0x15c>
 800b508:	4b28      	ldr	r3, [pc, #160]	; (800b5ac <mem_malloc+0x1e8>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	791b      	ldrb	r3, [r3, #4]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d006      	beq.n	800b520 <mem_malloc+0x15c>
 800b512:	4b27      	ldr	r3, [pc, #156]	; (800b5b0 <mem_malloc+0x1ec>)
 800b514:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b518:	4929      	ldr	r1, [pc, #164]	; (800b5c0 <mem_malloc+0x1fc>)
 800b51a:	4827      	ldr	r0, [pc, #156]	; (800b5b8 <mem_malloc+0x1f4>)
 800b51c:	f00c fe08 	bl	8018130 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b520:	4821      	ldr	r0, [pc, #132]	; (800b5a8 <mem_malloc+0x1e4>)
 800b522:	f00c fcc6 	bl	8017eb2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b526:	8bba      	ldrh	r2, [r7, #28]
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	4413      	add	r3, r2
 800b52c:	3308      	adds	r3, #8
 800b52e:	4a23      	ldr	r2, [pc, #140]	; (800b5bc <mem_malloc+0x1f8>)
 800b530:	6812      	ldr	r2, [r2, #0]
 800b532:	4293      	cmp	r3, r2
 800b534:	d906      	bls.n	800b544 <mem_malloc+0x180>
 800b536:	4b1e      	ldr	r3, [pc, #120]	; (800b5b0 <mem_malloc+0x1ec>)
 800b538:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b53c:	4921      	ldr	r1, [pc, #132]	; (800b5c4 <mem_malloc+0x200>)
 800b53e:	481e      	ldr	r0, [pc, #120]	; (800b5b8 <mem_malloc+0x1f4>)
 800b540:	f00c fdf6 	bl	8018130 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	f003 0303 	and.w	r3, r3, #3
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d006      	beq.n	800b55c <mem_malloc+0x198>
 800b54e:	4b18      	ldr	r3, [pc, #96]	; (800b5b0 <mem_malloc+0x1ec>)
 800b550:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b554:	491c      	ldr	r1, [pc, #112]	; (800b5c8 <mem_malloc+0x204>)
 800b556:	4818      	ldr	r0, [pc, #96]	; (800b5b8 <mem_malloc+0x1f4>)
 800b558:	f00c fdea 	bl	8018130 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	f003 0303 	and.w	r3, r3, #3
 800b562:	2b00      	cmp	r3, #0
 800b564:	d006      	beq.n	800b574 <mem_malloc+0x1b0>
 800b566:	4b12      	ldr	r3, [pc, #72]	; (800b5b0 <mem_malloc+0x1ec>)
 800b568:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b56c:	4917      	ldr	r1, [pc, #92]	; (800b5cc <mem_malloc+0x208>)
 800b56e:	4812      	ldr	r0, [pc, #72]	; (800b5b8 <mem_malloc+0x1f4>)
 800b570:	f00c fdde 	bl	8018130 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	3308      	adds	r3, #8
 800b578:	e011      	b.n	800b59e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800b57a:	8bfb      	ldrh	r3, [r7, #30]
 800b57c:	4618      	mov	r0, r3
 800b57e:	f7ff fc33 	bl	800ade8 <ptr_to_mem>
 800b582:	4603      	mov	r3, r0
 800b584:	881b      	ldrh	r3, [r3, #0]
 800b586:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b588:	8bfa      	ldrh	r2, [r7, #30]
 800b58a:	8bbb      	ldrh	r3, [r7, #28]
 800b58c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b590:	429a      	cmp	r2, r3
 800b592:	f4ff af41 	bcc.w	800b418 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b596:	4804      	ldr	r0, [pc, #16]	; (800b5a8 <mem_malloc+0x1e4>)
 800b598:	f00c fc8b 	bl	8017eb2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3720      	adds	r7, #32
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
 800b5a6:	bf00      	nop
 800b5a8:	2000dc5c 	.word	0x2000dc5c
 800b5ac:	2000dc60 	.word	0x2000dc60
 800b5b0:	08019e74 	.word	0x08019e74
 800b5b4:	0801a038 	.word	0x0801a038
 800b5b8:	08019ebc 	.word	0x08019ebc
 800b5bc:	2000dc58 	.word	0x2000dc58
 800b5c0:	0801a04c 	.word	0x0801a04c
 800b5c4:	0801a068 	.word	0x0801a068
 800b5c8:	0801a098 	.word	0x0801a098
 800b5cc:	0801a0c8 	.word	0x0801a0c8

0800b5d0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b085      	sub	sp, #20
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	689b      	ldr	r3, [r3, #8]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	3303      	adds	r3, #3
 800b5e6:	f023 0303 	bic.w	r3, r3, #3
 800b5ea:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	60fb      	str	r3, [r7, #12]
 800b5f0:	e011      	b.n	800b616 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	689b      	ldr	r3, [r3, #8]
 800b5f6:	681a      	ldr	r2, [r3, #0]
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	689b      	ldr	r3, [r3, #8]
 800b600:	68ba      	ldr	r2, [r7, #8]
 800b602:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	881b      	ldrh	r3, [r3, #0]
 800b608:	461a      	mov	r2, r3
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	4413      	add	r3, r2
 800b60e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	3301      	adds	r3, #1
 800b614:	60fb      	str	r3, [r7, #12]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	885b      	ldrh	r3, [r3, #2]
 800b61a:	461a      	mov	r2, r3
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	4293      	cmp	r3, r2
 800b620:	dbe7      	blt.n	800b5f2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b622:	bf00      	nop
 800b624:	bf00      	nop
 800b626:	3714      	adds	r7, #20
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b636:	2300      	movs	r3, #0
 800b638:	80fb      	strh	r3, [r7, #6]
 800b63a:	e009      	b.n	800b650 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b63c:	88fb      	ldrh	r3, [r7, #6]
 800b63e:	4a08      	ldr	r2, [pc, #32]	; (800b660 <memp_init+0x30>)
 800b640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b644:	4618      	mov	r0, r3
 800b646:	f7ff ffc3 	bl	800b5d0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b64a:	88fb      	ldrh	r3, [r7, #6]
 800b64c:	3301      	adds	r3, #1
 800b64e:	80fb      	strh	r3, [r7, #6]
 800b650:	88fb      	ldrh	r3, [r7, #6]
 800b652:	2b0c      	cmp	r3, #12
 800b654:	d9f2      	bls.n	800b63c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b656:	bf00      	nop
 800b658:	bf00      	nop
 800b65a:	3708      	adds	r7, #8
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	08026db8 	.word	0x08026db8

0800b664 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b084      	sub	sp, #16
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b66c:	f00c fc54 	bl	8017f18 <sys_arch_protect>
 800b670:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d015      	beq.n	800b6ac <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	689b      	ldr	r3, [r3, #8]
 800b684:	68ba      	ldr	r2, [r7, #8]
 800b686:	6812      	ldr	r2, [r2, #0]
 800b688:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	f003 0303 	and.w	r3, r3, #3
 800b690:	2b00      	cmp	r3, #0
 800b692:	d006      	beq.n	800b6a2 <do_memp_malloc_pool+0x3e>
 800b694:	4b09      	ldr	r3, [pc, #36]	; (800b6bc <do_memp_malloc_pool+0x58>)
 800b696:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b69a:	4909      	ldr	r1, [pc, #36]	; (800b6c0 <do_memp_malloc_pool+0x5c>)
 800b69c:	4809      	ldr	r0, [pc, #36]	; (800b6c4 <do_memp_malloc_pool+0x60>)
 800b69e:	f00c fd47 	bl	8018130 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b6a2:	68f8      	ldr	r0, [r7, #12]
 800b6a4:	f00c fc46 	bl	8017f34 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	e003      	b.n	800b6b4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b6ac:	68f8      	ldr	r0, [r7, #12]
 800b6ae:	f00c fc41 	bl	8017f34 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b6b2:	2300      	movs	r3, #0
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3710      	adds	r7, #16
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	0801a0ec 	.word	0x0801a0ec
 800b6c0:	0801a11c 	.word	0x0801a11c
 800b6c4:	0801a140 	.word	0x0801a140

0800b6c8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d106      	bne.n	800b6e4 <memp_malloc_pool+0x1c>
 800b6d6:	4b0a      	ldr	r3, [pc, #40]	; (800b700 <memp_malloc_pool+0x38>)
 800b6d8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800b6dc:	4909      	ldr	r1, [pc, #36]	; (800b704 <memp_malloc_pool+0x3c>)
 800b6de:	480a      	ldr	r0, [pc, #40]	; (800b708 <memp_malloc_pool+0x40>)
 800b6e0:	f00c fd26 	bl	8018130 <iprintf>
  if (desc == NULL) {
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d101      	bne.n	800b6ee <memp_malloc_pool+0x26>
    return NULL;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	e003      	b.n	800b6f6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f7ff ffb8 	bl	800b664 <do_memp_malloc_pool>
 800b6f4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3708      	adds	r7, #8
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop
 800b700:	0801a0ec 	.word	0x0801a0ec
 800b704:	0801a168 	.word	0x0801a168
 800b708:	0801a140 	.word	0x0801a140

0800b70c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	4603      	mov	r3, r0
 800b714:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b716:	79fb      	ldrb	r3, [r7, #7]
 800b718:	2b0c      	cmp	r3, #12
 800b71a:	d908      	bls.n	800b72e <memp_malloc+0x22>
 800b71c:	4b0a      	ldr	r3, [pc, #40]	; (800b748 <memp_malloc+0x3c>)
 800b71e:	f240 1257 	movw	r2, #343	; 0x157
 800b722:	490a      	ldr	r1, [pc, #40]	; (800b74c <memp_malloc+0x40>)
 800b724:	480a      	ldr	r0, [pc, #40]	; (800b750 <memp_malloc+0x44>)
 800b726:	f00c fd03 	bl	8018130 <iprintf>
 800b72a:	2300      	movs	r3, #0
 800b72c:	e008      	b.n	800b740 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b72e:	79fb      	ldrb	r3, [r7, #7]
 800b730:	4a08      	ldr	r2, [pc, #32]	; (800b754 <memp_malloc+0x48>)
 800b732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b736:	4618      	mov	r0, r3
 800b738:	f7ff ff94 	bl	800b664 <do_memp_malloc_pool>
 800b73c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b73e:	68fb      	ldr	r3, [r7, #12]
}
 800b740:	4618      	mov	r0, r3
 800b742:	3710      	adds	r7, #16
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	0801a0ec 	.word	0x0801a0ec
 800b74c:	0801a17c 	.word	0x0801a17c
 800b750:	0801a140 	.word	0x0801a140
 800b754:	08026db8 	.word	0x08026db8

0800b758 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	f003 0303 	and.w	r3, r3, #3
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d006      	beq.n	800b77a <do_memp_free_pool+0x22>
 800b76c:	4b0d      	ldr	r3, [pc, #52]	; (800b7a4 <do_memp_free_pool+0x4c>)
 800b76e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b772:	490d      	ldr	r1, [pc, #52]	; (800b7a8 <do_memp_free_pool+0x50>)
 800b774:	480d      	ldr	r0, [pc, #52]	; (800b7ac <do_memp_free_pool+0x54>)
 800b776:	f00c fcdb 	bl	8018130 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b77e:	f00c fbcb 	bl	8017f18 <sys_arch_protect>
 800b782:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	689b      	ldr	r3, [r3, #8]
 800b792:	68fa      	ldr	r2, [r7, #12]
 800b794:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b796:	68b8      	ldr	r0, [r7, #8]
 800b798:	f00c fbcc 	bl	8017f34 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b79c:	bf00      	nop
 800b79e:	3710      	adds	r7, #16
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	0801a0ec 	.word	0x0801a0ec
 800b7a8:	0801a19c 	.word	0x0801a19c
 800b7ac:	0801a140 	.word	0x0801a140

0800b7b0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d106      	bne.n	800b7ce <memp_free_pool+0x1e>
 800b7c0:	4b0a      	ldr	r3, [pc, #40]	; (800b7ec <memp_free_pool+0x3c>)
 800b7c2:	f240 1295 	movw	r2, #405	; 0x195
 800b7c6:	490a      	ldr	r1, [pc, #40]	; (800b7f0 <memp_free_pool+0x40>)
 800b7c8:	480a      	ldr	r0, [pc, #40]	; (800b7f4 <memp_free_pool+0x44>)
 800b7ca:	f00c fcb1 	bl	8018130 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d007      	beq.n	800b7e4 <memp_free_pool+0x34>
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d004      	beq.n	800b7e4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b7da:	6839      	ldr	r1, [r7, #0]
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f7ff ffbb 	bl	800b758 <do_memp_free_pool>
 800b7e2:	e000      	b.n	800b7e6 <memp_free_pool+0x36>
    return;
 800b7e4:	bf00      	nop
}
 800b7e6:	3708      	adds	r7, #8
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	0801a0ec 	.word	0x0801a0ec
 800b7f0:	0801a168 	.word	0x0801a168
 800b7f4:	0801a140 	.word	0x0801a140

0800b7f8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	4603      	mov	r3, r0
 800b800:	6039      	str	r1, [r7, #0]
 800b802:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b804:	79fb      	ldrb	r3, [r7, #7]
 800b806:	2b0c      	cmp	r3, #12
 800b808:	d907      	bls.n	800b81a <memp_free+0x22>
 800b80a:	4b0c      	ldr	r3, [pc, #48]	; (800b83c <memp_free+0x44>)
 800b80c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b810:	490b      	ldr	r1, [pc, #44]	; (800b840 <memp_free+0x48>)
 800b812:	480c      	ldr	r0, [pc, #48]	; (800b844 <memp_free+0x4c>)
 800b814:	f00c fc8c 	bl	8018130 <iprintf>
 800b818:	e00c      	b.n	800b834 <memp_free+0x3c>

  if (mem == NULL) {
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d008      	beq.n	800b832 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b820:	79fb      	ldrb	r3, [r7, #7]
 800b822:	4a09      	ldr	r2, [pc, #36]	; (800b848 <memp_free+0x50>)
 800b824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b828:	6839      	ldr	r1, [r7, #0]
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7ff ff94 	bl	800b758 <do_memp_free_pool>
 800b830:	e000      	b.n	800b834 <memp_free+0x3c>
    return;
 800b832:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b834:	3708      	adds	r7, #8
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	0801a0ec 	.word	0x0801a0ec
 800b840:	0801a1bc 	.word	0x0801a1bc
 800b844:	0801a140 	.word	0x0801a140
 800b848:	08026db8 	.word	0x08026db8

0800b84c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b84c:	b480      	push	{r7}
 800b84e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b850:	bf00      	nop
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr
	...

0800b85c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b086      	sub	sp, #24
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	607a      	str	r2, [r7, #4]
 800b868:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d108      	bne.n	800b882 <netif_add+0x26>
 800b870:	4b5b      	ldr	r3, [pc, #364]	; (800b9e0 <netif_add+0x184>)
 800b872:	f240 1227 	movw	r2, #295	; 0x127
 800b876:	495b      	ldr	r1, [pc, #364]	; (800b9e4 <netif_add+0x188>)
 800b878:	485b      	ldr	r0, [pc, #364]	; (800b9e8 <netif_add+0x18c>)
 800b87a:	f00c fc59 	bl	8018130 <iprintf>
 800b87e:	2300      	movs	r3, #0
 800b880:	e0a9      	b.n	800b9d6 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b884:	2b00      	cmp	r3, #0
 800b886:	d108      	bne.n	800b89a <netif_add+0x3e>
 800b888:	4b55      	ldr	r3, [pc, #340]	; (800b9e0 <netif_add+0x184>)
 800b88a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b88e:	4957      	ldr	r1, [pc, #348]	; (800b9ec <netif_add+0x190>)
 800b890:	4855      	ldr	r0, [pc, #340]	; (800b9e8 <netif_add+0x18c>)
 800b892:	f00c fc4d 	bl	8018130 <iprintf>
 800b896:	2300      	movs	r3, #0
 800b898:	e09d      	b.n	800b9d6 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d101      	bne.n	800b8a4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b8a0:	4b53      	ldr	r3, [pc, #332]	; (800b9f0 <netif_add+0x194>)
 800b8a2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d101      	bne.n	800b8ae <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b8aa:	4b51      	ldr	r3, [pc, #324]	; (800b9f0 <netif_add+0x194>)
 800b8ac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d101      	bne.n	800b8b8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b8b4:	4b4e      	ldr	r3, [pc, #312]	; (800b9f0 <netif_add+0x194>)
 800b8b6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	4a49      	ldr	r2, [pc, #292]	; (800b9f4 <netif_add+0x198>)
 800b8ce:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	3324      	adds	r3, #36	; 0x24
 800b8e2:	2204      	movs	r2, #4
 800b8e4:	2100      	movs	r1, #0
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f00c fc87 	bl	80181fa <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	6a3a      	ldr	r2, [r7, #32]
 800b8f6:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b8f8:	4b3f      	ldr	r3, [pc, #252]	; (800b9f8 <netif_add+0x19c>)
 800b8fa:	781a      	ldrb	r2, [r3, #0]
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b906:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	68b9      	ldr	r1, [r7, #8]
 800b90e:	68f8      	ldr	r0, [r7, #12]
 800b910:	f000 f914 	bl	800bb3c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b916:	68f8      	ldr	r0, [r7, #12]
 800b918:	4798      	blx	r3
 800b91a:	4603      	mov	r3, r0
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d001      	beq.n	800b924 <netif_add+0xc8>
    return NULL;
 800b920:	2300      	movs	r3, #0
 800b922:	e058      	b.n	800b9d6 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b92a:	2bff      	cmp	r3, #255	; 0xff
 800b92c:	d103      	bne.n	800b936 <netif_add+0xda>
        netif->num = 0;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2200      	movs	r2, #0
 800b932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800b936:	2300      	movs	r3, #0
 800b938:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b93a:	4b30      	ldr	r3, [pc, #192]	; (800b9fc <netif_add+0x1a0>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	617b      	str	r3, [r7, #20]
 800b940:	e02b      	b.n	800b99a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b942:	697a      	ldr	r2, [r7, #20]
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	429a      	cmp	r2, r3
 800b948:	d106      	bne.n	800b958 <netif_add+0xfc>
 800b94a:	4b25      	ldr	r3, [pc, #148]	; (800b9e0 <netif_add+0x184>)
 800b94c:	f240 128b 	movw	r2, #395	; 0x18b
 800b950:	492b      	ldr	r1, [pc, #172]	; (800ba00 <netif_add+0x1a4>)
 800b952:	4825      	ldr	r0, [pc, #148]	; (800b9e8 <netif_add+0x18c>)
 800b954:	f00c fbec 	bl	8018130 <iprintf>
        num_netifs++;
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	3301      	adds	r3, #1
 800b95c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	2bff      	cmp	r3, #255	; 0xff
 800b962:	dd06      	ble.n	800b972 <netif_add+0x116>
 800b964:	4b1e      	ldr	r3, [pc, #120]	; (800b9e0 <netif_add+0x184>)
 800b966:	f240 128d 	movw	r2, #397	; 0x18d
 800b96a:	4926      	ldr	r1, [pc, #152]	; (800ba04 <netif_add+0x1a8>)
 800b96c:	481e      	ldr	r0, [pc, #120]	; (800b9e8 <netif_add+0x18c>)
 800b96e:	f00c fbdf 	bl	8018130 <iprintf>
        if (netif2->num == netif->num) {
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b97e:	429a      	cmp	r2, r3
 800b980:	d108      	bne.n	800b994 <netif_add+0x138>
          netif->num++;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b988:	3301      	adds	r3, #1
 800b98a:	b2da      	uxtb	r2, r3
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800b992:	e005      	b.n	800b9a0 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	617b      	str	r3, [r7, #20]
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d1d0      	bne.n	800b942 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d1be      	bne.n	800b924 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b9ac:	2bfe      	cmp	r3, #254	; 0xfe
 800b9ae:	d103      	bne.n	800b9b8 <netif_add+0x15c>
    netif_num = 0;
 800b9b0:	4b11      	ldr	r3, [pc, #68]	; (800b9f8 <netif_add+0x19c>)
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	701a      	strb	r2, [r3, #0]
 800b9b6:	e006      	b.n	800b9c6 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b9be:	3301      	adds	r3, #1
 800b9c0:	b2da      	uxtb	r2, r3
 800b9c2:	4b0d      	ldr	r3, [pc, #52]	; (800b9f8 <netif_add+0x19c>)
 800b9c4:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b9c6:	4b0d      	ldr	r3, [pc, #52]	; (800b9fc <netif_add+0x1a0>)
 800b9c8:	681a      	ldr	r2, [r3, #0]
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b9ce:	4a0b      	ldr	r2, [pc, #44]	; (800b9fc <netif_add+0x1a0>)
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3718      	adds	r7, #24
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
 800b9de:	bf00      	nop
 800b9e0:	0801a1d8 	.word	0x0801a1d8
 800b9e4:	0801a26c 	.word	0x0801a26c
 800b9e8:	0801a228 	.word	0x0801a228
 800b9ec:	0801a288 	.word	0x0801a288
 800b9f0:	08026e3c 	.word	0x08026e3c
 800b9f4:	0800be1f 	.word	0x0800be1f
 800b9f8:	20010d58 	.word	0x20010d58
 800b9fc:	20010d50 	.word	0x20010d50
 800ba00:	0801a2ac 	.word	0x0801a2ac
 800ba04:	0801a2c0 	.word	0x0801a2c0

0800ba08 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ba12:	6839      	ldr	r1, [r7, #0]
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f002 fe93 	bl	800e740 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ba1a:	6839      	ldr	r1, [r7, #0]
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f007 ff0d 	bl	801383c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ba22:	bf00      	nop
 800ba24:	3708      	adds	r7, #8
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
	...

0800ba2c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b086      	sub	sp, #24
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	60b9      	str	r1, [r7, #8]
 800ba36:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d106      	bne.n	800ba4c <netif_do_set_ipaddr+0x20>
 800ba3e:	4b1d      	ldr	r3, [pc, #116]	; (800bab4 <netif_do_set_ipaddr+0x88>)
 800ba40:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ba44:	491c      	ldr	r1, [pc, #112]	; (800bab8 <netif_do_set_ipaddr+0x8c>)
 800ba46:	481d      	ldr	r0, [pc, #116]	; (800babc <netif_do_set_ipaddr+0x90>)
 800ba48:	f00c fb72 	bl	8018130 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d106      	bne.n	800ba60 <netif_do_set_ipaddr+0x34>
 800ba52:	4b18      	ldr	r3, [pc, #96]	; (800bab4 <netif_do_set_ipaddr+0x88>)
 800ba54:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ba58:	4917      	ldr	r1, [pc, #92]	; (800bab8 <netif_do_set_ipaddr+0x8c>)
 800ba5a:	4818      	ldr	r0, [pc, #96]	; (800babc <netif_do_set_ipaddr+0x90>)
 800ba5c:	f00c fb68 	bl	8018130 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	681a      	ldr	r2, [r3, #0]
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	3304      	adds	r3, #4
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d01c      	beq.n	800baa8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	3304      	adds	r3, #4
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ba7e:	f107 0314 	add.w	r3, r7, #20
 800ba82:	4619      	mov	r1, r3
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f7ff ffbf 	bl	800ba08 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d002      	beq.n	800ba96 <netif_do_set_ipaddr+0x6a>
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	e000      	b.n	800ba98 <netif_do_set_ipaddr+0x6c>
 800ba96:	2300      	movs	r3, #0
 800ba98:	68fa      	ldr	r2, [r7, #12]
 800ba9a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ba9c:	2101      	movs	r1, #1
 800ba9e:	68f8      	ldr	r0, [r7, #12]
 800baa0:	f000 f8d2 	bl	800bc48 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800baa4:	2301      	movs	r3, #1
 800baa6:	e000      	b.n	800baaa <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3718      	adds	r7, #24
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	0801a1d8 	.word	0x0801a1d8
 800bab8:	0801a2f0 	.word	0x0801a2f0
 800babc:	0801a228 	.word	0x0801a228

0800bac0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b085      	sub	sp, #20
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	60b9      	str	r1, [r7, #8]
 800baca:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	3308      	adds	r3, #8
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d00a      	beq.n	800baf0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d002      	beq.n	800bae6 <netif_do_set_netmask+0x26>
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	e000      	b.n	800bae8 <netif_do_set_netmask+0x28>
 800bae6:	2300      	movs	r3, #0
 800bae8:	68fa      	ldr	r2, [r7, #12]
 800baea:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800baec:	2301      	movs	r3, #1
 800baee:	e000      	b.n	800baf2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800baf0:	2300      	movs	r3, #0
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3714      	adds	r7, #20
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr

0800bafe <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800bafe:	b480      	push	{r7}
 800bb00:	b085      	sub	sp, #20
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	60f8      	str	r0, [r7, #12]
 800bb06:	60b9      	str	r1, [r7, #8]
 800bb08:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	681a      	ldr	r2, [r3, #0]
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	330c      	adds	r3, #12
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d00a      	beq.n	800bb2e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d002      	beq.n	800bb24 <netif_do_set_gw+0x26>
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	e000      	b.n	800bb26 <netif_do_set_gw+0x28>
 800bb24:	2300      	movs	r3, #0
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	e000      	b.n	800bb30 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800bb2e:	2300      	movs	r3, #0
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3714      	adds	r7, #20
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr

0800bb3c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b088      	sub	sp, #32
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	60f8      	str	r0, [r7, #12]
 800bb44:	60b9      	str	r1, [r7, #8]
 800bb46:	607a      	str	r2, [r7, #4]
 800bb48:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d101      	bne.n	800bb5c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800bb58:	4b1c      	ldr	r3, [pc, #112]	; (800bbcc <netif_set_addr+0x90>)
 800bb5a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d101      	bne.n	800bb66 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800bb62:	4b1a      	ldr	r3, [pc, #104]	; (800bbcc <netif_set_addr+0x90>)
 800bb64:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d101      	bne.n	800bb70 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800bb6c:	4b17      	ldr	r3, [pc, #92]	; (800bbcc <netif_set_addr+0x90>)
 800bb6e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d003      	beq.n	800bb7e <netif_set_addr+0x42>
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d101      	bne.n	800bb82 <netif_set_addr+0x46>
 800bb7e:	2301      	movs	r3, #1
 800bb80:	e000      	b.n	800bb84 <netif_set_addr+0x48>
 800bb82:	2300      	movs	r3, #0
 800bb84:	617b      	str	r3, [r7, #20]
  if (remove) {
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d006      	beq.n	800bb9a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800bb8c:	f107 0310 	add.w	r3, r7, #16
 800bb90:	461a      	mov	r2, r3
 800bb92:	68b9      	ldr	r1, [r7, #8]
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f7ff ff49 	bl	800ba2c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800bb9a:	69fa      	ldr	r2, [r7, #28]
 800bb9c:	6879      	ldr	r1, [r7, #4]
 800bb9e:	68f8      	ldr	r0, [r7, #12]
 800bba0:	f7ff ff8e 	bl	800bac0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800bba4:	69ba      	ldr	r2, [r7, #24]
 800bba6:	6839      	ldr	r1, [r7, #0]
 800bba8:	68f8      	ldr	r0, [r7, #12]
 800bbaa:	f7ff ffa8 	bl	800bafe <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d106      	bne.n	800bbc2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800bbb4:	f107 0310 	add.w	r3, r7, #16
 800bbb8:	461a      	mov	r2, r3
 800bbba:	68b9      	ldr	r1, [r7, #8]
 800bbbc:	68f8      	ldr	r0, [r7, #12]
 800bbbe:	f7ff ff35 	bl	800ba2c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800bbc2:	bf00      	nop
 800bbc4:	3720      	adds	r7, #32
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}
 800bbca:	bf00      	nop
 800bbcc:	08026e3c 	.word	0x08026e3c

0800bbd0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b083      	sub	sp, #12
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800bbd8:	4a04      	ldr	r2, [pc, #16]	; (800bbec <netif_set_default+0x1c>)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800bbde:	bf00      	nop
 800bbe0:	370c      	adds	r7, #12
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop
 800bbec:	20010d54 	.word	0x20010d54

0800bbf0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d107      	bne.n	800bc0e <netif_set_up+0x1e>
 800bbfe:	4b0f      	ldr	r3, [pc, #60]	; (800bc3c <netif_set_up+0x4c>)
 800bc00:	f44f 7254 	mov.w	r2, #848	; 0x350
 800bc04:	490e      	ldr	r1, [pc, #56]	; (800bc40 <netif_set_up+0x50>)
 800bc06:	480f      	ldr	r0, [pc, #60]	; (800bc44 <netif_set_up+0x54>)
 800bc08:	f00c fa92 	bl	8018130 <iprintf>
 800bc0c:	e013      	b.n	800bc36 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bc14:	f003 0301 	and.w	r3, r3, #1
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d10c      	bne.n	800bc36 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bc22:	f043 0301 	orr.w	r3, r3, #1
 800bc26:	b2da      	uxtb	r2, r3
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bc2e:	2103      	movs	r1, #3
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 f809 	bl	800bc48 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800bc36:	3708      	adds	r7, #8
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}
 800bc3c:	0801a1d8 	.word	0x0801a1d8
 800bc40:	0801a360 	.word	0x0801a360
 800bc44:	0801a228 	.word	0x0801a228

0800bc48 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b082      	sub	sp, #8
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	460b      	mov	r3, r1
 800bc52:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d106      	bne.n	800bc68 <netif_issue_reports+0x20>
 800bc5a:	4b18      	ldr	r3, [pc, #96]	; (800bcbc <netif_issue_reports+0x74>)
 800bc5c:	f240 326d 	movw	r2, #877	; 0x36d
 800bc60:	4917      	ldr	r1, [pc, #92]	; (800bcc0 <netif_issue_reports+0x78>)
 800bc62:	4818      	ldr	r0, [pc, #96]	; (800bcc4 <netif_issue_reports+0x7c>)
 800bc64:	f00c fa64 	bl	8018130 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bc6e:	f003 0304 	and.w	r3, r3, #4
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d01e      	beq.n	800bcb4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bc7c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d017      	beq.n	800bcb4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bc84:	78fb      	ldrb	r3, [r7, #3]
 800bc86:	f003 0301 	and.w	r3, r3, #1
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d013      	beq.n	800bcb6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	3304      	adds	r3, #4
 800bc92:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d00e      	beq.n	800bcb6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bc9e:	f003 0308 	and.w	r3, r3, #8
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d007      	beq.n	800bcb6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	3304      	adds	r3, #4
 800bcaa:	4619      	mov	r1, r3
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f00a fbc5 	bl	801643c <etharp_request>
 800bcb2:	e000      	b.n	800bcb6 <netif_issue_reports+0x6e>
    return;
 800bcb4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800bcb6:	3708      	adds	r7, #8
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	0801a1d8 	.word	0x0801a1d8
 800bcc0:	0801a37c 	.word	0x0801a37c
 800bcc4:	0801a228 	.word	0x0801a228

0800bcc8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b082      	sub	sp, #8
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d107      	bne.n	800bce6 <netif_set_down+0x1e>
 800bcd6:	4b12      	ldr	r3, [pc, #72]	; (800bd20 <netif_set_down+0x58>)
 800bcd8:	f240 329b 	movw	r2, #923	; 0x39b
 800bcdc:	4911      	ldr	r1, [pc, #68]	; (800bd24 <netif_set_down+0x5c>)
 800bcde:	4812      	ldr	r0, [pc, #72]	; (800bd28 <netif_set_down+0x60>)
 800bce0:	f00c fa26 	bl	8018130 <iprintf>
 800bce4:	e019      	b.n	800bd1a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bcec:	f003 0301 	and.w	r3, r3, #1
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d012      	beq.n	800bd1a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bcfa:	f023 0301 	bic.w	r3, r3, #1
 800bcfe:	b2da      	uxtb	r2, r3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bd0c:	f003 0308 	and.w	r3, r3, #8
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d002      	beq.n	800bd1a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f009 ff4b 	bl	8015bb0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800bd1a:	3708      	adds	r7, #8
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	0801a1d8 	.word	0x0801a1d8
 800bd24:	0801a3a0 	.word	0x0801a3a0
 800bd28:	0801a228 	.word	0x0801a228

0800bd2c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d107      	bne.n	800bd4a <netif_set_link_up+0x1e>
 800bd3a:	4b15      	ldr	r3, [pc, #84]	; (800bd90 <netif_set_link_up+0x64>)
 800bd3c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800bd40:	4914      	ldr	r1, [pc, #80]	; (800bd94 <netif_set_link_up+0x68>)
 800bd42:	4815      	ldr	r0, [pc, #84]	; (800bd98 <netif_set_link_up+0x6c>)
 800bd44:	f00c f9f4 	bl	8018130 <iprintf>
 800bd48:	e01e      	b.n	800bd88 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bd50:	f003 0304 	and.w	r3, r3, #4
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d117      	bne.n	800bd88 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bd5e:	f043 0304 	orr.w	r3, r3, #4
 800bd62:	b2da      	uxtb	r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f008 f990 	bl	8014090 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bd70:	2103      	movs	r1, #3
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f7ff ff68 	bl	800bc48 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	69db      	ldr	r3, [r3, #28]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d003      	beq.n	800bd88 <netif_set_link_up+0x5c>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	69db      	ldr	r3, [r3, #28]
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bd88:	3708      	adds	r7, #8
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
 800bd8e:	bf00      	nop
 800bd90:	0801a1d8 	.word	0x0801a1d8
 800bd94:	0801a3c0 	.word	0x0801a3c0
 800bd98:	0801a228 	.word	0x0801a228

0800bd9c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d107      	bne.n	800bdba <netif_set_link_down+0x1e>
 800bdaa:	4b11      	ldr	r3, [pc, #68]	; (800bdf0 <netif_set_link_down+0x54>)
 800bdac:	f240 4206 	movw	r2, #1030	; 0x406
 800bdb0:	4910      	ldr	r1, [pc, #64]	; (800bdf4 <netif_set_link_down+0x58>)
 800bdb2:	4811      	ldr	r0, [pc, #68]	; (800bdf8 <netif_set_link_down+0x5c>)
 800bdb4:	f00c f9bc 	bl	8018130 <iprintf>
 800bdb8:	e017      	b.n	800bdea <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bdc0:	f003 0304 	and.w	r3, r3, #4
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d010      	beq.n	800bdea <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bdce:	f023 0304 	bic.w	r3, r3, #4
 800bdd2:	b2da      	uxtb	r2, r3
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	69db      	ldr	r3, [r3, #28]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d003      	beq.n	800bdea <netif_set_link_down+0x4e>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	69db      	ldr	r3, [r3, #28]
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bdea:	3708      	adds	r7, #8
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	0801a1d8 	.word	0x0801a1d8
 800bdf4:	0801a3e4 	.word	0x0801a3e4
 800bdf8:	0801a228 	.word	0x0801a228

0800bdfc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d002      	beq.n	800be12 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	683a      	ldr	r2, [r7, #0]
 800be10:	61da      	str	r2, [r3, #28]
  }
}
 800be12:	bf00      	nop
 800be14:	370c      	adds	r7, #12
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr

0800be1e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800be1e:	b480      	push	{r7}
 800be20:	b085      	sub	sp, #20
 800be22:	af00      	add	r7, sp, #0
 800be24:	60f8      	str	r0, [r7, #12]
 800be26:	60b9      	str	r1, [r7, #8]
 800be28:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800be2a:	f06f 030b 	mvn.w	r3, #11
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3714      	adds	r7, #20
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr
	...

0800be3c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b085      	sub	sp, #20
 800be40:	af00      	add	r7, sp, #0
 800be42:	4603      	mov	r3, r0
 800be44:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800be46:	79fb      	ldrb	r3, [r7, #7]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d013      	beq.n	800be74 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800be4c:	4b0d      	ldr	r3, [pc, #52]	; (800be84 <netif_get_by_index+0x48>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	60fb      	str	r3, [r7, #12]
 800be52:	e00c      	b.n	800be6e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be5a:	3301      	adds	r3, #1
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	79fa      	ldrb	r2, [r7, #7]
 800be60:	429a      	cmp	r2, r3
 800be62:	d101      	bne.n	800be68 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	e006      	b.n	800be76 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	60fb      	str	r3, [r7, #12]
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d1ef      	bne.n	800be54 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800be74:	2300      	movs	r3, #0
}
 800be76:	4618      	mov	r0, r3
 800be78:	3714      	adds	r7, #20
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr
 800be82:	bf00      	nop
 800be84:	20010d50 	.word	0x20010d50

0800be88 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b082      	sub	sp, #8
 800be8c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800be8e:	f00c f843 	bl	8017f18 <sys_arch_protect>
 800be92:	6038      	str	r0, [r7, #0]
 800be94:	4b0d      	ldr	r3, [pc, #52]	; (800becc <pbuf_free_ooseq+0x44>)
 800be96:	2200      	movs	r2, #0
 800be98:	701a      	strb	r2, [r3, #0]
 800be9a:	6838      	ldr	r0, [r7, #0]
 800be9c:	f00c f84a 	bl	8017f34 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bea0:	4b0b      	ldr	r3, [pc, #44]	; (800bed0 <pbuf_free_ooseq+0x48>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	607b      	str	r3, [r7, #4]
 800bea6:	e00a      	b.n	800bebe <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800beac:	2b00      	cmp	r3, #0
 800beae:	d003      	beq.n	800beb8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f002 fc83 	bl	800e7bc <tcp_free_ooseq>
      return;
 800beb6:	e005      	b.n	800bec4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	68db      	ldr	r3, [r3, #12]
 800bebc:	607b      	str	r3, [r7, #4]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d1f1      	bne.n	800bea8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800bec4:	3708      	adds	r7, #8
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop
 800becc:	20010d59 	.word	0x20010d59
 800bed0:	20010d68 	.word	0x20010d68

0800bed4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b082      	sub	sp, #8
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800bedc:	f7ff ffd4 	bl	800be88 <pbuf_free_ooseq>
}
 800bee0:	bf00      	nop
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800beee:	f00c f813 	bl	8017f18 <sys_arch_protect>
 800bef2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800bef4:	4b0f      	ldr	r3, [pc, #60]	; (800bf34 <pbuf_pool_is_empty+0x4c>)
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800befa:	4b0e      	ldr	r3, [pc, #56]	; (800bf34 <pbuf_pool_is_empty+0x4c>)
 800befc:	2201      	movs	r2, #1
 800befe:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f00c f817 	bl	8017f34 <sys_arch_unprotect>

  if (!queued) {
 800bf06:	78fb      	ldrb	r3, [r7, #3]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d10f      	bne.n	800bf2c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800bf0c:	2100      	movs	r1, #0
 800bf0e:	480a      	ldr	r0, [pc, #40]	; (800bf38 <pbuf_pool_is_empty+0x50>)
 800bf10:	f7fe f834 	bl	8009f7c <tcpip_try_callback>
 800bf14:	4603      	mov	r3, r0
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d008      	beq.n	800bf2c <pbuf_pool_is_empty+0x44>
 800bf1a:	f00b fffd 	bl	8017f18 <sys_arch_protect>
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	4b04      	ldr	r3, [pc, #16]	; (800bf34 <pbuf_pool_is_empty+0x4c>)
 800bf22:	2200      	movs	r2, #0
 800bf24:	701a      	strb	r2, [r3, #0]
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f00c f804 	bl	8017f34 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800bf2c:	bf00      	nop
 800bf2e:	3708      	adds	r7, #8
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	20010d59 	.word	0x20010d59
 800bf38:	0800bed5 	.word	0x0800bed5

0800bf3c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b085      	sub	sp, #20
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	60b9      	str	r1, [r7, #8]
 800bf46:	4611      	mov	r1, r2
 800bf48:	461a      	mov	r2, r3
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	80fb      	strh	r3, [r7, #6]
 800bf4e:	4613      	mov	r3, r2
 800bf50:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2200      	movs	r2, #0
 800bf56:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	68ba      	ldr	r2, [r7, #8]
 800bf5c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	88fa      	ldrh	r2, [r7, #6]
 800bf62:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	88ba      	ldrh	r2, [r7, #4]
 800bf68:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bf6a:	8b3b      	ldrh	r3, [r7, #24]
 800bf6c:	b2da      	uxtb	r2, r3
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	7f3a      	ldrb	r2, [r7, #28]
 800bf76:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2200      	movs	r2, #0
 800bf82:	73da      	strb	r2, [r3, #15]
}
 800bf84:	bf00      	nop
 800bf86:	3714      	adds	r7, #20
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr

0800bf90 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b08c      	sub	sp, #48	; 0x30
 800bf94:	af02      	add	r7, sp, #8
 800bf96:	4603      	mov	r3, r0
 800bf98:	71fb      	strb	r3, [r7, #7]
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	80bb      	strh	r3, [r7, #4]
 800bf9e:	4613      	mov	r3, r2
 800bfa0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800bfa2:	79fb      	ldrb	r3, [r7, #7]
 800bfa4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800bfa6:	887b      	ldrh	r3, [r7, #2]
 800bfa8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bfac:	d07f      	beq.n	800c0ae <pbuf_alloc+0x11e>
 800bfae:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bfb2:	f300 80c8 	bgt.w	800c146 <pbuf_alloc+0x1b6>
 800bfb6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bfba:	d010      	beq.n	800bfde <pbuf_alloc+0x4e>
 800bfbc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bfc0:	f300 80c1 	bgt.w	800c146 <pbuf_alloc+0x1b6>
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d002      	beq.n	800bfce <pbuf_alloc+0x3e>
 800bfc8:	2b41      	cmp	r3, #65	; 0x41
 800bfca:	f040 80bc 	bne.w	800c146 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800bfce:	887a      	ldrh	r2, [r7, #2]
 800bfd0:	88bb      	ldrh	r3, [r7, #4]
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	2000      	movs	r0, #0
 800bfd6:	f000 f8d1 	bl	800c17c <pbuf_alloc_reference>
 800bfda:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800bfdc:	e0bd      	b.n	800c15a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bfe6:	88bb      	ldrh	r3, [r7, #4]
 800bfe8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bfea:	200c      	movs	r0, #12
 800bfec:	f7ff fb8e 	bl	800b70c <memp_malloc>
 800bff0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d109      	bne.n	800c00c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800bff8:	f7ff ff76 	bl	800bee8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800bffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d002      	beq.n	800c008 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c002:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c004:	f000 faa8 	bl	800c558 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c008:	2300      	movs	r3, #0
 800c00a:	e0a7      	b.n	800c15c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c00c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c00e:	3303      	adds	r3, #3
 800c010:	b29b      	uxth	r3, r3
 800c012:	f023 0303 	bic.w	r3, r3, #3
 800c016:	b29b      	uxth	r3, r3
 800c018:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	8b7a      	ldrh	r2, [r7, #26]
 800c020:	4293      	cmp	r3, r2
 800c022:	bf28      	it	cs
 800c024:	4613      	movcs	r3, r2
 800c026:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c028:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c02a:	3310      	adds	r3, #16
 800c02c:	693a      	ldr	r2, [r7, #16]
 800c02e:	4413      	add	r3, r2
 800c030:	3303      	adds	r3, #3
 800c032:	f023 0303 	bic.w	r3, r3, #3
 800c036:	4618      	mov	r0, r3
 800c038:	89f9      	ldrh	r1, [r7, #14]
 800c03a:	8b7a      	ldrh	r2, [r7, #26]
 800c03c:	2300      	movs	r3, #0
 800c03e:	9301      	str	r3, [sp, #4]
 800c040:	887b      	ldrh	r3, [r7, #2]
 800c042:	9300      	str	r3, [sp, #0]
 800c044:	460b      	mov	r3, r1
 800c046:	4601      	mov	r1, r0
 800c048:	6938      	ldr	r0, [r7, #16]
 800c04a:	f7ff ff77 	bl	800bf3c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	f003 0303 	and.w	r3, r3, #3
 800c056:	2b00      	cmp	r3, #0
 800c058:	d006      	beq.n	800c068 <pbuf_alloc+0xd8>
 800c05a:	4b42      	ldr	r3, [pc, #264]	; (800c164 <pbuf_alloc+0x1d4>)
 800c05c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c060:	4941      	ldr	r1, [pc, #260]	; (800c168 <pbuf_alloc+0x1d8>)
 800c062:	4842      	ldr	r0, [pc, #264]	; (800c16c <pbuf_alloc+0x1dc>)
 800c064:	f00c f864 	bl	8018130 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c068:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c06a:	3303      	adds	r3, #3
 800c06c:	f023 0303 	bic.w	r3, r3, #3
 800c070:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c074:	d106      	bne.n	800c084 <pbuf_alloc+0xf4>
 800c076:	4b3b      	ldr	r3, [pc, #236]	; (800c164 <pbuf_alloc+0x1d4>)
 800c078:	f44f 7281 	mov.w	r2, #258	; 0x102
 800c07c:	493c      	ldr	r1, [pc, #240]	; (800c170 <pbuf_alloc+0x1e0>)
 800c07e:	483b      	ldr	r0, [pc, #236]	; (800c16c <pbuf_alloc+0x1dc>)
 800c080:	f00c f856 	bl	8018130 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c086:	2b00      	cmp	r3, #0
 800c088:	d102      	bne.n	800c090 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	627b      	str	r3, [r7, #36]	; 0x24
 800c08e:	e002      	b.n	800c096 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c090:	69fb      	ldr	r3, [r7, #28]
 800c092:	693a      	ldr	r2, [r7, #16]
 800c094:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c09a:	8b7a      	ldrh	r2, [r7, #26]
 800c09c:	89fb      	ldrh	r3, [r7, #14]
 800c09e:	1ad3      	subs	r3, r2, r3
 800c0a0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800c0a6:	8b7b      	ldrh	r3, [r7, #26]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d19e      	bne.n	800bfea <pbuf_alloc+0x5a>
      break;
 800c0ac:	e055      	b.n	800c15a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c0ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c0b0:	3303      	adds	r3, #3
 800c0b2:	b29b      	uxth	r3, r3
 800c0b4:	f023 0303 	bic.w	r3, r3, #3
 800c0b8:	b29a      	uxth	r2, r3
 800c0ba:	88bb      	ldrh	r3, [r7, #4]
 800c0bc:	3303      	adds	r3, #3
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	f023 0303 	bic.w	r3, r3, #3
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	4413      	add	r3, r2
 800c0c8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c0ca:	8b3b      	ldrh	r3, [r7, #24]
 800c0cc:	3310      	adds	r3, #16
 800c0ce:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c0d0:	8b3a      	ldrh	r2, [r7, #24]
 800c0d2:	88bb      	ldrh	r3, [r7, #4]
 800c0d4:	3303      	adds	r3, #3
 800c0d6:	f023 0303 	bic.w	r3, r3, #3
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d306      	bcc.n	800c0ec <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c0de:	8afa      	ldrh	r2, [r7, #22]
 800c0e0:	88bb      	ldrh	r3, [r7, #4]
 800c0e2:	3303      	adds	r3, #3
 800c0e4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d201      	bcs.n	800c0f0 <pbuf_alloc+0x160>
        return NULL;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	e035      	b.n	800c15c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c0f0:	8afb      	ldrh	r3, [r7, #22]
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f7ff f966 	bl	800b3c4 <mem_malloc>
 800c0f8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800c0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d101      	bne.n	800c104 <pbuf_alloc+0x174>
        return NULL;
 800c100:	2300      	movs	r3, #0
 800c102:	e02b      	b.n	800c15c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c104:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c106:	3310      	adds	r3, #16
 800c108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c10a:	4413      	add	r3, r2
 800c10c:	3303      	adds	r3, #3
 800c10e:	f023 0303 	bic.w	r3, r3, #3
 800c112:	4618      	mov	r0, r3
 800c114:	88b9      	ldrh	r1, [r7, #4]
 800c116:	88ba      	ldrh	r2, [r7, #4]
 800c118:	2300      	movs	r3, #0
 800c11a:	9301      	str	r3, [sp, #4]
 800c11c:	887b      	ldrh	r3, [r7, #2]
 800c11e:	9300      	str	r3, [sp, #0]
 800c120:	460b      	mov	r3, r1
 800c122:	4601      	mov	r1, r0
 800c124:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c126:	f7ff ff09 	bl	800bf3c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	f003 0303 	and.w	r3, r3, #3
 800c132:	2b00      	cmp	r3, #0
 800c134:	d010      	beq.n	800c158 <pbuf_alloc+0x1c8>
 800c136:	4b0b      	ldr	r3, [pc, #44]	; (800c164 <pbuf_alloc+0x1d4>)
 800c138:	f44f 7291 	mov.w	r2, #290	; 0x122
 800c13c:	490d      	ldr	r1, [pc, #52]	; (800c174 <pbuf_alloc+0x1e4>)
 800c13e:	480b      	ldr	r0, [pc, #44]	; (800c16c <pbuf_alloc+0x1dc>)
 800c140:	f00b fff6 	bl	8018130 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c144:	e008      	b.n	800c158 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c146:	4b07      	ldr	r3, [pc, #28]	; (800c164 <pbuf_alloc+0x1d4>)
 800c148:	f240 1227 	movw	r2, #295	; 0x127
 800c14c:	490a      	ldr	r1, [pc, #40]	; (800c178 <pbuf_alloc+0x1e8>)
 800c14e:	4807      	ldr	r0, [pc, #28]	; (800c16c <pbuf_alloc+0x1dc>)
 800c150:	f00b ffee 	bl	8018130 <iprintf>
      return NULL;
 800c154:	2300      	movs	r3, #0
 800c156:	e001      	b.n	800c15c <pbuf_alloc+0x1cc>
      break;
 800c158:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3728      	adds	r7, #40	; 0x28
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	0801a408 	.word	0x0801a408
 800c168:	0801a438 	.word	0x0801a438
 800c16c:	0801a468 	.word	0x0801a468
 800c170:	0801a490 	.word	0x0801a490
 800c174:	0801a4c4 	.word	0x0801a4c4
 800c178:	0801a4f0 	.word	0x0801a4f0

0800c17c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b086      	sub	sp, #24
 800c180:	af02      	add	r7, sp, #8
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	460b      	mov	r3, r1
 800c186:	807b      	strh	r3, [r7, #2]
 800c188:	4613      	mov	r3, r2
 800c18a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c18c:	883b      	ldrh	r3, [r7, #0]
 800c18e:	2b41      	cmp	r3, #65	; 0x41
 800c190:	d009      	beq.n	800c1a6 <pbuf_alloc_reference+0x2a>
 800c192:	883b      	ldrh	r3, [r7, #0]
 800c194:	2b01      	cmp	r3, #1
 800c196:	d006      	beq.n	800c1a6 <pbuf_alloc_reference+0x2a>
 800c198:	4b0f      	ldr	r3, [pc, #60]	; (800c1d8 <pbuf_alloc_reference+0x5c>)
 800c19a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800c19e:	490f      	ldr	r1, [pc, #60]	; (800c1dc <pbuf_alloc_reference+0x60>)
 800c1a0:	480f      	ldr	r0, [pc, #60]	; (800c1e0 <pbuf_alloc_reference+0x64>)
 800c1a2:	f00b ffc5 	bl	8018130 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c1a6:	200b      	movs	r0, #11
 800c1a8:	f7ff fab0 	bl	800b70c <memp_malloc>
 800c1ac:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d101      	bne.n	800c1b8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	e00b      	b.n	800c1d0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c1b8:	8879      	ldrh	r1, [r7, #2]
 800c1ba:	887a      	ldrh	r2, [r7, #2]
 800c1bc:	2300      	movs	r3, #0
 800c1be:	9301      	str	r3, [sp, #4]
 800c1c0:	883b      	ldrh	r3, [r7, #0]
 800c1c2:	9300      	str	r3, [sp, #0]
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	6879      	ldr	r1, [r7, #4]
 800c1c8:	68f8      	ldr	r0, [r7, #12]
 800c1ca:	f7ff feb7 	bl	800bf3c <pbuf_init_alloced_pbuf>
  return p;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3710      	adds	r7, #16
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	0801a408 	.word	0x0801a408
 800c1dc:	0801a50c 	.word	0x0801a50c
 800c1e0:	0801a468 	.word	0x0801a468

0800c1e4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b088      	sub	sp, #32
 800c1e8:	af02      	add	r7, sp, #8
 800c1ea:	607b      	str	r3, [r7, #4]
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	73fb      	strb	r3, [r7, #15]
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	81bb      	strh	r3, [r7, #12]
 800c1f4:	4613      	mov	r3, r2
 800c1f6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c1f8:	7bfb      	ldrb	r3, [r7, #15]
 800c1fa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c1fc:	8a7b      	ldrh	r3, [r7, #18]
 800c1fe:	3303      	adds	r3, #3
 800c200:	f023 0203 	bic.w	r2, r3, #3
 800c204:	89bb      	ldrh	r3, [r7, #12]
 800c206:	441a      	add	r2, r3
 800c208:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d901      	bls.n	800c212 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c20e:	2300      	movs	r3, #0
 800c210:	e018      	b.n	800c244 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c212:	6a3b      	ldr	r3, [r7, #32]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d007      	beq.n	800c228 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c218:	8a7b      	ldrh	r3, [r7, #18]
 800c21a:	3303      	adds	r3, #3
 800c21c:	f023 0303 	bic.w	r3, r3, #3
 800c220:	6a3a      	ldr	r2, [r7, #32]
 800c222:	4413      	add	r3, r2
 800c224:	617b      	str	r3, [r7, #20]
 800c226:	e001      	b.n	800c22c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c228:	2300      	movs	r3, #0
 800c22a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	89b9      	ldrh	r1, [r7, #12]
 800c230:	89ba      	ldrh	r2, [r7, #12]
 800c232:	2302      	movs	r3, #2
 800c234:	9301      	str	r3, [sp, #4]
 800c236:	897b      	ldrh	r3, [r7, #10]
 800c238:	9300      	str	r3, [sp, #0]
 800c23a:	460b      	mov	r3, r1
 800c23c:	6979      	ldr	r1, [r7, #20]
 800c23e:	f7ff fe7d 	bl	800bf3c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c242:	687b      	ldr	r3, [r7, #4]
}
 800c244:	4618      	mov	r0, r3
 800c246:	3718      	adds	r7, #24
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	460b      	mov	r3, r1
 800c256:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d106      	bne.n	800c26c <pbuf_realloc+0x20>
 800c25e:	4b3a      	ldr	r3, [pc, #232]	; (800c348 <pbuf_realloc+0xfc>)
 800c260:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c264:	4939      	ldr	r1, [pc, #228]	; (800c34c <pbuf_realloc+0x100>)
 800c266:	483a      	ldr	r0, [pc, #232]	; (800c350 <pbuf_realloc+0x104>)
 800c268:	f00b ff62 	bl	8018130 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	891b      	ldrh	r3, [r3, #8]
 800c270:	887a      	ldrh	r2, [r7, #2]
 800c272:	429a      	cmp	r2, r3
 800c274:	d263      	bcs.n	800c33e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	891a      	ldrh	r2, [r3, #8]
 800c27a:	887b      	ldrh	r3, [r7, #2]
 800c27c:	1ad3      	subs	r3, r2, r3
 800c27e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c280:	887b      	ldrh	r3, [r7, #2]
 800c282:	817b      	strh	r3, [r7, #10]
  q = p;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c288:	e018      	b.n	800c2bc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	895b      	ldrh	r3, [r3, #10]
 800c28e:	897a      	ldrh	r2, [r7, #10]
 800c290:	1ad3      	subs	r3, r2, r3
 800c292:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	891a      	ldrh	r2, [r3, #8]
 800c298:	893b      	ldrh	r3, [r7, #8]
 800c29a:	1ad3      	subs	r3, r2, r3
 800c29c:	b29a      	uxth	r2, r3
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d106      	bne.n	800c2bc <pbuf_realloc+0x70>
 800c2ae:	4b26      	ldr	r3, [pc, #152]	; (800c348 <pbuf_realloc+0xfc>)
 800c2b0:	f240 12af 	movw	r2, #431	; 0x1af
 800c2b4:	4927      	ldr	r1, [pc, #156]	; (800c354 <pbuf_realloc+0x108>)
 800c2b6:	4826      	ldr	r0, [pc, #152]	; (800c350 <pbuf_realloc+0x104>)
 800c2b8:	f00b ff3a 	bl	8018130 <iprintf>
  while (rem_len > q->len) {
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	895b      	ldrh	r3, [r3, #10]
 800c2c0:	897a      	ldrh	r2, [r7, #10]
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d8e1      	bhi.n	800c28a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	7b1b      	ldrb	r3, [r3, #12]
 800c2ca:	f003 030f 	and.w	r3, r3, #15
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d121      	bne.n	800c316 <pbuf_realloc+0xca>
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	895b      	ldrh	r3, [r3, #10]
 800c2d6:	897a      	ldrh	r2, [r7, #10]
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d01c      	beq.n	800c316 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	7b5b      	ldrb	r3, [r3, #13]
 800c2e0:	f003 0302 	and.w	r3, r3, #2
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d116      	bne.n	800c316 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	685a      	ldr	r2, [r3, #4]
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	1ad3      	subs	r3, r2, r3
 800c2f0:	b29a      	uxth	r2, r3
 800c2f2:	897b      	ldrh	r3, [r7, #10]
 800c2f4:	4413      	add	r3, r2
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	68f8      	ldr	r0, [r7, #12]
 800c2fc:	f7fe ff58 	bl	800b1b0 <mem_trim>
 800c300:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d106      	bne.n	800c316 <pbuf_realloc+0xca>
 800c308:	4b0f      	ldr	r3, [pc, #60]	; (800c348 <pbuf_realloc+0xfc>)
 800c30a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800c30e:	4912      	ldr	r1, [pc, #72]	; (800c358 <pbuf_realloc+0x10c>)
 800c310:	480f      	ldr	r0, [pc, #60]	; (800c350 <pbuf_realloc+0x104>)
 800c312:	f00b ff0d 	bl	8018130 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	897a      	ldrh	r2, [r7, #10]
 800c31a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	895a      	ldrh	r2, [r3, #10]
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d004      	beq.n	800c336 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4618      	mov	r0, r3
 800c332:	f000 f911 	bl	800c558 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2200      	movs	r2, #0
 800c33a:	601a      	str	r2, [r3, #0]
 800c33c:	e000      	b.n	800c340 <pbuf_realloc+0xf4>
    return;
 800c33e:	bf00      	nop

}
 800c340:	3710      	adds	r7, #16
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
 800c346:	bf00      	nop
 800c348:	0801a408 	.word	0x0801a408
 800c34c:	0801a520 	.word	0x0801a520
 800c350:	0801a468 	.word	0x0801a468
 800c354:	0801a538 	.word	0x0801a538
 800c358:	0801a550 	.word	0x0801a550

0800c35c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b086      	sub	sp, #24
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	60b9      	str	r1, [r7, #8]
 800c366:	4613      	mov	r3, r2
 800c368:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d106      	bne.n	800c37e <pbuf_add_header_impl+0x22>
 800c370:	4b2b      	ldr	r3, [pc, #172]	; (800c420 <pbuf_add_header_impl+0xc4>)
 800c372:	f240 12df 	movw	r2, #479	; 0x1df
 800c376:	492b      	ldr	r1, [pc, #172]	; (800c424 <pbuf_add_header_impl+0xc8>)
 800c378:	482b      	ldr	r0, [pc, #172]	; (800c428 <pbuf_add_header_impl+0xcc>)
 800c37a:	f00b fed9 	bl	8018130 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d003      	beq.n	800c38c <pbuf_add_header_impl+0x30>
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c38a:	d301      	bcc.n	800c390 <pbuf_add_header_impl+0x34>
    return 1;
 800c38c:	2301      	movs	r3, #1
 800c38e:	e043      	b.n	800c418 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d101      	bne.n	800c39a <pbuf_add_header_impl+0x3e>
    return 0;
 800c396:	2300      	movs	r3, #0
 800c398:	e03e      	b.n	800c418 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	891a      	ldrh	r2, [r3, #8]
 800c3a2:	8a7b      	ldrh	r3, [r7, #18]
 800c3a4:	4413      	add	r3, r2
 800c3a6:	b29b      	uxth	r3, r3
 800c3a8:	8a7a      	ldrh	r2, [r7, #18]
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d901      	bls.n	800c3b2 <pbuf_add_header_impl+0x56>
    return 1;
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	e032      	b.n	800c418 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	7b1b      	ldrb	r3, [r3, #12]
 800c3b6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c3b8:	8a3b      	ldrh	r3, [r7, #16]
 800c3ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d00c      	beq.n	800c3dc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	685a      	ldr	r2, [r3, #4]
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	425b      	negs	r3, r3
 800c3ca:	4413      	add	r3, r2
 800c3cc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	3310      	adds	r3, #16
 800c3d2:	697a      	ldr	r2, [r7, #20]
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d20d      	bcs.n	800c3f4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c3d8:	2301      	movs	r3, #1
 800c3da:	e01d      	b.n	800c418 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c3dc:	79fb      	ldrb	r3, [r7, #7]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d006      	beq.n	800c3f0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	685a      	ldr	r2, [r3, #4]
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	425b      	negs	r3, r3
 800c3ea:	4413      	add	r3, r2
 800c3ec:	617b      	str	r3, [r7, #20]
 800c3ee:	e001      	b.n	800c3f4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	e011      	b.n	800c418 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	697a      	ldr	r2, [r7, #20]
 800c3f8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	895a      	ldrh	r2, [r3, #10]
 800c3fe:	8a7b      	ldrh	r3, [r7, #18]
 800c400:	4413      	add	r3, r2
 800c402:	b29a      	uxth	r2, r3
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	891a      	ldrh	r2, [r3, #8]
 800c40c:	8a7b      	ldrh	r3, [r7, #18]
 800c40e:	4413      	add	r3, r2
 800c410:	b29a      	uxth	r2, r3
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	811a      	strh	r2, [r3, #8]


  return 0;
 800c416:	2300      	movs	r3, #0
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3718      	adds	r7, #24
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}
 800c420:	0801a408 	.word	0x0801a408
 800c424:	0801a56c 	.word	0x0801a56c
 800c428:	0801a468 	.word	0x0801a468

0800c42c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b082      	sub	sp, #8
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c436:	2200      	movs	r2, #0
 800c438:	6839      	ldr	r1, [r7, #0]
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f7ff ff8e 	bl	800c35c <pbuf_add_header_impl>
 800c440:	4603      	mov	r3, r0
}
 800c442:	4618      	mov	r0, r3
 800c444:	3708      	adds	r7, #8
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
	...

0800c44c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d106      	bne.n	800c46a <pbuf_remove_header+0x1e>
 800c45c:	4b20      	ldr	r3, [pc, #128]	; (800c4e0 <pbuf_remove_header+0x94>)
 800c45e:	f240 224b 	movw	r2, #587	; 0x24b
 800c462:	4920      	ldr	r1, [pc, #128]	; (800c4e4 <pbuf_remove_header+0x98>)
 800c464:	4820      	ldr	r0, [pc, #128]	; (800c4e8 <pbuf_remove_header+0x9c>)
 800c466:	f00b fe63 	bl	8018130 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d003      	beq.n	800c478 <pbuf_remove_header+0x2c>
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c476:	d301      	bcc.n	800c47c <pbuf_remove_header+0x30>
    return 1;
 800c478:	2301      	movs	r3, #1
 800c47a:	e02c      	b.n	800c4d6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d101      	bne.n	800c486 <pbuf_remove_header+0x3a>
    return 0;
 800c482:	2300      	movs	r3, #0
 800c484:	e027      	b.n	800c4d6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	895b      	ldrh	r3, [r3, #10]
 800c48e:	89fa      	ldrh	r2, [r7, #14]
 800c490:	429a      	cmp	r2, r3
 800c492:	d908      	bls.n	800c4a6 <pbuf_remove_header+0x5a>
 800c494:	4b12      	ldr	r3, [pc, #72]	; (800c4e0 <pbuf_remove_header+0x94>)
 800c496:	f240 2255 	movw	r2, #597	; 0x255
 800c49a:	4914      	ldr	r1, [pc, #80]	; (800c4ec <pbuf_remove_header+0xa0>)
 800c49c:	4812      	ldr	r0, [pc, #72]	; (800c4e8 <pbuf_remove_header+0x9c>)
 800c49e:	f00b fe47 	bl	8018130 <iprintf>
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	e017      	b.n	800c4d6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	685a      	ldr	r2, [r3, #4]
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	441a      	add	r2, r3
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	895a      	ldrh	r2, [r3, #10]
 800c4bc:	89fb      	ldrh	r3, [r7, #14]
 800c4be:	1ad3      	subs	r3, r2, r3
 800c4c0:	b29a      	uxth	r2, r3
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	891a      	ldrh	r2, [r3, #8]
 800c4ca:	89fb      	ldrh	r3, [r7, #14]
 800c4cc:	1ad3      	subs	r3, r2, r3
 800c4ce:	b29a      	uxth	r2, r3
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c4d4:	2300      	movs	r3, #0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3710      	adds	r7, #16
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	0801a408 	.word	0x0801a408
 800c4e4:	0801a56c 	.word	0x0801a56c
 800c4e8:	0801a468 	.word	0x0801a468
 800c4ec:	0801a578 	.word	0x0801a578

0800c4f0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b082      	sub	sp, #8
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	807b      	strh	r3, [r7, #2]
 800c4fc:	4613      	mov	r3, r2
 800c4fe:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c500:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c504:	2b00      	cmp	r3, #0
 800c506:	da08      	bge.n	800c51a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c508:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c50c:	425b      	negs	r3, r3
 800c50e:	4619      	mov	r1, r3
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f7ff ff9b 	bl	800c44c <pbuf_remove_header>
 800c516:	4603      	mov	r3, r0
 800c518:	e007      	b.n	800c52a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c51a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c51e:	787a      	ldrb	r2, [r7, #1]
 800c520:	4619      	mov	r1, r3
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f7ff ff1a 	bl	800c35c <pbuf_add_header_impl>
 800c528:	4603      	mov	r3, r0
  }
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3708      	adds	r7, #8
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}

0800c532 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c532:	b580      	push	{r7, lr}
 800c534:	b082      	sub	sp, #8
 800c536:	af00      	add	r7, sp, #0
 800c538:	6078      	str	r0, [r7, #4]
 800c53a:	460b      	mov	r3, r1
 800c53c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c53e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c542:	2201      	movs	r2, #1
 800c544:	4619      	mov	r1, r3
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f7ff ffd2 	bl	800c4f0 <pbuf_header_impl>
 800c54c:	4603      	mov	r3, r0
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3708      	adds	r7, #8
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
	...

0800c558 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b088      	sub	sp, #32
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d10b      	bne.n	800c57e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d106      	bne.n	800c57a <pbuf_free+0x22>
 800c56c:	4b3b      	ldr	r3, [pc, #236]	; (800c65c <pbuf_free+0x104>)
 800c56e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c572:	493b      	ldr	r1, [pc, #236]	; (800c660 <pbuf_free+0x108>)
 800c574:	483b      	ldr	r0, [pc, #236]	; (800c664 <pbuf_free+0x10c>)
 800c576:	f00b fddb 	bl	8018130 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c57a:	2300      	movs	r3, #0
 800c57c:	e069      	b.n	800c652 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c57e:	2300      	movs	r3, #0
 800c580:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c582:	e062      	b.n	800c64a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c584:	f00b fcc8 	bl	8017f18 <sys_arch_protect>
 800c588:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	7b9b      	ldrb	r3, [r3, #14]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d106      	bne.n	800c5a0 <pbuf_free+0x48>
 800c592:	4b32      	ldr	r3, [pc, #200]	; (800c65c <pbuf_free+0x104>)
 800c594:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c598:	4933      	ldr	r1, [pc, #204]	; (800c668 <pbuf_free+0x110>)
 800c59a:	4832      	ldr	r0, [pc, #200]	; (800c664 <pbuf_free+0x10c>)
 800c59c:	f00b fdc8 	bl	8018130 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	7b9b      	ldrb	r3, [r3, #14]
 800c5a4:	3b01      	subs	r3, #1
 800c5a6:	b2da      	uxtb	r2, r3
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	739a      	strb	r2, [r3, #14]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	7b9b      	ldrb	r3, [r3, #14]
 800c5b0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c5b2:	69b8      	ldr	r0, [r7, #24]
 800c5b4:	f00b fcbe 	bl	8017f34 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c5b8:	7dfb      	ldrb	r3, [r7, #23]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d143      	bne.n	800c646 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	7b1b      	ldrb	r3, [r3, #12]
 800c5c8:	f003 030f 	and.w	r3, r3, #15
 800c5cc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	7b5b      	ldrb	r3, [r3, #13]
 800c5d2:	f003 0302 	and.w	r3, r3, #2
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d011      	beq.n	800c5fe <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	691b      	ldr	r3, [r3, #16]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d106      	bne.n	800c5f4 <pbuf_free+0x9c>
 800c5e6:	4b1d      	ldr	r3, [pc, #116]	; (800c65c <pbuf_free+0x104>)
 800c5e8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c5ec:	491f      	ldr	r1, [pc, #124]	; (800c66c <pbuf_free+0x114>)
 800c5ee:	481d      	ldr	r0, [pc, #116]	; (800c664 <pbuf_free+0x10c>)
 800c5f0:	f00b fd9e 	bl	8018130 <iprintf>
        pc->custom_free_function(p);
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	691b      	ldr	r3, [r3, #16]
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	4798      	blx	r3
 800c5fc:	e01d      	b.n	800c63a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c5fe:	7bfb      	ldrb	r3, [r7, #15]
 800c600:	2b02      	cmp	r3, #2
 800c602:	d104      	bne.n	800c60e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c604:	6879      	ldr	r1, [r7, #4]
 800c606:	200c      	movs	r0, #12
 800c608:	f7ff f8f6 	bl	800b7f8 <memp_free>
 800c60c:	e015      	b.n	800c63a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c60e:	7bfb      	ldrb	r3, [r7, #15]
 800c610:	2b01      	cmp	r3, #1
 800c612:	d104      	bne.n	800c61e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c614:	6879      	ldr	r1, [r7, #4]
 800c616:	200b      	movs	r0, #11
 800c618:	f7ff f8ee 	bl	800b7f8 <memp_free>
 800c61c:	e00d      	b.n	800c63a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c61e:	7bfb      	ldrb	r3, [r7, #15]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d103      	bne.n	800c62c <pbuf_free+0xd4>
          mem_free(p);
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f7fe fd33 	bl	800b090 <mem_free>
 800c62a:	e006      	b.n	800c63a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c62c:	4b0b      	ldr	r3, [pc, #44]	; (800c65c <pbuf_free+0x104>)
 800c62e:	f240 320f 	movw	r2, #783	; 0x30f
 800c632:	490f      	ldr	r1, [pc, #60]	; (800c670 <pbuf_free+0x118>)
 800c634:	480b      	ldr	r0, [pc, #44]	; (800c664 <pbuf_free+0x10c>)
 800c636:	f00b fd7b 	bl	8018130 <iprintf>
        }
      }
      count++;
 800c63a:	7ffb      	ldrb	r3, [r7, #31]
 800c63c:	3301      	adds	r3, #1
 800c63e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	607b      	str	r3, [r7, #4]
 800c644:	e001      	b.n	800c64a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c646:	2300      	movs	r3, #0
 800c648:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d199      	bne.n	800c584 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c650:	7ffb      	ldrb	r3, [r7, #31]
}
 800c652:	4618      	mov	r0, r3
 800c654:	3720      	adds	r7, #32
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	0801a408 	.word	0x0801a408
 800c660:	0801a56c 	.word	0x0801a56c
 800c664:	0801a468 	.word	0x0801a468
 800c668:	0801a598 	.word	0x0801a598
 800c66c:	0801a5b0 	.word	0x0801a5b0
 800c670:	0801a5d4 	.word	0x0801a5d4

0800c674 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c674:	b480      	push	{r7}
 800c676:	b085      	sub	sp, #20
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c67c:	2300      	movs	r3, #0
 800c67e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c680:	e005      	b.n	800c68e <pbuf_clen+0x1a>
    ++len;
 800c682:	89fb      	ldrh	r3, [r7, #14]
 800c684:	3301      	adds	r3, #1
 800c686:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d1f6      	bne.n	800c682 <pbuf_clen+0xe>
  }
  return len;
 800c694:	89fb      	ldrh	r3, [r7, #14]
}
 800c696:	4618      	mov	r0, r3
 800c698:	3714      	adds	r7, #20
 800c69a:	46bd      	mov	sp, r7
 800c69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a0:	4770      	bx	lr
	...

0800c6a4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b084      	sub	sp, #16
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d016      	beq.n	800c6e0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c6b2:	f00b fc31 	bl	8017f18 <sys_arch_protect>
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	7b9b      	ldrb	r3, [r3, #14]
 800c6bc:	3301      	adds	r3, #1
 800c6be:	b2da      	uxtb	r2, r3
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	739a      	strb	r2, [r3, #14]
 800c6c4:	68f8      	ldr	r0, [r7, #12]
 800c6c6:	f00b fc35 	bl	8017f34 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	7b9b      	ldrb	r3, [r3, #14]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d106      	bne.n	800c6e0 <pbuf_ref+0x3c>
 800c6d2:	4b05      	ldr	r3, [pc, #20]	; (800c6e8 <pbuf_ref+0x44>)
 800c6d4:	f240 3242 	movw	r2, #834	; 0x342
 800c6d8:	4904      	ldr	r1, [pc, #16]	; (800c6ec <pbuf_ref+0x48>)
 800c6da:	4805      	ldr	r0, [pc, #20]	; (800c6f0 <pbuf_ref+0x4c>)
 800c6dc:	f00b fd28 	bl	8018130 <iprintf>
  }
}
 800c6e0:	bf00      	nop
 800c6e2:	3710      	adds	r7, #16
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}
 800c6e8:	0801a408 	.word	0x0801a408
 800c6ec:	0801a5e8 	.word	0x0801a5e8
 800c6f0:	0801a468 	.word	0x0801a468

0800c6f4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d002      	beq.n	800c70a <pbuf_cat+0x16>
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d107      	bne.n	800c71a <pbuf_cat+0x26>
 800c70a:	4b20      	ldr	r3, [pc, #128]	; (800c78c <pbuf_cat+0x98>)
 800c70c:	f240 3259 	movw	r2, #857	; 0x359
 800c710:	491f      	ldr	r1, [pc, #124]	; (800c790 <pbuf_cat+0x9c>)
 800c712:	4820      	ldr	r0, [pc, #128]	; (800c794 <pbuf_cat+0xa0>)
 800c714:	f00b fd0c 	bl	8018130 <iprintf>
 800c718:	e034      	b.n	800c784 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	60fb      	str	r3, [r7, #12]
 800c71e:	e00a      	b.n	800c736 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	891a      	ldrh	r2, [r3, #8]
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	891b      	ldrh	r3, [r3, #8]
 800c728:	4413      	add	r3, r2
 800c72a:	b29a      	uxth	r2, r3
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	60fb      	str	r3, [r7, #12]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d1f0      	bne.n	800c720 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	891a      	ldrh	r2, [r3, #8]
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	895b      	ldrh	r3, [r3, #10]
 800c746:	429a      	cmp	r2, r3
 800c748:	d006      	beq.n	800c758 <pbuf_cat+0x64>
 800c74a:	4b10      	ldr	r3, [pc, #64]	; (800c78c <pbuf_cat+0x98>)
 800c74c:	f240 3262 	movw	r2, #866	; 0x362
 800c750:	4911      	ldr	r1, [pc, #68]	; (800c798 <pbuf_cat+0xa4>)
 800c752:	4810      	ldr	r0, [pc, #64]	; (800c794 <pbuf_cat+0xa0>)
 800c754:	f00b fcec 	bl	8018130 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d006      	beq.n	800c76e <pbuf_cat+0x7a>
 800c760:	4b0a      	ldr	r3, [pc, #40]	; (800c78c <pbuf_cat+0x98>)
 800c762:	f240 3263 	movw	r2, #867	; 0x363
 800c766:	490d      	ldr	r1, [pc, #52]	; (800c79c <pbuf_cat+0xa8>)
 800c768:	480a      	ldr	r0, [pc, #40]	; (800c794 <pbuf_cat+0xa0>)
 800c76a:	f00b fce1 	bl	8018130 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	891a      	ldrh	r2, [r3, #8]
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	891b      	ldrh	r3, [r3, #8]
 800c776:	4413      	add	r3, r2
 800c778:	b29a      	uxth	r2, r3
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	683a      	ldr	r2, [r7, #0]
 800c782:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c784:	3710      	adds	r7, #16
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	0801a408 	.word	0x0801a408
 800c790:	0801a5fc 	.word	0x0801a5fc
 800c794:	0801a468 	.word	0x0801a468
 800c798:	0801a634 	.word	0x0801a634
 800c79c:	0801a664 	.word	0x0801a664

0800c7a0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c7aa:	6839      	ldr	r1, [r7, #0]
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f7ff ffa1 	bl	800c6f4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c7b2:	6838      	ldr	r0, [r7, #0]
 800c7b4:	f7ff ff76 	bl	800c6a4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c7b8:	bf00      	nop
 800c7ba:	3708      	adds	r7, #8
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}

0800c7c0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b086      	sub	sp, #24
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	617b      	str	r3, [r7, #20]
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d008      	beq.n	800c7ea <pbuf_copy+0x2a>
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d005      	beq.n	800c7ea <pbuf_copy+0x2a>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	891a      	ldrh	r2, [r3, #8]
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	891b      	ldrh	r3, [r3, #8]
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	d209      	bcs.n	800c7fe <pbuf_copy+0x3e>
 800c7ea:	4b57      	ldr	r3, [pc, #348]	; (800c948 <pbuf_copy+0x188>)
 800c7ec:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c7f0:	4956      	ldr	r1, [pc, #344]	; (800c94c <pbuf_copy+0x18c>)
 800c7f2:	4857      	ldr	r0, [pc, #348]	; (800c950 <pbuf_copy+0x190>)
 800c7f4:	f00b fc9c 	bl	8018130 <iprintf>
 800c7f8:	f06f 030f 	mvn.w	r3, #15
 800c7fc:	e09f      	b.n	800c93e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	895b      	ldrh	r3, [r3, #10]
 800c802:	461a      	mov	r2, r3
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	1ad2      	subs	r2, r2, r3
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	895b      	ldrh	r3, [r3, #10]
 800c80c:	4619      	mov	r1, r3
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	1acb      	subs	r3, r1, r3
 800c812:	429a      	cmp	r2, r3
 800c814:	d306      	bcc.n	800c824 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	895b      	ldrh	r3, [r3, #10]
 800c81a:	461a      	mov	r2, r3
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	1ad3      	subs	r3, r2, r3
 800c820:	60fb      	str	r3, [r7, #12]
 800c822:	e005      	b.n	800c830 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	895b      	ldrh	r3, [r3, #10]
 800c828:	461a      	mov	r2, r3
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	1ad3      	subs	r3, r2, r3
 800c82e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	685a      	ldr	r2, [r3, #4]
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	18d0      	adds	r0, r2, r3
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	685a      	ldr	r2, [r3, #4]
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	4413      	add	r3, r2
 800c840:	68fa      	ldr	r2, [r7, #12]
 800c842:	4619      	mov	r1, r3
 800c844:	f00b fdc2 	bl	80183cc <memcpy>
    offset_to += len;
 800c848:	697a      	ldr	r2, [r7, #20]
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	4413      	add	r3, r2
 800c84e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c850:	693a      	ldr	r2, [r7, #16]
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	4413      	add	r3, r2
 800c856:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	895b      	ldrh	r3, [r3, #10]
 800c85c:	461a      	mov	r2, r3
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	4293      	cmp	r3, r2
 800c862:	d906      	bls.n	800c872 <pbuf_copy+0xb2>
 800c864:	4b38      	ldr	r3, [pc, #224]	; (800c948 <pbuf_copy+0x188>)
 800c866:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c86a:	493a      	ldr	r1, [pc, #232]	; (800c954 <pbuf_copy+0x194>)
 800c86c:	4838      	ldr	r0, [pc, #224]	; (800c950 <pbuf_copy+0x190>)
 800c86e:	f00b fc5f 	bl	8018130 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	895b      	ldrh	r3, [r3, #10]
 800c876:	461a      	mov	r2, r3
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d906      	bls.n	800c88c <pbuf_copy+0xcc>
 800c87e:	4b32      	ldr	r3, [pc, #200]	; (800c948 <pbuf_copy+0x188>)
 800c880:	f240 32da 	movw	r2, #986	; 0x3da
 800c884:	4934      	ldr	r1, [pc, #208]	; (800c958 <pbuf_copy+0x198>)
 800c886:	4832      	ldr	r0, [pc, #200]	; (800c950 <pbuf_copy+0x190>)
 800c888:	f00b fc52 	bl	8018130 <iprintf>
    if (offset_from >= p_from->len) {
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	895b      	ldrh	r3, [r3, #10]
 800c890:	461a      	mov	r2, r3
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	4293      	cmp	r3, r2
 800c896:	d304      	bcc.n	800c8a2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c898:	2300      	movs	r3, #0
 800c89a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	895b      	ldrh	r3, [r3, #10]
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d114      	bne.n	800c8d8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d10c      	bne.n	800c8d8 <pbuf_copy+0x118>
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d009      	beq.n	800c8d8 <pbuf_copy+0x118>
 800c8c4:	4b20      	ldr	r3, [pc, #128]	; (800c948 <pbuf_copy+0x188>)
 800c8c6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c8ca:	4924      	ldr	r1, [pc, #144]	; (800c95c <pbuf_copy+0x19c>)
 800c8cc:	4820      	ldr	r0, [pc, #128]	; (800c950 <pbuf_copy+0x190>)
 800c8ce:	f00b fc2f 	bl	8018130 <iprintf>
 800c8d2:	f06f 030f 	mvn.w	r3, #15
 800c8d6:	e032      	b.n	800c93e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d013      	beq.n	800c906 <pbuf_copy+0x146>
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	895a      	ldrh	r2, [r3, #10]
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	891b      	ldrh	r3, [r3, #8]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d10d      	bne.n	800c906 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d009      	beq.n	800c906 <pbuf_copy+0x146>
 800c8f2:	4b15      	ldr	r3, [pc, #84]	; (800c948 <pbuf_copy+0x188>)
 800c8f4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800c8f8:	4919      	ldr	r1, [pc, #100]	; (800c960 <pbuf_copy+0x1a0>)
 800c8fa:	4815      	ldr	r0, [pc, #84]	; (800c950 <pbuf_copy+0x190>)
 800c8fc:	f00b fc18 	bl	8018130 <iprintf>
 800c900:	f06f 0305 	mvn.w	r3, #5
 800c904:	e01b      	b.n	800c93e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d013      	beq.n	800c934 <pbuf_copy+0x174>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	895a      	ldrh	r2, [r3, #10]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	891b      	ldrh	r3, [r3, #8]
 800c914:	429a      	cmp	r2, r3
 800c916:	d10d      	bne.n	800c934 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d009      	beq.n	800c934 <pbuf_copy+0x174>
 800c920:	4b09      	ldr	r3, [pc, #36]	; (800c948 <pbuf_copy+0x188>)
 800c922:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c926:	490e      	ldr	r1, [pc, #56]	; (800c960 <pbuf_copy+0x1a0>)
 800c928:	4809      	ldr	r0, [pc, #36]	; (800c950 <pbuf_copy+0x190>)
 800c92a:	f00b fc01 	bl	8018130 <iprintf>
 800c92e:	f06f 0305 	mvn.w	r3, #5
 800c932:	e004      	b.n	800c93e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	2b00      	cmp	r3, #0
 800c938:	f47f af61 	bne.w	800c7fe <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c93c:	2300      	movs	r3, #0
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3718      	adds	r7, #24
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
 800c946:	bf00      	nop
 800c948:	0801a408 	.word	0x0801a408
 800c94c:	0801a6b0 	.word	0x0801a6b0
 800c950:	0801a468 	.word	0x0801a468
 800c954:	0801a6e0 	.word	0x0801a6e0
 800c958:	0801a6f8 	.word	0x0801a6f8
 800c95c:	0801a714 	.word	0x0801a714
 800c960:	0801a724 	.word	0x0801a724

0800c964 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b088      	sub	sp, #32
 800c968:	af00      	add	r7, sp, #0
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	60b9      	str	r1, [r7, #8]
 800c96e:	4611      	mov	r1, r2
 800c970:	461a      	mov	r2, r3
 800c972:	460b      	mov	r3, r1
 800c974:	80fb      	strh	r3, [r7, #6]
 800c976:	4613      	mov	r3, r2
 800c978:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c97a:	2300      	movs	r3, #0
 800c97c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c97e:	2300      	movs	r3, #0
 800c980:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d108      	bne.n	800c99a <pbuf_copy_partial+0x36>
 800c988:	4b2b      	ldr	r3, [pc, #172]	; (800ca38 <pbuf_copy_partial+0xd4>)
 800c98a:	f240 420a 	movw	r2, #1034	; 0x40a
 800c98e:	492b      	ldr	r1, [pc, #172]	; (800ca3c <pbuf_copy_partial+0xd8>)
 800c990:	482b      	ldr	r0, [pc, #172]	; (800ca40 <pbuf_copy_partial+0xdc>)
 800c992:	f00b fbcd 	bl	8018130 <iprintf>
 800c996:	2300      	movs	r3, #0
 800c998:	e04a      	b.n	800ca30 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d108      	bne.n	800c9b2 <pbuf_copy_partial+0x4e>
 800c9a0:	4b25      	ldr	r3, [pc, #148]	; (800ca38 <pbuf_copy_partial+0xd4>)
 800c9a2:	f240 420b 	movw	r2, #1035	; 0x40b
 800c9a6:	4927      	ldr	r1, [pc, #156]	; (800ca44 <pbuf_copy_partial+0xe0>)
 800c9a8:	4825      	ldr	r0, [pc, #148]	; (800ca40 <pbuf_copy_partial+0xdc>)
 800c9aa:	f00b fbc1 	bl	8018130 <iprintf>
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	e03e      	b.n	800ca30 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	61fb      	str	r3, [r7, #28]
 800c9b6:	e034      	b.n	800ca22 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c9b8:	88bb      	ldrh	r3, [r7, #4]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d00a      	beq.n	800c9d4 <pbuf_copy_partial+0x70>
 800c9be:	69fb      	ldr	r3, [r7, #28]
 800c9c0:	895b      	ldrh	r3, [r3, #10]
 800c9c2:	88ba      	ldrh	r2, [r7, #4]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d305      	bcc.n	800c9d4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c9c8:	69fb      	ldr	r3, [r7, #28]
 800c9ca:	895b      	ldrh	r3, [r3, #10]
 800c9cc:	88ba      	ldrh	r2, [r7, #4]
 800c9ce:	1ad3      	subs	r3, r2, r3
 800c9d0:	80bb      	strh	r3, [r7, #4]
 800c9d2:	e023      	b.n	800ca1c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c9d4:	69fb      	ldr	r3, [r7, #28]
 800c9d6:	895a      	ldrh	r2, [r3, #10]
 800c9d8:	88bb      	ldrh	r3, [r7, #4]
 800c9da:	1ad3      	subs	r3, r2, r3
 800c9dc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c9de:	8b3a      	ldrh	r2, [r7, #24]
 800c9e0:	88fb      	ldrh	r3, [r7, #6]
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d901      	bls.n	800c9ea <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c9e6:	88fb      	ldrh	r3, [r7, #6]
 800c9e8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c9ea:	8b7b      	ldrh	r3, [r7, #26]
 800c9ec:	68ba      	ldr	r2, [r7, #8]
 800c9ee:	18d0      	adds	r0, r2, r3
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	685a      	ldr	r2, [r3, #4]
 800c9f4:	88bb      	ldrh	r3, [r7, #4]
 800c9f6:	4413      	add	r3, r2
 800c9f8:	8b3a      	ldrh	r2, [r7, #24]
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	f00b fce6 	bl	80183cc <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ca00:	8afa      	ldrh	r2, [r7, #22]
 800ca02:	8b3b      	ldrh	r3, [r7, #24]
 800ca04:	4413      	add	r3, r2
 800ca06:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ca08:	8b7a      	ldrh	r2, [r7, #26]
 800ca0a:	8b3b      	ldrh	r3, [r7, #24]
 800ca0c:	4413      	add	r3, r2
 800ca0e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ca10:	88fa      	ldrh	r2, [r7, #6]
 800ca12:	8b3b      	ldrh	r3, [r7, #24]
 800ca14:	1ad3      	subs	r3, r2, r3
 800ca16:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ca1c:	69fb      	ldr	r3, [r7, #28]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	61fb      	str	r3, [r7, #28]
 800ca22:	88fb      	ldrh	r3, [r7, #6]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d002      	beq.n	800ca2e <pbuf_copy_partial+0xca>
 800ca28:	69fb      	ldr	r3, [r7, #28]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d1c4      	bne.n	800c9b8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ca2e:	8afb      	ldrh	r3, [r7, #22]
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	3720      	adds	r7, #32
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}
 800ca38:	0801a408 	.word	0x0801a408
 800ca3c:	0801a750 	.word	0x0801a750
 800ca40:	0801a468 	.word	0x0801a468
 800ca44:	0801a770 	.word	0x0801a770

0800ca48 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	4603      	mov	r3, r0
 800ca50:	603a      	str	r2, [r7, #0]
 800ca52:	71fb      	strb	r3, [r7, #7]
 800ca54:	460b      	mov	r3, r1
 800ca56:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	8919      	ldrh	r1, [r3, #8]
 800ca5c:	88ba      	ldrh	r2, [r7, #4]
 800ca5e:	79fb      	ldrb	r3, [r7, #7]
 800ca60:	4618      	mov	r0, r3
 800ca62:	f7ff fa95 	bl	800bf90 <pbuf_alloc>
 800ca66:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d101      	bne.n	800ca72 <pbuf_clone+0x2a>
    return NULL;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	e011      	b.n	800ca96 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ca72:	6839      	ldr	r1, [r7, #0]
 800ca74:	68f8      	ldr	r0, [r7, #12]
 800ca76:	f7ff fea3 	bl	800c7c0 <pbuf_copy>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ca7e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d006      	beq.n	800ca94 <pbuf_clone+0x4c>
 800ca86:	4b06      	ldr	r3, [pc, #24]	; (800caa0 <pbuf_clone+0x58>)
 800ca88:	f240 5224 	movw	r2, #1316	; 0x524
 800ca8c:	4905      	ldr	r1, [pc, #20]	; (800caa4 <pbuf_clone+0x5c>)
 800ca8e:	4806      	ldr	r0, [pc, #24]	; (800caa8 <pbuf_clone+0x60>)
 800ca90:	f00b fb4e 	bl	8018130 <iprintf>
  return q;
 800ca94:	68fb      	ldr	r3, [r7, #12]
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3710      	adds	r7, #16
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
 800ca9e:	bf00      	nop
 800caa0:	0801a408 	.word	0x0801a408
 800caa4:	0801a87c 	.word	0x0801a87c
 800caa8:	0801a468 	.word	0x0801a468

0800caac <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cab0:	f00b fa50 	bl	8017f54 <rand>
 800cab4:	4603      	mov	r3, r0
 800cab6:	b29b      	uxth	r3, r3
 800cab8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cabc:	b29b      	uxth	r3, r3
 800cabe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800cac2:	b29a      	uxth	r2, r3
 800cac4:	4b01      	ldr	r3, [pc, #4]	; (800cacc <tcp_init+0x20>)
 800cac6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800cac8:	bf00      	nop
 800caca:	bd80      	pop	{r7, pc}
 800cacc:	20000024 	.word	0x20000024

0800cad0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	7d1b      	ldrb	r3, [r3, #20]
 800cadc:	2b01      	cmp	r3, #1
 800cade:	d105      	bne.n	800caec <tcp_free+0x1c>
 800cae0:	4b06      	ldr	r3, [pc, #24]	; (800cafc <tcp_free+0x2c>)
 800cae2:	22d4      	movs	r2, #212	; 0xd4
 800cae4:	4906      	ldr	r1, [pc, #24]	; (800cb00 <tcp_free+0x30>)
 800cae6:	4807      	ldr	r0, [pc, #28]	; (800cb04 <tcp_free+0x34>)
 800cae8:	f00b fb22 	bl	8018130 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800caec:	6879      	ldr	r1, [r7, #4]
 800caee:	2001      	movs	r0, #1
 800caf0:	f7fe fe82 	bl	800b7f8 <memp_free>
}
 800caf4:	bf00      	nop
 800caf6:	3708      	adds	r7, #8
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	0801a908 	.word	0x0801a908
 800cb00:	0801a938 	.word	0x0801a938
 800cb04:	0801a94c 	.word	0x0801a94c

0800cb08 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b082      	sub	sp, #8
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	7d1b      	ldrb	r3, [r3, #20]
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	d105      	bne.n	800cb24 <tcp_free_listen+0x1c>
 800cb18:	4b06      	ldr	r3, [pc, #24]	; (800cb34 <tcp_free_listen+0x2c>)
 800cb1a:	22df      	movs	r2, #223	; 0xdf
 800cb1c:	4906      	ldr	r1, [pc, #24]	; (800cb38 <tcp_free_listen+0x30>)
 800cb1e:	4807      	ldr	r0, [pc, #28]	; (800cb3c <tcp_free_listen+0x34>)
 800cb20:	f00b fb06 	bl	8018130 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800cb24:	6879      	ldr	r1, [r7, #4]
 800cb26:	2002      	movs	r0, #2
 800cb28:	f7fe fe66 	bl	800b7f8 <memp_free>
}
 800cb2c:	bf00      	nop
 800cb2e:	3708      	adds	r7, #8
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	0801a908 	.word	0x0801a908
 800cb38:	0801a974 	.word	0x0801a974
 800cb3c:	0801a94c 	.word	0x0801a94c

0800cb40 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800cb44:	f001 f8b8 	bl	800dcb8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800cb48:	4b07      	ldr	r3, [pc, #28]	; (800cb68 <tcp_tmr+0x28>)
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	b2da      	uxtb	r2, r3
 800cb50:	4b05      	ldr	r3, [pc, #20]	; (800cb68 <tcp_tmr+0x28>)
 800cb52:	701a      	strb	r2, [r3, #0]
 800cb54:	4b04      	ldr	r3, [pc, #16]	; (800cb68 <tcp_tmr+0x28>)
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	f003 0301 	and.w	r3, r3, #1
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d001      	beq.n	800cb64 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800cb60:	f000 fd6a 	bl	800d638 <tcp_slowtmr>
  }
}
 800cb64:	bf00      	nop
 800cb66:	bd80      	pop	{r7, pc}
 800cb68:	20010d71 	.word	0x20010d71

0800cb6c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b084      	sub	sp, #16
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d105      	bne.n	800cb88 <tcp_remove_listener+0x1c>
 800cb7c:	4b0d      	ldr	r3, [pc, #52]	; (800cbb4 <tcp_remove_listener+0x48>)
 800cb7e:	22ff      	movs	r2, #255	; 0xff
 800cb80:	490d      	ldr	r1, [pc, #52]	; (800cbb8 <tcp_remove_listener+0x4c>)
 800cb82:	480e      	ldr	r0, [pc, #56]	; (800cbbc <tcp_remove_listener+0x50>)
 800cb84:	f00b fad4 	bl	8018130 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	60fb      	str	r3, [r7, #12]
 800cb8c:	e00a      	b.n	800cba4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb92:	683a      	ldr	r2, [r7, #0]
 800cb94:	429a      	cmp	r2, r3
 800cb96:	d102      	bne.n	800cb9e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	60fb      	str	r3, [r7, #12]
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d1f1      	bne.n	800cb8e <tcp_remove_listener+0x22>
    }
  }
}
 800cbaa:	bf00      	nop
 800cbac:	bf00      	nop
 800cbae:	3710      	adds	r7, #16
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}
 800cbb4:	0801a908 	.word	0x0801a908
 800cbb8:	0801a990 	.word	0x0801a990
 800cbbc:	0801a94c 	.word	0x0801a94c

0800cbc0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b084      	sub	sp, #16
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d106      	bne.n	800cbdc <tcp_listen_closed+0x1c>
 800cbce:	4b14      	ldr	r3, [pc, #80]	; (800cc20 <tcp_listen_closed+0x60>)
 800cbd0:	f240 1211 	movw	r2, #273	; 0x111
 800cbd4:	4913      	ldr	r1, [pc, #76]	; (800cc24 <tcp_listen_closed+0x64>)
 800cbd6:	4814      	ldr	r0, [pc, #80]	; (800cc28 <tcp_listen_closed+0x68>)
 800cbd8:	f00b faaa 	bl	8018130 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	7d1b      	ldrb	r3, [r3, #20]
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	d006      	beq.n	800cbf2 <tcp_listen_closed+0x32>
 800cbe4:	4b0e      	ldr	r3, [pc, #56]	; (800cc20 <tcp_listen_closed+0x60>)
 800cbe6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800cbea:	4910      	ldr	r1, [pc, #64]	; (800cc2c <tcp_listen_closed+0x6c>)
 800cbec:	480e      	ldr	r0, [pc, #56]	; (800cc28 <tcp_listen_closed+0x68>)
 800cbee:	f00b fa9f 	bl	8018130 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	60fb      	str	r3, [r7, #12]
 800cbf6:	e00b      	b.n	800cc10 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800cbf8:	4a0d      	ldr	r2, [pc, #52]	; (800cc30 <tcp_listen_closed+0x70>)
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	6879      	ldr	r1, [r7, #4]
 800cc04:	4618      	mov	r0, r3
 800cc06:	f7ff ffb1 	bl	800cb6c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	60fb      	str	r3, [r7, #12]
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2b03      	cmp	r3, #3
 800cc14:	d9f0      	bls.n	800cbf8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800cc16:	bf00      	nop
 800cc18:	bf00      	nop
 800cc1a:	3710      	adds	r7, #16
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	0801a908 	.word	0x0801a908
 800cc24:	0801a9b8 	.word	0x0801a9b8
 800cc28:	0801a94c 	.word	0x0801a94c
 800cc2c:	0801a9c4 	.word	0x0801a9c4
 800cc30:	08026e04 	.word	0x08026e04

0800cc34 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800cc34:	b5b0      	push	{r4, r5, r7, lr}
 800cc36:	b088      	sub	sp, #32
 800cc38:	af04      	add	r7, sp, #16
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	460b      	mov	r3, r1
 800cc3e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d106      	bne.n	800cc54 <tcp_close_shutdown+0x20>
 800cc46:	4b63      	ldr	r3, [pc, #396]	; (800cdd4 <tcp_close_shutdown+0x1a0>)
 800cc48:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800cc4c:	4962      	ldr	r1, [pc, #392]	; (800cdd8 <tcp_close_shutdown+0x1a4>)
 800cc4e:	4863      	ldr	r0, [pc, #396]	; (800cddc <tcp_close_shutdown+0x1a8>)
 800cc50:	f00b fa6e 	bl	8018130 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800cc54:	78fb      	ldrb	r3, [r7, #3]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d066      	beq.n	800cd28 <tcp_close_shutdown+0xf4>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	7d1b      	ldrb	r3, [r3, #20]
 800cc5e:	2b04      	cmp	r3, #4
 800cc60:	d003      	beq.n	800cc6a <tcp_close_shutdown+0x36>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	7d1b      	ldrb	r3, [r3, #20]
 800cc66:	2b07      	cmp	r3, #7
 800cc68:	d15e      	bne.n	800cd28 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d104      	bne.n	800cc7c <tcp_close_shutdown+0x48>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc76:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cc7a:	d055      	beq.n	800cd28 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	8b5b      	ldrh	r3, [r3, #26]
 800cc80:	f003 0310 	and.w	r3, r3, #16
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d106      	bne.n	800cc96 <tcp_close_shutdown+0x62>
 800cc88:	4b52      	ldr	r3, [pc, #328]	; (800cdd4 <tcp_close_shutdown+0x1a0>)
 800cc8a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800cc8e:	4954      	ldr	r1, [pc, #336]	; (800cde0 <tcp_close_shutdown+0x1ac>)
 800cc90:	4852      	ldr	r0, [pc, #328]	; (800cddc <tcp_close_shutdown+0x1a8>)
 800cc92:	f00b fa4d 	bl	8018130 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cc9e:	687d      	ldr	r5, [r7, #4]
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	3304      	adds	r3, #4
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	8ad2      	ldrh	r2, [r2, #22]
 800cca8:	6879      	ldr	r1, [r7, #4]
 800ccaa:	8b09      	ldrh	r1, [r1, #24]
 800ccac:	9102      	str	r1, [sp, #8]
 800ccae:	9201      	str	r2, [sp, #4]
 800ccb0:	9300      	str	r3, [sp, #0]
 800ccb2:	462b      	mov	r3, r5
 800ccb4:	4622      	mov	r2, r4
 800ccb6:	4601      	mov	r1, r0
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f005 fdeb 	bl	8012894 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f001 fbc8 	bl	800e454 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ccc4:	4b47      	ldr	r3, [pc, #284]	; (800cde4 <tcp_close_shutdown+0x1b0>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d105      	bne.n	800ccda <tcp_close_shutdown+0xa6>
 800ccce:	4b45      	ldr	r3, [pc, #276]	; (800cde4 <tcp_close_shutdown+0x1b0>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	68db      	ldr	r3, [r3, #12]
 800ccd4:	4a43      	ldr	r2, [pc, #268]	; (800cde4 <tcp_close_shutdown+0x1b0>)
 800ccd6:	6013      	str	r3, [r2, #0]
 800ccd8:	e013      	b.n	800cd02 <tcp_close_shutdown+0xce>
 800ccda:	4b42      	ldr	r3, [pc, #264]	; (800cde4 <tcp_close_shutdown+0x1b0>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	60fb      	str	r3, [r7, #12]
 800cce0:	e00c      	b.n	800ccfc <tcp_close_shutdown+0xc8>
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	68db      	ldr	r3, [r3, #12]
 800cce6:	687a      	ldr	r2, [r7, #4]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d104      	bne.n	800ccf6 <tcp_close_shutdown+0xc2>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	68da      	ldr	r2, [r3, #12]
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	60da      	str	r2, [r3, #12]
 800ccf4:	e005      	b.n	800cd02 <tcp_close_shutdown+0xce>
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	68db      	ldr	r3, [r3, #12]
 800ccfa:	60fb      	str	r3, [r7, #12]
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d1ef      	bne.n	800cce2 <tcp_close_shutdown+0xae>
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2200      	movs	r2, #0
 800cd06:	60da      	str	r2, [r3, #12]
 800cd08:	4b37      	ldr	r3, [pc, #220]	; (800cde8 <tcp_close_shutdown+0x1b4>)
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800cd0e:	4b37      	ldr	r3, [pc, #220]	; (800cdec <tcp_close_shutdown+0x1b8>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d102      	bne.n	800cd1e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800cd18:	f004 f860 	bl	8010ddc <tcp_trigger_input_pcb_close>
 800cd1c:	e002      	b.n	800cd24 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f7ff fed6 	bl	800cad0 <tcp_free>
      }
      return ERR_OK;
 800cd24:	2300      	movs	r3, #0
 800cd26:	e050      	b.n	800cdca <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	7d1b      	ldrb	r3, [r3, #20]
 800cd2c:	2b02      	cmp	r3, #2
 800cd2e:	d03b      	beq.n	800cda8 <tcp_close_shutdown+0x174>
 800cd30:	2b02      	cmp	r3, #2
 800cd32:	dc44      	bgt.n	800cdbe <tcp_close_shutdown+0x18a>
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d002      	beq.n	800cd3e <tcp_close_shutdown+0x10a>
 800cd38:	2b01      	cmp	r3, #1
 800cd3a:	d02a      	beq.n	800cd92 <tcp_close_shutdown+0x15e>
 800cd3c:	e03f      	b.n	800cdbe <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	8adb      	ldrh	r3, [r3, #22]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d021      	beq.n	800cd8a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cd46:	4b2a      	ldr	r3, [pc, #168]	; (800cdf0 <tcp_close_shutdown+0x1bc>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	687a      	ldr	r2, [r7, #4]
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d105      	bne.n	800cd5c <tcp_close_shutdown+0x128>
 800cd50:	4b27      	ldr	r3, [pc, #156]	; (800cdf0 <tcp_close_shutdown+0x1bc>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	68db      	ldr	r3, [r3, #12]
 800cd56:	4a26      	ldr	r2, [pc, #152]	; (800cdf0 <tcp_close_shutdown+0x1bc>)
 800cd58:	6013      	str	r3, [r2, #0]
 800cd5a:	e013      	b.n	800cd84 <tcp_close_shutdown+0x150>
 800cd5c:	4b24      	ldr	r3, [pc, #144]	; (800cdf0 <tcp_close_shutdown+0x1bc>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	60bb      	str	r3, [r7, #8]
 800cd62:	e00c      	b.n	800cd7e <tcp_close_shutdown+0x14a>
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	68db      	ldr	r3, [r3, #12]
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d104      	bne.n	800cd78 <tcp_close_shutdown+0x144>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	68da      	ldr	r2, [r3, #12]
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	60da      	str	r2, [r3, #12]
 800cd76:	e005      	b.n	800cd84 <tcp_close_shutdown+0x150>
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	68db      	ldr	r3, [r3, #12]
 800cd7c:	60bb      	str	r3, [r7, #8]
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d1ef      	bne.n	800cd64 <tcp_close_shutdown+0x130>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2200      	movs	r2, #0
 800cd88:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f7ff fea0 	bl	800cad0 <tcp_free>
      break;
 800cd90:	e01a      	b.n	800cdc8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f7ff ff14 	bl	800cbc0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800cd98:	6879      	ldr	r1, [r7, #4]
 800cd9a:	4816      	ldr	r0, [pc, #88]	; (800cdf4 <tcp_close_shutdown+0x1c0>)
 800cd9c:	f001 fbaa 	bl	800e4f4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f7ff feb1 	bl	800cb08 <tcp_free_listen>
      break;
 800cda6:	e00f      	b.n	800cdc8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cda8:	6879      	ldr	r1, [r7, #4]
 800cdaa:	480e      	ldr	r0, [pc, #56]	; (800cde4 <tcp_close_shutdown+0x1b0>)
 800cdac:	f001 fba2 	bl	800e4f4 <tcp_pcb_remove>
 800cdb0:	4b0d      	ldr	r3, [pc, #52]	; (800cde8 <tcp_close_shutdown+0x1b4>)
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f7ff fe8a 	bl	800cad0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800cdbc:	e004      	b.n	800cdc8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f000 f81a 	bl	800cdf8 <tcp_close_shutdown_fin>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	e000      	b.n	800cdca <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800cdc8:	2300      	movs	r3, #0
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3710      	adds	r7, #16
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bdb0      	pop	{r4, r5, r7, pc}
 800cdd2:	bf00      	nop
 800cdd4:	0801a908 	.word	0x0801a908
 800cdd8:	0801a9dc 	.word	0x0801a9dc
 800cddc:	0801a94c 	.word	0x0801a94c
 800cde0:	0801a9fc 	.word	0x0801a9fc
 800cde4:	20010d68 	.word	0x20010d68
 800cde8:	20010d70 	.word	0x20010d70
 800cdec:	20010da8 	.word	0x20010da8
 800cdf0:	20010d60 	.word	0x20010d60
 800cdf4:	20010d64 	.word	0x20010d64

0800cdf8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b084      	sub	sp, #16
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d106      	bne.n	800ce14 <tcp_close_shutdown_fin+0x1c>
 800ce06:	4b2e      	ldr	r3, [pc, #184]	; (800cec0 <tcp_close_shutdown_fin+0xc8>)
 800ce08:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ce0c:	492d      	ldr	r1, [pc, #180]	; (800cec4 <tcp_close_shutdown_fin+0xcc>)
 800ce0e:	482e      	ldr	r0, [pc, #184]	; (800cec8 <tcp_close_shutdown_fin+0xd0>)
 800ce10:	f00b f98e 	bl	8018130 <iprintf>

  switch (pcb->state) {
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	7d1b      	ldrb	r3, [r3, #20]
 800ce18:	2b07      	cmp	r3, #7
 800ce1a:	d020      	beq.n	800ce5e <tcp_close_shutdown_fin+0x66>
 800ce1c:	2b07      	cmp	r3, #7
 800ce1e:	dc2b      	bgt.n	800ce78 <tcp_close_shutdown_fin+0x80>
 800ce20:	2b03      	cmp	r3, #3
 800ce22:	d002      	beq.n	800ce2a <tcp_close_shutdown_fin+0x32>
 800ce24:	2b04      	cmp	r3, #4
 800ce26:	d00d      	beq.n	800ce44 <tcp_close_shutdown_fin+0x4c>
 800ce28:	e026      	b.n	800ce78 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f004 fe40 	bl	8011ab0 <tcp_send_fin>
 800ce30:	4603      	mov	r3, r0
 800ce32:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ce34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d11f      	bne.n	800ce7c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2205      	movs	r2, #5
 800ce40:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ce42:	e01b      	b.n	800ce7c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f004 fe33 	bl	8011ab0 <tcp_send_fin>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ce4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d114      	bne.n	800ce80 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2205      	movs	r2, #5
 800ce5a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ce5c:	e010      	b.n	800ce80 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f004 fe26 	bl	8011ab0 <tcp_send_fin>
 800ce64:	4603      	mov	r3, r0
 800ce66:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ce68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d109      	bne.n	800ce84 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2209      	movs	r2, #9
 800ce74:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ce76:	e005      	b.n	800ce84 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	e01c      	b.n	800ceb6 <tcp_close_shutdown_fin+0xbe>
      break;
 800ce7c:	bf00      	nop
 800ce7e:	e002      	b.n	800ce86 <tcp_close_shutdown_fin+0x8e>
      break;
 800ce80:	bf00      	nop
 800ce82:	e000      	b.n	800ce86 <tcp_close_shutdown_fin+0x8e>
      break;
 800ce84:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ce86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d103      	bne.n	800ce96 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f004 ff4c 	bl	8011d2c <tcp_output>
 800ce94:	e00d      	b.n	800ceb2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ce96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce9e:	d108      	bne.n	800ceb2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	8b5b      	ldrh	r3, [r3, #26]
 800cea4:	f043 0308 	orr.w	r3, r3, #8
 800cea8:	b29a      	uxth	r2, r3
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	e001      	b.n	800ceb6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ceb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3710      	adds	r7, #16
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
 800cebe:	bf00      	nop
 800cec0:	0801a908 	.word	0x0801a908
 800cec4:	0801a9b8 	.word	0x0801a9b8
 800cec8:	0801a94c 	.word	0x0801a94c

0800cecc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b082      	sub	sp, #8
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d109      	bne.n	800ceee <tcp_close+0x22>
 800ceda:	4b0f      	ldr	r3, [pc, #60]	; (800cf18 <tcp_close+0x4c>)
 800cedc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800cee0:	490e      	ldr	r1, [pc, #56]	; (800cf1c <tcp_close+0x50>)
 800cee2:	480f      	ldr	r0, [pc, #60]	; (800cf20 <tcp_close+0x54>)
 800cee4:	f00b f924 	bl	8018130 <iprintf>
 800cee8:	f06f 030f 	mvn.w	r3, #15
 800ceec:	e00f      	b.n	800cf0e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	7d1b      	ldrb	r3, [r3, #20]
 800cef2:	2b01      	cmp	r3, #1
 800cef4:	d006      	beq.n	800cf04 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	8b5b      	ldrh	r3, [r3, #26]
 800cefa:	f043 0310 	orr.w	r3, r3, #16
 800cefe:	b29a      	uxth	r2, r3
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cf04:	2101      	movs	r1, #1
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f7ff fe94 	bl	800cc34 <tcp_close_shutdown>
 800cf0c:	4603      	mov	r3, r0
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3708      	adds	r7, #8
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	0801a908 	.word	0x0801a908
 800cf1c:	0801aa18 	.word	0x0801aa18
 800cf20:	0801a94c 	.word	0x0801a94c

0800cf24 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	60b9      	str	r1, [r7, #8]
 800cf2e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d109      	bne.n	800cf4a <tcp_shutdown+0x26>
 800cf36:	4b26      	ldr	r3, [pc, #152]	; (800cfd0 <tcp_shutdown+0xac>)
 800cf38:	f240 2207 	movw	r2, #519	; 0x207
 800cf3c:	4925      	ldr	r1, [pc, #148]	; (800cfd4 <tcp_shutdown+0xb0>)
 800cf3e:	4826      	ldr	r0, [pc, #152]	; (800cfd8 <tcp_shutdown+0xb4>)
 800cf40:	f00b f8f6 	bl	8018130 <iprintf>
 800cf44:	f06f 030f 	mvn.w	r3, #15
 800cf48:	e03d      	b.n	800cfc6 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	7d1b      	ldrb	r3, [r3, #20]
 800cf4e:	2b01      	cmp	r3, #1
 800cf50:	d102      	bne.n	800cf58 <tcp_shutdown+0x34>
    return ERR_CONN;
 800cf52:	f06f 030a 	mvn.w	r3, #10
 800cf56:	e036      	b.n	800cfc6 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d01b      	beq.n	800cf96 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	8b5b      	ldrh	r3, [r3, #26]
 800cf62:	f043 0310 	orr.w	r3, r3, #16
 800cf66:	b29a      	uxth	r2, r3
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d005      	beq.n	800cf7e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800cf72:	2101      	movs	r1, #1
 800cf74:	68f8      	ldr	r0, [r7, #12]
 800cf76:	f7ff fe5d 	bl	800cc34 <tcp_close_shutdown>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	e023      	b.n	800cfc6 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d007      	beq.n	800cf96 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f7ff fae4 	bl	800c558 <pbuf_free>
      pcb->refused_data = NULL;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2200      	movs	r2, #0
 800cf94:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d013      	beq.n	800cfc4 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	7d1b      	ldrb	r3, [r3, #20]
 800cfa0:	2b04      	cmp	r3, #4
 800cfa2:	dc02      	bgt.n	800cfaa <tcp_shutdown+0x86>
 800cfa4:	2b03      	cmp	r3, #3
 800cfa6:	da02      	bge.n	800cfae <tcp_shutdown+0x8a>
 800cfa8:	e009      	b.n	800cfbe <tcp_shutdown+0x9a>
 800cfaa:	2b07      	cmp	r3, #7
 800cfac:	d107      	bne.n	800cfbe <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	68f8      	ldr	r0, [r7, #12]
 800cfb6:	f7ff fe3d 	bl	800cc34 <tcp_close_shutdown>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	e003      	b.n	800cfc6 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800cfbe:	f06f 030a 	mvn.w	r3, #10
 800cfc2:	e000      	b.n	800cfc6 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800cfc4:	2300      	movs	r3, #0
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3710      	adds	r7, #16
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
 800cfce:	bf00      	nop
 800cfd0:	0801a908 	.word	0x0801a908
 800cfd4:	0801aa30 	.word	0x0801aa30
 800cfd8:	0801a94c 	.word	0x0801a94c

0800cfdc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b08e      	sub	sp, #56	; 0x38
 800cfe0:	af04      	add	r7, sp, #16
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d107      	bne.n	800cffc <tcp_abandon+0x20>
 800cfec:	4b52      	ldr	r3, [pc, #328]	; (800d138 <tcp_abandon+0x15c>)
 800cfee:	f240 223d 	movw	r2, #573	; 0x23d
 800cff2:	4952      	ldr	r1, [pc, #328]	; (800d13c <tcp_abandon+0x160>)
 800cff4:	4852      	ldr	r0, [pc, #328]	; (800d140 <tcp_abandon+0x164>)
 800cff6:	f00b f89b 	bl	8018130 <iprintf>
 800cffa:	e099      	b.n	800d130 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	7d1b      	ldrb	r3, [r3, #20]
 800d000:	2b01      	cmp	r3, #1
 800d002:	d106      	bne.n	800d012 <tcp_abandon+0x36>
 800d004:	4b4c      	ldr	r3, [pc, #304]	; (800d138 <tcp_abandon+0x15c>)
 800d006:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d00a:	494e      	ldr	r1, [pc, #312]	; (800d144 <tcp_abandon+0x168>)
 800d00c:	484c      	ldr	r0, [pc, #304]	; (800d140 <tcp_abandon+0x164>)
 800d00e:	f00b f88f 	bl	8018130 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	7d1b      	ldrb	r3, [r3, #20]
 800d016:	2b0a      	cmp	r3, #10
 800d018:	d107      	bne.n	800d02a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d01a:	6879      	ldr	r1, [r7, #4]
 800d01c:	484a      	ldr	r0, [pc, #296]	; (800d148 <tcp_abandon+0x16c>)
 800d01e:	f001 fa69 	bl	800e4f4 <tcp_pcb_remove>
    tcp_free(pcb);
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f7ff fd54 	bl	800cad0 <tcp_free>
 800d028:	e082      	b.n	800d130 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d02a:	2300      	movs	r3, #0
 800d02c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d02e:	2300      	movs	r3, #0
 800d030:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d036:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d03c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d044:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	691b      	ldr	r3, [r3, #16]
 800d04a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	7d1b      	ldrb	r3, [r3, #20]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d126      	bne.n	800d0a2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	8adb      	ldrh	r3, [r3, #22]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d02e      	beq.n	800d0ba <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d05c:	4b3b      	ldr	r3, [pc, #236]	; (800d14c <tcp_abandon+0x170>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	687a      	ldr	r2, [r7, #4]
 800d062:	429a      	cmp	r2, r3
 800d064:	d105      	bne.n	800d072 <tcp_abandon+0x96>
 800d066:	4b39      	ldr	r3, [pc, #228]	; (800d14c <tcp_abandon+0x170>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	68db      	ldr	r3, [r3, #12]
 800d06c:	4a37      	ldr	r2, [pc, #220]	; (800d14c <tcp_abandon+0x170>)
 800d06e:	6013      	str	r3, [r2, #0]
 800d070:	e013      	b.n	800d09a <tcp_abandon+0xbe>
 800d072:	4b36      	ldr	r3, [pc, #216]	; (800d14c <tcp_abandon+0x170>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	61fb      	str	r3, [r7, #28]
 800d078:	e00c      	b.n	800d094 <tcp_abandon+0xb8>
 800d07a:	69fb      	ldr	r3, [r7, #28]
 800d07c:	68db      	ldr	r3, [r3, #12]
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	429a      	cmp	r2, r3
 800d082:	d104      	bne.n	800d08e <tcp_abandon+0xb2>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	68da      	ldr	r2, [r3, #12]
 800d088:	69fb      	ldr	r3, [r7, #28]
 800d08a:	60da      	str	r2, [r3, #12]
 800d08c:	e005      	b.n	800d09a <tcp_abandon+0xbe>
 800d08e:	69fb      	ldr	r3, [r7, #28]
 800d090:	68db      	ldr	r3, [r3, #12]
 800d092:	61fb      	str	r3, [r7, #28]
 800d094:	69fb      	ldr	r3, [r7, #28]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d1ef      	bne.n	800d07a <tcp_abandon+0x9e>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2200      	movs	r2, #0
 800d09e:	60da      	str	r2, [r3, #12]
 800d0a0:	e00b      	b.n	800d0ba <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	8adb      	ldrh	r3, [r3, #22]
 800d0aa:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d0ac:	6879      	ldr	r1, [r7, #4]
 800d0ae:	4828      	ldr	r0, [pc, #160]	; (800d150 <tcp_abandon+0x174>)
 800d0b0:	f001 fa20 	bl	800e4f4 <tcp_pcb_remove>
 800d0b4:	4b27      	ldr	r3, [pc, #156]	; (800d154 <tcp_abandon+0x178>)
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d004      	beq.n	800d0cc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f000 fed6 	bl	800de78 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d004      	beq.n	800d0de <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f000 fecd 	bl	800de78 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d004      	beq.n	800d0f0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f000 fec4 	bl	800de78 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d00e      	beq.n	800d114 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d0f6:	6879      	ldr	r1, [r7, #4]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	3304      	adds	r3, #4
 800d0fc:	687a      	ldr	r2, [r7, #4]
 800d0fe:	8b12      	ldrh	r2, [r2, #24]
 800d100:	9202      	str	r2, [sp, #8]
 800d102:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d104:	9201      	str	r2, [sp, #4]
 800d106:	9300      	str	r3, [sp, #0]
 800d108:	460b      	mov	r3, r1
 800d10a:	697a      	ldr	r2, [r7, #20]
 800d10c:	69b9      	ldr	r1, [r7, #24]
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f005 fbc0 	bl	8012894 <tcp_rst>
    }
    last_state = pcb->state;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	7d1b      	ldrb	r3, [r3, #20]
 800d118:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f7ff fcd8 	bl	800cad0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d004      	beq.n	800d130 <tcp_abandon+0x154>
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	f06f 010c 	mvn.w	r1, #12
 800d12c:	68f8      	ldr	r0, [r7, #12]
 800d12e:	4798      	blx	r3
  }
}
 800d130:	3728      	adds	r7, #40	; 0x28
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	0801a908 	.word	0x0801a908
 800d13c:	0801aa4c 	.word	0x0801aa4c
 800d140:	0801a94c 	.word	0x0801a94c
 800d144:	0801aa68 	.word	0x0801aa68
 800d148:	20010d6c 	.word	0x20010d6c
 800d14c:	20010d60 	.word	0x20010d60
 800d150:	20010d68 	.word	0x20010d68
 800d154:	20010d70 	.word	0x20010d70

0800d158 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d160:	2101      	movs	r1, #1
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f7ff ff3a 	bl	800cfdc <tcp_abandon>
}
 800d168:	bf00      	nop
 800d16a:	3708      	adds	r7, #8
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b088      	sub	sp, #32
 800d174:	af00      	add	r7, sp, #0
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	4613      	mov	r3, r2
 800d17c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800d17e:	2304      	movs	r3, #4
 800d180:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d101      	bne.n	800d18c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800d188:	4b3e      	ldr	r3, [pc, #248]	; (800d284 <tcp_bind+0x114>)
 800d18a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d109      	bne.n	800d1a6 <tcp_bind+0x36>
 800d192:	4b3d      	ldr	r3, [pc, #244]	; (800d288 <tcp_bind+0x118>)
 800d194:	f240 22a9 	movw	r2, #681	; 0x2a9
 800d198:	493c      	ldr	r1, [pc, #240]	; (800d28c <tcp_bind+0x11c>)
 800d19a:	483d      	ldr	r0, [pc, #244]	; (800d290 <tcp_bind+0x120>)
 800d19c:	f00a ffc8 	bl	8018130 <iprintf>
 800d1a0:	f06f 030f 	mvn.w	r3, #15
 800d1a4:	e06a      	b.n	800d27c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	7d1b      	ldrb	r3, [r3, #20]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d009      	beq.n	800d1c2 <tcp_bind+0x52>
 800d1ae:	4b36      	ldr	r3, [pc, #216]	; (800d288 <tcp_bind+0x118>)
 800d1b0:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d1b4:	4937      	ldr	r1, [pc, #220]	; (800d294 <tcp_bind+0x124>)
 800d1b6:	4836      	ldr	r0, [pc, #216]	; (800d290 <tcp_bind+0x120>)
 800d1b8:	f00a ffba 	bl	8018130 <iprintf>
 800d1bc:	f06f 0305 	mvn.w	r3, #5
 800d1c0:	e05c      	b.n	800d27c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800d1c2:	88fb      	ldrh	r3, [r7, #6]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d109      	bne.n	800d1dc <tcp_bind+0x6c>
    port = tcp_new_port();
 800d1c8:	f000 f9f0 	bl	800d5ac <tcp_new_port>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d1d0:	88fb      	ldrh	r3, [r7, #6]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d135      	bne.n	800d242 <tcp_bind+0xd2>
      return ERR_BUF;
 800d1d6:	f06f 0301 	mvn.w	r3, #1
 800d1da:	e04f      	b.n	800d27c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800d1dc:	2300      	movs	r3, #0
 800d1de:	61fb      	str	r3, [r7, #28]
 800d1e0:	e02b      	b.n	800d23a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d1e2:	4a2d      	ldr	r2, [pc, #180]	; (800d298 <tcp_bind+0x128>)
 800d1e4:	69fb      	ldr	r3, [r7, #28]
 800d1e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	61bb      	str	r3, [r7, #24]
 800d1ee:	e01e      	b.n	800d22e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800d1f0:	69bb      	ldr	r3, [r7, #24]
 800d1f2:	8adb      	ldrh	r3, [r3, #22]
 800d1f4:	88fa      	ldrh	r2, [r7, #6]
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	d116      	bne.n	800d228 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800d1fa:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d010      	beq.n	800d222 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800d200:	69bb      	ldr	r3, [r7, #24]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d00c      	beq.n	800d222 <tcp_bind+0xb2>
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d009      	beq.n	800d222 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d005      	beq.n	800d222 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800d216:	69bb      	ldr	r3, [r7, #24]
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d21e:	429a      	cmp	r2, r3
 800d220:	d102      	bne.n	800d228 <tcp_bind+0xb8>
              return ERR_USE;
 800d222:	f06f 0307 	mvn.w	r3, #7
 800d226:	e029      	b.n	800d27c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d228:	69bb      	ldr	r3, [r7, #24]
 800d22a:	68db      	ldr	r3, [r3, #12]
 800d22c:	61bb      	str	r3, [r7, #24]
 800d22e:	69bb      	ldr	r3, [r7, #24]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d1dd      	bne.n	800d1f0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800d234:	69fb      	ldr	r3, [r7, #28]
 800d236:	3301      	adds	r3, #1
 800d238:	61fb      	str	r3, [r7, #28]
 800d23a:	69fa      	ldr	r2, [r7, #28]
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	429a      	cmp	r2, r3
 800d240:	dbcf      	blt.n	800d1e2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d00c      	beq.n	800d262 <tcp_bind+0xf2>
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d008      	beq.n	800d262 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d002      	beq.n	800d25c <tcp_bind+0xec>
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	e000      	b.n	800d25e <tcp_bind+0xee>
 800d25c:	2300      	movs	r3, #0
 800d25e:	68fa      	ldr	r2, [r7, #12]
 800d260:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	88fa      	ldrh	r2, [r7, #6]
 800d266:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800d268:	4b0c      	ldr	r3, [pc, #48]	; (800d29c <tcp_bind+0x12c>)
 800d26a:	681a      	ldr	r2, [r3, #0]
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	60da      	str	r2, [r3, #12]
 800d270:	4a0a      	ldr	r2, [pc, #40]	; (800d29c <tcp_bind+0x12c>)
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	6013      	str	r3, [r2, #0]
 800d276:	f005 fccf 	bl	8012c18 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800d27a:	2300      	movs	r3, #0
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3720      	adds	r7, #32
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}
 800d284:	08026e3c 	.word	0x08026e3c
 800d288:	0801a908 	.word	0x0801a908
 800d28c:	0801aa9c 	.word	0x0801aa9c
 800d290:	0801a94c 	.word	0x0801a94c
 800d294:	0801aab4 	.word	0x0801aab4
 800d298:	08026e04 	.word	0x08026e04
 800d29c:	20010d60 	.word	0x20010d60

0800d2a0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b084      	sub	sp, #16
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	60f8      	str	r0, [r7, #12]
 800d2a8:	60b9      	str	r1, [r7, #8]
 800d2aa:	4613      	mov	r3, r2
 800d2ac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d106      	bne.n	800d2c2 <tcp_accept_null+0x22>
 800d2b4:	4b07      	ldr	r3, [pc, #28]	; (800d2d4 <tcp_accept_null+0x34>)
 800d2b6:	f240 320f 	movw	r2, #783	; 0x30f
 800d2ba:	4907      	ldr	r1, [pc, #28]	; (800d2d8 <tcp_accept_null+0x38>)
 800d2bc:	4807      	ldr	r0, [pc, #28]	; (800d2dc <tcp_accept_null+0x3c>)
 800d2be:	f00a ff37 	bl	8018130 <iprintf>

  tcp_abort(pcb);
 800d2c2:	68b8      	ldr	r0, [r7, #8]
 800d2c4:	f7ff ff48 	bl	800d158 <tcp_abort>

  return ERR_ABRT;
 800d2c8:	f06f 030c 	mvn.w	r3, #12
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3710      	adds	r7, #16
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}
 800d2d4:	0801a908 	.word	0x0801a908
 800d2d8:	0801aadc 	.word	0x0801aadc
 800d2dc:	0801a94c 	.word	0x0801a94c

0800d2e0 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b082      	sub	sp, #8
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	460b      	mov	r3, r1
 800d2ea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800d2ec:	78fb      	ldrb	r3, [r7, #3]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f000 f806 	bl	800d304 <tcp_listen_with_backlog_and_err>
 800d2f8:	4603      	mov	r3, r0
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3708      	adds	r7, #8
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
	...

0800d304 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b088      	sub	sp, #32
 800d308:	af00      	add	r7, sp, #0
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	460b      	mov	r3, r1
 800d30e:	607a      	str	r2, [r7, #4]
 800d310:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800d312:	2300      	movs	r3, #0
 800d314:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d109      	bne.n	800d330 <tcp_listen_with_backlog_and_err+0x2c>
 800d31c:	4b47      	ldr	r3, [pc, #284]	; (800d43c <tcp_listen_with_backlog_and_err+0x138>)
 800d31e:	f240 3259 	movw	r2, #857	; 0x359
 800d322:	4947      	ldr	r1, [pc, #284]	; (800d440 <tcp_listen_with_backlog_and_err+0x13c>)
 800d324:	4847      	ldr	r0, [pc, #284]	; (800d444 <tcp_listen_with_backlog_and_err+0x140>)
 800d326:	f00a ff03 	bl	8018130 <iprintf>
 800d32a:	23f0      	movs	r3, #240	; 0xf0
 800d32c:	76fb      	strb	r3, [r7, #27]
 800d32e:	e079      	b.n	800d424 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	7d1b      	ldrb	r3, [r3, #20]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d009      	beq.n	800d34c <tcp_listen_with_backlog_and_err+0x48>
 800d338:	4b40      	ldr	r3, [pc, #256]	; (800d43c <tcp_listen_with_backlog_and_err+0x138>)
 800d33a:	f240 325a 	movw	r2, #858	; 0x35a
 800d33e:	4942      	ldr	r1, [pc, #264]	; (800d448 <tcp_listen_with_backlog_and_err+0x144>)
 800d340:	4840      	ldr	r0, [pc, #256]	; (800d444 <tcp_listen_with_backlog_and_err+0x140>)
 800d342:	f00a fef5 	bl	8018130 <iprintf>
 800d346:	23f1      	movs	r3, #241	; 0xf1
 800d348:	76fb      	strb	r3, [r7, #27]
 800d34a:	e06b      	b.n	800d424 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	7d1b      	ldrb	r3, [r3, #20]
 800d350:	2b01      	cmp	r3, #1
 800d352:	d104      	bne.n	800d35e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800d358:	23f7      	movs	r3, #247	; 0xf7
 800d35a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d35c:	e062      	b.n	800d424 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800d35e:	2002      	movs	r0, #2
 800d360:	f7fe f9d4 	bl	800b70c <memp_malloc>
 800d364:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800d366:	69fb      	ldr	r3, [r7, #28]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d102      	bne.n	800d372 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800d36c:	23ff      	movs	r3, #255	; 0xff
 800d36e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d370:	e058      	b.n	800d424 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	691a      	ldr	r2, [r3, #16]
 800d376:	69fb      	ldr	r3, [r7, #28]
 800d378:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	8ada      	ldrh	r2, [r3, #22]
 800d37e:	69fb      	ldr	r3, [r7, #28]
 800d380:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800d382:	69fb      	ldr	r3, [r7, #28]
 800d384:	2201      	movs	r2, #1
 800d386:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	7d5a      	ldrb	r2, [r3, #21]
 800d38c:	69fb      	ldr	r3, [r7, #28]
 800d38e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	7a5a      	ldrb	r2, [r3, #9]
 800d394:	69fb      	ldr	r3, [r7, #28]
 800d396:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800d398:	69fb      	ldr	r3, [r7, #28]
 800d39a:	2200      	movs	r2, #0
 800d39c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	7ada      	ldrb	r2, [r3, #11]
 800d3a2:	69fb      	ldr	r3, [r7, #28]
 800d3a4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	7a9a      	ldrb	r2, [r3, #10]
 800d3aa:	69fb      	ldr	r3, [r7, #28]
 800d3ac:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681a      	ldr	r2, [r3, #0]
 800d3b2:	69fb      	ldr	r3, [r7, #28]
 800d3b4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	8adb      	ldrh	r3, [r3, #22]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d021      	beq.n	800d402 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800d3be:	4b23      	ldr	r3, [pc, #140]	; (800d44c <tcp_listen_with_backlog_and_err+0x148>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	68fa      	ldr	r2, [r7, #12]
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d105      	bne.n	800d3d4 <tcp_listen_with_backlog_and_err+0xd0>
 800d3c8:	4b20      	ldr	r3, [pc, #128]	; (800d44c <tcp_listen_with_backlog_and_err+0x148>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	68db      	ldr	r3, [r3, #12]
 800d3ce:	4a1f      	ldr	r2, [pc, #124]	; (800d44c <tcp_listen_with_backlog_and_err+0x148>)
 800d3d0:	6013      	str	r3, [r2, #0]
 800d3d2:	e013      	b.n	800d3fc <tcp_listen_with_backlog_and_err+0xf8>
 800d3d4:	4b1d      	ldr	r3, [pc, #116]	; (800d44c <tcp_listen_with_backlog_and_err+0x148>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	617b      	str	r3, [r7, #20]
 800d3da:	e00c      	b.n	800d3f6 <tcp_listen_with_backlog_and_err+0xf2>
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	68db      	ldr	r3, [r3, #12]
 800d3e0:	68fa      	ldr	r2, [r7, #12]
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d104      	bne.n	800d3f0 <tcp_listen_with_backlog_and_err+0xec>
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	68da      	ldr	r2, [r3, #12]
 800d3ea:	697b      	ldr	r3, [r7, #20]
 800d3ec:	60da      	str	r2, [r3, #12]
 800d3ee:	e005      	b.n	800d3fc <tcp_listen_with_backlog_and_err+0xf8>
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	68db      	ldr	r3, [r3, #12]
 800d3f4:	617b      	str	r3, [r7, #20]
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d1ef      	bne.n	800d3dc <tcp_listen_with_backlog_and_err+0xd8>
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	2200      	movs	r2, #0
 800d400:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800d402:	68f8      	ldr	r0, [r7, #12]
 800d404:	f7ff fb64 	bl	800cad0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800d408:	69fb      	ldr	r3, [r7, #28]
 800d40a:	4a11      	ldr	r2, [pc, #68]	; (800d450 <tcp_listen_with_backlog_and_err+0x14c>)
 800d40c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800d40e:	4b11      	ldr	r3, [pc, #68]	; (800d454 <tcp_listen_with_backlog_and_err+0x150>)
 800d410:	681a      	ldr	r2, [r3, #0]
 800d412:	69fb      	ldr	r3, [r7, #28]
 800d414:	60da      	str	r2, [r3, #12]
 800d416:	4a0f      	ldr	r2, [pc, #60]	; (800d454 <tcp_listen_with_backlog_and_err+0x150>)
 800d418:	69fb      	ldr	r3, [r7, #28]
 800d41a:	6013      	str	r3, [r2, #0]
 800d41c:	f005 fbfc 	bl	8012c18 <tcp_timer_needed>
  res = ERR_OK;
 800d420:	2300      	movs	r3, #0
 800d422:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d002      	beq.n	800d430 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	7efa      	ldrb	r2, [r7, #27]
 800d42e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800d430:	69fb      	ldr	r3, [r7, #28]
}
 800d432:	4618      	mov	r0, r3
 800d434:	3720      	adds	r7, #32
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
 800d43a:	bf00      	nop
 800d43c:	0801a908 	.word	0x0801a908
 800d440:	0801aafc 	.word	0x0801aafc
 800d444:	0801a94c 	.word	0x0801a94c
 800d448:	0801ab2c 	.word	0x0801ab2c
 800d44c:	20010d60 	.word	0x20010d60
 800d450:	0800d2a1 	.word	0x0800d2a1
 800d454:	20010d64 	.word	0x20010d64

0800d458 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b084      	sub	sp, #16
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d106      	bne.n	800d474 <tcp_update_rcv_ann_wnd+0x1c>
 800d466:	4b25      	ldr	r3, [pc, #148]	; (800d4fc <tcp_update_rcv_ann_wnd+0xa4>)
 800d468:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d46c:	4924      	ldr	r1, [pc, #144]	; (800d500 <tcp_update_rcv_ann_wnd+0xa8>)
 800d46e:	4825      	ldr	r0, [pc, #148]	; (800d504 <tcp_update_rcv_ann_wnd+0xac>)
 800d470:	f00a fe5e 	bl	8018130 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d478:	687a      	ldr	r2, [r7, #4]
 800d47a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d47c:	4413      	add	r3, r2
 800d47e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d484:	687a      	ldr	r2, [r7, #4]
 800d486:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d488:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d48c:	bf28      	it	cs
 800d48e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800d492:	b292      	uxth	r2, r2
 800d494:	4413      	add	r3, r2
 800d496:	68fa      	ldr	r2, [r7, #12]
 800d498:	1ad3      	subs	r3, r2, r3
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	db08      	blt.n	800d4b0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4aa:	68fa      	ldr	r2, [r7, #12]
 800d4ac:	1ad3      	subs	r3, r2, r3
 800d4ae:	e020      	b.n	800d4f2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4b8:	1ad3      	subs	r3, r2, r3
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	dd03      	ble.n	800d4c6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d4c4:	e014      	b.n	800d4f0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ce:	1ad3      	subs	r3, r2, r3
 800d4d0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d4d8:	d306      	bcc.n	800d4e8 <tcp_update_rcv_ann_wnd+0x90>
 800d4da:	4b08      	ldr	r3, [pc, #32]	; (800d4fc <tcp_update_rcv_ann_wnd+0xa4>)
 800d4dc:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d4e0:	4909      	ldr	r1, [pc, #36]	; (800d508 <tcp_update_rcv_ann_wnd+0xb0>)
 800d4e2:	4808      	ldr	r0, [pc, #32]	; (800d504 <tcp_update_rcv_ann_wnd+0xac>)
 800d4e4:	f00a fe24 	bl	8018130 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	b29a      	uxth	r2, r3
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d4f0:	2300      	movs	r3, #0
  }
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3710      	adds	r7, #16
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	0801a908 	.word	0x0801a908
 800d500:	0801ab64 	.word	0x0801ab64
 800d504:	0801a94c 	.word	0x0801a94c
 800d508:	0801ab88 	.word	0x0801ab88

0800d50c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b084      	sub	sp, #16
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	460b      	mov	r3, r1
 800d516:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d107      	bne.n	800d52e <tcp_recved+0x22>
 800d51e:	4b1f      	ldr	r3, [pc, #124]	; (800d59c <tcp_recved+0x90>)
 800d520:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d524:	491e      	ldr	r1, [pc, #120]	; (800d5a0 <tcp_recved+0x94>)
 800d526:	481f      	ldr	r0, [pc, #124]	; (800d5a4 <tcp_recved+0x98>)
 800d528:	f00a fe02 	bl	8018130 <iprintf>
 800d52c:	e032      	b.n	800d594 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	7d1b      	ldrb	r3, [r3, #20]
 800d532:	2b01      	cmp	r3, #1
 800d534:	d106      	bne.n	800d544 <tcp_recved+0x38>
 800d536:	4b19      	ldr	r3, [pc, #100]	; (800d59c <tcp_recved+0x90>)
 800d538:	f240 32d2 	movw	r2, #978	; 0x3d2
 800d53c:	491a      	ldr	r1, [pc, #104]	; (800d5a8 <tcp_recved+0x9c>)
 800d53e:	4819      	ldr	r0, [pc, #100]	; (800d5a4 <tcp_recved+0x98>)
 800d540:	f00a fdf6 	bl	8018130 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d548:	887b      	ldrh	r3, [r7, #2]
 800d54a:	4413      	add	r3, r2
 800d54c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d54e:	89fb      	ldrh	r3, [r7, #14]
 800d550:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d554:	d804      	bhi.n	800d560 <tcp_recved+0x54>
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d55a:	89fa      	ldrh	r2, [r7, #14]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d204      	bcs.n	800d56a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d566:	851a      	strh	r2, [r3, #40]	; 0x28
 800d568:	e002      	b.n	800d570 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	89fa      	ldrh	r2, [r7, #14]
 800d56e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f7ff ff71 	bl	800d458 <tcp_update_rcv_ann_wnd>
 800d576:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d57e:	d309      	bcc.n	800d594 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	8b5b      	ldrh	r3, [r3, #26]
 800d584:	f043 0302 	orr.w	r3, r3, #2
 800d588:	b29a      	uxth	r2, r3
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f004 fbcc 	bl	8011d2c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d594:	3710      	adds	r7, #16
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}
 800d59a:	bf00      	nop
 800d59c:	0801a908 	.word	0x0801a908
 800d5a0:	0801aba4 	.word	0x0801aba4
 800d5a4:	0801a94c 	.word	0x0801a94c
 800d5a8:	0801abbc 	.word	0x0801abbc

0800d5ac <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	b083      	sub	sp, #12
 800d5b0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800d5b6:	4b1e      	ldr	r3, [pc, #120]	; (800d630 <tcp_new_port+0x84>)
 800d5b8:	881b      	ldrh	r3, [r3, #0]
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	b29a      	uxth	r2, r3
 800d5be:	4b1c      	ldr	r3, [pc, #112]	; (800d630 <tcp_new_port+0x84>)
 800d5c0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800d5c2:	4b1b      	ldr	r3, [pc, #108]	; (800d630 <tcp_new_port+0x84>)
 800d5c4:	881b      	ldrh	r3, [r3, #0]
 800d5c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5ca:	4293      	cmp	r3, r2
 800d5cc:	d103      	bne.n	800d5d6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d5ce:	4b18      	ldr	r3, [pc, #96]	; (800d630 <tcp_new_port+0x84>)
 800d5d0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d5d4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	71fb      	strb	r3, [r7, #7]
 800d5da:	e01e      	b.n	800d61a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d5dc:	79fb      	ldrb	r3, [r7, #7]
 800d5de:	4a15      	ldr	r2, [pc, #84]	; (800d634 <tcp_new_port+0x88>)
 800d5e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	603b      	str	r3, [r7, #0]
 800d5e8:	e011      	b.n	800d60e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	8ada      	ldrh	r2, [r3, #22]
 800d5ee:	4b10      	ldr	r3, [pc, #64]	; (800d630 <tcp_new_port+0x84>)
 800d5f0:	881b      	ldrh	r3, [r3, #0]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d108      	bne.n	800d608 <tcp_new_port+0x5c>
        n++;
 800d5f6:	88bb      	ldrh	r3, [r7, #4]
 800d5f8:	3301      	adds	r3, #1
 800d5fa:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d5fc:	88bb      	ldrh	r3, [r7, #4]
 800d5fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d602:	d3d8      	bcc.n	800d5b6 <tcp_new_port+0xa>
          return 0;
 800d604:	2300      	movs	r3, #0
 800d606:	e00d      	b.n	800d624 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	68db      	ldr	r3, [r3, #12]
 800d60c:	603b      	str	r3, [r7, #0]
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d1ea      	bne.n	800d5ea <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d614:	79fb      	ldrb	r3, [r7, #7]
 800d616:	3301      	adds	r3, #1
 800d618:	71fb      	strb	r3, [r7, #7]
 800d61a:	79fb      	ldrb	r3, [r7, #7]
 800d61c:	2b03      	cmp	r3, #3
 800d61e:	d9dd      	bls.n	800d5dc <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d620:	4b03      	ldr	r3, [pc, #12]	; (800d630 <tcp_new_port+0x84>)
 800d622:	881b      	ldrh	r3, [r3, #0]
}
 800d624:	4618      	mov	r0, r3
 800d626:	370c      	adds	r7, #12
 800d628:	46bd      	mov	sp, r7
 800d62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62e:	4770      	bx	lr
 800d630:	20000024 	.word	0x20000024
 800d634:	08026e04 	.word	0x08026e04

0800d638 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d638:	b5b0      	push	{r4, r5, r7, lr}
 800d63a:	b090      	sub	sp, #64	; 0x40
 800d63c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d63e:	2300      	movs	r3, #0
 800d640:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d644:	4b94      	ldr	r3, [pc, #592]	; (800d898 <tcp_slowtmr+0x260>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	3301      	adds	r3, #1
 800d64a:	4a93      	ldr	r2, [pc, #588]	; (800d898 <tcp_slowtmr+0x260>)
 800d64c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d64e:	4b93      	ldr	r3, [pc, #588]	; (800d89c <tcp_slowtmr+0x264>)
 800d650:	781b      	ldrb	r3, [r3, #0]
 800d652:	3301      	adds	r3, #1
 800d654:	b2da      	uxtb	r2, r3
 800d656:	4b91      	ldr	r3, [pc, #580]	; (800d89c <tcp_slowtmr+0x264>)
 800d658:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d65a:	2300      	movs	r3, #0
 800d65c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d65e:	4b90      	ldr	r3, [pc, #576]	; (800d8a0 <tcp_slowtmr+0x268>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d664:	e29f      	b.n	800dba6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d668:	7d1b      	ldrb	r3, [r3, #20]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d106      	bne.n	800d67c <tcp_slowtmr+0x44>
 800d66e:	4b8d      	ldr	r3, [pc, #564]	; (800d8a4 <tcp_slowtmr+0x26c>)
 800d670:	f240 42be 	movw	r2, #1214	; 0x4be
 800d674:	498c      	ldr	r1, [pc, #560]	; (800d8a8 <tcp_slowtmr+0x270>)
 800d676:	488d      	ldr	r0, [pc, #564]	; (800d8ac <tcp_slowtmr+0x274>)
 800d678:	f00a fd5a 	bl	8018130 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67e:	7d1b      	ldrb	r3, [r3, #20]
 800d680:	2b01      	cmp	r3, #1
 800d682:	d106      	bne.n	800d692 <tcp_slowtmr+0x5a>
 800d684:	4b87      	ldr	r3, [pc, #540]	; (800d8a4 <tcp_slowtmr+0x26c>)
 800d686:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d68a:	4989      	ldr	r1, [pc, #548]	; (800d8b0 <tcp_slowtmr+0x278>)
 800d68c:	4887      	ldr	r0, [pc, #540]	; (800d8ac <tcp_slowtmr+0x274>)
 800d68e:	f00a fd4f 	bl	8018130 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d694:	7d1b      	ldrb	r3, [r3, #20]
 800d696:	2b0a      	cmp	r3, #10
 800d698:	d106      	bne.n	800d6a8 <tcp_slowtmr+0x70>
 800d69a:	4b82      	ldr	r3, [pc, #520]	; (800d8a4 <tcp_slowtmr+0x26c>)
 800d69c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d6a0:	4984      	ldr	r1, [pc, #528]	; (800d8b4 <tcp_slowtmr+0x27c>)
 800d6a2:	4882      	ldr	r0, [pc, #520]	; (800d8ac <tcp_slowtmr+0x274>)
 800d6a4:	f00a fd44 	bl	8018130 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6aa:	7f9a      	ldrb	r2, [r3, #30]
 800d6ac:	4b7b      	ldr	r3, [pc, #492]	; (800d89c <tcp_slowtmr+0x264>)
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	d105      	bne.n	800d6c0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ba:	68db      	ldr	r3, [r3, #12]
 800d6bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d6be:	e272      	b.n	800dba6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d6c0:	4b76      	ldr	r3, [pc, #472]	; (800d89c <tcp_slowtmr+0x264>)
 800d6c2:	781a      	ldrb	r2, [r3, #0]
 800d6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d6:	7d1b      	ldrb	r3, [r3, #20]
 800d6d8:	2b02      	cmp	r3, #2
 800d6da:	d10a      	bne.n	800d6f2 <tcp_slowtmr+0xba>
 800d6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d6e2:	2b05      	cmp	r3, #5
 800d6e4:	d905      	bls.n	800d6f2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800d6e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6ea:	3301      	adds	r3, #1
 800d6ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d6f0:	e11e      	b.n	800d930 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d6f8:	2b0b      	cmp	r3, #11
 800d6fa:	d905      	bls.n	800d708 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800d6fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d700:	3301      	adds	r3, #1
 800d702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d706:	e113      	b.n	800d930 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d70a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d075      	beq.n	800d7fe <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d716:	2b00      	cmp	r3, #0
 800d718:	d006      	beq.n	800d728 <tcp_slowtmr+0xf0>
 800d71a:	4b62      	ldr	r3, [pc, #392]	; (800d8a4 <tcp_slowtmr+0x26c>)
 800d71c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d720:	4965      	ldr	r1, [pc, #404]	; (800d8b8 <tcp_slowtmr+0x280>)
 800d722:	4862      	ldr	r0, [pc, #392]	; (800d8ac <tcp_slowtmr+0x274>)
 800d724:	f00a fd04 	bl	8018130 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d72a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d106      	bne.n	800d73e <tcp_slowtmr+0x106>
 800d730:	4b5c      	ldr	r3, [pc, #368]	; (800d8a4 <tcp_slowtmr+0x26c>)
 800d732:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d736:	4961      	ldr	r1, [pc, #388]	; (800d8bc <tcp_slowtmr+0x284>)
 800d738:	485c      	ldr	r0, [pc, #368]	; (800d8ac <tcp_slowtmr+0x274>)
 800d73a:	f00a fcf9 	bl	8018130 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d740:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d744:	2b0b      	cmp	r3, #11
 800d746:	d905      	bls.n	800d754 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d74c:	3301      	adds	r3, #1
 800d74e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d752:	e0ed      	b.n	800d930 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d756:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d75a:	3b01      	subs	r3, #1
 800d75c:	4a58      	ldr	r2, [pc, #352]	; (800d8c0 <tcp_slowtmr+0x288>)
 800d75e:	5cd3      	ldrb	r3, [r2, r3]
 800d760:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d764:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d768:	7c7a      	ldrb	r2, [r7, #17]
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d907      	bls.n	800d77e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d770:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d774:	3301      	adds	r3, #1
 800d776:	b2da      	uxtb	r2, r3
 800d778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d77a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d780:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d784:	7c7a      	ldrb	r2, [r7, #17]
 800d786:	429a      	cmp	r2, r3
 800d788:	f200 80d2 	bhi.w	800d930 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d78c:	2301      	movs	r3, #1
 800d78e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d792:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d796:	2b00      	cmp	r3, #0
 800d798:	d108      	bne.n	800d7ac <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d79a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d79c:	f005 f96e 	bl	8012a7c <tcp_zero_window_probe>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d014      	beq.n	800d7d0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	623b      	str	r3, [r7, #32]
 800d7aa:	e011      	b.n	800d7d0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7b6:	f004 f833 	bl	8011820 <tcp_split_unsent_seg>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d107      	bne.n	800d7d0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d7c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7c2:	f004 fab3 	bl	8011d2c <tcp_output>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d101      	bne.n	800d7d0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d7d0:	6a3b      	ldr	r3, [r7, #32]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	f000 80ac 	beq.w	800d930 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d7e6:	2b06      	cmp	r3, #6
 800d7e8:	f200 80a2 	bhi.w	800d930 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	b2da      	uxtb	r2, r3
 800d7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d7fc:	e098      	b.n	800d930 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d800:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d804:	2b00      	cmp	r3, #0
 800d806:	db0f      	blt.n	800d828 <tcp_slowtmr+0x1f0>
 800d808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d80a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d80e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d812:	4293      	cmp	r3, r2
 800d814:	d008      	beq.n	800d828 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d818:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d81c:	b29b      	uxth	r3, r3
 800d81e:	3301      	adds	r3, #1
 800d820:	b29b      	uxth	r3, r3
 800d822:	b21a      	sxth	r2, r3
 800d824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d826:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d82a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d830:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d834:	429a      	cmp	r2, r3
 800d836:	db7b      	blt.n	800d930 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d838:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d83a:	f004 fd6b 	bl	8012314 <tcp_rexmit_rto_prepare>
 800d83e:	4603      	mov	r3, r0
 800d840:	2b00      	cmp	r3, #0
 800d842:	d007      	beq.n	800d854 <tcp_slowtmr+0x21c>
 800d844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d171      	bne.n	800d930 <tcp_slowtmr+0x2f8>
 800d84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d84e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d850:	2b00      	cmp	r3, #0
 800d852:	d06d      	beq.n	800d930 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d856:	7d1b      	ldrb	r3, [r3, #20]
 800d858:	2b02      	cmp	r3, #2
 800d85a:	d03a      	beq.n	800d8d2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d85e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d862:	2b0c      	cmp	r3, #12
 800d864:	bf28      	it	cs
 800d866:	230c      	movcs	r3, #12
 800d868:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d870:	10db      	asrs	r3, r3, #3
 800d872:	b21b      	sxth	r3, r3
 800d874:	461a      	mov	r2, r3
 800d876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d878:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d87c:	4413      	add	r3, r2
 800d87e:	7efa      	ldrb	r2, [r7, #27]
 800d880:	4910      	ldr	r1, [pc, #64]	; (800d8c4 <tcp_slowtmr+0x28c>)
 800d882:	5c8a      	ldrb	r2, [r1, r2]
 800d884:	4093      	lsls	r3, r2
 800d886:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d88e:	4293      	cmp	r3, r2
 800d890:	dc1a      	bgt.n	800d8c8 <tcp_slowtmr+0x290>
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	b21a      	sxth	r2, r3
 800d896:	e019      	b.n	800d8cc <tcp_slowtmr+0x294>
 800d898:	20010d5c 	.word	0x20010d5c
 800d89c:	20010d72 	.word	0x20010d72
 800d8a0:	20010d68 	.word	0x20010d68
 800d8a4:	0801a908 	.word	0x0801a908
 800d8a8:	0801ac4c 	.word	0x0801ac4c
 800d8ac:	0801a94c 	.word	0x0801a94c
 800d8b0:	0801ac78 	.word	0x0801ac78
 800d8b4:	0801aca4 	.word	0x0801aca4
 800d8b8:	0801acd4 	.word	0x0801acd4
 800d8bc:	0801ad08 	.word	0x0801ad08
 800d8c0:	08026dfc 	.word	0x08026dfc
 800d8c4:	08026dec 	.word	0x08026dec
 800d8c8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	bf28      	it	cs
 800d8e8:	4613      	movcs	r3, r2
 800d8ea:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d8ec:	8a7b      	ldrh	r3, [r7, #18]
 800d8ee:	085b      	lsrs	r3, r3, #1
 800d8f0:	b29a      	uxth	r2, r3
 800d8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d900:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d902:	005b      	lsls	r3, r3, #1
 800d904:	b29b      	uxth	r3, r3
 800d906:	429a      	cmp	r2, r3
 800d908:	d206      	bcs.n	800d918 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d90c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d90e:	005b      	lsls	r3, r3, #1
 800d910:	b29a      	uxth	r2, r3
 800d912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d914:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d91a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d91e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d924:	2200      	movs	r2, #0
 800d926:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d92a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d92c:	f004 fd62 	bl	80123f4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d932:	7d1b      	ldrb	r3, [r3, #20]
 800d934:	2b06      	cmp	r3, #6
 800d936:	d111      	bne.n	800d95c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d93a:	8b5b      	ldrh	r3, [r3, #26]
 800d93c:	f003 0310 	and.w	r3, r3, #16
 800d940:	2b00      	cmp	r3, #0
 800d942:	d00b      	beq.n	800d95c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d944:	4b9d      	ldr	r3, [pc, #628]	; (800dbbc <tcp_slowtmr+0x584>)
 800d946:	681a      	ldr	r2, [r3, #0]
 800d948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d94a:	6a1b      	ldr	r3, [r3, #32]
 800d94c:	1ad3      	subs	r3, r2, r3
 800d94e:	2b28      	cmp	r3, #40	; 0x28
 800d950:	d904      	bls.n	800d95c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d952:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d956:	3301      	adds	r3, #1
 800d958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d95e:	7a5b      	ldrb	r3, [r3, #9]
 800d960:	f003 0308 	and.w	r3, r3, #8
 800d964:	2b00      	cmp	r3, #0
 800d966:	d04c      	beq.n	800da02 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800d968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d96a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d96c:	2b04      	cmp	r3, #4
 800d96e:	d003      	beq.n	800d978 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d972:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d974:	2b07      	cmp	r3, #7
 800d976:	d144      	bne.n	800da02 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d978:	4b90      	ldr	r3, [pc, #576]	; (800dbbc <tcp_slowtmr+0x584>)
 800d97a:	681a      	ldr	r2, [r3, #0]
 800d97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d97e:	6a1b      	ldr	r3, [r3, #32]
 800d980:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d984:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d988:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800d98c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800d990:	498b      	ldr	r1, [pc, #556]	; (800dbc0 <tcp_slowtmr+0x588>)
 800d992:	fba1 1303 	umull	r1, r3, r1, r3
 800d996:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d998:	429a      	cmp	r2, r3
 800d99a:	d90a      	bls.n	800d9b2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d99c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9a0:	3301      	adds	r3, #1
 800d9a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d9a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d9b0:	e027      	b.n	800da02 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d9b2:	4b82      	ldr	r3, [pc, #520]	; (800dbbc <tcp_slowtmr+0x584>)
 800d9b4:	681a      	ldr	r2, [r3, #0]
 800d9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b8:	6a1b      	ldr	r3, [r3, #32]
 800d9ba:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9be:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	4b7e      	ldr	r3, [pc, #504]	; (800dbc4 <tcp_slowtmr+0x58c>)
 800d9cc:	fb00 f303 	mul.w	r3, r0, r3
 800d9d0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d9d2:	497b      	ldr	r1, [pc, #492]	; (800dbc0 <tcp_slowtmr+0x588>)
 800d9d4:	fba1 1303 	umull	r1, r3, r1, r3
 800d9d8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d911      	bls.n	800da02 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800d9de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9e0:	f005 f80c 	bl	80129fc <tcp_keepalive>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d9ea:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d107      	bne.n	800da02 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800d9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	b2da      	uxtb	r2, r3
 800d9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9fe:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800da02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da06:	2b00      	cmp	r3, #0
 800da08:	d011      	beq.n	800da2e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800da0a:	4b6c      	ldr	r3, [pc, #432]	; (800dbbc <tcp_slowtmr+0x584>)
 800da0c:	681a      	ldr	r2, [r3, #0]
 800da0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da10:	6a1b      	ldr	r3, [r3, #32]
 800da12:	1ad2      	subs	r2, r2, r3
 800da14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da16:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800da1a:	4619      	mov	r1, r3
 800da1c:	460b      	mov	r3, r1
 800da1e:	005b      	lsls	r3, r3, #1
 800da20:	440b      	add	r3, r1
 800da22:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800da24:	429a      	cmp	r2, r3
 800da26:	d302      	bcc.n	800da2e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800da28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da2a:	f000 fec7 	bl	800e7bc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800da2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da30:	7d1b      	ldrb	r3, [r3, #20]
 800da32:	2b03      	cmp	r3, #3
 800da34:	d10b      	bne.n	800da4e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800da36:	4b61      	ldr	r3, [pc, #388]	; (800dbbc <tcp_slowtmr+0x584>)
 800da38:	681a      	ldr	r2, [r3, #0]
 800da3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da3c:	6a1b      	ldr	r3, [r3, #32]
 800da3e:	1ad3      	subs	r3, r2, r3
 800da40:	2b28      	cmp	r3, #40	; 0x28
 800da42:	d904      	bls.n	800da4e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800da44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da48:	3301      	adds	r3, #1
 800da4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800da4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da50:	7d1b      	ldrb	r3, [r3, #20]
 800da52:	2b09      	cmp	r3, #9
 800da54:	d10b      	bne.n	800da6e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800da56:	4b59      	ldr	r3, [pc, #356]	; (800dbbc <tcp_slowtmr+0x584>)
 800da58:	681a      	ldr	r2, [r3, #0]
 800da5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da5c:	6a1b      	ldr	r3, [r3, #32]
 800da5e:	1ad3      	subs	r3, r2, r3
 800da60:	2bf0      	cmp	r3, #240	; 0xf0
 800da62:	d904      	bls.n	800da6e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800da64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da68:	3301      	adds	r3, #1
 800da6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800da6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da72:	2b00      	cmp	r3, #0
 800da74:	d060      	beq.n	800db38 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800da76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da7c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800da7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da80:	f000 fce8 	bl	800e454 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800da84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da86:	2b00      	cmp	r3, #0
 800da88:	d010      	beq.n	800daac <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800da8a:	4b4f      	ldr	r3, [pc, #316]	; (800dbc8 <tcp_slowtmr+0x590>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da90:	429a      	cmp	r2, r3
 800da92:	d106      	bne.n	800daa2 <tcp_slowtmr+0x46a>
 800da94:	4b4d      	ldr	r3, [pc, #308]	; (800dbcc <tcp_slowtmr+0x594>)
 800da96:	f240 526d 	movw	r2, #1389	; 0x56d
 800da9a:	494d      	ldr	r1, [pc, #308]	; (800dbd0 <tcp_slowtmr+0x598>)
 800da9c:	484d      	ldr	r0, [pc, #308]	; (800dbd4 <tcp_slowtmr+0x59c>)
 800da9e:	f00a fb47 	bl	8018130 <iprintf>
        prev->next = pcb->next;
 800daa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa4:	68da      	ldr	r2, [r3, #12]
 800daa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa8:	60da      	str	r2, [r3, #12]
 800daaa:	e00f      	b.n	800dacc <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800daac:	4b46      	ldr	r3, [pc, #280]	; (800dbc8 <tcp_slowtmr+0x590>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d006      	beq.n	800dac4 <tcp_slowtmr+0x48c>
 800dab6:	4b45      	ldr	r3, [pc, #276]	; (800dbcc <tcp_slowtmr+0x594>)
 800dab8:	f240 5271 	movw	r2, #1393	; 0x571
 800dabc:	4946      	ldr	r1, [pc, #280]	; (800dbd8 <tcp_slowtmr+0x5a0>)
 800dabe:	4845      	ldr	r0, [pc, #276]	; (800dbd4 <tcp_slowtmr+0x59c>)
 800dac0:	f00a fb36 	bl	8018130 <iprintf>
        tcp_active_pcbs = pcb->next;
 800dac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dac6:	68db      	ldr	r3, [r3, #12]
 800dac8:	4a3f      	ldr	r2, [pc, #252]	; (800dbc8 <tcp_slowtmr+0x590>)
 800daca:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800dacc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d013      	beq.n	800dafc <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800dad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800dad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dada:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800dadc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800dade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae0:	3304      	adds	r3, #4
 800dae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dae4:	8ad2      	ldrh	r2, [r2, #22]
 800dae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dae8:	8b09      	ldrh	r1, [r1, #24]
 800daea:	9102      	str	r1, [sp, #8]
 800daec:	9201      	str	r2, [sp, #4]
 800daee:	9300      	str	r3, [sp, #0]
 800daf0:	462b      	mov	r3, r5
 800daf2:	4622      	mov	r2, r4
 800daf4:	4601      	mov	r1, r0
 800daf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800daf8:	f004 fecc 	bl	8012894 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800dafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dafe:	691b      	ldr	r3, [r3, #16]
 800db00:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800db02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db04:	7d1b      	ldrb	r3, [r3, #20]
 800db06:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800db08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db0a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800db0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db0e:	68db      	ldr	r3, [r3, #12]
 800db10:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800db12:	6838      	ldr	r0, [r7, #0]
 800db14:	f7fe ffdc 	bl	800cad0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800db18:	4b30      	ldr	r3, [pc, #192]	; (800dbdc <tcp_slowtmr+0x5a4>)
 800db1a:	2200      	movs	r2, #0
 800db1c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d004      	beq.n	800db2e <tcp_slowtmr+0x4f6>
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	f06f 010c 	mvn.w	r1, #12
 800db2a:	68b8      	ldr	r0, [r7, #8]
 800db2c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800db2e:	4b2b      	ldr	r3, [pc, #172]	; (800dbdc <tcp_slowtmr+0x5a4>)
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d037      	beq.n	800dba6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800db36:	e590      	b.n	800d65a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800db38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db3a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800db3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db3e:	68db      	ldr	r3, [r3, #12]
 800db40:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800db42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db44:	7f1b      	ldrb	r3, [r3, #28]
 800db46:	3301      	adds	r3, #1
 800db48:	b2da      	uxtb	r2, r3
 800db4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db4c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800db4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db50:	7f1a      	ldrb	r2, [r3, #28]
 800db52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db54:	7f5b      	ldrb	r3, [r3, #29]
 800db56:	429a      	cmp	r2, r3
 800db58:	d325      	bcc.n	800dba6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800db5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db5c:	2200      	movs	r2, #0
 800db5e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800db60:	4b1e      	ldr	r3, [pc, #120]	; (800dbdc <tcp_slowtmr+0x5a4>)
 800db62:	2200      	movs	r2, #0
 800db64:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800db66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d00b      	beq.n	800db88 <tcp_slowtmr+0x550>
 800db70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db78:	6912      	ldr	r2, [r2, #16]
 800db7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800db7c:	4610      	mov	r0, r2
 800db7e:	4798      	blx	r3
 800db80:	4603      	mov	r3, r0
 800db82:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800db86:	e002      	b.n	800db8e <tcp_slowtmr+0x556>
 800db88:	2300      	movs	r3, #0
 800db8a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800db8e:	4b13      	ldr	r3, [pc, #76]	; (800dbdc <tcp_slowtmr+0x5a4>)
 800db90:	781b      	ldrb	r3, [r3, #0]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d000      	beq.n	800db98 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800db96:	e560      	b.n	800d65a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800db98:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d102      	bne.n	800dba6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800dba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dba2:	f004 f8c3 	bl	8011d2c <tcp_output>
  while (pcb != NULL) {
 800dba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	f47f ad5c 	bne.w	800d666 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800dbb2:	4b0b      	ldr	r3, [pc, #44]	; (800dbe0 <tcp_slowtmr+0x5a8>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800dbb8:	e067      	b.n	800dc8a <tcp_slowtmr+0x652>
 800dbba:	bf00      	nop
 800dbbc:	20010d5c 	.word	0x20010d5c
 800dbc0:	10624dd3 	.word	0x10624dd3
 800dbc4:	000124f8 	.word	0x000124f8
 800dbc8:	20010d68 	.word	0x20010d68
 800dbcc:	0801a908 	.word	0x0801a908
 800dbd0:	0801ad40 	.word	0x0801ad40
 800dbd4:	0801a94c 	.word	0x0801a94c
 800dbd8:	0801ad6c 	.word	0x0801ad6c
 800dbdc:	20010d70 	.word	0x20010d70
 800dbe0:	20010d6c 	.word	0x20010d6c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800dbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe6:	7d1b      	ldrb	r3, [r3, #20]
 800dbe8:	2b0a      	cmp	r3, #10
 800dbea:	d006      	beq.n	800dbfa <tcp_slowtmr+0x5c2>
 800dbec:	4b2b      	ldr	r3, [pc, #172]	; (800dc9c <tcp_slowtmr+0x664>)
 800dbee:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800dbf2:	492b      	ldr	r1, [pc, #172]	; (800dca0 <tcp_slowtmr+0x668>)
 800dbf4:	482b      	ldr	r0, [pc, #172]	; (800dca4 <tcp_slowtmr+0x66c>)
 800dbf6:	f00a fa9b 	bl	8018130 <iprintf>
    pcb_remove = 0;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800dc00:	4b29      	ldr	r3, [pc, #164]	; (800dca8 <tcp_slowtmr+0x670>)
 800dc02:	681a      	ldr	r2, [r3, #0]
 800dc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc06:	6a1b      	ldr	r3, [r3, #32]
 800dc08:	1ad3      	subs	r3, r2, r3
 800dc0a:	2bf0      	cmp	r3, #240	; 0xf0
 800dc0c:	d904      	bls.n	800dc18 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800dc0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc12:	3301      	adds	r3, #1
 800dc14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800dc18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d02f      	beq.n	800dc80 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800dc20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc22:	f000 fc17 	bl	800e454 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800dc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d010      	beq.n	800dc4e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800dc2c:	4b1f      	ldr	r3, [pc, #124]	; (800dcac <tcp_slowtmr+0x674>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc32:	429a      	cmp	r2, r3
 800dc34:	d106      	bne.n	800dc44 <tcp_slowtmr+0x60c>
 800dc36:	4b19      	ldr	r3, [pc, #100]	; (800dc9c <tcp_slowtmr+0x664>)
 800dc38:	f240 52af 	movw	r2, #1455	; 0x5af
 800dc3c:	491c      	ldr	r1, [pc, #112]	; (800dcb0 <tcp_slowtmr+0x678>)
 800dc3e:	4819      	ldr	r0, [pc, #100]	; (800dca4 <tcp_slowtmr+0x66c>)
 800dc40:	f00a fa76 	bl	8018130 <iprintf>
        prev->next = pcb->next;
 800dc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc46:	68da      	ldr	r2, [r3, #12]
 800dc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc4a:	60da      	str	r2, [r3, #12]
 800dc4c:	e00f      	b.n	800dc6e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800dc4e:	4b17      	ldr	r3, [pc, #92]	; (800dcac <tcp_slowtmr+0x674>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d006      	beq.n	800dc66 <tcp_slowtmr+0x62e>
 800dc58:	4b10      	ldr	r3, [pc, #64]	; (800dc9c <tcp_slowtmr+0x664>)
 800dc5a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800dc5e:	4915      	ldr	r1, [pc, #84]	; (800dcb4 <tcp_slowtmr+0x67c>)
 800dc60:	4810      	ldr	r0, [pc, #64]	; (800dca4 <tcp_slowtmr+0x66c>)
 800dc62:	f00a fa65 	bl	8018130 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800dc66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc68:	68db      	ldr	r3, [r3, #12]
 800dc6a:	4a10      	ldr	r2, [pc, #64]	; (800dcac <tcp_slowtmr+0x674>)
 800dc6c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800dc6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc70:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800dc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc74:	68db      	ldr	r3, [r3, #12]
 800dc76:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800dc78:	69f8      	ldr	r0, [r7, #28]
 800dc7a:	f7fe ff29 	bl	800cad0 <tcp_free>
 800dc7e:	e004      	b.n	800dc8a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800dc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc82:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800dc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc86:	68db      	ldr	r3, [r3, #12]
 800dc88:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800dc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d1a9      	bne.n	800dbe4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800dc90:	bf00      	nop
 800dc92:	bf00      	nop
 800dc94:	3730      	adds	r7, #48	; 0x30
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bdb0      	pop	{r4, r5, r7, pc}
 800dc9a:	bf00      	nop
 800dc9c:	0801a908 	.word	0x0801a908
 800dca0:	0801ad98 	.word	0x0801ad98
 800dca4:	0801a94c 	.word	0x0801a94c
 800dca8:	20010d5c 	.word	0x20010d5c
 800dcac:	20010d6c 	.word	0x20010d6c
 800dcb0:	0801adc8 	.word	0x0801adc8
 800dcb4:	0801adf0 	.word	0x0801adf0

0800dcb8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b082      	sub	sp, #8
 800dcbc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800dcbe:	4b2d      	ldr	r3, [pc, #180]	; (800dd74 <tcp_fasttmr+0xbc>)
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	b2da      	uxtb	r2, r3
 800dcc6:	4b2b      	ldr	r3, [pc, #172]	; (800dd74 <tcp_fasttmr+0xbc>)
 800dcc8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800dcca:	4b2b      	ldr	r3, [pc, #172]	; (800dd78 <tcp_fasttmr+0xc0>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dcd0:	e048      	b.n	800dd64 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	7f9a      	ldrb	r2, [r3, #30]
 800dcd6:	4b27      	ldr	r3, [pc, #156]	; (800dd74 <tcp_fasttmr+0xbc>)
 800dcd8:	781b      	ldrb	r3, [r3, #0]
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d03f      	beq.n	800dd5e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800dcde:	4b25      	ldr	r3, [pc, #148]	; (800dd74 <tcp_fasttmr+0xbc>)
 800dce0:	781a      	ldrb	r2, [r3, #0]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	8b5b      	ldrh	r3, [r3, #26]
 800dcea:	f003 0301 	and.w	r3, r3, #1
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d010      	beq.n	800dd14 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	8b5b      	ldrh	r3, [r3, #26]
 800dcf6:	f043 0302 	orr.w	r3, r3, #2
 800dcfa:	b29a      	uxth	r2, r3
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f004 f813 	bl	8011d2c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	8b5b      	ldrh	r3, [r3, #26]
 800dd0a:	f023 0303 	bic.w	r3, r3, #3
 800dd0e:	b29a      	uxth	r2, r3
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	8b5b      	ldrh	r3, [r3, #26]
 800dd18:	f003 0308 	and.w	r3, r3, #8
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d009      	beq.n	800dd34 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	8b5b      	ldrh	r3, [r3, #26]
 800dd24:	f023 0308 	bic.w	r3, r3, #8
 800dd28:	b29a      	uxth	r2, r3
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f7ff f862 	bl	800cdf8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	68db      	ldr	r3, [r3, #12]
 800dd38:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d00a      	beq.n	800dd58 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800dd42:	4b0e      	ldr	r3, [pc, #56]	; (800dd7c <tcp_fasttmr+0xc4>)
 800dd44:	2200      	movs	r2, #0
 800dd46:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f000 f819 	bl	800dd80 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800dd4e:	4b0b      	ldr	r3, [pc, #44]	; (800dd7c <tcp_fasttmr+0xc4>)
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d000      	beq.n	800dd58 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800dd56:	e7b8      	b.n	800dcca <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	607b      	str	r3, [r7, #4]
 800dd5c:	e002      	b.n	800dd64 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	68db      	ldr	r3, [r3, #12]
 800dd62:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d1b3      	bne.n	800dcd2 <tcp_fasttmr+0x1a>
    }
  }
}
 800dd6a:	bf00      	nop
 800dd6c:	bf00      	nop
 800dd6e:	3708      	adds	r7, #8
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}
 800dd74:	20010d72 	.word	0x20010d72
 800dd78:	20010d68 	.word	0x20010d68
 800dd7c:	20010d70 	.word	0x20010d70

0800dd80 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800dd80:	b590      	push	{r4, r7, lr}
 800dd82:	b085      	sub	sp, #20
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d109      	bne.n	800dda2 <tcp_process_refused_data+0x22>
 800dd8e:	4b37      	ldr	r3, [pc, #220]	; (800de6c <tcp_process_refused_data+0xec>)
 800dd90:	f240 6209 	movw	r2, #1545	; 0x609
 800dd94:	4936      	ldr	r1, [pc, #216]	; (800de70 <tcp_process_refused_data+0xf0>)
 800dd96:	4837      	ldr	r0, [pc, #220]	; (800de74 <tcp_process_refused_data+0xf4>)
 800dd98:	f00a f9ca 	bl	8018130 <iprintf>
 800dd9c:	f06f 030f 	mvn.w	r3, #15
 800dda0:	e060      	b.n	800de64 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dda6:	7b5b      	ldrb	r3, [r3, #13]
 800dda8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ddae:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d00b      	beq.n	800ddd8 <tcp_process_refused_data+0x58>
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6918      	ldr	r0, [r3, #16]
 800ddca:	2300      	movs	r3, #0
 800ddcc:	68ba      	ldr	r2, [r7, #8]
 800ddce:	6879      	ldr	r1, [r7, #4]
 800ddd0:	47a0      	blx	r4
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	73fb      	strb	r3, [r7, #15]
 800ddd6:	e007      	b.n	800dde8 <tcp_process_refused_data+0x68>
 800ddd8:	2300      	movs	r3, #0
 800ddda:	68ba      	ldr	r2, [r7, #8]
 800dddc:	6879      	ldr	r1, [r7, #4]
 800ddde:	2000      	movs	r0, #0
 800dde0:	f000 f8c2 	bl	800df68 <tcp_recv_null>
 800dde4:	4603      	mov	r3, r0
 800dde6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800dde8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d12a      	bne.n	800de46 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ddf0:	7bbb      	ldrb	r3, [r7, #14]
 800ddf2:	f003 0320 	and.w	r3, r3, #32
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d033      	beq.n	800de62 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddfe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800de02:	d005      	beq.n	800de10 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de08:	3301      	adds	r3, #1
 800de0a:	b29a      	uxth	r2, r3
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de16:	2b00      	cmp	r3, #0
 800de18:	d00b      	beq.n	800de32 <tcp_process_refused_data+0xb2>
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6918      	ldr	r0, [r3, #16]
 800de24:	2300      	movs	r3, #0
 800de26:	2200      	movs	r2, #0
 800de28:	6879      	ldr	r1, [r7, #4]
 800de2a:	47a0      	blx	r4
 800de2c:	4603      	mov	r3, r0
 800de2e:	73fb      	strb	r3, [r7, #15]
 800de30:	e001      	b.n	800de36 <tcp_process_refused_data+0xb6>
 800de32:	2300      	movs	r3, #0
 800de34:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800de36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de3a:	f113 0f0d 	cmn.w	r3, #13
 800de3e:	d110      	bne.n	800de62 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800de40:	f06f 030c 	mvn.w	r3, #12
 800de44:	e00e      	b.n	800de64 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800de46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de4a:	f113 0f0d 	cmn.w	r3, #13
 800de4e:	d102      	bne.n	800de56 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800de50:	f06f 030c 	mvn.w	r3, #12
 800de54:	e006      	b.n	800de64 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	68ba      	ldr	r2, [r7, #8]
 800de5a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800de5c:	f06f 0304 	mvn.w	r3, #4
 800de60:	e000      	b.n	800de64 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800de62:	2300      	movs	r3, #0
}
 800de64:	4618      	mov	r0, r3
 800de66:	3714      	adds	r7, #20
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd90      	pop	{r4, r7, pc}
 800de6c:	0801a908 	.word	0x0801a908
 800de70:	0801ae18 	.word	0x0801ae18
 800de74:	0801a94c 	.word	0x0801a94c

0800de78 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b084      	sub	sp, #16
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800de80:	e007      	b.n	800de92 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f000 f80a 	bl	800dea2 <tcp_seg_free>
    seg = next;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d1f4      	bne.n	800de82 <tcp_segs_free+0xa>
  }
}
 800de98:	bf00      	nop
 800de9a:	bf00      	nop
 800de9c:	3710      	adds	r7, #16
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}

0800dea2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800dea2:	b580      	push	{r7, lr}
 800dea4:	b082      	sub	sp, #8
 800dea6:	af00      	add	r7, sp, #0
 800dea8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d00c      	beq.n	800deca <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d004      	beq.n	800dec2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	685b      	ldr	r3, [r3, #4]
 800debc:	4618      	mov	r0, r3
 800debe:	f7fe fb4b 	bl	800c558 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800dec2:	6879      	ldr	r1, [r7, #4]
 800dec4:	2003      	movs	r0, #3
 800dec6:	f7fd fc97 	bl	800b7f8 <memp_free>
  }
}
 800deca:	bf00      	nop
 800decc:	3708      	adds	r7, #8
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
	...

0800ded4 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b082      	sub	sp, #8
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
 800dedc:	460b      	mov	r3, r1
 800dede:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d107      	bne.n	800def6 <tcp_setprio+0x22>
 800dee6:	4b07      	ldr	r3, [pc, #28]	; (800df04 <tcp_setprio+0x30>)
 800dee8:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800deec:	4906      	ldr	r1, [pc, #24]	; (800df08 <tcp_setprio+0x34>)
 800deee:	4807      	ldr	r0, [pc, #28]	; (800df0c <tcp_setprio+0x38>)
 800def0:	f00a f91e 	bl	8018130 <iprintf>
 800def4:	e002      	b.n	800defc <tcp_setprio+0x28>

  pcb->prio = prio;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	78fa      	ldrb	r2, [r7, #3]
 800defa:	755a      	strb	r2, [r3, #21]
}
 800defc:	3708      	adds	r7, #8
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}
 800df02:	bf00      	nop
 800df04:	0801a908 	.word	0x0801a908
 800df08:	0801ae40 	.word	0x0801ae40
 800df0c:	0801a94c 	.word	0x0801a94c

0800df10 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b084      	sub	sp, #16
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d106      	bne.n	800df2c <tcp_seg_copy+0x1c>
 800df1e:	4b0f      	ldr	r3, [pc, #60]	; (800df5c <tcp_seg_copy+0x4c>)
 800df20:	f240 6282 	movw	r2, #1666	; 0x682
 800df24:	490e      	ldr	r1, [pc, #56]	; (800df60 <tcp_seg_copy+0x50>)
 800df26:	480f      	ldr	r0, [pc, #60]	; (800df64 <tcp_seg_copy+0x54>)
 800df28:	f00a f902 	bl	8018130 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800df2c:	2003      	movs	r0, #3
 800df2e:	f7fd fbed 	bl	800b70c <memp_malloc>
 800df32:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d101      	bne.n	800df3e <tcp_seg_copy+0x2e>
    return NULL;
 800df3a:	2300      	movs	r3, #0
 800df3c:	e00a      	b.n	800df54 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800df3e:	2210      	movs	r2, #16
 800df40:	6879      	ldr	r1, [r7, #4]
 800df42:	68f8      	ldr	r0, [r7, #12]
 800df44:	f00a fa42 	bl	80183cc <memcpy>
  pbuf_ref(cseg->p);
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7fe fba9 	bl	800c6a4 <pbuf_ref>
  return cseg;
 800df52:	68fb      	ldr	r3, [r7, #12]
}
 800df54:	4618      	mov	r0, r3
 800df56:	3710      	adds	r7, #16
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}
 800df5c:	0801a908 	.word	0x0801a908
 800df60:	0801ae5c 	.word	0x0801ae5c
 800df64:	0801a94c 	.word	0x0801a94c

0800df68 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b084      	sub	sp, #16
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	60f8      	str	r0, [r7, #12]
 800df70:	60b9      	str	r1, [r7, #8]
 800df72:	607a      	str	r2, [r7, #4]
 800df74:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d109      	bne.n	800df90 <tcp_recv_null+0x28>
 800df7c:	4b12      	ldr	r3, [pc, #72]	; (800dfc8 <tcp_recv_null+0x60>)
 800df7e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800df82:	4912      	ldr	r1, [pc, #72]	; (800dfcc <tcp_recv_null+0x64>)
 800df84:	4812      	ldr	r0, [pc, #72]	; (800dfd0 <tcp_recv_null+0x68>)
 800df86:	f00a f8d3 	bl	8018130 <iprintf>
 800df8a:	f06f 030f 	mvn.w	r3, #15
 800df8e:	e016      	b.n	800dfbe <tcp_recv_null+0x56>

  if (p != NULL) {
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d009      	beq.n	800dfaa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	891b      	ldrh	r3, [r3, #8]
 800df9a:	4619      	mov	r1, r3
 800df9c:	68b8      	ldr	r0, [r7, #8]
 800df9e:	f7ff fab5 	bl	800d50c <tcp_recved>
    pbuf_free(p);
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f7fe fad8 	bl	800c558 <pbuf_free>
 800dfa8:	e008      	b.n	800dfbc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800dfaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d104      	bne.n	800dfbc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800dfb2:	68b8      	ldr	r0, [r7, #8]
 800dfb4:	f7fe ff8a 	bl	800cecc <tcp_close>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	e000      	b.n	800dfbe <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800dfbc:	2300      	movs	r3, #0
}
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	3710      	adds	r7, #16
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}
 800dfc6:	bf00      	nop
 800dfc8:	0801a908 	.word	0x0801a908
 800dfcc:	0801ae78 	.word	0x0801ae78
 800dfd0:	0801a94c 	.word	0x0801a94c

0800dfd4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b086      	sub	sp, #24
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	4603      	mov	r3, r0
 800dfdc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800dfde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	db01      	blt.n	800dfea <tcp_kill_prio+0x16>
 800dfe6:	79fb      	ldrb	r3, [r7, #7]
 800dfe8:	e000      	b.n	800dfec <tcp_kill_prio+0x18>
 800dfea:	237f      	movs	r3, #127	; 0x7f
 800dfec:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800dfee:	7afb      	ldrb	r3, [r7, #11]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d034      	beq.n	800e05e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800dff4:	7afb      	ldrb	r3, [r7, #11]
 800dff6:	3b01      	subs	r3, #1
 800dff8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800dffa:	2300      	movs	r3, #0
 800dffc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dffe:	2300      	movs	r3, #0
 800e000:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e002:	4b19      	ldr	r3, [pc, #100]	; (800e068 <tcp_kill_prio+0x94>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	617b      	str	r3, [r7, #20]
 800e008:	e01f      	b.n	800e04a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	7d5b      	ldrb	r3, [r3, #21]
 800e00e:	7afa      	ldrb	r2, [r7, #11]
 800e010:	429a      	cmp	r2, r3
 800e012:	d80c      	bhi.n	800e02e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e018:	7afa      	ldrb	r2, [r7, #11]
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d112      	bne.n	800e044 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e01e:	4b13      	ldr	r3, [pc, #76]	; (800e06c <tcp_kill_prio+0x98>)
 800e020:	681a      	ldr	r2, [r3, #0]
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	6a1b      	ldr	r3, [r3, #32]
 800e026:	1ad3      	subs	r3, r2, r3
 800e028:	68fa      	ldr	r2, [r7, #12]
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d80a      	bhi.n	800e044 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e02e:	4b0f      	ldr	r3, [pc, #60]	; (800e06c <tcp_kill_prio+0x98>)
 800e030:	681a      	ldr	r2, [r3, #0]
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	6a1b      	ldr	r3, [r3, #32]
 800e036:	1ad3      	subs	r3, r2, r3
 800e038:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	7d5b      	ldrb	r3, [r3, #21]
 800e042:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e044:	697b      	ldr	r3, [r7, #20]
 800e046:	68db      	ldr	r3, [r3, #12]
 800e048:	617b      	str	r3, [r7, #20]
 800e04a:	697b      	ldr	r3, [r7, #20]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d1dc      	bne.n	800e00a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d004      	beq.n	800e060 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e056:	6938      	ldr	r0, [r7, #16]
 800e058:	f7ff f87e 	bl	800d158 <tcp_abort>
 800e05c:	e000      	b.n	800e060 <tcp_kill_prio+0x8c>
    return;
 800e05e:	bf00      	nop
  }
}
 800e060:	3718      	adds	r7, #24
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}
 800e066:	bf00      	nop
 800e068:	20010d68 	.word	0x20010d68
 800e06c:	20010d5c 	.word	0x20010d5c

0800e070 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b086      	sub	sp, #24
 800e074:	af00      	add	r7, sp, #0
 800e076:	4603      	mov	r3, r0
 800e078:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e07a:	79fb      	ldrb	r3, [r7, #7]
 800e07c:	2b08      	cmp	r3, #8
 800e07e:	d009      	beq.n	800e094 <tcp_kill_state+0x24>
 800e080:	79fb      	ldrb	r3, [r7, #7]
 800e082:	2b09      	cmp	r3, #9
 800e084:	d006      	beq.n	800e094 <tcp_kill_state+0x24>
 800e086:	4b1a      	ldr	r3, [pc, #104]	; (800e0f0 <tcp_kill_state+0x80>)
 800e088:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e08c:	4919      	ldr	r1, [pc, #100]	; (800e0f4 <tcp_kill_state+0x84>)
 800e08e:	481a      	ldr	r0, [pc, #104]	; (800e0f8 <tcp_kill_state+0x88>)
 800e090:	f00a f84e 	bl	8018130 <iprintf>

  inactivity = 0;
 800e094:	2300      	movs	r3, #0
 800e096:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e098:	2300      	movs	r3, #0
 800e09a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e09c:	4b17      	ldr	r3, [pc, #92]	; (800e0fc <tcp_kill_state+0x8c>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	617b      	str	r3, [r7, #20]
 800e0a2:	e017      	b.n	800e0d4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	7d1b      	ldrb	r3, [r3, #20]
 800e0a8:	79fa      	ldrb	r2, [r7, #7]
 800e0aa:	429a      	cmp	r2, r3
 800e0ac:	d10f      	bne.n	800e0ce <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e0ae:	4b14      	ldr	r3, [pc, #80]	; (800e100 <tcp_kill_state+0x90>)
 800e0b0:	681a      	ldr	r2, [r3, #0]
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	6a1b      	ldr	r3, [r3, #32]
 800e0b6:	1ad3      	subs	r3, r2, r3
 800e0b8:	68fa      	ldr	r2, [r7, #12]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d807      	bhi.n	800e0ce <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e0be:	4b10      	ldr	r3, [pc, #64]	; (800e100 <tcp_kill_state+0x90>)
 800e0c0:	681a      	ldr	r2, [r3, #0]
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	6a1b      	ldr	r3, [r3, #32]
 800e0c6:	1ad3      	subs	r3, r2, r3
 800e0c8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0ce:	697b      	ldr	r3, [r7, #20]
 800e0d0:	68db      	ldr	r3, [r3, #12]
 800e0d2:	617b      	str	r3, [r7, #20]
 800e0d4:	697b      	ldr	r3, [r7, #20]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d1e4      	bne.n	800e0a4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d003      	beq.n	800e0e8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e0e0:	2100      	movs	r1, #0
 800e0e2:	6938      	ldr	r0, [r7, #16]
 800e0e4:	f7fe ff7a 	bl	800cfdc <tcp_abandon>
  }
}
 800e0e8:	bf00      	nop
 800e0ea:	3718      	adds	r7, #24
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}
 800e0f0:	0801a908 	.word	0x0801a908
 800e0f4:	0801ae94 	.word	0x0801ae94
 800e0f8:	0801a94c 	.word	0x0801a94c
 800e0fc:	20010d68 	.word	0x20010d68
 800e100:	20010d5c 	.word	0x20010d5c

0800e104 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b084      	sub	sp, #16
 800e108:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e10a:	2300      	movs	r3, #0
 800e10c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e10e:	2300      	movs	r3, #0
 800e110:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e112:	4b12      	ldr	r3, [pc, #72]	; (800e15c <tcp_kill_timewait+0x58>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	60fb      	str	r3, [r7, #12]
 800e118:	e012      	b.n	800e140 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e11a:	4b11      	ldr	r3, [pc, #68]	; (800e160 <tcp_kill_timewait+0x5c>)
 800e11c:	681a      	ldr	r2, [r3, #0]
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	6a1b      	ldr	r3, [r3, #32]
 800e122:	1ad3      	subs	r3, r2, r3
 800e124:	687a      	ldr	r2, [r7, #4]
 800e126:	429a      	cmp	r2, r3
 800e128:	d807      	bhi.n	800e13a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e12a:	4b0d      	ldr	r3, [pc, #52]	; (800e160 <tcp_kill_timewait+0x5c>)
 800e12c:	681a      	ldr	r2, [r3, #0]
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	6a1b      	ldr	r3, [r3, #32]
 800e132:	1ad3      	subs	r3, r2, r3
 800e134:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	68db      	ldr	r3, [r3, #12]
 800e13e:	60fb      	str	r3, [r7, #12]
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d1e9      	bne.n	800e11a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d002      	beq.n	800e152 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e14c:	68b8      	ldr	r0, [r7, #8]
 800e14e:	f7ff f803 	bl	800d158 <tcp_abort>
  }
}
 800e152:	bf00      	nop
 800e154:	3710      	adds	r7, #16
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}
 800e15a:	bf00      	nop
 800e15c:	20010d6c 	.word	0x20010d6c
 800e160:	20010d5c 	.word	0x20010d5c

0800e164 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b082      	sub	sp, #8
 800e168:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e16a:	4b10      	ldr	r3, [pc, #64]	; (800e1ac <tcp_handle_closepend+0x48>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e170:	e014      	b.n	800e19c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	68db      	ldr	r3, [r3, #12]
 800e176:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	8b5b      	ldrh	r3, [r3, #26]
 800e17c:	f003 0308 	and.w	r3, r3, #8
 800e180:	2b00      	cmp	r3, #0
 800e182:	d009      	beq.n	800e198 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	8b5b      	ldrh	r3, [r3, #26]
 800e188:	f023 0308 	bic.w	r3, r3, #8
 800e18c:	b29a      	uxth	r2, r3
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f7fe fe30 	bl	800cdf8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d1e7      	bne.n	800e172 <tcp_handle_closepend+0xe>
  }
}
 800e1a2:	bf00      	nop
 800e1a4:	bf00      	nop
 800e1a6:	3708      	adds	r7, #8
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}
 800e1ac:	20010d68 	.word	0x20010d68

0800e1b0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b084      	sub	sp, #16
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e1ba:	2001      	movs	r0, #1
 800e1bc:	f7fd faa6 	bl	800b70c <memp_malloc>
 800e1c0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d126      	bne.n	800e216 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e1c8:	f7ff ffcc 	bl	800e164 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e1cc:	f7ff ff9a 	bl	800e104 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e1d0:	2001      	movs	r0, #1
 800e1d2:	f7fd fa9b 	bl	800b70c <memp_malloc>
 800e1d6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d11b      	bne.n	800e216 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e1de:	2009      	movs	r0, #9
 800e1e0:	f7ff ff46 	bl	800e070 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e1e4:	2001      	movs	r0, #1
 800e1e6:	f7fd fa91 	bl	800b70c <memp_malloc>
 800e1ea:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d111      	bne.n	800e216 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e1f2:	2008      	movs	r0, #8
 800e1f4:	f7ff ff3c 	bl	800e070 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e1f8:	2001      	movs	r0, #1
 800e1fa:	f7fd fa87 	bl	800b70c <memp_malloc>
 800e1fe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d107      	bne.n	800e216 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e206:	79fb      	ldrb	r3, [r7, #7]
 800e208:	4618      	mov	r0, r3
 800e20a:	f7ff fee3 	bl	800dfd4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e20e:	2001      	movs	r0, #1
 800e210:	f7fd fa7c 	bl	800b70c <memp_malloc>
 800e214:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d03f      	beq.n	800e29c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e21c:	229c      	movs	r2, #156	; 0x9c
 800e21e:	2100      	movs	r1, #0
 800e220:	68f8      	ldr	r0, [r7, #12]
 800e222:	f009 ffea 	bl	80181fa <memset>
    pcb->prio = prio;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	79fa      	ldrb	r2, [r7, #7]
 800e22a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e232:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e23c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	22ff      	movs	r2, #255	; 0xff
 800e24a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e252:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	2206      	movs	r2, #6
 800e258:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	2206      	movs	r2, #6
 800e260:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e268:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	2201      	movs	r2, #1
 800e26e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e272:	4b0d      	ldr	r3, [pc, #52]	; (800e2a8 <tcp_alloc+0xf8>)
 800e274:	681a      	ldr	r2, [r3, #0]
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e27a:	4b0c      	ldr	r3, [pc, #48]	; (800e2ac <tcp_alloc+0xfc>)
 800e27c:	781a      	ldrb	r2, [r3, #0]
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e288:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	4a08      	ldr	r2, [pc, #32]	; (800e2b0 <tcp_alloc+0x100>)
 800e290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	4a07      	ldr	r2, [pc, #28]	; (800e2b4 <tcp_alloc+0x104>)
 800e298:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e29c:	68fb      	ldr	r3, [r7, #12]
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3710      	adds	r7, #16
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}
 800e2a6:	bf00      	nop
 800e2a8:	20010d5c 	.word	0x20010d5c
 800e2ac:	20010d72 	.word	0x20010d72
 800e2b0:	0800df69 	.word	0x0800df69
 800e2b4:	006ddd00 	.word	0x006ddd00

0800e2b8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b084      	sub	sp, #16
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	4603      	mov	r3, r0
 800e2c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e2c2:	2040      	movs	r0, #64	; 0x40
 800e2c4:	f7ff ff74 	bl	800e1b0 <tcp_alloc>
 800e2c8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3710      	adds	r7, #16
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}

0800e2d4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b083      	sub	sp, #12
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d002      	beq.n	800e2ea <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	683a      	ldr	r2, [r7, #0]
 800e2e8:	611a      	str	r2, [r3, #16]
  }
}
 800e2ea:	bf00      	nop
 800e2ec:	370c      	adds	r7, #12
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f4:	4770      	bx	lr
	...

0800e2f8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b082      	sub	sp, #8
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d00e      	beq.n	800e326 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	7d1b      	ldrb	r3, [r3, #20]
 800e30c:	2b01      	cmp	r3, #1
 800e30e:	d106      	bne.n	800e31e <tcp_recv+0x26>
 800e310:	4b07      	ldr	r3, [pc, #28]	; (800e330 <tcp_recv+0x38>)
 800e312:	f240 72df 	movw	r2, #2015	; 0x7df
 800e316:	4907      	ldr	r1, [pc, #28]	; (800e334 <tcp_recv+0x3c>)
 800e318:	4807      	ldr	r0, [pc, #28]	; (800e338 <tcp_recv+0x40>)
 800e31a:	f009 ff09 	bl	8018130 <iprintf>
    pcb->recv = recv;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	683a      	ldr	r2, [r7, #0]
 800e322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800e326:	bf00      	nop
 800e328:	3708      	adds	r7, #8
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}
 800e32e:	bf00      	nop
 800e330:	0801a908 	.word	0x0801a908
 800e334:	0801aea4 	.word	0x0801aea4
 800e338:	0801a94c 	.word	0x0801a94c

0800e33c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b082      	sub	sp, #8
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d00e      	beq.n	800e36a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	7d1b      	ldrb	r3, [r3, #20]
 800e350:	2b01      	cmp	r3, #1
 800e352:	d106      	bne.n	800e362 <tcp_sent+0x26>
 800e354:	4b07      	ldr	r3, [pc, #28]	; (800e374 <tcp_sent+0x38>)
 800e356:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800e35a:	4907      	ldr	r1, [pc, #28]	; (800e378 <tcp_sent+0x3c>)
 800e35c:	4807      	ldr	r0, [pc, #28]	; (800e37c <tcp_sent+0x40>)
 800e35e:	f009 fee7 	bl	8018130 <iprintf>
    pcb->sent = sent;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	683a      	ldr	r2, [r7, #0]
 800e366:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800e36a:	bf00      	nop
 800e36c:	3708      	adds	r7, #8
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop
 800e374:	0801a908 	.word	0x0801a908
 800e378:	0801aecc 	.word	0x0801aecc
 800e37c:	0801a94c 	.word	0x0801a94c

0800e380 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b082      	sub	sp, #8
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d00e      	beq.n	800e3ae <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	7d1b      	ldrb	r3, [r3, #20]
 800e394:	2b01      	cmp	r3, #1
 800e396:	d106      	bne.n	800e3a6 <tcp_err+0x26>
 800e398:	4b07      	ldr	r3, [pc, #28]	; (800e3b8 <tcp_err+0x38>)
 800e39a:	f640 020d 	movw	r2, #2061	; 0x80d
 800e39e:	4907      	ldr	r1, [pc, #28]	; (800e3bc <tcp_err+0x3c>)
 800e3a0:	4807      	ldr	r0, [pc, #28]	; (800e3c0 <tcp_err+0x40>)
 800e3a2:	f009 fec5 	bl	8018130 <iprintf>
    pcb->errf = err;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	683a      	ldr	r2, [r7, #0]
 800e3aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800e3ae:	bf00      	nop
 800e3b0:	3708      	adds	r7, #8
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}
 800e3b6:	bf00      	nop
 800e3b8:	0801a908 	.word	0x0801a908
 800e3bc:	0801aef4 	.word	0x0801aef4
 800e3c0:	0801a94c 	.word	0x0801a94c

0800e3c4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b085      	sub	sp, #20
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
 800e3cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d008      	beq.n	800e3e6 <tcp_accept+0x22>
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	7d1b      	ldrb	r3, [r3, #20]
 800e3d8:	2b01      	cmp	r3, #1
 800e3da:	d104      	bne.n	800e3e6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	683a      	ldr	r2, [r7, #0]
 800e3e4:	619a      	str	r2, [r3, #24]
  }
}
 800e3e6:	bf00      	nop
 800e3e8:	3714      	adds	r7, #20
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f0:	4770      	bx	lr
	...

0800e3f4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b084      	sub	sp, #16
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	60f8      	str	r0, [r7, #12]
 800e3fc:	60b9      	str	r1, [r7, #8]
 800e3fe:	4613      	mov	r3, r2
 800e400:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d107      	bne.n	800e418 <tcp_poll+0x24>
 800e408:	4b0e      	ldr	r3, [pc, #56]	; (800e444 <tcp_poll+0x50>)
 800e40a:	f640 023d 	movw	r2, #2109	; 0x83d
 800e40e:	490e      	ldr	r1, [pc, #56]	; (800e448 <tcp_poll+0x54>)
 800e410:	480e      	ldr	r0, [pc, #56]	; (800e44c <tcp_poll+0x58>)
 800e412:	f009 fe8d 	bl	8018130 <iprintf>
 800e416:	e011      	b.n	800e43c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	7d1b      	ldrb	r3, [r3, #20]
 800e41c:	2b01      	cmp	r3, #1
 800e41e:	d106      	bne.n	800e42e <tcp_poll+0x3a>
 800e420:	4b08      	ldr	r3, [pc, #32]	; (800e444 <tcp_poll+0x50>)
 800e422:	f640 023e 	movw	r2, #2110	; 0x83e
 800e426:	490a      	ldr	r1, [pc, #40]	; (800e450 <tcp_poll+0x5c>)
 800e428:	4808      	ldr	r0, [pc, #32]	; (800e44c <tcp_poll+0x58>)
 800e42a:	f009 fe81 	bl	8018130 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	68ba      	ldr	r2, [r7, #8]
 800e432:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	79fa      	ldrb	r2, [r7, #7]
 800e43a:	775a      	strb	r2, [r3, #29]
}
 800e43c:	3710      	adds	r7, #16
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}
 800e442:	bf00      	nop
 800e444:	0801a908 	.word	0x0801a908
 800e448:	0801af1c 	.word	0x0801af1c
 800e44c:	0801a94c 	.word	0x0801a94c
 800e450:	0801af34 	.word	0x0801af34

0800e454 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b082      	sub	sp, #8
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d107      	bne.n	800e472 <tcp_pcb_purge+0x1e>
 800e462:	4b21      	ldr	r3, [pc, #132]	; (800e4e8 <tcp_pcb_purge+0x94>)
 800e464:	f640 0251 	movw	r2, #2129	; 0x851
 800e468:	4920      	ldr	r1, [pc, #128]	; (800e4ec <tcp_pcb_purge+0x98>)
 800e46a:	4821      	ldr	r0, [pc, #132]	; (800e4f0 <tcp_pcb_purge+0x9c>)
 800e46c:	f009 fe60 	bl	8018130 <iprintf>
 800e470:	e037      	b.n	800e4e2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	7d1b      	ldrb	r3, [r3, #20]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d033      	beq.n	800e4e2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e47e:	2b0a      	cmp	r3, #10
 800e480:	d02f      	beq.n	800e4e2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e486:	2b01      	cmp	r3, #1
 800e488:	d02b      	beq.n	800e4e2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d007      	beq.n	800e4a2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e496:	4618      	mov	r0, r3
 800e498:	f7fe f85e 	bl	800c558 <pbuf_free>
      pcb->refused_data = NULL;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2200      	movs	r2, #0
 800e4a0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d002      	beq.n	800e4b0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f000 f986 	bl	800e7bc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e4b6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f7ff fcdb 	bl	800de78 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7ff fcd6 	bl	800de78 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	66da      	str	r2, [r3, #108]	; 0x6c
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2200      	movs	r2, #0
 800e4de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e4e2:	3708      	adds	r7, #8
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}
 800e4e8:	0801a908 	.word	0x0801a908
 800e4ec:	0801af54 	.word	0x0801af54
 800e4f0:	0801a94c 	.word	0x0801a94c

0800e4f4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b084      	sub	sp, #16
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
 800e4fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d106      	bne.n	800e512 <tcp_pcb_remove+0x1e>
 800e504:	4b3e      	ldr	r3, [pc, #248]	; (800e600 <tcp_pcb_remove+0x10c>)
 800e506:	f640 0283 	movw	r2, #2179	; 0x883
 800e50a:	493e      	ldr	r1, [pc, #248]	; (800e604 <tcp_pcb_remove+0x110>)
 800e50c:	483e      	ldr	r0, [pc, #248]	; (800e608 <tcp_pcb_remove+0x114>)
 800e50e:	f009 fe0f 	bl	8018130 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d106      	bne.n	800e526 <tcp_pcb_remove+0x32>
 800e518:	4b39      	ldr	r3, [pc, #228]	; (800e600 <tcp_pcb_remove+0x10c>)
 800e51a:	f640 0284 	movw	r2, #2180	; 0x884
 800e51e:	493b      	ldr	r1, [pc, #236]	; (800e60c <tcp_pcb_remove+0x118>)
 800e520:	4839      	ldr	r0, [pc, #228]	; (800e608 <tcp_pcb_remove+0x114>)
 800e522:	f009 fe05 	bl	8018130 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	683a      	ldr	r2, [r7, #0]
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d105      	bne.n	800e53c <tcp_pcb_remove+0x48>
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	68da      	ldr	r2, [r3, #12]
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	601a      	str	r2, [r3, #0]
 800e53a:	e013      	b.n	800e564 <tcp_pcb_remove+0x70>
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	60fb      	str	r3, [r7, #12]
 800e542:	e00c      	b.n	800e55e <tcp_pcb_remove+0x6a>
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	68db      	ldr	r3, [r3, #12]
 800e548:	683a      	ldr	r2, [r7, #0]
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d104      	bne.n	800e558 <tcp_pcb_remove+0x64>
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	68da      	ldr	r2, [r3, #12]
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	60da      	str	r2, [r3, #12]
 800e556:	e005      	b.n	800e564 <tcp_pcb_remove+0x70>
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	68db      	ldr	r3, [r3, #12]
 800e55c:	60fb      	str	r3, [r7, #12]
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d1ef      	bne.n	800e544 <tcp_pcb_remove+0x50>
 800e564:	683b      	ldr	r3, [r7, #0]
 800e566:	2200      	movs	r2, #0
 800e568:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e56a:	6838      	ldr	r0, [r7, #0]
 800e56c:	f7ff ff72 	bl	800e454 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	7d1b      	ldrb	r3, [r3, #20]
 800e574:	2b0a      	cmp	r3, #10
 800e576:	d013      	beq.n	800e5a0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e57c:	2b01      	cmp	r3, #1
 800e57e:	d00f      	beq.n	800e5a0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	8b5b      	ldrh	r3, [r3, #26]
 800e584:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d009      	beq.n	800e5a0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	8b5b      	ldrh	r3, [r3, #26]
 800e590:	f043 0302 	orr.w	r3, r3, #2
 800e594:	b29a      	uxth	r2, r3
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e59a:	6838      	ldr	r0, [r7, #0]
 800e59c:	f003 fbc6 	bl	8011d2c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	7d1b      	ldrb	r3, [r3, #20]
 800e5a4:	2b01      	cmp	r3, #1
 800e5a6:	d020      	beq.n	800e5ea <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d006      	beq.n	800e5be <tcp_pcb_remove+0xca>
 800e5b0:	4b13      	ldr	r3, [pc, #76]	; (800e600 <tcp_pcb_remove+0x10c>)
 800e5b2:	f640 0293 	movw	r2, #2195	; 0x893
 800e5b6:	4916      	ldr	r1, [pc, #88]	; (800e610 <tcp_pcb_remove+0x11c>)
 800e5b8:	4813      	ldr	r0, [pc, #76]	; (800e608 <tcp_pcb_remove+0x114>)
 800e5ba:	f009 fdb9 	bl	8018130 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d006      	beq.n	800e5d4 <tcp_pcb_remove+0xe0>
 800e5c6:	4b0e      	ldr	r3, [pc, #56]	; (800e600 <tcp_pcb_remove+0x10c>)
 800e5c8:	f640 0294 	movw	r2, #2196	; 0x894
 800e5cc:	4911      	ldr	r1, [pc, #68]	; (800e614 <tcp_pcb_remove+0x120>)
 800e5ce:	480e      	ldr	r0, [pc, #56]	; (800e608 <tcp_pcb_remove+0x114>)
 800e5d0:	f009 fdae 	bl	8018130 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d006      	beq.n	800e5ea <tcp_pcb_remove+0xf6>
 800e5dc:	4b08      	ldr	r3, [pc, #32]	; (800e600 <tcp_pcb_remove+0x10c>)
 800e5de:	f640 0296 	movw	r2, #2198	; 0x896
 800e5e2:	490d      	ldr	r1, [pc, #52]	; (800e618 <tcp_pcb_remove+0x124>)
 800e5e4:	4808      	ldr	r0, [pc, #32]	; (800e608 <tcp_pcb_remove+0x114>)
 800e5e6:	f009 fda3 	bl	8018130 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e5f6:	bf00      	nop
 800e5f8:	3710      	adds	r7, #16
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	0801a908 	.word	0x0801a908
 800e604:	0801af70 	.word	0x0801af70
 800e608:	0801a94c 	.word	0x0801a94c
 800e60c:	0801af8c 	.word	0x0801af8c
 800e610:	0801afac 	.word	0x0801afac
 800e614:	0801afc4 	.word	0x0801afc4
 800e618:	0801afe0 	.word	0x0801afe0

0800e61c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b082      	sub	sp, #8
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d106      	bne.n	800e638 <tcp_next_iss+0x1c>
 800e62a:	4b0a      	ldr	r3, [pc, #40]	; (800e654 <tcp_next_iss+0x38>)
 800e62c:	f640 02af 	movw	r2, #2223	; 0x8af
 800e630:	4909      	ldr	r1, [pc, #36]	; (800e658 <tcp_next_iss+0x3c>)
 800e632:	480a      	ldr	r0, [pc, #40]	; (800e65c <tcp_next_iss+0x40>)
 800e634:	f009 fd7c 	bl	8018130 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e638:	4b09      	ldr	r3, [pc, #36]	; (800e660 <tcp_next_iss+0x44>)
 800e63a:	681a      	ldr	r2, [r3, #0]
 800e63c:	4b09      	ldr	r3, [pc, #36]	; (800e664 <tcp_next_iss+0x48>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	4413      	add	r3, r2
 800e642:	4a07      	ldr	r2, [pc, #28]	; (800e660 <tcp_next_iss+0x44>)
 800e644:	6013      	str	r3, [r2, #0]
  return iss;
 800e646:	4b06      	ldr	r3, [pc, #24]	; (800e660 <tcp_next_iss+0x44>)
 800e648:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	3708      	adds	r7, #8
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}
 800e652:	bf00      	nop
 800e654:	0801a908 	.word	0x0801a908
 800e658:	0801aff8 	.word	0x0801aff8
 800e65c:	0801a94c 	.word	0x0801a94c
 800e660:	20000028 	.word	0x20000028
 800e664:	20010d5c 	.word	0x20010d5c

0800e668 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b086      	sub	sp, #24
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	4603      	mov	r3, r0
 800e670:	60b9      	str	r1, [r7, #8]
 800e672:	607a      	str	r2, [r7, #4]
 800e674:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d106      	bne.n	800e68a <tcp_eff_send_mss_netif+0x22>
 800e67c:	4b14      	ldr	r3, [pc, #80]	; (800e6d0 <tcp_eff_send_mss_netif+0x68>)
 800e67e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e682:	4914      	ldr	r1, [pc, #80]	; (800e6d4 <tcp_eff_send_mss_netif+0x6c>)
 800e684:	4814      	ldr	r0, [pc, #80]	; (800e6d8 <tcp_eff_send_mss_netif+0x70>)
 800e686:	f009 fd53 	bl	8018130 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d101      	bne.n	800e694 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e690:	89fb      	ldrh	r3, [r7, #14]
 800e692:	e019      	b.n	800e6c8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e698:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e69a:	8afb      	ldrh	r3, [r7, #22]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d012      	beq.n	800e6c6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e6a0:	2328      	movs	r3, #40	; 0x28
 800e6a2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e6a4:	8afa      	ldrh	r2, [r7, #22]
 800e6a6:	8abb      	ldrh	r3, [r7, #20]
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	d904      	bls.n	800e6b6 <tcp_eff_send_mss_netif+0x4e>
 800e6ac:	8afa      	ldrh	r2, [r7, #22]
 800e6ae:	8abb      	ldrh	r3, [r7, #20]
 800e6b0:	1ad3      	subs	r3, r2, r3
 800e6b2:	b29b      	uxth	r3, r3
 800e6b4:	e000      	b.n	800e6b8 <tcp_eff_send_mss_netif+0x50>
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e6ba:	8a7a      	ldrh	r2, [r7, #18]
 800e6bc:	89fb      	ldrh	r3, [r7, #14]
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	bf28      	it	cs
 800e6c2:	4613      	movcs	r3, r2
 800e6c4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e6c6:	89fb      	ldrh	r3, [r7, #14]
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3718      	adds	r7, #24
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	0801a908 	.word	0x0801a908
 800e6d4:	0801b014 	.word	0x0801b014
 800e6d8:	0801a94c 	.word	0x0801a94c

0800e6dc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b084      	sub	sp, #16
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
 800e6e4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d119      	bne.n	800e724 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e6f0:	4b10      	ldr	r3, [pc, #64]	; (800e734 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e6f2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800e6f6:	4910      	ldr	r1, [pc, #64]	; (800e738 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e6f8:	4810      	ldr	r0, [pc, #64]	; (800e73c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e6fa:	f009 fd19 	bl	8018130 <iprintf>

  while (pcb != NULL) {
 800e6fe:	e011      	b.n	800e724 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681a      	ldr	r2, [r3, #0]
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	429a      	cmp	r2, r3
 800e70a:	d108      	bne.n	800e71e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	68db      	ldr	r3, [r3, #12]
 800e710:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e712:	68f8      	ldr	r0, [r7, #12]
 800e714:	f7fe fd20 	bl	800d158 <tcp_abort>
      pcb = next;
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	60fb      	str	r3, [r7, #12]
 800e71c:	e002      	b.n	800e724 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	68db      	ldr	r3, [r3, #12]
 800e722:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d1ea      	bne.n	800e700 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e72a:	bf00      	nop
 800e72c:	bf00      	nop
 800e72e:	3710      	adds	r7, #16
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}
 800e734:	0801a908 	.word	0x0801a908
 800e738:	0801b03c 	.word	0x0801b03c
 800e73c:	0801a94c 	.word	0x0801a94c

0800e740 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b084      	sub	sp, #16
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
 800e748:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d02a      	beq.n	800e7a6 <tcp_netif_ip_addr_changed+0x66>
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d026      	beq.n	800e7a6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e758:	4b15      	ldr	r3, [pc, #84]	; (800e7b0 <tcp_netif_ip_addr_changed+0x70>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	4619      	mov	r1, r3
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f7ff ffbc 	bl	800e6dc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e764:	4b13      	ldr	r3, [pc, #76]	; (800e7b4 <tcp_netif_ip_addr_changed+0x74>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	4619      	mov	r1, r3
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f7ff ffb6 	bl	800e6dc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d017      	beq.n	800e7a6 <tcp_netif_ip_addr_changed+0x66>
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d013      	beq.n	800e7a6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e77e:	4b0e      	ldr	r3, [pc, #56]	; (800e7b8 <tcp_netif_ip_addr_changed+0x78>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	60fb      	str	r3, [r7, #12]
 800e784:	e00c      	b.n	800e7a0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	681a      	ldr	r2, [r3, #0]
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	429a      	cmp	r2, r3
 800e790:	d103      	bne.n	800e79a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	681a      	ldr	r2, [r3, #0]
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	68db      	ldr	r3, [r3, #12]
 800e79e:	60fb      	str	r3, [r7, #12]
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d1ef      	bne.n	800e786 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e7a6:	bf00      	nop
 800e7a8:	3710      	adds	r7, #16
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}
 800e7ae:	bf00      	nop
 800e7b0:	20010d68 	.word	0x20010d68
 800e7b4:	20010d60 	.word	0x20010d60
 800e7b8:	20010d64 	.word	0x20010d64

0800e7bc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b082      	sub	sp, #8
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d007      	beq.n	800e7dc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f7ff fb51 	bl	800de78 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e7dc:	bf00      	nop
 800e7de:	3708      	adds	r7, #8
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}

0800e7e4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e7e4:	b590      	push	{r4, r7, lr}
 800e7e6:	b08d      	sub	sp, #52	; 0x34
 800e7e8:	af04      	add	r7, sp, #16
 800e7ea:	6078      	str	r0, [r7, #4]
 800e7ec:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d105      	bne.n	800e800 <tcp_input+0x1c>
 800e7f4:	4b9b      	ldr	r3, [pc, #620]	; (800ea64 <tcp_input+0x280>)
 800e7f6:	2283      	movs	r2, #131	; 0x83
 800e7f8:	499b      	ldr	r1, [pc, #620]	; (800ea68 <tcp_input+0x284>)
 800e7fa:	489c      	ldr	r0, [pc, #624]	; (800ea6c <tcp_input+0x288>)
 800e7fc:	f009 fc98 	bl	8018130 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	685b      	ldr	r3, [r3, #4]
 800e804:	4a9a      	ldr	r2, [pc, #616]	; (800ea70 <tcp_input+0x28c>)
 800e806:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	895b      	ldrh	r3, [r3, #10]
 800e80c:	2b13      	cmp	r3, #19
 800e80e:	f240 83d1 	bls.w	800efb4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e812:	4b98      	ldr	r3, [pc, #608]	; (800ea74 <tcp_input+0x290>)
 800e814:	695b      	ldr	r3, [r3, #20]
 800e816:	4a97      	ldr	r2, [pc, #604]	; (800ea74 <tcp_input+0x290>)
 800e818:	6812      	ldr	r2, [r2, #0]
 800e81a:	4611      	mov	r1, r2
 800e81c:	4618      	mov	r0, r3
 800e81e:	f008 fa61 	bl	8016ce4 <ip4_addr_isbroadcast_u32>
 800e822:	4603      	mov	r3, r0
 800e824:	2b00      	cmp	r3, #0
 800e826:	f040 83c7 	bne.w	800efb8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e82a:	4b92      	ldr	r3, [pc, #584]	; (800ea74 <tcp_input+0x290>)
 800e82c:	695b      	ldr	r3, [r3, #20]
 800e82e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e832:	2be0      	cmp	r3, #224	; 0xe0
 800e834:	f000 83c0 	beq.w	800efb8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e838:	4b8d      	ldr	r3, [pc, #564]	; (800ea70 <tcp_input+0x28c>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	899b      	ldrh	r3, [r3, #12]
 800e83e:	b29b      	uxth	r3, r3
 800e840:	4618      	mov	r0, r3
 800e842:	f7fc fa55 	bl	800acf0 <lwip_htons>
 800e846:	4603      	mov	r3, r0
 800e848:	0b1b      	lsrs	r3, r3, #12
 800e84a:	b29b      	uxth	r3, r3
 800e84c:	b2db      	uxtb	r3, r3
 800e84e:	009b      	lsls	r3, r3, #2
 800e850:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e852:	7cbb      	ldrb	r3, [r7, #18]
 800e854:	2b13      	cmp	r3, #19
 800e856:	f240 83b1 	bls.w	800efbc <tcp_input+0x7d8>
 800e85a:	7cbb      	ldrb	r3, [r7, #18]
 800e85c:	b29a      	uxth	r2, r3
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	891b      	ldrh	r3, [r3, #8]
 800e862:	429a      	cmp	r2, r3
 800e864:	f200 83aa 	bhi.w	800efbc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e868:	7cbb      	ldrb	r3, [r7, #18]
 800e86a:	b29b      	uxth	r3, r3
 800e86c:	3b14      	subs	r3, #20
 800e86e:	b29a      	uxth	r2, r3
 800e870:	4b81      	ldr	r3, [pc, #516]	; (800ea78 <tcp_input+0x294>)
 800e872:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e874:	4b81      	ldr	r3, [pc, #516]	; (800ea7c <tcp_input+0x298>)
 800e876:	2200      	movs	r2, #0
 800e878:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	895a      	ldrh	r2, [r3, #10]
 800e87e:	7cbb      	ldrb	r3, [r7, #18]
 800e880:	b29b      	uxth	r3, r3
 800e882:	429a      	cmp	r2, r3
 800e884:	d309      	bcc.n	800e89a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e886:	4b7c      	ldr	r3, [pc, #496]	; (800ea78 <tcp_input+0x294>)
 800e888:	881a      	ldrh	r2, [r3, #0]
 800e88a:	4b7d      	ldr	r3, [pc, #500]	; (800ea80 <tcp_input+0x29c>)
 800e88c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e88e:	7cbb      	ldrb	r3, [r7, #18]
 800e890:	4619      	mov	r1, r3
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f7fd fdda 	bl	800c44c <pbuf_remove_header>
 800e898:	e04e      	b.n	800e938 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d105      	bne.n	800e8ae <tcp_input+0xca>
 800e8a2:	4b70      	ldr	r3, [pc, #448]	; (800ea64 <tcp_input+0x280>)
 800e8a4:	22c2      	movs	r2, #194	; 0xc2
 800e8a6:	4977      	ldr	r1, [pc, #476]	; (800ea84 <tcp_input+0x2a0>)
 800e8a8:	4870      	ldr	r0, [pc, #448]	; (800ea6c <tcp_input+0x288>)
 800e8aa:	f009 fc41 	bl	8018130 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e8ae:	2114      	movs	r1, #20
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f7fd fdcb 	bl	800c44c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	895a      	ldrh	r2, [r3, #10]
 800e8ba:	4b71      	ldr	r3, [pc, #452]	; (800ea80 <tcp_input+0x29c>)
 800e8bc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e8be:	4b6e      	ldr	r3, [pc, #440]	; (800ea78 <tcp_input+0x294>)
 800e8c0:	881a      	ldrh	r2, [r3, #0]
 800e8c2:	4b6f      	ldr	r3, [pc, #444]	; (800ea80 <tcp_input+0x29c>)
 800e8c4:	881b      	ldrh	r3, [r3, #0]
 800e8c6:	1ad3      	subs	r3, r2, r3
 800e8c8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e8ca:	4b6d      	ldr	r3, [pc, #436]	; (800ea80 <tcp_input+0x29c>)
 800e8cc:	881b      	ldrh	r3, [r3, #0]
 800e8ce:	4619      	mov	r1, r3
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f7fd fdbb 	bl	800c44c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	895b      	ldrh	r3, [r3, #10]
 800e8dc:	8a3a      	ldrh	r2, [r7, #16]
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	f200 836e 	bhi.w	800efc0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	685b      	ldr	r3, [r3, #4]
 800e8ea:	4a64      	ldr	r2, [pc, #400]	; (800ea7c <tcp_input+0x298>)
 800e8ec:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	8a3a      	ldrh	r2, [r7, #16]
 800e8f4:	4611      	mov	r1, r2
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f7fd fda8 	bl	800c44c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	891a      	ldrh	r2, [r3, #8]
 800e900:	8a3b      	ldrh	r3, [r7, #16]
 800e902:	1ad3      	subs	r3, r2, r3
 800e904:	b29a      	uxth	r2, r3
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	895b      	ldrh	r3, [r3, #10]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d005      	beq.n	800e91e <tcp_input+0x13a>
 800e912:	4b54      	ldr	r3, [pc, #336]	; (800ea64 <tcp_input+0x280>)
 800e914:	22df      	movs	r2, #223	; 0xdf
 800e916:	495c      	ldr	r1, [pc, #368]	; (800ea88 <tcp_input+0x2a4>)
 800e918:	4854      	ldr	r0, [pc, #336]	; (800ea6c <tcp_input+0x288>)
 800e91a:	f009 fc09 	bl	8018130 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	891a      	ldrh	r2, [r3, #8]
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	891b      	ldrh	r3, [r3, #8]
 800e928:	429a      	cmp	r2, r3
 800e92a:	d005      	beq.n	800e938 <tcp_input+0x154>
 800e92c:	4b4d      	ldr	r3, [pc, #308]	; (800ea64 <tcp_input+0x280>)
 800e92e:	22e0      	movs	r2, #224	; 0xe0
 800e930:	4956      	ldr	r1, [pc, #344]	; (800ea8c <tcp_input+0x2a8>)
 800e932:	484e      	ldr	r0, [pc, #312]	; (800ea6c <tcp_input+0x288>)
 800e934:	f009 fbfc 	bl	8018130 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e938:	4b4d      	ldr	r3, [pc, #308]	; (800ea70 <tcp_input+0x28c>)
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	881b      	ldrh	r3, [r3, #0]
 800e93e:	b29b      	uxth	r3, r3
 800e940:	4a4b      	ldr	r2, [pc, #300]	; (800ea70 <tcp_input+0x28c>)
 800e942:	6814      	ldr	r4, [r2, #0]
 800e944:	4618      	mov	r0, r3
 800e946:	f7fc f9d3 	bl	800acf0 <lwip_htons>
 800e94a:	4603      	mov	r3, r0
 800e94c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e94e:	4b48      	ldr	r3, [pc, #288]	; (800ea70 <tcp_input+0x28c>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	885b      	ldrh	r3, [r3, #2]
 800e954:	b29b      	uxth	r3, r3
 800e956:	4a46      	ldr	r2, [pc, #280]	; (800ea70 <tcp_input+0x28c>)
 800e958:	6814      	ldr	r4, [r2, #0]
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7fc f9c8 	bl	800acf0 <lwip_htons>
 800e960:	4603      	mov	r3, r0
 800e962:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e964:	4b42      	ldr	r3, [pc, #264]	; (800ea70 <tcp_input+0x28c>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	685b      	ldr	r3, [r3, #4]
 800e96a:	4a41      	ldr	r2, [pc, #260]	; (800ea70 <tcp_input+0x28c>)
 800e96c:	6814      	ldr	r4, [r2, #0]
 800e96e:	4618      	mov	r0, r3
 800e970:	f7fc f9d3 	bl	800ad1a <lwip_htonl>
 800e974:	4603      	mov	r3, r0
 800e976:	6063      	str	r3, [r4, #4]
 800e978:	6863      	ldr	r3, [r4, #4]
 800e97a:	4a45      	ldr	r2, [pc, #276]	; (800ea90 <tcp_input+0x2ac>)
 800e97c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e97e:	4b3c      	ldr	r3, [pc, #240]	; (800ea70 <tcp_input+0x28c>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	689b      	ldr	r3, [r3, #8]
 800e984:	4a3a      	ldr	r2, [pc, #232]	; (800ea70 <tcp_input+0x28c>)
 800e986:	6814      	ldr	r4, [r2, #0]
 800e988:	4618      	mov	r0, r3
 800e98a:	f7fc f9c6 	bl	800ad1a <lwip_htonl>
 800e98e:	4603      	mov	r3, r0
 800e990:	60a3      	str	r3, [r4, #8]
 800e992:	68a3      	ldr	r3, [r4, #8]
 800e994:	4a3f      	ldr	r2, [pc, #252]	; (800ea94 <tcp_input+0x2b0>)
 800e996:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e998:	4b35      	ldr	r3, [pc, #212]	; (800ea70 <tcp_input+0x28c>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	89db      	ldrh	r3, [r3, #14]
 800e99e:	b29b      	uxth	r3, r3
 800e9a0:	4a33      	ldr	r2, [pc, #204]	; (800ea70 <tcp_input+0x28c>)
 800e9a2:	6814      	ldr	r4, [r2, #0]
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f7fc f9a3 	bl	800acf0 <lwip_htons>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e9ae:	4b30      	ldr	r3, [pc, #192]	; (800ea70 <tcp_input+0x28c>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	899b      	ldrh	r3, [r3, #12]
 800e9b4:	b29b      	uxth	r3, r3
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f7fc f99a 	bl	800acf0 <lwip_htons>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	b2db      	uxtb	r3, r3
 800e9c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e9c4:	b2da      	uxtb	r2, r3
 800e9c6:	4b34      	ldr	r3, [pc, #208]	; (800ea98 <tcp_input+0x2b4>)
 800e9c8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	891a      	ldrh	r2, [r3, #8]
 800e9ce:	4b33      	ldr	r3, [pc, #204]	; (800ea9c <tcp_input+0x2b8>)
 800e9d0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e9d2:	4b31      	ldr	r3, [pc, #196]	; (800ea98 <tcp_input+0x2b4>)
 800e9d4:	781b      	ldrb	r3, [r3, #0]
 800e9d6:	f003 0303 	and.w	r3, r3, #3
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d00c      	beq.n	800e9f8 <tcp_input+0x214>
    tcplen++;
 800e9de:	4b2f      	ldr	r3, [pc, #188]	; (800ea9c <tcp_input+0x2b8>)
 800e9e0:	881b      	ldrh	r3, [r3, #0]
 800e9e2:	3301      	adds	r3, #1
 800e9e4:	b29a      	uxth	r2, r3
 800e9e6:	4b2d      	ldr	r3, [pc, #180]	; (800ea9c <tcp_input+0x2b8>)
 800e9e8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	891a      	ldrh	r2, [r3, #8]
 800e9ee:	4b2b      	ldr	r3, [pc, #172]	; (800ea9c <tcp_input+0x2b8>)
 800e9f0:	881b      	ldrh	r3, [r3, #0]
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	f200 82e6 	bhi.w	800efc4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e9fc:	4b28      	ldr	r3, [pc, #160]	; (800eaa0 <tcp_input+0x2bc>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	61fb      	str	r3, [r7, #28]
 800ea02:	e09d      	b.n	800eb40 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ea04:	69fb      	ldr	r3, [r7, #28]
 800ea06:	7d1b      	ldrb	r3, [r3, #20]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d105      	bne.n	800ea18 <tcp_input+0x234>
 800ea0c:	4b15      	ldr	r3, [pc, #84]	; (800ea64 <tcp_input+0x280>)
 800ea0e:	22fb      	movs	r2, #251	; 0xfb
 800ea10:	4924      	ldr	r1, [pc, #144]	; (800eaa4 <tcp_input+0x2c0>)
 800ea12:	4816      	ldr	r0, [pc, #88]	; (800ea6c <tcp_input+0x288>)
 800ea14:	f009 fb8c 	bl	8018130 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ea18:	69fb      	ldr	r3, [r7, #28]
 800ea1a:	7d1b      	ldrb	r3, [r3, #20]
 800ea1c:	2b0a      	cmp	r3, #10
 800ea1e:	d105      	bne.n	800ea2c <tcp_input+0x248>
 800ea20:	4b10      	ldr	r3, [pc, #64]	; (800ea64 <tcp_input+0x280>)
 800ea22:	22fc      	movs	r2, #252	; 0xfc
 800ea24:	4920      	ldr	r1, [pc, #128]	; (800eaa8 <tcp_input+0x2c4>)
 800ea26:	4811      	ldr	r0, [pc, #68]	; (800ea6c <tcp_input+0x288>)
 800ea28:	f009 fb82 	bl	8018130 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ea2c:	69fb      	ldr	r3, [r7, #28]
 800ea2e:	7d1b      	ldrb	r3, [r3, #20]
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	d105      	bne.n	800ea40 <tcp_input+0x25c>
 800ea34:	4b0b      	ldr	r3, [pc, #44]	; (800ea64 <tcp_input+0x280>)
 800ea36:	22fd      	movs	r2, #253	; 0xfd
 800ea38:	491c      	ldr	r1, [pc, #112]	; (800eaac <tcp_input+0x2c8>)
 800ea3a:	480c      	ldr	r0, [pc, #48]	; (800ea6c <tcp_input+0x288>)
 800ea3c:	f009 fb78 	bl	8018130 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ea40:	69fb      	ldr	r3, [r7, #28]
 800ea42:	7a1b      	ldrb	r3, [r3, #8]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d033      	beq.n	800eab0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ea48:	69fb      	ldr	r3, [r7, #28]
 800ea4a:	7a1a      	ldrb	r2, [r3, #8]
 800ea4c:	4b09      	ldr	r3, [pc, #36]	; (800ea74 <tcp_input+0x290>)
 800ea4e:	685b      	ldr	r3, [r3, #4]
 800ea50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ea54:	3301      	adds	r3, #1
 800ea56:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	d029      	beq.n	800eab0 <tcp_input+0x2cc>
      prev = pcb;
 800ea5c:	69fb      	ldr	r3, [r7, #28]
 800ea5e:	61bb      	str	r3, [r7, #24]
      continue;
 800ea60:	e06b      	b.n	800eb3a <tcp_input+0x356>
 800ea62:	bf00      	nop
 800ea64:	0801b070 	.word	0x0801b070
 800ea68:	0801b0a4 	.word	0x0801b0a4
 800ea6c:	0801b0bc 	.word	0x0801b0bc
 800ea70:	20010d84 	.word	0x20010d84
 800ea74:	2000d5e8 	.word	0x2000d5e8
 800ea78:	20010d88 	.word	0x20010d88
 800ea7c:	20010d8c 	.word	0x20010d8c
 800ea80:	20010d8a 	.word	0x20010d8a
 800ea84:	0801b0e4 	.word	0x0801b0e4
 800ea88:	0801b0f4 	.word	0x0801b0f4
 800ea8c:	0801b100 	.word	0x0801b100
 800ea90:	20010d94 	.word	0x20010d94
 800ea94:	20010d98 	.word	0x20010d98
 800ea98:	20010da0 	.word	0x20010da0
 800ea9c:	20010d9e 	.word	0x20010d9e
 800eaa0:	20010d68 	.word	0x20010d68
 800eaa4:	0801b120 	.word	0x0801b120
 800eaa8:	0801b148 	.word	0x0801b148
 800eaac:	0801b174 	.word	0x0801b174
    }

    if (pcb->remote_port == tcphdr->src &&
 800eab0:	69fb      	ldr	r3, [r7, #28]
 800eab2:	8b1a      	ldrh	r2, [r3, #24]
 800eab4:	4b72      	ldr	r3, [pc, #456]	; (800ec80 <tcp_input+0x49c>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	881b      	ldrh	r3, [r3, #0]
 800eaba:	b29b      	uxth	r3, r3
 800eabc:	429a      	cmp	r2, r3
 800eabe:	d13a      	bne.n	800eb36 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800eac0:	69fb      	ldr	r3, [r7, #28]
 800eac2:	8ada      	ldrh	r2, [r3, #22]
 800eac4:	4b6e      	ldr	r3, [pc, #440]	; (800ec80 <tcp_input+0x49c>)
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	885b      	ldrh	r3, [r3, #2]
 800eaca:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800eacc:	429a      	cmp	r2, r3
 800eace:	d132      	bne.n	800eb36 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ead0:	69fb      	ldr	r3, [r7, #28]
 800ead2:	685a      	ldr	r2, [r3, #4]
 800ead4:	4b6b      	ldr	r3, [pc, #428]	; (800ec84 <tcp_input+0x4a0>)
 800ead6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ead8:	429a      	cmp	r2, r3
 800eada:	d12c      	bne.n	800eb36 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800eadc:	69fb      	ldr	r3, [r7, #28]
 800eade:	681a      	ldr	r2, [r3, #0]
 800eae0:	4b68      	ldr	r3, [pc, #416]	; (800ec84 <tcp_input+0x4a0>)
 800eae2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d126      	bne.n	800eb36 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800eae8:	69fb      	ldr	r3, [r7, #28]
 800eaea:	68db      	ldr	r3, [r3, #12]
 800eaec:	69fa      	ldr	r2, [r7, #28]
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d106      	bne.n	800eb00 <tcp_input+0x31c>
 800eaf2:	4b65      	ldr	r3, [pc, #404]	; (800ec88 <tcp_input+0x4a4>)
 800eaf4:	f240 120d 	movw	r2, #269	; 0x10d
 800eaf8:	4964      	ldr	r1, [pc, #400]	; (800ec8c <tcp_input+0x4a8>)
 800eafa:	4865      	ldr	r0, [pc, #404]	; (800ec90 <tcp_input+0x4ac>)
 800eafc:	f009 fb18 	bl	8018130 <iprintf>
      if (prev != NULL) {
 800eb00:	69bb      	ldr	r3, [r7, #24]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d00a      	beq.n	800eb1c <tcp_input+0x338>
        prev->next = pcb->next;
 800eb06:	69fb      	ldr	r3, [r7, #28]
 800eb08:	68da      	ldr	r2, [r3, #12]
 800eb0a:	69bb      	ldr	r3, [r7, #24]
 800eb0c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800eb0e:	4b61      	ldr	r3, [pc, #388]	; (800ec94 <tcp_input+0x4b0>)
 800eb10:	681a      	ldr	r2, [r3, #0]
 800eb12:	69fb      	ldr	r3, [r7, #28]
 800eb14:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800eb16:	4a5f      	ldr	r2, [pc, #380]	; (800ec94 <tcp_input+0x4b0>)
 800eb18:	69fb      	ldr	r3, [r7, #28]
 800eb1a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800eb1c:	69fb      	ldr	r3, [r7, #28]
 800eb1e:	68db      	ldr	r3, [r3, #12]
 800eb20:	69fa      	ldr	r2, [r7, #28]
 800eb22:	429a      	cmp	r2, r3
 800eb24:	d111      	bne.n	800eb4a <tcp_input+0x366>
 800eb26:	4b58      	ldr	r3, [pc, #352]	; (800ec88 <tcp_input+0x4a4>)
 800eb28:	f240 1215 	movw	r2, #277	; 0x115
 800eb2c:	495a      	ldr	r1, [pc, #360]	; (800ec98 <tcp_input+0x4b4>)
 800eb2e:	4858      	ldr	r0, [pc, #352]	; (800ec90 <tcp_input+0x4ac>)
 800eb30:	f009 fafe 	bl	8018130 <iprintf>
      break;
 800eb34:	e009      	b.n	800eb4a <tcp_input+0x366>
    }
    prev = pcb;
 800eb36:	69fb      	ldr	r3, [r7, #28]
 800eb38:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb3a:	69fb      	ldr	r3, [r7, #28]
 800eb3c:	68db      	ldr	r3, [r3, #12]
 800eb3e:	61fb      	str	r3, [r7, #28]
 800eb40:	69fb      	ldr	r3, [r7, #28]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	f47f af5e 	bne.w	800ea04 <tcp_input+0x220>
 800eb48:	e000      	b.n	800eb4c <tcp_input+0x368>
      break;
 800eb4a:	bf00      	nop
  }

  if (pcb == NULL) {
 800eb4c:	69fb      	ldr	r3, [r7, #28]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	f040 80aa 	bne.w	800eca8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb54:	4b51      	ldr	r3, [pc, #324]	; (800ec9c <tcp_input+0x4b8>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	61fb      	str	r3, [r7, #28]
 800eb5a:	e03f      	b.n	800ebdc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800eb5c:	69fb      	ldr	r3, [r7, #28]
 800eb5e:	7d1b      	ldrb	r3, [r3, #20]
 800eb60:	2b0a      	cmp	r3, #10
 800eb62:	d006      	beq.n	800eb72 <tcp_input+0x38e>
 800eb64:	4b48      	ldr	r3, [pc, #288]	; (800ec88 <tcp_input+0x4a4>)
 800eb66:	f240 121f 	movw	r2, #287	; 0x11f
 800eb6a:	494d      	ldr	r1, [pc, #308]	; (800eca0 <tcp_input+0x4bc>)
 800eb6c:	4848      	ldr	r0, [pc, #288]	; (800ec90 <tcp_input+0x4ac>)
 800eb6e:	f009 fadf 	bl	8018130 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800eb72:	69fb      	ldr	r3, [r7, #28]
 800eb74:	7a1b      	ldrb	r3, [r3, #8]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d009      	beq.n	800eb8e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800eb7a:	69fb      	ldr	r3, [r7, #28]
 800eb7c:	7a1a      	ldrb	r2, [r3, #8]
 800eb7e:	4b41      	ldr	r3, [pc, #260]	; (800ec84 <tcp_input+0x4a0>)
 800eb80:	685b      	ldr	r3, [r3, #4]
 800eb82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eb86:	3301      	adds	r3, #1
 800eb88:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d122      	bne.n	800ebd4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800eb8e:	69fb      	ldr	r3, [r7, #28]
 800eb90:	8b1a      	ldrh	r2, [r3, #24]
 800eb92:	4b3b      	ldr	r3, [pc, #236]	; (800ec80 <tcp_input+0x49c>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	881b      	ldrh	r3, [r3, #0]
 800eb98:	b29b      	uxth	r3, r3
 800eb9a:	429a      	cmp	r2, r3
 800eb9c:	d11b      	bne.n	800ebd6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800eb9e:	69fb      	ldr	r3, [r7, #28]
 800eba0:	8ada      	ldrh	r2, [r3, #22]
 800eba2:	4b37      	ldr	r3, [pc, #220]	; (800ec80 <tcp_input+0x49c>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	885b      	ldrh	r3, [r3, #2]
 800eba8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800ebaa:	429a      	cmp	r2, r3
 800ebac:	d113      	bne.n	800ebd6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ebae:	69fb      	ldr	r3, [r7, #28]
 800ebb0:	685a      	ldr	r2, [r3, #4]
 800ebb2:	4b34      	ldr	r3, [pc, #208]	; (800ec84 <tcp_input+0x4a0>)
 800ebb4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ebb6:	429a      	cmp	r2, r3
 800ebb8:	d10d      	bne.n	800ebd6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ebba:	69fb      	ldr	r3, [r7, #28]
 800ebbc:	681a      	ldr	r2, [r3, #0]
 800ebbe:	4b31      	ldr	r3, [pc, #196]	; (800ec84 <tcp_input+0x4a0>)
 800ebc0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ebc2:	429a      	cmp	r2, r3
 800ebc4:	d107      	bne.n	800ebd6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800ebc6:	69f8      	ldr	r0, [r7, #28]
 800ebc8:	f000 fb56 	bl	800f278 <tcp_timewait_input>
        }
        pbuf_free(p);
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f7fd fcc3 	bl	800c558 <pbuf_free>
        return;
 800ebd2:	e1fd      	b.n	800efd0 <tcp_input+0x7ec>
        continue;
 800ebd4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebd6:	69fb      	ldr	r3, [r7, #28]
 800ebd8:	68db      	ldr	r3, [r3, #12]
 800ebda:	61fb      	str	r3, [r7, #28]
 800ebdc:	69fb      	ldr	r3, [r7, #28]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d1bc      	bne.n	800eb5c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ebe6:	4b2f      	ldr	r3, [pc, #188]	; (800eca4 <tcp_input+0x4c0>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	617b      	str	r3, [r7, #20]
 800ebec:	e02a      	b.n	800ec44 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	7a1b      	ldrb	r3, [r3, #8]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d00c      	beq.n	800ec10 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	7a1a      	ldrb	r2, [r3, #8]
 800ebfa:	4b22      	ldr	r3, [pc, #136]	; (800ec84 <tcp_input+0x4a0>)
 800ebfc:	685b      	ldr	r3, [r3, #4]
 800ebfe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ec02:	3301      	adds	r3, #1
 800ec04:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ec06:	429a      	cmp	r2, r3
 800ec08:	d002      	beq.n	800ec10 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	61bb      	str	r3, [r7, #24]
        continue;
 800ec0e:	e016      	b.n	800ec3e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800ec10:	697b      	ldr	r3, [r7, #20]
 800ec12:	8ada      	ldrh	r2, [r3, #22]
 800ec14:	4b1a      	ldr	r3, [pc, #104]	; (800ec80 <tcp_input+0x49c>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	885b      	ldrh	r3, [r3, #2]
 800ec1a:	b29b      	uxth	r3, r3
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	d10c      	bne.n	800ec3a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	681a      	ldr	r2, [r3, #0]
 800ec24:	4b17      	ldr	r3, [pc, #92]	; (800ec84 <tcp_input+0x4a0>)
 800ec26:	695b      	ldr	r3, [r3, #20]
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d00f      	beq.n	800ec4c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d00d      	beq.n	800ec4e <tcp_input+0x46a>
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d009      	beq.n	800ec4e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800ec3a:	697b      	ldr	r3, [r7, #20]
 800ec3c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	68db      	ldr	r3, [r3, #12]
 800ec42:	617b      	str	r3, [r7, #20]
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d1d1      	bne.n	800ebee <tcp_input+0x40a>
 800ec4a:	e000      	b.n	800ec4e <tcp_input+0x46a>
            break;
 800ec4c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d029      	beq.n	800eca8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ec54:	69bb      	ldr	r3, [r7, #24]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d00a      	beq.n	800ec70 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	68da      	ldr	r2, [r3, #12]
 800ec5e:	69bb      	ldr	r3, [r7, #24]
 800ec60:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ec62:	4b10      	ldr	r3, [pc, #64]	; (800eca4 <tcp_input+0x4c0>)
 800ec64:	681a      	ldr	r2, [r3, #0]
 800ec66:	697b      	ldr	r3, [r7, #20]
 800ec68:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ec6a:	4a0e      	ldr	r2, [pc, #56]	; (800eca4 <tcp_input+0x4c0>)
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800ec70:	6978      	ldr	r0, [r7, #20]
 800ec72:	f000 fa03 	bl	800f07c <tcp_listen_input>
      }
      pbuf_free(p);
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	f7fd fc6e 	bl	800c558 <pbuf_free>
      return;
 800ec7c:	e1a8      	b.n	800efd0 <tcp_input+0x7ec>
 800ec7e:	bf00      	nop
 800ec80:	20010d84 	.word	0x20010d84
 800ec84:	2000d5e8 	.word	0x2000d5e8
 800ec88:	0801b070 	.word	0x0801b070
 800ec8c:	0801b19c 	.word	0x0801b19c
 800ec90:	0801b0bc 	.word	0x0801b0bc
 800ec94:	20010d68 	.word	0x20010d68
 800ec98:	0801b1c8 	.word	0x0801b1c8
 800ec9c:	20010d6c 	.word	0x20010d6c
 800eca0:	0801b1f4 	.word	0x0801b1f4
 800eca4:	20010d64 	.word	0x20010d64
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800eca8:	69fb      	ldr	r3, [r7, #28]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	f000 8158 	beq.w	800ef60 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ecb0:	4b95      	ldr	r3, [pc, #596]	; (800ef08 <tcp_input+0x724>)
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	891a      	ldrh	r2, [r3, #8]
 800ecba:	4b93      	ldr	r3, [pc, #588]	; (800ef08 <tcp_input+0x724>)
 800ecbc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ecbe:	4a92      	ldr	r2, [pc, #584]	; (800ef08 <tcp_input+0x724>)
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ecc4:	4b91      	ldr	r3, [pc, #580]	; (800ef0c <tcp_input+0x728>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	4a8f      	ldr	r2, [pc, #572]	; (800ef08 <tcp_input+0x724>)
 800ecca:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800eccc:	4b90      	ldr	r3, [pc, #576]	; (800ef10 <tcp_input+0x72c>)
 800ecce:	2200      	movs	r2, #0
 800ecd0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ecd2:	4b90      	ldr	r3, [pc, #576]	; (800ef14 <tcp_input+0x730>)
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ecd8:	4b8f      	ldr	r3, [pc, #572]	; (800ef18 <tcp_input+0x734>)
 800ecda:	2200      	movs	r2, #0
 800ecdc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ecde:	4b8f      	ldr	r3, [pc, #572]	; (800ef1c <tcp_input+0x738>)
 800ece0:	781b      	ldrb	r3, [r3, #0]
 800ece2:	f003 0308 	and.w	r3, r3, #8
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d006      	beq.n	800ecf8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	7b5b      	ldrb	r3, [r3, #13]
 800ecee:	f043 0301 	orr.w	r3, r3, #1
 800ecf2:	b2da      	uxtb	r2, r3
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ecf8:	69fb      	ldr	r3, [r7, #28]
 800ecfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d017      	beq.n	800ed30 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ed00:	69f8      	ldr	r0, [r7, #28]
 800ed02:	f7ff f83d 	bl	800dd80 <tcp_process_refused_data>
 800ed06:	4603      	mov	r3, r0
 800ed08:	f113 0f0d 	cmn.w	r3, #13
 800ed0c:	d007      	beq.n	800ed1e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ed0e:	69fb      	ldr	r3, [r7, #28]
 800ed10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d00c      	beq.n	800ed30 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ed16:	4b82      	ldr	r3, [pc, #520]	; (800ef20 <tcp_input+0x73c>)
 800ed18:	881b      	ldrh	r3, [r3, #0]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d008      	beq.n	800ed30 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ed1e:	69fb      	ldr	r3, [r7, #28]
 800ed20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	f040 80e3 	bne.w	800eeee <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ed28:	69f8      	ldr	r0, [r7, #28]
 800ed2a:	f003 fe05 	bl	8012938 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800ed2e:	e0de      	b.n	800eeee <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800ed30:	4a7c      	ldr	r2, [pc, #496]	; (800ef24 <tcp_input+0x740>)
 800ed32:	69fb      	ldr	r3, [r7, #28]
 800ed34:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ed36:	69f8      	ldr	r0, [r7, #28]
 800ed38:	f000 fb18 	bl	800f36c <tcp_process>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ed40:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ed44:	f113 0f0d 	cmn.w	r3, #13
 800ed48:	f000 80d3 	beq.w	800eef2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800ed4c:	4b71      	ldr	r3, [pc, #452]	; (800ef14 <tcp_input+0x730>)
 800ed4e:	781b      	ldrb	r3, [r3, #0]
 800ed50:	f003 0308 	and.w	r3, r3, #8
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d015      	beq.n	800ed84 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ed58:	69fb      	ldr	r3, [r7, #28]
 800ed5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d008      	beq.n	800ed74 <tcp_input+0x590>
 800ed62:	69fb      	ldr	r3, [r7, #28]
 800ed64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed68:	69fa      	ldr	r2, [r7, #28]
 800ed6a:	6912      	ldr	r2, [r2, #16]
 800ed6c:	f06f 010d 	mvn.w	r1, #13
 800ed70:	4610      	mov	r0, r2
 800ed72:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ed74:	69f9      	ldr	r1, [r7, #28]
 800ed76:	486c      	ldr	r0, [pc, #432]	; (800ef28 <tcp_input+0x744>)
 800ed78:	f7ff fbbc 	bl	800e4f4 <tcp_pcb_remove>
        tcp_free(pcb);
 800ed7c:	69f8      	ldr	r0, [r7, #28]
 800ed7e:	f7fd fea7 	bl	800cad0 <tcp_free>
 800ed82:	e0da      	b.n	800ef3a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800ed84:	2300      	movs	r3, #0
 800ed86:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ed88:	4b63      	ldr	r3, [pc, #396]	; (800ef18 <tcp_input+0x734>)
 800ed8a:	881b      	ldrh	r3, [r3, #0]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d01d      	beq.n	800edcc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ed90:	4b61      	ldr	r3, [pc, #388]	; (800ef18 <tcp_input+0x734>)
 800ed92:	881b      	ldrh	r3, [r3, #0]
 800ed94:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ed96:	69fb      	ldr	r3, [r7, #28]
 800ed98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d00a      	beq.n	800edb6 <tcp_input+0x5d2>
 800eda0:	69fb      	ldr	r3, [r7, #28]
 800eda2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eda6:	69fa      	ldr	r2, [r7, #28]
 800eda8:	6910      	ldr	r0, [r2, #16]
 800edaa:	89fa      	ldrh	r2, [r7, #14]
 800edac:	69f9      	ldr	r1, [r7, #28]
 800edae:	4798      	blx	r3
 800edb0:	4603      	mov	r3, r0
 800edb2:	74fb      	strb	r3, [r7, #19]
 800edb4:	e001      	b.n	800edba <tcp_input+0x5d6>
 800edb6:	2300      	movs	r3, #0
 800edb8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800edba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800edbe:	f113 0f0d 	cmn.w	r3, #13
 800edc2:	f000 8098 	beq.w	800eef6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800edc6:	4b54      	ldr	r3, [pc, #336]	; (800ef18 <tcp_input+0x734>)
 800edc8:	2200      	movs	r2, #0
 800edca:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800edcc:	69f8      	ldr	r0, [r7, #28]
 800edce:	f000 f915 	bl	800effc <tcp_input_delayed_close>
 800edd2:	4603      	mov	r3, r0
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	f040 8090 	bne.w	800eefa <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800edda:	4b4d      	ldr	r3, [pc, #308]	; (800ef10 <tcp_input+0x72c>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d041      	beq.n	800ee66 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ede2:	69fb      	ldr	r3, [r7, #28]
 800ede4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d006      	beq.n	800edf8 <tcp_input+0x614>
 800edea:	4b50      	ldr	r3, [pc, #320]	; (800ef2c <tcp_input+0x748>)
 800edec:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800edf0:	494f      	ldr	r1, [pc, #316]	; (800ef30 <tcp_input+0x74c>)
 800edf2:	4850      	ldr	r0, [pc, #320]	; (800ef34 <tcp_input+0x750>)
 800edf4:	f009 f99c 	bl	8018130 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800edf8:	69fb      	ldr	r3, [r7, #28]
 800edfa:	8b5b      	ldrh	r3, [r3, #26]
 800edfc:	f003 0310 	and.w	r3, r3, #16
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d008      	beq.n	800ee16 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ee04:	4b42      	ldr	r3, [pc, #264]	; (800ef10 <tcp_input+0x72c>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f7fd fba5 	bl	800c558 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ee0e:	69f8      	ldr	r0, [r7, #28]
 800ee10:	f7fe f9a2 	bl	800d158 <tcp_abort>
            goto aborted;
 800ee14:	e091      	b.n	800ef3a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ee16:	69fb      	ldr	r3, [r7, #28]
 800ee18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d00c      	beq.n	800ee3a <tcp_input+0x656>
 800ee20:	69fb      	ldr	r3, [r7, #28]
 800ee22:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ee26:	69fb      	ldr	r3, [r7, #28]
 800ee28:	6918      	ldr	r0, [r3, #16]
 800ee2a:	4b39      	ldr	r3, [pc, #228]	; (800ef10 <tcp_input+0x72c>)
 800ee2c:	681a      	ldr	r2, [r3, #0]
 800ee2e:	2300      	movs	r3, #0
 800ee30:	69f9      	ldr	r1, [r7, #28]
 800ee32:	47a0      	blx	r4
 800ee34:	4603      	mov	r3, r0
 800ee36:	74fb      	strb	r3, [r7, #19]
 800ee38:	e008      	b.n	800ee4c <tcp_input+0x668>
 800ee3a:	4b35      	ldr	r3, [pc, #212]	; (800ef10 <tcp_input+0x72c>)
 800ee3c:	681a      	ldr	r2, [r3, #0]
 800ee3e:	2300      	movs	r3, #0
 800ee40:	69f9      	ldr	r1, [r7, #28]
 800ee42:	2000      	movs	r0, #0
 800ee44:	f7ff f890 	bl	800df68 <tcp_recv_null>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ee4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ee50:	f113 0f0d 	cmn.w	r3, #13
 800ee54:	d053      	beq.n	800eefe <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ee56:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d003      	beq.n	800ee66 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ee5e:	4b2c      	ldr	r3, [pc, #176]	; (800ef10 <tcp_input+0x72c>)
 800ee60:	681a      	ldr	r2, [r3, #0]
 800ee62:	69fb      	ldr	r3, [r7, #28]
 800ee64:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ee66:	4b2b      	ldr	r3, [pc, #172]	; (800ef14 <tcp_input+0x730>)
 800ee68:	781b      	ldrb	r3, [r3, #0]
 800ee6a:	f003 0320 	and.w	r3, r3, #32
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d030      	beq.n	800eed4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800ee72:	69fb      	ldr	r3, [r7, #28]
 800ee74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d009      	beq.n	800ee8e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ee7a:	69fb      	ldr	r3, [r7, #28]
 800ee7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee7e:	7b5a      	ldrb	r2, [r3, #13]
 800ee80:	69fb      	ldr	r3, [r7, #28]
 800ee82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee84:	f042 0220 	orr.w	r2, r2, #32
 800ee88:	b2d2      	uxtb	r2, r2
 800ee8a:	735a      	strb	r2, [r3, #13]
 800ee8c:	e022      	b.n	800eed4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ee8e:	69fb      	ldr	r3, [r7, #28]
 800ee90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee92:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ee96:	d005      	beq.n	800eea4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800ee98:	69fb      	ldr	r3, [r7, #28]
 800ee9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee9c:	3301      	adds	r3, #1
 800ee9e:	b29a      	uxth	r2, r3
 800eea0:	69fb      	ldr	r3, [r7, #28]
 800eea2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800eea4:	69fb      	ldr	r3, [r7, #28]
 800eea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d00b      	beq.n	800eec6 <tcp_input+0x6e2>
 800eeae:	69fb      	ldr	r3, [r7, #28]
 800eeb0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eeb4:	69fb      	ldr	r3, [r7, #28]
 800eeb6:	6918      	ldr	r0, [r3, #16]
 800eeb8:	2300      	movs	r3, #0
 800eeba:	2200      	movs	r2, #0
 800eebc:	69f9      	ldr	r1, [r7, #28]
 800eebe:	47a0      	blx	r4
 800eec0:	4603      	mov	r3, r0
 800eec2:	74fb      	strb	r3, [r7, #19]
 800eec4:	e001      	b.n	800eeca <tcp_input+0x6e6>
 800eec6:	2300      	movs	r3, #0
 800eec8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800eeca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eece:	f113 0f0d 	cmn.w	r3, #13
 800eed2:	d016      	beq.n	800ef02 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800eed4:	4b13      	ldr	r3, [pc, #76]	; (800ef24 <tcp_input+0x740>)
 800eed6:	2200      	movs	r2, #0
 800eed8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800eeda:	69f8      	ldr	r0, [r7, #28]
 800eedc:	f000 f88e 	bl	800effc <tcp_input_delayed_close>
 800eee0:	4603      	mov	r3, r0
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d128      	bne.n	800ef38 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800eee6:	69f8      	ldr	r0, [r7, #28]
 800eee8:	f002 ff20 	bl	8011d2c <tcp_output>
 800eeec:	e025      	b.n	800ef3a <tcp_input+0x756>
        goto aborted;
 800eeee:	bf00      	nop
 800eef0:	e023      	b.n	800ef3a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800eef2:	bf00      	nop
 800eef4:	e021      	b.n	800ef3a <tcp_input+0x756>
              goto aborted;
 800eef6:	bf00      	nop
 800eef8:	e01f      	b.n	800ef3a <tcp_input+0x756>
          goto aborted;
 800eefa:	bf00      	nop
 800eefc:	e01d      	b.n	800ef3a <tcp_input+0x756>
            goto aborted;
 800eefe:	bf00      	nop
 800ef00:	e01b      	b.n	800ef3a <tcp_input+0x756>
              goto aborted;
 800ef02:	bf00      	nop
 800ef04:	e019      	b.n	800ef3a <tcp_input+0x756>
 800ef06:	bf00      	nop
 800ef08:	20010d74 	.word	0x20010d74
 800ef0c:	20010d84 	.word	0x20010d84
 800ef10:	20010da4 	.word	0x20010da4
 800ef14:	20010da1 	.word	0x20010da1
 800ef18:	20010d9c 	.word	0x20010d9c
 800ef1c:	20010da0 	.word	0x20010da0
 800ef20:	20010d9e 	.word	0x20010d9e
 800ef24:	20010da8 	.word	0x20010da8
 800ef28:	20010d68 	.word	0x20010d68
 800ef2c:	0801b070 	.word	0x0801b070
 800ef30:	0801b224 	.word	0x0801b224
 800ef34:	0801b0bc 	.word	0x0801b0bc
          goto aborted;
 800ef38:	bf00      	nop
    tcp_input_pcb = NULL;
 800ef3a:	4b27      	ldr	r3, [pc, #156]	; (800efd8 <tcp_input+0x7f4>)
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ef40:	4b26      	ldr	r3, [pc, #152]	; (800efdc <tcp_input+0x7f8>)
 800ef42:	2200      	movs	r2, #0
 800ef44:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ef46:	4b26      	ldr	r3, [pc, #152]	; (800efe0 <tcp_input+0x7fc>)
 800ef48:	685b      	ldr	r3, [r3, #4]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d03f      	beq.n	800efce <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800ef4e:	4b24      	ldr	r3, [pc, #144]	; (800efe0 <tcp_input+0x7fc>)
 800ef50:	685b      	ldr	r3, [r3, #4]
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7fd fb00 	bl	800c558 <pbuf_free>
      inseg.p = NULL;
 800ef58:	4b21      	ldr	r3, [pc, #132]	; (800efe0 <tcp_input+0x7fc>)
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ef5e:	e036      	b.n	800efce <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ef60:	4b20      	ldr	r3, [pc, #128]	; (800efe4 <tcp_input+0x800>)
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	899b      	ldrh	r3, [r3, #12]
 800ef66:	b29b      	uxth	r3, r3
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f7fb fec1 	bl	800acf0 <lwip_htons>
 800ef6e:	4603      	mov	r3, r0
 800ef70:	b2db      	uxtb	r3, r3
 800ef72:	f003 0304 	and.w	r3, r3, #4
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d118      	bne.n	800efac <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef7a:	4b1b      	ldr	r3, [pc, #108]	; (800efe8 <tcp_input+0x804>)
 800ef7c:	6819      	ldr	r1, [r3, #0]
 800ef7e:	4b1b      	ldr	r3, [pc, #108]	; (800efec <tcp_input+0x808>)
 800ef80:	881b      	ldrh	r3, [r3, #0]
 800ef82:	461a      	mov	r2, r3
 800ef84:	4b1a      	ldr	r3, [pc, #104]	; (800eff0 <tcp_input+0x80c>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ef8a:	4b16      	ldr	r3, [pc, #88]	; (800efe4 <tcp_input+0x800>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef8e:	885b      	ldrh	r3, [r3, #2]
 800ef90:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ef92:	4a14      	ldr	r2, [pc, #80]	; (800efe4 <tcp_input+0x800>)
 800ef94:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef96:	8812      	ldrh	r2, [r2, #0]
 800ef98:	b292      	uxth	r2, r2
 800ef9a:	9202      	str	r2, [sp, #8]
 800ef9c:	9301      	str	r3, [sp, #4]
 800ef9e:	4b15      	ldr	r3, [pc, #84]	; (800eff4 <tcp_input+0x810>)
 800efa0:	9300      	str	r3, [sp, #0]
 800efa2:	4b15      	ldr	r3, [pc, #84]	; (800eff8 <tcp_input+0x814>)
 800efa4:	4602      	mov	r2, r0
 800efa6:	2000      	movs	r0, #0
 800efa8:	f003 fc74 	bl	8012894 <tcp_rst>
    pbuf_free(p);
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f7fd fad3 	bl	800c558 <pbuf_free>
  return;
 800efb2:	e00c      	b.n	800efce <tcp_input+0x7ea>
    goto dropped;
 800efb4:	bf00      	nop
 800efb6:	e006      	b.n	800efc6 <tcp_input+0x7e2>
    goto dropped;
 800efb8:	bf00      	nop
 800efba:	e004      	b.n	800efc6 <tcp_input+0x7e2>
    goto dropped;
 800efbc:	bf00      	nop
 800efbe:	e002      	b.n	800efc6 <tcp_input+0x7e2>
      goto dropped;
 800efc0:	bf00      	nop
 800efc2:	e000      	b.n	800efc6 <tcp_input+0x7e2>
      goto dropped;
 800efc4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	f7fd fac6 	bl	800c558 <pbuf_free>
 800efcc:	e000      	b.n	800efd0 <tcp_input+0x7ec>
  return;
 800efce:	bf00      	nop
}
 800efd0:	3724      	adds	r7, #36	; 0x24
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd90      	pop	{r4, r7, pc}
 800efd6:	bf00      	nop
 800efd8:	20010da8 	.word	0x20010da8
 800efdc:	20010da4 	.word	0x20010da4
 800efe0:	20010d74 	.word	0x20010d74
 800efe4:	20010d84 	.word	0x20010d84
 800efe8:	20010d98 	.word	0x20010d98
 800efec:	20010d9e 	.word	0x20010d9e
 800eff0:	20010d94 	.word	0x20010d94
 800eff4:	2000d5f8 	.word	0x2000d5f8
 800eff8:	2000d5fc 	.word	0x2000d5fc

0800effc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b082      	sub	sp, #8
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d106      	bne.n	800f018 <tcp_input_delayed_close+0x1c>
 800f00a:	4b17      	ldr	r3, [pc, #92]	; (800f068 <tcp_input_delayed_close+0x6c>)
 800f00c:	f240 225a 	movw	r2, #602	; 0x25a
 800f010:	4916      	ldr	r1, [pc, #88]	; (800f06c <tcp_input_delayed_close+0x70>)
 800f012:	4817      	ldr	r0, [pc, #92]	; (800f070 <tcp_input_delayed_close+0x74>)
 800f014:	f009 f88c 	bl	8018130 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f018:	4b16      	ldr	r3, [pc, #88]	; (800f074 <tcp_input_delayed_close+0x78>)
 800f01a:	781b      	ldrb	r3, [r3, #0]
 800f01c:	f003 0310 	and.w	r3, r3, #16
 800f020:	2b00      	cmp	r3, #0
 800f022:	d01c      	beq.n	800f05e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	8b5b      	ldrh	r3, [r3, #26]
 800f028:	f003 0310 	and.w	r3, r3, #16
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d10d      	bne.n	800f04c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f036:	2b00      	cmp	r3, #0
 800f038:	d008      	beq.n	800f04c <tcp_input_delayed_close+0x50>
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f040:	687a      	ldr	r2, [r7, #4]
 800f042:	6912      	ldr	r2, [r2, #16]
 800f044:	f06f 010e 	mvn.w	r1, #14
 800f048:	4610      	mov	r0, r2
 800f04a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f04c:	6879      	ldr	r1, [r7, #4]
 800f04e:	480a      	ldr	r0, [pc, #40]	; (800f078 <tcp_input_delayed_close+0x7c>)
 800f050:	f7ff fa50 	bl	800e4f4 <tcp_pcb_remove>
    tcp_free(pcb);
 800f054:	6878      	ldr	r0, [r7, #4]
 800f056:	f7fd fd3b 	bl	800cad0 <tcp_free>
    return 1;
 800f05a:	2301      	movs	r3, #1
 800f05c:	e000      	b.n	800f060 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f05e:	2300      	movs	r3, #0
}
 800f060:	4618      	mov	r0, r3
 800f062:	3708      	adds	r7, #8
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}
 800f068:	0801b070 	.word	0x0801b070
 800f06c:	0801b240 	.word	0x0801b240
 800f070:	0801b0bc 	.word	0x0801b0bc
 800f074:	20010da1 	.word	0x20010da1
 800f078:	20010d68 	.word	0x20010d68

0800f07c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f07c:	b590      	push	{r4, r7, lr}
 800f07e:	b08b      	sub	sp, #44	; 0x2c
 800f080:	af04      	add	r7, sp, #16
 800f082:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f084:	4b6f      	ldr	r3, [pc, #444]	; (800f244 <tcp_listen_input+0x1c8>)
 800f086:	781b      	ldrb	r3, [r3, #0]
 800f088:	f003 0304 	and.w	r3, r3, #4
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	f040 80d2 	bne.w	800f236 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d106      	bne.n	800f0a6 <tcp_listen_input+0x2a>
 800f098:	4b6b      	ldr	r3, [pc, #428]	; (800f248 <tcp_listen_input+0x1cc>)
 800f09a:	f240 2281 	movw	r2, #641	; 0x281
 800f09e:	496b      	ldr	r1, [pc, #428]	; (800f24c <tcp_listen_input+0x1d0>)
 800f0a0:	486b      	ldr	r0, [pc, #428]	; (800f250 <tcp_listen_input+0x1d4>)
 800f0a2:	f009 f845 	bl	8018130 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f0a6:	4b67      	ldr	r3, [pc, #412]	; (800f244 <tcp_listen_input+0x1c8>)
 800f0a8:	781b      	ldrb	r3, [r3, #0]
 800f0aa:	f003 0310 	and.w	r3, r3, #16
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d019      	beq.n	800f0e6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0b2:	4b68      	ldr	r3, [pc, #416]	; (800f254 <tcp_listen_input+0x1d8>)
 800f0b4:	6819      	ldr	r1, [r3, #0]
 800f0b6:	4b68      	ldr	r3, [pc, #416]	; (800f258 <tcp_listen_input+0x1dc>)
 800f0b8:	881b      	ldrh	r3, [r3, #0]
 800f0ba:	461a      	mov	r2, r3
 800f0bc:	4b67      	ldr	r3, [pc, #412]	; (800f25c <tcp_listen_input+0x1e0>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f0c2:	4b67      	ldr	r3, [pc, #412]	; (800f260 <tcp_listen_input+0x1e4>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0c6:	885b      	ldrh	r3, [r3, #2]
 800f0c8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f0ca:	4a65      	ldr	r2, [pc, #404]	; (800f260 <tcp_listen_input+0x1e4>)
 800f0cc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0ce:	8812      	ldrh	r2, [r2, #0]
 800f0d0:	b292      	uxth	r2, r2
 800f0d2:	9202      	str	r2, [sp, #8]
 800f0d4:	9301      	str	r3, [sp, #4]
 800f0d6:	4b63      	ldr	r3, [pc, #396]	; (800f264 <tcp_listen_input+0x1e8>)
 800f0d8:	9300      	str	r3, [sp, #0]
 800f0da:	4b63      	ldr	r3, [pc, #396]	; (800f268 <tcp_listen_input+0x1ec>)
 800f0dc:	4602      	mov	r2, r0
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f003 fbd8 	bl	8012894 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f0e4:	e0a9      	b.n	800f23a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f0e6:	4b57      	ldr	r3, [pc, #348]	; (800f244 <tcp_listen_input+0x1c8>)
 800f0e8:	781b      	ldrb	r3, [r3, #0]
 800f0ea:	f003 0302 	and.w	r3, r3, #2
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	f000 80a3 	beq.w	800f23a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	7d5b      	ldrb	r3, [r3, #21]
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f7ff f859 	bl	800e1b0 <tcp_alloc>
 800f0fe:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f100:	697b      	ldr	r3, [r7, #20]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d111      	bne.n	800f12a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	699b      	ldr	r3, [r3, #24]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d00a      	beq.n	800f124 <tcp_listen_input+0xa8>
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	699b      	ldr	r3, [r3, #24]
 800f112:	687a      	ldr	r2, [r7, #4]
 800f114:	6910      	ldr	r0, [r2, #16]
 800f116:	f04f 32ff 	mov.w	r2, #4294967295
 800f11a:	2100      	movs	r1, #0
 800f11c:	4798      	blx	r3
 800f11e:	4603      	mov	r3, r0
 800f120:	73bb      	strb	r3, [r7, #14]
      return;
 800f122:	e08b      	b.n	800f23c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f124:	23f0      	movs	r3, #240	; 0xf0
 800f126:	73bb      	strb	r3, [r7, #14]
      return;
 800f128:	e088      	b.n	800f23c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f12a:	4b50      	ldr	r3, [pc, #320]	; (800f26c <tcp_listen_input+0x1f0>)
 800f12c:	695a      	ldr	r2, [r3, #20]
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f132:	4b4e      	ldr	r3, [pc, #312]	; (800f26c <tcp_listen_input+0x1f0>)
 800f134:	691a      	ldr	r2, [r3, #16]
 800f136:	697b      	ldr	r3, [r7, #20]
 800f138:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	8ada      	ldrh	r2, [r3, #22]
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f142:	4b47      	ldr	r3, [pc, #284]	; (800f260 <tcp_listen_input+0x1e4>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	881b      	ldrh	r3, [r3, #0]
 800f148:	b29a      	uxth	r2, r3
 800f14a:	697b      	ldr	r3, [r7, #20]
 800f14c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	2203      	movs	r2, #3
 800f152:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f154:	4b41      	ldr	r3, [pc, #260]	; (800f25c <tcp_listen_input+0x1e0>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	1c5a      	adds	r2, r3, #1
 800f15a:	697b      	ldr	r3, [r7, #20]
 800f15c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f166:	6978      	ldr	r0, [r7, #20]
 800f168:	f7ff fa58 	bl	800e61c <tcp_next_iss>
 800f16c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	693a      	ldr	r2, [r7, #16]
 800f172:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800f174:	697b      	ldr	r3, [r7, #20]
 800f176:	693a      	ldr	r2, [r7, #16]
 800f178:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	693a      	ldr	r2, [r7, #16]
 800f17e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	693a      	ldr	r2, [r7, #16]
 800f184:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f186:	4b35      	ldr	r3, [pc, #212]	; (800f25c <tcp_listen_input+0x1e0>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	1e5a      	subs	r2, r3, #1
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	691a      	ldr	r2, [r3, #16]
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f198:	697b      	ldr	r3, [r7, #20]
 800f19a:	687a      	ldr	r2, [r7, #4]
 800f19c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	7a5b      	ldrb	r3, [r3, #9]
 800f1a2:	f003 030c 	and.w	r3, r3, #12
 800f1a6:	b2da      	uxtb	r2, r3
 800f1a8:	697b      	ldr	r3, [r7, #20]
 800f1aa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	7a1a      	ldrb	r2, [r3, #8]
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f1b4:	4b2e      	ldr	r3, [pc, #184]	; (800f270 <tcp_listen_input+0x1f4>)
 800f1b6:	681a      	ldr	r2, [r3, #0]
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	60da      	str	r2, [r3, #12]
 800f1bc:	4a2c      	ldr	r2, [pc, #176]	; (800f270 <tcp_listen_input+0x1f4>)
 800f1be:	697b      	ldr	r3, [r7, #20]
 800f1c0:	6013      	str	r3, [r2, #0]
 800f1c2:	f003 fd29 	bl	8012c18 <tcp_timer_needed>
 800f1c6:	4b2b      	ldr	r3, [pc, #172]	; (800f274 <tcp_listen_input+0x1f8>)
 800f1c8:	2201      	movs	r2, #1
 800f1ca:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f1cc:	6978      	ldr	r0, [r7, #20]
 800f1ce:	f001 fd8f 	bl	8010cf0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f1d2:	4b23      	ldr	r3, [pc, #140]	; (800f260 <tcp_listen_input+0x1e4>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	89db      	ldrh	r3, [r3, #14]
 800f1d8:	b29a      	uxth	r2, r3
 800f1da:	697b      	ldr	r3, [r7, #20]
 800f1dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f1e6:	697b      	ldr	r3, [r7, #20]
 800f1e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f1ec:	697b      	ldr	r3, [r7, #20]
 800f1ee:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f1f0:	697b      	ldr	r3, [r7, #20]
 800f1f2:	3304      	adds	r3, #4
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f007 fac1 	bl	801677c <ip4_route>
 800f1fa:	4601      	mov	r1, r0
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	3304      	adds	r3, #4
 800f200:	461a      	mov	r2, r3
 800f202:	4620      	mov	r0, r4
 800f204:	f7ff fa30 	bl	800e668 <tcp_eff_send_mss_netif>
 800f208:	4603      	mov	r3, r0
 800f20a:	461a      	mov	r2, r3
 800f20c:	697b      	ldr	r3, [r7, #20]
 800f20e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f210:	2112      	movs	r1, #18
 800f212:	6978      	ldr	r0, [r7, #20]
 800f214:	f002 fc9c 	bl	8011b50 <tcp_enqueue_flags>
 800f218:	4603      	mov	r3, r0
 800f21a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f21c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d004      	beq.n	800f22e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f224:	2100      	movs	r1, #0
 800f226:	6978      	ldr	r0, [r7, #20]
 800f228:	f7fd fed8 	bl	800cfdc <tcp_abandon>
      return;
 800f22c:	e006      	b.n	800f23c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f22e:	6978      	ldr	r0, [r7, #20]
 800f230:	f002 fd7c 	bl	8011d2c <tcp_output>
  return;
 800f234:	e001      	b.n	800f23a <tcp_listen_input+0x1be>
    return;
 800f236:	bf00      	nop
 800f238:	e000      	b.n	800f23c <tcp_listen_input+0x1c0>
  return;
 800f23a:	bf00      	nop
}
 800f23c:	371c      	adds	r7, #28
 800f23e:	46bd      	mov	sp, r7
 800f240:	bd90      	pop	{r4, r7, pc}
 800f242:	bf00      	nop
 800f244:	20010da0 	.word	0x20010da0
 800f248:	0801b070 	.word	0x0801b070
 800f24c:	0801b268 	.word	0x0801b268
 800f250:	0801b0bc 	.word	0x0801b0bc
 800f254:	20010d98 	.word	0x20010d98
 800f258:	20010d9e 	.word	0x20010d9e
 800f25c:	20010d94 	.word	0x20010d94
 800f260:	20010d84 	.word	0x20010d84
 800f264:	2000d5f8 	.word	0x2000d5f8
 800f268:	2000d5fc 	.word	0x2000d5fc
 800f26c:	2000d5e8 	.word	0x2000d5e8
 800f270:	20010d68 	.word	0x20010d68
 800f274:	20010d70 	.word	0x20010d70

0800f278 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b086      	sub	sp, #24
 800f27c:	af04      	add	r7, sp, #16
 800f27e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f280:	4b2f      	ldr	r3, [pc, #188]	; (800f340 <tcp_timewait_input+0xc8>)
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	f003 0304 	and.w	r3, r3, #4
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d153      	bne.n	800f334 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d106      	bne.n	800f2a0 <tcp_timewait_input+0x28>
 800f292:	4b2c      	ldr	r3, [pc, #176]	; (800f344 <tcp_timewait_input+0xcc>)
 800f294:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f298:	492b      	ldr	r1, [pc, #172]	; (800f348 <tcp_timewait_input+0xd0>)
 800f29a:	482c      	ldr	r0, [pc, #176]	; (800f34c <tcp_timewait_input+0xd4>)
 800f29c:	f008 ff48 	bl	8018130 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f2a0:	4b27      	ldr	r3, [pc, #156]	; (800f340 <tcp_timewait_input+0xc8>)
 800f2a2:	781b      	ldrb	r3, [r3, #0]
 800f2a4:	f003 0302 	and.w	r3, r3, #2
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d02a      	beq.n	800f302 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f2ac:	4b28      	ldr	r3, [pc, #160]	; (800f350 <tcp_timewait_input+0xd8>)
 800f2ae:	681a      	ldr	r2, [r3, #0]
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2b4:	1ad3      	subs	r3, r2, r3
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	db2d      	blt.n	800f316 <tcp_timewait_input+0x9e>
 800f2ba:	4b25      	ldr	r3, [pc, #148]	; (800f350 <tcp_timewait_input+0xd8>)
 800f2bc:	681a      	ldr	r2, [r3, #0]
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2c2:	6879      	ldr	r1, [r7, #4]
 800f2c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f2c6:	440b      	add	r3, r1
 800f2c8:	1ad3      	subs	r3, r2, r3
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	dc23      	bgt.n	800f316 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2ce:	4b21      	ldr	r3, [pc, #132]	; (800f354 <tcp_timewait_input+0xdc>)
 800f2d0:	6819      	ldr	r1, [r3, #0]
 800f2d2:	4b21      	ldr	r3, [pc, #132]	; (800f358 <tcp_timewait_input+0xe0>)
 800f2d4:	881b      	ldrh	r3, [r3, #0]
 800f2d6:	461a      	mov	r2, r3
 800f2d8:	4b1d      	ldr	r3, [pc, #116]	; (800f350 <tcp_timewait_input+0xd8>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f2de:	4b1f      	ldr	r3, [pc, #124]	; (800f35c <tcp_timewait_input+0xe4>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2e2:	885b      	ldrh	r3, [r3, #2]
 800f2e4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f2e6:	4a1d      	ldr	r2, [pc, #116]	; (800f35c <tcp_timewait_input+0xe4>)
 800f2e8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2ea:	8812      	ldrh	r2, [r2, #0]
 800f2ec:	b292      	uxth	r2, r2
 800f2ee:	9202      	str	r2, [sp, #8]
 800f2f0:	9301      	str	r3, [sp, #4]
 800f2f2:	4b1b      	ldr	r3, [pc, #108]	; (800f360 <tcp_timewait_input+0xe8>)
 800f2f4:	9300      	str	r3, [sp, #0]
 800f2f6:	4b1b      	ldr	r3, [pc, #108]	; (800f364 <tcp_timewait_input+0xec>)
 800f2f8:	4602      	mov	r2, r0
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	f003 faca 	bl	8012894 <tcp_rst>
      return;
 800f300:	e01b      	b.n	800f33a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f302:	4b0f      	ldr	r3, [pc, #60]	; (800f340 <tcp_timewait_input+0xc8>)
 800f304:	781b      	ldrb	r3, [r3, #0]
 800f306:	f003 0301 	and.w	r3, r3, #1
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d003      	beq.n	800f316 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f30e:	4b16      	ldr	r3, [pc, #88]	; (800f368 <tcp_timewait_input+0xf0>)
 800f310:	681a      	ldr	r2, [r3, #0]
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f316:	4b10      	ldr	r3, [pc, #64]	; (800f358 <tcp_timewait_input+0xe0>)
 800f318:	881b      	ldrh	r3, [r3, #0]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d00c      	beq.n	800f338 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	8b5b      	ldrh	r3, [r3, #26]
 800f322:	f043 0302 	orr.w	r3, r3, #2
 800f326:	b29a      	uxth	r2, r3
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f002 fcfd 	bl	8011d2c <tcp_output>
  }
  return;
 800f332:	e001      	b.n	800f338 <tcp_timewait_input+0xc0>
    return;
 800f334:	bf00      	nop
 800f336:	e000      	b.n	800f33a <tcp_timewait_input+0xc2>
  return;
 800f338:	bf00      	nop
}
 800f33a:	3708      	adds	r7, #8
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}
 800f340:	20010da0 	.word	0x20010da0
 800f344:	0801b070 	.word	0x0801b070
 800f348:	0801b288 	.word	0x0801b288
 800f34c:	0801b0bc 	.word	0x0801b0bc
 800f350:	20010d94 	.word	0x20010d94
 800f354:	20010d98 	.word	0x20010d98
 800f358:	20010d9e 	.word	0x20010d9e
 800f35c:	20010d84 	.word	0x20010d84
 800f360:	2000d5f8 	.word	0x2000d5f8
 800f364:	2000d5fc 	.word	0x2000d5fc
 800f368:	20010d5c 	.word	0x20010d5c

0800f36c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f36c:	b590      	push	{r4, r7, lr}
 800f36e:	b08d      	sub	sp, #52	; 0x34
 800f370:	af04      	add	r7, sp, #16
 800f372:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f374:	2300      	movs	r3, #0
 800f376:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f378:	2300      	movs	r3, #0
 800f37a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d106      	bne.n	800f390 <tcp_process+0x24>
 800f382:	4b9d      	ldr	r3, [pc, #628]	; (800f5f8 <tcp_process+0x28c>)
 800f384:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f388:	499c      	ldr	r1, [pc, #624]	; (800f5fc <tcp_process+0x290>)
 800f38a:	489d      	ldr	r0, [pc, #628]	; (800f600 <tcp_process+0x294>)
 800f38c:	f008 fed0 	bl	8018130 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f390:	4b9c      	ldr	r3, [pc, #624]	; (800f604 <tcp_process+0x298>)
 800f392:	781b      	ldrb	r3, [r3, #0]
 800f394:	f003 0304 	and.w	r3, r3, #4
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d04e      	beq.n	800f43a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	7d1b      	ldrb	r3, [r3, #20]
 800f3a0:	2b02      	cmp	r3, #2
 800f3a2:	d108      	bne.n	800f3b6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f3a8:	4b97      	ldr	r3, [pc, #604]	; (800f608 <tcp_process+0x29c>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	429a      	cmp	r2, r3
 800f3ae:	d123      	bne.n	800f3f8 <tcp_process+0x8c>
        acceptable = 1;
 800f3b0:	2301      	movs	r3, #1
 800f3b2:	76fb      	strb	r3, [r7, #27]
 800f3b4:	e020      	b.n	800f3f8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f3ba:	4b94      	ldr	r3, [pc, #592]	; (800f60c <tcp_process+0x2a0>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	429a      	cmp	r2, r3
 800f3c0:	d102      	bne.n	800f3c8 <tcp_process+0x5c>
        acceptable = 1;
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	76fb      	strb	r3, [r7, #27]
 800f3c6:	e017      	b.n	800f3f8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f3c8:	4b90      	ldr	r3, [pc, #576]	; (800f60c <tcp_process+0x2a0>)
 800f3ca:	681a      	ldr	r2, [r3, #0]
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3d0:	1ad3      	subs	r3, r2, r3
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	db10      	blt.n	800f3f8 <tcp_process+0x8c>
 800f3d6:	4b8d      	ldr	r3, [pc, #564]	; (800f60c <tcp_process+0x2a0>)
 800f3d8:	681a      	ldr	r2, [r3, #0]
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3de:	6879      	ldr	r1, [r7, #4]
 800f3e0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f3e2:	440b      	add	r3, r1
 800f3e4:	1ad3      	subs	r3, r2, r3
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	dc06      	bgt.n	800f3f8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	8b5b      	ldrh	r3, [r3, #26]
 800f3ee:	f043 0302 	orr.w	r3, r3, #2
 800f3f2:	b29a      	uxth	r2, r3
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f3f8:	7efb      	ldrb	r3, [r7, #27]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d01b      	beq.n	800f436 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	7d1b      	ldrb	r3, [r3, #20]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d106      	bne.n	800f414 <tcp_process+0xa8>
 800f406:	4b7c      	ldr	r3, [pc, #496]	; (800f5f8 <tcp_process+0x28c>)
 800f408:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f40c:	4980      	ldr	r1, [pc, #512]	; (800f610 <tcp_process+0x2a4>)
 800f40e:	487c      	ldr	r0, [pc, #496]	; (800f600 <tcp_process+0x294>)
 800f410:	f008 fe8e 	bl	8018130 <iprintf>
      recv_flags |= TF_RESET;
 800f414:	4b7f      	ldr	r3, [pc, #508]	; (800f614 <tcp_process+0x2a8>)
 800f416:	781b      	ldrb	r3, [r3, #0]
 800f418:	f043 0308 	orr.w	r3, r3, #8
 800f41c:	b2da      	uxtb	r2, r3
 800f41e:	4b7d      	ldr	r3, [pc, #500]	; (800f614 <tcp_process+0x2a8>)
 800f420:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	8b5b      	ldrh	r3, [r3, #26]
 800f426:	f023 0301 	bic.w	r3, r3, #1
 800f42a:	b29a      	uxth	r2, r3
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f430:	f06f 030d 	mvn.w	r3, #13
 800f434:	e37a      	b.n	800fb2c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f436:	2300      	movs	r3, #0
 800f438:	e378      	b.n	800fb2c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f43a:	4b72      	ldr	r3, [pc, #456]	; (800f604 <tcp_process+0x298>)
 800f43c:	781b      	ldrb	r3, [r3, #0]
 800f43e:	f003 0302 	and.w	r3, r3, #2
 800f442:	2b00      	cmp	r3, #0
 800f444:	d010      	beq.n	800f468 <tcp_process+0xfc>
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	7d1b      	ldrb	r3, [r3, #20]
 800f44a:	2b02      	cmp	r3, #2
 800f44c:	d00c      	beq.n	800f468 <tcp_process+0xfc>
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	7d1b      	ldrb	r3, [r3, #20]
 800f452:	2b03      	cmp	r3, #3
 800f454:	d008      	beq.n	800f468 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	8b5b      	ldrh	r3, [r3, #26]
 800f45a:	f043 0302 	orr.w	r3, r3, #2
 800f45e:	b29a      	uxth	r2, r3
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f464:	2300      	movs	r3, #0
 800f466:	e361      	b.n	800fb2c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	8b5b      	ldrh	r3, [r3, #26]
 800f46c:	f003 0310 	and.w	r3, r3, #16
 800f470:	2b00      	cmp	r3, #0
 800f472:	d103      	bne.n	800f47c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f474:	4b68      	ldr	r3, [pc, #416]	; (800f618 <tcp_process+0x2ac>)
 800f476:	681a      	ldr	r2, [r3, #0]
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2200      	movs	r2, #0
 800f480:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2200      	movs	r2, #0
 800f488:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f001 fc2f 	bl	8010cf0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	7d1b      	ldrb	r3, [r3, #20]
 800f496:	3b02      	subs	r3, #2
 800f498:	2b07      	cmp	r3, #7
 800f49a:	f200 8337 	bhi.w	800fb0c <tcp_process+0x7a0>
 800f49e:	a201      	add	r2, pc, #4	; (adr r2, 800f4a4 <tcp_process+0x138>)
 800f4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4a4:	0800f4c5 	.word	0x0800f4c5
 800f4a8:	0800f6f5 	.word	0x0800f6f5
 800f4ac:	0800f86d 	.word	0x0800f86d
 800f4b0:	0800f897 	.word	0x0800f897
 800f4b4:	0800f9bb 	.word	0x0800f9bb
 800f4b8:	0800f86d 	.word	0x0800f86d
 800f4bc:	0800fa47 	.word	0x0800fa47
 800f4c0:	0800fad7 	.word	0x0800fad7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f4c4:	4b4f      	ldr	r3, [pc, #316]	; (800f604 <tcp_process+0x298>)
 800f4c6:	781b      	ldrb	r3, [r3, #0]
 800f4c8:	f003 0310 	and.w	r3, r3, #16
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	f000 80e4 	beq.w	800f69a <tcp_process+0x32e>
 800f4d2:	4b4c      	ldr	r3, [pc, #304]	; (800f604 <tcp_process+0x298>)
 800f4d4:	781b      	ldrb	r3, [r3, #0]
 800f4d6:	f003 0302 	and.w	r3, r3, #2
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	f000 80dd 	beq.w	800f69a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4e4:	1c5a      	adds	r2, r3, #1
 800f4e6:	4b48      	ldr	r3, [pc, #288]	; (800f608 <tcp_process+0x29c>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	429a      	cmp	r2, r3
 800f4ec:	f040 80d5 	bne.w	800f69a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f4f0:	4b46      	ldr	r3, [pc, #280]	; (800f60c <tcp_process+0x2a0>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	1c5a      	adds	r2, r3, #1
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f502:	4b41      	ldr	r3, [pc, #260]	; (800f608 <tcp_process+0x29c>)
 800f504:	681a      	ldr	r2, [r3, #0]
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f50a:	4b44      	ldr	r3, [pc, #272]	; (800f61c <tcp_process+0x2b0>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	89db      	ldrh	r3, [r3, #14]
 800f510:	b29a      	uxth	r2, r3
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f524:	4b39      	ldr	r3, [pc, #228]	; (800f60c <tcp_process+0x2a0>)
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	1e5a      	subs	r2, r3, #1
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2204      	movs	r2, #4
 800f532:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	3304      	adds	r3, #4
 800f53c:	4618      	mov	r0, r3
 800f53e:	f007 f91d 	bl	801677c <ip4_route>
 800f542:	4601      	mov	r1, r0
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	3304      	adds	r3, #4
 800f548:	461a      	mov	r2, r3
 800f54a:	4620      	mov	r0, r4
 800f54c:	f7ff f88c 	bl	800e668 <tcp_eff_send_mss_netif>
 800f550:	4603      	mov	r3, r0
 800f552:	461a      	mov	r2, r3
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f55c:	009a      	lsls	r2, r3, #2
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f562:	005b      	lsls	r3, r3, #1
 800f564:	f241 111c 	movw	r1, #4380	; 0x111c
 800f568:	428b      	cmp	r3, r1
 800f56a:	bf38      	it	cc
 800f56c:	460b      	movcc	r3, r1
 800f56e:	429a      	cmp	r2, r3
 800f570:	d204      	bcs.n	800f57c <tcp_process+0x210>
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f576:	009b      	lsls	r3, r3, #2
 800f578:	b29b      	uxth	r3, r3
 800f57a:	e00d      	b.n	800f598 <tcp_process+0x22c>
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f580:	005b      	lsls	r3, r3, #1
 800f582:	f241 121c 	movw	r2, #4380	; 0x111c
 800f586:	4293      	cmp	r3, r2
 800f588:	d904      	bls.n	800f594 <tcp_process+0x228>
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f58e:	005b      	lsls	r3, r3, #1
 800f590:	b29b      	uxth	r3, r3
 800f592:	e001      	b.n	800f598 <tcp_process+0x22c>
 800f594:	f241 131c 	movw	r3, #4380	; 0x111c
 800f598:	687a      	ldr	r2, [r7, #4]
 800f59a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d106      	bne.n	800f5b6 <tcp_process+0x24a>
 800f5a8:	4b13      	ldr	r3, [pc, #76]	; (800f5f8 <tcp_process+0x28c>)
 800f5aa:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f5ae:	491c      	ldr	r1, [pc, #112]	; (800f620 <tcp_process+0x2b4>)
 800f5b0:	4813      	ldr	r0, [pc, #76]	; (800f600 <tcp_process+0x294>)
 800f5b2:	f008 fdbd 	bl	8018130 <iprintf>
        --pcb->snd_queuelen;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f5bc:	3b01      	subs	r3, #1
 800f5be:	b29a      	uxth	r2, r3
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5ca:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f5cc:	69fb      	ldr	r3, [r7, #28]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d12a      	bne.n	800f628 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5d6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f5d8:	69fb      	ldr	r3, [r7, #28]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d106      	bne.n	800f5ec <tcp_process+0x280>
 800f5de:	4b06      	ldr	r3, [pc, #24]	; (800f5f8 <tcp_process+0x28c>)
 800f5e0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f5e4:	490f      	ldr	r1, [pc, #60]	; (800f624 <tcp_process+0x2b8>)
 800f5e6:	4806      	ldr	r0, [pc, #24]	; (800f600 <tcp_process+0x294>)
 800f5e8:	f008 fda2 	bl	8018130 <iprintf>
          pcb->unsent = rseg->next;
 800f5ec:	69fb      	ldr	r3, [r7, #28]
 800f5ee:	681a      	ldr	r2, [r3, #0]
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	66da      	str	r2, [r3, #108]	; 0x6c
 800f5f4:	e01c      	b.n	800f630 <tcp_process+0x2c4>
 800f5f6:	bf00      	nop
 800f5f8:	0801b070 	.word	0x0801b070
 800f5fc:	0801b2a8 	.word	0x0801b2a8
 800f600:	0801b0bc 	.word	0x0801b0bc
 800f604:	20010da0 	.word	0x20010da0
 800f608:	20010d98 	.word	0x20010d98
 800f60c:	20010d94 	.word	0x20010d94
 800f610:	0801b2c4 	.word	0x0801b2c4
 800f614:	20010da1 	.word	0x20010da1
 800f618:	20010d5c 	.word	0x20010d5c
 800f61c:	20010d84 	.word	0x20010d84
 800f620:	0801b2e4 	.word	0x0801b2e4
 800f624:	0801b2fc 	.word	0x0801b2fc
        } else {
          pcb->unacked = rseg->next;
 800f628:	69fb      	ldr	r3, [r7, #28]
 800f62a:	681a      	ldr	r2, [r3, #0]
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f630:	69f8      	ldr	r0, [r7, #28]
 800f632:	f7fe fc36 	bl	800dea2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d104      	bne.n	800f648 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f644:	861a      	strh	r2, [r3, #48]	; 0x30
 800f646:	e006      	b.n	800f656 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2200      	movs	r2, #0
 800f64c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	2200      	movs	r2, #0
 800f652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d00a      	beq.n	800f676 <tcp_process+0x30a>
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f666:	687a      	ldr	r2, [r7, #4]
 800f668:	6910      	ldr	r0, [r2, #16]
 800f66a:	2200      	movs	r2, #0
 800f66c:	6879      	ldr	r1, [r7, #4]
 800f66e:	4798      	blx	r3
 800f670:	4603      	mov	r3, r0
 800f672:	76bb      	strb	r3, [r7, #26]
 800f674:	e001      	b.n	800f67a <tcp_process+0x30e>
 800f676:	2300      	movs	r3, #0
 800f678:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f67a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f67e:	f113 0f0d 	cmn.w	r3, #13
 800f682:	d102      	bne.n	800f68a <tcp_process+0x31e>
          return ERR_ABRT;
 800f684:	f06f 030c 	mvn.w	r3, #12
 800f688:	e250      	b.n	800fb2c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	8b5b      	ldrh	r3, [r3, #26]
 800f68e:	f043 0302 	orr.w	r3, r3, #2
 800f692:	b29a      	uxth	r2, r3
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f698:	e23a      	b.n	800fb10 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f69a:	4b98      	ldr	r3, [pc, #608]	; (800f8fc <tcp_process+0x590>)
 800f69c:	781b      	ldrb	r3, [r3, #0]
 800f69e:	f003 0310 	and.w	r3, r3, #16
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	f000 8234 	beq.w	800fb10 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f6a8:	4b95      	ldr	r3, [pc, #596]	; (800f900 <tcp_process+0x594>)
 800f6aa:	6819      	ldr	r1, [r3, #0]
 800f6ac:	4b95      	ldr	r3, [pc, #596]	; (800f904 <tcp_process+0x598>)
 800f6ae:	881b      	ldrh	r3, [r3, #0]
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	4b95      	ldr	r3, [pc, #596]	; (800f908 <tcp_process+0x59c>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f6b8:	4b94      	ldr	r3, [pc, #592]	; (800f90c <tcp_process+0x5a0>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f6bc:	885b      	ldrh	r3, [r3, #2]
 800f6be:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f6c0:	4a92      	ldr	r2, [pc, #584]	; (800f90c <tcp_process+0x5a0>)
 800f6c2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f6c4:	8812      	ldrh	r2, [r2, #0]
 800f6c6:	b292      	uxth	r2, r2
 800f6c8:	9202      	str	r2, [sp, #8]
 800f6ca:	9301      	str	r3, [sp, #4]
 800f6cc:	4b90      	ldr	r3, [pc, #576]	; (800f910 <tcp_process+0x5a4>)
 800f6ce:	9300      	str	r3, [sp, #0]
 800f6d0:	4b90      	ldr	r3, [pc, #576]	; (800f914 <tcp_process+0x5a8>)
 800f6d2:	4602      	mov	r2, r0
 800f6d4:	6878      	ldr	r0, [r7, #4]
 800f6d6:	f003 f8dd 	bl	8012894 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f6e0:	2b05      	cmp	r3, #5
 800f6e2:	f200 8215 	bhi.w	800fb10 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f002 fea9 	bl	8012444 <tcp_rexmit_rto>
      break;
 800f6f2:	e20d      	b.n	800fb10 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f6f4:	4b81      	ldr	r3, [pc, #516]	; (800f8fc <tcp_process+0x590>)
 800f6f6:	781b      	ldrb	r3, [r3, #0]
 800f6f8:	f003 0310 	and.w	r3, r3, #16
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	f000 80a1 	beq.w	800f844 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f702:	4b7f      	ldr	r3, [pc, #508]	; (800f900 <tcp_process+0x594>)
 800f704:	681a      	ldr	r2, [r3, #0]
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f70a:	1ad3      	subs	r3, r2, r3
 800f70c:	3b01      	subs	r3, #1
 800f70e:	2b00      	cmp	r3, #0
 800f710:	db7e      	blt.n	800f810 <tcp_process+0x4a4>
 800f712:	4b7b      	ldr	r3, [pc, #492]	; (800f900 <tcp_process+0x594>)
 800f714:	681a      	ldr	r2, [r3, #0]
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f71a:	1ad3      	subs	r3, r2, r3
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	dc77      	bgt.n	800f810 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2204      	movs	r2, #4
 800f724:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d102      	bne.n	800f734 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f72e:	23fa      	movs	r3, #250	; 0xfa
 800f730:	76bb      	strb	r3, [r7, #26]
 800f732:	e01d      	b.n	800f770 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f738:	699b      	ldr	r3, [r3, #24]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d106      	bne.n	800f74c <tcp_process+0x3e0>
 800f73e:	4b76      	ldr	r3, [pc, #472]	; (800f918 <tcp_process+0x5ac>)
 800f740:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800f744:	4975      	ldr	r1, [pc, #468]	; (800f91c <tcp_process+0x5b0>)
 800f746:	4876      	ldr	r0, [pc, #472]	; (800f920 <tcp_process+0x5b4>)
 800f748:	f008 fcf2 	bl	8018130 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f750:	699b      	ldr	r3, [r3, #24]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d00a      	beq.n	800f76c <tcp_process+0x400>
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f75a:	699b      	ldr	r3, [r3, #24]
 800f75c:	687a      	ldr	r2, [r7, #4]
 800f75e:	6910      	ldr	r0, [r2, #16]
 800f760:	2200      	movs	r2, #0
 800f762:	6879      	ldr	r1, [r7, #4]
 800f764:	4798      	blx	r3
 800f766:	4603      	mov	r3, r0
 800f768:	76bb      	strb	r3, [r7, #26]
 800f76a:	e001      	b.n	800f770 <tcp_process+0x404>
 800f76c:	23f0      	movs	r3, #240	; 0xf0
 800f76e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f770:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d00a      	beq.n	800f78e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f778:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f77c:	f113 0f0d 	cmn.w	r3, #13
 800f780:	d002      	beq.n	800f788 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f782:	6878      	ldr	r0, [r7, #4]
 800f784:	f7fd fce8 	bl	800d158 <tcp_abort>
            }
            return ERR_ABRT;
 800f788:	f06f 030c 	mvn.w	r3, #12
 800f78c:	e1ce      	b.n	800fb2c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f78e:	6878      	ldr	r0, [r7, #4]
 800f790:	f000 fae0 	bl	800fd54 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f794:	4b63      	ldr	r3, [pc, #396]	; (800f924 <tcp_process+0x5b8>)
 800f796:	881b      	ldrh	r3, [r3, #0]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d005      	beq.n	800f7a8 <tcp_process+0x43c>
            recv_acked--;
 800f79c:	4b61      	ldr	r3, [pc, #388]	; (800f924 <tcp_process+0x5b8>)
 800f79e:	881b      	ldrh	r3, [r3, #0]
 800f7a0:	3b01      	subs	r3, #1
 800f7a2:	b29a      	uxth	r2, r3
 800f7a4:	4b5f      	ldr	r3, [pc, #380]	; (800f924 <tcp_process+0x5b8>)
 800f7a6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f7ac:	009a      	lsls	r2, r3, #2
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f7b2:	005b      	lsls	r3, r3, #1
 800f7b4:	f241 111c 	movw	r1, #4380	; 0x111c
 800f7b8:	428b      	cmp	r3, r1
 800f7ba:	bf38      	it	cc
 800f7bc:	460b      	movcc	r3, r1
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d204      	bcs.n	800f7cc <tcp_process+0x460>
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f7c6:	009b      	lsls	r3, r3, #2
 800f7c8:	b29b      	uxth	r3, r3
 800f7ca:	e00d      	b.n	800f7e8 <tcp_process+0x47c>
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f7d0:	005b      	lsls	r3, r3, #1
 800f7d2:	f241 121c 	movw	r2, #4380	; 0x111c
 800f7d6:	4293      	cmp	r3, r2
 800f7d8:	d904      	bls.n	800f7e4 <tcp_process+0x478>
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f7de:	005b      	lsls	r3, r3, #1
 800f7e0:	b29b      	uxth	r3, r3
 800f7e2:	e001      	b.n	800f7e8 <tcp_process+0x47c>
 800f7e4:	f241 131c 	movw	r3, #4380	; 0x111c
 800f7e8:	687a      	ldr	r2, [r7, #4]
 800f7ea:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f7ee:	4b4e      	ldr	r3, [pc, #312]	; (800f928 <tcp_process+0x5bc>)
 800f7f0:	781b      	ldrb	r3, [r3, #0]
 800f7f2:	f003 0320 	and.w	r3, r3, #32
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d037      	beq.n	800f86a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	8b5b      	ldrh	r3, [r3, #26]
 800f7fe:	f043 0302 	orr.w	r3, r3, #2
 800f802:	b29a      	uxth	r2, r3
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2207      	movs	r2, #7
 800f80c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f80e:	e02c      	b.n	800f86a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f810:	4b3b      	ldr	r3, [pc, #236]	; (800f900 <tcp_process+0x594>)
 800f812:	6819      	ldr	r1, [r3, #0]
 800f814:	4b3b      	ldr	r3, [pc, #236]	; (800f904 <tcp_process+0x598>)
 800f816:	881b      	ldrh	r3, [r3, #0]
 800f818:	461a      	mov	r2, r3
 800f81a:	4b3b      	ldr	r3, [pc, #236]	; (800f908 <tcp_process+0x59c>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f820:	4b3a      	ldr	r3, [pc, #232]	; (800f90c <tcp_process+0x5a0>)
 800f822:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f824:	885b      	ldrh	r3, [r3, #2]
 800f826:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f828:	4a38      	ldr	r2, [pc, #224]	; (800f90c <tcp_process+0x5a0>)
 800f82a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f82c:	8812      	ldrh	r2, [r2, #0]
 800f82e:	b292      	uxth	r2, r2
 800f830:	9202      	str	r2, [sp, #8]
 800f832:	9301      	str	r3, [sp, #4]
 800f834:	4b36      	ldr	r3, [pc, #216]	; (800f910 <tcp_process+0x5a4>)
 800f836:	9300      	str	r3, [sp, #0]
 800f838:	4b36      	ldr	r3, [pc, #216]	; (800f914 <tcp_process+0x5a8>)
 800f83a:	4602      	mov	r2, r0
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f003 f829 	bl	8012894 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f842:	e167      	b.n	800fb14 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f844:	4b2d      	ldr	r3, [pc, #180]	; (800f8fc <tcp_process+0x590>)
 800f846:	781b      	ldrb	r3, [r3, #0]
 800f848:	f003 0302 	and.w	r3, r3, #2
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	f000 8161 	beq.w	800fb14 <tcp_process+0x7a8>
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f856:	1e5a      	subs	r2, r3, #1
 800f858:	4b2b      	ldr	r3, [pc, #172]	; (800f908 <tcp_process+0x59c>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	429a      	cmp	r2, r3
 800f85e:	f040 8159 	bne.w	800fb14 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f002 fe10 	bl	8012488 <tcp_rexmit>
      break;
 800f868:	e154      	b.n	800fb14 <tcp_process+0x7a8>
 800f86a:	e153      	b.n	800fb14 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f86c:	6878      	ldr	r0, [r7, #4]
 800f86e:	f000 fa71 	bl	800fd54 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f872:	4b2d      	ldr	r3, [pc, #180]	; (800f928 <tcp_process+0x5bc>)
 800f874:	781b      	ldrb	r3, [r3, #0]
 800f876:	f003 0320 	and.w	r3, r3, #32
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	f000 814c 	beq.w	800fb18 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	8b5b      	ldrh	r3, [r3, #26]
 800f884:	f043 0302 	orr.w	r3, r3, #2
 800f888:	b29a      	uxth	r2, r3
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2207      	movs	r2, #7
 800f892:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f894:	e140      	b.n	800fb18 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	f000 fa5c 	bl	800fd54 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f89c:	4b22      	ldr	r3, [pc, #136]	; (800f928 <tcp_process+0x5bc>)
 800f89e:	781b      	ldrb	r3, [r3, #0]
 800f8a0:	f003 0320 	and.w	r3, r3, #32
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d071      	beq.n	800f98c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f8a8:	4b14      	ldr	r3, [pc, #80]	; (800f8fc <tcp_process+0x590>)
 800f8aa:	781b      	ldrb	r3, [r3, #0]
 800f8ac:	f003 0310 	and.w	r3, r3, #16
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d060      	beq.n	800f976 <tcp_process+0x60a>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f8b8:	4b11      	ldr	r3, [pc, #68]	; (800f900 <tcp_process+0x594>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	d15a      	bne.n	800f976 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d156      	bne.n	800f976 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	8b5b      	ldrh	r3, [r3, #26]
 800f8cc:	f043 0302 	orr.w	r3, r3, #2
 800f8d0:	b29a      	uxth	r2, r3
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f8d6:	6878      	ldr	r0, [r7, #4]
 800f8d8:	f7fe fdbc 	bl	800e454 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f8dc:	4b13      	ldr	r3, [pc, #76]	; (800f92c <tcp_process+0x5c0>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	687a      	ldr	r2, [r7, #4]
 800f8e2:	429a      	cmp	r2, r3
 800f8e4:	d105      	bne.n	800f8f2 <tcp_process+0x586>
 800f8e6:	4b11      	ldr	r3, [pc, #68]	; (800f92c <tcp_process+0x5c0>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	68db      	ldr	r3, [r3, #12]
 800f8ec:	4a0f      	ldr	r2, [pc, #60]	; (800f92c <tcp_process+0x5c0>)
 800f8ee:	6013      	str	r3, [r2, #0]
 800f8f0:	e02e      	b.n	800f950 <tcp_process+0x5e4>
 800f8f2:	4b0e      	ldr	r3, [pc, #56]	; (800f92c <tcp_process+0x5c0>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	617b      	str	r3, [r7, #20]
 800f8f8:	e027      	b.n	800f94a <tcp_process+0x5de>
 800f8fa:	bf00      	nop
 800f8fc:	20010da0 	.word	0x20010da0
 800f900:	20010d98 	.word	0x20010d98
 800f904:	20010d9e 	.word	0x20010d9e
 800f908:	20010d94 	.word	0x20010d94
 800f90c:	20010d84 	.word	0x20010d84
 800f910:	2000d5f8 	.word	0x2000d5f8
 800f914:	2000d5fc 	.word	0x2000d5fc
 800f918:	0801b070 	.word	0x0801b070
 800f91c:	0801b310 	.word	0x0801b310
 800f920:	0801b0bc 	.word	0x0801b0bc
 800f924:	20010d9c 	.word	0x20010d9c
 800f928:	20010da1 	.word	0x20010da1
 800f92c:	20010d68 	.word	0x20010d68
 800f930:	697b      	ldr	r3, [r7, #20]
 800f932:	68db      	ldr	r3, [r3, #12]
 800f934:	687a      	ldr	r2, [r7, #4]
 800f936:	429a      	cmp	r2, r3
 800f938:	d104      	bne.n	800f944 <tcp_process+0x5d8>
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	68da      	ldr	r2, [r3, #12]
 800f93e:	697b      	ldr	r3, [r7, #20]
 800f940:	60da      	str	r2, [r3, #12]
 800f942:	e005      	b.n	800f950 <tcp_process+0x5e4>
 800f944:	697b      	ldr	r3, [r7, #20]
 800f946:	68db      	ldr	r3, [r3, #12]
 800f948:	617b      	str	r3, [r7, #20]
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d1ef      	bne.n	800f930 <tcp_process+0x5c4>
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2200      	movs	r2, #0
 800f954:	60da      	str	r2, [r3, #12]
 800f956:	4b77      	ldr	r3, [pc, #476]	; (800fb34 <tcp_process+0x7c8>)
 800f958:	2201      	movs	r2, #1
 800f95a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	220a      	movs	r2, #10
 800f960:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f962:	4b75      	ldr	r3, [pc, #468]	; (800fb38 <tcp_process+0x7cc>)
 800f964:	681a      	ldr	r2, [r3, #0]
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	60da      	str	r2, [r3, #12]
 800f96a:	4a73      	ldr	r2, [pc, #460]	; (800fb38 <tcp_process+0x7cc>)
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6013      	str	r3, [r2, #0]
 800f970:	f003 f952 	bl	8012c18 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f974:	e0d2      	b.n	800fb1c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	8b5b      	ldrh	r3, [r3, #26]
 800f97a:	f043 0302 	orr.w	r3, r3, #2
 800f97e:	b29a      	uxth	r2, r3
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2208      	movs	r2, #8
 800f988:	751a      	strb	r2, [r3, #20]
      break;
 800f98a:	e0c7      	b.n	800fb1c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f98c:	4b6b      	ldr	r3, [pc, #428]	; (800fb3c <tcp_process+0x7d0>)
 800f98e:	781b      	ldrb	r3, [r3, #0]
 800f990:	f003 0310 	and.w	r3, r3, #16
 800f994:	2b00      	cmp	r3, #0
 800f996:	f000 80c1 	beq.w	800fb1c <tcp_process+0x7b0>
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f99e:	4b68      	ldr	r3, [pc, #416]	; (800fb40 <tcp_process+0x7d4>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	f040 80ba 	bne.w	800fb1c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	f040 80b5 	bne.w	800fb1c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2206      	movs	r2, #6
 800f9b6:	751a      	strb	r2, [r3, #20]
      break;
 800f9b8:	e0b0      	b.n	800fb1c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f000 f9ca 	bl	800fd54 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f9c0:	4b60      	ldr	r3, [pc, #384]	; (800fb44 <tcp_process+0x7d8>)
 800f9c2:	781b      	ldrb	r3, [r3, #0]
 800f9c4:	f003 0320 	and.w	r3, r3, #32
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	f000 80a9 	beq.w	800fb20 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	8b5b      	ldrh	r3, [r3, #26]
 800f9d2:	f043 0302 	orr.w	r3, r3, #2
 800f9d6:	b29a      	uxth	r2, r3
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f7fe fd39 	bl	800e454 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f9e2:	4b59      	ldr	r3, [pc, #356]	; (800fb48 <tcp_process+0x7dc>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	687a      	ldr	r2, [r7, #4]
 800f9e8:	429a      	cmp	r2, r3
 800f9ea:	d105      	bne.n	800f9f8 <tcp_process+0x68c>
 800f9ec:	4b56      	ldr	r3, [pc, #344]	; (800fb48 <tcp_process+0x7dc>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	68db      	ldr	r3, [r3, #12]
 800f9f2:	4a55      	ldr	r2, [pc, #340]	; (800fb48 <tcp_process+0x7dc>)
 800f9f4:	6013      	str	r3, [r2, #0]
 800f9f6:	e013      	b.n	800fa20 <tcp_process+0x6b4>
 800f9f8:	4b53      	ldr	r3, [pc, #332]	; (800fb48 <tcp_process+0x7dc>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	613b      	str	r3, [r7, #16]
 800f9fe:	e00c      	b.n	800fa1a <tcp_process+0x6ae>
 800fa00:	693b      	ldr	r3, [r7, #16]
 800fa02:	68db      	ldr	r3, [r3, #12]
 800fa04:	687a      	ldr	r2, [r7, #4]
 800fa06:	429a      	cmp	r2, r3
 800fa08:	d104      	bne.n	800fa14 <tcp_process+0x6a8>
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	68da      	ldr	r2, [r3, #12]
 800fa0e:	693b      	ldr	r3, [r7, #16]
 800fa10:	60da      	str	r2, [r3, #12]
 800fa12:	e005      	b.n	800fa20 <tcp_process+0x6b4>
 800fa14:	693b      	ldr	r3, [r7, #16]
 800fa16:	68db      	ldr	r3, [r3, #12]
 800fa18:	613b      	str	r3, [r7, #16]
 800fa1a:	693b      	ldr	r3, [r7, #16]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d1ef      	bne.n	800fa00 <tcp_process+0x694>
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2200      	movs	r2, #0
 800fa24:	60da      	str	r2, [r3, #12]
 800fa26:	4b43      	ldr	r3, [pc, #268]	; (800fb34 <tcp_process+0x7c8>)
 800fa28:	2201      	movs	r2, #1
 800fa2a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	220a      	movs	r2, #10
 800fa30:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fa32:	4b41      	ldr	r3, [pc, #260]	; (800fb38 <tcp_process+0x7cc>)
 800fa34:	681a      	ldr	r2, [r3, #0]
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	60da      	str	r2, [r3, #12]
 800fa3a:	4a3f      	ldr	r2, [pc, #252]	; (800fb38 <tcp_process+0x7cc>)
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6013      	str	r3, [r2, #0]
 800fa40:	f003 f8ea 	bl	8012c18 <tcp_timer_needed>
      }
      break;
 800fa44:	e06c      	b.n	800fb20 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800fa46:	6878      	ldr	r0, [r7, #4]
 800fa48:	f000 f984 	bl	800fd54 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fa4c:	4b3b      	ldr	r3, [pc, #236]	; (800fb3c <tcp_process+0x7d0>)
 800fa4e:	781b      	ldrb	r3, [r3, #0]
 800fa50:	f003 0310 	and.w	r3, r3, #16
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d065      	beq.n	800fb24 <tcp_process+0x7b8>
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fa5c:	4b38      	ldr	r3, [pc, #224]	; (800fb40 <tcp_process+0x7d4>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d15f      	bne.n	800fb24 <tcp_process+0x7b8>
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d15b      	bne.n	800fb24 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800fa6c:	6878      	ldr	r0, [r7, #4]
 800fa6e:	f7fe fcf1 	bl	800e454 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fa72:	4b35      	ldr	r3, [pc, #212]	; (800fb48 <tcp_process+0x7dc>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	687a      	ldr	r2, [r7, #4]
 800fa78:	429a      	cmp	r2, r3
 800fa7a:	d105      	bne.n	800fa88 <tcp_process+0x71c>
 800fa7c:	4b32      	ldr	r3, [pc, #200]	; (800fb48 <tcp_process+0x7dc>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	68db      	ldr	r3, [r3, #12]
 800fa82:	4a31      	ldr	r2, [pc, #196]	; (800fb48 <tcp_process+0x7dc>)
 800fa84:	6013      	str	r3, [r2, #0]
 800fa86:	e013      	b.n	800fab0 <tcp_process+0x744>
 800fa88:	4b2f      	ldr	r3, [pc, #188]	; (800fb48 <tcp_process+0x7dc>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	60fb      	str	r3, [r7, #12]
 800fa8e:	e00c      	b.n	800faaa <tcp_process+0x73e>
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	68db      	ldr	r3, [r3, #12]
 800fa94:	687a      	ldr	r2, [r7, #4]
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d104      	bne.n	800faa4 <tcp_process+0x738>
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	68da      	ldr	r2, [r3, #12]
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	60da      	str	r2, [r3, #12]
 800faa2:	e005      	b.n	800fab0 <tcp_process+0x744>
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	68db      	ldr	r3, [r3, #12]
 800faa8:	60fb      	str	r3, [r7, #12]
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d1ef      	bne.n	800fa90 <tcp_process+0x724>
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2200      	movs	r2, #0
 800fab4:	60da      	str	r2, [r3, #12]
 800fab6:	4b1f      	ldr	r3, [pc, #124]	; (800fb34 <tcp_process+0x7c8>)
 800fab8:	2201      	movs	r2, #1
 800faba:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	220a      	movs	r2, #10
 800fac0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fac2:	4b1d      	ldr	r3, [pc, #116]	; (800fb38 <tcp_process+0x7cc>)
 800fac4:	681a      	ldr	r2, [r3, #0]
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	60da      	str	r2, [r3, #12]
 800faca:	4a1b      	ldr	r2, [pc, #108]	; (800fb38 <tcp_process+0x7cc>)
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	6013      	str	r3, [r2, #0]
 800fad0:	f003 f8a2 	bl	8012c18 <tcp_timer_needed>
      }
      break;
 800fad4:	e026      	b.n	800fb24 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f000 f93c 	bl	800fd54 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fadc:	4b17      	ldr	r3, [pc, #92]	; (800fb3c <tcp_process+0x7d0>)
 800fade:	781b      	ldrb	r3, [r3, #0]
 800fae0:	f003 0310 	and.w	r3, r3, #16
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d01f      	beq.n	800fb28 <tcp_process+0x7bc>
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800faec:	4b14      	ldr	r3, [pc, #80]	; (800fb40 <tcp_process+0x7d4>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	429a      	cmp	r2, r3
 800faf2:	d119      	bne.n	800fb28 <tcp_process+0x7bc>
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d115      	bne.n	800fb28 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800fafc:	4b11      	ldr	r3, [pc, #68]	; (800fb44 <tcp_process+0x7d8>)
 800fafe:	781b      	ldrb	r3, [r3, #0]
 800fb00:	f043 0310 	orr.w	r3, r3, #16
 800fb04:	b2da      	uxtb	r2, r3
 800fb06:	4b0f      	ldr	r3, [pc, #60]	; (800fb44 <tcp_process+0x7d8>)
 800fb08:	701a      	strb	r2, [r3, #0]
      }
      break;
 800fb0a:	e00d      	b.n	800fb28 <tcp_process+0x7bc>
    default:
      break;
 800fb0c:	bf00      	nop
 800fb0e:	e00c      	b.n	800fb2a <tcp_process+0x7be>
      break;
 800fb10:	bf00      	nop
 800fb12:	e00a      	b.n	800fb2a <tcp_process+0x7be>
      break;
 800fb14:	bf00      	nop
 800fb16:	e008      	b.n	800fb2a <tcp_process+0x7be>
      break;
 800fb18:	bf00      	nop
 800fb1a:	e006      	b.n	800fb2a <tcp_process+0x7be>
      break;
 800fb1c:	bf00      	nop
 800fb1e:	e004      	b.n	800fb2a <tcp_process+0x7be>
      break;
 800fb20:	bf00      	nop
 800fb22:	e002      	b.n	800fb2a <tcp_process+0x7be>
      break;
 800fb24:	bf00      	nop
 800fb26:	e000      	b.n	800fb2a <tcp_process+0x7be>
      break;
 800fb28:	bf00      	nop
  }
  return ERR_OK;
 800fb2a:	2300      	movs	r3, #0
}
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	3724      	adds	r7, #36	; 0x24
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd90      	pop	{r4, r7, pc}
 800fb34:	20010d70 	.word	0x20010d70
 800fb38:	20010d6c 	.word	0x20010d6c
 800fb3c:	20010da0 	.word	0x20010da0
 800fb40:	20010d98 	.word	0x20010d98
 800fb44:	20010da1 	.word	0x20010da1
 800fb48:	20010d68 	.word	0x20010d68

0800fb4c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800fb4c:	b590      	push	{r4, r7, lr}
 800fb4e:	b085      	sub	sp, #20
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
 800fb54:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d106      	bne.n	800fb6a <tcp_oos_insert_segment+0x1e>
 800fb5c:	4b3b      	ldr	r3, [pc, #236]	; (800fc4c <tcp_oos_insert_segment+0x100>)
 800fb5e:	f240 421f 	movw	r2, #1055	; 0x41f
 800fb62:	493b      	ldr	r1, [pc, #236]	; (800fc50 <tcp_oos_insert_segment+0x104>)
 800fb64:	483b      	ldr	r0, [pc, #236]	; (800fc54 <tcp_oos_insert_segment+0x108>)
 800fb66:	f008 fae3 	bl	8018130 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	68db      	ldr	r3, [r3, #12]
 800fb6e:	899b      	ldrh	r3, [r3, #12]
 800fb70:	b29b      	uxth	r3, r3
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7fb f8bc 	bl	800acf0 <lwip_htons>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	b2db      	uxtb	r3, r3
 800fb7c:	f003 0301 	and.w	r3, r3, #1
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d028      	beq.n	800fbd6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800fb84:	6838      	ldr	r0, [r7, #0]
 800fb86:	f7fe f977 	bl	800de78 <tcp_segs_free>
    next = NULL;
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	603b      	str	r3, [r7, #0]
 800fb8e:	e056      	b.n	800fc3e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	68db      	ldr	r3, [r3, #12]
 800fb94:	899b      	ldrh	r3, [r3, #12]
 800fb96:	b29b      	uxth	r3, r3
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f7fb f8a9 	bl	800acf0 <lwip_htons>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	b2db      	uxtb	r3, r3
 800fba2:	f003 0301 	and.w	r3, r3, #1
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d00d      	beq.n	800fbc6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	68db      	ldr	r3, [r3, #12]
 800fbae:	899b      	ldrh	r3, [r3, #12]
 800fbb0:	b29c      	uxth	r4, r3
 800fbb2:	2001      	movs	r0, #1
 800fbb4:	f7fb f89c 	bl	800acf0 <lwip_htons>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	461a      	mov	r2, r3
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	68db      	ldr	r3, [r3, #12]
 800fbc0:	4322      	orrs	r2, r4
 800fbc2:	b292      	uxth	r2, r2
 800fbc4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800fbd0:	68f8      	ldr	r0, [r7, #12]
 800fbd2:	f7fe f966 	bl	800dea2 <tcp_seg_free>
    while (next &&
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d00e      	beq.n	800fbfa <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	891b      	ldrh	r3, [r3, #8]
 800fbe0:	461a      	mov	r2, r3
 800fbe2:	4b1d      	ldr	r3, [pc, #116]	; (800fc58 <tcp_oos_insert_segment+0x10c>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	441a      	add	r2, r3
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	68db      	ldr	r3, [r3, #12]
 800fbec:	685b      	ldr	r3, [r3, #4]
 800fbee:	6839      	ldr	r1, [r7, #0]
 800fbf0:	8909      	ldrh	r1, [r1, #8]
 800fbf2:	440b      	add	r3, r1
 800fbf4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	daca      	bge.n	800fb90 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800fbfa:	683b      	ldr	r3, [r7, #0]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d01e      	beq.n	800fc3e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	891b      	ldrh	r3, [r3, #8]
 800fc04:	461a      	mov	r2, r3
 800fc06:	4b14      	ldr	r3, [pc, #80]	; (800fc58 <tcp_oos_insert_segment+0x10c>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	441a      	add	r2, r3
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	68db      	ldr	r3, [r3, #12]
 800fc10:	685b      	ldr	r3, [r3, #4]
 800fc12:	1ad3      	subs	r3, r2, r3
    if (next &&
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	dd12      	ble.n	800fc3e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	68db      	ldr	r3, [r3, #12]
 800fc1c:	685b      	ldr	r3, [r3, #4]
 800fc1e:	b29a      	uxth	r2, r3
 800fc20:	4b0d      	ldr	r3, [pc, #52]	; (800fc58 <tcp_oos_insert_segment+0x10c>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	b29b      	uxth	r3, r3
 800fc26:	1ad3      	subs	r3, r2, r3
 800fc28:	b29a      	uxth	r2, r3
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	685a      	ldr	r2, [r3, #4]
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	891b      	ldrh	r3, [r3, #8]
 800fc36:	4619      	mov	r1, r3
 800fc38:	4610      	mov	r0, r2
 800fc3a:	f7fc fb07 	bl	800c24c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	683a      	ldr	r2, [r7, #0]
 800fc42:	601a      	str	r2, [r3, #0]
}
 800fc44:	bf00      	nop
 800fc46:	3714      	adds	r7, #20
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd90      	pop	{r4, r7, pc}
 800fc4c:	0801b070 	.word	0x0801b070
 800fc50:	0801b330 	.word	0x0801b330
 800fc54:	0801b0bc 	.word	0x0801b0bc
 800fc58:	20010d94 	.word	0x20010d94

0800fc5c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800fc5c:	b5b0      	push	{r4, r5, r7, lr}
 800fc5e:	b086      	sub	sp, #24
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	60f8      	str	r0, [r7, #12]
 800fc64:	60b9      	str	r1, [r7, #8]
 800fc66:	607a      	str	r2, [r7, #4]
 800fc68:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800fc6a:	e03e      	b.n	800fcea <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800fc6c:	68bb      	ldr	r3, [r7, #8]
 800fc6e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	685b      	ldr	r3, [r3, #4]
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	f7fc fcfa 	bl	800c674 <pbuf_clen>
 800fc80:	4603      	mov	r3, r0
 800fc82:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fc8a:	8a7a      	ldrh	r2, [r7, #18]
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	d906      	bls.n	800fc9e <tcp_free_acked_segments+0x42>
 800fc90:	4b2a      	ldr	r3, [pc, #168]	; (800fd3c <tcp_free_acked_segments+0xe0>)
 800fc92:	f240 4257 	movw	r2, #1111	; 0x457
 800fc96:	492a      	ldr	r1, [pc, #168]	; (800fd40 <tcp_free_acked_segments+0xe4>)
 800fc98:	482a      	ldr	r0, [pc, #168]	; (800fd44 <tcp_free_acked_segments+0xe8>)
 800fc9a:	f008 fa49 	bl	8018130 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800fca4:	8a7b      	ldrh	r3, [r7, #18]
 800fca6:	1ad3      	subs	r3, r2, r3
 800fca8:	b29a      	uxth	r2, r3
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800fcb0:	697b      	ldr	r3, [r7, #20]
 800fcb2:	891a      	ldrh	r2, [r3, #8]
 800fcb4:	4b24      	ldr	r3, [pc, #144]	; (800fd48 <tcp_free_acked_segments+0xec>)
 800fcb6:	881b      	ldrh	r3, [r3, #0]
 800fcb8:	4413      	add	r3, r2
 800fcba:	b29a      	uxth	r2, r3
 800fcbc:	4b22      	ldr	r3, [pc, #136]	; (800fd48 <tcp_free_acked_segments+0xec>)
 800fcbe:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800fcc0:	6978      	ldr	r0, [r7, #20]
 800fcc2:	f7fe f8ee 	bl	800dea2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d00c      	beq.n	800fcea <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800fcd0:	68bb      	ldr	r3, [r7, #8]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d109      	bne.n	800fcea <tcp_free_acked_segments+0x8e>
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d106      	bne.n	800fcea <tcp_free_acked_segments+0x8e>
 800fcdc:	4b17      	ldr	r3, [pc, #92]	; (800fd3c <tcp_free_acked_segments+0xe0>)
 800fcde:	f240 4261 	movw	r2, #1121	; 0x461
 800fce2:	491a      	ldr	r1, [pc, #104]	; (800fd4c <tcp_free_acked_segments+0xf0>)
 800fce4:	4817      	ldr	r0, [pc, #92]	; (800fd44 <tcp_free_acked_segments+0xe8>)
 800fce6:	f008 fa23 	bl	8018130 <iprintf>
  while (seg_list != NULL &&
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d020      	beq.n	800fd32 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	68db      	ldr	r3, [r3, #12]
 800fcf4:	685b      	ldr	r3, [r3, #4]
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f7fb f80f 	bl	800ad1a <lwip_htonl>
 800fcfc:	4604      	mov	r4, r0
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	891b      	ldrh	r3, [r3, #8]
 800fd02:	461d      	mov	r5, r3
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	68db      	ldr	r3, [r3, #12]
 800fd08:	899b      	ldrh	r3, [r3, #12]
 800fd0a:	b29b      	uxth	r3, r3
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	f7fa ffef 	bl	800acf0 <lwip_htons>
 800fd12:	4603      	mov	r3, r0
 800fd14:	b2db      	uxtb	r3, r3
 800fd16:	f003 0303 	and.w	r3, r3, #3
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d001      	beq.n	800fd22 <tcp_free_acked_segments+0xc6>
 800fd1e:	2301      	movs	r3, #1
 800fd20:	e000      	b.n	800fd24 <tcp_free_acked_segments+0xc8>
 800fd22:	2300      	movs	r3, #0
 800fd24:	442b      	add	r3, r5
 800fd26:	18e2      	adds	r2, r4, r3
 800fd28:	4b09      	ldr	r3, [pc, #36]	; (800fd50 <tcp_free_acked_segments+0xf4>)
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	dd9c      	ble.n	800fc6c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800fd32:	68bb      	ldr	r3, [r7, #8]
}
 800fd34:	4618      	mov	r0, r3
 800fd36:	3718      	adds	r7, #24
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bdb0      	pop	{r4, r5, r7, pc}
 800fd3c:	0801b070 	.word	0x0801b070
 800fd40:	0801b358 	.word	0x0801b358
 800fd44:	0801b0bc 	.word	0x0801b0bc
 800fd48:	20010d9c 	.word	0x20010d9c
 800fd4c:	0801b380 	.word	0x0801b380
 800fd50:	20010d98 	.word	0x20010d98

0800fd54 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800fd54:	b5b0      	push	{r4, r5, r7, lr}
 800fd56:	b094      	sub	sp, #80	; 0x50
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d106      	bne.n	800fd74 <tcp_receive+0x20>
 800fd66:	4b91      	ldr	r3, [pc, #580]	; (800ffac <tcp_receive+0x258>)
 800fd68:	f240 427b 	movw	r2, #1147	; 0x47b
 800fd6c:	4990      	ldr	r1, [pc, #576]	; (800ffb0 <tcp_receive+0x25c>)
 800fd6e:	4891      	ldr	r0, [pc, #580]	; (800ffb4 <tcp_receive+0x260>)
 800fd70:	f008 f9de 	bl	8018130 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	7d1b      	ldrb	r3, [r3, #20]
 800fd78:	2b03      	cmp	r3, #3
 800fd7a:	d806      	bhi.n	800fd8a <tcp_receive+0x36>
 800fd7c:	4b8b      	ldr	r3, [pc, #556]	; (800ffac <tcp_receive+0x258>)
 800fd7e:	f240 427c 	movw	r2, #1148	; 0x47c
 800fd82:	498d      	ldr	r1, [pc, #564]	; (800ffb8 <tcp_receive+0x264>)
 800fd84:	488b      	ldr	r0, [pc, #556]	; (800ffb4 <tcp_receive+0x260>)
 800fd86:	f008 f9d3 	bl	8018130 <iprintf>

  if (flags & TCP_ACK) {
 800fd8a:	4b8c      	ldr	r3, [pc, #560]	; (800ffbc <tcp_receive+0x268>)
 800fd8c:	781b      	ldrb	r3, [r3, #0]
 800fd8e:	f003 0310 	and.w	r3, r3, #16
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	f000 8264 	beq.w	8010260 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fd9e:	461a      	mov	r2, r3
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fda4:	4413      	add	r3, r2
 800fda6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fdac:	4b84      	ldr	r3, [pc, #528]	; (800ffc0 <tcp_receive+0x26c>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	1ad3      	subs	r3, r2, r3
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	db1b      	blt.n	800fdee <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fdba:	4b81      	ldr	r3, [pc, #516]	; (800ffc0 <tcp_receive+0x26c>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800fdbe:	429a      	cmp	r2, r3
 800fdc0:	d106      	bne.n	800fdd0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fdc6:	4b7f      	ldr	r3, [pc, #508]	; (800ffc4 <tcp_receive+0x270>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	1ad3      	subs	r3, r2, r3
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	db0e      	blt.n	800fdee <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fdd4:	4b7b      	ldr	r3, [pc, #492]	; (800ffc4 <tcp_receive+0x270>)
 800fdd6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d125      	bne.n	800fe28 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800fddc:	4b7a      	ldr	r3, [pc, #488]	; (800ffc8 <tcp_receive+0x274>)
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	89db      	ldrh	r3, [r3, #14]
 800fde2:	b29a      	uxth	r2, r3
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fdea:	429a      	cmp	r2, r3
 800fdec:	d91c      	bls.n	800fe28 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800fdee:	4b76      	ldr	r3, [pc, #472]	; (800ffc8 <tcp_receive+0x274>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	89db      	ldrh	r3, [r3, #14]
 800fdf4:	b29a      	uxth	r2, r3
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fe08:	429a      	cmp	r2, r3
 800fe0a:	d205      	bcs.n	800fe18 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800fe18:	4b69      	ldr	r3, [pc, #420]	; (800ffc0 <tcp_receive+0x26c>)
 800fe1a:	681a      	ldr	r2, [r3, #0]
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800fe20:	4b68      	ldr	r3, [pc, #416]	; (800ffc4 <tcp_receive+0x270>)
 800fe22:	681a      	ldr	r2, [r3, #0]
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800fe28:	4b66      	ldr	r3, [pc, #408]	; (800ffc4 <tcp_receive+0x270>)
 800fe2a:	681a      	ldr	r2, [r3, #0]
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe30:	1ad3      	subs	r3, r2, r3
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	dc58      	bgt.n	800fee8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800fe36:	4b65      	ldr	r3, [pc, #404]	; (800ffcc <tcp_receive+0x278>)
 800fe38:	881b      	ldrh	r3, [r3, #0]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d14b      	bne.n	800fed6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe42:	687a      	ldr	r2, [r7, #4]
 800fe44:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800fe48:	4413      	add	r3, r2
 800fe4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d142      	bne.n	800fed6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	db3d      	blt.n	800fed6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fe5e:	4b59      	ldr	r3, [pc, #356]	; (800ffc4 <tcp_receive+0x270>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	429a      	cmp	r2, r3
 800fe64:	d137      	bne.n	800fed6 <tcp_receive+0x182>
              found_dupack = 1;
 800fe66:	2301      	movs	r3, #1
 800fe68:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fe70:	2bff      	cmp	r3, #255	; 0xff
 800fe72:	d007      	beq.n	800fe84 <tcp_receive+0x130>
                ++pcb->dupacks;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fe7a:	3301      	adds	r3, #1
 800fe7c:	b2da      	uxtb	r2, r3
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fe8a:	2b03      	cmp	r3, #3
 800fe8c:	d91b      	bls.n	800fec6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe98:	4413      	add	r3, r2
 800fe9a:	b29a      	uxth	r2, r3
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fea2:	429a      	cmp	r2, r3
 800fea4:	d30a      	bcc.n	800febc <tcp_receive+0x168>
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800feb0:	4413      	add	r3, r2
 800feb2:	b29a      	uxth	r2, r3
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800feba:	e004      	b.n	800fec6 <tcp_receive+0x172>
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fec2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fecc:	2b02      	cmp	r3, #2
 800fece:	d902      	bls.n	800fed6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f002 fb45 	bl	8012560 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800fed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fed8:	2b00      	cmp	r3, #0
 800feda:	f040 8161 	bne.w	80101a0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	2200      	movs	r2, #0
 800fee2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fee6:	e15b      	b.n	80101a0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fee8:	4b36      	ldr	r3, [pc, #216]	; (800ffc4 <tcp_receive+0x270>)
 800feea:	681a      	ldr	r2, [r3, #0]
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fef0:	1ad3      	subs	r3, r2, r3
 800fef2:	3b01      	subs	r3, #1
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	f2c0 814e 	blt.w	8010196 <tcp_receive+0x442>
 800fefa:	4b32      	ldr	r3, [pc, #200]	; (800ffc4 <tcp_receive+0x270>)
 800fefc:	681a      	ldr	r2, [r3, #0]
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff02:	1ad3      	subs	r3, r2, r3
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	f300 8146 	bgt.w	8010196 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	8b5b      	ldrh	r3, [r3, #26]
 800ff0e:	f003 0304 	and.w	r3, r3, #4
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d010      	beq.n	800ff38 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	8b5b      	ldrh	r3, [r3, #26]
 800ff1a:	f023 0304 	bic.w	r3, r3, #4
 800ff1e:	b29a      	uxth	r2, r3
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2200      	movs	r2, #0
 800ff34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ff46:	10db      	asrs	r3, r3, #3
 800ff48:	b21b      	sxth	r3, r3
 800ff4a:	b29a      	uxth	r2, r3
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ff52:	b29b      	uxth	r3, r3
 800ff54:	4413      	add	r3, r2
 800ff56:	b29b      	uxth	r3, r3
 800ff58:	b21a      	sxth	r2, r3
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ff60:	4b18      	ldr	r3, [pc, #96]	; (800ffc4 <tcp_receive+0x270>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	b29a      	uxth	r2, r3
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff6a:	b29b      	uxth	r3, r3
 800ff6c:	1ad3      	subs	r3, r2, r3
 800ff6e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2200      	movs	r2, #0
 800ff74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ff78:	4b12      	ldr	r3, [pc, #72]	; (800ffc4 <tcp_receive+0x270>)
 800ff7a:	681a      	ldr	r2, [r3, #0]
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	7d1b      	ldrb	r3, [r3, #20]
 800ff84:	2b03      	cmp	r3, #3
 800ff86:	f240 8097 	bls.w	80100b8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ff96:	429a      	cmp	r2, r3
 800ff98:	d245      	bcs.n	8010026 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	8b5b      	ldrh	r3, [r3, #26]
 800ff9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d014      	beq.n	800ffd0 <tcp_receive+0x27c>
 800ffa6:	2301      	movs	r3, #1
 800ffa8:	e013      	b.n	800ffd2 <tcp_receive+0x27e>
 800ffaa:	bf00      	nop
 800ffac:	0801b070 	.word	0x0801b070
 800ffb0:	0801b3a0 	.word	0x0801b3a0
 800ffb4:	0801b0bc 	.word	0x0801b0bc
 800ffb8:	0801b3bc 	.word	0x0801b3bc
 800ffbc:	20010da0 	.word	0x20010da0
 800ffc0:	20010d94 	.word	0x20010d94
 800ffc4:	20010d98 	.word	0x20010d98
 800ffc8:	20010d84 	.word	0x20010d84
 800ffcc:	20010d9e 	.word	0x20010d9e
 800ffd0:	2302      	movs	r3, #2
 800ffd2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ffd6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ffda:	b29a      	uxth	r2, r3
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ffe0:	fb12 f303 	smulbb	r3, r2, r3
 800ffe4:	b29b      	uxth	r3, r3
 800ffe6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ffe8:	4293      	cmp	r3, r2
 800ffea:	bf28      	it	cs
 800ffec:	4613      	movcs	r3, r2
 800ffee:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fff6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fff8:	4413      	add	r3, r2
 800fffa:	b29a      	uxth	r2, r3
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010002:	429a      	cmp	r2, r3
 8010004:	d309      	bcc.n	801001a <tcp_receive+0x2c6>
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801000c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801000e:	4413      	add	r3, r2
 8010010:	b29a      	uxth	r2, r3
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010018:	e04e      	b.n	80100b8 <tcp_receive+0x364>
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010020:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010024:	e048      	b.n	80100b8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801002c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801002e:	4413      	add	r3, r2
 8010030:	b29a      	uxth	r2, r3
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010038:	429a      	cmp	r2, r3
 801003a:	d309      	bcc.n	8010050 <tcp_receive+0x2fc>
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010042:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010044:	4413      	add	r3, r2
 8010046:	b29a      	uxth	r2, r3
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801004e:	e004      	b.n	801005a <tcp_receive+0x306>
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010056:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010066:	429a      	cmp	r2, r3
 8010068:	d326      	bcc.n	80100b8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010076:	1ad3      	subs	r3, r2, r3
 8010078:	b29a      	uxth	r2, r3
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801008a:	4413      	add	r3, r2
 801008c:	b29a      	uxth	r2, r3
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010094:	429a      	cmp	r2, r3
 8010096:	d30a      	bcc.n	80100ae <tcp_receive+0x35a>
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80100a2:	4413      	add	r3, r2
 80100a4:	b29a      	uxth	r2, r3
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80100ac:	e004      	b.n	80100b8 <tcp_receive+0x364>
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80100b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100c0:	4a98      	ldr	r2, [pc, #608]	; (8010324 <tcp_receive+0x5d0>)
 80100c2:	6878      	ldr	r0, [r7, #4]
 80100c4:	f7ff fdca 	bl	800fc5c <tcp_free_acked_segments>
 80100c8:	4602      	mov	r2, r0
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100d6:	4a94      	ldr	r2, [pc, #592]	; (8010328 <tcp_receive+0x5d4>)
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f7ff fdbf 	bl	800fc5c <tcp_free_acked_segments>
 80100de:	4602      	mov	r2, r0
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d104      	bne.n	80100f6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80100f2:	861a      	strh	r2, [r3, #48]	; 0x30
 80100f4:	e002      	b.n	80100fc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	2200      	movs	r2, #0
 80100fa:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2200      	movs	r2, #0
 8010100:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010106:	2b00      	cmp	r3, #0
 8010108:	d103      	bne.n	8010112 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2200      	movs	r2, #0
 801010e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010118:	4b84      	ldr	r3, [pc, #528]	; (801032c <tcp_receive+0x5d8>)
 801011a:	881b      	ldrh	r3, [r3, #0]
 801011c:	4413      	add	r3, r2
 801011e:	b29a      	uxth	r2, r3
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	8b5b      	ldrh	r3, [r3, #26]
 801012a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801012e:	2b00      	cmp	r3, #0
 8010130:	d035      	beq.n	801019e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010136:	2b00      	cmp	r3, #0
 8010138:	d118      	bne.n	801016c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801013e:	2b00      	cmp	r3, #0
 8010140:	d00c      	beq.n	801015c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801014a:	68db      	ldr	r3, [r3, #12]
 801014c:	685b      	ldr	r3, [r3, #4]
 801014e:	4618      	mov	r0, r3
 8010150:	f7fa fde3 	bl	800ad1a <lwip_htonl>
 8010154:	4603      	mov	r3, r0
 8010156:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010158:	2b00      	cmp	r3, #0
 801015a:	dc20      	bgt.n	801019e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	8b5b      	ldrh	r3, [r3, #26]
 8010160:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010164:	b29a      	uxth	r2, r3
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801016a:	e018      	b.n	801019e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010174:	68db      	ldr	r3, [r3, #12]
 8010176:	685b      	ldr	r3, [r3, #4]
 8010178:	4618      	mov	r0, r3
 801017a:	f7fa fdce 	bl	800ad1a <lwip_htonl>
 801017e:	4603      	mov	r3, r0
 8010180:	1ae3      	subs	r3, r4, r3
 8010182:	2b00      	cmp	r3, #0
 8010184:	dc0b      	bgt.n	801019e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	8b5b      	ldrh	r3, [r3, #26]
 801018a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801018e:	b29a      	uxth	r2, r3
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010194:	e003      	b.n	801019e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010196:	6878      	ldr	r0, [r7, #4]
 8010198:	f002 fbce 	bl	8012938 <tcp_send_empty_ack>
 801019c:	e000      	b.n	80101a0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801019e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d05b      	beq.n	8010260 <tcp_receive+0x50c>
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80101ac:	4b60      	ldr	r3, [pc, #384]	; (8010330 <tcp_receive+0x5dc>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	1ad3      	subs	r3, r2, r3
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	da54      	bge.n	8010260 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80101b6:	4b5f      	ldr	r3, [pc, #380]	; (8010334 <tcp_receive+0x5e0>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	b29a      	uxth	r2, r3
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101c0:	b29b      	uxth	r3, r3
 80101c2:	1ad3      	subs	r3, r2, r3
 80101c4:	b29b      	uxth	r3, r3
 80101c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80101ca:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80101d4:	10db      	asrs	r3, r3, #3
 80101d6:	b21b      	sxth	r3, r3
 80101d8:	b29b      	uxth	r3, r3
 80101da:	1ad3      	subs	r3, r2, r3
 80101dc:	b29b      	uxth	r3, r3
 80101de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80101e8:	b29a      	uxth	r2, r3
 80101ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80101ee:	4413      	add	r3, r2
 80101f0:	b29b      	uxth	r3, r3
 80101f2:	b21a      	sxth	r2, r3
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80101f8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	da05      	bge.n	801020c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010200:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010204:	425b      	negs	r3, r3
 8010206:	b29b      	uxth	r3, r3
 8010208:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801020c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010216:	109b      	asrs	r3, r3, #2
 8010218:	b21b      	sxth	r3, r3
 801021a:	b29b      	uxth	r3, r3
 801021c:	1ad3      	subs	r3, r2, r3
 801021e:	b29b      	uxth	r3, r3
 8010220:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801022a:	b29a      	uxth	r2, r3
 801022c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010230:	4413      	add	r3, r2
 8010232:	b29b      	uxth	r3, r3
 8010234:	b21a      	sxth	r2, r3
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010240:	10db      	asrs	r3, r3, #3
 8010242:	b21b      	sxth	r3, r3
 8010244:	b29a      	uxth	r2, r3
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801024c:	b29b      	uxth	r3, r3
 801024e:	4413      	add	r3, r2
 8010250:	b29b      	uxth	r3, r3
 8010252:	b21a      	sxth	r2, r3
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	2200      	movs	r2, #0
 801025e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010260:	4b35      	ldr	r3, [pc, #212]	; (8010338 <tcp_receive+0x5e4>)
 8010262:	881b      	ldrh	r3, [r3, #0]
 8010264:	2b00      	cmp	r3, #0
 8010266:	f000 84e2 	beq.w	8010c2e <tcp_receive+0xeda>
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	7d1b      	ldrb	r3, [r3, #20]
 801026e:	2b06      	cmp	r3, #6
 8010270:	f200 84dd 	bhi.w	8010c2e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010278:	4b30      	ldr	r3, [pc, #192]	; (801033c <tcp_receive+0x5e8>)
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	1ad3      	subs	r3, r2, r3
 801027e:	3b01      	subs	r3, #1
 8010280:	2b00      	cmp	r3, #0
 8010282:	f2c0 808f 	blt.w	80103a4 <tcp_receive+0x650>
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801028a:	4b2b      	ldr	r3, [pc, #172]	; (8010338 <tcp_receive+0x5e4>)
 801028c:	881b      	ldrh	r3, [r3, #0]
 801028e:	4619      	mov	r1, r3
 8010290:	4b2a      	ldr	r3, [pc, #168]	; (801033c <tcp_receive+0x5e8>)
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	440b      	add	r3, r1
 8010296:	1ad3      	subs	r3, r2, r3
 8010298:	3301      	adds	r3, #1
 801029a:	2b00      	cmp	r3, #0
 801029c:	f300 8082 	bgt.w	80103a4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80102a0:	4b27      	ldr	r3, [pc, #156]	; (8010340 <tcp_receive+0x5ec>)
 80102a2:	685b      	ldr	r3, [r3, #4]
 80102a4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80102aa:	4b24      	ldr	r3, [pc, #144]	; (801033c <tcp_receive+0x5e8>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	1ad3      	subs	r3, r2, r3
 80102b0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80102b2:	4b23      	ldr	r3, [pc, #140]	; (8010340 <tcp_receive+0x5ec>)
 80102b4:	685b      	ldr	r3, [r3, #4]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d106      	bne.n	80102c8 <tcp_receive+0x574>
 80102ba:	4b22      	ldr	r3, [pc, #136]	; (8010344 <tcp_receive+0x5f0>)
 80102bc:	f240 5294 	movw	r2, #1428	; 0x594
 80102c0:	4921      	ldr	r1, [pc, #132]	; (8010348 <tcp_receive+0x5f4>)
 80102c2:	4822      	ldr	r0, [pc, #136]	; (801034c <tcp_receive+0x5f8>)
 80102c4:	f007 ff34 	bl	8018130 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80102c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80102ce:	4293      	cmp	r3, r2
 80102d0:	d906      	bls.n	80102e0 <tcp_receive+0x58c>
 80102d2:	4b1c      	ldr	r3, [pc, #112]	; (8010344 <tcp_receive+0x5f0>)
 80102d4:	f240 5295 	movw	r2, #1429	; 0x595
 80102d8:	491d      	ldr	r1, [pc, #116]	; (8010350 <tcp_receive+0x5fc>)
 80102da:	481c      	ldr	r0, [pc, #112]	; (801034c <tcp_receive+0x5f8>)
 80102dc:	f007 ff28 	bl	8018130 <iprintf>
      off = (u16_t)off32;
 80102e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80102e6:	4b16      	ldr	r3, [pc, #88]	; (8010340 <tcp_receive+0x5ec>)
 80102e8:	685b      	ldr	r3, [r3, #4]
 80102ea:	891b      	ldrh	r3, [r3, #8]
 80102ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80102f0:	429a      	cmp	r2, r3
 80102f2:	d906      	bls.n	8010302 <tcp_receive+0x5ae>
 80102f4:	4b13      	ldr	r3, [pc, #76]	; (8010344 <tcp_receive+0x5f0>)
 80102f6:	f240 5297 	movw	r2, #1431	; 0x597
 80102fa:	4916      	ldr	r1, [pc, #88]	; (8010354 <tcp_receive+0x600>)
 80102fc:	4813      	ldr	r0, [pc, #76]	; (801034c <tcp_receive+0x5f8>)
 80102fe:	f007 ff17 	bl	8018130 <iprintf>
      inseg.len -= off;
 8010302:	4b0f      	ldr	r3, [pc, #60]	; (8010340 <tcp_receive+0x5ec>)
 8010304:	891a      	ldrh	r2, [r3, #8]
 8010306:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801030a:	1ad3      	subs	r3, r2, r3
 801030c:	b29a      	uxth	r2, r3
 801030e:	4b0c      	ldr	r3, [pc, #48]	; (8010340 <tcp_receive+0x5ec>)
 8010310:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010312:	4b0b      	ldr	r3, [pc, #44]	; (8010340 <tcp_receive+0x5ec>)
 8010314:	685b      	ldr	r3, [r3, #4]
 8010316:	891a      	ldrh	r2, [r3, #8]
 8010318:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801031c:	1ad3      	subs	r3, r2, r3
 801031e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010320:	e02a      	b.n	8010378 <tcp_receive+0x624>
 8010322:	bf00      	nop
 8010324:	0801b3d8 	.word	0x0801b3d8
 8010328:	0801b3e0 	.word	0x0801b3e0
 801032c:	20010d9c 	.word	0x20010d9c
 8010330:	20010d98 	.word	0x20010d98
 8010334:	20010d5c 	.word	0x20010d5c
 8010338:	20010d9e 	.word	0x20010d9e
 801033c:	20010d94 	.word	0x20010d94
 8010340:	20010d74 	.word	0x20010d74
 8010344:	0801b070 	.word	0x0801b070
 8010348:	0801b3e8 	.word	0x0801b3e8
 801034c:	0801b0bc 	.word	0x0801b0bc
 8010350:	0801b3f8 	.word	0x0801b3f8
 8010354:	0801b408 	.word	0x0801b408
        off -= p->len;
 8010358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801035a:	895b      	ldrh	r3, [r3, #10]
 801035c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010360:	1ad3      	subs	r3, r2, r3
 8010362:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010368:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801036a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801036c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801036e:	2200      	movs	r2, #0
 8010370:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801037a:	895b      	ldrh	r3, [r3, #10]
 801037c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010380:	429a      	cmp	r2, r3
 8010382:	d8e9      	bhi.n	8010358 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010384:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010388:	4619      	mov	r1, r3
 801038a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801038c:	f7fc f85e 	bl	800c44c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010394:	4a91      	ldr	r2, [pc, #580]	; (80105dc <tcp_receive+0x888>)
 8010396:	6013      	str	r3, [r2, #0]
 8010398:	4b91      	ldr	r3, [pc, #580]	; (80105e0 <tcp_receive+0x88c>)
 801039a:	68db      	ldr	r3, [r3, #12]
 801039c:	4a8f      	ldr	r2, [pc, #572]	; (80105dc <tcp_receive+0x888>)
 801039e:	6812      	ldr	r2, [r2, #0]
 80103a0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80103a2:	e00d      	b.n	80103c0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80103a4:	4b8d      	ldr	r3, [pc, #564]	; (80105dc <tcp_receive+0x888>)
 80103a6:	681a      	ldr	r2, [r3, #0]
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103ac:	1ad3      	subs	r3, r2, r3
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	da06      	bge.n	80103c0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	8b5b      	ldrh	r3, [r3, #26]
 80103b6:	f043 0302 	orr.w	r3, r3, #2
 80103ba:	b29a      	uxth	r2, r3
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80103c0:	4b86      	ldr	r3, [pc, #536]	; (80105dc <tcp_receive+0x888>)
 80103c2:	681a      	ldr	r2, [r3, #0]
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103c8:	1ad3      	subs	r3, r2, r3
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	f2c0 842a 	blt.w	8010c24 <tcp_receive+0xed0>
 80103d0:	4b82      	ldr	r3, [pc, #520]	; (80105dc <tcp_receive+0x888>)
 80103d2:	681a      	ldr	r2, [r3, #0]
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103d8:	6879      	ldr	r1, [r7, #4]
 80103da:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80103dc:	440b      	add	r3, r1
 80103de:	1ad3      	subs	r3, r2, r3
 80103e0:	3301      	adds	r3, #1
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	f300 841e 	bgt.w	8010c24 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80103ec:	4b7b      	ldr	r3, [pc, #492]	; (80105dc <tcp_receive+0x888>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	429a      	cmp	r2, r3
 80103f2:	f040 829a 	bne.w	801092a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80103f6:	4b7a      	ldr	r3, [pc, #488]	; (80105e0 <tcp_receive+0x88c>)
 80103f8:	891c      	ldrh	r4, [r3, #8]
 80103fa:	4b79      	ldr	r3, [pc, #484]	; (80105e0 <tcp_receive+0x88c>)
 80103fc:	68db      	ldr	r3, [r3, #12]
 80103fe:	899b      	ldrh	r3, [r3, #12]
 8010400:	b29b      	uxth	r3, r3
 8010402:	4618      	mov	r0, r3
 8010404:	f7fa fc74 	bl	800acf0 <lwip_htons>
 8010408:	4603      	mov	r3, r0
 801040a:	b2db      	uxtb	r3, r3
 801040c:	f003 0303 	and.w	r3, r3, #3
 8010410:	2b00      	cmp	r3, #0
 8010412:	d001      	beq.n	8010418 <tcp_receive+0x6c4>
 8010414:	2301      	movs	r3, #1
 8010416:	e000      	b.n	801041a <tcp_receive+0x6c6>
 8010418:	2300      	movs	r3, #0
 801041a:	4423      	add	r3, r4
 801041c:	b29a      	uxth	r2, r3
 801041e:	4b71      	ldr	r3, [pc, #452]	; (80105e4 <tcp_receive+0x890>)
 8010420:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010426:	4b6f      	ldr	r3, [pc, #444]	; (80105e4 <tcp_receive+0x890>)
 8010428:	881b      	ldrh	r3, [r3, #0]
 801042a:	429a      	cmp	r2, r3
 801042c:	d275      	bcs.n	801051a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801042e:	4b6c      	ldr	r3, [pc, #432]	; (80105e0 <tcp_receive+0x88c>)
 8010430:	68db      	ldr	r3, [r3, #12]
 8010432:	899b      	ldrh	r3, [r3, #12]
 8010434:	b29b      	uxth	r3, r3
 8010436:	4618      	mov	r0, r3
 8010438:	f7fa fc5a 	bl	800acf0 <lwip_htons>
 801043c:	4603      	mov	r3, r0
 801043e:	b2db      	uxtb	r3, r3
 8010440:	f003 0301 	and.w	r3, r3, #1
 8010444:	2b00      	cmp	r3, #0
 8010446:	d01f      	beq.n	8010488 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010448:	4b65      	ldr	r3, [pc, #404]	; (80105e0 <tcp_receive+0x88c>)
 801044a:	68db      	ldr	r3, [r3, #12]
 801044c:	899b      	ldrh	r3, [r3, #12]
 801044e:	b29b      	uxth	r3, r3
 8010450:	b21b      	sxth	r3, r3
 8010452:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010456:	b21c      	sxth	r4, r3
 8010458:	4b61      	ldr	r3, [pc, #388]	; (80105e0 <tcp_receive+0x88c>)
 801045a:	68db      	ldr	r3, [r3, #12]
 801045c:	899b      	ldrh	r3, [r3, #12]
 801045e:	b29b      	uxth	r3, r3
 8010460:	4618      	mov	r0, r3
 8010462:	f7fa fc45 	bl	800acf0 <lwip_htons>
 8010466:	4603      	mov	r3, r0
 8010468:	b2db      	uxtb	r3, r3
 801046a:	b29b      	uxth	r3, r3
 801046c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010470:	b29b      	uxth	r3, r3
 8010472:	4618      	mov	r0, r3
 8010474:	f7fa fc3c 	bl	800acf0 <lwip_htons>
 8010478:	4603      	mov	r3, r0
 801047a:	b21b      	sxth	r3, r3
 801047c:	4323      	orrs	r3, r4
 801047e:	b21a      	sxth	r2, r3
 8010480:	4b57      	ldr	r3, [pc, #348]	; (80105e0 <tcp_receive+0x88c>)
 8010482:	68db      	ldr	r3, [r3, #12]
 8010484:	b292      	uxth	r2, r2
 8010486:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801048c:	4b54      	ldr	r3, [pc, #336]	; (80105e0 <tcp_receive+0x88c>)
 801048e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010490:	4b53      	ldr	r3, [pc, #332]	; (80105e0 <tcp_receive+0x88c>)
 8010492:	68db      	ldr	r3, [r3, #12]
 8010494:	899b      	ldrh	r3, [r3, #12]
 8010496:	b29b      	uxth	r3, r3
 8010498:	4618      	mov	r0, r3
 801049a:	f7fa fc29 	bl	800acf0 <lwip_htons>
 801049e:	4603      	mov	r3, r0
 80104a0:	b2db      	uxtb	r3, r3
 80104a2:	f003 0302 	and.w	r3, r3, #2
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d005      	beq.n	80104b6 <tcp_receive+0x762>
            inseg.len -= 1;
 80104aa:	4b4d      	ldr	r3, [pc, #308]	; (80105e0 <tcp_receive+0x88c>)
 80104ac:	891b      	ldrh	r3, [r3, #8]
 80104ae:	3b01      	subs	r3, #1
 80104b0:	b29a      	uxth	r2, r3
 80104b2:	4b4b      	ldr	r3, [pc, #300]	; (80105e0 <tcp_receive+0x88c>)
 80104b4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80104b6:	4b4a      	ldr	r3, [pc, #296]	; (80105e0 <tcp_receive+0x88c>)
 80104b8:	685b      	ldr	r3, [r3, #4]
 80104ba:	4a49      	ldr	r2, [pc, #292]	; (80105e0 <tcp_receive+0x88c>)
 80104bc:	8912      	ldrh	r2, [r2, #8]
 80104be:	4611      	mov	r1, r2
 80104c0:	4618      	mov	r0, r3
 80104c2:	f7fb fec3 	bl	800c24c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80104c6:	4b46      	ldr	r3, [pc, #280]	; (80105e0 <tcp_receive+0x88c>)
 80104c8:	891c      	ldrh	r4, [r3, #8]
 80104ca:	4b45      	ldr	r3, [pc, #276]	; (80105e0 <tcp_receive+0x88c>)
 80104cc:	68db      	ldr	r3, [r3, #12]
 80104ce:	899b      	ldrh	r3, [r3, #12]
 80104d0:	b29b      	uxth	r3, r3
 80104d2:	4618      	mov	r0, r3
 80104d4:	f7fa fc0c 	bl	800acf0 <lwip_htons>
 80104d8:	4603      	mov	r3, r0
 80104da:	b2db      	uxtb	r3, r3
 80104dc:	f003 0303 	and.w	r3, r3, #3
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d001      	beq.n	80104e8 <tcp_receive+0x794>
 80104e4:	2301      	movs	r3, #1
 80104e6:	e000      	b.n	80104ea <tcp_receive+0x796>
 80104e8:	2300      	movs	r3, #0
 80104ea:	4423      	add	r3, r4
 80104ec:	b29a      	uxth	r2, r3
 80104ee:	4b3d      	ldr	r3, [pc, #244]	; (80105e4 <tcp_receive+0x890>)
 80104f0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80104f2:	4b3c      	ldr	r3, [pc, #240]	; (80105e4 <tcp_receive+0x890>)
 80104f4:	881b      	ldrh	r3, [r3, #0]
 80104f6:	461a      	mov	r2, r3
 80104f8:	4b38      	ldr	r3, [pc, #224]	; (80105dc <tcp_receive+0x888>)
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	441a      	add	r2, r3
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010502:	6879      	ldr	r1, [r7, #4]
 8010504:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010506:	440b      	add	r3, r1
 8010508:	429a      	cmp	r2, r3
 801050a:	d006      	beq.n	801051a <tcp_receive+0x7c6>
 801050c:	4b36      	ldr	r3, [pc, #216]	; (80105e8 <tcp_receive+0x894>)
 801050e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8010512:	4936      	ldr	r1, [pc, #216]	; (80105ec <tcp_receive+0x898>)
 8010514:	4836      	ldr	r0, [pc, #216]	; (80105f0 <tcp_receive+0x89c>)
 8010516:	f007 fe0b 	bl	8018130 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801051e:	2b00      	cmp	r3, #0
 8010520:	f000 80e7 	beq.w	80106f2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010524:	4b2e      	ldr	r3, [pc, #184]	; (80105e0 <tcp_receive+0x88c>)
 8010526:	68db      	ldr	r3, [r3, #12]
 8010528:	899b      	ldrh	r3, [r3, #12]
 801052a:	b29b      	uxth	r3, r3
 801052c:	4618      	mov	r0, r3
 801052e:	f7fa fbdf 	bl	800acf0 <lwip_htons>
 8010532:	4603      	mov	r3, r0
 8010534:	b2db      	uxtb	r3, r3
 8010536:	f003 0301 	and.w	r3, r3, #1
 801053a:	2b00      	cmp	r3, #0
 801053c:	d010      	beq.n	8010560 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801053e:	e00a      	b.n	8010556 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010544:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801054a:	681a      	ldr	r2, [r3, #0]
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010550:	68f8      	ldr	r0, [r7, #12]
 8010552:	f7fd fca6 	bl	800dea2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801055a:	2b00      	cmp	r3, #0
 801055c:	d1f0      	bne.n	8010540 <tcp_receive+0x7ec>
 801055e:	e0c8      	b.n	80106f2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010564:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010566:	e052      	b.n	801060e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801056a:	68db      	ldr	r3, [r3, #12]
 801056c:	899b      	ldrh	r3, [r3, #12]
 801056e:	b29b      	uxth	r3, r3
 8010570:	4618      	mov	r0, r3
 8010572:	f7fa fbbd 	bl	800acf0 <lwip_htons>
 8010576:	4603      	mov	r3, r0
 8010578:	b2db      	uxtb	r3, r3
 801057a:	f003 0301 	and.w	r3, r3, #1
 801057e:	2b00      	cmp	r3, #0
 8010580:	d03d      	beq.n	80105fe <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010582:	4b17      	ldr	r3, [pc, #92]	; (80105e0 <tcp_receive+0x88c>)
 8010584:	68db      	ldr	r3, [r3, #12]
 8010586:	899b      	ldrh	r3, [r3, #12]
 8010588:	b29b      	uxth	r3, r3
 801058a:	4618      	mov	r0, r3
 801058c:	f7fa fbb0 	bl	800acf0 <lwip_htons>
 8010590:	4603      	mov	r3, r0
 8010592:	b2db      	uxtb	r3, r3
 8010594:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010598:	2b00      	cmp	r3, #0
 801059a:	d130      	bne.n	80105fe <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801059c:	4b10      	ldr	r3, [pc, #64]	; (80105e0 <tcp_receive+0x88c>)
 801059e:	68db      	ldr	r3, [r3, #12]
 80105a0:	899b      	ldrh	r3, [r3, #12]
 80105a2:	b29c      	uxth	r4, r3
 80105a4:	2001      	movs	r0, #1
 80105a6:	f7fa fba3 	bl	800acf0 <lwip_htons>
 80105aa:	4603      	mov	r3, r0
 80105ac:	461a      	mov	r2, r3
 80105ae:	4b0c      	ldr	r3, [pc, #48]	; (80105e0 <tcp_receive+0x88c>)
 80105b0:	68db      	ldr	r3, [r3, #12]
 80105b2:	4322      	orrs	r2, r4
 80105b4:	b292      	uxth	r2, r2
 80105b6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80105b8:	4b09      	ldr	r3, [pc, #36]	; (80105e0 <tcp_receive+0x88c>)
 80105ba:	891c      	ldrh	r4, [r3, #8]
 80105bc:	4b08      	ldr	r3, [pc, #32]	; (80105e0 <tcp_receive+0x88c>)
 80105be:	68db      	ldr	r3, [r3, #12]
 80105c0:	899b      	ldrh	r3, [r3, #12]
 80105c2:	b29b      	uxth	r3, r3
 80105c4:	4618      	mov	r0, r3
 80105c6:	f7fa fb93 	bl	800acf0 <lwip_htons>
 80105ca:	4603      	mov	r3, r0
 80105cc:	b2db      	uxtb	r3, r3
 80105ce:	f003 0303 	and.w	r3, r3, #3
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d00e      	beq.n	80105f4 <tcp_receive+0x8a0>
 80105d6:	2301      	movs	r3, #1
 80105d8:	e00d      	b.n	80105f6 <tcp_receive+0x8a2>
 80105da:	bf00      	nop
 80105dc:	20010d94 	.word	0x20010d94
 80105e0:	20010d74 	.word	0x20010d74
 80105e4:	20010d9e 	.word	0x20010d9e
 80105e8:	0801b070 	.word	0x0801b070
 80105ec:	0801b418 	.word	0x0801b418
 80105f0:	0801b0bc 	.word	0x0801b0bc
 80105f4:	2300      	movs	r3, #0
 80105f6:	4423      	add	r3, r4
 80105f8:	b29a      	uxth	r2, r3
 80105fa:	4b98      	ldr	r3, [pc, #608]	; (801085c <tcp_receive+0xb08>)
 80105fc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80105fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010600:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010608:	6938      	ldr	r0, [r7, #16]
 801060a:	f7fd fc4a 	bl	800dea2 <tcp_seg_free>
            while (next &&
 801060e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010610:	2b00      	cmp	r3, #0
 8010612:	d00e      	beq.n	8010632 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010614:	4b91      	ldr	r3, [pc, #580]	; (801085c <tcp_receive+0xb08>)
 8010616:	881b      	ldrh	r3, [r3, #0]
 8010618:	461a      	mov	r2, r3
 801061a:	4b91      	ldr	r3, [pc, #580]	; (8010860 <tcp_receive+0xb0c>)
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	441a      	add	r2, r3
 8010620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010622:	68db      	ldr	r3, [r3, #12]
 8010624:	685b      	ldr	r3, [r3, #4]
 8010626:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010628:	8909      	ldrh	r1, [r1, #8]
 801062a:	440b      	add	r3, r1
 801062c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801062e:	2b00      	cmp	r3, #0
 8010630:	da9a      	bge.n	8010568 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010634:	2b00      	cmp	r3, #0
 8010636:	d059      	beq.n	80106ec <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8010638:	4b88      	ldr	r3, [pc, #544]	; (801085c <tcp_receive+0xb08>)
 801063a:	881b      	ldrh	r3, [r3, #0]
 801063c:	461a      	mov	r2, r3
 801063e:	4b88      	ldr	r3, [pc, #544]	; (8010860 <tcp_receive+0xb0c>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	441a      	add	r2, r3
 8010644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010646:	68db      	ldr	r3, [r3, #12]
 8010648:	685b      	ldr	r3, [r3, #4]
 801064a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801064c:	2b00      	cmp	r3, #0
 801064e:	dd4d      	ble.n	80106ec <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010652:	68db      	ldr	r3, [r3, #12]
 8010654:	685b      	ldr	r3, [r3, #4]
 8010656:	b29a      	uxth	r2, r3
 8010658:	4b81      	ldr	r3, [pc, #516]	; (8010860 <tcp_receive+0xb0c>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	b29b      	uxth	r3, r3
 801065e:	1ad3      	subs	r3, r2, r3
 8010660:	b29a      	uxth	r2, r3
 8010662:	4b80      	ldr	r3, [pc, #512]	; (8010864 <tcp_receive+0xb10>)
 8010664:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010666:	4b7f      	ldr	r3, [pc, #508]	; (8010864 <tcp_receive+0xb10>)
 8010668:	68db      	ldr	r3, [r3, #12]
 801066a:	899b      	ldrh	r3, [r3, #12]
 801066c:	b29b      	uxth	r3, r3
 801066e:	4618      	mov	r0, r3
 8010670:	f7fa fb3e 	bl	800acf0 <lwip_htons>
 8010674:	4603      	mov	r3, r0
 8010676:	b2db      	uxtb	r3, r3
 8010678:	f003 0302 	and.w	r3, r3, #2
 801067c:	2b00      	cmp	r3, #0
 801067e:	d005      	beq.n	801068c <tcp_receive+0x938>
                inseg.len -= 1;
 8010680:	4b78      	ldr	r3, [pc, #480]	; (8010864 <tcp_receive+0xb10>)
 8010682:	891b      	ldrh	r3, [r3, #8]
 8010684:	3b01      	subs	r3, #1
 8010686:	b29a      	uxth	r2, r3
 8010688:	4b76      	ldr	r3, [pc, #472]	; (8010864 <tcp_receive+0xb10>)
 801068a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801068c:	4b75      	ldr	r3, [pc, #468]	; (8010864 <tcp_receive+0xb10>)
 801068e:	685b      	ldr	r3, [r3, #4]
 8010690:	4a74      	ldr	r2, [pc, #464]	; (8010864 <tcp_receive+0xb10>)
 8010692:	8912      	ldrh	r2, [r2, #8]
 8010694:	4611      	mov	r1, r2
 8010696:	4618      	mov	r0, r3
 8010698:	f7fb fdd8 	bl	800c24c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801069c:	4b71      	ldr	r3, [pc, #452]	; (8010864 <tcp_receive+0xb10>)
 801069e:	891c      	ldrh	r4, [r3, #8]
 80106a0:	4b70      	ldr	r3, [pc, #448]	; (8010864 <tcp_receive+0xb10>)
 80106a2:	68db      	ldr	r3, [r3, #12]
 80106a4:	899b      	ldrh	r3, [r3, #12]
 80106a6:	b29b      	uxth	r3, r3
 80106a8:	4618      	mov	r0, r3
 80106aa:	f7fa fb21 	bl	800acf0 <lwip_htons>
 80106ae:	4603      	mov	r3, r0
 80106b0:	b2db      	uxtb	r3, r3
 80106b2:	f003 0303 	and.w	r3, r3, #3
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d001      	beq.n	80106be <tcp_receive+0x96a>
 80106ba:	2301      	movs	r3, #1
 80106bc:	e000      	b.n	80106c0 <tcp_receive+0x96c>
 80106be:	2300      	movs	r3, #0
 80106c0:	4423      	add	r3, r4
 80106c2:	b29a      	uxth	r2, r3
 80106c4:	4b65      	ldr	r3, [pc, #404]	; (801085c <tcp_receive+0xb08>)
 80106c6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80106c8:	4b64      	ldr	r3, [pc, #400]	; (801085c <tcp_receive+0xb08>)
 80106ca:	881b      	ldrh	r3, [r3, #0]
 80106cc:	461a      	mov	r2, r3
 80106ce:	4b64      	ldr	r3, [pc, #400]	; (8010860 <tcp_receive+0xb0c>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	441a      	add	r2, r3
 80106d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106d6:	68db      	ldr	r3, [r3, #12]
 80106d8:	685b      	ldr	r3, [r3, #4]
 80106da:	429a      	cmp	r2, r3
 80106dc:	d006      	beq.n	80106ec <tcp_receive+0x998>
 80106de:	4b62      	ldr	r3, [pc, #392]	; (8010868 <tcp_receive+0xb14>)
 80106e0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80106e4:	4961      	ldr	r1, [pc, #388]	; (801086c <tcp_receive+0xb18>)
 80106e6:	4862      	ldr	r0, [pc, #392]	; (8010870 <tcp_receive+0xb1c>)
 80106e8:	f007 fd22 	bl	8018130 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80106f0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80106f2:	4b5a      	ldr	r3, [pc, #360]	; (801085c <tcp_receive+0xb08>)
 80106f4:	881b      	ldrh	r3, [r3, #0]
 80106f6:	461a      	mov	r2, r3
 80106f8:	4b59      	ldr	r3, [pc, #356]	; (8010860 <tcp_receive+0xb0c>)
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	441a      	add	r2, r3
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010706:	4b55      	ldr	r3, [pc, #340]	; (801085c <tcp_receive+0xb08>)
 8010708:	881b      	ldrh	r3, [r3, #0]
 801070a:	429a      	cmp	r2, r3
 801070c:	d206      	bcs.n	801071c <tcp_receive+0x9c8>
 801070e:	4b56      	ldr	r3, [pc, #344]	; (8010868 <tcp_receive+0xb14>)
 8010710:	f240 6207 	movw	r2, #1543	; 0x607
 8010714:	4957      	ldr	r1, [pc, #348]	; (8010874 <tcp_receive+0xb20>)
 8010716:	4856      	ldr	r0, [pc, #344]	; (8010870 <tcp_receive+0xb1c>)
 8010718:	f007 fd0a 	bl	8018130 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010720:	4b4e      	ldr	r3, [pc, #312]	; (801085c <tcp_receive+0xb08>)
 8010722:	881b      	ldrh	r3, [r3, #0]
 8010724:	1ad3      	subs	r3, r2, r3
 8010726:	b29a      	uxth	r2, r3
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801072c:	6878      	ldr	r0, [r7, #4]
 801072e:	f7fc fe93 	bl	800d458 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010732:	4b4c      	ldr	r3, [pc, #304]	; (8010864 <tcp_receive+0xb10>)
 8010734:	685b      	ldr	r3, [r3, #4]
 8010736:	891b      	ldrh	r3, [r3, #8]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d006      	beq.n	801074a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801073c:	4b49      	ldr	r3, [pc, #292]	; (8010864 <tcp_receive+0xb10>)
 801073e:	685b      	ldr	r3, [r3, #4]
 8010740:	4a4d      	ldr	r2, [pc, #308]	; (8010878 <tcp_receive+0xb24>)
 8010742:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010744:	4b47      	ldr	r3, [pc, #284]	; (8010864 <tcp_receive+0xb10>)
 8010746:	2200      	movs	r2, #0
 8010748:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801074a:	4b46      	ldr	r3, [pc, #280]	; (8010864 <tcp_receive+0xb10>)
 801074c:	68db      	ldr	r3, [r3, #12]
 801074e:	899b      	ldrh	r3, [r3, #12]
 8010750:	b29b      	uxth	r3, r3
 8010752:	4618      	mov	r0, r3
 8010754:	f7fa facc 	bl	800acf0 <lwip_htons>
 8010758:	4603      	mov	r3, r0
 801075a:	b2db      	uxtb	r3, r3
 801075c:	f003 0301 	and.w	r3, r3, #1
 8010760:	2b00      	cmp	r3, #0
 8010762:	f000 80b8 	beq.w	80108d6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010766:	4b45      	ldr	r3, [pc, #276]	; (801087c <tcp_receive+0xb28>)
 8010768:	781b      	ldrb	r3, [r3, #0]
 801076a:	f043 0320 	orr.w	r3, r3, #32
 801076e:	b2da      	uxtb	r2, r3
 8010770:	4b42      	ldr	r3, [pc, #264]	; (801087c <tcp_receive+0xb28>)
 8010772:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010774:	e0af      	b.n	80108d6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801077a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010780:	68db      	ldr	r3, [r3, #12]
 8010782:	685b      	ldr	r3, [r3, #4]
 8010784:	4a36      	ldr	r2, [pc, #216]	; (8010860 <tcp_receive+0xb0c>)
 8010786:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	891b      	ldrh	r3, [r3, #8]
 801078c:	461c      	mov	r4, r3
 801078e:	68bb      	ldr	r3, [r7, #8]
 8010790:	68db      	ldr	r3, [r3, #12]
 8010792:	899b      	ldrh	r3, [r3, #12]
 8010794:	b29b      	uxth	r3, r3
 8010796:	4618      	mov	r0, r3
 8010798:	f7fa faaa 	bl	800acf0 <lwip_htons>
 801079c:	4603      	mov	r3, r0
 801079e:	b2db      	uxtb	r3, r3
 80107a0:	f003 0303 	and.w	r3, r3, #3
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d001      	beq.n	80107ac <tcp_receive+0xa58>
 80107a8:	2301      	movs	r3, #1
 80107aa:	e000      	b.n	80107ae <tcp_receive+0xa5a>
 80107ac:	2300      	movs	r3, #0
 80107ae:	191a      	adds	r2, r3, r4
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107b4:	441a      	add	r2, r3
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80107be:	461c      	mov	r4, r3
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	891b      	ldrh	r3, [r3, #8]
 80107c4:	461d      	mov	r5, r3
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	68db      	ldr	r3, [r3, #12]
 80107ca:	899b      	ldrh	r3, [r3, #12]
 80107cc:	b29b      	uxth	r3, r3
 80107ce:	4618      	mov	r0, r3
 80107d0:	f7fa fa8e 	bl	800acf0 <lwip_htons>
 80107d4:	4603      	mov	r3, r0
 80107d6:	b2db      	uxtb	r3, r3
 80107d8:	f003 0303 	and.w	r3, r3, #3
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d001      	beq.n	80107e4 <tcp_receive+0xa90>
 80107e0:	2301      	movs	r3, #1
 80107e2:	e000      	b.n	80107e6 <tcp_receive+0xa92>
 80107e4:	2300      	movs	r3, #0
 80107e6:	442b      	add	r3, r5
 80107e8:	429c      	cmp	r4, r3
 80107ea:	d206      	bcs.n	80107fa <tcp_receive+0xaa6>
 80107ec:	4b1e      	ldr	r3, [pc, #120]	; (8010868 <tcp_receive+0xb14>)
 80107ee:	f240 622b 	movw	r2, #1579	; 0x62b
 80107f2:	4923      	ldr	r1, [pc, #140]	; (8010880 <tcp_receive+0xb2c>)
 80107f4:	481e      	ldr	r0, [pc, #120]	; (8010870 <tcp_receive+0xb1c>)
 80107f6:	f007 fc9b 	bl	8018130 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	891b      	ldrh	r3, [r3, #8]
 80107fe:	461c      	mov	r4, r3
 8010800:	68bb      	ldr	r3, [r7, #8]
 8010802:	68db      	ldr	r3, [r3, #12]
 8010804:	899b      	ldrh	r3, [r3, #12]
 8010806:	b29b      	uxth	r3, r3
 8010808:	4618      	mov	r0, r3
 801080a:	f7fa fa71 	bl	800acf0 <lwip_htons>
 801080e:	4603      	mov	r3, r0
 8010810:	b2db      	uxtb	r3, r3
 8010812:	f003 0303 	and.w	r3, r3, #3
 8010816:	2b00      	cmp	r3, #0
 8010818:	d001      	beq.n	801081e <tcp_receive+0xaca>
 801081a:	2301      	movs	r3, #1
 801081c:	e000      	b.n	8010820 <tcp_receive+0xacc>
 801081e:	2300      	movs	r3, #0
 8010820:	1919      	adds	r1, r3, r4
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010826:	b28b      	uxth	r3, r1
 8010828:	1ad3      	subs	r3, r2, r3
 801082a:	b29a      	uxth	r2, r3
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f7fc fe11 	bl	800d458 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010836:	68bb      	ldr	r3, [r7, #8]
 8010838:	685b      	ldr	r3, [r3, #4]
 801083a:	891b      	ldrh	r3, [r3, #8]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d028      	beq.n	8010892 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010840:	4b0d      	ldr	r3, [pc, #52]	; (8010878 <tcp_receive+0xb24>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d01d      	beq.n	8010884 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8010848:	4b0b      	ldr	r3, [pc, #44]	; (8010878 <tcp_receive+0xb24>)
 801084a:	681a      	ldr	r2, [r3, #0]
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	685b      	ldr	r3, [r3, #4]
 8010850:	4619      	mov	r1, r3
 8010852:	4610      	mov	r0, r2
 8010854:	f7fb ff4e 	bl	800c6f4 <pbuf_cat>
 8010858:	e018      	b.n	801088c <tcp_receive+0xb38>
 801085a:	bf00      	nop
 801085c:	20010d9e 	.word	0x20010d9e
 8010860:	20010d94 	.word	0x20010d94
 8010864:	20010d74 	.word	0x20010d74
 8010868:	0801b070 	.word	0x0801b070
 801086c:	0801b450 	.word	0x0801b450
 8010870:	0801b0bc 	.word	0x0801b0bc
 8010874:	0801b48c 	.word	0x0801b48c
 8010878:	20010da4 	.word	0x20010da4
 801087c:	20010da1 	.word	0x20010da1
 8010880:	0801b4ac 	.word	0x0801b4ac
            } else {
              recv_data = cseg->p;
 8010884:	68bb      	ldr	r3, [r7, #8]
 8010886:	685b      	ldr	r3, [r3, #4]
 8010888:	4a70      	ldr	r2, [pc, #448]	; (8010a4c <tcp_receive+0xcf8>)
 801088a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801088c:	68bb      	ldr	r3, [r7, #8]
 801088e:	2200      	movs	r2, #0
 8010890:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010892:	68bb      	ldr	r3, [r7, #8]
 8010894:	68db      	ldr	r3, [r3, #12]
 8010896:	899b      	ldrh	r3, [r3, #12]
 8010898:	b29b      	uxth	r3, r3
 801089a:	4618      	mov	r0, r3
 801089c:	f7fa fa28 	bl	800acf0 <lwip_htons>
 80108a0:	4603      	mov	r3, r0
 80108a2:	b2db      	uxtb	r3, r3
 80108a4:	f003 0301 	and.w	r3, r3, #1
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d00d      	beq.n	80108c8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80108ac:	4b68      	ldr	r3, [pc, #416]	; (8010a50 <tcp_receive+0xcfc>)
 80108ae:	781b      	ldrb	r3, [r3, #0]
 80108b0:	f043 0320 	orr.w	r3, r3, #32
 80108b4:	b2da      	uxtb	r2, r3
 80108b6:	4b66      	ldr	r3, [pc, #408]	; (8010a50 <tcp_receive+0xcfc>)
 80108b8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	7d1b      	ldrb	r3, [r3, #20]
 80108be:	2b04      	cmp	r3, #4
 80108c0:	d102      	bne.n	80108c8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	2207      	movs	r2, #7
 80108c6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80108c8:	68bb      	ldr	r3, [r7, #8]
 80108ca:	681a      	ldr	r2, [r3, #0]
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80108d0:	68b8      	ldr	r0, [r7, #8]
 80108d2:	f7fd fae6 	bl	800dea2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d008      	beq.n	80108f0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108e2:	68db      	ldr	r3, [r3, #12]
 80108e4:	685a      	ldr	r2, [r3, #4]
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80108ea:	429a      	cmp	r2, r3
 80108ec:	f43f af43 	beq.w	8010776 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	8b5b      	ldrh	r3, [r3, #26]
 80108f4:	f003 0301 	and.w	r3, r3, #1
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d00e      	beq.n	801091a <tcp_receive+0xbc6>
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	8b5b      	ldrh	r3, [r3, #26]
 8010900:	f023 0301 	bic.w	r3, r3, #1
 8010904:	b29a      	uxth	r2, r3
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	835a      	strh	r2, [r3, #26]
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	8b5b      	ldrh	r3, [r3, #26]
 801090e:	f043 0302 	orr.w	r3, r3, #2
 8010912:	b29a      	uxth	r2, r3
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010918:	e188      	b.n	8010c2c <tcp_receive+0xed8>
        tcp_ack(pcb);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	8b5b      	ldrh	r3, [r3, #26]
 801091e:	f043 0301 	orr.w	r3, r3, #1
 8010922:	b29a      	uxth	r2, r3
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010928:	e180      	b.n	8010c2c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801092e:	2b00      	cmp	r3, #0
 8010930:	d106      	bne.n	8010940 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010932:	4848      	ldr	r0, [pc, #288]	; (8010a54 <tcp_receive+0xd00>)
 8010934:	f7fd faec 	bl	800df10 <tcp_seg_copy>
 8010938:	4602      	mov	r2, r0
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	675a      	str	r2, [r3, #116]	; 0x74
 801093e:	e16d      	b.n	8010c1c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010940:	2300      	movs	r3, #0
 8010942:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010948:	63bb      	str	r3, [r7, #56]	; 0x38
 801094a:	e157      	b.n	8010bfc <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801094c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801094e:	68db      	ldr	r3, [r3, #12]
 8010950:	685a      	ldr	r2, [r3, #4]
 8010952:	4b41      	ldr	r3, [pc, #260]	; (8010a58 <tcp_receive+0xd04>)
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	429a      	cmp	r2, r3
 8010958:	d11d      	bne.n	8010996 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801095a:	4b3e      	ldr	r3, [pc, #248]	; (8010a54 <tcp_receive+0xd00>)
 801095c:	891a      	ldrh	r2, [r3, #8]
 801095e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010960:	891b      	ldrh	r3, [r3, #8]
 8010962:	429a      	cmp	r2, r3
 8010964:	f240 814f 	bls.w	8010c06 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010968:	483a      	ldr	r0, [pc, #232]	; (8010a54 <tcp_receive+0xd00>)
 801096a:	f7fd fad1 	bl	800df10 <tcp_seg_copy>
 801096e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	2b00      	cmp	r3, #0
 8010974:	f000 8149 	beq.w	8010c0a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8010978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801097a:	2b00      	cmp	r3, #0
 801097c:	d003      	beq.n	8010986 <tcp_receive+0xc32>
                    prev->next = cseg;
 801097e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010980:	697a      	ldr	r2, [r7, #20]
 8010982:	601a      	str	r2, [r3, #0]
 8010984:	e002      	b.n	801098c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	697a      	ldr	r2, [r7, #20]
 801098a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801098c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801098e:	6978      	ldr	r0, [r7, #20]
 8010990:	f7ff f8dc 	bl	800fb4c <tcp_oos_insert_segment>
                }
                break;
 8010994:	e139      	b.n	8010c0a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010998:	2b00      	cmp	r3, #0
 801099a:	d117      	bne.n	80109cc <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801099c:	4b2e      	ldr	r3, [pc, #184]	; (8010a58 <tcp_receive+0xd04>)
 801099e:	681a      	ldr	r2, [r3, #0]
 80109a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109a2:	68db      	ldr	r3, [r3, #12]
 80109a4:	685b      	ldr	r3, [r3, #4]
 80109a6:	1ad3      	subs	r3, r2, r3
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	da57      	bge.n	8010a5c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80109ac:	4829      	ldr	r0, [pc, #164]	; (8010a54 <tcp_receive+0xd00>)
 80109ae:	f7fd faaf 	bl	800df10 <tcp_seg_copy>
 80109b2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80109b4:	69bb      	ldr	r3, [r7, #24]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	f000 8129 	beq.w	8010c0e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	69ba      	ldr	r2, [r7, #24]
 80109c0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80109c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80109c4:	69b8      	ldr	r0, [r7, #24]
 80109c6:	f7ff f8c1 	bl	800fb4c <tcp_oos_insert_segment>
                  }
                  break;
 80109ca:	e120      	b.n	8010c0e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80109cc:	4b22      	ldr	r3, [pc, #136]	; (8010a58 <tcp_receive+0xd04>)
 80109ce:	681a      	ldr	r2, [r3, #0]
 80109d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109d2:	68db      	ldr	r3, [r3, #12]
 80109d4:	685b      	ldr	r3, [r3, #4]
 80109d6:	1ad3      	subs	r3, r2, r3
 80109d8:	3b01      	subs	r3, #1
 80109da:	2b00      	cmp	r3, #0
 80109dc:	db3e      	blt.n	8010a5c <tcp_receive+0xd08>
 80109de:	4b1e      	ldr	r3, [pc, #120]	; (8010a58 <tcp_receive+0xd04>)
 80109e0:	681a      	ldr	r2, [r3, #0]
 80109e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109e4:	68db      	ldr	r3, [r3, #12]
 80109e6:	685b      	ldr	r3, [r3, #4]
 80109e8:	1ad3      	subs	r3, r2, r3
 80109ea:	3301      	adds	r3, #1
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	dc35      	bgt.n	8010a5c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80109f0:	4818      	ldr	r0, [pc, #96]	; (8010a54 <tcp_receive+0xd00>)
 80109f2:	f7fd fa8d 	bl	800df10 <tcp_seg_copy>
 80109f6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80109f8:	69fb      	ldr	r3, [r7, #28]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	f000 8109 	beq.w	8010c12 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a02:	68db      	ldr	r3, [r3, #12]
 8010a04:	685b      	ldr	r3, [r3, #4]
 8010a06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a08:	8912      	ldrh	r2, [r2, #8]
 8010a0a:	441a      	add	r2, r3
 8010a0c:	4b12      	ldr	r3, [pc, #72]	; (8010a58 <tcp_receive+0xd04>)
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	1ad3      	subs	r3, r2, r3
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	dd12      	ble.n	8010a3c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010a16:	4b10      	ldr	r3, [pc, #64]	; (8010a58 <tcp_receive+0xd04>)
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	b29a      	uxth	r2, r3
 8010a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a1e:	68db      	ldr	r3, [r3, #12]
 8010a20:	685b      	ldr	r3, [r3, #4]
 8010a22:	b29b      	uxth	r3, r3
 8010a24:	1ad3      	subs	r3, r2, r3
 8010a26:	b29a      	uxth	r2, r3
 8010a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a2a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a2e:	685a      	ldr	r2, [r3, #4]
 8010a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a32:	891b      	ldrh	r3, [r3, #8]
 8010a34:	4619      	mov	r1, r3
 8010a36:	4610      	mov	r0, r2
 8010a38:	f7fb fc08 	bl	800c24c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a3e:	69fa      	ldr	r2, [r7, #28]
 8010a40:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010a42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010a44:	69f8      	ldr	r0, [r7, #28]
 8010a46:	f7ff f881 	bl	800fb4c <tcp_oos_insert_segment>
                  }
                  break;
 8010a4a:	e0e2      	b.n	8010c12 <tcp_receive+0xebe>
 8010a4c:	20010da4 	.word	0x20010da4
 8010a50:	20010da1 	.word	0x20010da1
 8010a54:	20010d74 	.word	0x20010d74
 8010a58:	20010d94 	.word	0x20010d94
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a5e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	f040 80c6 	bne.w	8010bf6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010a6a:	4b80      	ldr	r3, [pc, #512]	; (8010c6c <tcp_receive+0xf18>)
 8010a6c:	681a      	ldr	r2, [r3, #0]
 8010a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a70:	68db      	ldr	r3, [r3, #12]
 8010a72:	685b      	ldr	r3, [r3, #4]
 8010a74:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	f340 80bd 	ble.w	8010bf6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a7e:	68db      	ldr	r3, [r3, #12]
 8010a80:	899b      	ldrh	r3, [r3, #12]
 8010a82:	b29b      	uxth	r3, r3
 8010a84:	4618      	mov	r0, r3
 8010a86:	f7fa f933 	bl	800acf0 <lwip_htons>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	b2db      	uxtb	r3, r3
 8010a8e:	f003 0301 	and.w	r3, r3, #1
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	f040 80bf 	bne.w	8010c16 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010a98:	4875      	ldr	r0, [pc, #468]	; (8010c70 <tcp_receive+0xf1c>)
 8010a9a:	f7fd fa39 	bl	800df10 <tcp_seg_copy>
 8010a9e:	4602      	mov	r2, r0
 8010aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aa2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	f000 80b6 	beq.w	8010c1a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ab0:	68db      	ldr	r3, [r3, #12]
 8010ab2:	685b      	ldr	r3, [r3, #4]
 8010ab4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010ab6:	8912      	ldrh	r2, [r2, #8]
 8010ab8:	441a      	add	r2, r3
 8010aba:	4b6c      	ldr	r3, [pc, #432]	; (8010c6c <tcp_receive+0xf18>)
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	1ad3      	subs	r3, r2, r3
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	dd12      	ble.n	8010aea <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010ac4:	4b69      	ldr	r3, [pc, #420]	; (8010c6c <tcp_receive+0xf18>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	b29a      	uxth	r2, r3
 8010aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010acc:	68db      	ldr	r3, [r3, #12]
 8010ace:	685b      	ldr	r3, [r3, #4]
 8010ad0:	b29b      	uxth	r3, r3
 8010ad2:	1ad3      	subs	r3, r2, r3
 8010ad4:	b29a      	uxth	r2, r3
 8010ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ad8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010adc:	685a      	ldr	r2, [r3, #4]
 8010ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ae0:	891b      	ldrh	r3, [r3, #8]
 8010ae2:	4619      	mov	r1, r3
 8010ae4:	4610      	mov	r0, r2
 8010ae6:	f7fb fbb1 	bl	800c24c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010aea:	4b62      	ldr	r3, [pc, #392]	; (8010c74 <tcp_receive+0xf20>)
 8010aec:	881b      	ldrh	r3, [r3, #0]
 8010aee:	461a      	mov	r2, r3
 8010af0:	4b5e      	ldr	r3, [pc, #376]	; (8010c6c <tcp_receive+0xf18>)
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	441a      	add	r2, r3
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010afa:	6879      	ldr	r1, [r7, #4]
 8010afc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010afe:	440b      	add	r3, r1
 8010b00:	1ad3      	subs	r3, r2, r3
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	f340 8089 	ble.w	8010c1a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	68db      	ldr	r3, [r3, #12]
 8010b0e:	899b      	ldrh	r3, [r3, #12]
 8010b10:	b29b      	uxth	r3, r3
 8010b12:	4618      	mov	r0, r3
 8010b14:	f7fa f8ec 	bl	800acf0 <lwip_htons>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	b2db      	uxtb	r3, r3
 8010b1c:	f003 0301 	and.w	r3, r3, #1
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d022      	beq.n	8010b6a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	68db      	ldr	r3, [r3, #12]
 8010b2a:	899b      	ldrh	r3, [r3, #12]
 8010b2c:	b29b      	uxth	r3, r3
 8010b2e:	b21b      	sxth	r3, r3
 8010b30:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010b34:	b21c      	sxth	r4, r3
 8010b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	68db      	ldr	r3, [r3, #12]
 8010b3c:	899b      	ldrh	r3, [r3, #12]
 8010b3e:	b29b      	uxth	r3, r3
 8010b40:	4618      	mov	r0, r3
 8010b42:	f7fa f8d5 	bl	800acf0 <lwip_htons>
 8010b46:	4603      	mov	r3, r0
 8010b48:	b2db      	uxtb	r3, r3
 8010b4a:	b29b      	uxth	r3, r3
 8010b4c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010b50:	b29b      	uxth	r3, r3
 8010b52:	4618      	mov	r0, r3
 8010b54:	f7fa f8cc 	bl	800acf0 <lwip_htons>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	b21b      	sxth	r3, r3
 8010b5c:	4323      	orrs	r3, r4
 8010b5e:	b21a      	sxth	r2, r3
 8010b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	68db      	ldr	r3, [r3, #12]
 8010b66:	b292      	uxth	r2, r2
 8010b68:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b6e:	b29a      	uxth	r2, r3
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b74:	4413      	add	r3, r2
 8010b76:	b299      	uxth	r1, r3
 8010b78:	4b3c      	ldr	r3, [pc, #240]	; (8010c6c <tcp_receive+0xf18>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	b29a      	uxth	r2, r3
 8010b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	1a8a      	subs	r2, r1, r2
 8010b84:	b292      	uxth	r2, r2
 8010b86:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	685a      	ldr	r2, [r3, #4]
 8010b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	891b      	ldrh	r3, [r3, #8]
 8010b94:	4619      	mov	r1, r3
 8010b96:	4610      	mov	r0, r2
 8010b98:	f7fb fb58 	bl	800c24c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	891c      	ldrh	r4, [r3, #8]
 8010ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	68db      	ldr	r3, [r3, #12]
 8010ba8:	899b      	ldrh	r3, [r3, #12]
 8010baa:	b29b      	uxth	r3, r3
 8010bac:	4618      	mov	r0, r3
 8010bae:	f7fa f89f 	bl	800acf0 <lwip_htons>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	b2db      	uxtb	r3, r3
 8010bb6:	f003 0303 	and.w	r3, r3, #3
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d001      	beq.n	8010bc2 <tcp_receive+0xe6e>
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	e000      	b.n	8010bc4 <tcp_receive+0xe70>
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	4423      	add	r3, r4
 8010bc6:	b29a      	uxth	r2, r3
 8010bc8:	4b2a      	ldr	r3, [pc, #168]	; (8010c74 <tcp_receive+0xf20>)
 8010bca:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010bcc:	4b29      	ldr	r3, [pc, #164]	; (8010c74 <tcp_receive+0xf20>)
 8010bce:	881b      	ldrh	r3, [r3, #0]
 8010bd0:	461a      	mov	r2, r3
 8010bd2:	4b26      	ldr	r3, [pc, #152]	; (8010c6c <tcp_receive+0xf18>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	441a      	add	r2, r3
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bdc:	6879      	ldr	r1, [r7, #4]
 8010bde:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010be0:	440b      	add	r3, r1
 8010be2:	429a      	cmp	r2, r3
 8010be4:	d019      	beq.n	8010c1a <tcp_receive+0xec6>
 8010be6:	4b24      	ldr	r3, [pc, #144]	; (8010c78 <tcp_receive+0xf24>)
 8010be8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8010bec:	4923      	ldr	r1, [pc, #140]	; (8010c7c <tcp_receive+0xf28>)
 8010bee:	4824      	ldr	r0, [pc, #144]	; (8010c80 <tcp_receive+0xf2c>)
 8010bf0:	f007 fa9e 	bl	8018130 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010bf4:	e011      	b.n	8010c1a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8010bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	f47f aea4 	bne.w	801094c <tcp_receive+0xbf8>
 8010c04:	e00a      	b.n	8010c1c <tcp_receive+0xec8>
                break;
 8010c06:	bf00      	nop
 8010c08:	e008      	b.n	8010c1c <tcp_receive+0xec8>
                break;
 8010c0a:	bf00      	nop
 8010c0c:	e006      	b.n	8010c1c <tcp_receive+0xec8>
                  break;
 8010c0e:	bf00      	nop
 8010c10:	e004      	b.n	8010c1c <tcp_receive+0xec8>
                  break;
 8010c12:	bf00      	nop
 8010c14:	e002      	b.n	8010c1c <tcp_receive+0xec8>
                  break;
 8010c16:	bf00      	nop
 8010c18:	e000      	b.n	8010c1c <tcp_receive+0xec8>
                break;
 8010c1a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010c1c:	6878      	ldr	r0, [r7, #4]
 8010c1e:	f001 fe8b 	bl	8012938 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010c22:	e003      	b.n	8010c2c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010c24:	6878      	ldr	r0, [r7, #4]
 8010c26:	f001 fe87 	bl	8012938 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010c2a:	e01a      	b.n	8010c62 <tcp_receive+0xf0e>
 8010c2c:	e019      	b.n	8010c62 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010c2e:	4b0f      	ldr	r3, [pc, #60]	; (8010c6c <tcp_receive+0xf18>)
 8010c30:	681a      	ldr	r2, [r3, #0]
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c36:	1ad3      	subs	r3, r2, r3
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	db0a      	blt.n	8010c52 <tcp_receive+0xefe>
 8010c3c:	4b0b      	ldr	r3, [pc, #44]	; (8010c6c <tcp_receive+0xf18>)
 8010c3e:	681a      	ldr	r2, [r3, #0]
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c44:	6879      	ldr	r1, [r7, #4]
 8010c46:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010c48:	440b      	add	r3, r1
 8010c4a:	1ad3      	subs	r3, r2, r3
 8010c4c:	3301      	adds	r3, #1
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	dd07      	ble.n	8010c62 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	8b5b      	ldrh	r3, [r3, #26]
 8010c56:	f043 0302 	orr.w	r3, r3, #2
 8010c5a:	b29a      	uxth	r2, r3
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010c60:	e7ff      	b.n	8010c62 <tcp_receive+0xf0e>
 8010c62:	bf00      	nop
 8010c64:	3750      	adds	r7, #80	; 0x50
 8010c66:	46bd      	mov	sp, r7
 8010c68:	bdb0      	pop	{r4, r5, r7, pc}
 8010c6a:	bf00      	nop
 8010c6c:	20010d94 	.word	0x20010d94
 8010c70:	20010d74 	.word	0x20010d74
 8010c74:	20010d9e 	.word	0x20010d9e
 8010c78:	0801b070 	.word	0x0801b070
 8010c7c:	0801b418 	.word	0x0801b418
 8010c80:	0801b0bc 	.word	0x0801b0bc

08010c84 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010c84:	b480      	push	{r7}
 8010c86:	b083      	sub	sp, #12
 8010c88:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010c8a:	4b15      	ldr	r3, [pc, #84]	; (8010ce0 <tcp_get_next_optbyte+0x5c>)
 8010c8c:	881b      	ldrh	r3, [r3, #0]
 8010c8e:	1c5a      	adds	r2, r3, #1
 8010c90:	b291      	uxth	r1, r2
 8010c92:	4a13      	ldr	r2, [pc, #76]	; (8010ce0 <tcp_get_next_optbyte+0x5c>)
 8010c94:	8011      	strh	r1, [r2, #0]
 8010c96:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010c98:	4b12      	ldr	r3, [pc, #72]	; (8010ce4 <tcp_get_next_optbyte+0x60>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d004      	beq.n	8010caa <tcp_get_next_optbyte+0x26>
 8010ca0:	4b11      	ldr	r3, [pc, #68]	; (8010ce8 <tcp_get_next_optbyte+0x64>)
 8010ca2:	881b      	ldrh	r3, [r3, #0]
 8010ca4:	88fa      	ldrh	r2, [r7, #6]
 8010ca6:	429a      	cmp	r2, r3
 8010ca8:	d208      	bcs.n	8010cbc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010caa:	4b10      	ldr	r3, [pc, #64]	; (8010cec <tcp_get_next_optbyte+0x68>)
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	3314      	adds	r3, #20
 8010cb0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010cb2:	88fb      	ldrh	r3, [r7, #6]
 8010cb4:	683a      	ldr	r2, [r7, #0]
 8010cb6:	4413      	add	r3, r2
 8010cb8:	781b      	ldrb	r3, [r3, #0]
 8010cba:	e00b      	b.n	8010cd4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010cbc:	88fb      	ldrh	r3, [r7, #6]
 8010cbe:	b2da      	uxtb	r2, r3
 8010cc0:	4b09      	ldr	r3, [pc, #36]	; (8010ce8 <tcp_get_next_optbyte+0x64>)
 8010cc2:	881b      	ldrh	r3, [r3, #0]
 8010cc4:	b2db      	uxtb	r3, r3
 8010cc6:	1ad3      	subs	r3, r2, r3
 8010cc8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010cca:	4b06      	ldr	r3, [pc, #24]	; (8010ce4 <tcp_get_next_optbyte+0x60>)
 8010ccc:	681a      	ldr	r2, [r3, #0]
 8010cce:	797b      	ldrb	r3, [r7, #5]
 8010cd0:	4413      	add	r3, r2
 8010cd2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	370c      	adds	r7, #12
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cde:	4770      	bx	lr
 8010ce0:	20010d90 	.word	0x20010d90
 8010ce4:	20010d8c 	.word	0x20010d8c
 8010ce8:	20010d8a 	.word	0x20010d8a
 8010cec:	20010d84 	.word	0x20010d84

08010cf0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b084      	sub	sp, #16
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d106      	bne.n	8010d0c <tcp_parseopt+0x1c>
 8010cfe:	4b32      	ldr	r3, [pc, #200]	; (8010dc8 <tcp_parseopt+0xd8>)
 8010d00:	f240 727d 	movw	r2, #1917	; 0x77d
 8010d04:	4931      	ldr	r1, [pc, #196]	; (8010dcc <tcp_parseopt+0xdc>)
 8010d06:	4832      	ldr	r0, [pc, #200]	; (8010dd0 <tcp_parseopt+0xe0>)
 8010d08:	f007 fa12 	bl	8018130 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010d0c:	4b31      	ldr	r3, [pc, #196]	; (8010dd4 <tcp_parseopt+0xe4>)
 8010d0e:	881b      	ldrh	r3, [r3, #0]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d055      	beq.n	8010dc0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010d14:	4b30      	ldr	r3, [pc, #192]	; (8010dd8 <tcp_parseopt+0xe8>)
 8010d16:	2200      	movs	r2, #0
 8010d18:	801a      	strh	r2, [r3, #0]
 8010d1a:	e045      	b.n	8010da8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8010d1c:	f7ff ffb2 	bl	8010c84 <tcp_get_next_optbyte>
 8010d20:	4603      	mov	r3, r0
 8010d22:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010d24:	7bfb      	ldrb	r3, [r7, #15]
 8010d26:	2b02      	cmp	r3, #2
 8010d28:	d006      	beq.n	8010d38 <tcp_parseopt+0x48>
 8010d2a:	2b02      	cmp	r3, #2
 8010d2c:	dc2b      	bgt.n	8010d86 <tcp_parseopt+0x96>
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d041      	beq.n	8010db6 <tcp_parseopt+0xc6>
 8010d32:	2b01      	cmp	r3, #1
 8010d34:	d127      	bne.n	8010d86 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8010d36:	e037      	b.n	8010da8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010d38:	f7ff ffa4 	bl	8010c84 <tcp_get_next_optbyte>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	2b04      	cmp	r3, #4
 8010d40:	d13b      	bne.n	8010dba <tcp_parseopt+0xca>
 8010d42:	4b25      	ldr	r3, [pc, #148]	; (8010dd8 <tcp_parseopt+0xe8>)
 8010d44:	881b      	ldrh	r3, [r3, #0]
 8010d46:	3301      	adds	r3, #1
 8010d48:	4a22      	ldr	r2, [pc, #136]	; (8010dd4 <tcp_parseopt+0xe4>)
 8010d4a:	8812      	ldrh	r2, [r2, #0]
 8010d4c:	4293      	cmp	r3, r2
 8010d4e:	da34      	bge.n	8010dba <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010d50:	f7ff ff98 	bl	8010c84 <tcp_get_next_optbyte>
 8010d54:	4603      	mov	r3, r0
 8010d56:	b29b      	uxth	r3, r3
 8010d58:	021b      	lsls	r3, r3, #8
 8010d5a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010d5c:	f7ff ff92 	bl	8010c84 <tcp_get_next_optbyte>
 8010d60:	4603      	mov	r3, r0
 8010d62:	b29a      	uxth	r2, r3
 8010d64:	89bb      	ldrh	r3, [r7, #12]
 8010d66:	4313      	orrs	r3, r2
 8010d68:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010d6a:	89bb      	ldrh	r3, [r7, #12]
 8010d6c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010d70:	d804      	bhi.n	8010d7c <tcp_parseopt+0x8c>
 8010d72:	89bb      	ldrh	r3, [r7, #12]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d001      	beq.n	8010d7c <tcp_parseopt+0x8c>
 8010d78:	89ba      	ldrh	r2, [r7, #12]
 8010d7a:	e001      	b.n	8010d80 <tcp_parseopt+0x90>
 8010d7c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010d84:	e010      	b.n	8010da8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010d86:	f7ff ff7d 	bl	8010c84 <tcp_get_next_optbyte>
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010d8e:	7afb      	ldrb	r3, [r7, #11]
 8010d90:	2b01      	cmp	r3, #1
 8010d92:	d914      	bls.n	8010dbe <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010d94:	7afb      	ldrb	r3, [r7, #11]
 8010d96:	b29a      	uxth	r2, r3
 8010d98:	4b0f      	ldr	r3, [pc, #60]	; (8010dd8 <tcp_parseopt+0xe8>)
 8010d9a:	881b      	ldrh	r3, [r3, #0]
 8010d9c:	4413      	add	r3, r2
 8010d9e:	b29b      	uxth	r3, r3
 8010da0:	3b02      	subs	r3, #2
 8010da2:	b29a      	uxth	r2, r3
 8010da4:	4b0c      	ldr	r3, [pc, #48]	; (8010dd8 <tcp_parseopt+0xe8>)
 8010da6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010da8:	4b0b      	ldr	r3, [pc, #44]	; (8010dd8 <tcp_parseopt+0xe8>)
 8010daa:	881a      	ldrh	r2, [r3, #0]
 8010dac:	4b09      	ldr	r3, [pc, #36]	; (8010dd4 <tcp_parseopt+0xe4>)
 8010dae:	881b      	ldrh	r3, [r3, #0]
 8010db0:	429a      	cmp	r2, r3
 8010db2:	d3b3      	bcc.n	8010d1c <tcp_parseopt+0x2c>
 8010db4:	e004      	b.n	8010dc0 <tcp_parseopt+0xd0>
          return;
 8010db6:	bf00      	nop
 8010db8:	e002      	b.n	8010dc0 <tcp_parseopt+0xd0>
            return;
 8010dba:	bf00      	nop
 8010dbc:	e000      	b.n	8010dc0 <tcp_parseopt+0xd0>
            return;
 8010dbe:	bf00      	nop
      }
    }
  }
}
 8010dc0:	3710      	adds	r7, #16
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}
 8010dc6:	bf00      	nop
 8010dc8:	0801b070 	.word	0x0801b070
 8010dcc:	0801b4d4 	.word	0x0801b4d4
 8010dd0:	0801b0bc 	.word	0x0801b0bc
 8010dd4:	20010d88 	.word	0x20010d88
 8010dd8:	20010d90 	.word	0x20010d90

08010ddc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010ddc:	b480      	push	{r7}
 8010dde:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010de0:	4b05      	ldr	r3, [pc, #20]	; (8010df8 <tcp_trigger_input_pcb_close+0x1c>)
 8010de2:	781b      	ldrb	r3, [r3, #0]
 8010de4:	f043 0310 	orr.w	r3, r3, #16
 8010de8:	b2da      	uxtb	r2, r3
 8010dea:	4b03      	ldr	r3, [pc, #12]	; (8010df8 <tcp_trigger_input_pcb_close+0x1c>)
 8010dec:	701a      	strb	r2, [r3, #0]
}
 8010dee:	bf00      	nop
 8010df0:	46bd      	mov	sp, r7
 8010df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df6:	4770      	bx	lr
 8010df8:	20010da1 	.word	0x20010da1

08010dfc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b084      	sub	sp, #16
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	60f8      	str	r0, [r7, #12]
 8010e04:	60b9      	str	r1, [r7, #8]
 8010e06:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d00a      	beq.n	8010e24 <tcp_route+0x28>
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	7a1b      	ldrb	r3, [r3, #8]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d006      	beq.n	8010e24 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	7a1b      	ldrb	r3, [r3, #8]
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f7fb f80e 	bl	800be3c <netif_get_by_index>
 8010e20:	4603      	mov	r3, r0
 8010e22:	e003      	b.n	8010e2c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010e24:	6878      	ldr	r0, [r7, #4]
 8010e26:	f005 fca9 	bl	801677c <ip4_route>
 8010e2a:	4603      	mov	r3, r0
  }
}
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	3710      	adds	r7, #16
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}

08010e34 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010e34:	b590      	push	{r4, r7, lr}
 8010e36:	b087      	sub	sp, #28
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	60f8      	str	r0, [r7, #12]
 8010e3c:	60b9      	str	r1, [r7, #8]
 8010e3e:	603b      	str	r3, [r7, #0]
 8010e40:	4613      	mov	r3, r2
 8010e42:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d105      	bne.n	8010e56 <tcp_create_segment+0x22>
 8010e4a:	4b44      	ldr	r3, [pc, #272]	; (8010f5c <tcp_create_segment+0x128>)
 8010e4c:	22a3      	movs	r2, #163	; 0xa3
 8010e4e:	4944      	ldr	r1, [pc, #272]	; (8010f60 <tcp_create_segment+0x12c>)
 8010e50:	4844      	ldr	r0, [pc, #272]	; (8010f64 <tcp_create_segment+0x130>)
 8010e52:	f007 f96d 	bl	8018130 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010e56:	68bb      	ldr	r3, [r7, #8]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d105      	bne.n	8010e68 <tcp_create_segment+0x34>
 8010e5c:	4b3f      	ldr	r3, [pc, #252]	; (8010f5c <tcp_create_segment+0x128>)
 8010e5e:	22a4      	movs	r2, #164	; 0xa4
 8010e60:	4941      	ldr	r1, [pc, #260]	; (8010f68 <tcp_create_segment+0x134>)
 8010e62:	4840      	ldr	r0, [pc, #256]	; (8010f64 <tcp_create_segment+0x130>)
 8010e64:	f007 f964 	bl	8018130 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010e68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010e6c:	009b      	lsls	r3, r3, #2
 8010e6e:	b2db      	uxtb	r3, r3
 8010e70:	f003 0304 	and.w	r3, r3, #4
 8010e74:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010e76:	2003      	movs	r0, #3
 8010e78:	f7fa fc48 	bl	800b70c <memp_malloc>
 8010e7c:	6138      	str	r0, [r7, #16]
 8010e7e:	693b      	ldr	r3, [r7, #16]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d104      	bne.n	8010e8e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010e84:	68b8      	ldr	r0, [r7, #8]
 8010e86:	f7fb fb67 	bl	800c558 <pbuf_free>
    return NULL;
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	e061      	b.n	8010f52 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010e94:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010e96:	693b      	ldr	r3, [r7, #16]
 8010e98:	2200      	movs	r2, #0
 8010e9a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010e9c:	693b      	ldr	r3, [r7, #16]
 8010e9e:	68ba      	ldr	r2, [r7, #8]
 8010ea0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010ea2:	68bb      	ldr	r3, [r7, #8]
 8010ea4:	891a      	ldrh	r2, [r3, #8]
 8010ea6:	7dfb      	ldrb	r3, [r7, #23]
 8010ea8:	b29b      	uxth	r3, r3
 8010eaa:	429a      	cmp	r2, r3
 8010eac:	d205      	bcs.n	8010eba <tcp_create_segment+0x86>
 8010eae:	4b2b      	ldr	r3, [pc, #172]	; (8010f5c <tcp_create_segment+0x128>)
 8010eb0:	22b0      	movs	r2, #176	; 0xb0
 8010eb2:	492e      	ldr	r1, [pc, #184]	; (8010f6c <tcp_create_segment+0x138>)
 8010eb4:	482b      	ldr	r0, [pc, #172]	; (8010f64 <tcp_create_segment+0x130>)
 8010eb6:	f007 f93b 	bl	8018130 <iprintf>
  seg->len = p->tot_len - optlen;
 8010eba:	68bb      	ldr	r3, [r7, #8]
 8010ebc:	891a      	ldrh	r2, [r3, #8]
 8010ebe:	7dfb      	ldrb	r3, [r7, #23]
 8010ec0:	b29b      	uxth	r3, r3
 8010ec2:	1ad3      	subs	r3, r2, r3
 8010ec4:	b29a      	uxth	r2, r3
 8010ec6:	693b      	ldr	r3, [r7, #16]
 8010ec8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010eca:	2114      	movs	r1, #20
 8010ecc:	68b8      	ldr	r0, [r7, #8]
 8010ece:	f7fb faad 	bl	800c42c <pbuf_add_header>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d004      	beq.n	8010ee2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010ed8:	6938      	ldr	r0, [r7, #16]
 8010eda:	f7fc ffe2 	bl	800dea2 <tcp_seg_free>
    return NULL;
 8010ede:	2300      	movs	r3, #0
 8010ee0:	e037      	b.n	8010f52 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010ee2:	693b      	ldr	r3, [r7, #16]
 8010ee4:	685b      	ldr	r3, [r3, #4]
 8010ee6:	685a      	ldr	r2, [r3, #4]
 8010ee8:	693b      	ldr	r3, [r7, #16]
 8010eea:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	8ada      	ldrh	r2, [r3, #22]
 8010ef0:	693b      	ldr	r3, [r7, #16]
 8010ef2:	68dc      	ldr	r4, [r3, #12]
 8010ef4:	4610      	mov	r0, r2
 8010ef6:	f7f9 fefb 	bl	800acf0 <lwip_htons>
 8010efa:	4603      	mov	r3, r0
 8010efc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	8b1a      	ldrh	r2, [r3, #24]
 8010f02:	693b      	ldr	r3, [r7, #16]
 8010f04:	68dc      	ldr	r4, [r3, #12]
 8010f06:	4610      	mov	r0, r2
 8010f08:	f7f9 fef2 	bl	800acf0 <lwip_htons>
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010f10:	693b      	ldr	r3, [r7, #16]
 8010f12:	68dc      	ldr	r4, [r3, #12]
 8010f14:	6838      	ldr	r0, [r7, #0]
 8010f16:	f7f9 ff00 	bl	800ad1a <lwip_htonl>
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010f1e:	7dfb      	ldrb	r3, [r7, #23]
 8010f20:	089b      	lsrs	r3, r3, #2
 8010f22:	b2db      	uxtb	r3, r3
 8010f24:	b29b      	uxth	r3, r3
 8010f26:	3305      	adds	r3, #5
 8010f28:	b29b      	uxth	r3, r3
 8010f2a:	031b      	lsls	r3, r3, #12
 8010f2c:	b29a      	uxth	r2, r3
 8010f2e:	79fb      	ldrb	r3, [r7, #7]
 8010f30:	b29b      	uxth	r3, r3
 8010f32:	4313      	orrs	r3, r2
 8010f34:	b29a      	uxth	r2, r3
 8010f36:	693b      	ldr	r3, [r7, #16]
 8010f38:	68dc      	ldr	r4, [r3, #12]
 8010f3a:	4610      	mov	r0, r2
 8010f3c:	f7f9 fed8 	bl	800acf0 <lwip_htons>
 8010f40:	4603      	mov	r3, r0
 8010f42:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010f44:	693b      	ldr	r3, [r7, #16]
 8010f46:	68db      	ldr	r3, [r3, #12]
 8010f48:	2200      	movs	r2, #0
 8010f4a:	749a      	strb	r2, [r3, #18]
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	74da      	strb	r2, [r3, #19]
  return seg;
 8010f50:	693b      	ldr	r3, [r7, #16]
}
 8010f52:	4618      	mov	r0, r3
 8010f54:	371c      	adds	r7, #28
 8010f56:	46bd      	mov	sp, r7
 8010f58:	bd90      	pop	{r4, r7, pc}
 8010f5a:	bf00      	nop
 8010f5c:	0801b4f0 	.word	0x0801b4f0
 8010f60:	0801b524 	.word	0x0801b524
 8010f64:	0801b544 	.word	0x0801b544
 8010f68:	0801b56c 	.word	0x0801b56c
 8010f6c:	0801b590 	.word	0x0801b590

08010f70 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b086      	sub	sp, #24
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	607b      	str	r3, [r7, #4]
 8010f78:	4603      	mov	r3, r0
 8010f7a:	73fb      	strb	r3, [r7, #15]
 8010f7c:	460b      	mov	r3, r1
 8010f7e:	81bb      	strh	r3, [r7, #12]
 8010f80:	4613      	mov	r3, r2
 8010f82:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010f84:	89bb      	ldrh	r3, [r7, #12]
 8010f86:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d105      	bne.n	8010f9a <tcp_pbuf_prealloc+0x2a>
 8010f8e:	4b30      	ldr	r3, [pc, #192]	; (8011050 <tcp_pbuf_prealloc+0xe0>)
 8010f90:	22e8      	movs	r2, #232	; 0xe8
 8010f92:	4930      	ldr	r1, [pc, #192]	; (8011054 <tcp_pbuf_prealloc+0xe4>)
 8010f94:	4830      	ldr	r0, [pc, #192]	; (8011058 <tcp_pbuf_prealloc+0xe8>)
 8010f96:	f007 f8cb 	bl	8018130 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8010f9a:	6a3b      	ldr	r3, [r7, #32]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d105      	bne.n	8010fac <tcp_pbuf_prealloc+0x3c>
 8010fa0:	4b2b      	ldr	r3, [pc, #172]	; (8011050 <tcp_pbuf_prealloc+0xe0>)
 8010fa2:	22e9      	movs	r2, #233	; 0xe9
 8010fa4:	492d      	ldr	r1, [pc, #180]	; (801105c <tcp_pbuf_prealloc+0xec>)
 8010fa6:	482c      	ldr	r0, [pc, #176]	; (8011058 <tcp_pbuf_prealloc+0xe8>)
 8010fa8:	f007 f8c2 	bl	8018130 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010fac:	89ba      	ldrh	r2, [r7, #12]
 8010fae:	897b      	ldrh	r3, [r7, #10]
 8010fb0:	429a      	cmp	r2, r3
 8010fb2:	d221      	bcs.n	8010ff8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010fb4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010fb8:	f003 0302 	and.w	r3, r3, #2
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d111      	bne.n	8010fe4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010fc0:	6a3b      	ldr	r3, [r7, #32]
 8010fc2:	8b5b      	ldrh	r3, [r3, #26]
 8010fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d115      	bne.n	8010ff8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8010fcc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d007      	beq.n	8010fe4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010fd4:	6a3b      	ldr	r3, [r7, #32]
 8010fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d103      	bne.n	8010fe4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8010fdc:	6a3b      	ldr	r3, [r7, #32]
 8010fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d009      	beq.n	8010ff8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010fe4:	89bb      	ldrh	r3, [r7, #12]
 8010fe6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8010fea:	f023 0203 	bic.w	r2, r3, #3
 8010fee:	897b      	ldrh	r3, [r7, #10]
 8010ff0:	4293      	cmp	r3, r2
 8010ff2:	bf28      	it	cs
 8010ff4:	4613      	movcs	r3, r2
 8010ff6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010ff8:	8af9      	ldrh	r1, [r7, #22]
 8010ffa:	7bfb      	ldrb	r3, [r7, #15]
 8010ffc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011000:	4618      	mov	r0, r3
 8011002:	f7fa ffc5 	bl	800bf90 <pbuf_alloc>
 8011006:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011008:	693b      	ldr	r3, [r7, #16]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d101      	bne.n	8011012 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801100e:	2300      	movs	r3, #0
 8011010:	e019      	b.n	8011046 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011012:	693b      	ldr	r3, [r7, #16]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d006      	beq.n	8011028 <tcp_pbuf_prealloc+0xb8>
 801101a:	4b0d      	ldr	r3, [pc, #52]	; (8011050 <tcp_pbuf_prealloc+0xe0>)
 801101c:	f240 120b 	movw	r2, #267	; 0x10b
 8011020:	490f      	ldr	r1, [pc, #60]	; (8011060 <tcp_pbuf_prealloc+0xf0>)
 8011022:	480d      	ldr	r0, [pc, #52]	; (8011058 <tcp_pbuf_prealloc+0xe8>)
 8011024:	f007 f884 	bl	8018130 <iprintf>
  *oversize = p->len - length;
 8011028:	693b      	ldr	r3, [r7, #16]
 801102a:	895a      	ldrh	r2, [r3, #10]
 801102c:	89bb      	ldrh	r3, [r7, #12]
 801102e:	1ad3      	subs	r3, r2, r3
 8011030:	b29a      	uxth	r2, r3
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011036:	693b      	ldr	r3, [r7, #16]
 8011038:	89ba      	ldrh	r2, [r7, #12]
 801103a:	811a      	strh	r2, [r3, #8]
 801103c:	693b      	ldr	r3, [r7, #16]
 801103e:	891a      	ldrh	r2, [r3, #8]
 8011040:	693b      	ldr	r3, [r7, #16]
 8011042:	815a      	strh	r2, [r3, #10]
  return p;
 8011044:	693b      	ldr	r3, [r7, #16]
}
 8011046:	4618      	mov	r0, r3
 8011048:	3718      	adds	r7, #24
 801104a:	46bd      	mov	sp, r7
 801104c:	bd80      	pop	{r7, pc}
 801104e:	bf00      	nop
 8011050:	0801b4f0 	.word	0x0801b4f0
 8011054:	0801b5a8 	.word	0x0801b5a8
 8011058:	0801b544 	.word	0x0801b544
 801105c:	0801b5cc 	.word	0x0801b5cc
 8011060:	0801b5ec 	.word	0x0801b5ec

08011064 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b082      	sub	sp, #8
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
 801106c:	460b      	mov	r3, r1
 801106e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d106      	bne.n	8011084 <tcp_write_checks+0x20>
 8011076:	4b33      	ldr	r3, [pc, #204]	; (8011144 <tcp_write_checks+0xe0>)
 8011078:	f240 1233 	movw	r2, #307	; 0x133
 801107c:	4932      	ldr	r1, [pc, #200]	; (8011148 <tcp_write_checks+0xe4>)
 801107e:	4833      	ldr	r0, [pc, #204]	; (801114c <tcp_write_checks+0xe8>)
 8011080:	f007 f856 	bl	8018130 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	7d1b      	ldrb	r3, [r3, #20]
 8011088:	2b04      	cmp	r3, #4
 801108a:	d00e      	beq.n	80110aa <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011090:	2b07      	cmp	r3, #7
 8011092:	d00a      	beq.n	80110aa <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011098:	2b02      	cmp	r3, #2
 801109a:	d006      	beq.n	80110aa <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80110a0:	2b03      	cmp	r3, #3
 80110a2:	d002      	beq.n	80110aa <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80110a4:	f06f 030a 	mvn.w	r3, #10
 80110a8:	e048      	b.n	801113c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80110aa:	887b      	ldrh	r3, [r7, #2]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d101      	bne.n	80110b4 <tcp_write_checks+0x50>
    return ERR_OK;
 80110b0:	2300      	movs	r3, #0
 80110b2:	e043      	b.n	801113c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80110ba:	887a      	ldrh	r2, [r7, #2]
 80110bc:	429a      	cmp	r2, r3
 80110be:	d909      	bls.n	80110d4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	8b5b      	ldrh	r3, [r3, #26]
 80110c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110c8:	b29a      	uxth	r2, r3
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80110ce:	f04f 33ff 	mov.w	r3, #4294967295
 80110d2:	e033      	b.n	801113c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80110da:	2b08      	cmp	r3, #8
 80110dc:	d909      	bls.n	80110f2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	8b5b      	ldrh	r3, [r3, #26]
 80110e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110e6:	b29a      	uxth	r2, r3
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80110ec:	f04f 33ff 	mov.w	r3, #4294967295
 80110f0:	e024      	b.n	801113c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d00f      	beq.n	801111c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011100:	2b00      	cmp	r3, #0
 8011102:	d11a      	bne.n	801113a <tcp_write_checks+0xd6>
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011108:	2b00      	cmp	r3, #0
 801110a:	d116      	bne.n	801113a <tcp_write_checks+0xd6>
 801110c:	4b0d      	ldr	r3, [pc, #52]	; (8011144 <tcp_write_checks+0xe0>)
 801110e:	f240 1255 	movw	r2, #341	; 0x155
 8011112:	490f      	ldr	r1, [pc, #60]	; (8011150 <tcp_write_checks+0xec>)
 8011114:	480d      	ldr	r0, [pc, #52]	; (801114c <tcp_write_checks+0xe8>)
 8011116:	f007 f80b 	bl	8018130 <iprintf>
 801111a:	e00e      	b.n	801113a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011120:	2b00      	cmp	r3, #0
 8011122:	d103      	bne.n	801112c <tcp_write_checks+0xc8>
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011128:	2b00      	cmp	r3, #0
 801112a:	d006      	beq.n	801113a <tcp_write_checks+0xd6>
 801112c:	4b05      	ldr	r3, [pc, #20]	; (8011144 <tcp_write_checks+0xe0>)
 801112e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8011132:	4908      	ldr	r1, [pc, #32]	; (8011154 <tcp_write_checks+0xf0>)
 8011134:	4805      	ldr	r0, [pc, #20]	; (801114c <tcp_write_checks+0xe8>)
 8011136:	f006 fffb 	bl	8018130 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801113a:	2300      	movs	r3, #0
}
 801113c:	4618      	mov	r0, r3
 801113e:	3708      	adds	r7, #8
 8011140:	46bd      	mov	sp, r7
 8011142:	bd80      	pop	{r7, pc}
 8011144:	0801b4f0 	.word	0x0801b4f0
 8011148:	0801b600 	.word	0x0801b600
 801114c:	0801b544 	.word	0x0801b544
 8011150:	0801b620 	.word	0x0801b620
 8011154:	0801b65c 	.word	0x0801b65c

08011158 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011158:	b590      	push	{r4, r7, lr}
 801115a:	b09b      	sub	sp, #108	; 0x6c
 801115c:	af04      	add	r7, sp, #16
 801115e:	60f8      	str	r0, [r7, #12]
 8011160:	60b9      	str	r1, [r7, #8]
 8011162:	4611      	mov	r1, r2
 8011164:	461a      	mov	r2, r3
 8011166:	460b      	mov	r3, r1
 8011168:	80fb      	strh	r3, [r7, #6]
 801116a:	4613      	mov	r3, r2
 801116c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801116e:	2300      	movs	r3, #0
 8011170:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011172:	2300      	movs	r3, #0
 8011174:	653b      	str	r3, [r7, #80]	; 0x50
 8011176:	2300      	movs	r3, #0
 8011178:	64fb      	str	r3, [r7, #76]	; 0x4c
 801117a:	2300      	movs	r3, #0
 801117c:	64bb      	str	r3, [r7, #72]	; 0x48
 801117e:	2300      	movs	r3, #0
 8011180:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011182:	2300      	movs	r3, #0
 8011184:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011188:	2300      	movs	r3, #0
 801118a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801118e:	2300      	movs	r3, #0
 8011190:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011192:	2300      	movs	r3, #0
 8011194:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011196:	2300      	movs	r3, #0
 8011198:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d109      	bne.n	80111b4 <tcp_write+0x5c>
 80111a0:	4ba4      	ldr	r3, [pc, #656]	; (8011434 <tcp_write+0x2dc>)
 80111a2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80111a6:	49a4      	ldr	r1, [pc, #656]	; (8011438 <tcp_write+0x2e0>)
 80111a8:	48a4      	ldr	r0, [pc, #656]	; (801143c <tcp_write+0x2e4>)
 80111aa:	f006 ffc1 	bl	8018130 <iprintf>
 80111ae:	f06f 030f 	mvn.w	r3, #15
 80111b2:	e32a      	b.n	801180a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80111ba:	085b      	lsrs	r3, r3, #1
 80111bc:	b29a      	uxth	r2, r3
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80111c2:	4293      	cmp	r3, r2
 80111c4:	bf28      	it	cs
 80111c6:	4613      	movcs	r3, r2
 80111c8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80111ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d102      	bne.n	80111d6 <tcp_write+0x7e>
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80111d4:	e000      	b.n	80111d8 <tcp_write+0x80>
 80111d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80111d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80111da:	68bb      	ldr	r3, [r7, #8]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d109      	bne.n	80111f4 <tcp_write+0x9c>
 80111e0:	4b94      	ldr	r3, [pc, #592]	; (8011434 <tcp_write+0x2dc>)
 80111e2:	f240 12ad 	movw	r2, #429	; 0x1ad
 80111e6:	4996      	ldr	r1, [pc, #600]	; (8011440 <tcp_write+0x2e8>)
 80111e8:	4894      	ldr	r0, [pc, #592]	; (801143c <tcp_write+0x2e4>)
 80111ea:	f006 ffa1 	bl	8018130 <iprintf>
 80111ee:	f06f 030f 	mvn.w	r3, #15
 80111f2:	e30a      	b.n	801180a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80111f4:	88fb      	ldrh	r3, [r7, #6]
 80111f6:	4619      	mov	r1, r3
 80111f8:	68f8      	ldr	r0, [r7, #12]
 80111fa:	f7ff ff33 	bl	8011064 <tcp_write_checks>
 80111fe:	4603      	mov	r3, r0
 8011200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011204:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011208:	2b00      	cmp	r3, #0
 801120a:	d002      	beq.n	8011212 <tcp_write+0xba>
    return err;
 801120c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011210:	e2fb      	b.n	801180a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011218:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801121c:	2300      	movs	r3, #0
 801121e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011226:	2b00      	cmp	r3, #0
 8011228:	f000 80f6 	beq.w	8011418 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011230:	653b      	str	r3, [r7, #80]	; 0x50
 8011232:	e002      	b.n	801123a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801123a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d1f8      	bne.n	8011234 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011244:	7a9b      	ldrb	r3, [r3, #10]
 8011246:	009b      	lsls	r3, r3, #2
 8011248:	b29b      	uxth	r3, r3
 801124a:	f003 0304 	and.w	r3, r3, #4
 801124e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011250:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011254:	891b      	ldrh	r3, [r3, #8]
 8011256:	4619      	mov	r1, r3
 8011258:	8c3b      	ldrh	r3, [r7, #32]
 801125a:	440b      	add	r3, r1
 801125c:	429a      	cmp	r2, r3
 801125e:	da06      	bge.n	801126e <tcp_write+0x116>
 8011260:	4b74      	ldr	r3, [pc, #464]	; (8011434 <tcp_write+0x2dc>)
 8011262:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011266:	4977      	ldr	r1, [pc, #476]	; (8011444 <tcp_write+0x2ec>)
 8011268:	4874      	ldr	r0, [pc, #464]	; (801143c <tcp_write+0x2e4>)
 801126a:	f006 ff61 	bl	8018130 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801126e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011270:	891a      	ldrh	r2, [r3, #8]
 8011272:	8c3b      	ldrh	r3, [r7, #32]
 8011274:	4413      	add	r3, r2
 8011276:	b29b      	uxth	r3, r3
 8011278:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801127a:	1ad3      	subs	r3, r2, r3
 801127c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011284:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011286:	8a7b      	ldrh	r3, [r7, #18]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d026      	beq.n	80112da <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801128c:	8a7b      	ldrh	r3, [r7, #18]
 801128e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011290:	429a      	cmp	r2, r3
 8011292:	d206      	bcs.n	80112a2 <tcp_write+0x14a>
 8011294:	4b67      	ldr	r3, [pc, #412]	; (8011434 <tcp_write+0x2dc>)
 8011296:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801129a:	496b      	ldr	r1, [pc, #428]	; (8011448 <tcp_write+0x2f0>)
 801129c:	4867      	ldr	r0, [pc, #412]	; (801143c <tcp_write+0x2e4>)
 801129e:	f006 ff47 	bl	8018130 <iprintf>
      seg = last_unsent;
 80112a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112a4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80112a6:	8a7b      	ldrh	r3, [r7, #18]
 80112a8:	88fa      	ldrh	r2, [r7, #6]
 80112aa:	4293      	cmp	r3, r2
 80112ac:	bf28      	it	cs
 80112ae:	4613      	movcs	r3, r2
 80112b0:	b29b      	uxth	r3, r3
 80112b2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80112b4:	4293      	cmp	r3, r2
 80112b6:	bf28      	it	cs
 80112b8:	4613      	movcs	r3, r2
 80112ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80112bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80112c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80112c2:	4413      	add	r3, r2
 80112c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80112c8:	8a7a      	ldrh	r2, [r7, #18]
 80112ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80112cc:	1ad3      	subs	r3, r2, r3
 80112ce:	b29b      	uxth	r3, r3
 80112d0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80112d2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80112d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80112d6:	1ad3      	subs	r3, r2, r3
 80112d8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80112da:	8a7b      	ldrh	r3, [r7, #18]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d00b      	beq.n	80112f8 <tcp_write+0x1a0>
 80112e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80112e4:	88fb      	ldrh	r3, [r7, #6]
 80112e6:	429a      	cmp	r2, r3
 80112e8:	d006      	beq.n	80112f8 <tcp_write+0x1a0>
 80112ea:	4b52      	ldr	r3, [pc, #328]	; (8011434 <tcp_write+0x2dc>)
 80112ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80112f0:	4956      	ldr	r1, [pc, #344]	; (801144c <tcp_write+0x2f4>)
 80112f2:	4852      	ldr	r0, [pc, #328]	; (801143c <tcp_write+0x2e4>)
 80112f4:	f006 ff1c 	bl	8018130 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80112f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80112fc:	88fb      	ldrh	r3, [r7, #6]
 80112fe:	429a      	cmp	r2, r3
 8011300:	f080 8167 	bcs.w	80115d2 <tcp_write+0x47a>
 8011304:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011306:	2b00      	cmp	r3, #0
 8011308:	f000 8163 	beq.w	80115d2 <tcp_write+0x47a>
 801130c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801130e:	891b      	ldrh	r3, [r3, #8]
 8011310:	2b00      	cmp	r3, #0
 8011312:	f000 815e 	beq.w	80115d2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011316:	88fa      	ldrh	r2, [r7, #6]
 8011318:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801131c:	1ad2      	subs	r2, r2, r3
 801131e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011320:	4293      	cmp	r3, r2
 8011322:	bfa8      	it	ge
 8011324:	4613      	movge	r3, r2
 8011326:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801132a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801132c:	797b      	ldrb	r3, [r7, #5]
 801132e:	f003 0301 	and.w	r3, r3, #1
 8011332:	2b00      	cmp	r3, #0
 8011334:	d027      	beq.n	8011386 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011336:	f107 0012 	add.w	r0, r7, #18
 801133a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801133c:	8bf9      	ldrh	r1, [r7, #30]
 801133e:	2301      	movs	r3, #1
 8011340:	9302      	str	r3, [sp, #8]
 8011342:	797b      	ldrb	r3, [r7, #5]
 8011344:	9301      	str	r3, [sp, #4]
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	9300      	str	r3, [sp, #0]
 801134a:	4603      	mov	r3, r0
 801134c:	2000      	movs	r0, #0
 801134e:	f7ff fe0f 	bl	8010f70 <tcp_pbuf_prealloc>
 8011352:	6578      	str	r0, [r7, #84]	; 0x54
 8011354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011356:	2b00      	cmp	r3, #0
 8011358:	f000 8225 	beq.w	80117a6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801135c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801135e:	6858      	ldr	r0, [r3, #4]
 8011360:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011364:	68ba      	ldr	r2, [r7, #8]
 8011366:	4413      	add	r3, r2
 8011368:	8bfa      	ldrh	r2, [r7, #30]
 801136a:	4619      	mov	r1, r3
 801136c:	f007 f82e 	bl	80183cc <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011370:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011372:	f7fb f97f 	bl	800c674 <pbuf_clen>
 8011376:	4603      	mov	r3, r0
 8011378:	461a      	mov	r2, r3
 801137a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801137e:	4413      	add	r3, r2
 8011380:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011384:	e041      	b.n	801140a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	637b      	str	r3, [r7, #52]	; 0x34
 801138c:	e002      	b.n	8011394 <tcp_write+0x23c>
 801138e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	637b      	str	r3, [r7, #52]	; 0x34
 8011394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d1f8      	bne.n	801138e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801139c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801139e:	7b1b      	ldrb	r3, [r3, #12]
 80113a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d115      	bne.n	80113d4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80113a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113aa:	685b      	ldr	r3, [r3, #4]
 80113ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80113ae:	8952      	ldrh	r2, [r2, #10]
 80113b0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80113b2:	68ba      	ldr	r2, [r7, #8]
 80113b4:	429a      	cmp	r2, r3
 80113b6:	d10d      	bne.n	80113d4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80113b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d006      	beq.n	80113ce <tcp_write+0x276>
 80113c0:	4b1c      	ldr	r3, [pc, #112]	; (8011434 <tcp_write+0x2dc>)
 80113c2:	f240 2231 	movw	r2, #561	; 0x231
 80113c6:	4922      	ldr	r1, [pc, #136]	; (8011450 <tcp_write+0x2f8>)
 80113c8:	481c      	ldr	r0, [pc, #112]	; (801143c <tcp_write+0x2e4>)
 80113ca:	f006 feb1 	bl	8018130 <iprintf>
          extendlen = seglen;
 80113ce:	8bfb      	ldrh	r3, [r7, #30]
 80113d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80113d2:	e01a      	b.n	801140a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80113d4:	8bfb      	ldrh	r3, [r7, #30]
 80113d6:	2201      	movs	r2, #1
 80113d8:	4619      	mov	r1, r3
 80113da:	2000      	movs	r0, #0
 80113dc:	f7fa fdd8 	bl	800bf90 <pbuf_alloc>
 80113e0:	6578      	str	r0, [r7, #84]	; 0x54
 80113e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	f000 81e0 	beq.w	80117aa <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80113ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80113ee:	68ba      	ldr	r2, [r7, #8]
 80113f0:	441a      	add	r2, r3
 80113f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113f4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80113f6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80113f8:	f7fb f93c 	bl	800c674 <pbuf_clen>
 80113fc:	4603      	mov	r3, r0
 80113fe:	461a      	mov	r2, r3
 8011400:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011404:	4413      	add	r3, r2
 8011406:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801140a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801140e:	8bfb      	ldrh	r3, [r7, #30]
 8011410:	4413      	add	r3, r2
 8011412:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011416:	e0dc      	b.n	80115d2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801141e:	2b00      	cmp	r3, #0
 8011420:	f000 80d7 	beq.w	80115d2 <tcp_write+0x47a>
 8011424:	4b03      	ldr	r3, [pc, #12]	; (8011434 <tcp_write+0x2dc>)
 8011426:	f240 224a 	movw	r2, #586	; 0x24a
 801142a:	490a      	ldr	r1, [pc, #40]	; (8011454 <tcp_write+0x2fc>)
 801142c:	4803      	ldr	r0, [pc, #12]	; (801143c <tcp_write+0x2e4>)
 801142e:	f006 fe7f 	bl	8018130 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011432:	e0ce      	b.n	80115d2 <tcp_write+0x47a>
 8011434:	0801b4f0 	.word	0x0801b4f0
 8011438:	0801b690 	.word	0x0801b690
 801143c:	0801b544 	.word	0x0801b544
 8011440:	0801b6a8 	.word	0x0801b6a8
 8011444:	0801b6dc 	.word	0x0801b6dc
 8011448:	0801b6f4 	.word	0x0801b6f4
 801144c:	0801b714 	.word	0x0801b714
 8011450:	0801b734 	.word	0x0801b734
 8011454:	0801b760 	.word	0x0801b760
    struct pbuf *p;
    u16_t left = len - pos;
 8011458:	88fa      	ldrh	r2, [r7, #6]
 801145a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801145e:	1ad3      	subs	r3, r2, r3
 8011460:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011462:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011466:	b29b      	uxth	r3, r3
 8011468:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801146a:	1ad3      	subs	r3, r2, r3
 801146c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801146e:	8b7a      	ldrh	r2, [r7, #26]
 8011470:	8bbb      	ldrh	r3, [r7, #28]
 8011472:	4293      	cmp	r3, r2
 8011474:	bf28      	it	cs
 8011476:	4613      	movcs	r3, r2
 8011478:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801147a:	797b      	ldrb	r3, [r7, #5]
 801147c:	f003 0301 	and.w	r3, r3, #1
 8011480:	2b00      	cmp	r3, #0
 8011482:	d036      	beq.n	80114f2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011484:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011488:	b29a      	uxth	r2, r3
 801148a:	8b3b      	ldrh	r3, [r7, #24]
 801148c:	4413      	add	r3, r2
 801148e:	b299      	uxth	r1, r3
 8011490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011492:	2b00      	cmp	r3, #0
 8011494:	bf0c      	ite	eq
 8011496:	2301      	moveq	r3, #1
 8011498:	2300      	movne	r3, #0
 801149a:	b2db      	uxtb	r3, r3
 801149c:	f107 0012 	add.w	r0, r7, #18
 80114a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80114a2:	9302      	str	r3, [sp, #8]
 80114a4:	797b      	ldrb	r3, [r7, #5]
 80114a6:	9301      	str	r3, [sp, #4]
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	9300      	str	r3, [sp, #0]
 80114ac:	4603      	mov	r3, r0
 80114ae:	2036      	movs	r0, #54	; 0x36
 80114b0:	f7ff fd5e 	bl	8010f70 <tcp_pbuf_prealloc>
 80114b4:	6338      	str	r0, [r7, #48]	; 0x30
 80114b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	f000 8178 	beq.w	80117ae <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80114be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114c0:	895b      	ldrh	r3, [r3, #10]
 80114c2:	8b3a      	ldrh	r2, [r7, #24]
 80114c4:	429a      	cmp	r2, r3
 80114c6:	d906      	bls.n	80114d6 <tcp_write+0x37e>
 80114c8:	4b8c      	ldr	r3, [pc, #560]	; (80116fc <tcp_write+0x5a4>)
 80114ca:	f240 2266 	movw	r2, #614	; 0x266
 80114ce:	498c      	ldr	r1, [pc, #560]	; (8011700 <tcp_write+0x5a8>)
 80114d0:	488c      	ldr	r0, [pc, #560]	; (8011704 <tcp_write+0x5ac>)
 80114d2:	f006 fe2d 	bl	8018130 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80114d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114d8:	685a      	ldr	r2, [r3, #4]
 80114da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80114de:	18d0      	adds	r0, r2, r3
 80114e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80114e4:	68ba      	ldr	r2, [r7, #8]
 80114e6:	4413      	add	r3, r2
 80114e8:	8b3a      	ldrh	r2, [r7, #24]
 80114ea:	4619      	mov	r1, r3
 80114ec:	f006 ff6e 	bl	80183cc <memcpy>
 80114f0:	e02f      	b.n	8011552 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80114f2:	8a7b      	ldrh	r3, [r7, #18]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d006      	beq.n	8011506 <tcp_write+0x3ae>
 80114f8:	4b80      	ldr	r3, [pc, #512]	; (80116fc <tcp_write+0x5a4>)
 80114fa:	f240 2271 	movw	r2, #625	; 0x271
 80114fe:	4982      	ldr	r1, [pc, #520]	; (8011708 <tcp_write+0x5b0>)
 8011500:	4880      	ldr	r0, [pc, #512]	; (8011704 <tcp_write+0x5ac>)
 8011502:	f006 fe15 	bl	8018130 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011506:	8b3b      	ldrh	r3, [r7, #24]
 8011508:	2201      	movs	r2, #1
 801150a:	4619      	mov	r1, r3
 801150c:	2036      	movs	r0, #54	; 0x36
 801150e:	f7fa fd3f 	bl	800bf90 <pbuf_alloc>
 8011512:	6178      	str	r0, [r7, #20]
 8011514:	697b      	ldr	r3, [r7, #20]
 8011516:	2b00      	cmp	r3, #0
 8011518:	f000 814b 	beq.w	80117b2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801151c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011520:	68ba      	ldr	r2, [r7, #8]
 8011522:	441a      	add	r2, r3
 8011524:	697b      	ldr	r3, [r7, #20]
 8011526:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011528:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801152c:	b29b      	uxth	r3, r3
 801152e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011532:	4619      	mov	r1, r3
 8011534:	2036      	movs	r0, #54	; 0x36
 8011536:	f7fa fd2b 	bl	800bf90 <pbuf_alloc>
 801153a:	6338      	str	r0, [r7, #48]	; 0x30
 801153c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801153e:	2b00      	cmp	r3, #0
 8011540:	d103      	bne.n	801154a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011542:	6978      	ldr	r0, [r7, #20]
 8011544:	f7fb f808 	bl	800c558 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011548:	e136      	b.n	80117b8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801154a:	6979      	ldr	r1, [r7, #20]
 801154c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801154e:	f7fb f8d1 	bl	800c6f4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011552:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011554:	f7fb f88e 	bl	800c674 <pbuf_clen>
 8011558:	4603      	mov	r3, r0
 801155a:	461a      	mov	r2, r3
 801155c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011560:	4413      	add	r3, r2
 8011562:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8011566:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801156a:	2b09      	cmp	r3, #9
 801156c:	d903      	bls.n	8011576 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801156e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011570:	f7fa fff2 	bl	800c558 <pbuf_free>
      goto memerr;
 8011574:	e120      	b.n	80117b8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801157a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801157e:	441a      	add	r2, r3
 8011580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011584:	9300      	str	r3, [sp, #0]
 8011586:	4613      	mov	r3, r2
 8011588:	2200      	movs	r2, #0
 801158a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801158c:	68f8      	ldr	r0, [r7, #12]
 801158e:	f7ff fc51 	bl	8010e34 <tcp_create_segment>
 8011592:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011596:	2b00      	cmp	r3, #0
 8011598:	f000 810d 	beq.w	80117b6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801159c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d102      	bne.n	80115a8 <tcp_write+0x450>
      queue = seg;
 80115a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115a4:	647b      	str	r3, [r7, #68]	; 0x44
 80115a6:	e00c      	b.n	80115c2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80115a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d106      	bne.n	80115bc <tcp_write+0x464>
 80115ae:	4b53      	ldr	r3, [pc, #332]	; (80116fc <tcp_write+0x5a4>)
 80115b0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80115b4:	4955      	ldr	r1, [pc, #340]	; (801170c <tcp_write+0x5b4>)
 80115b6:	4853      	ldr	r0, [pc, #332]	; (8011704 <tcp_write+0x5ac>)
 80115b8:	f006 fdba 	bl	8018130 <iprintf>
      prev_seg->next = seg;
 80115bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80115be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80115c0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80115c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115c4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80115c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80115ca:	8b3b      	ldrh	r3, [r7, #24]
 80115cc:	4413      	add	r3, r2
 80115ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80115d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80115d6:	88fb      	ldrh	r3, [r7, #6]
 80115d8:	429a      	cmp	r2, r3
 80115da:	f4ff af3d 	bcc.w	8011458 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80115de:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d02c      	beq.n	801163e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80115e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115e6:	685b      	ldr	r3, [r3, #4]
 80115e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80115ea:	e01e      	b.n	801162a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80115ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ee:	891a      	ldrh	r2, [r3, #8]
 80115f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80115f2:	4413      	add	r3, r2
 80115f4:	b29a      	uxth	r2, r3
 80115f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115f8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80115fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d110      	bne.n	8011624 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011604:	685b      	ldr	r3, [r3, #4]
 8011606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011608:	8952      	ldrh	r2, [r2, #10]
 801160a:	4413      	add	r3, r2
 801160c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801160e:	68b9      	ldr	r1, [r7, #8]
 8011610:	4618      	mov	r0, r3
 8011612:	f006 fedb 	bl	80183cc <memcpy>
        p->len += oversize_used;
 8011616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011618:	895a      	ldrh	r2, [r3, #10]
 801161a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801161c:	4413      	add	r3, r2
 801161e:	b29a      	uxth	r2, r3
 8011620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011622:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8011624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	62fb      	str	r3, [r7, #44]	; 0x2c
 801162a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801162c:	2b00      	cmp	r3, #0
 801162e:	d1dd      	bne.n	80115ec <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8011630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011632:	891a      	ldrh	r2, [r3, #8]
 8011634:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011636:	4413      	add	r3, r2
 8011638:	b29a      	uxth	r2, r3
 801163a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801163c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801163e:	8a7a      	ldrh	r2, [r7, #18]
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8011646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011648:	2b00      	cmp	r3, #0
 801164a:	d018      	beq.n	801167e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801164c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801164e:	2b00      	cmp	r3, #0
 8011650:	d106      	bne.n	8011660 <tcp_write+0x508>
 8011652:	4b2a      	ldr	r3, [pc, #168]	; (80116fc <tcp_write+0x5a4>)
 8011654:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8011658:	492d      	ldr	r1, [pc, #180]	; (8011710 <tcp_write+0x5b8>)
 801165a:	482a      	ldr	r0, [pc, #168]	; (8011704 <tcp_write+0x5ac>)
 801165c:	f006 fd68 	bl	8018130 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011662:	685b      	ldr	r3, [r3, #4]
 8011664:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011666:	4618      	mov	r0, r3
 8011668:	f7fb f844 	bl	800c6f4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801166c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801166e:	891a      	ldrh	r2, [r3, #8]
 8011670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011672:	891b      	ldrh	r3, [r3, #8]
 8011674:	4413      	add	r3, r2
 8011676:	b29a      	uxth	r2, r3
 8011678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801167a:	811a      	strh	r2, [r3, #8]
 801167c:	e037      	b.n	80116ee <tcp_write+0x596>
  } else if (extendlen > 0) {
 801167e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011680:	2b00      	cmp	r3, #0
 8011682:	d034      	beq.n	80116ee <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011686:	2b00      	cmp	r3, #0
 8011688:	d003      	beq.n	8011692 <tcp_write+0x53a>
 801168a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801168c:	685b      	ldr	r3, [r3, #4]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d106      	bne.n	80116a0 <tcp_write+0x548>
 8011692:	4b1a      	ldr	r3, [pc, #104]	; (80116fc <tcp_write+0x5a4>)
 8011694:	f240 22e6 	movw	r2, #742	; 0x2e6
 8011698:	491e      	ldr	r1, [pc, #120]	; (8011714 <tcp_write+0x5bc>)
 801169a:	481a      	ldr	r0, [pc, #104]	; (8011704 <tcp_write+0x5ac>)
 801169c:	f006 fd48 	bl	8018130 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80116a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116a2:	685b      	ldr	r3, [r3, #4]
 80116a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80116a6:	e009      	b.n	80116bc <tcp_write+0x564>
      p->tot_len += extendlen;
 80116a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116aa:	891a      	ldrh	r2, [r3, #8]
 80116ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80116ae:	4413      	add	r3, r2
 80116b0:	b29a      	uxth	r2, r3
 80116b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116b4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80116b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80116bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d1f1      	bne.n	80116a8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80116c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116c6:	891a      	ldrh	r2, [r3, #8]
 80116c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80116ca:	4413      	add	r3, r2
 80116cc:	b29a      	uxth	r2, r3
 80116ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116d0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80116d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116d4:	895a      	ldrh	r2, [r3, #10]
 80116d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80116d8:	4413      	add	r3, r2
 80116da:	b29a      	uxth	r2, r3
 80116dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116de:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80116e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116e2:	891a      	ldrh	r2, [r3, #8]
 80116e4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80116e6:	4413      	add	r3, r2
 80116e8:	b29a      	uxth	r2, r3
 80116ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116ec:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80116ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d111      	bne.n	8011718 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80116f8:	66da      	str	r2, [r3, #108]	; 0x6c
 80116fa:	e010      	b.n	801171e <tcp_write+0x5c6>
 80116fc:	0801b4f0 	.word	0x0801b4f0
 8011700:	0801b790 	.word	0x0801b790
 8011704:	0801b544 	.word	0x0801b544
 8011708:	0801b7d0 	.word	0x0801b7d0
 801170c:	0801b7e0 	.word	0x0801b7e0
 8011710:	0801b7f4 	.word	0x0801b7f4
 8011714:	0801b82c 	.word	0x0801b82c
  } else {
    last_unsent->next = queue;
 8011718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801171a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801171c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011722:	88fb      	ldrh	r3, [r7, #6]
 8011724:	441a      	add	r2, r3
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011730:	88fb      	ldrh	r3, [r7, #6]
 8011732:	1ad3      	subs	r3, r2, r3
 8011734:	b29a      	uxth	r2, r3
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011742:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801174c:	2b00      	cmp	r3, #0
 801174e:	d00e      	beq.n	801176e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011754:	2b00      	cmp	r3, #0
 8011756:	d10a      	bne.n	801176e <tcp_write+0x616>
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801175c:	2b00      	cmp	r3, #0
 801175e:	d106      	bne.n	801176e <tcp_write+0x616>
 8011760:	4b2c      	ldr	r3, [pc, #176]	; (8011814 <tcp_write+0x6bc>)
 8011762:	f240 3212 	movw	r2, #786	; 0x312
 8011766:	492c      	ldr	r1, [pc, #176]	; (8011818 <tcp_write+0x6c0>)
 8011768:	482c      	ldr	r0, [pc, #176]	; (801181c <tcp_write+0x6c4>)
 801176a:	f006 fce1 	bl	8018130 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801176e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011770:	2b00      	cmp	r3, #0
 8011772:	d016      	beq.n	80117a2 <tcp_write+0x64a>
 8011774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011776:	68db      	ldr	r3, [r3, #12]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d012      	beq.n	80117a2 <tcp_write+0x64a>
 801177c:	797b      	ldrb	r3, [r7, #5]
 801177e:	f003 0302 	and.w	r3, r3, #2
 8011782:	2b00      	cmp	r3, #0
 8011784:	d10d      	bne.n	80117a2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8011786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011788:	68db      	ldr	r3, [r3, #12]
 801178a:	899b      	ldrh	r3, [r3, #12]
 801178c:	b29c      	uxth	r4, r3
 801178e:	2008      	movs	r0, #8
 8011790:	f7f9 faae 	bl	800acf0 <lwip_htons>
 8011794:	4603      	mov	r3, r0
 8011796:	461a      	mov	r2, r3
 8011798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801179a:	68db      	ldr	r3, [r3, #12]
 801179c:	4322      	orrs	r2, r4
 801179e:	b292      	uxth	r2, r2
 80117a0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80117a2:	2300      	movs	r3, #0
 80117a4:	e031      	b.n	801180a <tcp_write+0x6b2>
          goto memerr;
 80117a6:	bf00      	nop
 80117a8:	e006      	b.n	80117b8 <tcp_write+0x660>
            goto memerr;
 80117aa:	bf00      	nop
 80117ac:	e004      	b.n	80117b8 <tcp_write+0x660>
        goto memerr;
 80117ae:	bf00      	nop
 80117b0:	e002      	b.n	80117b8 <tcp_write+0x660>
        goto memerr;
 80117b2:	bf00      	nop
 80117b4:	e000      	b.n	80117b8 <tcp_write+0x660>
      goto memerr;
 80117b6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	8b5b      	ldrh	r3, [r3, #26]
 80117bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117c0:	b29a      	uxth	r2, r3
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80117c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d002      	beq.n	80117d2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80117cc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80117ce:	f7fa fec3 	bl	800c558 <pbuf_free>
  }
  if (queue != NULL) {
 80117d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d002      	beq.n	80117de <tcp_write+0x686>
    tcp_segs_free(queue);
 80117d8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80117da:	f7fc fb4d 	bl	800de78 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d00e      	beq.n	8011806 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d10a      	bne.n	8011806 <tcp_write+0x6ae>
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d106      	bne.n	8011806 <tcp_write+0x6ae>
 80117f8:	4b06      	ldr	r3, [pc, #24]	; (8011814 <tcp_write+0x6bc>)
 80117fa:	f240 3227 	movw	r2, #807	; 0x327
 80117fe:	4906      	ldr	r1, [pc, #24]	; (8011818 <tcp_write+0x6c0>)
 8011800:	4806      	ldr	r0, [pc, #24]	; (801181c <tcp_write+0x6c4>)
 8011802:	f006 fc95 	bl	8018130 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8011806:	f04f 33ff 	mov.w	r3, #4294967295
}
 801180a:	4618      	mov	r0, r3
 801180c:	375c      	adds	r7, #92	; 0x5c
 801180e:	46bd      	mov	sp, r7
 8011810:	bd90      	pop	{r4, r7, pc}
 8011812:	bf00      	nop
 8011814:	0801b4f0 	.word	0x0801b4f0
 8011818:	0801b864 	.word	0x0801b864
 801181c:	0801b544 	.word	0x0801b544

08011820 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011820:	b590      	push	{r4, r7, lr}
 8011822:	b08b      	sub	sp, #44	; 0x2c
 8011824:	af02      	add	r7, sp, #8
 8011826:	6078      	str	r0, [r7, #4]
 8011828:	460b      	mov	r3, r1
 801182a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801182c:	2300      	movs	r3, #0
 801182e:	61fb      	str	r3, [r7, #28]
 8011830:	2300      	movs	r3, #0
 8011832:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011834:	2300      	movs	r3, #0
 8011836:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d106      	bne.n	801184c <tcp_split_unsent_seg+0x2c>
 801183e:	4b95      	ldr	r3, [pc, #596]	; (8011a94 <tcp_split_unsent_seg+0x274>)
 8011840:	f240 324b 	movw	r2, #843	; 0x34b
 8011844:	4994      	ldr	r1, [pc, #592]	; (8011a98 <tcp_split_unsent_seg+0x278>)
 8011846:	4895      	ldr	r0, [pc, #596]	; (8011a9c <tcp_split_unsent_seg+0x27c>)
 8011848:	f006 fc72 	bl	8018130 <iprintf>

  useg = pcb->unsent;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011850:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011852:	697b      	ldr	r3, [r7, #20]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d102      	bne.n	801185e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011858:	f04f 33ff 	mov.w	r3, #4294967295
 801185c:	e116      	b.n	8011a8c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801185e:	887b      	ldrh	r3, [r7, #2]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d109      	bne.n	8011878 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011864:	4b8b      	ldr	r3, [pc, #556]	; (8011a94 <tcp_split_unsent_seg+0x274>)
 8011866:	f240 3253 	movw	r2, #851	; 0x353
 801186a:	498d      	ldr	r1, [pc, #564]	; (8011aa0 <tcp_split_unsent_seg+0x280>)
 801186c:	488b      	ldr	r0, [pc, #556]	; (8011a9c <tcp_split_unsent_seg+0x27c>)
 801186e:	f006 fc5f 	bl	8018130 <iprintf>
    return ERR_VAL;
 8011872:	f06f 0305 	mvn.w	r3, #5
 8011876:	e109      	b.n	8011a8c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011878:	697b      	ldr	r3, [r7, #20]
 801187a:	891b      	ldrh	r3, [r3, #8]
 801187c:	887a      	ldrh	r2, [r7, #2]
 801187e:	429a      	cmp	r2, r3
 8011880:	d301      	bcc.n	8011886 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011882:	2300      	movs	r3, #0
 8011884:	e102      	b.n	8011a8c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801188a:	887a      	ldrh	r2, [r7, #2]
 801188c:	429a      	cmp	r2, r3
 801188e:	d906      	bls.n	801189e <tcp_split_unsent_seg+0x7e>
 8011890:	4b80      	ldr	r3, [pc, #512]	; (8011a94 <tcp_split_unsent_seg+0x274>)
 8011892:	f240 325b 	movw	r2, #859	; 0x35b
 8011896:	4983      	ldr	r1, [pc, #524]	; (8011aa4 <tcp_split_unsent_seg+0x284>)
 8011898:	4880      	ldr	r0, [pc, #512]	; (8011a9c <tcp_split_unsent_seg+0x27c>)
 801189a:	f006 fc49 	bl	8018130 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801189e:	697b      	ldr	r3, [r7, #20]
 80118a0:	891b      	ldrh	r3, [r3, #8]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d106      	bne.n	80118b4 <tcp_split_unsent_seg+0x94>
 80118a6:	4b7b      	ldr	r3, [pc, #492]	; (8011a94 <tcp_split_unsent_seg+0x274>)
 80118a8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80118ac:	497e      	ldr	r1, [pc, #504]	; (8011aa8 <tcp_split_unsent_seg+0x288>)
 80118ae:	487b      	ldr	r0, [pc, #492]	; (8011a9c <tcp_split_unsent_seg+0x27c>)
 80118b0:	f006 fc3e 	bl	8018130 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80118b4:	697b      	ldr	r3, [r7, #20]
 80118b6:	7a9b      	ldrb	r3, [r3, #10]
 80118b8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80118ba:	7bfb      	ldrb	r3, [r7, #15]
 80118bc:	009b      	lsls	r3, r3, #2
 80118be:	b2db      	uxtb	r3, r3
 80118c0:	f003 0304 	and.w	r3, r3, #4
 80118c4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80118c6:	697b      	ldr	r3, [r7, #20]
 80118c8:	891a      	ldrh	r2, [r3, #8]
 80118ca:	887b      	ldrh	r3, [r7, #2]
 80118cc:	1ad3      	subs	r3, r2, r3
 80118ce:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80118d0:	7bbb      	ldrb	r3, [r7, #14]
 80118d2:	b29a      	uxth	r2, r3
 80118d4:	89bb      	ldrh	r3, [r7, #12]
 80118d6:	4413      	add	r3, r2
 80118d8:	b29b      	uxth	r3, r3
 80118da:	f44f 7220 	mov.w	r2, #640	; 0x280
 80118de:	4619      	mov	r1, r3
 80118e0:	2036      	movs	r0, #54	; 0x36
 80118e2:	f7fa fb55 	bl	800bf90 <pbuf_alloc>
 80118e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80118e8:	693b      	ldr	r3, [r7, #16]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	f000 80b7 	beq.w	8011a5e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80118f0:	697b      	ldr	r3, [r7, #20]
 80118f2:	685b      	ldr	r3, [r3, #4]
 80118f4:	891a      	ldrh	r2, [r3, #8]
 80118f6:	697b      	ldr	r3, [r7, #20]
 80118f8:	891b      	ldrh	r3, [r3, #8]
 80118fa:	1ad3      	subs	r3, r2, r3
 80118fc:	b29a      	uxth	r2, r3
 80118fe:	887b      	ldrh	r3, [r7, #2]
 8011900:	4413      	add	r3, r2
 8011902:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011904:	697b      	ldr	r3, [r7, #20]
 8011906:	6858      	ldr	r0, [r3, #4]
 8011908:	693b      	ldr	r3, [r7, #16]
 801190a:	685a      	ldr	r2, [r3, #4]
 801190c:	7bbb      	ldrb	r3, [r7, #14]
 801190e:	18d1      	adds	r1, r2, r3
 8011910:	897b      	ldrh	r3, [r7, #10]
 8011912:	89ba      	ldrh	r2, [r7, #12]
 8011914:	f7fb f826 	bl	800c964 <pbuf_copy_partial>
 8011918:	4603      	mov	r3, r0
 801191a:	461a      	mov	r2, r3
 801191c:	89bb      	ldrh	r3, [r7, #12]
 801191e:	4293      	cmp	r3, r2
 8011920:	f040 809f 	bne.w	8011a62 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011924:	697b      	ldr	r3, [r7, #20]
 8011926:	68db      	ldr	r3, [r3, #12]
 8011928:	899b      	ldrh	r3, [r3, #12]
 801192a:	b29b      	uxth	r3, r3
 801192c:	4618      	mov	r0, r3
 801192e:	f7f9 f9df 	bl	800acf0 <lwip_htons>
 8011932:	4603      	mov	r3, r0
 8011934:	b2db      	uxtb	r3, r3
 8011936:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801193a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801193c:	2300      	movs	r3, #0
 801193e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011940:	7efb      	ldrb	r3, [r7, #27]
 8011942:	f003 0308 	and.w	r3, r3, #8
 8011946:	2b00      	cmp	r3, #0
 8011948:	d007      	beq.n	801195a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801194a:	7efb      	ldrb	r3, [r7, #27]
 801194c:	f023 0308 	bic.w	r3, r3, #8
 8011950:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011952:	7ebb      	ldrb	r3, [r7, #26]
 8011954:	f043 0308 	orr.w	r3, r3, #8
 8011958:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801195a:	7efb      	ldrb	r3, [r7, #27]
 801195c:	f003 0301 	and.w	r3, r3, #1
 8011960:	2b00      	cmp	r3, #0
 8011962:	d007      	beq.n	8011974 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011964:	7efb      	ldrb	r3, [r7, #27]
 8011966:	f023 0301 	bic.w	r3, r3, #1
 801196a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801196c:	7ebb      	ldrb	r3, [r7, #26]
 801196e:	f043 0301 	orr.w	r3, r3, #1
 8011972:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011974:	697b      	ldr	r3, [r7, #20]
 8011976:	68db      	ldr	r3, [r3, #12]
 8011978:	685b      	ldr	r3, [r3, #4]
 801197a:	4618      	mov	r0, r3
 801197c:	f7f9 f9cd 	bl	800ad1a <lwip_htonl>
 8011980:	4602      	mov	r2, r0
 8011982:	887b      	ldrh	r3, [r7, #2]
 8011984:	18d1      	adds	r1, r2, r3
 8011986:	7eba      	ldrb	r2, [r7, #26]
 8011988:	7bfb      	ldrb	r3, [r7, #15]
 801198a:	9300      	str	r3, [sp, #0]
 801198c:	460b      	mov	r3, r1
 801198e:	6939      	ldr	r1, [r7, #16]
 8011990:	6878      	ldr	r0, [r7, #4]
 8011992:	f7ff fa4f 	bl	8010e34 <tcp_create_segment>
 8011996:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011998:	69fb      	ldr	r3, [r7, #28]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d063      	beq.n	8011a66 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801199e:	697b      	ldr	r3, [r7, #20]
 80119a0:	685b      	ldr	r3, [r3, #4]
 80119a2:	4618      	mov	r0, r3
 80119a4:	f7fa fe66 	bl	800c674 <pbuf_clen>
 80119a8:	4603      	mov	r3, r0
 80119aa:	461a      	mov	r2, r3
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80119b2:	1a9b      	subs	r3, r3, r2
 80119b4:	b29a      	uxth	r2, r3
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80119bc:	697b      	ldr	r3, [r7, #20]
 80119be:	6858      	ldr	r0, [r3, #4]
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	685b      	ldr	r3, [r3, #4]
 80119c4:	891a      	ldrh	r2, [r3, #8]
 80119c6:	89bb      	ldrh	r3, [r7, #12]
 80119c8:	1ad3      	subs	r3, r2, r3
 80119ca:	b29b      	uxth	r3, r3
 80119cc:	4619      	mov	r1, r3
 80119ce:	f7fa fc3d 	bl	800c24c <pbuf_realloc>
  useg->len -= remainder;
 80119d2:	697b      	ldr	r3, [r7, #20]
 80119d4:	891a      	ldrh	r2, [r3, #8]
 80119d6:	89bb      	ldrh	r3, [r7, #12]
 80119d8:	1ad3      	subs	r3, r2, r3
 80119da:	b29a      	uxth	r2, r3
 80119dc:	697b      	ldr	r3, [r7, #20]
 80119de:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80119e0:	697b      	ldr	r3, [r7, #20]
 80119e2:	68db      	ldr	r3, [r3, #12]
 80119e4:	899b      	ldrh	r3, [r3, #12]
 80119e6:	b29c      	uxth	r4, r3
 80119e8:	7efb      	ldrb	r3, [r7, #27]
 80119ea:	b29b      	uxth	r3, r3
 80119ec:	4618      	mov	r0, r3
 80119ee:	f7f9 f97f 	bl	800acf0 <lwip_htons>
 80119f2:	4603      	mov	r3, r0
 80119f4:	461a      	mov	r2, r3
 80119f6:	697b      	ldr	r3, [r7, #20]
 80119f8:	68db      	ldr	r3, [r3, #12]
 80119fa:	4322      	orrs	r2, r4
 80119fc:	b292      	uxth	r2, r2
 80119fe:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011a00:	697b      	ldr	r3, [r7, #20]
 8011a02:	685b      	ldr	r3, [r3, #4]
 8011a04:	4618      	mov	r0, r3
 8011a06:	f7fa fe35 	bl	800c674 <pbuf_clen>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	461a      	mov	r2, r3
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011a14:	4413      	add	r3, r2
 8011a16:	b29a      	uxth	r2, r3
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011a1e:	69fb      	ldr	r3, [r7, #28]
 8011a20:	685b      	ldr	r3, [r3, #4]
 8011a22:	4618      	mov	r0, r3
 8011a24:	f7fa fe26 	bl	800c674 <pbuf_clen>
 8011a28:	4603      	mov	r3, r0
 8011a2a:	461a      	mov	r2, r3
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011a32:	4413      	add	r3, r2
 8011a34:	b29a      	uxth	r2, r3
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011a3c:	697b      	ldr	r3, [r7, #20]
 8011a3e:	681a      	ldr	r2, [r3, #0]
 8011a40:	69fb      	ldr	r3, [r7, #28]
 8011a42:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011a44:	697b      	ldr	r3, [r7, #20]
 8011a46:	69fa      	ldr	r2, [r7, #28]
 8011a48:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011a4a:	69fb      	ldr	r3, [r7, #28]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d103      	bne.n	8011a5a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	2200      	movs	r2, #0
 8011a56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	e016      	b.n	8011a8c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011a5e:	bf00      	nop
 8011a60:	e002      	b.n	8011a68 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011a62:	bf00      	nop
 8011a64:	e000      	b.n	8011a68 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011a66:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011a68:	69fb      	ldr	r3, [r7, #28]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d006      	beq.n	8011a7c <tcp_split_unsent_seg+0x25c>
 8011a6e:	4b09      	ldr	r3, [pc, #36]	; (8011a94 <tcp_split_unsent_seg+0x274>)
 8011a70:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011a74:	490d      	ldr	r1, [pc, #52]	; (8011aac <tcp_split_unsent_seg+0x28c>)
 8011a76:	4809      	ldr	r0, [pc, #36]	; (8011a9c <tcp_split_unsent_seg+0x27c>)
 8011a78:	f006 fb5a 	bl	8018130 <iprintf>
  if (p != NULL) {
 8011a7c:	693b      	ldr	r3, [r7, #16]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d002      	beq.n	8011a88 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011a82:	6938      	ldr	r0, [r7, #16]
 8011a84:	f7fa fd68 	bl	800c558 <pbuf_free>
  }

  return ERR_MEM;
 8011a88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	3724      	adds	r7, #36	; 0x24
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd90      	pop	{r4, r7, pc}
 8011a94:	0801b4f0 	.word	0x0801b4f0
 8011a98:	0801b884 	.word	0x0801b884
 8011a9c:	0801b544 	.word	0x0801b544
 8011aa0:	0801b8a8 	.word	0x0801b8a8
 8011aa4:	0801b8cc 	.word	0x0801b8cc
 8011aa8:	0801b8dc 	.word	0x0801b8dc
 8011aac:	0801b8ec 	.word	0x0801b8ec

08011ab0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011ab0:	b590      	push	{r4, r7, lr}
 8011ab2:	b085      	sub	sp, #20
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d106      	bne.n	8011acc <tcp_send_fin+0x1c>
 8011abe:	4b21      	ldr	r3, [pc, #132]	; (8011b44 <tcp_send_fin+0x94>)
 8011ac0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011ac4:	4920      	ldr	r1, [pc, #128]	; (8011b48 <tcp_send_fin+0x98>)
 8011ac6:	4821      	ldr	r0, [pc, #132]	; (8011b4c <tcp_send_fin+0x9c>)
 8011ac8:	f006 fb32 	bl	8018130 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d02e      	beq.n	8011b32 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ad8:	60fb      	str	r3, [r7, #12]
 8011ada:	e002      	b.n	8011ae2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d1f8      	bne.n	8011adc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	68db      	ldr	r3, [r3, #12]
 8011aee:	899b      	ldrh	r3, [r3, #12]
 8011af0:	b29b      	uxth	r3, r3
 8011af2:	4618      	mov	r0, r3
 8011af4:	f7f9 f8fc 	bl	800acf0 <lwip_htons>
 8011af8:	4603      	mov	r3, r0
 8011afa:	b2db      	uxtb	r3, r3
 8011afc:	f003 0307 	and.w	r3, r3, #7
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d116      	bne.n	8011b32 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	68db      	ldr	r3, [r3, #12]
 8011b08:	899b      	ldrh	r3, [r3, #12]
 8011b0a:	b29c      	uxth	r4, r3
 8011b0c:	2001      	movs	r0, #1
 8011b0e:	f7f9 f8ef 	bl	800acf0 <lwip_htons>
 8011b12:	4603      	mov	r3, r0
 8011b14:	461a      	mov	r2, r3
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	68db      	ldr	r3, [r3, #12]
 8011b1a:	4322      	orrs	r2, r4
 8011b1c:	b292      	uxth	r2, r2
 8011b1e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	8b5b      	ldrh	r3, [r3, #26]
 8011b24:	f043 0320 	orr.w	r3, r3, #32
 8011b28:	b29a      	uxth	r2, r3
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011b2e:	2300      	movs	r3, #0
 8011b30:	e004      	b.n	8011b3c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011b32:	2101      	movs	r1, #1
 8011b34:	6878      	ldr	r0, [r7, #4]
 8011b36:	f000 f80b 	bl	8011b50 <tcp_enqueue_flags>
 8011b3a:	4603      	mov	r3, r0
}
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	3714      	adds	r7, #20
 8011b40:	46bd      	mov	sp, r7
 8011b42:	bd90      	pop	{r4, r7, pc}
 8011b44:	0801b4f0 	.word	0x0801b4f0
 8011b48:	0801b8f8 	.word	0x0801b8f8
 8011b4c:	0801b544 	.word	0x0801b544

08011b50 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b08a      	sub	sp, #40	; 0x28
 8011b54:	af02      	add	r7, sp, #8
 8011b56:	6078      	str	r0, [r7, #4]
 8011b58:	460b      	mov	r3, r1
 8011b5a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011b60:	2300      	movs	r3, #0
 8011b62:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011b64:	78fb      	ldrb	r3, [r7, #3]
 8011b66:	f003 0303 	and.w	r3, r3, #3
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d106      	bne.n	8011b7c <tcp_enqueue_flags+0x2c>
 8011b6e:	4b67      	ldr	r3, [pc, #412]	; (8011d0c <tcp_enqueue_flags+0x1bc>)
 8011b70:	f240 4211 	movw	r2, #1041	; 0x411
 8011b74:	4966      	ldr	r1, [pc, #408]	; (8011d10 <tcp_enqueue_flags+0x1c0>)
 8011b76:	4867      	ldr	r0, [pc, #412]	; (8011d14 <tcp_enqueue_flags+0x1c4>)
 8011b78:	f006 fada 	bl	8018130 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d106      	bne.n	8011b90 <tcp_enqueue_flags+0x40>
 8011b82:	4b62      	ldr	r3, [pc, #392]	; (8011d0c <tcp_enqueue_flags+0x1bc>)
 8011b84:	f240 4213 	movw	r2, #1043	; 0x413
 8011b88:	4963      	ldr	r1, [pc, #396]	; (8011d18 <tcp_enqueue_flags+0x1c8>)
 8011b8a:	4862      	ldr	r0, [pc, #392]	; (8011d14 <tcp_enqueue_flags+0x1c4>)
 8011b8c:	f006 fad0 	bl	8018130 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011b90:	78fb      	ldrb	r3, [r7, #3]
 8011b92:	f003 0302 	and.w	r3, r3, #2
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d001      	beq.n	8011b9e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011b9a:	2301      	movs	r3, #1
 8011b9c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011b9e:	7ffb      	ldrb	r3, [r7, #31]
 8011ba0:	009b      	lsls	r3, r3, #2
 8011ba2:	b2db      	uxtb	r3, r3
 8011ba4:	f003 0304 	and.w	r3, r3, #4
 8011ba8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011baa:	7dfb      	ldrb	r3, [r7, #23]
 8011bac:	b29b      	uxth	r3, r3
 8011bae:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011bb2:	4619      	mov	r1, r3
 8011bb4:	2036      	movs	r0, #54	; 0x36
 8011bb6:	f7fa f9eb 	bl	800bf90 <pbuf_alloc>
 8011bba:	6138      	str	r0, [r7, #16]
 8011bbc:	693b      	ldr	r3, [r7, #16]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d109      	bne.n	8011bd6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	8b5b      	ldrh	r3, [r3, #26]
 8011bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011bca:	b29a      	uxth	r2, r3
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8011bd4:	e095      	b.n	8011d02 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011bd6:	693b      	ldr	r3, [r7, #16]
 8011bd8:	895a      	ldrh	r2, [r3, #10]
 8011bda:	7dfb      	ldrb	r3, [r7, #23]
 8011bdc:	b29b      	uxth	r3, r3
 8011bde:	429a      	cmp	r2, r3
 8011be0:	d206      	bcs.n	8011bf0 <tcp_enqueue_flags+0xa0>
 8011be2:	4b4a      	ldr	r3, [pc, #296]	; (8011d0c <tcp_enqueue_flags+0x1bc>)
 8011be4:	f240 4239 	movw	r2, #1081	; 0x439
 8011be8:	494c      	ldr	r1, [pc, #304]	; (8011d1c <tcp_enqueue_flags+0x1cc>)
 8011bea:	484a      	ldr	r0, [pc, #296]	; (8011d14 <tcp_enqueue_flags+0x1c4>)
 8011bec:	f006 faa0 	bl	8018130 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011bf4:	78fa      	ldrb	r2, [r7, #3]
 8011bf6:	7ffb      	ldrb	r3, [r7, #31]
 8011bf8:	9300      	str	r3, [sp, #0]
 8011bfa:	460b      	mov	r3, r1
 8011bfc:	6939      	ldr	r1, [r7, #16]
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	f7ff f918 	bl	8010e34 <tcp_create_segment>
 8011c04:	60f8      	str	r0, [r7, #12]
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d109      	bne.n	8011c20 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	8b5b      	ldrh	r3, [r3, #26]
 8011c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c14:	b29a      	uxth	r2, r3
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8011c1e:	e070      	b.n	8011d02 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	68db      	ldr	r3, [r3, #12]
 8011c24:	f003 0303 	and.w	r3, r3, #3
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d006      	beq.n	8011c3a <tcp_enqueue_flags+0xea>
 8011c2c:	4b37      	ldr	r3, [pc, #220]	; (8011d0c <tcp_enqueue_flags+0x1bc>)
 8011c2e:	f240 4242 	movw	r2, #1090	; 0x442
 8011c32:	493b      	ldr	r1, [pc, #236]	; (8011d20 <tcp_enqueue_flags+0x1d0>)
 8011c34:	4837      	ldr	r0, [pc, #220]	; (8011d14 <tcp_enqueue_flags+0x1c4>)
 8011c36:	f006 fa7b 	bl	8018130 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	891b      	ldrh	r3, [r3, #8]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d006      	beq.n	8011c50 <tcp_enqueue_flags+0x100>
 8011c42:	4b32      	ldr	r3, [pc, #200]	; (8011d0c <tcp_enqueue_flags+0x1bc>)
 8011c44:	f240 4243 	movw	r2, #1091	; 0x443
 8011c48:	4936      	ldr	r1, [pc, #216]	; (8011d24 <tcp_enqueue_flags+0x1d4>)
 8011c4a:	4832      	ldr	r0, [pc, #200]	; (8011d14 <tcp_enqueue_flags+0x1c4>)
 8011c4c:	f006 fa70 	bl	8018130 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d103      	bne.n	8011c60 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	68fa      	ldr	r2, [r7, #12]
 8011c5c:	66da      	str	r2, [r3, #108]	; 0x6c
 8011c5e:	e00d      	b.n	8011c7c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c64:	61bb      	str	r3, [r7, #24]
 8011c66:	e002      	b.n	8011c6e <tcp_enqueue_flags+0x11e>
 8011c68:	69bb      	ldr	r3, [r7, #24]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	61bb      	str	r3, [r7, #24]
 8011c6e:	69bb      	ldr	r3, [r7, #24]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d1f8      	bne.n	8011c68 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011c76:	69bb      	ldr	r3, [r7, #24]
 8011c78:	68fa      	ldr	r2, [r7, #12]
 8011c7a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	2200      	movs	r2, #0
 8011c80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011c84:	78fb      	ldrb	r3, [r7, #3]
 8011c86:	f003 0302 	and.w	r3, r3, #2
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d104      	bne.n	8011c98 <tcp_enqueue_flags+0x148>
 8011c8e:	78fb      	ldrb	r3, [r7, #3]
 8011c90:	f003 0301 	and.w	r3, r3, #1
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d004      	beq.n	8011ca2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011c9c:	1c5a      	adds	r2, r3, #1
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011ca2:	78fb      	ldrb	r3, [r7, #3]
 8011ca4:	f003 0301 	and.w	r3, r3, #1
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d006      	beq.n	8011cba <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	8b5b      	ldrh	r3, [r3, #26]
 8011cb0:	f043 0320 	orr.w	r3, r3, #32
 8011cb4:	b29a      	uxth	r2, r3
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	685b      	ldr	r3, [r3, #4]
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f7fa fcd8 	bl	800c674 <pbuf_clen>
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	461a      	mov	r2, r3
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011cce:	4413      	add	r3, r2
 8011cd0:	b29a      	uxth	r2, r3
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d00e      	beq.n	8011d00 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d10a      	bne.n	8011d00 <tcp_enqueue_flags+0x1b0>
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d106      	bne.n	8011d00 <tcp_enqueue_flags+0x1b0>
 8011cf2:	4b06      	ldr	r3, [pc, #24]	; (8011d0c <tcp_enqueue_flags+0x1bc>)
 8011cf4:	f240 4265 	movw	r2, #1125	; 0x465
 8011cf8:	490b      	ldr	r1, [pc, #44]	; (8011d28 <tcp_enqueue_flags+0x1d8>)
 8011cfa:	4806      	ldr	r0, [pc, #24]	; (8011d14 <tcp_enqueue_flags+0x1c4>)
 8011cfc:	f006 fa18 	bl	8018130 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011d00:	2300      	movs	r3, #0
}
 8011d02:	4618      	mov	r0, r3
 8011d04:	3720      	adds	r7, #32
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bd80      	pop	{r7, pc}
 8011d0a:	bf00      	nop
 8011d0c:	0801b4f0 	.word	0x0801b4f0
 8011d10:	0801b914 	.word	0x0801b914
 8011d14:	0801b544 	.word	0x0801b544
 8011d18:	0801b96c 	.word	0x0801b96c
 8011d1c:	0801b98c 	.word	0x0801b98c
 8011d20:	0801b9c8 	.word	0x0801b9c8
 8011d24:	0801b9e0 	.word	0x0801b9e0
 8011d28:	0801ba0c 	.word	0x0801ba0c

08011d2c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011d2c:	b5b0      	push	{r4, r5, r7, lr}
 8011d2e:	b08a      	sub	sp, #40	; 0x28
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d106      	bne.n	8011d48 <tcp_output+0x1c>
 8011d3a:	4b8a      	ldr	r3, [pc, #552]	; (8011f64 <tcp_output+0x238>)
 8011d3c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011d40:	4989      	ldr	r1, [pc, #548]	; (8011f68 <tcp_output+0x23c>)
 8011d42:	488a      	ldr	r0, [pc, #552]	; (8011f6c <tcp_output+0x240>)
 8011d44:	f006 f9f4 	bl	8018130 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	7d1b      	ldrb	r3, [r3, #20]
 8011d4c:	2b01      	cmp	r3, #1
 8011d4e:	d106      	bne.n	8011d5e <tcp_output+0x32>
 8011d50:	4b84      	ldr	r3, [pc, #528]	; (8011f64 <tcp_output+0x238>)
 8011d52:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8011d56:	4986      	ldr	r1, [pc, #536]	; (8011f70 <tcp_output+0x244>)
 8011d58:	4884      	ldr	r0, [pc, #528]	; (8011f6c <tcp_output+0x240>)
 8011d5a:	f006 f9e9 	bl	8018130 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011d5e:	4b85      	ldr	r3, [pc, #532]	; (8011f74 <tcp_output+0x248>)
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	687a      	ldr	r2, [r7, #4]
 8011d64:	429a      	cmp	r2, r3
 8011d66:	d101      	bne.n	8011d6c <tcp_output+0x40>
    return ERR_OK;
 8011d68:	2300      	movs	r3, #0
 8011d6a:	e1ce      	b.n	801210a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d78:	4293      	cmp	r3, r2
 8011d7a:	bf28      	it	cs
 8011d7c:	4613      	movcs	r3, r2
 8011d7e:	b29b      	uxth	r3, r3
 8011d80:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d86:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d10b      	bne.n	8011da6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	8b5b      	ldrh	r3, [r3, #26]
 8011d92:	f003 0302 	and.w	r3, r3, #2
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	f000 81aa 	beq.w	80120f0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011d9c:	6878      	ldr	r0, [r7, #4]
 8011d9e:	f000 fdcb 	bl	8012938 <tcp_send_empty_ack>
 8011da2:	4603      	mov	r3, r0
 8011da4:	e1b1      	b.n	801210a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011da6:	6879      	ldr	r1, [r7, #4]
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	3304      	adds	r3, #4
 8011dac:	461a      	mov	r2, r3
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	f7ff f824 	bl	8010dfc <tcp_route>
 8011db4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011db6:	697b      	ldr	r3, [r7, #20]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d102      	bne.n	8011dc2 <tcp_output+0x96>
    return ERR_RTE;
 8011dbc:	f06f 0303 	mvn.w	r3, #3
 8011dc0:	e1a3      	b.n	801210a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d003      	beq.n	8011dd0 <tcp_output+0xa4>
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d111      	bne.n	8011df4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011dd0:	697b      	ldr	r3, [r7, #20]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d002      	beq.n	8011ddc <tcp_output+0xb0>
 8011dd6:	697b      	ldr	r3, [r7, #20]
 8011dd8:	3304      	adds	r3, #4
 8011dda:	e000      	b.n	8011dde <tcp_output+0xb2>
 8011ddc:	2300      	movs	r3, #0
 8011dde:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011de0:	693b      	ldr	r3, [r7, #16]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d102      	bne.n	8011dec <tcp_output+0xc0>
      return ERR_RTE;
 8011de6:	f06f 0303 	mvn.w	r3, #3
 8011dea:	e18e      	b.n	801210a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011dec:	693b      	ldr	r3, [r7, #16]
 8011dee:	681a      	ldr	r2, [r3, #0]
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011df6:	68db      	ldr	r3, [r3, #12]
 8011df8:	685b      	ldr	r3, [r3, #4]
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	f7f8 ff8d 	bl	800ad1a <lwip_htonl>
 8011e00:	4602      	mov	r2, r0
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e06:	1ad3      	subs	r3, r2, r3
 8011e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e0a:	8912      	ldrh	r2, [r2, #8]
 8011e0c:	4413      	add	r3, r2
 8011e0e:	69ba      	ldr	r2, [r7, #24]
 8011e10:	429a      	cmp	r2, r3
 8011e12:	d227      	bcs.n	8011e64 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011e1a:	461a      	mov	r2, r3
 8011e1c:	69bb      	ldr	r3, [r7, #24]
 8011e1e:	4293      	cmp	r3, r2
 8011e20:	d114      	bne.n	8011e4c <tcp_output+0x120>
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d110      	bne.n	8011e4c <tcp_output+0x120>
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d10b      	bne.n	8011e4c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	2200      	movs	r2, #0
 8011e38:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	2201      	movs	r2, #1
 8011e40:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	2200      	movs	r2, #0
 8011e48:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	8b5b      	ldrh	r3, [r3, #26]
 8011e50:	f003 0302 	and.w	r3, r3, #2
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	f000 814d 	beq.w	80120f4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011e5a:	6878      	ldr	r0, [r7, #4]
 8011e5c:	f000 fd6c 	bl	8012938 <tcp_send_empty_ack>
 8011e60:	4603      	mov	r3, r0
 8011e62:	e152      	b.n	801210a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	2200      	movs	r2, #0
 8011e68:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e70:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011e72:	6a3b      	ldr	r3, [r7, #32]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	f000 811c 	beq.w	80120b2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011e7a:	e002      	b.n	8011e82 <tcp_output+0x156>
 8011e7c:	6a3b      	ldr	r3, [r7, #32]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	623b      	str	r3, [r7, #32]
 8011e82:	6a3b      	ldr	r3, [r7, #32]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d1f8      	bne.n	8011e7c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011e8a:	e112      	b.n	80120b2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e8e:	68db      	ldr	r3, [r3, #12]
 8011e90:	899b      	ldrh	r3, [r3, #12]
 8011e92:	b29b      	uxth	r3, r3
 8011e94:	4618      	mov	r0, r3
 8011e96:	f7f8 ff2b 	bl	800acf0 <lwip_htons>
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	b2db      	uxtb	r3, r3
 8011e9e:	f003 0304 	and.w	r3, r3, #4
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d006      	beq.n	8011eb4 <tcp_output+0x188>
 8011ea6:	4b2f      	ldr	r3, [pc, #188]	; (8011f64 <tcp_output+0x238>)
 8011ea8:	f240 5236 	movw	r2, #1334	; 0x536
 8011eac:	4932      	ldr	r1, [pc, #200]	; (8011f78 <tcp_output+0x24c>)
 8011eae:	482f      	ldr	r0, [pc, #188]	; (8011f6c <tcp_output+0x240>)
 8011eb0:	f006 f93e 	bl	8018130 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d01f      	beq.n	8011efc <tcp_output+0x1d0>
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	8b5b      	ldrh	r3, [r3, #26]
 8011ec0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d119      	bne.n	8011efc <tcp_output+0x1d0>
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d00b      	beq.n	8011ee8 <tcp_output+0x1bc>
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d110      	bne.n	8011efc <tcp_output+0x1d0>
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ede:	891a      	ldrh	r2, [r3, #8]
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ee4:	429a      	cmp	r2, r3
 8011ee6:	d209      	bcs.n	8011efc <tcp_output+0x1d0>
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d004      	beq.n	8011efc <tcp_output+0x1d0>
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ef8:	2b08      	cmp	r3, #8
 8011efa:	d901      	bls.n	8011f00 <tcp_output+0x1d4>
 8011efc:	2301      	movs	r3, #1
 8011efe:	e000      	b.n	8011f02 <tcp_output+0x1d6>
 8011f00:	2300      	movs	r3, #0
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d106      	bne.n	8011f14 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	8b5b      	ldrh	r3, [r3, #26]
 8011f0a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	f000 80e4 	beq.w	80120dc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	7d1b      	ldrb	r3, [r3, #20]
 8011f18:	2b02      	cmp	r3, #2
 8011f1a:	d00d      	beq.n	8011f38 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f1e:	68db      	ldr	r3, [r3, #12]
 8011f20:	899b      	ldrh	r3, [r3, #12]
 8011f22:	b29c      	uxth	r4, r3
 8011f24:	2010      	movs	r0, #16
 8011f26:	f7f8 fee3 	bl	800acf0 <lwip_htons>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	461a      	mov	r2, r3
 8011f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f30:	68db      	ldr	r3, [r3, #12]
 8011f32:	4322      	orrs	r2, r4
 8011f34:	b292      	uxth	r2, r2
 8011f36:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011f38:	697a      	ldr	r2, [r7, #20]
 8011f3a:	6879      	ldr	r1, [r7, #4]
 8011f3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f3e:	f000 f909 	bl	8012154 <tcp_output_segment>
 8011f42:	4603      	mov	r3, r0
 8011f44:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d016      	beq.n	8011f7c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	8b5b      	ldrh	r3, [r3, #26]
 8011f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f56:	b29a      	uxth	r2, r3
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	835a      	strh	r2, [r3, #26]
      return err;
 8011f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f60:	e0d3      	b.n	801210a <tcp_output+0x3de>
 8011f62:	bf00      	nop
 8011f64:	0801b4f0 	.word	0x0801b4f0
 8011f68:	0801ba34 	.word	0x0801ba34
 8011f6c:	0801b544 	.word	0x0801b544
 8011f70:	0801ba4c 	.word	0x0801ba4c
 8011f74:	20010da8 	.word	0x20010da8
 8011f78:	0801ba74 	.word	0x0801ba74
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f7e:	681a      	ldr	r2, [r3, #0]
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	7d1b      	ldrb	r3, [r3, #20]
 8011f88:	2b02      	cmp	r3, #2
 8011f8a:	d006      	beq.n	8011f9a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	8b5b      	ldrh	r3, [r3, #26]
 8011f90:	f023 0303 	bic.w	r3, r3, #3
 8011f94:	b29a      	uxth	r2, r3
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f9c:	68db      	ldr	r3, [r3, #12]
 8011f9e:	685b      	ldr	r3, [r3, #4]
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	f7f8 feba 	bl	800ad1a <lwip_htonl>
 8011fa6:	4604      	mov	r4, r0
 8011fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011faa:	891b      	ldrh	r3, [r3, #8]
 8011fac:	461d      	mov	r5, r3
 8011fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb0:	68db      	ldr	r3, [r3, #12]
 8011fb2:	899b      	ldrh	r3, [r3, #12]
 8011fb4:	b29b      	uxth	r3, r3
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f7f8 fe9a 	bl	800acf0 <lwip_htons>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	b2db      	uxtb	r3, r3
 8011fc0:	f003 0303 	and.w	r3, r3, #3
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d001      	beq.n	8011fcc <tcp_output+0x2a0>
 8011fc8:	2301      	movs	r3, #1
 8011fca:	e000      	b.n	8011fce <tcp_output+0x2a2>
 8011fcc:	2300      	movs	r3, #0
 8011fce:	442b      	add	r3, r5
 8011fd0:	4423      	add	r3, r4
 8011fd2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011fd8:	68bb      	ldr	r3, [r7, #8]
 8011fda:	1ad3      	subs	r3, r2, r3
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	da02      	bge.n	8011fe6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	68ba      	ldr	r2, [r7, #8]
 8011fe4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fe8:	891b      	ldrh	r3, [r3, #8]
 8011fea:	461c      	mov	r4, r3
 8011fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fee:	68db      	ldr	r3, [r3, #12]
 8011ff0:	899b      	ldrh	r3, [r3, #12]
 8011ff2:	b29b      	uxth	r3, r3
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	f7f8 fe7b 	bl	800acf0 <lwip_htons>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	b2db      	uxtb	r3, r3
 8011ffe:	f003 0303 	and.w	r3, r3, #3
 8012002:	2b00      	cmp	r3, #0
 8012004:	d001      	beq.n	801200a <tcp_output+0x2de>
 8012006:	2301      	movs	r3, #1
 8012008:	e000      	b.n	801200c <tcp_output+0x2e0>
 801200a:	2300      	movs	r3, #0
 801200c:	4423      	add	r3, r4
 801200e:	2b00      	cmp	r3, #0
 8012010:	d049      	beq.n	80120a6 <tcp_output+0x37a>
      seg->next = NULL;
 8012012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012014:	2200      	movs	r2, #0
 8012016:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801201c:	2b00      	cmp	r3, #0
 801201e:	d105      	bne.n	801202c <tcp_output+0x300>
        pcb->unacked = seg;
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012024:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012028:	623b      	str	r3, [r7, #32]
 801202a:	e03f      	b.n	80120ac <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801202e:	68db      	ldr	r3, [r3, #12]
 8012030:	685b      	ldr	r3, [r3, #4]
 8012032:	4618      	mov	r0, r3
 8012034:	f7f8 fe71 	bl	800ad1a <lwip_htonl>
 8012038:	4604      	mov	r4, r0
 801203a:	6a3b      	ldr	r3, [r7, #32]
 801203c:	68db      	ldr	r3, [r3, #12]
 801203e:	685b      	ldr	r3, [r3, #4]
 8012040:	4618      	mov	r0, r3
 8012042:	f7f8 fe6a 	bl	800ad1a <lwip_htonl>
 8012046:	4603      	mov	r3, r0
 8012048:	1ae3      	subs	r3, r4, r3
 801204a:	2b00      	cmp	r3, #0
 801204c:	da24      	bge.n	8012098 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	3370      	adds	r3, #112	; 0x70
 8012052:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012054:	e002      	b.n	801205c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012056:	69fb      	ldr	r3, [r7, #28]
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801205c:	69fb      	ldr	r3, [r7, #28]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d011      	beq.n	8012088 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012064:	69fb      	ldr	r3, [r7, #28]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	68db      	ldr	r3, [r3, #12]
 801206a:	685b      	ldr	r3, [r3, #4]
 801206c:	4618      	mov	r0, r3
 801206e:	f7f8 fe54 	bl	800ad1a <lwip_htonl>
 8012072:	4604      	mov	r4, r0
 8012074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012076:	68db      	ldr	r3, [r3, #12]
 8012078:	685b      	ldr	r3, [r3, #4]
 801207a:	4618      	mov	r0, r3
 801207c:	f7f8 fe4d 	bl	800ad1a <lwip_htonl>
 8012080:	4603      	mov	r3, r0
 8012082:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012084:	2b00      	cmp	r3, #0
 8012086:	dbe6      	blt.n	8012056 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012088:	69fb      	ldr	r3, [r7, #28]
 801208a:	681a      	ldr	r2, [r3, #0]
 801208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801208e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012090:	69fb      	ldr	r3, [r7, #28]
 8012092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012094:	601a      	str	r2, [r3, #0]
 8012096:	e009      	b.n	80120ac <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012098:	6a3b      	ldr	r3, [r7, #32]
 801209a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801209c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801209e:	6a3b      	ldr	r3, [r7, #32]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	623b      	str	r3, [r7, #32]
 80120a4:	e002      	b.n	80120ac <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80120a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80120a8:	f7fb fefb 	bl	800dea2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120b0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80120b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d012      	beq.n	80120de <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80120b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ba:	68db      	ldr	r3, [r3, #12]
 80120bc:	685b      	ldr	r3, [r3, #4]
 80120be:	4618      	mov	r0, r3
 80120c0:	f7f8 fe2b 	bl	800ad1a <lwip_htonl>
 80120c4:	4602      	mov	r2, r0
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80120ca:	1ad3      	subs	r3, r2, r3
 80120cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120ce:	8912      	ldrh	r2, [r2, #8]
 80120d0:	4413      	add	r3, r2
  while (seg != NULL &&
 80120d2:	69ba      	ldr	r2, [r7, #24]
 80120d4:	429a      	cmp	r2, r3
 80120d6:	f4bf aed9 	bcs.w	8011e8c <tcp_output+0x160>
 80120da:	e000      	b.n	80120de <tcp_output+0x3b2>
      break;
 80120dc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d108      	bne.n	80120f8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	2200      	movs	r2, #0
 80120ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80120ee:	e004      	b.n	80120fa <tcp_output+0x3ce>
    goto output_done;
 80120f0:	bf00      	nop
 80120f2:	e002      	b.n	80120fa <tcp_output+0x3ce>
    goto output_done;
 80120f4:	bf00      	nop
 80120f6:	e000      	b.n	80120fa <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80120f8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	8b5b      	ldrh	r3, [r3, #26]
 80120fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012102:	b29a      	uxth	r2, r3
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012108:	2300      	movs	r3, #0
}
 801210a:	4618      	mov	r0, r3
 801210c:	3728      	adds	r7, #40	; 0x28
 801210e:	46bd      	mov	sp, r7
 8012110:	bdb0      	pop	{r4, r5, r7, pc}
 8012112:	bf00      	nop

08012114 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012114:	b580      	push	{r7, lr}
 8012116:	b082      	sub	sp, #8
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d106      	bne.n	8012130 <tcp_output_segment_busy+0x1c>
 8012122:	4b09      	ldr	r3, [pc, #36]	; (8012148 <tcp_output_segment_busy+0x34>)
 8012124:	f240 529a 	movw	r2, #1434	; 0x59a
 8012128:	4908      	ldr	r1, [pc, #32]	; (801214c <tcp_output_segment_busy+0x38>)
 801212a:	4809      	ldr	r0, [pc, #36]	; (8012150 <tcp_output_segment_busy+0x3c>)
 801212c:	f006 f800 	bl	8018130 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	685b      	ldr	r3, [r3, #4]
 8012134:	7b9b      	ldrb	r3, [r3, #14]
 8012136:	2b01      	cmp	r3, #1
 8012138:	d001      	beq.n	801213e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801213a:	2301      	movs	r3, #1
 801213c:	e000      	b.n	8012140 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801213e:	2300      	movs	r3, #0
}
 8012140:	4618      	mov	r0, r3
 8012142:	3708      	adds	r7, #8
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}
 8012148:	0801b4f0 	.word	0x0801b4f0
 801214c:	0801ba8c 	.word	0x0801ba8c
 8012150:	0801b544 	.word	0x0801b544

08012154 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012154:	b5b0      	push	{r4, r5, r7, lr}
 8012156:	b08c      	sub	sp, #48	; 0x30
 8012158:	af04      	add	r7, sp, #16
 801215a:	60f8      	str	r0, [r7, #12]
 801215c:	60b9      	str	r1, [r7, #8]
 801215e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d106      	bne.n	8012174 <tcp_output_segment+0x20>
 8012166:	4b64      	ldr	r3, [pc, #400]	; (80122f8 <tcp_output_segment+0x1a4>)
 8012168:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801216c:	4963      	ldr	r1, [pc, #396]	; (80122fc <tcp_output_segment+0x1a8>)
 801216e:	4864      	ldr	r0, [pc, #400]	; (8012300 <tcp_output_segment+0x1ac>)
 8012170:	f005 ffde 	bl	8018130 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012174:	68bb      	ldr	r3, [r7, #8]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d106      	bne.n	8012188 <tcp_output_segment+0x34>
 801217a:	4b5f      	ldr	r3, [pc, #380]	; (80122f8 <tcp_output_segment+0x1a4>)
 801217c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012180:	4960      	ldr	r1, [pc, #384]	; (8012304 <tcp_output_segment+0x1b0>)
 8012182:	485f      	ldr	r0, [pc, #380]	; (8012300 <tcp_output_segment+0x1ac>)
 8012184:	f005 ffd4 	bl	8018130 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d106      	bne.n	801219c <tcp_output_segment+0x48>
 801218e:	4b5a      	ldr	r3, [pc, #360]	; (80122f8 <tcp_output_segment+0x1a4>)
 8012190:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012194:	495c      	ldr	r1, [pc, #368]	; (8012308 <tcp_output_segment+0x1b4>)
 8012196:	485a      	ldr	r0, [pc, #360]	; (8012300 <tcp_output_segment+0x1ac>)
 8012198:	f005 ffca 	bl	8018130 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801219c:	68f8      	ldr	r0, [r7, #12]
 801219e:	f7ff ffb9 	bl	8012114 <tcp_output_segment_busy>
 80121a2:	4603      	mov	r3, r0
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d001      	beq.n	80121ac <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80121a8:	2300      	movs	r3, #0
 80121aa:	e0a1      	b.n	80122f0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80121ac:	68bb      	ldr	r3, [r7, #8]
 80121ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	68dc      	ldr	r4, [r3, #12]
 80121b4:	4610      	mov	r0, r2
 80121b6:	f7f8 fdb0 	bl	800ad1a <lwip_htonl>
 80121ba:	4603      	mov	r3, r0
 80121bc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80121be:	68bb      	ldr	r3, [r7, #8]
 80121c0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	68dc      	ldr	r4, [r3, #12]
 80121c6:	4610      	mov	r0, r2
 80121c8:	f7f8 fd92 	bl	800acf0 <lwip_htons>
 80121cc:	4603      	mov	r3, r0
 80121ce:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121d4:	68ba      	ldr	r2, [r7, #8]
 80121d6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80121d8:	441a      	add	r2, r3
 80121da:	68bb      	ldr	r3, [r7, #8]
 80121dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	68db      	ldr	r3, [r3, #12]
 80121e2:	3314      	adds	r3, #20
 80121e4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	7a9b      	ldrb	r3, [r3, #10]
 80121ea:	f003 0301 	and.w	r3, r3, #1
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d015      	beq.n	801221e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80121f2:	68bb      	ldr	r3, [r7, #8]
 80121f4:	3304      	adds	r3, #4
 80121f6:	461a      	mov	r2, r3
 80121f8:	6879      	ldr	r1, [r7, #4]
 80121fa:	f44f 7006 	mov.w	r0, #536	; 0x218
 80121fe:	f7fc fa33 	bl	800e668 <tcp_eff_send_mss_netif>
 8012202:	4603      	mov	r3, r0
 8012204:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012206:	8b7b      	ldrh	r3, [r7, #26]
 8012208:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801220c:	4618      	mov	r0, r3
 801220e:	f7f8 fd84 	bl	800ad1a <lwip_htonl>
 8012212:	4602      	mov	r2, r0
 8012214:	69fb      	ldr	r3, [r7, #28]
 8012216:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012218:	69fb      	ldr	r3, [r7, #28]
 801221a:	3304      	adds	r3, #4
 801221c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801221e:	68bb      	ldr	r3, [r7, #8]
 8012220:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012224:	2b00      	cmp	r3, #0
 8012226:	da02      	bge.n	801222e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012228:	68bb      	ldr	r3, [r7, #8]
 801222a:	2200      	movs	r2, #0
 801222c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801222e:	68bb      	ldr	r3, [r7, #8]
 8012230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012232:	2b00      	cmp	r3, #0
 8012234:	d10c      	bne.n	8012250 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012236:	4b35      	ldr	r3, [pc, #212]	; (801230c <tcp_output_segment+0x1b8>)
 8012238:	681a      	ldr	r2, [r3, #0]
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	68db      	ldr	r3, [r3, #12]
 8012242:	685b      	ldr	r3, [r3, #4]
 8012244:	4618      	mov	r0, r3
 8012246:	f7f8 fd68 	bl	800ad1a <lwip_htonl>
 801224a:	4602      	mov	r2, r0
 801224c:	68bb      	ldr	r3, [r7, #8]
 801224e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	68da      	ldr	r2, [r3, #12]
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	685b      	ldr	r3, [r3, #4]
 8012258:	685b      	ldr	r3, [r3, #4]
 801225a:	1ad3      	subs	r3, r2, r3
 801225c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	685b      	ldr	r3, [r3, #4]
 8012262:	8959      	ldrh	r1, [r3, #10]
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	685b      	ldr	r3, [r3, #4]
 8012268:	8b3a      	ldrh	r2, [r7, #24]
 801226a:	1a8a      	subs	r2, r1, r2
 801226c:	b292      	uxth	r2, r2
 801226e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	685b      	ldr	r3, [r3, #4]
 8012274:	8919      	ldrh	r1, [r3, #8]
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	685b      	ldr	r3, [r3, #4]
 801227a:	8b3a      	ldrh	r2, [r7, #24]
 801227c:	1a8a      	subs	r2, r1, r2
 801227e:	b292      	uxth	r2, r2
 8012280:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	685b      	ldr	r3, [r3, #4]
 8012286:	68fa      	ldr	r2, [r7, #12]
 8012288:	68d2      	ldr	r2, [r2, #12]
 801228a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	68db      	ldr	r3, [r3, #12]
 8012290:	2200      	movs	r2, #0
 8012292:	741a      	strb	r2, [r3, #16]
 8012294:	2200      	movs	r2, #0
 8012296:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	68da      	ldr	r2, [r3, #12]
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	7a9b      	ldrb	r3, [r3, #10]
 80122a0:	f003 0301 	and.w	r3, r3, #1
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d001      	beq.n	80122ac <tcp_output_segment+0x158>
 80122a8:	2318      	movs	r3, #24
 80122aa:	e000      	b.n	80122ae <tcp_output_segment+0x15a>
 80122ac:	2314      	movs	r3, #20
 80122ae:	4413      	add	r3, r2
 80122b0:	69fa      	ldr	r2, [r7, #28]
 80122b2:	429a      	cmp	r2, r3
 80122b4:	d006      	beq.n	80122c4 <tcp_output_segment+0x170>
 80122b6:	4b10      	ldr	r3, [pc, #64]	; (80122f8 <tcp_output_segment+0x1a4>)
 80122b8:	f240 621c 	movw	r2, #1564	; 0x61c
 80122bc:	4914      	ldr	r1, [pc, #80]	; (8012310 <tcp_output_segment+0x1bc>)
 80122be:	4810      	ldr	r0, [pc, #64]	; (8012300 <tcp_output_segment+0x1ac>)
 80122c0:	f005 ff36 	bl	8018130 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	6858      	ldr	r0, [r3, #4]
 80122c8:	68b9      	ldr	r1, [r7, #8]
 80122ca:	68bb      	ldr	r3, [r7, #8]
 80122cc:	1d1c      	adds	r4, r3, #4
 80122ce:	68bb      	ldr	r3, [r7, #8]
 80122d0:	7add      	ldrb	r5, [r3, #11]
 80122d2:	68bb      	ldr	r3, [r7, #8]
 80122d4:	7a9b      	ldrb	r3, [r3, #10]
 80122d6:	687a      	ldr	r2, [r7, #4]
 80122d8:	9202      	str	r2, [sp, #8]
 80122da:	2206      	movs	r2, #6
 80122dc:	9201      	str	r2, [sp, #4]
 80122de:	9300      	str	r3, [sp, #0]
 80122e0:	462b      	mov	r3, r5
 80122e2:	4622      	mov	r2, r4
 80122e4:	f004 fc26 	bl	8016b34 <ip4_output_if>
 80122e8:	4603      	mov	r3, r0
 80122ea:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80122ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80122f0:	4618      	mov	r0, r3
 80122f2:	3720      	adds	r7, #32
 80122f4:	46bd      	mov	sp, r7
 80122f6:	bdb0      	pop	{r4, r5, r7, pc}
 80122f8:	0801b4f0 	.word	0x0801b4f0
 80122fc:	0801bab4 	.word	0x0801bab4
 8012300:	0801b544 	.word	0x0801b544
 8012304:	0801bad4 	.word	0x0801bad4
 8012308:	0801baf4 	.word	0x0801baf4
 801230c:	20010d5c 	.word	0x20010d5c
 8012310:	0801bb18 	.word	0x0801bb18

08012314 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012314:	b5b0      	push	{r4, r5, r7, lr}
 8012316:	b084      	sub	sp, #16
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d106      	bne.n	8012330 <tcp_rexmit_rto_prepare+0x1c>
 8012322:	4b31      	ldr	r3, [pc, #196]	; (80123e8 <tcp_rexmit_rto_prepare+0xd4>)
 8012324:	f240 6263 	movw	r2, #1635	; 0x663
 8012328:	4930      	ldr	r1, [pc, #192]	; (80123ec <tcp_rexmit_rto_prepare+0xd8>)
 801232a:	4831      	ldr	r0, [pc, #196]	; (80123f0 <tcp_rexmit_rto_prepare+0xdc>)
 801232c:	f005 ff00 	bl	8018130 <iprintf>

  if (pcb->unacked == NULL) {
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012334:	2b00      	cmp	r3, #0
 8012336:	d102      	bne.n	801233e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012338:	f06f 0305 	mvn.w	r3, #5
 801233c:	e050      	b.n	80123e0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012342:	60fb      	str	r3, [r7, #12]
 8012344:	e00b      	b.n	801235e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012346:	68f8      	ldr	r0, [r7, #12]
 8012348:	f7ff fee4 	bl	8012114 <tcp_output_segment_busy>
 801234c:	4603      	mov	r3, r0
 801234e:	2b00      	cmp	r3, #0
 8012350:	d002      	beq.n	8012358 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012352:	f06f 0305 	mvn.w	r3, #5
 8012356:	e043      	b.n	80123e0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	60fb      	str	r3, [r7, #12]
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d1ef      	bne.n	8012346 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012366:	68f8      	ldr	r0, [r7, #12]
 8012368:	f7ff fed4 	bl	8012114 <tcp_output_segment_busy>
 801236c:	4603      	mov	r3, r0
 801236e:	2b00      	cmp	r3, #0
 8012370:	d002      	beq.n	8012378 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012372:	f06f 0305 	mvn.w	r3, #5
 8012376:	e033      	b.n	80123e0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	2200      	movs	r2, #0
 801238c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	8b5b      	ldrh	r3, [r3, #26]
 8012392:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012396:	b29a      	uxth	r2, r3
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	68db      	ldr	r3, [r3, #12]
 80123a0:	685b      	ldr	r3, [r3, #4]
 80123a2:	4618      	mov	r0, r3
 80123a4:	f7f8 fcb9 	bl	800ad1a <lwip_htonl>
 80123a8:	4604      	mov	r4, r0
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	891b      	ldrh	r3, [r3, #8]
 80123ae:	461d      	mov	r5, r3
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	68db      	ldr	r3, [r3, #12]
 80123b4:	899b      	ldrh	r3, [r3, #12]
 80123b6:	b29b      	uxth	r3, r3
 80123b8:	4618      	mov	r0, r3
 80123ba:	f7f8 fc99 	bl	800acf0 <lwip_htons>
 80123be:	4603      	mov	r3, r0
 80123c0:	b2db      	uxtb	r3, r3
 80123c2:	f003 0303 	and.w	r3, r3, #3
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d001      	beq.n	80123ce <tcp_rexmit_rto_prepare+0xba>
 80123ca:	2301      	movs	r3, #1
 80123cc:	e000      	b.n	80123d0 <tcp_rexmit_rto_prepare+0xbc>
 80123ce:	2300      	movs	r3, #0
 80123d0:	442b      	add	r3, r5
 80123d2:	18e2      	adds	r2, r4, r3
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	2200      	movs	r2, #0
 80123dc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80123de:	2300      	movs	r3, #0
}
 80123e0:	4618      	mov	r0, r3
 80123e2:	3710      	adds	r7, #16
 80123e4:	46bd      	mov	sp, r7
 80123e6:	bdb0      	pop	{r4, r5, r7, pc}
 80123e8:	0801b4f0 	.word	0x0801b4f0
 80123ec:	0801bb2c 	.word	0x0801bb2c
 80123f0:	0801b544 	.word	0x0801b544

080123f4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b082      	sub	sp, #8
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d106      	bne.n	8012410 <tcp_rexmit_rto_commit+0x1c>
 8012402:	4b0d      	ldr	r3, [pc, #52]	; (8012438 <tcp_rexmit_rto_commit+0x44>)
 8012404:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012408:	490c      	ldr	r1, [pc, #48]	; (801243c <tcp_rexmit_rto_commit+0x48>)
 801240a:	480d      	ldr	r0, [pc, #52]	; (8012440 <tcp_rexmit_rto_commit+0x4c>)
 801240c:	f005 fe90 	bl	8018130 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012416:	2bff      	cmp	r3, #255	; 0xff
 8012418:	d007      	beq.n	801242a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012420:	3301      	adds	r3, #1
 8012422:	b2da      	uxtb	r2, r3
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801242a:	6878      	ldr	r0, [r7, #4]
 801242c:	f7ff fc7e 	bl	8011d2c <tcp_output>
}
 8012430:	bf00      	nop
 8012432:	3708      	adds	r7, #8
 8012434:	46bd      	mov	sp, r7
 8012436:	bd80      	pop	{r7, pc}
 8012438:	0801b4f0 	.word	0x0801b4f0
 801243c:	0801bb50 	.word	0x0801bb50
 8012440:	0801b544 	.word	0x0801b544

08012444 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012444:	b580      	push	{r7, lr}
 8012446:	b082      	sub	sp, #8
 8012448:	af00      	add	r7, sp, #0
 801244a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d106      	bne.n	8012460 <tcp_rexmit_rto+0x1c>
 8012452:	4b0a      	ldr	r3, [pc, #40]	; (801247c <tcp_rexmit_rto+0x38>)
 8012454:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012458:	4909      	ldr	r1, [pc, #36]	; (8012480 <tcp_rexmit_rto+0x3c>)
 801245a:	480a      	ldr	r0, [pc, #40]	; (8012484 <tcp_rexmit_rto+0x40>)
 801245c:	f005 fe68 	bl	8018130 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012460:	6878      	ldr	r0, [r7, #4]
 8012462:	f7ff ff57 	bl	8012314 <tcp_rexmit_rto_prepare>
 8012466:	4603      	mov	r3, r0
 8012468:	2b00      	cmp	r3, #0
 801246a:	d102      	bne.n	8012472 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801246c:	6878      	ldr	r0, [r7, #4]
 801246e:	f7ff ffc1 	bl	80123f4 <tcp_rexmit_rto_commit>
  }
}
 8012472:	bf00      	nop
 8012474:	3708      	adds	r7, #8
 8012476:	46bd      	mov	sp, r7
 8012478:	bd80      	pop	{r7, pc}
 801247a:	bf00      	nop
 801247c:	0801b4f0 	.word	0x0801b4f0
 8012480:	0801bb74 	.word	0x0801bb74
 8012484:	0801b544 	.word	0x0801b544

08012488 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012488:	b590      	push	{r4, r7, lr}
 801248a:	b085      	sub	sp, #20
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d106      	bne.n	80124a4 <tcp_rexmit+0x1c>
 8012496:	4b2f      	ldr	r3, [pc, #188]	; (8012554 <tcp_rexmit+0xcc>)
 8012498:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801249c:	492e      	ldr	r1, [pc, #184]	; (8012558 <tcp_rexmit+0xd0>)
 801249e:	482f      	ldr	r0, [pc, #188]	; (801255c <tcp_rexmit+0xd4>)
 80124a0:	f005 fe46 	bl	8018130 <iprintf>

  if (pcb->unacked == NULL) {
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d102      	bne.n	80124b2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80124ac:	f06f 0305 	mvn.w	r3, #5
 80124b0:	e04c      	b.n	801254c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124b6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80124b8:	68b8      	ldr	r0, [r7, #8]
 80124ba:	f7ff fe2b 	bl	8012114 <tcp_output_segment_busy>
 80124be:	4603      	mov	r3, r0
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d002      	beq.n	80124ca <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80124c4:	f06f 0305 	mvn.w	r3, #5
 80124c8:	e040      	b.n	801254c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80124ca:	68bb      	ldr	r3, [r7, #8]
 80124cc:	681a      	ldr	r2, [r3, #0]
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	336c      	adds	r3, #108	; 0x6c
 80124d6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80124d8:	e002      	b.n	80124e0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d011      	beq.n	801250c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	68db      	ldr	r3, [r3, #12]
 80124ee:	685b      	ldr	r3, [r3, #4]
 80124f0:	4618      	mov	r0, r3
 80124f2:	f7f8 fc12 	bl	800ad1a <lwip_htonl>
 80124f6:	4604      	mov	r4, r0
 80124f8:	68bb      	ldr	r3, [r7, #8]
 80124fa:	68db      	ldr	r3, [r3, #12]
 80124fc:	685b      	ldr	r3, [r3, #4]
 80124fe:	4618      	mov	r0, r3
 8012500:	f7f8 fc0b 	bl	800ad1a <lwip_htonl>
 8012504:	4603      	mov	r3, r0
 8012506:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012508:	2b00      	cmp	r3, #0
 801250a:	dbe6      	blt.n	80124da <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	681a      	ldr	r2, [r3, #0]
 8012510:	68bb      	ldr	r3, [r7, #8]
 8012512:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	68ba      	ldr	r2, [r7, #8]
 8012518:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801251a:	68bb      	ldr	r3, [r7, #8]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d103      	bne.n	801252a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	2200      	movs	r2, #0
 8012526:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012530:	2bff      	cmp	r3, #255	; 0xff
 8012532:	d007      	beq.n	8012544 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801253a:	3301      	adds	r3, #1
 801253c:	b2da      	uxtb	r2, r3
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	2200      	movs	r2, #0
 8012548:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801254a:	2300      	movs	r3, #0
}
 801254c:	4618      	mov	r0, r3
 801254e:	3714      	adds	r7, #20
 8012550:	46bd      	mov	sp, r7
 8012552:	bd90      	pop	{r4, r7, pc}
 8012554:	0801b4f0 	.word	0x0801b4f0
 8012558:	0801bb90 	.word	0x0801bb90
 801255c:	0801b544 	.word	0x0801b544

08012560 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012560:	b580      	push	{r7, lr}
 8012562:	b082      	sub	sp, #8
 8012564:	af00      	add	r7, sp, #0
 8012566:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d106      	bne.n	801257c <tcp_rexmit_fast+0x1c>
 801256e:	4b2a      	ldr	r3, [pc, #168]	; (8012618 <tcp_rexmit_fast+0xb8>)
 8012570:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012574:	4929      	ldr	r1, [pc, #164]	; (801261c <tcp_rexmit_fast+0xbc>)
 8012576:	482a      	ldr	r0, [pc, #168]	; (8012620 <tcp_rexmit_fast+0xc0>)
 8012578:	f005 fdda 	bl	8018130 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012580:	2b00      	cmp	r3, #0
 8012582:	d044      	beq.n	801260e <tcp_rexmit_fast+0xae>
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	8b5b      	ldrh	r3, [r3, #26]
 8012588:	f003 0304 	and.w	r3, r3, #4
 801258c:	2b00      	cmp	r3, #0
 801258e:	d13e      	bne.n	801260e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012590:	6878      	ldr	r0, [r7, #4]
 8012592:	f7ff ff79 	bl	8012488 <tcp_rexmit>
 8012596:	4603      	mov	r3, r0
 8012598:	2b00      	cmp	r3, #0
 801259a:	d138      	bne.n	801260e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80125a8:	4293      	cmp	r3, r2
 80125aa:	bf28      	it	cs
 80125ac:	4613      	movcs	r3, r2
 80125ae:	b29b      	uxth	r3, r3
 80125b0:	0fda      	lsrs	r2, r3, #31
 80125b2:	4413      	add	r3, r2
 80125b4:	105b      	asrs	r3, r3, #1
 80125b6:	b29a      	uxth	r2, r3
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80125c4:	461a      	mov	r2, r3
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80125ca:	005b      	lsls	r3, r3, #1
 80125cc:	429a      	cmp	r2, r3
 80125ce:	d206      	bcs.n	80125de <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80125d4:	005b      	lsls	r3, r3, #1
 80125d6:	b29a      	uxth	r2, r3
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80125e8:	4619      	mov	r1, r3
 80125ea:	0049      	lsls	r1, r1, #1
 80125ec:	440b      	add	r3, r1
 80125ee:	b29b      	uxth	r3, r3
 80125f0:	4413      	add	r3, r2
 80125f2:	b29a      	uxth	r2, r3
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	8b5b      	ldrh	r3, [r3, #26]
 80125fe:	f043 0304 	orr.w	r3, r3, #4
 8012602:	b29a      	uxth	r2, r3
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	2200      	movs	r2, #0
 801260c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801260e:	bf00      	nop
 8012610:	3708      	adds	r7, #8
 8012612:	46bd      	mov	sp, r7
 8012614:	bd80      	pop	{r7, pc}
 8012616:	bf00      	nop
 8012618:	0801b4f0 	.word	0x0801b4f0
 801261c:	0801bba8 	.word	0x0801bba8
 8012620:	0801b544 	.word	0x0801b544

08012624 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b086      	sub	sp, #24
 8012628:	af00      	add	r7, sp, #0
 801262a:	60f8      	str	r0, [r7, #12]
 801262c:	607b      	str	r3, [r7, #4]
 801262e:	460b      	mov	r3, r1
 8012630:	817b      	strh	r3, [r7, #10]
 8012632:	4613      	mov	r3, r2
 8012634:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012636:	897a      	ldrh	r2, [r7, #10]
 8012638:	893b      	ldrh	r3, [r7, #8]
 801263a:	4413      	add	r3, r2
 801263c:	b29b      	uxth	r3, r3
 801263e:	3314      	adds	r3, #20
 8012640:	b29b      	uxth	r3, r3
 8012642:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012646:	4619      	mov	r1, r3
 8012648:	2022      	movs	r0, #34	; 0x22
 801264a:	f7f9 fca1 	bl	800bf90 <pbuf_alloc>
 801264e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012650:	697b      	ldr	r3, [r7, #20]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d04d      	beq.n	80126f2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012656:	897b      	ldrh	r3, [r7, #10]
 8012658:	3313      	adds	r3, #19
 801265a:	697a      	ldr	r2, [r7, #20]
 801265c:	8952      	ldrh	r2, [r2, #10]
 801265e:	4293      	cmp	r3, r2
 8012660:	db06      	blt.n	8012670 <tcp_output_alloc_header_common+0x4c>
 8012662:	4b26      	ldr	r3, [pc, #152]	; (80126fc <tcp_output_alloc_header_common+0xd8>)
 8012664:	f240 7223 	movw	r2, #1827	; 0x723
 8012668:	4925      	ldr	r1, [pc, #148]	; (8012700 <tcp_output_alloc_header_common+0xdc>)
 801266a:	4826      	ldr	r0, [pc, #152]	; (8012704 <tcp_output_alloc_header_common+0xe0>)
 801266c:	f005 fd60 	bl	8018130 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012670:	697b      	ldr	r3, [r7, #20]
 8012672:	685b      	ldr	r3, [r3, #4]
 8012674:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012676:	8c3b      	ldrh	r3, [r7, #32]
 8012678:	4618      	mov	r0, r3
 801267a:	f7f8 fb39 	bl	800acf0 <lwip_htons>
 801267e:	4603      	mov	r3, r0
 8012680:	461a      	mov	r2, r3
 8012682:	693b      	ldr	r3, [r7, #16]
 8012684:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012686:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012688:	4618      	mov	r0, r3
 801268a:	f7f8 fb31 	bl	800acf0 <lwip_htons>
 801268e:	4603      	mov	r3, r0
 8012690:	461a      	mov	r2, r3
 8012692:	693b      	ldr	r3, [r7, #16]
 8012694:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012696:	693b      	ldr	r3, [r7, #16]
 8012698:	687a      	ldr	r2, [r7, #4]
 801269a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801269c:	68f8      	ldr	r0, [r7, #12]
 801269e:	f7f8 fb3c 	bl	800ad1a <lwip_htonl>
 80126a2:	4602      	mov	r2, r0
 80126a4:	693b      	ldr	r3, [r7, #16]
 80126a6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80126a8:	897b      	ldrh	r3, [r7, #10]
 80126aa:	089b      	lsrs	r3, r3, #2
 80126ac:	b29b      	uxth	r3, r3
 80126ae:	3305      	adds	r3, #5
 80126b0:	b29b      	uxth	r3, r3
 80126b2:	031b      	lsls	r3, r3, #12
 80126b4:	b29a      	uxth	r2, r3
 80126b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80126ba:	b29b      	uxth	r3, r3
 80126bc:	4313      	orrs	r3, r2
 80126be:	b29b      	uxth	r3, r3
 80126c0:	4618      	mov	r0, r3
 80126c2:	f7f8 fb15 	bl	800acf0 <lwip_htons>
 80126c6:	4603      	mov	r3, r0
 80126c8:	461a      	mov	r2, r3
 80126ca:	693b      	ldr	r3, [r7, #16]
 80126cc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80126ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80126d0:	4618      	mov	r0, r3
 80126d2:	f7f8 fb0d 	bl	800acf0 <lwip_htons>
 80126d6:	4603      	mov	r3, r0
 80126d8:	461a      	mov	r2, r3
 80126da:	693b      	ldr	r3, [r7, #16]
 80126dc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80126de:	693b      	ldr	r3, [r7, #16]
 80126e0:	2200      	movs	r2, #0
 80126e2:	741a      	strb	r2, [r3, #16]
 80126e4:	2200      	movs	r2, #0
 80126e6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80126e8:	693b      	ldr	r3, [r7, #16]
 80126ea:	2200      	movs	r2, #0
 80126ec:	749a      	strb	r2, [r3, #18]
 80126ee:	2200      	movs	r2, #0
 80126f0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80126f2:	697b      	ldr	r3, [r7, #20]
}
 80126f4:	4618      	mov	r0, r3
 80126f6:	3718      	adds	r7, #24
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd80      	pop	{r7, pc}
 80126fc:	0801b4f0 	.word	0x0801b4f0
 8012700:	0801bbc8 	.word	0x0801bbc8
 8012704:	0801b544 	.word	0x0801b544

08012708 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012708:	b5b0      	push	{r4, r5, r7, lr}
 801270a:	b08a      	sub	sp, #40	; 0x28
 801270c:	af04      	add	r7, sp, #16
 801270e:	60f8      	str	r0, [r7, #12]
 8012710:	607b      	str	r3, [r7, #4]
 8012712:	460b      	mov	r3, r1
 8012714:	817b      	strh	r3, [r7, #10]
 8012716:	4613      	mov	r3, r2
 8012718:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d106      	bne.n	801272e <tcp_output_alloc_header+0x26>
 8012720:	4b15      	ldr	r3, [pc, #84]	; (8012778 <tcp_output_alloc_header+0x70>)
 8012722:	f240 7242 	movw	r2, #1858	; 0x742
 8012726:	4915      	ldr	r1, [pc, #84]	; (801277c <tcp_output_alloc_header+0x74>)
 8012728:	4815      	ldr	r0, [pc, #84]	; (8012780 <tcp_output_alloc_header+0x78>)
 801272a:	f005 fd01 	bl	8018130 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	8adb      	ldrh	r3, [r3, #22]
 8012736:	68fa      	ldr	r2, [r7, #12]
 8012738:	8b12      	ldrh	r2, [r2, #24]
 801273a:	68f9      	ldr	r1, [r7, #12]
 801273c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801273e:	893d      	ldrh	r5, [r7, #8]
 8012740:	897c      	ldrh	r4, [r7, #10]
 8012742:	9103      	str	r1, [sp, #12]
 8012744:	2110      	movs	r1, #16
 8012746:	9102      	str	r1, [sp, #8]
 8012748:	9201      	str	r2, [sp, #4]
 801274a:	9300      	str	r3, [sp, #0]
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	462a      	mov	r2, r5
 8012750:	4621      	mov	r1, r4
 8012752:	f7ff ff67 	bl	8012624 <tcp_output_alloc_header_common>
 8012756:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012758:	697b      	ldr	r3, [r7, #20]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d006      	beq.n	801276c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012762:	68fa      	ldr	r2, [r7, #12]
 8012764:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012766:	441a      	add	r2, r3
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801276c:	697b      	ldr	r3, [r7, #20]
}
 801276e:	4618      	mov	r0, r3
 8012770:	3718      	adds	r7, #24
 8012772:	46bd      	mov	sp, r7
 8012774:	bdb0      	pop	{r4, r5, r7, pc}
 8012776:	bf00      	nop
 8012778:	0801b4f0 	.word	0x0801b4f0
 801277c:	0801bbf8 	.word	0x0801bbf8
 8012780:	0801b544 	.word	0x0801b544

08012784 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b088      	sub	sp, #32
 8012788:	af00      	add	r7, sp, #0
 801278a:	60f8      	str	r0, [r7, #12]
 801278c:	60b9      	str	r1, [r7, #8]
 801278e:	4611      	mov	r1, r2
 8012790:	461a      	mov	r2, r3
 8012792:	460b      	mov	r3, r1
 8012794:	71fb      	strb	r3, [r7, #7]
 8012796:	4613      	mov	r3, r2
 8012798:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801279a:	2300      	movs	r3, #0
 801279c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801279e:	68bb      	ldr	r3, [r7, #8]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d106      	bne.n	80127b2 <tcp_output_fill_options+0x2e>
 80127a4:	4b12      	ldr	r3, [pc, #72]	; (80127f0 <tcp_output_fill_options+0x6c>)
 80127a6:	f240 7256 	movw	r2, #1878	; 0x756
 80127aa:	4912      	ldr	r1, [pc, #72]	; (80127f4 <tcp_output_fill_options+0x70>)
 80127ac:	4812      	ldr	r0, [pc, #72]	; (80127f8 <tcp_output_fill_options+0x74>)
 80127ae:	f005 fcbf 	bl	8018130 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80127b2:	68bb      	ldr	r3, [r7, #8]
 80127b4:	685b      	ldr	r3, [r3, #4]
 80127b6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80127b8:	69bb      	ldr	r3, [r7, #24]
 80127ba:	3314      	adds	r3, #20
 80127bc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80127be:	8bfb      	ldrh	r3, [r7, #30]
 80127c0:	009b      	lsls	r3, r3, #2
 80127c2:	461a      	mov	r2, r3
 80127c4:	79fb      	ldrb	r3, [r7, #7]
 80127c6:	009b      	lsls	r3, r3, #2
 80127c8:	f003 0304 	and.w	r3, r3, #4
 80127cc:	4413      	add	r3, r2
 80127ce:	3314      	adds	r3, #20
 80127d0:	69ba      	ldr	r2, [r7, #24]
 80127d2:	4413      	add	r3, r2
 80127d4:	697a      	ldr	r2, [r7, #20]
 80127d6:	429a      	cmp	r2, r3
 80127d8:	d006      	beq.n	80127e8 <tcp_output_fill_options+0x64>
 80127da:	4b05      	ldr	r3, [pc, #20]	; (80127f0 <tcp_output_fill_options+0x6c>)
 80127dc:	f240 7275 	movw	r2, #1909	; 0x775
 80127e0:	4906      	ldr	r1, [pc, #24]	; (80127fc <tcp_output_fill_options+0x78>)
 80127e2:	4805      	ldr	r0, [pc, #20]	; (80127f8 <tcp_output_fill_options+0x74>)
 80127e4:	f005 fca4 	bl	8018130 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80127e8:	bf00      	nop
 80127ea:	3720      	adds	r7, #32
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}
 80127f0:	0801b4f0 	.word	0x0801b4f0
 80127f4:	0801bc20 	.word	0x0801bc20
 80127f8:	0801b544 	.word	0x0801b544
 80127fc:	0801bb18 	.word	0x0801bb18

08012800 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012800:	b580      	push	{r7, lr}
 8012802:	b08a      	sub	sp, #40	; 0x28
 8012804:	af04      	add	r7, sp, #16
 8012806:	60f8      	str	r0, [r7, #12]
 8012808:	60b9      	str	r1, [r7, #8]
 801280a:	607a      	str	r2, [r7, #4]
 801280c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801280e:	68bb      	ldr	r3, [r7, #8]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d106      	bne.n	8012822 <tcp_output_control_segment+0x22>
 8012814:	4b1c      	ldr	r3, [pc, #112]	; (8012888 <tcp_output_control_segment+0x88>)
 8012816:	f240 7287 	movw	r2, #1927	; 0x787
 801281a:	491c      	ldr	r1, [pc, #112]	; (801288c <tcp_output_control_segment+0x8c>)
 801281c:	481c      	ldr	r0, [pc, #112]	; (8012890 <tcp_output_control_segment+0x90>)
 801281e:	f005 fc87 	bl	8018130 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012822:	683a      	ldr	r2, [r7, #0]
 8012824:	6879      	ldr	r1, [r7, #4]
 8012826:	68f8      	ldr	r0, [r7, #12]
 8012828:	f7fe fae8 	bl	8010dfc <tcp_route>
 801282c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801282e:	693b      	ldr	r3, [r7, #16]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d102      	bne.n	801283a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012834:	23fc      	movs	r3, #252	; 0xfc
 8012836:	75fb      	strb	r3, [r7, #23]
 8012838:	e01c      	b.n	8012874 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d006      	beq.n	801284e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	7adb      	ldrb	r3, [r3, #11]
 8012844:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	7a9b      	ldrb	r3, [r3, #10]
 801284a:	757b      	strb	r3, [r7, #21]
 801284c:	e003      	b.n	8012856 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801284e:	23ff      	movs	r3, #255	; 0xff
 8012850:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012852:	2300      	movs	r3, #0
 8012854:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012856:	7dba      	ldrb	r2, [r7, #22]
 8012858:	693b      	ldr	r3, [r7, #16]
 801285a:	9302      	str	r3, [sp, #8]
 801285c:	2306      	movs	r3, #6
 801285e:	9301      	str	r3, [sp, #4]
 8012860:	7d7b      	ldrb	r3, [r7, #21]
 8012862:	9300      	str	r3, [sp, #0]
 8012864:	4613      	mov	r3, r2
 8012866:	683a      	ldr	r2, [r7, #0]
 8012868:	6879      	ldr	r1, [r7, #4]
 801286a:	68b8      	ldr	r0, [r7, #8]
 801286c:	f004 f962 	bl	8016b34 <ip4_output_if>
 8012870:	4603      	mov	r3, r0
 8012872:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012874:	68b8      	ldr	r0, [r7, #8]
 8012876:	f7f9 fe6f 	bl	800c558 <pbuf_free>
  return err;
 801287a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801287e:	4618      	mov	r0, r3
 8012880:	3718      	adds	r7, #24
 8012882:	46bd      	mov	sp, r7
 8012884:	bd80      	pop	{r7, pc}
 8012886:	bf00      	nop
 8012888:	0801b4f0 	.word	0x0801b4f0
 801288c:	0801bc48 	.word	0x0801bc48
 8012890:	0801b544 	.word	0x0801b544

08012894 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012894:	b590      	push	{r4, r7, lr}
 8012896:	b08b      	sub	sp, #44	; 0x2c
 8012898:	af04      	add	r7, sp, #16
 801289a:	60f8      	str	r0, [r7, #12]
 801289c:	60b9      	str	r1, [r7, #8]
 801289e:	607a      	str	r2, [r7, #4]
 80128a0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80128a2:	683b      	ldr	r3, [r7, #0]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d106      	bne.n	80128b6 <tcp_rst+0x22>
 80128a8:	4b1f      	ldr	r3, [pc, #124]	; (8012928 <tcp_rst+0x94>)
 80128aa:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80128ae:	491f      	ldr	r1, [pc, #124]	; (801292c <tcp_rst+0x98>)
 80128b0:	481f      	ldr	r0, [pc, #124]	; (8012930 <tcp_rst+0x9c>)
 80128b2:	f005 fc3d 	bl	8018130 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80128b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d106      	bne.n	80128ca <tcp_rst+0x36>
 80128bc:	4b1a      	ldr	r3, [pc, #104]	; (8012928 <tcp_rst+0x94>)
 80128be:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80128c2:	491c      	ldr	r1, [pc, #112]	; (8012934 <tcp_rst+0xa0>)
 80128c4:	481a      	ldr	r0, [pc, #104]	; (8012930 <tcp_rst+0x9c>)
 80128c6:	f005 fc33 	bl	8018130 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80128ca:	2300      	movs	r3, #0
 80128cc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80128ce:	f246 0308 	movw	r3, #24584	; 0x6008
 80128d2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80128d4:	7dfb      	ldrb	r3, [r7, #23]
 80128d6:	b29c      	uxth	r4, r3
 80128d8:	68b8      	ldr	r0, [r7, #8]
 80128da:	f7f8 fa1e 	bl	800ad1a <lwip_htonl>
 80128de:	4602      	mov	r2, r0
 80128e0:	8abb      	ldrh	r3, [r7, #20]
 80128e2:	9303      	str	r3, [sp, #12]
 80128e4:	2314      	movs	r3, #20
 80128e6:	9302      	str	r3, [sp, #8]
 80128e8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80128ea:	9301      	str	r3, [sp, #4]
 80128ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80128ee:	9300      	str	r3, [sp, #0]
 80128f0:	4613      	mov	r3, r2
 80128f2:	2200      	movs	r2, #0
 80128f4:	4621      	mov	r1, r4
 80128f6:	6878      	ldr	r0, [r7, #4]
 80128f8:	f7ff fe94 	bl	8012624 <tcp_output_alloc_header_common>
 80128fc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80128fe:	693b      	ldr	r3, [r7, #16]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d00c      	beq.n	801291e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012904:	7dfb      	ldrb	r3, [r7, #23]
 8012906:	2200      	movs	r2, #0
 8012908:	6939      	ldr	r1, [r7, #16]
 801290a:	68f8      	ldr	r0, [r7, #12]
 801290c:	f7ff ff3a 	bl	8012784 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012912:	683a      	ldr	r2, [r7, #0]
 8012914:	6939      	ldr	r1, [r7, #16]
 8012916:	68f8      	ldr	r0, [r7, #12]
 8012918:	f7ff ff72 	bl	8012800 <tcp_output_control_segment>
 801291c:	e000      	b.n	8012920 <tcp_rst+0x8c>
    return;
 801291e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012920:	371c      	adds	r7, #28
 8012922:	46bd      	mov	sp, r7
 8012924:	bd90      	pop	{r4, r7, pc}
 8012926:	bf00      	nop
 8012928:	0801b4f0 	.word	0x0801b4f0
 801292c:	0801bc74 	.word	0x0801bc74
 8012930:	0801b544 	.word	0x0801b544
 8012934:	0801bc90 	.word	0x0801bc90

08012938 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012938:	b590      	push	{r4, r7, lr}
 801293a:	b087      	sub	sp, #28
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012940:	2300      	movs	r3, #0
 8012942:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012944:	2300      	movs	r3, #0
 8012946:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d106      	bne.n	801295c <tcp_send_empty_ack+0x24>
 801294e:	4b28      	ldr	r3, [pc, #160]	; (80129f0 <tcp_send_empty_ack+0xb8>)
 8012950:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012954:	4927      	ldr	r1, [pc, #156]	; (80129f4 <tcp_send_empty_ack+0xbc>)
 8012956:	4828      	ldr	r0, [pc, #160]	; (80129f8 <tcp_send_empty_ack+0xc0>)
 8012958:	f005 fbea 	bl	8018130 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801295c:	7dfb      	ldrb	r3, [r7, #23]
 801295e:	009b      	lsls	r3, r3, #2
 8012960:	b2db      	uxtb	r3, r3
 8012962:	f003 0304 	and.w	r3, r3, #4
 8012966:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012968:	7d7b      	ldrb	r3, [r7, #21]
 801296a:	b29c      	uxth	r4, r3
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012970:	4618      	mov	r0, r3
 8012972:	f7f8 f9d2 	bl	800ad1a <lwip_htonl>
 8012976:	4603      	mov	r3, r0
 8012978:	2200      	movs	r2, #0
 801297a:	4621      	mov	r1, r4
 801297c:	6878      	ldr	r0, [r7, #4]
 801297e:	f7ff fec3 	bl	8012708 <tcp_output_alloc_header>
 8012982:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012984:	693b      	ldr	r3, [r7, #16]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d109      	bne.n	801299e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	8b5b      	ldrh	r3, [r3, #26]
 801298e:	f043 0303 	orr.w	r3, r3, #3
 8012992:	b29a      	uxth	r2, r3
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012998:	f06f 0301 	mvn.w	r3, #1
 801299c:	e023      	b.n	80129e6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801299e:	7dbb      	ldrb	r3, [r7, #22]
 80129a0:	7dfa      	ldrb	r2, [r7, #23]
 80129a2:	6939      	ldr	r1, [r7, #16]
 80129a4:	6878      	ldr	r0, [r7, #4]
 80129a6:	f7ff feed 	bl	8012784 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80129aa:	687a      	ldr	r2, [r7, #4]
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	3304      	adds	r3, #4
 80129b0:	6939      	ldr	r1, [r7, #16]
 80129b2:	6878      	ldr	r0, [r7, #4]
 80129b4:	f7ff ff24 	bl	8012800 <tcp_output_control_segment>
 80129b8:	4603      	mov	r3, r0
 80129ba:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80129bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d007      	beq.n	80129d4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	8b5b      	ldrh	r3, [r3, #26]
 80129c8:	f043 0303 	orr.w	r3, r3, #3
 80129cc:	b29a      	uxth	r2, r3
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	835a      	strh	r2, [r3, #26]
 80129d2:	e006      	b.n	80129e2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	8b5b      	ldrh	r3, [r3, #26]
 80129d8:	f023 0303 	bic.w	r3, r3, #3
 80129dc:	b29a      	uxth	r2, r3
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80129e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80129e6:	4618      	mov	r0, r3
 80129e8:	371c      	adds	r7, #28
 80129ea:	46bd      	mov	sp, r7
 80129ec:	bd90      	pop	{r4, r7, pc}
 80129ee:	bf00      	nop
 80129f0:	0801b4f0 	.word	0x0801b4f0
 80129f4:	0801bcac 	.word	0x0801bcac
 80129f8:	0801b544 	.word	0x0801b544

080129fc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80129fc:	b590      	push	{r4, r7, lr}
 80129fe:	b087      	sub	sp, #28
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012a04:	2300      	movs	r3, #0
 8012a06:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d106      	bne.n	8012a1c <tcp_keepalive+0x20>
 8012a0e:	4b18      	ldr	r3, [pc, #96]	; (8012a70 <tcp_keepalive+0x74>)
 8012a10:	f640 0224 	movw	r2, #2084	; 0x824
 8012a14:	4917      	ldr	r1, [pc, #92]	; (8012a74 <tcp_keepalive+0x78>)
 8012a16:	4818      	ldr	r0, [pc, #96]	; (8012a78 <tcp_keepalive+0x7c>)
 8012a18:	f005 fb8a 	bl	8018130 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012a1c:	7dfb      	ldrb	r3, [r7, #23]
 8012a1e:	b29c      	uxth	r4, r3
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a24:	3b01      	subs	r3, #1
 8012a26:	4618      	mov	r0, r3
 8012a28:	f7f8 f977 	bl	800ad1a <lwip_htonl>
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	2200      	movs	r2, #0
 8012a30:	4621      	mov	r1, r4
 8012a32:	6878      	ldr	r0, [r7, #4]
 8012a34:	f7ff fe68 	bl	8012708 <tcp_output_alloc_header>
 8012a38:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012a3a:	693b      	ldr	r3, [r7, #16]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d102      	bne.n	8012a46 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012a40:	f04f 33ff 	mov.w	r3, #4294967295
 8012a44:	e010      	b.n	8012a68 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012a46:	7dfb      	ldrb	r3, [r7, #23]
 8012a48:	2200      	movs	r2, #0
 8012a4a:	6939      	ldr	r1, [r7, #16]
 8012a4c:	6878      	ldr	r0, [r7, #4]
 8012a4e:	f7ff fe99 	bl	8012784 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012a52:	687a      	ldr	r2, [r7, #4]
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	3304      	adds	r3, #4
 8012a58:	6939      	ldr	r1, [r7, #16]
 8012a5a:	6878      	ldr	r0, [r7, #4]
 8012a5c:	f7ff fed0 	bl	8012800 <tcp_output_control_segment>
 8012a60:	4603      	mov	r3, r0
 8012a62:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012a68:	4618      	mov	r0, r3
 8012a6a:	371c      	adds	r7, #28
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	bd90      	pop	{r4, r7, pc}
 8012a70:	0801b4f0 	.word	0x0801b4f0
 8012a74:	0801bccc 	.word	0x0801bccc
 8012a78:	0801b544 	.word	0x0801b544

08012a7c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012a7c:	b590      	push	{r4, r7, lr}
 8012a7e:	b08b      	sub	sp, #44	; 0x2c
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012a84:	2300      	movs	r3, #0
 8012a86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d106      	bne.n	8012a9e <tcp_zero_window_probe+0x22>
 8012a90:	4b4c      	ldr	r3, [pc, #304]	; (8012bc4 <tcp_zero_window_probe+0x148>)
 8012a92:	f640 024f 	movw	r2, #2127	; 0x84f
 8012a96:	494c      	ldr	r1, [pc, #304]	; (8012bc8 <tcp_zero_window_probe+0x14c>)
 8012a98:	484c      	ldr	r0, [pc, #304]	; (8012bcc <tcp_zero_window_probe+0x150>)
 8012a9a:	f005 fb49 	bl	8018130 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012aa2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012aa4:	6a3b      	ldr	r3, [r7, #32]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d101      	bne.n	8012aae <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012aaa:	2300      	movs	r3, #0
 8012aac:	e086      	b.n	8012bbc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012ab4:	2bff      	cmp	r3, #255	; 0xff
 8012ab6:	d007      	beq.n	8012ac8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012abe:	3301      	adds	r3, #1
 8012ac0:	b2da      	uxtb	r2, r3
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012ac8:	6a3b      	ldr	r3, [r7, #32]
 8012aca:	68db      	ldr	r3, [r3, #12]
 8012acc:	899b      	ldrh	r3, [r3, #12]
 8012ace:	b29b      	uxth	r3, r3
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	f7f8 f90d 	bl	800acf0 <lwip_htons>
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	b2db      	uxtb	r3, r3
 8012ada:	f003 0301 	and.w	r3, r3, #1
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d005      	beq.n	8012aee <tcp_zero_window_probe+0x72>
 8012ae2:	6a3b      	ldr	r3, [r7, #32]
 8012ae4:	891b      	ldrh	r3, [r3, #8]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d101      	bne.n	8012aee <tcp_zero_window_probe+0x72>
 8012aea:	2301      	movs	r3, #1
 8012aec:	e000      	b.n	8012af0 <tcp_zero_window_probe+0x74>
 8012aee:	2300      	movs	r3, #0
 8012af0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012af2:	7ffb      	ldrb	r3, [r7, #31]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	bf0c      	ite	eq
 8012af8:	2301      	moveq	r3, #1
 8012afa:	2300      	movne	r3, #0
 8012afc:	b2db      	uxtb	r3, r3
 8012afe:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012b00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b04:	b299      	uxth	r1, r3
 8012b06:	6a3b      	ldr	r3, [r7, #32]
 8012b08:	68db      	ldr	r3, [r3, #12]
 8012b0a:	685b      	ldr	r3, [r3, #4]
 8012b0c:	8bba      	ldrh	r2, [r7, #28]
 8012b0e:	6878      	ldr	r0, [r7, #4]
 8012b10:	f7ff fdfa 	bl	8012708 <tcp_output_alloc_header>
 8012b14:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012b16:	69bb      	ldr	r3, [r7, #24]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d102      	bne.n	8012b22 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8012b20:	e04c      	b.n	8012bbc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012b22:	69bb      	ldr	r3, [r7, #24]
 8012b24:	685b      	ldr	r3, [r3, #4]
 8012b26:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012b28:	7ffb      	ldrb	r3, [r7, #31]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d011      	beq.n	8012b52 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012b2e:	697b      	ldr	r3, [r7, #20]
 8012b30:	899b      	ldrh	r3, [r3, #12]
 8012b32:	b29b      	uxth	r3, r3
 8012b34:	b21b      	sxth	r3, r3
 8012b36:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012b3a:	b21c      	sxth	r4, r3
 8012b3c:	2011      	movs	r0, #17
 8012b3e:	f7f8 f8d7 	bl	800acf0 <lwip_htons>
 8012b42:	4603      	mov	r3, r0
 8012b44:	b21b      	sxth	r3, r3
 8012b46:	4323      	orrs	r3, r4
 8012b48:	b21b      	sxth	r3, r3
 8012b4a:	b29a      	uxth	r2, r3
 8012b4c:	697b      	ldr	r3, [r7, #20]
 8012b4e:	819a      	strh	r2, [r3, #12]
 8012b50:	e010      	b.n	8012b74 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012b52:	69bb      	ldr	r3, [r7, #24]
 8012b54:	685b      	ldr	r3, [r3, #4]
 8012b56:	3314      	adds	r3, #20
 8012b58:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012b5a:	6a3b      	ldr	r3, [r7, #32]
 8012b5c:	6858      	ldr	r0, [r3, #4]
 8012b5e:	6a3b      	ldr	r3, [r7, #32]
 8012b60:	685b      	ldr	r3, [r3, #4]
 8012b62:	891a      	ldrh	r2, [r3, #8]
 8012b64:	6a3b      	ldr	r3, [r7, #32]
 8012b66:	891b      	ldrh	r3, [r3, #8]
 8012b68:	1ad3      	subs	r3, r2, r3
 8012b6a:	b29b      	uxth	r3, r3
 8012b6c:	2201      	movs	r2, #1
 8012b6e:	6939      	ldr	r1, [r7, #16]
 8012b70:	f7f9 fef8 	bl	800c964 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012b74:	6a3b      	ldr	r3, [r7, #32]
 8012b76:	68db      	ldr	r3, [r3, #12]
 8012b78:	685b      	ldr	r3, [r3, #4]
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	f7f8 f8cd 	bl	800ad1a <lwip_htonl>
 8012b80:	4603      	mov	r3, r0
 8012b82:	3301      	adds	r3, #1
 8012b84:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	1ad3      	subs	r3, r2, r3
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	da02      	bge.n	8012b98 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	68fa      	ldr	r2, [r7, #12]
 8012b96:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012b98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b9c:	2200      	movs	r2, #0
 8012b9e:	69b9      	ldr	r1, [r7, #24]
 8012ba0:	6878      	ldr	r0, [r7, #4]
 8012ba2:	f7ff fdef 	bl	8012784 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012ba6:	687a      	ldr	r2, [r7, #4]
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	3304      	adds	r3, #4
 8012bac:	69b9      	ldr	r1, [r7, #24]
 8012bae:	6878      	ldr	r0, [r7, #4]
 8012bb0:	f7ff fe26 	bl	8012800 <tcp_output_control_segment>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012bb8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	372c      	adds	r7, #44	; 0x2c
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	bd90      	pop	{r4, r7, pc}
 8012bc4:	0801b4f0 	.word	0x0801b4f0
 8012bc8:	0801bce8 	.word	0x0801bce8
 8012bcc:	0801b544 	.word	0x0801b544

08012bd0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b082      	sub	sp, #8
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012bd8:	f7f9 ffb2 	bl	800cb40 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012bdc:	4b0a      	ldr	r3, [pc, #40]	; (8012c08 <tcpip_tcp_timer+0x38>)
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d103      	bne.n	8012bec <tcpip_tcp_timer+0x1c>
 8012be4:	4b09      	ldr	r3, [pc, #36]	; (8012c0c <tcpip_tcp_timer+0x3c>)
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d005      	beq.n	8012bf8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012bec:	2200      	movs	r2, #0
 8012bee:	4908      	ldr	r1, [pc, #32]	; (8012c10 <tcpip_tcp_timer+0x40>)
 8012bf0:	20fa      	movs	r0, #250	; 0xfa
 8012bf2:	f000 f8f3 	bl	8012ddc <sys_timeout>
 8012bf6:	e003      	b.n	8012c00 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012bf8:	4b06      	ldr	r3, [pc, #24]	; (8012c14 <tcpip_tcp_timer+0x44>)
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	601a      	str	r2, [r3, #0]
  }
}
 8012bfe:	bf00      	nop
 8012c00:	bf00      	nop
 8012c02:	3708      	adds	r7, #8
 8012c04:	46bd      	mov	sp, r7
 8012c06:	bd80      	pop	{r7, pc}
 8012c08:	20010d68 	.word	0x20010d68
 8012c0c:	20010d6c 	.word	0x20010d6c
 8012c10:	08012bd1 	.word	0x08012bd1
 8012c14:	20010db4 	.word	0x20010db4

08012c18 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012c1c:	4b0a      	ldr	r3, [pc, #40]	; (8012c48 <tcp_timer_needed+0x30>)
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d10f      	bne.n	8012c44 <tcp_timer_needed+0x2c>
 8012c24:	4b09      	ldr	r3, [pc, #36]	; (8012c4c <tcp_timer_needed+0x34>)
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d103      	bne.n	8012c34 <tcp_timer_needed+0x1c>
 8012c2c:	4b08      	ldr	r3, [pc, #32]	; (8012c50 <tcp_timer_needed+0x38>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d007      	beq.n	8012c44 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012c34:	4b04      	ldr	r3, [pc, #16]	; (8012c48 <tcp_timer_needed+0x30>)
 8012c36:	2201      	movs	r2, #1
 8012c38:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	4905      	ldr	r1, [pc, #20]	; (8012c54 <tcp_timer_needed+0x3c>)
 8012c3e:	20fa      	movs	r0, #250	; 0xfa
 8012c40:	f000 f8cc 	bl	8012ddc <sys_timeout>
  }
}
 8012c44:	bf00      	nop
 8012c46:	bd80      	pop	{r7, pc}
 8012c48:	20010db4 	.word	0x20010db4
 8012c4c:	20010d68 	.word	0x20010d68
 8012c50:	20010d6c 	.word	0x20010d6c
 8012c54:	08012bd1 	.word	0x08012bd1

08012c58 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b086      	sub	sp, #24
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	60f8      	str	r0, [r7, #12]
 8012c60:	60b9      	str	r1, [r7, #8]
 8012c62:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012c64:	200a      	movs	r0, #10
 8012c66:	f7f8 fd51 	bl	800b70c <memp_malloc>
 8012c6a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012c6c:	693b      	ldr	r3, [r7, #16]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d109      	bne.n	8012c86 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012c72:	693b      	ldr	r3, [r7, #16]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d151      	bne.n	8012d1c <sys_timeout_abs+0xc4>
 8012c78:	4b2a      	ldr	r3, [pc, #168]	; (8012d24 <sys_timeout_abs+0xcc>)
 8012c7a:	22be      	movs	r2, #190	; 0xbe
 8012c7c:	492a      	ldr	r1, [pc, #168]	; (8012d28 <sys_timeout_abs+0xd0>)
 8012c7e:	482b      	ldr	r0, [pc, #172]	; (8012d2c <sys_timeout_abs+0xd4>)
 8012c80:	f005 fa56 	bl	8018130 <iprintf>
    return;
 8012c84:	e04a      	b.n	8012d1c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012c86:	693b      	ldr	r3, [r7, #16]
 8012c88:	2200      	movs	r2, #0
 8012c8a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012c8c:	693b      	ldr	r3, [r7, #16]
 8012c8e:	68ba      	ldr	r2, [r7, #8]
 8012c90:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012c92:	693b      	ldr	r3, [r7, #16]
 8012c94:	687a      	ldr	r2, [r7, #4]
 8012c96:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012c98:	693b      	ldr	r3, [r7, #16]
 8012c9a:	68fa      	ldr	r2, [r7, #12]
 8012c9c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012c9e:	4b24      	ldr	r3, [pc, #144]	; (8012d30 <sys_timeout_abs+0xd8>)
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d103      	bne.n	8012cae <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012ca6:	4a22      	ldr	r2, [pc, #136]	; (8012d30 <sys_timeout_abs+0xd8>)
 8012ca8:	693b      	ldr	r3, [r7, #16]
 8012caa:	6013      	str	r3, [r2, #0]
    return;
 8012cac:	e037      	b.n	8012d1e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012cae:	693b      	ldr	r3, [r7, #16]
 8012cb0:	685a      	ldr	r2, [r3, #4]
 8012cb2:	4b1f      	ldr	r3, [pc, #124]	; (8012d30 <sys_timeout_abs+0xd8>)
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	685b      	ldr	r3, [r3, #4]
 8012cb8:	1ad3      	subs	r3, r2, r3
 8012cba:	0fdb      	lsrs	r3, r3, #31
 8012cbc:	f003 0301 	and.w	r3, r3, #1
 8012cc0:	b2db      	uxtb	r3, r3
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d007      	beq.n	8012cd6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012cc6:	4b1a      	ldr	r3, [pc, #104]	; (8012d30 <sys_timeout_abs+0xd8>)
 8012cc8:	681a      	ldr	r2, [r3, #0]
 8012cca:	693b      	ldr	r3, [r7, #16]
 8012ccc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012cce:	4a18      	ldr	r2, [pc, #96]	; (8012d30 <sys_timeout_abs+0xd8>)
 8012cd0:	693b      	ldr	r3, [r7, #16]
 8012cd2:	6013      	str	r3, [r2, #0]
 8012cd4:	e023      	b.n	8012d1e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012cd6:	4b16      	ldr	r3, [pc, #88]	; (8012d30 <sys_timeout_abs+0xd8>)
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	617b      	str	r3, [r7, #20]
 8012cdc:	e01a      	b.n	8012d14 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012cde:	697b      	ldr	r3, [r7, #20]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d00b      	beq.n	8012cfe <sys_timeout_abs+0xa6>
 8012ce6:	693b      	ldr	r3, [r7, #16]
 8012ce8:	685a      	ldr	r2, [r3, #4]
 8012cea:	697b      	ldr	r3, [r7, #20]
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	685b      	ldr	r3, [r3, #4]
 8012cf0:	1ad3      	subs	r3, r2, r3
 8012cf2:	0fdb      	lsrs	r3, r3, #31
 8012cf4:	f003 0301 	and.w	r3, r3, #1
 8012cf8:	b2db      	uxtb	r3, r3
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d007      	beq.n	8012d0e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012cfe:	697b      	ldr	r3, [r7, #20]
 8012d00:	681a      	ldr	r2, [r3, #0]
 8012d02:	693b      	ldr	r3, [r7, #16]
 8012d04:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012d06:	697b      	ldr	r3, [r7, #20]
 8012d08:	693a      	ldr	r2, [r7, #16]
 8012d0a:	601a      	str	r2, [r3, #0]
        break;
 8012d0c:	e007      	b.n	8012d1e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012d0e:	697b      	ldr	r3, [r7, #20]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	617b      	str	r3, [r7, #20]
 8012d14:	697b      	ldr	r3, [r7, #20]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d1e1      	bne.n	8012cde <sys_timeout_abs+0x86>
 8012d1a:	e000      	b.n	8012d1e <sys_timeout_abs+0xc6>
    return;
 8012d1c:	bf00      	nop
      }
    }
  }
}
 8012d1e:	3718      	adds	r7, #24
 8012d20:	46bd      	mov	sp, r7
 8012d22:	bd80      	pop	{r7, pc}
 8012d24:	0801bd0c 	.word	0x0801bd0c
 8012d28:	0801bd40 	.word	0x0801bd40
 8012d2c:	0801bd80 	.word	0x0801bd80
 8012d30:	20010dac 	.word	0x20010dac

08012d34 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012d34:	b580      	push	{r7, lr}
 8012d36:	b086      	sub	sp, #24
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012d40:	697b      	ldr	r3, [r7, #20]
 8012d42:	685b      	ldr	r3, [r3, #4]
 8012d44:	4798      	blx	r3

  now = sys_now();
 8012d46:	f7f1 fc81 	bl	800464c <sys_now>
 8012d4a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012d4c:	697b      	ldr	r3, [r7, #20]
 8012d4e:	681a      	ldr	r2, [r3, #0]
 8012d50:	4b0f      	ldr	r3, [pc, #60]	; (8012d90 <lwip_cyclic_timer+0x5c>)
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	4413      	add	r3, r2
 8012d56:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012d58:	68fa      	ldr	r2, [r7, #12]
 8012d5a:	693b      	ldr	r3, [r7, #16]
 8012d5c:	1ad3      	subs	r3, r2, r3
 8012d5e:	0fdb      	lsrs	r3, r3, #31
 8012d60:	f003 0301 	and.w	r3, r3, #1
 8012d64:	b2db      	uxtb	r3, r3
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d009      	beq.n	8012d7e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012d6a:	697b      	ldr	r3, [r7, #20]
 8012d6c:	681a      	ldr	r2, [r3, #0]
 8012d6e:	693b      	ldr	r3, [r7, #16]
 8012d70:	4413      	add	r3, r2
 8012d72:	687a      	ldr	r2, [r7, #4]
 8012d74:	4907      	ldr	r1, [pc, #28]	; (8012d94 <lwip_cyclic_timer+0x60>)
 8012d76:	4618      	mov	r0, r3
 8012d78:	f7ff ff6e 	bl	8012c58 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012d7c:	e004      	b.n	8012d88 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012d7e:	687a      	ldr	r2, [r7, #4]
 8012d80:	4904      	ldr	r1, [pc, #16]	; (8012d94 <lwip_cyclic_timer+0x60>)
 8012d82:	68f8      	ldr	r0, [r7, #12]
 8012d84:	f7ff ff68 	bl	8012c58 <sys_timeout_abs>
}
 8012d88:	bf00      	nop
 8012d8a:	3718      	adds	r7, #24
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	bd80      	pop	{r7, pc}
 8012d90:	20010db0 	.word	0x20010db0
 8012d94:	08012d35 	.word	0x08012d35

08012d98 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b082      	sub	sp, #8
 8012d9c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012d9e:	2301      	movs	r3, #1
 8012da0:	607b      	str	r3, [r7, #4]
 8012da2:	e00e      	b.n	8012dc2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012da4:	4a0b      	ldr	r2, [pc, #44]	; (8012dd4 <sys_timeouts_init+0x3c>)
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	00db      	lsls	r3, r3, #3
 8012db0:	4a08      	ldr	r2, [pc, #32]	; (8012dd4 <sys_timeouts_init+0x3c>)
 8012db2:	4413      	add	r3, r2
 8012db4:	461a      	mov	r2, r3
 8012db6:	4908      	ldr	r1, [pc, #32]	; (8012dd8 <sys_timeouts_init+0x40>)
 8012db8:	f000 f810 	bl	8012ddc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	3301      	adds	r3, #1
 8012dc0:	607b      	str	r3, [r7, #4]
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	2b04      	cmp	r3, #4
 8012dc6:	d9ed      	bls.n	8012da4 <sys_timeouts_init+0xc>
  }
}
 8012dc8:	bf00      	nop
 8012dca:	bf00      	nop
 8012dcc:	3708      	adds	r7, #8
 8012dce:	46bd      	mov	sp, r7
 8012dd0:	bd80      	pop	{r7, pc}
 8012dd2:	bf00      	nop
 8012dd4:	08026e14 	.word	0x08026e14
 8012dd8:	08012d35 	.word	0x08012d35

08012ddc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b086      	sub	sp, #24
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	60f8      	str	r0, [r7, #12]
 8012de4:	60b9      	str	r1, [r7, #8]
 8012de6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012dee:	d306      	bcc.n	8012dfe <sys_timeout+0x22>
 8012df0:	4b0a      	ldr	r3, [pc, #40]	; (8012e1c <sys_timeout+0x40>)
 8012df2:	f240 1229 	movw	r2, #297	; 0x129
 8012df6:	490a      	ldr	r1, [pc, #40]	; (8012e20 <sys_timeout+0x44>)
 8012df8:	480a      	ldr	r0, [pc, #40]	; (8012e24 <sys_timeout+0x48>)
 8012dfa:	f005 f999 	bl	8018130 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012dfe:	f7f1 fc25 	bl	800464c <sys_now>
 8012e02:	4602      	mov	r2, r0
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	4413      	add	r3, r2
 8012e08:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012e0a:	687a      	ldr	r2, [r7, #4]
 8012e0c:	68b9      	ldr	r1, [r7, #8]
 8012e0e:	6978      	ldr	r0, [r7, #20]
 8012e10:	f7ff ff22 	bl	8012c58 <sys_timeout_abs>
#endif
}
 8012e14:	bf00      	nop
 8012e16:	3718      	adds	r7, #24
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	bd80      	pop	{r7, pc}
 8012e1c:	0801bd0c 	.word	0x0801bd0c
 8012e20:	0801bda8 	.word	0x0801bda8
 8012e24:	0801bd80 	.word	0x0801bd80

08012e28 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b084      	sub	sp, #16
 8012e2c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012e2e:	f7f1 fc0d 	bl	800464c <sys_now>
 8012e32:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012e34:	4b17      	ldr	r3, [pc, #92]	; (8012e94 <sys_check_timeouts+0x6c>)
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012e3a:	68bb      	ldr	r3, [r7, #8]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d022      	beq.n	8012e86 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	685b      	ldr	r3, [r3, #4]
 8012e44:	68fa      	ldr	r2, [r7, #12]
 8012e46:	1ad3      	subs	r3, r2, r3
 8012e48:	0fdb      	lsrs	r3, r3, #31
 8012e4a:	f003 0301 	and.w	r3, r3, #1
 8012e4e:	b2db      	uxtb	r3, r3
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d11a      	bne.n	8012e8a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012e54:	68bb      	ldr	r3, [r7, #8]
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	4a0e      	ldr	r2, [pc, #56]	; (8012e94 <sys_check_timeouts+0x6c>)
 8012e5a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012e5c:	68bb      	ldr	r3, [r7, #8]
 8012e5e:	689b      	ldr	r3, [r3, #8]
 8012e60:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012e62:	68bb      	ldr	r3, [r7, #8]
 8012e64:	68db      	ldr	r3, [r3, #12]
 8012e66:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012e68:	68bb      	ldr	r3, [r7, #8]
 8012e6a:	685b      	ldr	r3, [r3, #4]
 8012e6c:	4a0a      	ldr	r2, [pc, #40]	; (8012e98 <sys_check_timeouts+0x70>)
 8012e6e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012e70:	68b9      	ldr	r1, [r7, #8]
 8012e72:	200a      	movs	r0, #10
 8012e74:	f7f8 fcc0 	bl	800b7f8 <memp_free>
    if (handler != NULL) {
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d0da      	beq.n	8012e34 <sys_check_timeouts+0xc>
      handler(arg);
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	6838      	ldr	r0, [r7, #0]
 8012e82:	4798      	blx	r3
  do {
 8012e84:	e7d6      	b.n	8012e34 <sys_check_timeouts+0xc>
      return;
 8012e86:	bf00      	nop
 8012e88:	e000      	b.n	8012e8c <sys_check_timeouts+0x64>
      return;
 8012e8a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012e8c:	3710      	adds	r7, #16
 8012e8e:	46bd      	mov	sp, r7
 8012e90:	bd80      	pop	{r7, pc}
 8012e92:	bf00      	nop
 8012e94:	20010dac 	.word	0x20010dac
 8012e98:	20010db0 	.word	0x20010db0

08012e9c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012e9c:	b580      	push	{r7, lr}
 8012e9e:	b082      	sub	sp, #8
 8012ea0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012ea2:	4b16      	ldr	r3, [pc, #88]	; (8012efc <sys_timeouts_sleeptime+0x60>)
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d102      	bne.n	8012eb0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8012eae:	e020      	b.n	8012ef2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012eb0:	f7f1 fbcc 	bl	800464c <sys_now>
 8012eb4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012eb6:	4b11      	ldr	r3, [pc, #68]	; (8012efc <sys_timeouts_sleeptime+0x60>)
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	685a      	ldr	r2, [r3, #4]
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	1ad3      	subs	r3, r2, r3
 8012ec0:	0fdb      	lsrs	r3, r3, #31
 8012ec2:	f003 0301 	and.w	r3, r3, #1
 8012ec6:	b2db      	uxtb	r3, r3
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d001      	beq.n	8012ed0 <sys_timeouts_sleeptime+0x34>
    return 0;
 8012ecc:	2300      	movs	r3, #0
 8012ece:	e010      	b.n	8012ef2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012ed0:	4b0a      	ldr	r3, [pc, #40]	; (8012efc <sys_timeouts_sleeptime+0x60>)
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	685a      	ldr	r2, [r3, #4]
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	1ad3      	subs	r3, r2, r3
 8012eda:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012edc:	683b      	ldr	r3, [r7, #0]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	da06      	bge.n	8012ef0 <sys_timeouts_sleeptime+0x54>
 8012ee2:	4b07      	ldr	r3, [pc, #28]	; (8012f00 <sys_timeouts_sleeptime+0x64>)
 8012ee4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8012ee8:	4906      	ldr	r1, [pc, #24]	; (8012f04 <sys_timeouts_sleeptime+0x68>)
 8012eea:	4807      	ldr	r0, [pc, #28]	; (8012f08 <sys_timeouts_sleeptime+0x6c>)
 8012eec:	f005 f920 	bl	8018130 <iprintf>
    return ret;
 8012ef0:	683b      	ldr	r3, [r7, #0]
  }
}
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	3708      	adds	r7, #8
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	bd80      	pop	{r7, pc}
 8012efa:	bf00      	nop
 8012efc:	20010dac 	.word	0x20010dac
 8012f00:	0801bd0c 	.word	0x0801bd0c
 8012f04:	0801bde0 	.word	0x0801bde0
 8012f08:	0801bd80 	.word	0x0801bd80

08012f0c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012f10:	f005 f820 	bl	8017f54 <rand>
 8012f14:	4603      	mov	r3, r0
 8012f16:	b29b      	uxth	r3, r3
 8012f18:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012f1c:	b29b      	uxth	r3, r3
 8012f1e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012f22:	b29a      	uxth	r2, r3
 8012f24:	4b01      	ldr	r3, [pc, #4]	; (8012f2c <udp_init+0x20>)
 8012f26:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012f28:	bf00      	nop
 8012f2a:	bd80      	pop	{r7, pc}
 8012f2c:	2000002c 	.word	0x2000002c

08012f30 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012f30:	b480      	push	{r7}
 8012f32:	b083      	sub	sp, #12
 8012f34:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012f36:	2300      	movs	r3, #0
 8012f38:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012f3a:	4b17      	ldr	r3, [pc, #92]	; (8012f98 <udp_new_port+0x68>)
 8012f3c:	881b      	ldrh	r3, [r3, #0]
 8012f3e:	1c5a      	adds	r2, r3, #1
 8012f40:	b291      	uxth	r1, r2
 8012f42:	4a15      	ldr	r2, [pc, #84]	; (8012f98 <udp_new_port+0x68>)
 8012f44:	8011      	strh	r1, [r2, #0]
 8012f46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012f4a:	4293      	cmp	r3, r2
 8012f4c:	d103      	bne.n	8012f56 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012f4e:	4b12      	ldr	r3, [pc, #72]	; (8012f98 <udp_new_port+0x68>)
 8012f50:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012f54:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f56:	4b11      	ldr	r3, [pc, #68]	; (8012f9c <udp_new_port+0x6c>)
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	603b      	str	r3, [r7, #0]
 8012f5c:	e011      	b.n	8012f82 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012f5e:	683b      	ldr	r3, [r7, #0]
 8012f60:	8a5a      	ldrh	r2, [r3, #18]
 8012f62:	4b0d      	ldr	r3, [pc, #52]	; (8012f98 <udp_new_port+0x68>)
 8012f64:	881b      	ldrh	r3, [r3, #0]
 8012f66:	429a      	cmp	r2, r3
 8012f68:	d108      	bne.n	8012f7c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012f6a:	88fb      	ldrh	r3, [r7, #6]
 8012f6c:	3301      	adds	r3, #1
 8012f6e:	80fb      	strh	r3, [r7, #6]
 8012f70:	88fb      	ldrh	r3, [r7, #6]
 8012f72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012f76:	d3e0      	bcc.n	8012f3a <udp_new_port+0xa>
        return 0;
 8012f78:	2300      	movs	r3, #0
 8012f7a:	e007      	b.n	8012f8c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f7c:	683b      	ldr	r3, [r7, #0]
 8012f7e:	68db      	ldr	r3, [r3, #12]
 8012f80:	603b      	str	r3, [r7, #0]
 8012f82:	683b      	ldr	r3, [r7, #0]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d1ea      	bne.n	8012f5e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012f88:	4b03      	ldr	r3, [pc, #12]	; (8012f98 <udp_new_port+0x68>)
 8012f8a:	881b      	ldrh	r3, [r3, #0]
}
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	370c      	adds	r7, #12
 8012f90:	46bd      	mov	sp, r7
 8012f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f96:	4770      	bx	lr
 8012f98:	2000002c 	.word	0x2000002c
 8012f9c:	20010db8 	.word	0x20010db8

08012fa0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b084      	sub	sp, #16
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	60f8      	str	r0, [r7, #12]
 8012fa8:	60b9      	str	r1, [r7, #8]
 8012faa:	4613      	mov	r3, r2
 8012fac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d105      	bne.n	8012fc0 <udp_input_local_match+0x20>
 8012fb4:	4b27      	ldr	r3, [pc, #156]	; (8013054 <udp_input_local_match+0xb4>)
 8012fb6:	2287      	movs	r2, #135	; 0x87
 8012fb8:	4927      	ldr	r1, [pc, #156]	; (8013058 <udp_input_local_match+0xb8>)
 8012fba:	4828      	ldr	r0, [pc, #160]	; (801305c <udp_input_local_match+0xbc>)
 8012fbc:	f005 f8b8 	bl	8018130 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012fc0:	68bb      	ldr	r3, [r7, #8]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d105      	bne.n	8012fd2 <udp_input_local_match+0x32>
 8012fc6:	4b23      	ldr	r3, [pc, #140]	; (8013054 <udp_input_local_match+0xb4>)
 8012fc8:	2288      	movs	r2, #136	; 0x88
 8012fca:	4925      	ldr	r1, [pc, #148]	; (8013060 <udp_input_local_match+0xc0>)
 8012fcc:	4823      	ldr	r0, [pc, #140]	; (801305c <udp_input_local_match+0xbc>)
 8012fce:	f005 f8af 	bl	8018130 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	7a1b      	ldrb	r3, [r3, #8]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d00b      	beq.n	8012ff2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	7a1a      	ldrb	r2, [r3, #8]
 8012fde:	4b21      	ldr	r3, [pc, #132]	; (8013064 <udp_input_local_match+0xc4>)
 8012fe0:	685b      	ldr	r3, [r3, #4]
 8012fe2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012fe6:	3301      	adds	r3, #1
 8012fe8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012fea:	429a      	cmp	r2, r3
 8012fec:	d001      	beq.n	8012ff2 <udp_input_local_match+0x52>
    return 0;
 8012fee:	2300      	movs	r3, #0
 8012ff0:	e02b      	b.n	801304a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012ff2:	79fb      	ldrb	r3, [r7, #7]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d018      	beq.n	801302a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d013      	beq.n	8013026 <udp_input_local_match+0x86>
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d00f      	beq.n	8013026 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013006:	4b17      	ldr	r3, [pc, #92]	; (8013064 <udp_input_local_match+0xc4>)
 8013008:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801300a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801300e:	d00a      	beq.n	8013026 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	681a      	ldr	r2, [r3, #0]
 8013014:	4b13      	ldr	r3, [pc, #76]	; (8013064 <udp_input_local_match+0xc4>)
 8013016:	695b      	ldr	r3, [r3, #20]
 8013018:	405a      	eors	r2, r3
 801301a:	68bb      	ldr	r3, [r7, #8]
 801301c:	3308      	adds	r3, #8
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013022:	2b00      	cmp	r3, #0
 8013024:	d110      	bne.n	8013048 <udp_input_local_match+0xa8>
          return 1;
 8013026:	2301      	movs	r3, #1
 8013028:	e00f      	b.n	801304a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d009      	beq.n	8013044 <udp_input_local_match+0xa4>
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	2b00      	cmp	r3, #0
 8013036:	d005      	beq.n	8013044 <udp_input_local_match+0xa4>
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	681a      	ldr	r2, [r3, #0]
 801303c:	4b09      	ldr	r3, [pc, #36]	; (8013064 <udp_input_local_match+0xc4>)
 801303e:	695b      	ldr	r3, [r3, #20]
 8013040:	429a      	cmp	r2, r3
 8013042:	d101      	bne.n	8013048 <udp_input_local_match+0xa8>
        return 1;
 8013044:	2301      	movs	r3, #1
 8013046:	e000      	b.n	801304a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013048:	2300      	movs	r3, #0
}
 801304a:	4618      	mov	r0, r3
 801304c:	3710      	adds	r7, #16
 801304e:	46bd      	mov	sp, r7
 8013050:	bd80      	pop	{r7, pc}
 8013052:	bf00      	nop
 8013054:	0801bdf4 	.word	0x0801bdf4
 8013058:	0801be24 	.word	0x0801be24
 801305c:	0801be48 	.word	0x0801be48
 8013060:	0801be70 	.word	0x0801be70
 8013064:	2000d5e8 	.word	0x2000d5e8

08013068 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013068:	b590      	push	{r4, r7, lr}
 801306a:	b08d      	sub	sp, #52	; 0x34
 801306c:	af02      	add	r7, sp, #8
 801306e:	6078      	str	r0, [r7, #4]
 8013070:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013072:	2300      	movs	r3, #0
 8013074:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d105      	bne.n	8013088 <udp_input+0x20>
 801307c:	4b7c      	ldr	r3, [pc, #496]	; (8013270 <udp_input+0x208>)
 801307e:	22cf      	movs	r2, #207	; 0xcf
 8013080:	497c      	ldr	r1, [pc, #496]	; (8013274 <udp_input+0x20c>)
 8013082:	487d      	ldr	r0, [pc, #500]	; (8013278 <udp_input+0x210>)
 8013084:	f005 f854 	bl	8018130 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013088:	683b      	ldr	r3, [r7, #0]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d105      	bne.n	801309a <udp_input+0x32>
 801308e:	4b78      	ldr	r3, [pc, #480]	; (8013270 <udp_input+0x208>)
 8013090:	22d0      	movs	r2, #208	; 0xd0
 8013092:	497a      	ldr	r1, [pc, #488]	; (801327c <udp_input+0x214>)
 8013094:	4878      	ldr	r0, [pc, #480]	; (8013278 <udp_input+0x210>)
 8013096:	f005 f84b 	bl	8018130 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	895b      	ldrh	r3, [r3, #10]
 801309e:	2b07      	cmp	r3, #7
 80130a0:	d803      	bhi.n	80130aa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80130a2:	6878      	ldr	r0, [r7, #4]
 80130a4:	f7f9 fa58 	bl	800c558 <pbuf_free>
    goto end;
 80130a8:	e0de      	b.n	8013268 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	685b      	ldr	r3, [r3, #4]
 80130ae:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80130b0:	4b73      	ldr	r3, [pc, #460]	; (8013280 <udp_input+0x218>)
 80130b2:	695b      	ldr	r3, [r3, #20]
 80130b4:	4a72      	ldr	r2, [pc, #456]	; (8013280 <udp_input+0x218>)
 80130b6:	6812      	ldr	r2, [r2, #0]
 80130b8:	4611      	mov	r1, r2
 80130ba:	4618      	mov	r0, r3
 80130bc:	f003 fe12 	bl	8016ce4 <ip4_addr_isbroadcast_u32>
 80130c0:	4603      	mov	r3, r0
 80130c2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80130c4:	697b      	ldr	r3, [r7, #20]
 80130c6:	881b      	ldrh	r3, [r3, #0]
 80130c8:	b29b      	uxth	r3, r3
 80130ca:	4618      	mov	r0, r3
 80130cc:	f7f7 fe10 	bl	800acf0 <lwip_htons>
 80130d0:	4603      	mov	r3, r0
 80130d2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80130d4:	697b      	ldr	r3, [r7, #20]
 80130d6:	885b      	ldrh	r3, [r3, #2]
 80130d8:	b29b      	uxth	r3, r3
 80130da:	4618      	mov	r0, r3
 80130dc:	f7f7 fe08 	bl	800acf0 <lwip_htons>
 80130e0:	4603      	mov	r3, r0
 80130e2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80130e4:	2300      	movs	r3, #0
 80130e6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80130e8:	2300      	movs	r3, #0
 80130ea:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80130ec:	2300      	movs	r3, #0
 80130ee:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80130f0:	4b64      	ldr	r3, [pc, #400]	; (8013284 <udp_input+0x21c>)
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	627b      	str	r3, [r7, #36]	; 0x24
 80130f6:	e054      	b.n	80131a2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80130f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130fa:	8a5b      	ldrh	r3, [r3, #18]
 80130fc:	89fa      	ldrh	r2, [r7, #14]
 80130fe:	429a      	cmp	r2, r3
 8013100:	d14a      	bne.n	8013198 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013102:	7cfb      	ldrb	r3, [r7, #19]
 8013104:	461a      	mov	r2, r3
 8013106:	6839      	ldr	r1, [r7, #0]
 8013108:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801310a:	f7ff ff49 	bl	8012fa0 <udp_input_local_match>
 801310e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013110:	2b00      	cmp	r3, #0
 8013112:	d041      	beq.n	8013198 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013116:	7c1b      	ldrb	r3, [r3, #16]
 8013118:	f003 0304 	and.w	r3, r3, #4
 801311c:	2b00      	cmp	r3, #0
 801311e:	d11d      	bne.n	801315c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013120:	69fb      	ldr	r3, [r7, #28]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d102      	bne.n	801312c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013128:	61fb      	str	r3, [r7, #28]
 801312a:	e017      	b.n	801315c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801312c:	7cfb      	ldrb	r3, [r7, #19]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d014      	beq.n	801315c <udp_input+0xf4>
 8013132:	4b53      	ldr	r3, [pc, #332]	; (8013280 <udp_input+0x218>)
 8013134:	695b      	ldr	r3, [r3, #20]
 8013136:	f1b3 3fff 	cmp.w	r3, #4294967295
 801313a:	d10f      	bne.n	801315c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801313c:	69fb      	ldr	r3, [r7, #28]
 801313e:	681a      	ldr	r2, [r3, #0]
 8013140:	683b      	ldr	r3, [r7, #0]
 8013142:	3304      	adds	r3, #4
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	429a      	cmp	r2, r3
 8013148:	d008      	beq.n	801315c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801314c:	681a      	ldr	r2, [r3, #0]
 801314e:	683b      	ldr	r3, [r7, #0]
 8013150:	3304      	adds	r3, #4
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	429a      	cmp	r2, r3
 8013156:	d101      	bne.n	801315c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801315a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801315e:	8a9b      	ldrh	r3, [r3, #20]
 8013160:	8a3a      	ldrh	r2, [r7, #16]
 8013162:	429a      	cmp	r2, r3
 8013164:	d118      	bne.n	8013198 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013168:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801316a:	2b00      	cmp	r3, #0
 801316c:	d005      	beq.n	801317a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013170:	685a      	ldr	r2, [r3, #4]
 8013172:	4b43      	ldr	r3, [pc, #268]	; (8013280 <udp_input+0x218>)
 8013174:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013176:	429a      	cmp	r2, r3
 8013178:	d10e      	bne.n	8013198 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801317a:	6a3b      	ldr	r3, [r7, #32]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d014      	beq.n	80131aa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013182:	68da      	ldr	r2, [r3, #12]
 8013184:	6a3b      	ldr	r3, [r7, #32]
 8013186:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013188:	4b3e      	ldr	r3, [pc, #248]	; (8013284 <udp_input+0x21c>)
 801318a:	681a      	ldr	r2, [r3, #0]
 801318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801318e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013190:	4a3c      	ldr	r2, [pc, #240]	; (8013284 <udp_input+0x21c>)
 8013192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013194:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013196:	e008      	b.n	80131aa <udp_input+0x142>
      }
    }

    prev = pcb;
 8013198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801319a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801319e:	68db      	ldr	r3, [r3, #12]
 80131a0:	627b      	str	r3, [r7, #36]	; 0x24
 80131a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d1a7      	bne.n	80130f8 <udp_input+0x90>
 80131a8:	e000      	b.n	80131ac <udp_input+0x144>
        break;
 80131aa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80131ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d101      	bne.n	80131b6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80131b2:	69fb      	ldr	r3, [r7, #28]
 80131b4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80131b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d002      	beq.n	80131c2 <udp_input+0x15a>
    for_us = 1;
 80131bc:	2301      	movs	r3, #1
 80131be:	76fb      	strb	r3, [r7, #27]
 80131c0:	e00a      	b.n	80131d8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80131c2:	683b      	ldr	r3, [r7, #0]
 80131c4:	3304      	adds	r3, #4
 80131c6:	681a      	ldr	r2, [r3, #0]
 80131c8:	4b2d      	ldr	r3, [pc, #180]	; (8013280 <udp_input+0x218>)
 80131ca:	695b      	ldr	r3, [r3, #20]
 80131cc:	429a      	cmp	r2, r3
 80131ce:	bf0c      	ite	eq
 80131d0:	2301      	moveq	r3, #1
 80131d2:	2300      	movne	r3, #0
 80131d4:	b2db      	uxtb	r3, r3
 80131d6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80131d8:	7efb      	ldrb	r3, [r7, #27]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d041      	beq.n	8013262 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80131de:	2108      	movs	r1, #8
 80131e0:	6878      	ldr	r0, [r7, #4]
 80131e2:	f7f9 f933 	bl	800c44c <pbuf_remove_header>
 80131e6:	4603      	mov	r3, r0
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d00a      	beq.n	8013202 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80131ec:	4b20      	ldr	r3, [pc, #128]	; (8013270 <udp_input+0x208>)
 80131ee:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80131f2:	4925      	ldr	r1, [pc, #148]	; (8013288 <udp_input+0x220>)
 80131f4:	4820      	ldr	r0, [pc, #128]	; (8013278 <udp_input+0x210>)
 80131f6:	f004 ff9b 	bl	8018130 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80131fa:	6878      	ldr	r0, [r7, #4]
 80131fc:	f7f9 f9ac 	bl	800c558 <pbuf_free>
      goto end;
 8013200:	e032      	b.n	8013268 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013204:	2b00      	cmp	r3, #0
 8013206:	d012      	beq.n	801322e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801320a:	699b      	ldr	r3, [r3, #24]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d00a      	beq.n	8013226 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013212:	699c      	ldr	r4, [r3, #24]
 8013214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013216:	69d8      	ldr	r0, [r3, #28]
 8013218:	8a3b      	ldrh	r3, [r7, #16]
 801321a:	9300      	str	r3, [sp, #0]
 801321c:	4b1b      	ldr	r3, [pc, #108]	; (801328c <udp_input+0x224>)
 801321e:	687a      	ldr	r2, [r7, #4]
 8013220:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013222:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013224:	e021      	b.n	801326a <udp_input+0x202>
        pbuf_free(p);
 8013226:	6878      	ldr	r0, [r7, #4]
 8013228:	f7f9 f996 	bl	800c558 <pbuf_free>
        goto end;
 801322c:	e01c      	b.n	8013268 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801322e:	7cfb      	ldrb	r3, [r7, #19]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d112      	bne.n	801325a <udp_input+0x1f2>
 8013234:	4b12      	ldr	r3, [pc, #72]	; (8013280 <udp_input+0x218>)
 8013236:	695b      	ldr	r3, [r3, #20]
 8013238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801323c:	2be0      	cmp	r3, #224	; 0xe0
 801323e:	d00c      	beq.n	801325a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013240:	4b0f      	ldr	r3, [pc, #60]	; (8013280 <udp_input+0x218>)
 8013242:	899b      	ldrh	r3, [r3, #12]
 8013244:	3308      	adds	r3, #8
 8013246:	b29b      	uxth	r3, r3
 8013248:	b21b      	sxth	r3, r3
 801324a:	4619      	mov	r1, r3
 801324c:	6878      	ldr	r0, [r7, #4]
 801324e:	f7f9 f970 	bl	800c532 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013252:	2103      	movs	r1, #3
 8013254:	6878      	ldr	r0, [r7, #4]
 8013256:	f003 fa07 	bl	8016668 <icmp_dest_unreach>
      pbuf_free(p);
 801325a:	6878      	ldr	r0, [r7, #4]
 801325c:	f7f9 f97c 	bl	800c558 <pbuf_free>
  return;
 8013260:	e003      	b.n	801326a <udp_input+0x202>
    pbuf_free(p);
 8013262:	6878      	ldr	r0, [r7, #4]
 8013264:	f7f9 f978 	bl	800c558 <pbuf_free>
  return;
 8013268:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801326a:	372c      	adds	r7, #44	; 0x2c
 801326c:	46bd      	mov	sp, r7
 801326e:	bd90      	pop	{r4, r7, pc}
 8013270:	0801bdf4 	.word	0x0801bdf4
 8013274:	0801be98 	.word	0x0801be98
 8013278:	0801be48 	.word	0x0801be48
 801327c:	0801beb0 	.word	0x0801beb0
 8013280:	2000d5e8 	.word	0x2000d5e8
 8013284:	20010db8 	.word	0x20010db8
 8013288:	0801becc 	.word	0x0801becc
 801328c:	2000d5f8 	.word	0x2000d5f8

08013290 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b088      	sub	sp, #32
 8013294:	af02      	add	r7, sp, #8
 8013296:	60f8      	str	r0, [r7, #12]
 8013298:	60b9      	str	r1, [r7, #8]
 801329a:	607a      	str	r2, [r7, #4]
 801329c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d109      	bne.n	80132b8 <udp_sendto_if+0x28>
 80132a4:	4b2e      	ldr	r3, [pc, #184]	; (8013360 <udp_sendto_if+0xd0>)
 80132a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80132aa:	492e      	ldr	r1, [pc, #184]	; (8013364 <udp_sendto_if+0xd4>)
 80132ac:	482e      	ldr	r0, [pc, #184]	; (8013368 <udp_sendto_if+0xd8>)
 80132ae:	f004 ff3f 	bl	8018130 <iprintf>
 80132b2:	f06f 030f 	mvn.w	r3, #15
 80132b6:	e04f      	b.n	8013358 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80132b8:	68bb      	ldr	r3, [r7, #8]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d109      	bne.n	80132d2 <udp_sendto_if+0x42>
 80132be:	4b28      	ldr	r3, [pc, #160]	; (8013360 <udp_sendto_if+0xd0>)
 80132c0:	f240 2281 	movw	r2, #641	; 0x281
 80132c4:	4929      	ldr	r1, [pc, #164]	; (801336c <udp_sendto_if+0xdc>)
 80132c6:	4828      	ldr	r0, [pc, #160]	; (8013368 <udp_sendto_if+0xd8>)
 80132c8:	f004 ff32 	bl	8018130 <iprintf>
 80132cc:	f06f 030f 	mvn.w	r3, #15
 80132d0:	e042      	b.n	8013358 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d109      	bne.n	80132ec <udp_sendto_if+0x5c>
 80132d8:	4b21      	ldr	r3, [pc, #132]	; (8013360 <udp_sendto_if+0xd0>)
 80132da:	f240 2282 	movw	r2, #642	; 0x282
 80132de:	4924      	ldr	r1, [pc, #144]	; (8013370 <udp_sendto_if+0xe0>)
 80132e0:	4821      	ldr	r0, [pc, #132]	; (8013368 <udp_sendto_if+0xd8>)
 80132e2:	f004 ff25 	bl	8018130 <iprintf>
 80132e6:	f06f 030f 	mvn.w	r3, #15
 80132ea:	e035      	b.n	8013358 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80132ec:	6a3b      	ldr	r3, [r7, #32]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d109      	bne.n	8013306 <udp_sendto_if+0x76>
 80132f2:	4b1b      	ldr	r3, [pc, #108]	; (8013360 <udp_sendto_if+0xd0>)
 80132f4:	f240 2283 	movw	r2, #643	; 0x283
 80132f8:	491e      	ldr	r1, [pc, #120]	; (8013374 <udp_sendto_if+0xe4>)
 80132fa:	481b      	ldr	r0, [pc, #108]	; (8013368 <udp_sendto_if+0xd8>)
 80132fc:	f004 ff18 	bl	8018130 <iprintf>
 8013300:	f06f 030f 	mvn.w	r3, #15
 8013304:	e028      	b.n	8013358 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d009      	beq.n	8013320 <udp_sendto_if+0x90>
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d005      	beq.n	8013320 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801331c:	2be0      	cmp	r3, #224	; 0xe0
 801331e:	d103      	bne.n	8013328 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013320:	6a3b      	ldr	r3, [r7, #32]
 8013322:	3304      	adds	r3, #4
 8013324:	617b      	str	r3, [r7, #20]
 8013326:	e00b      	b.n	8013340 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	681a      	ldr	r2, [r3, #0]
 801332c:	6a3b      	ldr	r3, [r7, #32]
 801332e:	3304      	adds	r3, #4
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	429a      	cmp	r2, r3
 8013334:	d002      	beq.n	801333c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013336:	f06f 0303 	mvn.w	r3, #3
 801333a:	e00d      	b.n	8013358 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013340:	887a      	ldrh	r2, [r7, #2]
 8013342:	697b      	ldr	r3, [r7, #20]
 8013344:	9301      	str	r3, [sp, #4]
 8013346:	6a3b      	ldr	r3, [r7, #32]
 8013348:	9300      	str	r3, [sp, #0]
 801334a:	4613      	mov	r3, r2
 801334c:	687a      	ldr	r2, [r7, #4]
 801334e:	68b9      	ldr	r1, [r7, #8]
 8013350:	68f8      	ldr	r0, [r7, #12]
 8013352:	f000 f811 	bl	8013378 <udp_sendto_if_src>
 8013356:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013358:	4618      	mov	r0, r3
 801335a:	3718      	adds	r7, #24
 801335c:	46bd      	mov	sp, r7
 801335e:	bd80      	pop	{r7, pc}
 8013360:	0801bdf4 	.word	0x0801bdf4
 8013364:	0801bf68 	.word	0x0801bf68
 8013368:	0801be48 	.word	0x0801be48
 801336c:	0801bf84 	.word	0x0801bf84
 8013370:	0801bfa0 	.word	0x0801bfa0
 8013374:	0801bfc0 	.word	0x0801bfc0

08013378 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013378:	b580      	push	{r7, lr}
 801337a:	b08c      	sub	sp, #48	; 0x30
 801337c:	af04      	add	r7, sp, #16
 801337e:	60f8      	str	r0, [r7, #12]
 8013380:	60b9      	str	r1, [r7, #8]
 8013382:	607a      	str	r2, [r7, #4]
 8013384:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d109      	bne.n	80133a0 <udp_sendto_if_src+0x28>
 801338c:	4b65      	ldr	r3, [pc, #404]	; (8013524 <udp_sendto_if_src+0x1ac>)
 801338e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013392:	4965      	ldr	r1, [pc, #404]	; (8013528 <udp_sendto_if_src+0x1b0>)
 8013394:	4865      	ldr	r0, [pc, #404]	; (801352c <udp_sendto_if_src+0x1b4>)
 8013396:	f004 fecb 	bl	8018130 <iprintf>
 801339a:	f06f 030f 	mvn.w	r3, #15
 801339e:	e0bc      	b.n	801351a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80133a0:	68bb      	ldr	r3, [r7, #8]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d109      	bne.n	80133ba <udp_sendto_if_src+0x42>
 80133a6:	4b5f      	ldr	r3, [pc, #380]	; (8013524 <udp_sendto_if_src+0x1ac>)
 80133a8:	f240 22d2 	movw	r2, #722	; 0x2d2
 80133ac:	4960      	ldr	r1, [pc, #384]	; (8013530 <udp_sendto_if_src+0x1b8>)
 80133ae:	485f      	ldr	r0, [pc, #380]	; (801352c <udp_sendto_if_src+0x1b4>)
 80133b0:	f004 febe 	bl	8018130 <iprintf>
 80133b4:	f06f 030f 	mvn.w	r3, #15
 80133b8:	e0af      	b.n	801351a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d109      	bne.n	80133d4 <udp_sendto_if_src+0x5c>
 80133c0:	4b58      	ldr	r3, [pc, #352]	; (8013524 <udp_sendto_if_src+0x1ac>)
 80133c2:	f240 22d3 	movw	r2, #723	; 0x2d3
 80133c6:	495b      	ldr	r1, [pc, #364]	; (8013534 <udp_sendto_if_src+0x1bc>)
 80133c8:	4858      	ldr	r0, [pc, #352]	; (801352c <udp_sendto_if_src+0x1b4>)
 80133ca:	f004 feb1 	bl	8018130 <iprintf>
 80133ce:	f06f 030f 	mvn.w	r3, #15
 80133d2:	e0a2      	b.n	801351a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80133d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d109      	bne.n	80133ee <udp_sendto_if_src+0x76>
 80133da:	4b52      	ldr	r3, [pc, #328]	; (8013524 <udp_sendto_if_src+0x1ac>)
 80133dc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80133e0:	4955      	ldr	r1, [pc, #340]	; (8013538 <udp_sendto_if_src+0x1c0>)
 80133e2:	4852      	ldr	r0, [pc, #328]	; (801352c <udp_sendto_if_src+0x1b4>)
 80133e4:	f004 fea4 	bl	8018130 <iprintf>
 80133e8:	f06f 030f 	mvn.w	r3, #15
 80133ec:	e095      	b.n	801351a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80133ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d109      	bne.n	8013408 <udp_sendto_if_src+0x90>
 80133f4:	4b4b      	ldr	r3, [pc, #300]	; (8013524 <udp_sendto_if_src+0x1ac>)
 80133f6:	f240 22d5 	movw	r2, #725	; 0x2d5
 80133fa:	4950      	ldr	r1, [pc, #320]	; (801353c <udp_sendto_if_src+0x1c4>)
 80133fc:	484b      	ldr	r0, [pc, #300]	; (801352c <udp_sendto_if_src+0x1b4>)
 80133fe:	f004 fe97 	bl	8018130 <iprintf>
 8013402:	f06f 030f 	mvn.w	r3, #15
 8013406:	e088      	b.n	801351a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	8a5b      	ldrh	r3, [r3, #18]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d10f      	bne.n	8013430 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013410:	68f9      	ldr	r1, [r7, #12]
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	8a5b      	ldrh	r3, [r3, #18]
 8013416:	461a      	mov	r2, r3
 8013418:	68f8      	ldr	r0, [r7, #12]
 801341a:	f000 f893 	bl	8013544 <udp_bind>
 801341e:	4603      	mov	r3, r0
 8013420:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013422:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d002      	beq.n	8013430 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801342a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801342e:	e074      	b.n	801351a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013430:	68bb      	ldr	r3, [r7, #8]
 8013432:	891b      	ldrh	r3, [r3, #8]
 8013434:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013438:	4293      	cmp	r3, r2
 801343a:	d902      	bls.n	8013442 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801343c:	f04f 33ff 	mov.w	r3, #4294967295
 8013440:	e06b      	b.n	801351a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013442:	2108      	movs	r1, #8
 8013444:	68b8      	ldr	r0, [r7, #8]
 8013446:	f7f8 fff1 	bl	800c42c <pbuf_add_header>
 801344a:	4603      	mov	r3, r0
 801344c:	2b00      	cmp	r3, #0
 801344e:	d015      	beq.n	801347c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013450:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013454:	2108      	movs	r1, #8
 8013456:	2022      	movs	r0, #34	; 0x22
 8013458:	f7f8 fd9a 	bl	800bf90 <pbuf_alloc>
 801345c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801345e:	69fb      	ldr	r3, [r7, #28]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d102      	bne.n	801346a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013464:	f04f 33ff 	mov.w	r3, #4294967295
 8013468:	e057      	b.n	801351a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801346a:	68bb      	ldr	r3, [r7, #8]
 801346c:	891b      	ldrh	r3, [r3, #8]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d006      	beq.n	8013480 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013472:	68b9      	ldr	r1, [r7, #8]
 8013474:	69f8      	ldr	r0, [r7, #28]
 8013476:	f7f9 f993 	bl	800c7a0 <pbuf_chain>
 801347a:	e001      	b.n	8013480 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801347c:	68bb      	ldr	r3, [r7, #8]
 801347e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013480:	69fb      	ldr	r3, [r7, #28]
 8013482:	895b      	ldrh	r3, [r3, #10]
 8013484:	2b07      	cmp	r3, #7
 8013486:	d806      	bhi.n	8013496 <udp_sendto_if_src+0x11e>
 8013488:	4b26      	ldr	r3, [pc, #152]	; (8013524 <udp_sendto_if_src+0x1ac>)
 801348a:	f240 320d 	movw	r2, #781	; 0x30d
 801348e:	492c      	ldr	r1, [pc, #176]	; (8013540 <udp_sendto_if_src+0x1c8>)
 8013490:	4826      	ldr	r0, [pc, #152]	; (801352c <udp_sendto_if_src+0x1b4>)
 8013492:	f004 fe4d 	bl	8018130 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013496:	69fb      	ldr	r3, [r7, #28]
 8013498:	685b      	ldr	r3, [r3, #4]
 801349a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	8a5b      	ldrh	r3, [r3, #18]
 80134a0:	4618      	mov	r0, r3
 80134a2:	f7f7 fc25 	bl	800acf0 <lwip_htons>
 80134a6:	4603      	mov	r3, r0
 80134a8:	461a      	mov	r2, r3
 80134aa:	697b      	ldr	r3, [r7, #20]
 80134ac:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80134ae:	887b      	ldrh	r3, [r7, #2]
 80134b0:	4618      	mov	r0, r3
 80134b2:	f7f7 fc1d 	bl	800acf0 <lwip_htons>
 80134b6:	4603      	mov	r3, r0
 80134b8:	461a      	mov	r2, r3
 80134ba:	697b      	ldr	r3, [r7, #20]
 80134bc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80134be:	697b      	ldr	r3, [r7, #20]
 80134c0:	2200      	movs	r2, #0
 80134c2:	719a      	strb	r2, [r3, #6]
 80134c4:	2200      	movs	r2, #0
 80134c6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80134c8:	69fb      	ldr	r3, [r7, #28]
 80134ca:	891b      	ldrh	r3, [r3, #8]
 80134cc:	4618      	mov	r0, r3
 80134ce:	f7f7 fc0f 	bl	800acf0 <lwip_htons>
 80134d2:	4603      	mov	r3, r0
 80134d4:	461a      	mov	r2, r3
 80134d6:	697b      	ldr	r3, [r7, #20]
 80134d8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80134da:	2311      	movs	r3, #17
 80134dc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	7adb      	ldrb	r3, [r3, #11]
 80134e2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	7a9b      	ldrb	r3, [r3, #10]
 80134e8:	7cb9      	ldrb	r1, [r7, #18]
 80134ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80134ec:	9202      	str	r2, [sp, #8]
 80134ee:	7cfa      	ldrb	r2, [r7, #19]
 80134f0:	9201      	str	r2, [sp, #4]
 80134f2:	9300      	str	r3, [sp, #0]
 80134f4:	460b      	mov	r3, r1
 80134f6:	687a      	ldr	r2, [r7, #4]
 80134f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80134fa:	69f8      	ldr	r0, [r7, #28]
 80134fc:	f003 fb44 	bl	8016b88 <ip4_output_if_src>
 8013500:	4603      	mov	r3, r0
 8013502:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013504:	69fa      	ldr	r2, [r7, #28]
 8013506:	68bb      	ldr	r3, [r7, #8]
 8013508:	429a      	cmp	r2, r3
 801350a:	d004      	beq.n	8013516 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801350c:	69f8      	ldr	r0, [r7, #28]
 801350e:	f7f9 f823 	bl	800c558 <pbuf_free>
    q = NULL;
 8013512:	2300      	movs	r3, #0
 8013514:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013516:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801351a:	4618      	mov	r0, r3
 801351c:	3720      	adds	r7, #32
 801351e:	46bd      	mov	sp, r7
 8013520:	bd80      	pop	{r7, pc}
 8013522:	bf00      	nop
 8013524:	0801bdf4 	.word	0x0801bdf4
 8013528:	0801bfe0 	.word	0x0801bfe0
 801352c:	0801be48 	.word	0x0801be48
 8013530:	0801c000 	.word	0x0801c000
 8013534:	0801c020 	.word	0x0801c020
 8013538:	0801c044 	.word	0x0801c044
 801353c:	0801c068 	.word	0x0801c068
 8013540:	0801c08c 	.word	0x0801c08c

08013544 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b086      	sub	sp, #24
 8013548:	af00      	add	r7, sp, #0
 801354a:	60f8      	str	r0, [r7, #12]
 801354c:	60b9      	str	r1, [r7, #8]
 801354e:	4613      	mov	r3, r2
 8013550:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013552:	68bb      	ldr	r3, [r7, #8]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d101      	bne.n	801355c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013558:	4b39      	ldr	r3, [pc, #228]	; (8013640 <udp_bind+0xfc>)
 801355a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	2b00      	cmp	r3, #0
 8013560:	d109      	bne.n	8013576 <udp_bind+0x32>
 8013562:	4b38      	ldr	r3, [pc, #224]	; (8013644 <udp_bind+0x100>)
 8013564:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013568:	4937      	ldr	r1, [pc, #220]	; (8013648 <udp_bind+0x104>)
 801356a:	4838      	ldr	r0, [pc, #224]	; (801364c <udp_bind+0x108>)
 801356c:	f004 fde0 	bl	8018130 <iprintf>
 8013570:	f06f 030f 	mvn.w	r3, #15
 8013574:	e060      	b.n	8013638 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013576:	2300      	movs	r3, #0
 8013578:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801357a:	4b35      	ldr	r3, [pc, #212]	; (8013650 <udp_bind+0x10c>)
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	617b      	str	r3, [r7, #20]
 8013580:	e009      	b.n	8013596 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013582:	68fa      	ldr	r2, [r7, #12]
 8013584:	697b      	ldr	r3, [r7, #20]
 8013586:	429a      	cmp	r2, r3
 8013588:	d102      	bne.n	8013590 <udp_bind+0x4c>
      rebind = 1;
 801358a:	2301      	movs	r3, #1
 801358c:	74fb      	strb	r3, [r7, #19]
      break;
 801358e:	e005      	b.n	801359c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013590:	697b      	ldr	r3, [r7, #20]
 8013592:	68db      	ldr	r3, [r3, #12]
 8013594:	617b      	str	r3, [r7, #20]
 8013596:	697b      	ldr	r3, [r7, #20]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d1f2      	bne.n	8013582 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801359c:	88fb      	ldrh	r3, [r7, #6]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d109      	bne.n	80135b6 <udp_bind+0x72>
    port = udp_new_port();
 80135a2:	f7ff fcc5 	bl	8012f30 <udp_new_port>
 80135a6:	4603      	mov	r3, r0
 80135a8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80135aa:	88fb      	ldrh	r3, [r7, #6]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d12c      	bne.n	801360a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80135b0:	f06f 0307 	mvn.w	r3, #7
 80135b4:	e040      	b.n	8013638 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80135b6:	4b26      	ldr	r3, [pc, #152]	; (8013650 <udp_bind+0x10c>)
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	617b      	str	r3, [r7, #20]
 80135bc:	e022      	b.n	8013604 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80135be:	68fa      	ldr	r2, [r7, #12]
 80135c0:	697b      	ldr	r3, [r7, #20]
 80135c2:	429a      	cmp	r2, r3
 80135c4:	d01b      	beq.n	80135fe <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80135c6:	697b      	ldr	r3, [r7, #20]
 80135c8:	8a5b      	ldrh	r3, [r3, #18]
 80135ca:	88fa      	ldrh	r2, [r7, #6]
 80135cc:	429a      	cmp	r2, r3
 80135ce:	d116      	bne.n	80135fe <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80135d0:	697b      	ldr	r3, [r7, #20]
 80135d2:	681a      	ldr	r2, [r3, #0]
 80135d4:	68bb      	ldr	r3, [r7, #8]
 80135d6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80135d8:	429a      	cmp	r2, r3
 80135da:	d00d      	beq.n	80135f8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80135dc:	68bb      	ldr	r3, [r7, #8]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d00a      	beq.n	80135f8 <udp_bind+0xb4>
 80135e2:	68bb      	ldr	r3, [r7, #8]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d006      	beq.n	80135f8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80135ea:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d003      	beq.n	80135f8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80135f0:	697b      	ldr	r3, [r7, #20]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d102      	bne.n	80135fe <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80135f8:	f06f 0307 	mvn.w	r3, #7
 80135fc:	e01c      	b.n	8013638 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80135fe:	697b      	ldr	r3, [r7, #20]
 8013600:	68db      	ldr	r3, [r3, #12]
 8013602:	617b      	str	r3, [r7, #20]
 8013604:	697b      	ldr	r3, [r7, #20]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d1d9      	bne.n	80135be <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801360a:	68bb      	ldr	r3, [r7, #8]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d002      	beq.n	8013616 <udp_bind+0xd2>
 8013610:	68bb      	ldr	r3, [r7, #8]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	e000      	b.n	8013618 <udp_bind+0xd4>
 8013616:	2300      	movs	r3, #0
 8013618:	68fa      	ldr	r2, [r7, #12]
 801361a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	88fa      	ldrh	r2, [r7, #6]
 8013620:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013622:	7cfb      	ldrb	r3, [r7, #19]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d106      	bne.n	8013636 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013628:	4b09      	ldr	r3, [pc, #36]	; (8013650 <udp_bind+0x10c>)
 801362a:	681a      	ldr	r2, [r3, #0]
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013630:	4a07      	ldr	r2, [pc, #28]	; (8013650 <udp_bind+0x10c>)
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013636:	2300      	movs	r3, #0
}
 8013638:	4618      	mov	r0, r3
 801363a:	3718      	adds	r7, #24
 801363c:	46bd      	mov	sp, r7
 801363e:	bd80      	pop	{r7, pc}
 8013640:	08026e3c 	.word	0x08026e3c
 8013644:	0801bdf4 	.word	0x0801bdf4
 8013648:	0801c0bc 	.word	0x0801c0bc
 801364c:	0801be48 	.word	0x0801be48
 8013650:	20010db8 	.word	0x20010db8

08013654 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b086      	sub	sp, #24
 8013658:	af00      	add	r7, sp, #0
 801365a:	60f8      	str	r0, [r7, #12]
 801365c:	60b9      	str	r1, [r7, #8]
 801365e:	4613      	mov	r3, r2
 8013660:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d109      	bne.n	801367c <udp_connect+0x28>
 8013668:	4b2c      	ldr	r3, [pc, #176]	; (801371c <udp_connect+0xc8>)
 801366a:	f240 4235 	movw	r2, #1077	; 0x435
 801366e:	492c      	ldr	r1, [pc, #176]	; (8013720 <udp_connect+0xcc>)
 8013670:	482c      	ldr	r0, [pc, #176]	; (8013724 <udp_connect+0xd0>)
 8013672:	f004 fd5d 	bl	8018130 <iprintf>
 8013676:	f06f 030f 	mvn.w	r3, #15
 801367a:	e04b      	b.n	8013714 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801367c:	68bb      	ldr	r3, [r7, #8]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d109      	bne.n	8013696 <udp_connect+0x42>
 8013682:	4b26      	ldr	r3, [pc, #152]	; (801371c <udp_connect+0xc8>)
 8013684:	f240 4236 	movw	r2, #1078	; 0x436
 8013688:	4927      	ldr	r1, [pc, #156]	; (8013728 <udp_connect+0xd4>)
 801368a:	4826      	ldr	r0, [pc, #152]	; (8013724 <udp_connect+0xd0>)
 801368c:	f004 fd50 	bl	8018130 <iprintf>
 8013690:	f06f 030f 	mvn.w	r3, #15
 8013694:	e03e      	b.n	8013714 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	8a5b      	ldrh	r3, [r3, #18]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d10f      	bne.n	80136be <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801369e:	68f9      	ldr	r1, [r7, #12]
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	8a5b      	ldrh	r3, [r3, #18]
 80136a4:	461a      	mov	r2, r3
 80136a6:	68f8      	ldr	r0, [r7, #12]
 80136a8:	f7ff ff4c 	bl	8013544 <udp_bind>
 80136ac:	4603      	mov	r3, r0
 80136ae:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80136b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d002      	beq.n	80136be <udp_connect+0x6a>
      return err;
 80136b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80136bc:	e02a      	b.n	8013714 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80136be:	68bb      	ldr	r3, [r7, #8]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d002      	beq.n	80136ca <udp_connect+0x76>
 80136c4:	68bb      	ldr	r3, [r7, #8]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	e000      	b.n	80136cc <udp_connect+0x78>
 80136ca:	2300      	movs	r3, #0
 80136cc:	68fa      	ldr	r2, [r7, #12]
 80136ce:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	88fa      	ldrh	r2, [r7, #6]
 80136d4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	7c1b      	ldrb	r3, [r3, #16]
 80136da:	f043 0304 	orr.w	r3, r3, #4
 80136de:	b2da      	uxtb	r2, r3
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80136e4:	4b11      	ldr	r3, [pc, #68]	; (801372c <udp_connect+0xd8>)
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	617b      	str	r3, [r7, #20]
 80136ea:	e008      	b.n	80136fe <udp_connect+0xaa>
    if (pcb == ipcb) {
 80136ec:	68fa      	ldr	r2, [r7, #12]
 80136ee:	697b      	ldr	r3, [r7, #20]
 80136f0:	429a      	cmp	r2, r3
 80136f2:	d101      	bne.n	80136f8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80136f4:	2300      	movs	r3, #0
 80136f6:	e00d      	b.n	8013714 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80136f8:	697b      	ldr	r3, [r7, #20]
 80136fa:	68db      	ldr	r3, [r3, #12]
 80136fc:	617b      	str	r3, [r7, #20]
 80136fe:	697b      	ldr	r3, [r7, #20]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d1f3      	bne.n	80136ec <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8013704:	4b09      	ldr	r3, [pc, #36]	; (801372c <udp_connect+0xd8>)
 8013706:	681a      	ldr	r2, [r3, #0]
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801370c:	4a07      	ldr	r2, [pc, #28]	; (801372c <udp_connect+0xd8>)
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8013712:	2300      	movs	r3, #0
}
 8013714:	4618      	mov	r0, r3
 8013716:	3718      	adds	r7, #24
 8013718:	46bd      	mov	sp, r7
 801371a:	bd80      	pop	{r7, pc}
 801371c:	0801bdf4 	.word	0x0801bdf4
 8013720:	0801c0d4 	.word	0x0801c0d4
 8013724:	0801be48 	.word	0x0801be48
 8013728:	0801c0f0 	.word	0x0801c0f0
 801372c:	20010db8 	.word	0x20010db8

08013730 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013730:	b580      	push	{r7, lr}
 8013732:	b084      	sub	sp, #16
 8013734:	af00      	add	r7, sp, #0
 8013736:	60f8      	str	r0, [r7, #12]
 8013738:	60b9      	str	r1, [r7, #8]
 801373a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d107      	bne.n	8013752 <udp_recv+0x22>
 8013742:	4b08      	ldr	r3, [pc, #32]	; (8013764 <udp_recv+0x34>)
 8013744:	f240 428a 	movw	r2, #1162	; 0x48a
 8013748:	4907      	ldr	r1, [pc, #28]	; (8013768 <udp_recv+0x38>)
 801374a:	4808      	ldr	r0, [pc, #32]	; (801376c <udp_recv+0x3c>)
 801374c:	f004 fcf0 	bl	8018130 <iprintf>
 8013750:	e005      	b.n	801375e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	68ba      	ldr	r2, [r7, #8]
 8013756:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	687a      	ldr	r2, [r7, #4]
 801375c:	61da      	str	r2, [r3, #28]
}
 801375e:	3710      	adds	r7, #16
 8013760:	46bd      	mov	sp, r7
 8013762:	bd80      	pop	{r7, pc}
 8013764:	0801bdf4 	.word	0x0801bdf4
 8013768:	0801c128 	.word	0x0801c128
 801376c:	0801be48 	.word	0x0801be48

08013770 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b084      	sub	sp, #16
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d107      	bne.n	801378e <udp_remove+0x1e>
 801377e:	4b19      	ldr	r3, [pc, #100]	; (80137e4 <udp_remove+0x74>)
 8013780:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013784:	4918      	ldr	r1, [pc, #96]	; (80137e8 <udp_remove+0x78>)
 8013786:	4819      	ldr	r0, [pc, #100]	; (80137ec <udp_remove+0x7c>)
 8013788:	f004 fcd2 	bl	8018130 <iprintf>
 801378c:	e026      	b.n	80137dc <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801378e:	4b18      	ldr	r3, [pc, #96]	; (80137f0 <udp_remove+0x80>)
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	687a      	ldr	r2, [r7, #4]
 8013794:	429a      	cmp	r2, r3
 8013796:	d105      	bne.n	80137a4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013798:	4b15      	ldr	r3, [pc, #84]	; (80137f0 <udp_remove+0x80>)
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	68db      	ldr	r3, [r3, #12]
 801379e:	4a14      	ldr	r2, [pc, #80]	; (80137f0 <udp_remove+0x80>)
 80137a0:	6013      	str	r3, [r2, #0]
 80137a2:	e017      	b.n	80137d4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80137a4:	4b12      	ldr	r3, [pc, #72]	; (80137f0 <udp_remove+0x80>)
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	60fb      	str	r3, [r7, #12]
 80137aa:	e010      	b.n	80137ce <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	68db      	ldr	r3, [r3, #12]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d009      	beq.n	80137c8 <udp_remove+0x58>
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	68db      	ldr	r3, [r3, #12]
 80137b8:	687a      	ldr	r2, [r7, #4]
 80137ba:	429a      	cmp	r2, r3
 80137bc:	d104      	bne.n	80137c8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	68da      	ldr	r2, [r3, #12]
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	60da      	str	r2, [r3, #12]
        break;
 80137c6:	e005      	b.n	80137d4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	68db      	ldr	r3, [r3, #12]
 80137cc:	60fb      	str	r3, [r7, #12]
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d1eb      	bne.n	80137ac <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80137d4:	6879      	ldr	r1, [r7, #4]
 80137d6:	2000      	movs	r0, #0
 80137d8:	f7f8 f80e 	bl	800b7f8 <memp_free>
}
 80137dc:	3710      	adds	r7, #16
 80137de:	46bd      	mov	sp, r7
 80137e0:	bd80      	pop	{r7, pc}
 80137e2:	bf00      	nop
 80137e4:	0801bdf4 	.word	0x0801bdf4
 80137e8:	0801c140 	.word	0x0801c140
 80137ec:	0801be48 	.word	0x0801be48
 80137f0:	20010db8 	.word	0x20010db8

080137f4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b082      	sub	sp, #8
 80137f8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80137fa:	2000      	movs	r0, #0
 80137fc:	f7f7 ff86 	bl	800b70c <memp_malloc>
 8013800:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d007      	beq.n	8013818 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013808:	2220      	movs	r2, #32
 801380a:	2100      	movs	r1, #0
 801380c:	6878      	ldr	r0, [r7, #4]
 801380e:	f004 fcf4 	bl	80181fa <memset>
    pcb->ttl = UDP_TTL;
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	22ff      	movs	r2, #255	; 0xff
 8013816:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013818:	687b      	ldr	r3, [r7, #4]
}
 801381a:	4618      	mov	r0, r3
 801381c:	3708      	adds	r7, #8
 801381e:	46bd      	mov	sp, r7
 8013820:	bd80      	pop	{r7, pc}

08013822 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8013822:	b580      	push	{r7, lr}
 8013824:	b084      	sub	sp, #16
 8013826:	af00      	add	r7, sp, #0
 8013828:	4603      	mov	r3, r0
 801382a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801382c:	f7ff ffe2 	bl	80137f4 <udp_new>
 8013830:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8013832:	68fb      	ldr	r3, [r7, #12]
}
 8013834:	4618      	mov	r0, r3
 8013836:	3710      	adds	r7, #16
 8013838:	46bd      	mov	sp, r7
 801383a:	bd80      	pop	{r7, pc}

0801383c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801383c:	b480      	push	{r7}
 801383e:	b085      	sub	sp, #20
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]
 8013844:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d01e      	beq.n	801388a <udp_netif_ip_addr_changed+0x4e>
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d01a      	beq.n	801388a <udp_netif_ip_addr_changed+0x4e>
 8013854:	683b      	ldr	r3, [r7, #0]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d017      	beq.n	801388a <udp_netif_ip_addr_changed+0x4e>
 801385a:	683b      	ldr	r3, [r7, #0]
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d013      	beq.n	801388a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013862:	4b0d      	ldr	r3, [pc, #52]	; (8013898 <udp_netif_ip_addr_changed+0x5c>)
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	60fb      	str	r3, [r7, #12]
 8013868:	e00c      	b.n	8013884 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	681a      	ldr	r2, [r3, #0]
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	429a      	cmp	r2, r3
 8013874:	d103      	bne.n	801387e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013876:	683b      	ldr	r3, [r7, #0]
 8013878:	681a      	ldr	r2, [r3, #0]
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	68db      	ldr	r3, [r3, #12]
 8013882:	60fb      	str	r3, [r7, #12]
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d1ef      	bne.n	801386a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801388a:	bf00      	nop
 801388c:	3714      	adds	r7, #20
 801388e:	46bd      	mov	sp, r7
 8013890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013894:	4770      	bx	lr
 8013896:	bf00      	nop
 8013898:	20010db8 	.word	0x20010db8

0801389c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801389c:	b580      	push	{r7, lr}
 801389e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80138a0:	4b20      	ldr	r3, [pc, #128]	; (8013924 <dhcp_inc_pcb_refcount+0x88>)
 80138a2:	781b      	ldrb	r3, [r3, #0]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d133      	bne.n	8013910 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80138a8:	4b1f      	ldr	r3, [pc, #124]	; (8013928 <dhcp_inc_pcb_refcount+0x8c>)
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d005      	beq.n	80138bc <dhcp_inc_pcb_refcount+0x20>
 80138b0:	4b1e      	ldr	r3, [pc, #120]	; (801392c <dhcp_inc_pcb_refcount+0x90>)
 80138b2:	22e5      	movs	r2, #229	; 0xe5
 80138b4:	491e      	ldr	r1, [pc, #120]	; (8013930 <dhcp_inc_pcb_refcount+0x94>)
 80138b6:	481f      	ldr	r0, [pc, #124]	; (8013934 <dhcp_inc_pcb_refcount+0x98>)
 80138b8:	f004 fc3a 	bl	8018130 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80138bc:	f7ff ff9a 	bl	80137f4 <udp_new>
 80138c0:	4603      	mov	r3, r0
 80138c2:	4a19      	ldr	r2, [pc, #100]	; (8013928 <dhcp_inc_pcb_refcount+0x8c>)
 80138c4:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80138c6:	4b18      	ldr	r3, [pc, #96]	; (8013928 <dhcp_inc_pcb_refcount+0x8c>)
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d102      	bne.n	80138d4 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80138ce:	f04f 33ff 	mov.w	r3, #4294967295
 80138d2:	e024      	b.n	801391e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80138d4:	4b14      	ldr	r3, [pc, #80]	; (8013928 <dhcp_inc_pcb_refcount+0x8c>)
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	7a5a      	ldrb	r2, [r3, #9]
 80138da:	4b13      	ldr	r3, [pc, #76]	; (8013928 <dhcp_inc_pcb_refcount+0x8c>)
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	f042 0220 	orr.w	r2, r2, #32
 80138e2:	b2d2      	uxtb	r2, r2
 80138e4:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80138e6:	4b10      	ldr	r3, [pc, #64]	; (8013928 <dhcp_inc_pcb_refcount+0x8c>)
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	2244      	movs	r2, #68	; 0x44
 80138ec:	4912      	ldr	r1, [pc, #72]	; (8013938 <dhcp_inc_pcb_refcount+0x9c>)
 80138ee:	4618      	mov	r0, r3
 80138f0:	f7ff fe28 	bl	8013544 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80138f4:	4b0c      	ldr	r3, [pc, #48]	; (8013928 <dhcp_inc_pcb_refcount+0x8c>)
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	2243      	movs	r2, #67	; 0x43
 80138fa:	490f      	ldr	r1, [pc, #60]	; (8013938 <dhcp_inc_pcb_refcount+0x9c>)
 80138fc:	4618      	mov	r0, r3
 80138fe:	f7ff fea9 	bl	8013654 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8013902:	4b09      	ldr	r3, [pc, #36]	; (8013928 <dhcp_inc_pcb_refcount+0x8c>)
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	2200      	movs	r2, #0
 8013908:	490c      	ldr	r1, [pc, #48]	; (801393c <dhcp_inc_pcb_refcount+0xa0>)
 801390a:	4618      	mov	r0, r3
 801390c:	f7ff ff10 	bl	8013730 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8013910:	4b04      	ldr	r3, [pc, #16]	; (8013924 <dhcp_inc_pcb_refcount+0x88>)
 8013912:	781b      	ldrb	r3, [r3, #0]
 8013914:	3301      	adds	r3, #1
 8013916:	b2da      	uxtb	r2, r3
 8013918:	4b02      	ldr	r3, [pc, #8]	; (8013924 <dhcp_inc_pcb_refcount+0x88>)
 801391a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801391c:	2300      	movs	r3, #0
}
 801391e:	4618      	mov	r0, r3
 8013920:	bd80      	pop	{r7, pc}
 8013922:	bf00      	nop
 8013924:	20010de8 	.word	0x20010de8
 8013928:	20010de4 	.word	0x20010de4
 801392c:	0801c158 	.word	0x0801c158
 8013930:	0801c190 	.word	0x0801c190
 8013934:	0801c1b8 	.word	0x0801c1b8
 8013938:	08026e3c 	.word	0x08026e3c
 801393c:	080151d1 	.word	0x080151d1

08013940 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8013940:	b580      	push	{r7, lr}
 8013942:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8013944:	4b0e      	ldr	r3, [pc, #56]	; (8013980 <dhcp_dec_pcb_refcount+0x40>)
 8013946:	781b      	ldrb	r3, [r3, #0]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d105      	bne.n	8013958 <dhcp_dec_pcb_refcount+0x18>
 801394c:	4b0d      	ldr	r3, [pc, #52]	; (8013984 <dhcp_dec_pcb_refcount+0x44>)
 801394e:	22ff      	movs	r2, #255	; 0xff
 8013950:	490d      	ldr	r1, [pc, #52]	; (8013988 <dhcp_dec_pcb_refcount+0x48>)
 8013952:	480e      	ldr	r0, [pc, #56]	; (801398c <dhcp_dec_pcb_refcount+0x4c>)
 8013954:	f004 fbec 	bl	8018130 <iprintf>
  dhcp_pcb_refcount--;
 8013958:	4b09      	ldr	r3, [pc, #36]	; (8013980 <dhcp_dec_pcb_refcount+0x40>)
 801395a:	781b      	ldrb	r3, [r3, #0]
 801395c:	3b01      	subs	r3, #1
 801395e:	b2da      	uxtb	r2, r3
 8013960:	4b07      	ldr	r3, [pc, #28]	; (8013980 <dhcp_dec_pcb_refcount+0x40>)
 8013962:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8013964:	4b06      	ldr	r3, [pc, #24]	; (8013980 <dhcp_dec_pcb_refcount+0x40>)
 8013966:	781b      	ldrb	r3, [r3, #0]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d107      	bne.n	801397c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801396c:	4b08      	ldr	r3, [pc, #32]	; (8013990 <dhcp_dec_pcb_refcount+0x50>)
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	4618      	mov	r0, r3
 8013972:	f7ff fefd 	bl	8013770 <udp_remove>
    dhcp_pcb = NULL;
 8013976:	4b06      	ldr	r3, [pc, #24]	; (8013990 <dhcp_dec_pcb_refcount+0x50>)
 8013978:	2200      	movs	r2, #0
 801397a:	601a      	str	r2, [r3, #0]
  }
}
 801397c:	bf00      	nop
 801397e:	bd80      	pop	{r7, pc}
 8013980:	20010de8 	.word	0x20010de8
 8013984:	0801c158 	.word	0x0801c158
 8013988:	0801c1e0 	.word	0x0801c1e0
 801398c:	0801c1b8 	.word	0x0801c1b8
 8013990:	20010de4 	.word	0x20010de4

08013994 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8013994:	b580      	push	{r7, lr}
 8013996:	b084      	sub	sp, #16
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139a0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80139a2:	210c      	movs	r1, #12
 80139a4:	68f8      	ldr	r0, [r7, #12]
 80139a6:	f001 f855 	bl	8014a54 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80139aa:	4b06      	ldr	r3, [pc, #24]	; (80139c4 <dhcp_handle_nak+0x30>)
 80139ac:	4a05      	ldr	r2, [pc, #20]	; (80139c4 <dhcp_handle_nak+0x30>)
 80139ae:	4905      	ldr	r1, [pc, #20]	; (80139c4 <dhcp_handle_nak+0x30>)
 80139b0:	6878      	ldr	r0, [r7, #4]
 80139b2:	f7f8 f8c3 	bl	800bb3c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80139b6:	6878      	ldr	r0, [r7, #4]
 80139b8:	f000 fc48 	bl	801424c <dhcp_discover>
}
 80139bc:	bf00      	nop
 80139be:	3710      	adds	r7, #16
 80139c0:	46bd      	mov	sp, r7
 80139c2:	bd80      	pop	{r7, pc}
 80139c4:	08026e3c 	.word	0x08026e3c

080139c8 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b084      	sub	sp, #16
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139d4:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80139d6:	2108      	movs	r1, #8
 80139d8:	68f8      	ldr	r0, [r7, #12]
 80139da:	f001 f83b 	bl	8014a54 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	331c      	adds	r3, #28
 80139e2:	2200      	movs	r2, #0
 80139e4:	4619      	mov	r1, r3
 80139e6:	6878      	ldr	r0, [r7, #4]
 80139e8:	f002 fb3c 	bl	8016064 <etharp_query>
 80139ec:	4603      	mov	r3, r0
 80139ee:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	799b      	ldrb	r3, [r3, #6]
 80139f4:	2bff      	cmp	r3, #255	; 0xff
 80139f6:	d005      	beq.n	8013a04 <dhcp_check+0x3c>
    dhcp->tries++;
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	799b      	ldrb	r3, [r3, #6]
 80139fc:	3301      	adds	r3, #1
 80139fe:	b2da      	uxtb	r2, r3
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8013a04:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8013a08:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013a0a:	893b      	ldrh	r3, [r7, #8]
 8013a0c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013a10:	4a06      	ldr	r2, [pc, #24]	; (8013a2c <dhcp_check+0x64>)
 8013a12:	fb82 1203 	smull	r1, r2, r2, r3
 8013a16:	1152      	asrs	r2, r2, #5
 8013a18:	17db      	asrs	r3, r3, #31
 8013a1a:	1ad3      	subs	r3, r2, r3
 8013a1c:	b29a      	uxth	r2, r3
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8013a22:	bf00      	nop
 8013a24:	3710      	adds	r7, #16
 8013a26:	46bd      	mov	sp, r7
 8013a28:	bd80      	pop	{r7, pc}
 8013a2a:	bf00      	nop
 8013a2c:	10624dd3 	.word	0x10624dd3

08013a30 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013a30:	b580      	push	{r7, lr}
 8013a32:	b084      	sub	sp, #16
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	6078      	str	r0, [r7, #4]
 8013a38:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a3e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8013a40:	4b0c      	ldr	r3, [pc, #48]	; (8013a74 <dhcp_handle_offer+0x44>)
 8013a42:	789b      	ldrb	r3, [r3, #2]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d011      	beq.n	8013a6c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	2200      	movs	r2, #0
 8013a4c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8013a4e:	4b0a      	ldr	r3, [pc, #40]	; (8013a78 <dhcp_handle_offer+0x48>)
 8013a50:	689b      	ldr	r3, [r3, #8]
 8013a52:	4618      	mov	r0, r3
 8013a54:	f7f7 f961 	bl	800ad1a <lwip_htonl>
 8013a58:	4602      	mov	r2, r0
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013a5e:	683b      	ldr	r3, [r7, #0]
 8013a60:	691a      	ldr	r2, [r3, #16]
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8013a66:	6878      	ldr	r0, [r7, #4]
 8013a68:	f000 f808 	bl	8013a7c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8013a6c:	bf00      	nop
 8013a6e:	3710      	adds	r7, #16
 8013a70:	46bd      	mov	sp, r7
 8013a72:	bd80      	pop	{r7, pc}
 8013a74:	20010ddc 	.word	0x20010ddc
 8013a78:	20010dbc 	.word	0x20010dbc

08013a7c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8013a7c:	b5b0      	push	{r4, r5, r7, lr}
 8013a7e:	b08a      	sub	sp, #40	; 0x28
 8013a80:	af02      	add	r7, sp, #8
 8013a82:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d109      	bne.n	8013a9e <dhcp_select+0x22>
 8013a8a:	4b71      	ldr	r3, [pc, #452]	; (8013c50 <dhcp_select+0x1d4>)
 8013a8c:	f240 1277 	movw	r2, #375	; 0x177
 8013a90:	4970      	ldr	r1, [pc, #448]	; (8013c54 <dhcp_select+0x1d8>)
 8013a92:	4871      	ldr	r0, [pc, #452]	; (8013c58 <dhcp_select+0x1dc>)
 8013a94:	f004 fb4c 	bl	8018130 <iprintf>
 8013a98:	f06f 030f 	mvn.w	r3, #15
 8013a9c:	e0d3      	b.n	8013c46 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aa2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8013aa4:	69bb      	ldr	r3, [r7, #24]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d109      	bne.n	8013abe <dhcp_select+0x42>
 8013aaa:	4b69      	ldr	r3, [pc, #420]	; (8013c50 <dhcp_select+0x1d4>)
 8013aac:	f240 1279 	movw	r2, #377	; 0x179
 8013ab0:	496a      	ldr	r1, [pc, #424]	; (8013c5c <dhcp_select+0x1e0>)
 8013ab2:	4869      	ldr	r0, [pc, #420]	; (8013c58 <dhcp_select+0x1dc>)
 8013ab4:	f004 fb3c 	bl	8018130 <iprintf>
 8013ab8:	f06f 0305 	mvn.w	r3, #5
 8013abc:	e0c3      	b.n	8013c46 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8013abe:	2101      	movs	r1, #1
 8013ac0:	69b8      	ldr	r0, [r7, #24]
 8013ac2:	f000 ffc7 	bl	8014a54 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013ac6:	f107 030c 	add.w	r3, r7, #12
 8013aca:	2203      	movs	r2, #3
 8013acc:	69b9      	ldr	r1, [r7, #24]
 8013ace:	6878      	ldr	r0, [r7, #4]
 8013ad0:	f001 fc4c 	bl	801536c <dhcp_create_msg>
 8013ad4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013ad6:	697b      	ldr	r3, [r7, #20]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	f000 8085 	beq.w	8013be8 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013ade:	697b      	ldr	r3, [r7, #20]
 8013ae0:	685b      	ldr	r3, [r3, #4]
 8013ae2:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013ae4:	89b8      	ldrh	r0, [r7, #12]
 8013ae6:	693b      	ldr	r3, [r7, #16]
 8013ae8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013aec:	2302      	movs	r3, #2
 8013aee:	2239      	movs	r2, #57	; 0x39
 8013af0:	f000 ffca 	bl	8014a88 <dhcp_option>
 8013af4:	4603      	mov	r3, r0
 8013af6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013af8:	89b8      	ldrh	r0, [r7, #12]
 8013afa:	693b      	ldr	r3, [r7, #16]
 8013afc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013b04:	461a      	mov	r2, r3
 8013b06:	f001 f819 	bl	8014b3c <dhcp_option_short>
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013b0e:	89b8      	ldrh	r0, [r7, #12]
 8013b10:	693b      	ldr	r3, [r7, #16]
 8013b12:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013b16:	2304      	movs	r3, #4
 8013b18:	2232      	movs	r2, #50	; 0x32
 8013b1a:	f000 ffb5 	bl	8014a88 <dhcp_option>
 8013b1e:	4603      	mov	r3, r0
 8013b20:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013b22:	89bc      	ldrh	r4, [r7, #12]
 8013b24:	693b      	ldr	r3, [r7, #16]
 8013b26:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013b2a:	69bb      	ldr	r3, [r7, #24]
 8013b2c:	69db      	ldr	r3, [r3, #28]
 8013b2e:	4618      	mov	r0, r3
 8013b30:	f7f7 f8f3 	bl	800ad1a <lwip_htonl>
 8013b34:	4603      	mov	r3, r0
 8013b36:	461a      	mov	r2, r3
 8013b38:	4629      	mov	r1, r5
 8013b3a:	4620      	mov	r0, r4
 8013b3c:	f001 f830 	bl	8014ba0 <dhcp_option_long>
 8013b40:	4603      	mov	r3, r0
 8013b42:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013b44:	89b8      	ldrh	r0, [r7, #12]
 8013b46:	693b      	ldr	r3, [r7, #16]
 8013b48:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013b4c:	2304      	movs	r3, #4
 8013b4e:	2236      	movs	r2, #54	; 0x36
 8013b50:	f000 ff9a 	bl	8014a88 <dhcp_option>
 8013b54:	4603      	mov	r3, r0
 8013b56:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8013b58:	89bc      	ldrh	r4, [r7, #12]
 8013b5a:	693b      	ldr	r3, [r7, #16]
 8013b5c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013b60:	69bb      	ldr	r3, [r7, #24]
 8013b62:	699b      	ldr	r3, [r3, #24]
 8013b64:	4618      	mov	r0, r3
 8013b66:	f7f7 f8d8 	bl	800ad1a <lwip_htonl>
 8013b6a:	4603      	mov	r3, r0
 8013b6c:	461a      	mov	r2, r3
 8013b6e:	4629      	mov	r1, r5
 8013b70:	4620      	mov	r0, r4
 8013b72:	f001 f815 	bl	8014ba0 <dhcp_option_long>
 8013b76:	4603      	mov	r3, r0
 8013b78:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013b7a:	89b8      	ldrh	r0, [r7, #12]
 8013b7c:	693b      	ldr	r3, [r7, #16]
 8013b7e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013b82:	2303      	movs	r3, #3
 8013b84:	2237      	movs	r2, #55	; 0x37
 8013b86:	f000 ff7f 	bl	8014a88 <dhcp_option>
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013b8e:	2300      	movs	r3, #0
 8013b90:	77bb      	strb	r3, [r7, #30]
 8013b92:	e00e      	b.n	8013bb2 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013b94:	89b8      	ldrh	r0, [r7, #12]
 8013b96:	693b      	ldr	r3, [r7, #16]
 8013b98:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013b9c:	7fbb      	ldrb	r3, [r7, #30]
 8013b9e:	4a30      	ldr	r2, [pc, #192]	; (8013c60 <dhcp_select+0x1e4>)
 8013ba0:	5cd3      	ldrb	r3, [r2, r3]
 8013ba2:	461a      	mov	r2, r3
 8013ba4:	f000 ffa4 	bl	8014af0 <dhcp_option_byte>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013bac:	7fbb      	ldrb	r3, [r7, #30]
 8013bae:	3301      	adds	r3, #1
 8013bb0:	77bb      	strb	r3, [r7, #30]
 8013bb2:	7fbb      	ldrb	r3, [r7, #30]
 8013bb4:	2b02      	cmp	r3, #2
 8013bb6:	d9ed      	bls.n	8013b94 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013bb8:	89b8      	ldrh	r0, [r7, #12]
 8013bba:	693b      	ldr	r3, [r7, #16]
 8013bbc:	33f0      	adds	r3, #240	; 0xf0
 8013bbe:	697a      	ldr	r2, [r7, #20]
 8013bc0:	4619      	mov	r1, r3
 8013bc2:	f001 fca9 	bl	8015518 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013bc6:	4b27      	ldr	r3, [pc, #156]	; (8013c64 <dhcp_select+0x1e8>)
 8013bc8:	6818      	ldr	r0, [r3, #0]
 8013bca:	4b27      	ldr	r3, [pc, #156]	; (8013c68 <dhcp_select+0x1ec>)
 8013bcc:	9301      	str	r3, [sp, #4]
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	9300      	str	r3, [sp, #0]
 8013bd2:	2343      	movs	r3, #67	; 0x43
 8013bd4:	4a25      	ldr	r2, [pc, #148]	; (8013c6c <dhcp_select+0x1f0>)
 8013bd6:	6979      	ldr	r1, [r7, #20]
 8013bd8:	f7ff fbce 	bl	8013378 <udp_sendto_if_src>
 8013bdc:	4603      	mov	r3, r0
 8013bde:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013be0:	6978      	ldr	r0, [r7, #20]
 8013be2:	f7f8 fcb9 	bl	800c558 <pbuf_free>
 8013be6:	e001      	b.n	8013bec <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013be8:	23ff      	movs	r3, #255	; 0xff
 8013bea:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013bec:	69bb      	ldr	r3, [r7, #24]
 8013bee:	799b      	ldrb	r3, [r3, #6]
 8013bf0:	2bff      	cmp	r3, #255	; 0xff
 8013bf2:	d005      	beq.n	8013c00 <dhcp_select+0x184>
    dhcp->tries++;
 8013bf4:	69bb      	ldr	r3, [r7, #24]
 8013bf6:	799b      	ldrb	r3, [r3, #6]
 8013bf8:	3301      	adds	r3, #1
 8013bfa:	b2da      	uxtb	r2, r3
 8013bfc:	69bb      	ldr	r3, [r7, #24]
 8013bfe:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013c00:	69bb      	ldr	r3, [r7, #24]
 8013c02:	799b      	ldrb	r3, [r3, #6]
 8013c04:	2b05      	cmp	r3, #5
 8013c06:	d80d      	bhi.n	8013c24 <dhcp_select+0x1a8>
 8013c08:	69bb      	ldr	r3, [r7, #24]
 8013c0a:	799b      	ldrb	r3, [r3, #6]
 8013c0c:	461a      	mov	r2, r3
 8013c0e:	2301      	movs	r3, #1
 8013c10:	4093      	lsls	r3, r2
 8013c12:	b29b      	uxth	r3, r3
 8013c14:	461a      	mov	r2, r3
 8013c16:	0152      	lsls	r2, r2, #5
 8013c18:	1ad2      	subs	r2, r2, r3
 8013c1a:	0092      	lsls	r2, r2, #2
 8013c1c:	4413      	add	r3, r2
 8013c1e:	00db      	lsls	r3, r3, #3
 8013c20:	b29b      	uxth	r3, r3
 8013c22:	e001      	b.n	8013c28 <dhcp_select+0x1ac>
 8013c24:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013c28:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013c2a:	89fb      	ldrh	r3, [r7, #14]
 8013c2c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013c30:	4a0f      	ldr	r2, [pc, #60]	; (8013c70 <dhcp_select+0x1f4>)
 8013c32:	fb82 1203 	smull	r1, r2, r2, r3
 8013c36:	1152      	asrs	r2, r2, #5
 8013c38:	17db      	asrs	r3, r3, #31
 8013c3a:	1ad3      	subs	r3, r2, r3
 8013c3c:	b29a      	uxth	r2, r3
 8013c3e:	69bb      	ldr	r3, [r7, #24]
 8013c40:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013c42:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013c46:	4618      	mov	r0, r3
 8013c48:	3720      	adds	r7, #32
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8013c4e:	bf00      	nop
 8013c50:	0801c158 	.word	0x0801c158
 8013c54:	0801c204 	.word	0x0801c204
 8013c58:	0801c1b8 	.word	0x0801c1b8
 8013c5c:	0801c220 	.word	0x0801c220
 8013c60:	20000030 	.word	0x20000030
 8013c64:	20010de4 	.word	0x20010de4
 8013c68:	08026e3c 	.word	0x08026e3c
 8013c6c:	08026e40 	.word	0x08026e40
 8013c70:	10624dd3 	.word	0x10624dd3

08013c74 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b082      	sub	sp, #8
 8013c78:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8013c7a:	4b27      	ldr	r3, [pc, #156]	; (8013d18 <dhcp_coarse_tmr+0xa4>)
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	607b      	str	r3, [r7, #4]
 8013c80:	e042      	b.n	8013d08 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c86:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8013c88:	683b      	ldr	r3, [r7, #0]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d039      	beq.n	8013d02 <dhcp_coarse_tmr+0x8e>
 8013c8e:	683b      	ldr	r3, [r7, #0]
 8013c90:	795b      	ldrb	r3, [r3, #5]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d035      	beq.n	8013d02 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8013c96:	683b      	ldr	r3, [r7, #0]
 8013c98:	8a9b      	ldrh	r3, [r3, #20]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d012      	beq.n	8013cc4 <dhcp_coarse_tmr+0x50>
 8013c9e:	683b      	ldr	r3, [r7, #0]
 8013ca0:	8a5b      	ldrh	r3, [r3, #18]
 8013ca2:	3301      	adds	r3, #1
 8013ca4:	b29a      	uxth	r2, r3
 8013ca6:	683b      	ldr	r3, [r7, #0]
 8013ca8:	825a      	strh	r2, [r3, #18]
 8013caa:	683b      	ldr	r3, [r7, #0]
 8013cac:	8a5a      	ldrh	r2, [r3, #18]
 8013cae:	683b      	ldr	r3, [r7, #0]
 8013cb0:	8a9b      	ldrh	r3, [r3, #20]
 8013cb2:	429a      	cmp	r2, r3
 8013cb4:	d106      	bne.n	8013cc4 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8013cb6:	6878      	ldr	r0, [r7, #4]
 8013cb8:	f000 fe32 	bl	8014920 <dhcp_release_and_stop>
        dhcp_start(netif);
 8013cbc:	6878      	ldr	r0, [r7, #4]
 8013cbe:	f000 f969 	bl	8013f94 <dhcp_start>
 8013cc2:	e01e      	b.n	8013d02 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8013cc4:	683b      	ldr	r3, [r7, #0]
 8013cc6:	8a1b      	ldrh	r3, [r3, #16]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d00b      	beq.n	8013ce4 <dhcp_coarse_tmr+0x70>
 8013ccc:	683b      	ldr	r3, [r7, #0]
 8013cce:	8a1b      	ldrh	r3, [r3, #16]
 8013cd0:	1e5a      	subs	r2, r3, #1
 8013cd2:	b291      	uxth	r1, r2
 8013cd4:	683a      	ldr	r2, [r7, #0]
 8013cd6:	8211      	strh	r1, [r2, #16]
 8013cd8:	2b01      	cmp	r3, #1
 8013cda:	d103      	bne.n	8013ce4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8013cdc:	6878      	ldr	r0, [r7, #4]
 8013cde:	f000 f8c6 	bl	8013e6e <dhcp_t2_timeout>
 8013ce2:	e00e      	b.n	8013d02 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8013ce4:	683b      	ldr	r3, [r7, #0]
 8013ce6:	89db      	ldrh	r3, [r3, #14]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d00a      	beq.n	8013d02 <dhcp_coarse_tmr+0x8e>
 8013cec:	683b      	ldr	r3, [r7, #0]
 8013cee:	89db      	ldrh	r3, [r3, #14]
 8013cf0:	1e5a      	subs	r2, r3, #1
 8013cf2:	b291      	uxth	r1, r2
 8013cf4:	683a      	ldr	r2, [r7, #0]
 8013cf6:	81d1      	strh	r1, [r2, #14]
 8013cf8:	2b01      	cmp	r3, #1
 8013cfa:	d102      	bne.n	8013d02 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8013cfc:	6878      	ldr	r0, [r7, #4]
 8013cfe:	f000 f888 	bl	8013e12 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	607b      	str	r3, [r7, #4]
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d1b9      	bne.n	8013c82 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8013d0e:	bf00      	nop
 8013d10:	bf00      	nop
 8013d12:	3708      	adds	r7, #8
 8013d14:	46bd      	mov	sp, r7
 8013d16:	bd80      	pop	{r7, pc}
 8013d18:	20010d50 	.word	0x20010d50

08013d1c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	b082      	sub	sp, #8
 8013d20:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8013d22:	4b16      	ldr	r3, [pc, #88]	; (8013d7c <dhcp_fine_tmr+0x60>)
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	607b      	str	r3, [r7, #4]
 8013d28:	e020      	b.n	8013d6c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d2e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8013d30:	683b      	ldr	r3, [r7, #0]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d017      	beq.n	8013d66 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8013d36:	683b      	ldr	r3, [r7, #0]
 8013d38:	891b      	ldrh	r3, [r3, #8]
 8013d3a:	2b01      	cmp	r3, #1
 8013d3c:	d906      	bls.n	8013d4c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8013d3e:	683b      	ldr	r3, [r7, #0]
 8013d40:	891b      	ldrh	r3, [r3, #8]
 8013d42:	3b01      	subs	r3, #1
 8013d44:	b29a      	uxth	r2, r3
 8013d46:	683b      	ldr	r3, [r7, #0]
 8013d48:	811a      	strh	r2, [r3, #8]
 8013d4a:	e00c      	b.n	8013d66 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8013d4c:	683b      	ldr	r3, [r7, #0]
 8013d4e:	891b      	ldrh	r3, [r3, #8]
 8013d50:	2b01      	cmp	r3, #1
 8013d52:	d108      	bne.n	8013d66 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8013d54:	683b      	ldr	r3, [r7, #0]
 8013d56:	891b      	ldrh	r3, [r3, #8]
 8013d58:	3b01      	subs	r3, #1
 8013d5a:	b29a      	uxth	r2, r3
 8013d5c:	683b      	ldr	r3, [r7, #0]
 8013d5e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8013d60:	6878      	ldr	r0, [r7, #4]
 8013d62:	f000 f80d 	bl	8013d80 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	607b      	str	r3, [r7, #4]
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d1db      	bne.n	8013d2a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8013d72:	bf00      	nop
 8013d74:	bf00      	nop
 8013d76:	3708      	adds	r7, #8
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	bd80      	pop	{r7, pc}
 8013d7c:	20010d50 	.word	0x20010d50

08013d80 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b084      	sub	sp, #16
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d8c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	795b      	ldrb	r3, [r3, #5]
 8013d92:	2b0c      	cmp	r3, #12
 8013d94:	d003      	beq.n	8013d9e <dhcp_timeout+0x1e>
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	795b      	ldrb	r3, [r3, #5]
 8013d9a:	2b06      	cmp	r3, #6
 8013d9c:	d103      	bne.n	8013da6 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8013d9e:	6878      	ldr	r0, [r7, #4]
 8013da0:	f000 fa54 	bl	801424c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8013da4:	e031      	b.n	8013e0a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	795b      	ldrb	r3, [r3, #5]
 8013daa:	2b01      	cmp	r3, #1
 8013dac:	d10e      	bne.n	8013dcc <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	799b      	ldrb	r3, [r3, #6]
 8013db2:	2b05      	cmp	r3, #5
 8013db4:	d803      	bhi.n	8013dbe <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8013db6:	6878      	ldr	r0, [r7, #4]
 8013db8:	f7ff fe60 	bl	8013a7c <dhcp_select>
}
 8013dbc:	e025      	b.n	8013e0a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8013dbe:	6878      	ldr	r0, [r7, #4]
 8013dc0:	f000 fdae 	bl	8014920 <dhcp_release_and_stop>
      dhcp_start(netif);
 8013dc4:	6878      	ldr	r0, [r7, #4]
 8013dc6:	f000 f8e5 	bl	8013f94 <dhcp_start>
}
 8013dca:	e01e      	b.n	8013e0a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	795b      	ldrb	r3, [r3, #5]
 8013dd0:	2b08      	cmp	r3, #8
 8013dd2:	d10b      	bne.n	8013dec <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	799b      	ldrb	r3, [r3, #6]
 8013dd8:	2b01      	cmp	r3, #1
 8013dda:	d803      	bhi.n	8013de4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8013ddc:	6878      	ldr	r0, [r7, #4]
 8013dde:	f7ff fdf3 	bl	80139c8 <dhcp_check>
}
 8013de2:	e012      	b.n	8013e0a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8013de4:	6878      	ldr	r0, [r7, #4]
 8013de6:	f000 fad3 	bl	8014390 <dhcp_bind>
}
 8013dea:	e00e      	b.n	8013e0a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	795b      	ldrb	r3, [r3, #5]
 8013df0:	2b03      	cmp	r3, #3
 8013df2:	d10a      	bne.n	8013e0a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	799b      	ldrb	r3, [r3, #6]
 8013df8:	2b01      	cmp	r3, #1
 8013dfa:	d803      	bhi.n	8013e04 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8013dfc:	6878      	ldr	r0, [r7, #4]
 8013dfe:	f000 fcd9 	bl	80147b4 <dhcp_reboot>
}
 8013e02:	e002      	b.n	8013e0a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8013e04:	6878      	ldr	r0, [r7, #4]
 8013e06:	f000 fa21 	bl	801424c <dhcp_discover>
}
 8013e0a:	bf00      	nop
 8013e0c:	3710      	adds	r7, #16
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	bd80      	pop	{r7, pc}

08013e12 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8013e12:	b580      	push	{r7, lr}
 8013e14:	b084      	sub	sp, #16
 8013e16:	af00      	add	r7, sp, #0
 8013e18:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e1e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	795b      	ldrb	r3, [r3, #5]
 8013e24:	2b01      	cmp	r3, #1
 8013e26:	d007      	beq.n	8013e38 <dhcp_t1_timeout+0x26>
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	795b      	ldrb	r3, [r3, #5]
 8013e2c:	2b0a      	cmp	r3, #10
 8013e2e:	d003      	beq.n	8013e38 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013e34:	2b05      	cmp	r3, #5
 8013e36:	d116      	bne.n	8013e66 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8013e38:	6878      	ldr	r0, [r7, #4]
 8013e3a:	f000 fb83 	bl	8014544 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	899b      	ldrh	r3, [r3, #12]
 8013e42:	461a      	mov	r2, r3
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	8a5b      	ldrh	r3, [r3, #18]
 8013e48:	1ad3      	subs	r3, r2, r3
 8013e4a:	2b01      	cmp	r3, #1
 8013e4c:	dd0b      	ble.n	8013e66 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	899b      	ldrh	r3, [r3, #12]
 8013e52:	461a      	mov	r2, r3
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	8a5b      	ldrh	r3, [r3, #18]
 8013e58:	1ad3      	subs	r3, r2, r3
 8013e5a:	0fda      	lsrs	r2, r3, #31
 8013e5c:	4413      	add	r3, r2
 8013e5e:	105b      	asrs	r3, r3, #1
 8013e60:	b29a      	uxth	r2, r3
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8013e66:	bf00      	nop
 8013e68:	3710      	adds	r7, #16
 8013e6a:	46bd      	mov	sp, r7
 8013e6c:	bd80      	pop	{r7, pc}

08013e6e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8013e6e:	b580      	push	{r7, lr}
 8013e70:	b084      	sub	sp, #16
 8013e72:	af00      	add	r7, sp, #0
 8013e74:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e7a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	795b      	ldrb	r3, [r3, #5]
 8013e80:	2b01      	cmp	r3, #1
 8013e82:	d00b      	beq.n	8013e9c <dhcp_t2_timeout+0x2e>
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	795b      	ldrb	r3, [r3, #5]
 8013e88:	2b0a      	cmp	r3, #10
 8013e8a:	d007      	beq.n	8013e9c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013e90:	2b05      	cmp	r3, #5
 8013e92:	d003      	beq.n	8013e9c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	795b      	ldrb	r3, [r3, #5]
 8013e98:	2b04      	cmp	r3, #4
 8013e9a:	d116      	bne.n	8013eca <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8013e9c:	6878      	ldr	r0, [r7, #4]
 8013e9e:	f000 fbed 	bl	801467c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	8a9b      	ldrh	r3, [r3, #20]
 8013ea6:	461a      	mov	r2, r3
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	8a5b      	ldrh	r3, [r3, #18]
 8013eac:	1ad3      	subs	r3, r2, r3
 8013eae:	2b01      	cmp	r3, #1
 8013eb0:	dd0b      	ble.n	8013eca <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	8a9b      	ldrh	r3, [r3, #20]
 8013eb6:	461a      	mov	r2, r3
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	8a5b      	ldrh	r3, [r3, #18]
 8013ebc:	1ad3      	subs	r3, r2, r3
 8013ebe:	0fda      	lsrs	r2, r3, #31
 8013ec0:	4413      	add	r3, r2
 8013ec2:	105b      	asrs	r3, r3, #1
 8013ec4:	b29a      	uxth	r2, r3
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8013eca:	bf00      	nop
 8013ecc:	3710      	adds	r7, #16
 8013ece:	46bd      	mov	sp, r7
 8013ed0:	bd80      	pop	{r7, pc}
	...

08013ed4 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b084      	sub	sp, #16
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
 8013edc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ee2:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	2200      	movs	r2, #0
 8013eee:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8013ef0:	4b26      	ldr	r3, [pc, #152]	; (8013f8c <dhcp_handle_ack+0xb8>)
 8013ef2:	78db      	ldrb	r3, [r3, #3]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d003      	beq.n	8013f00 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8013ef8:	4b25      	ldr	r3, [pc, #148]	; (8013f90 <dhcp_handle_ack+0xbc>)
 8013efa:	68da      	ldr	r2, [r3, #12]
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8013f00:	4b22      	ldr	r3, [pc, #136]	; (8013f8c <dhcp_handle_ack+0xb8>)
 8013f02:	791b      	ldrb	r3, [r3, #4]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d004      	beq.n	8013f12 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8013f08:	4b21      	ldr	r3, [pc, #132]	; (8013f90 <dhcp_handle_ack+0xbc>)
 8013f0a:	691a      	ldr	r2, [r3, #16]
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8013f10:	e004      	b.n	8013f1c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f16:	085a      	lsrs	r2, r3, #1
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8013f1c:	4b1b      	ldr	r3, [pc, #108]	; (8013f8c <dhcp_handle_ack+0xb8>)
 8013f1e:	795b      	ldrb	r3, [r3, #5]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d004      	beq.n	8013f2e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8013f24:	4b1a      	ldr	r3, [pc, #104]	; (8013f90 <dhcp_handle_ack+0xbc>)
 8013f26:	695a      	ldr	r2, [r3, #20]
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	631a      	str	r2, [r3, #48]	; 0x30
 8013f2c:	e007      	b.n	8013f3e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013f32:	4613      	mov	r3, r2
 8013f34:	00db      	lsls	r3, r3, #3
 8013f36:	1a9b      	subs	r3, r3, r2
 8013f38:	08da      	lsrs	r2, r3, #3
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013f3e:	683b      	ldr	r3, [r7, #0]
 8013f40:	691a      	ldr	r2, [r3, #16]
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8013f46:	4b11      	ldr	r3, [pc, #68]	; (8013f8c <dhcp_handle_ack+0xb8>)
 8013f48:	799b      	ldrb	r3, [r3, #6]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d00b      	beq.n	8013f66 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8013f4e:	4b10      	ldr	r3, [pc, #64]	; (8013f90 <dhcp_handle_ack+0xbc>)
 8013f50:	699b      	ldr	r3, [r3, #24]
 8013f52:	4618      	mov	r0, r3
 8013f54:	f7f6 fee1 	bl	800ad1a <lwip_htonl>
 8013f58:	4602      	mov	r2, r0
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	2201      	movs	r2, #1
 8013f62:	71da      	strb	r2, [r3, #7]
 8013f64:	e002      	b.n	8013f6c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	2200      	movs	r2, #0
 8013f6a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8013f6c:	4b07      	ldr	r3, [pc, #28]	; (8013f8c <dhcp_handle_ack+0xb8>)
 8013f6e:	79db      	ldrb	r3, [r3, #7]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d007      	beq.n	8013f84 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8013f74:	4b06      	ldr	r3, [pc, #24]	; (8013f90 <dhcp_handle_ack+0xbc>)
 8013f76:	69db      	ldr	r3, [r3, #28]
 8013f78:	4618      	mov	r0, r3
 8013f7a:	f7f6 fece 	bl	800ad1a <lwip_htonl>
 8013f7e:	4602      	mov	r2, r0
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8013f84:	bf00      	nop
 8013f86:	3710      	adds	r7, #16
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	bd80      	pop	{r7, pc}
 8013f8c:	20010ddc 	.word	0x20010ddc
 8013f90:	20010dbc 	.word	0x20010dbc

08013f94 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b084      	sub	sp, #16
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d109      	bne.n	8013fb6 <dhcp_start+0x22>
 8013fa2:	4b37      	ldr	r3, [pc, #220]	; (8014080 <dhcp_start+0xec>)
 8013fa4:	f240 22e7 	movw	r2, #743	; 0x2e7
 8013fa8:	4936      	ldr	r1, [pc, #216]	; (8014084 <dhcp_start+0xf0>)
 8013faa:	4837      	ldr	r0, [pc, #220]	; (8014088 <dhcp_start+0xf4>)
 8013fac:	f004 f8c0 	bl	8018130 <iprintf>
 8013fb0:	f06f 030f 	mvn.w	r3, #15
 8013fb4:	e060      	b.n	8014078 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013fbc:	f003 0301 	and.w	r3, r3, #1
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d109      	bne.n	8013fd8 <dhcp_start+0x44>
 8013fc4:	4b2e      	ldr	r3, [pc, #184]	; (8014080 <dhcp_start+0xec>)
 8013fc6:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8013fca:	4930      	ldr	r1, [pc, #192]	; (801408c <dhcp_start+0xf8>)
 8013fcc:	482e      	ldr	r0, [pc, #184]	; (8014088 <dhcp_start+0xf4>)
 8013fce:	f004 f8af 	bl	8018130 <iprintf>
 8013fd2:	f06f 030f 	mvn.w	r3, #15
 8013fd6:	e04f      	b.n	8014078 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fdc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013fe2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8013fe6:	d202      	bcs.n	8013fee <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8013fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8013fec:	e044      	b.n	8014078 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d10d      	bne.n	8014010 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8013ff4:	2034      	movs	r0, #52	; 0x34
 8013ff6:	f7f7 f9e5 	bl	800b3c4 <mem_malloc>
 8013ffa:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d102      	bne.n	8014008 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8014002:	f04f 33ff 	mov.w	r3, #4294967295
 8014006:	e037      	b.n	8014078 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	68fa      	ldr	r2, [r7, #12]
 801400c:	625a      	str	r2, [r3, #36]	; 0x24
 801400e:	e005      	b.n	801401c <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	791b      	ldrb	r3, [r3, #4]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d001      	beq.n	801401c <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014018:	f7ff fc92 	bl	8013940 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801401c:	2234      	movs	r2, #52	; 0x34
 801401e:	2100      	movs	r1, #0
 8014020:	68f8      	ldr	r0, [r7, #12]
 8014022:	f004 f8ea 	bl	80181fa <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8014026:	f7ff fc39 	bl	801389c <dhcp_inc_pcb_refcount>
 801402a:	4603      	mov	r3, r0
 801402c:	2b00      	cmp	r3, #0
 801402e:	d002      	beq.n	8014036 <dhcp_start+0xa2>
    return ERR_MEM;
 8014030:	f04f 33ff 	mov.w	r3, #4294967295
 8014034:	e020      	b.n	8014078 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	2201      	movs	r2, #1
 801403a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014042:	f003 0304 	and.w	r3, r3, #4
 8014046:	2b00      	cmp	r3, #0
 8014048:	d105      	bne.n	8014056 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801404a:	2102      	movs	r1, #2
 801404c:	68f8      	ldr	r0, [r7, #12]
 801404e:	f000 fd01 	bl	8014a54 <dhcp_set_state>
    return ERR_OK;
 8014052:	2300      	movs	r3, #0
 8014054:	e010      	b.n	8014078 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8014056:	6878      	ldr	r0, [r7, #4]
 8014058:	f000 f8f8 	bl	801424c <dhcp_discover>
 801405c:	4603      	mov	r3, r0
 801405e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8014060:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d005      	beq.n	8014074 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8014068:	6878      	ldr	r0, [r7, #4]
 801406a:	f000 fc59 	bl	8014920 <dhcp_release_and_stop>
    return ERR_MEM;
 801406e:	f04f 33ff 	mov.w	r3, #4294967295
 8014072:	e001      	b.n	8014078 <dhcp_start+0xe4>
  }
  return result;
 8014074:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014078:	4618      	mov	r0, r3
 801407a:	3710      	adds	r7, #16
 801407c:	46bd      	mov	sp, r7
 801407e:	bd80      	pop	{r7, pc}
 8014080:	0801c158 	.word	0x0801c158
 8014084:	0801c23c 	.word	0x0801c23c
 8014088:	0801c1b8 	.word	0x0801c1b8
 801408c:	0801c280 	.word	0x0801c280

08014090 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8014090:	b580      	push	{r7, lr}
 8014092:	b084      	sub	sp, #16
 8014094:	af00      	add	r7, sp, #0
 8014096:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801409c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d025      	beq.n	80140f0 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	795b      	ldrb	r3, [r3, #5]
 80140a8:	2b0a      	cmp	r3, #10
 80140aa:	d008      	beq.n	80140be <dhcp_network_changed+0x2e>
 80140ac:	2b0a      	cmp	r3, #10
 80140ae:	dc0d      	bgt.n	80140cc <dhcp_network_changed+0x3c>
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d01f      	beq.n	80140f4 <dhcp_network_changed+0x64>
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	db09      	blt.n	80140cc <dhcp_network_changed+0x3c>
 80140b8:	3b03      	subs	r3, #3
 80140ba:	2b02      	cmp	r3, #2
 80140bc:	d806      	bhi.n	80140cc <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	2200      	movs	r2, #0
 80140c2:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80140c4:	6878      	ldr	r0, [r7, #4]
 80140c6:	f000 fb75 	bl	80147b4 <dhcp_reboot>
      break;
 80140ca:	e014      	b.n	80140f6 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	795b      	ldrb	r3, [r3, #5]
 80140d0:	2b0c      	cmp	r3, #12
 80140d2:	d906      	bls.n	80140e2 <dhcp_network_changed+0x52>
 80140d4:	4b09      	ldr	r3, [pc, #36]	; (80140fc <dhcp_network_changed+0x6c>)
 80140d6:	f240 326d 	movw	r2, #877	; 0x36d
 80140da:	4909      	ldr	r1, [pc, #36]	; (8014100 <dhcp_network_changed+0x70>)
 80140dc:	4809      	ldr	r0, [pc, #36]	; (8014104 <dhcp_network_changed+0x74>)
 80140de:	f004 f827 	bl	8018130 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	2200      	movs	r2, #0
 80140e6:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80140e8:	6878      	ldr	r0, [r7, #4]
 80140ea:	f000 f8af 	bl	801424c <dhcp_discover>
      break;
 80140ee:	e002      	b.n	80140f6 <dhcp_network_changed+0x66>
    return;
 80140f0:	bf00      	nop
 80140f2:	e000      	b.n	80140f6 <dhcp_network_changed+0x66>
      break;
 80140f4:	bf00      	nop
  }
}
 80140f6:	3710      	adds	r7, #16
 80140f8:	46bd      	mov	sp, r7
 80140fa:	bd80      	pop	{r7, pc}
 80140fc:	0801c158 	.word	0x0801c158
 8014100:	0801c2a4 	.word	0x0801c2a4
 8014104:	0801c1b8 	.word	0x0801c1b8

08014108 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8014108:	b580      	push	{r7, lr}
 801410a:	b084      	sub	sp, #16
 801410c:	af00      	add	r7, sp, #0
 801410e:	6078      	str	r0, [r7, #4]
 8014110:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d107      	bne.n	8014128 <dhcp_arp_reply+0x20>
 8014118:	4b0e      	ldr	r3, [pc, #56]	; (8014154 <dhcp_arp_reply+0x4c>)
 801411a:	f240 328b 	movw	r2, #907	; 0x38b
 801411e:	490e      	ldr	r1, [pc, #56]	; (8014158 <dhcp_arp_reply+0x50>)
 8014120:	480e      	ldr	r0, [pc, #56]	; (801415c <dhcp_arp_reply+0x54>)
 8014122:	f004 f805 	bl	8018130 <iprintf>
 8014126:	e012      	b.n	801414e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801412c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d00c      	beq.n	801414e <dhcp_arp_reply+0x46>
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	795b      	ldrb	r3, [r3, #5]
 8014138:	2b08      	cmp	r3, #8
 801413a:	d108      	bne.n	801414e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801413c:	683b      	ldr	r3, [r7, #0]
 801413e:	681a      	ldr	r2, [r3, #0]
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	69db      	ldr	r3, [r3, #28]
 8014144:	429a      	cmp	r2, r3
 8014146:	d102      	bne.n	801414e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8014148:	6878      	ldr	r0, [r7, #4]
 801414a:	f000 f809 	bl	8014160 <dhcp_decline>
    }
  }
}
 801414e:	3710      	adds	r7, #16
 8014150:	46bd      	mov	sp, r7
 8014152:	bd80      	pop	{r7, pc}
 8014154:	0801c158 	.word	0x0801c158
 8014158:	0801c23c 	.word	0x0801c23c
 801415c:	0801c1b8 	.word	0x0801c1b8

08014160 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8014160:	b5b0      	push	{r4, r5, r7, lr}
 8014162:	b08a      	sub	sp, #40	; 0x28
 8014164:	af02      	add	r7, sp, #8
 8014166:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801416c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801416e:	210c      	movs	r1, #12
 8014170:	69b8      	ldr	r0, [r7, #24]
 8014172:	f000 fc6f 	bl	8014a54 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8014176:	f107 030c 	add.w	r3, r7, #12
 801417a:	2204      	movs	r2, #4
 801417c:	69b9      	ldr	r1, [r7, #24]
 801417e:	6878      	ldr	r0, [r7, #4]
 8014180:	f001 f8f4 	bl	801536c <dhcp_create_msg>
 8014184:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014186:	697b      	ldr	r3, [r7, #20]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d035      	beq.n	80141f8 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801418c:	697b      	ldr	r3, [r7, #20]
 801418e:	685b      	ldr	r3, [r3, #4]
 8014190:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014192:	89b8      	ldrh	r0, [r7, #12]
 8014194:	693b      	ldr	r3, [r7, #16]
 8014196:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801419a:	2304      	movs	r3, #4
 801419c:	2232      	movs	r2, #50	; 0x32
 801419e:	f000 fc73 	bl	8014a88 <dhcp_option>
 80141a2:	4603      	mov	r3, r0
 80141a4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80141a6:	89bc      	ldrh	r4, [r7, #12]
 80141a8:	693b      	ldr	r3, [r7, #16]
 80141aa:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80141ae:	69bb      	ldr	r3, [r7, #24]
 80141b0:	69db      	ldr	r3, [r3, #28]
 80141b2:	4618      	mov	r0, r3
 80141b4:	f7f6 fdb1 	bl	800ad1a <lwip_htonl>
 80141b8:	4603      	mov	r3, r0
 80141ba:	461a      	mov	r2, r3
 80141bc:	4629      	mov	r1, r5
 80141be:	4620      	mov	r0, r4
 80141c0:	f000 fcee 	bl	8014ba0 <dhcp_option_long>
 80141c4:	4603      	mov	r3, r0
 80141c6:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80141c8:	89b8      	ldrh	r0, [r7, #12]
 80141ca:	693b      	ldr	r3, [r7, #16]
 80141cc:	33f0      	adds	r3, #240	; 0xf0
 80141ce:	697a      	ldr	r2, [r7, #20]
 80141d0:	4619      	mov	r1, r3
 80141d2:	f001 f9a1 	bl	8015518 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80141d6:	4b19      	ldr	r3, [pc, #100]	; (801423c <dhcp_decline+0xdc>)
 80141d8:	6818      	ldr	r0, [r3, #0]
 80141da:	4b19      	ldr	r3, [pc, #100]	; (8014240 <dhcp_decline+0xe0>)
 80141dc:	9301      	str	r3, [sp, #4]
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	9300      	str	r3, [sp, #0]
 80141e2:	2343      	movs	r3, #67	; 0x43
 80141e4:	4a17      	ldr	r2, [pc, #92]	; (8014244 <dhcp_decline+0xe4>)
 80141e6:	6979      	ldr	r1, [r7, #20]
 80141e8:	f7ff f8c6 	bl	8013378 <udp_sendto_if_src>
 80141ec:	4603      	mov	r3, r0
 80141ee:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80141f0:	6978      	ldr	r0, [r7, #20]
 80141f2:	f7f8 f9b1 	bl	800c558 <pbuf_free>
 80141f6:	e001      	b.n	80141fc <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80141f8:	23ff      	movs	r3, #255	; 0xff
 80141fa:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80141fc:	69bb      	ldr	r3, [r7, #24]
 80141fe:	799b      	ldrb	r3, [r3, #6]
 8014200:	2bff      	cmp	r3, #255	; 0xff
 8014202:	d005      	beq.n	8014210 <dhcp_decline+0xb0>
    dhcp->tries++;
 8014204:	69bb      	ldr	r3, [r7, #24]
 8014206:	799b      	ldrb	r3, [r3, #6]
 8014208:	3301      	adds	r3, #1
 801420a:	b2da      	uxtb	r2, r3
 801420c:	69bb      	ldr	r3, [r7, #24]
 801420e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8014210:	f242 7310 	movw	r3, #10000	; 0x2710
 8014214:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014216:	89fb      	ldrh	r3, [r7, #14]
 8014218:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801421c:	4a0a      	ldr	r2, [pc, #40]	; (8014248 <dhcp_decline+0xe8>)
 801421e:	fb82 1203 	smull	r1, r2, r2, r3
 8014222:	1152      	asrs	r2, r2, #5
 8014224:	17db      	asrs	r3, r3, #31
 8014226:	1ad3      	subs	r3, r2, r3
 8014228:	b29a      	uxth	r2, r3
 801422a:	69bb      	ldr	r3, [r7, #24]
 801422c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801422e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014232:	4618      	mov	r0, r3
 8014234:	3720      	adds	r7, #32
 8014236:	46bd      	mov	sp, r7
 8014238:	bdb0      	pop	{r4, r5, r7, pc}
 801423a:	bf00      	nop
 801423c:	20010de4 	.word	0x20010de4
 8014240:	08026e3c 	.word	0x08026e3c
 8014244:	08026e40 	.word	0x08026e40
 8014248:	10624dd3 	.word	0x10624dd3

0801424c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801424c:	b580      	push	{r7, lr}
 801424e:	b08a      	sub	sp, #40	; 0x28
 8014250:	af02      	add	r7, sp, #8
 8014252:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014258:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801425a:	2300      	movs	r3, #0
 801425c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801425e:	69bb      	ldr	r3, [r7, #24]
 8014260:	2200      	movs	r2, #0
 8014262:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8014264:	2106      	movs	r1, #6
 8014266:	69b8      	ldr	r0, [r7, #24]
 8014268:	f000 fbf4 	bl	8014a54 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801426c:	f107 0308 	add.w	r3, r7, #8
 8014270:	2201      	movs	r2, #1
 8014272:	69b9      	ldr	r1, [r7, #24]
 8014274:	6878      	ldr	r0, [r7, #4]
 8014276:	f001 f879 	bl	801536c <dhcp_create_msg>
 801427a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801427c:	693b      	ldr	r3, [r7, #16]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d04b      	beq.n	801431a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014282:	693b      	ldr	r3, [r7, #16]
 8014284:	685b      	ldr	r3, [r3, #4]
 8014286:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014288:	8938      	ldrh	r0, [r7, #8]
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014290:	2302      	movs	r3, #2
 8014292:	2239      	movs	r2, #57	; 0x39
 8014294:	f000 fbf8 	bl	8014a88 <dhcp_option>
 8014298:	4603      	mov	r3, r0
 801429a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801429c:	8938      	ldrh	r0, [r7, #8]
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80142a8:	461a      	mov	r2, r3
 80142aa:	f000 fc47 	bl	8014b3c <dhcp_option_short>
 80142ae:	4603      	mov	r3, r0
 80142b0:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80142b2:	8938      	ldrh	r0, [r7, #8]
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80142ba:	2303      	movs	r3, #3
 80142bc:	2237      	movs	r2, #55	; 0x37
 80142be:	f000 fbe3 	bl	8014a88 <dhcp_option>
 80142c2:	4603      	mov	r3, r0
 80142c4:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80142c6:	2300      	movs	r3, #0
 80142c8:	77fb      	strb	r3, [r7, #31]
 80142ca:	e00e      	b.n	80142ea <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80142cc:	8938      	ldrh	r0, [r7, #8]
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80142d4:	7ffb      	ldrb	r3, [r7, #31]
 80142d6:	4a29      	ldr	r2, [pc, #164]	; (801437c <dhcp_discover+0x130>)
 80142d8:	5cd3      	ldrb	r3, [r2, r3]
 80142da:	461a      	mov	r2, r3
 80142dc:	f000 fc08 	bl	8014af0 <dhcp_option_byte>
 80142e0:	4603      	mov	r3, r0
 80142e2:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80142e4:	7ffb      	ldrb	r3, [r7, #31]
 80142e6:	3301      	adds	r3, #1
 80142e8:	77fb      	strb	r3, [r7, #31]
 80142ea:	7ffb      	ldrb	r3, [r7, #31]
 80142ec:	2b02      	cmp	r3, #2
 80142ee:	d9ed      	bls.n	80142cc <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80142f0:	8938      	ldrh	r0, [r7, #8]
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	33f0      	adds	r3, #240	; 0xf0
 80142f6:	693a      	ldr	r2, [r7, #16]
 80142f8:	4619      	mov	r1, r3
 80142fa:	f001 f90d 	bl	8015518 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80142fe:	4b20      	ldr	r3, [pc, #128]	; (8014380 <dhcp_discover+0x134>)
 8014300:	6818      	ldr	r0, [r3, #0]
 8014302:	4b20      	ldr	r3, [pc, #128]	; (8014384 <dhcp_discover+0x138>)
 8014304:	9301      	str	r3, [sp, #4]
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	9300      	str	r3, [sp, #0]
 801430a:	2343      	movs	r3, #67	; 0x43
 801430c:	4a1e      	ldr	r2, [pc, #120]	; (8014388 <dhcp_discover+0x13c>)
 801430e:	6939      	ldr	r1, [r7, #16]
 8014310:	f7ff f832 	bl	8013378 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8014314:	6938      	ldr	r0, [r7, #16]
 8014316:	f7f8 f91f 	bl	800c558 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801431a:	69bb      	ldr	r3, [r7, #24]
 801431c:	799b      	ldrb	r3, [r3, #6]
 801431e:	2bff      	cmp	r3, #255	; 0xff
 8014320:	d005      	beq.n	801432e <dhcp_discover+0xe2>
    dhcp->tries++;
 8014322:	69bb      	ldr	r3, [r7, #24]
 8014324:	799b      	ldrb	r3, [r3, #6]
 8014326:	3301      	adds	r3, #1
 8014328:	b2da      	uxtb	r2, r3
 801432a:	69bb      	ldr	r3, [r7, #24]
 801432c:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801432e:	69bb      	ldr	r3, [r7, #24]
 8014330:	799b      	ldrb	r3, [r3, #6]
 8014332:	2b05      	cmp	r3, #5
 8014334:	d80d      	bhi.n	8014352 <dhcp_discover+0x106>
 8014336:	69bb      	ldr	r3, [r7, #24]
 8014338:	799b      	ldrb	r3, [r3, #6]
 801433a:	461a      	mov	r2, r3
 801433c:	2301      	movs	r3, #1
 801433e:	4093      	lsls	r3, r2
 8014340:	b29b      	uxth	r3, r3
 8014342:	461a      	mov	r2, r3
 8014344:	0152      	lsls	r2, r2, #5
 8014346:	1ad2      	subs	r2, r2, r3
 8014348:	0092      	lsls	r2, r2, #2
 801434a:	4413      	add	r3, r2
 801434c:	00db      	lsls	r3, r3, #3
 801434e:	b29b      	uxth	r3, r3
 8014350:	e001      	b.n	8014356 <dhcp_discover+0x10a>
 8014352:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014356:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014358:	897b      	ldrh	r3, [r7, #10]
 801435a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801435e:	4a0b      	ldr	r2, [pc, #44]	; (801438c <dhcp_discover+0x140>)
 8014360:	fb82 1203 	smull	r1, r2, r2, r3
 8014364:	1152      	asrs	r2, r2, #5
 8014366:	17db      	asrs	r3, r3, #31
 8014368:	1ad3      	subs	r3, r2, r3
 801436a:	b29a      	uxth	r2, r3
 801436c:	69bb      	ldr	r3, [r7, #24]
 801436e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014370:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014374:	4618      	mov	r0, r3
 8014376:	3720      	adds	r7, #32
 8014378:	46bd      	mov	sp, r7
 801437a:	bd80      	pop	{r7, pc}
 801437c:	20000030 	.word	0x20000030
 8014380:	20010de4 	.word	0x20010de4
 8014384:	08026e3c 	.word	0x08026e3c
 8014388:	08026e40 	.word	0x08026e40
 801438c:	10624dd3 	.word	0x10624dd3

08014390 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b088      	sub	sp, #32
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	2b00      	cmp	r3, #0
 801439c:	d107      	bne.n	80143ae <dhcp_bind+0x1e>
 801439e:	4b64      	ldr	r3, [pc, #400]	; (8014530 <dhcp_bind+0x1a0>)
 80143a0:	f240 4215 	movw	r2, #1045	; 0x415
 80143a4:	4963      	ldr	r1, [pc, #396]	; (8014534 <dhcp_bind+0x1a4>)
 80143a6:	4864      	ldr	r0, [pc, #400]	; (8014538 <dhcp_bind+0x1a8>)
 80143a8:	f003 fec2 	bl	8018130 <iprintf>
 80143ac:	e0bc      	b.n	8014528 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143b2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80143b4:	69bb      	ldr	r3, [r7, #24]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d107      	bne.n	80143ca <dhcp_bind+0x3a>
 80143ba:	4b5d      	ldr	r3, [pc, #372]	; (8014530 <dhcp_bind+0x1a0>)
 80143bc:	f240 4217 	movw	r2, #1047	; 0x417
 80143c0:	495e      	ldr	r1, [pc, #376]	; (801453c <dhcp_bind+0x1ac>)
 80143c2:	485d      	ldr	r0, [pc, #372]	; (8014538 <dhcp_bind+0x1a8>)
 80143c4:	f003 feb4 	bl	8018130 <iprintf>
 80143c8:	e0ae      	b.n	8014528 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80143ca:	69bb      	ldr	r3, [r7, #24]
 80143cc:	2200      	movs	r2, #0
 80143ce:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80143d0:	69bb      	ldr	r3, [r7, #24]
 80143d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143d8:	d019      	beq.n	801440e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80143da:	69bb      	ldr	r3, [r7, #24]
 80143dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143de:	331e      	adds	r3, #30
 80143e0:	4a57      	ldr	r2, [pc, #348]	; (8014540 <dhcp_bind+0x1b0>)
 80143e2:	fba2 2303 	umull	r2, r3, r2, r3
 80143e6:	095b      	lsrs	r3, r3, #5
 80143e8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80143ea:	69fb      	ldr	r3, [r7, #28]
 80143ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80143f0:	d302      	bcc.n	80143f8 <dhcp_bind+0x68>
      timeout = 0xffff;
 80143f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80143f6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80143f8:	69fb      	ldr	r3, [r7, #28]
 80143fa:	b29a      	uxth	r2, r3
 80143fc:	69bb      	ldr	r3, [r7, #24]
 80143fe:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8014400:	69bb      	ldr	r3, [r7, #24]
 8014402:	8a9b      	ldrh	r3, [r3, #20]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d102      	bne.n	801440e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8014408:	69bb      	ldr	r3, [r7, #24]
 801440a:	2201      	movs	r2, #1
 801440c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801440e:	69bb      	ldr	r3, [r7, #24]
 8014410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014416:	d01d      	beq.n	8014454 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014418:	69bb      	ldr	r3, [r7, #24]
 801441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801441c:	331e      	adds	r3, #30
 801441e:	4a48      	ldr	r2, [pc, #288]	; (8014540 <dhcp_bind+0x1b0>)
 8014420:	fba2 2303 	umull	r2, r3, r2, r3
 8014424:	095b      	lsrs	r3, r3, #5
 8014426:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014428:	69fb      	ldr	r3, [r7, #28]
 801442a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801442e:	d302      	bcc.n	8014436 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8014430:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014434:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8014436:	69fb      	ldr	r3, [r7, #28]
 8014438:	b29a      	uxth	r2, r3
 801443a:	69bb      	ldr	r3, [r7, #24]
 801443c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801443e:	69bb      	ldr	r3, [r7, #24]
 8014440:	895b      	ldrh	r3, [r3, #10]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d102      	bne.n	801444c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8014446:	69bb      	ldr	r3, [r7, #24]
 8014448:	2201      	movs	r2, #1
 801444a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801444c:	69bb      	ldr	r3, [r7, #24]
 801444e:	895a      	ldrh	r2, [r3, #10]
 8014450:	69bb      	ldr	r3, [r7, #24]
 8014452:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8014454:	69bb      	ldr	r3, [r7, #24]
 8014456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014458:	f1b3 3fff 	cmp.w	r3, #4294967295
 801445c:	d01d      	beq.n	801449a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801445e:	69bb      	ldr	r3, [r7, #24]
 8014460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014462:	331e      	adds	r3, #30
 8014464:	4a36      	ldr	r2, [pc, #216]	; (8014540 <dhcp_bind+0x1b0>)
 8014466:	fba2 2303 	umull	r2, r3, r2, r3
 801446a:	095b      	lsrs	r3, r3, #5
 801446c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801446e:	69fb      	ldr	r3, [r7, #28]
 8014470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014474:	d302      	bcc.n	801447c <dhcp_bind+0xec>
      timeout = 0xffff;
 8014476:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801447a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801447c:	69fb      	ldr	r3, [r7, #28]
 801447e:	b29a      	uxth	r2, r3
 8014480:	69bb      	ldr	r3, [r7, #24]
 8014482:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8014484:	69bb      	ldr	r3, [r7, #24]
 8014486:	899b      	ldrh	r3, [r3, #12]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d102      	bne.n	8014492 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801448c:	69bb      	ldr	r3, [r7, #24]
 801448e:	2201      	movs	r2, #1
 8014490:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8014492:	69bb      	ldr	r3, [r7, #24]
 8014494:	899a      	ldrh	r2, [r3, #12]
 8014496:	69bb      	ldr	r3, [r7, #24]
 8014498:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801449a:	69bb      	ldr	r3, [r7, #24]
 801449c:	895a      	ldrh	r2, [r3, #10]
 801449e:	69bb      	ldr	r3, [r7, #24]
 80144a0:	899b      	ldrh	r3, [r3, #12]
 80144a2:	429a      	cmp	r2, r3
 80144a4:	d306      	bcc.n	80144b4 <dhcp_bind+0x124>
 80144a6:	69bb      	ldr	r3, [r7, #24]
 80144a8:	899b      	ldrh	r3, [r3, #12]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d002      	beq.n	80144b4 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80144ae:	69bb      	ldr	r3, [r7, #24]
 80144b0:	2200      	movs	r2, #0
 80144b2:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80144b4:	69bb      	ldr	r3, [r7, #24]
 80144b6:	79db      	ldrb	r3, [r3, #7]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d003      	beq.n	80144c4 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80144bc:	69bb      	ldr	r3, [r7, #24]
 80144be:	6a1b      	ldr	r3, [r3, #32]
 80144c0:	613b      	str	r3, [r7, #16]
 80144c2:	e014      	b.n	80144ee <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80144c4:	69bb      	ldr	r3, [r7, #24]
 80144c6:	331c      	adds	r3, #28
 80144c8:	781b      	ldrb	r3, [r3, #0]
 80144ca:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80144cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	db02      	blt.n	80144da <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80144d4:	23ff      	movs	r3, #255	; 0xff
 80144d6:	613b      	str	r3, [r7, #16]
 80144d8:	e009      	b.n	80144ee <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80144da:	7dfb      	ldrb	r3, [r7, #23]
 80144dc:	2bbf      	cmp	r3, #191	; 0xbf
 80144de:	d903      	bls.n	80144e8 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80144e0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80144e4:	613b      	str	r3, [r7, #16]
 80144e6:	e002      	b.n	80144ee <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80144e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80144ec:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80144ee:	69bb      	ldr	r3, [r7, #24]
 80144f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144f2:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d108      	bne.n	801450c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80144fa:	69bb      	ldr	r3, [r7, #24]
 80144fc:	69da      	ldr	r2, [r3, #28]
 80144fe:	693b      	ldr	r3, [r7, #16]
 8014500:	4013      	ands	r3, r2
 8014502:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801450a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801450c:	210a      	movs	r1, #10
 801450e:	69b8      	ldr	r0, [r7, #24]
 8014510:	f000 faa0 	bl	8014a54 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8014514:	69bb      	ldr	r3, [r7, #24]
 8014516:	f103 011c 	add.w	r1, r3, #28
 801451a:	f107 030c 	add.w	r3, r7, #12
 801451e:	f107 0210 	add.w	r2, r7, #16
 8014522:	6878      	ldr	r0, [r7, #4]
 8014524:	f7f7 fb0a 	bl	800bb3c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8014528:	3720      	adds	r7, #32
 801452a:	46bd      	mov	sp, r7
 801452c:	bd80      	pop	{r7, pc}
 801452e:	bf00      	nop
 8014530:	0801c158 	.word	0x0801c158
 8014534:	0801c2b8 	.word	0x0801c2b8
 8014538:	0801c1b8 	.word	0x0801c1b8
 801453c:	0801c2d4 	.word	0x0801c2d4
 8014540:	88888889 	.word	0x88888889

08014544 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8014544:	b580      	push	{r7, lr}
 8014546:	b08a      	sub	sp, #40	; 0x28
 8014548:	af02      	add	r7, sp, #8
 801454a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014550:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8014552:	2105      	movs	r1, #5
 8014554:	69b8      	ldr	r0, [r7, #24]
 8014556:	f000 fa7d 	bl	8014a54 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801455a:	f107 030c 	add.w	r3, r7, #12
 801455e:	2203      	movs	r2, #3
 8014560:	69b9      	ldr	r1, [r7, #24]
 8014562:	6878      	ldr	r0, [r7, #4]
 8014564:	f000 ff02 	bl	801536c <dhcp_create_msg>
 8014568:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801456a:	697b      	ldr	r3, [r7, #20]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d04e      	beq.n	801460e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014570:	697b      	ldr	r3, [r7, #20]
 8014572:	685b      	ldr	r3, [r3, #4]
 8014574:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014576:	89b8      	ldrh	r0, [r7, #12]
 8014578:	693b      	ldr	r3, [r7, #16]
 801457a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801457e:	2302      	movs	r3, #2
 8014580:	2239      	movs	r2, #57	; 0x39
 8014582:	f000 fa81 	bl	8014a88 <dhcp_option>
 8014586:	4603      	mov	r3, r0
 8014588:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801458a:	89b8      	ldrh	r0, [r7, #12]
 801458c:	693b      	ldr	r3, [r7, #16]
 801458e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014596:	461a      	mov	r2, r3
 8014598:	f000 fad0 	bl	8014b3c <dhcp_option_short>
 801459c:	4603      	mov	r3, r0
 801459e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80145a0:	89b8      	ldrh	r0, [r7, #12]
 80145a2:	693b      	ldr	r3, [r7, #16]
 80145a4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80145a8:	2303      	movs	r3, #3
 80145aa:	2237      	movs	r2, #55	; 0x37
 80145ac:	f000 fa6c 	bl	8014a88 <dhcp_option>
 80145b0:	4603      	mov	r3, r0
 80145b2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80145b4:	2300      	movs	r3, #0
 80145b6:	77bb      	strb	r3, [r7, #30]
 80145b8:	e00e      	b.n	80145d8 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80145ba:	89b8      	ldrh	r0, [r7, #12]
 80145bc:	693b      	ldr	r3, [r7, #16]
 80145be:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80145c2:	7fbb      	ldrb	r3, [r7, #30]
 80145c4:	4a2a      	ldr	r2, [pc, #168]	; (8014670 <dhcp_renew+0x12c>)
 80145c6:	5cd3      	ldrb	r3, [r2, r3]
 80145c8:	461a      	mov	r2, r3
 80145ca:	f000 fa91 	bl	8014af0 <dhcp_option_byte>
 80145ce:	4603      	mov	r3, r0
 80145d0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80145d2:	7fbb      	ldrb	r3, [r7, #30]
 80145d4:	3301      	adds	r3, #1
 80145d6:	77bb      	strb	r3, [r7, #30]
 80145d8:	7fbb      	ldrb	r3, [r7, #30]
 80145da:	2b02      	cmp	r3, #2
 80145dc:	d9ed      	bls.n	80145ba <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80145de:	89b8      	ldrh	r0, [r7, #12]
 80145e0:	693b      	ldr	r3, [r7, #16]
 80145e2:	33f0      	adds	r3, #240	; 0xf0
 80145e4:	697a      	ldr	r2, [r7, #20]
 80145e6:	4619      	mov	r1, r3
 80145e8:	f000 ff96 	bl	8015518 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80145ec:	4b21      	ldr	r3, [pc, #132]	; (8014674 <dhcp_renew+0x130>)
 80145ee:	6818      	ldr	r0, [r3, #0]
 80145f0:	69bb      	ldr	r3, [r7, #24]
 80145f2:	f103 0218 	add.w	r2, r3, #24
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	9300      	str	r3, [sp, #0]
 80145fa:	2343      	movs	r3, #67	; 0x43
 80145fc:	6979      	ldr	r1, [r7, #20]
 80145fe:	f7fe fe47 	bl	8013290 <udp_sendto_if>
 8014602:	4603      	mov	r3, r0
 8014604:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014606:	6978      	ldr	r0, [r7, #20]
 8014608:	f7f7 ffa6 	bl	800c558 <pbuf_free>
 801460c:	e001      	b.n	8014612 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801460e:	23ff      	movs	r3, #255	; 0xff
 8014610:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014612:	69bb      	ldr	r3, [r7, #24]
 8014614:	799b      	ldrb	r3, [r3, #6]
 8014616:	2bff      	cmp	r3, #255	; 0xff
 8014618:	d005      	beq.n	8014626 <dhcp_renew+0xe2>
    dhcp->tries++;
 801461a:	69bb      	ldr	r3, [r7, #24]
 801461c:	799b      	ldrb	r3, [r3, #6]
 801461e:	3301      	adds	r3, #1
 8014620:	b2da      	uxtb	r2, r3
 8014622:	69bb      	ldr	r3, [r7, #24]
 8014624:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8014626:	69bb      	ldr	r3, [r7, #24]
 8014628:	799b      	ldrb	r3, [r3, #6]
 801462a:	2b09      	cmp	r3, #9
 801462c:	d80a      	bhi.n	8014644 <dhcp_renew+0x100>
 801462e:	69bb      	ldr	r3, [r7, #24]
 8014630:	799b      	ldrb	r3, [r3, #6]
 8014632:	b29b      	uxth	r3, r3
 8014634:	461a      	mov	r2, r3
 8014636:	0152      	lsls	r2, r2, #5
 8014638:	1ad2      	subs	r2, r2, r3
 801463a:	0092      	lsls	r2, r2, #2
 801463c:	4413      	add	r3, r2
 801463e:	011b      	lsls	r3, r3, #4
 8014640:	b29b      	uxth	r3, r3
 8014642:	e001      	b.n	8014648 <dhcp_renew+0x104>
 8014644:	f644 6320 	movw	r3, #20000	; 0x4e20
 8014648:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801464a:	89fb      	ldrh	r3, [r7, #14]
 801464c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014650:	4a09      	ldr	r2, [pc, #36]	; (8014678 <dhcp_renew+0x134>)
 8014652:	fb82 1203 	smull	r1, r2, r2, r3
 8014656:	1152      	asrs	r2, r2, #5
 8014658:	17db      	asrs	r3, r3, #31
 801465a:	1ad3      	subs	r3, r2, r3
 801465c:	b29a      	uxth	r2, r3
 801465e:	69bb      	ldr	r3, [r7, #24]
 8014660:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014662:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014666:	4618      	mov	r0, r3
 8014668:	3720      	adds	r7, #32
 801466a:	46bd      	mov	sp, r7
 801466c:	bd80      	pop	{r7, pc}
 801466e:	bf00      	nop
 8014670:	20000030 	.word	0x20000030
 8014674:	20010de4 	.word	0x20010de4
 8014678:	10624dd3 	.word	0x10624dd3

0801467c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801467c:	b580      	push	{r7, lr}
 801467e:	b08a      	sub	sp, #40	; 0x28
 8014680:	af02      	add	r7, sp, #8
 8014682:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014688:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801468a:	2104      	movs	r1, #4
 801468c:	69b8      	ldr	r0, [r7, #24]
 801468e:	f000 f9e1 	bl	8014a54 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014692:	f107 030c 	add.w	r3, r7, #12
 8014696:	2203      	movs	r2, #3
 8014698:	69b9      	ldr	r1, [r7, #24]
 801469a:	6878      	ldr	r0, [r7, #4]
 801469c:	f000 fe66 	bl	801536c <dhcp_create_msg>
 80146a0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80146a2:	697b      	ldr	r3, [r7, #20]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d04c      	beq.n	8014742 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80146a8:	697b      	ldr	r3, [r7, #20]
 80146aa:	685b      	ldr	r3, [r3, #4]
 80146ac:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80146ae:	89b8      	ldrh	r0, [r7, #12]
 80146b0:	693b      	ldr	r3, [r7, #16]
 80146b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80146b6:	2302      	movs	r3, #2
 80146b8:	2239      	movs	r2, #57	; 0x39
 80146ba:	f000 f9e5 	bl	8014a88 <dhcp_option>
 80146be:	4603      	mov	r3, r0
 80146c0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80146c2:	89b8      	ldrh	r0, [r7, #12]
 80146c4:	693b      	ldr	r3, [r7, #16]
 80146c6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80146ce:	461a      	mov	r2, r3
 80146d0:	f000 fa34 	bl	8014b3c <dhcp_option_short>
 80146d4:	4603      	mov	r3, r0
 80146d6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80146d8:	89b8      	ldrh	r0, [r7, #12]
 80146da:	693b      	ldr	r3, [r7, #16]
 80146dc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80146e0:	2303      	movs	r3, #3
 80146e2:	2237      	movs	r2, #55	; 0x37
 80146e4:	f000 f9d0 	bl	8014a88 <dhcp_option>
 80146e8:	4603      	mov	r3, r0
 80146ea:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80146ec:	2300      	movs	r3, #0
 80146ee:	77bb      	strb	r3, [r7, #30]
 80146f0:	e00e      	b.n	8014710 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80146f2:	89b8      	ldrh	r0, [r7, #12]
 80146f4:	693b      	ldr	r3, [r7, #16]
 80146f6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80146fa:	7fbb      	ldrb	r3, [r7, #30]
 80146fc:	4a29      	ldr	r2, [pc, #164]	; (80147a4 <dhcp_rebind+0x128>)
 80146fe:	5cd3      	ldrb	r3, [r2, r3]
 8014700:	461a      	mov	r2, r3
 8014702:	f000 f9f5 	bl	8014af0 <dhcp_option_byte>
 8014706:	4603      	mov	r3, r0
 8014708:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801470a:	7fbb      	ldrb	r3, [r7, #30]
 801470c:	3301      	adds	r3, #1
 801470e:	77bb      	strb	r3, [r7, #30]
 8014710:	7fbb      	ldrb	r3, [r7, #30]
 8014712:	2b02      	cmp	r3, #2
 8014714:	d9ed      	bls.n	80146f2 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014716:	89b8      	ldrh	r0, [r7, #12]
 8014718:	693b      	ldr	r3, [r7, #16]
 801471a:	33f0      	adds	r3, #240	; 0xf0
 801471c:	697a      	ldr	r2, [r7, #20]
 801471e:	4619      	mov	r1, r3
 8014720:	f000 fefa 	bl	8015518 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014724:	4b20      	ldr	r3, [pc, #128]	; (80147a8 <dhcp_rebind+0x12c>)
 8014726:	6818      	ldr	r0, [r3, #0]
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	9300      	str	r3, [sp, #0]
 801472c:	2343      	movs	r3, #67	; 0x43
 801472e:	4a1f      	ldr	r2, [pc, #124]	; (80147ac <dhcp_rebind+0x130>)
 8014730:	6979      	ldr	r1, [r7, #20]
 8014732:	f7fe fdad 	bl	8013290 <udp_sendto_if>
 8014736:	4603      	mov	r3, r0
 8014738:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801473a:	6978      	ldr	r0, [r7, #20]
 801473c:	f7f7 ff0c 	bl	800c558 <pbuf_free>
 8014740:	e001      	b.n	8014746 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014742:	23ff      	movs	r3, #255	; 0xff
 8014744:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014746:	69bb      	ldr	r3, [r7, #24]
 8014748:	799b      	ldrb	r3, [r3, #6]
 801474a:	2bff      	cmp	r3, #255	; 0xff
 801474c:	d005      	beq.n	801475a <dhcp_rebind+0xde>
    dhcp->tries++;
 801474e:	69bb      	ldr	r3, [r7, #24]
 8014750:	799b      	ldrb	r3, [r3, #6]
 8014752:	3301      	adds	r3, #1
 8014754:	b2da      	uxtb	r2, r3
 8014756:	69bb      	ldr	r3, [r7, #24]
 8014758:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801475a:	69bb      	ldr	r3, [r7, #24]
 801475c:	799b      	ldrb	r3, [r3, #6]
 801475e:	2b09      	cmp	r3, #9
 8014760:	d80a      	bhi.n	8014778 <dhcp_rebind+0xfc>
 8014762:	69bb      	ldr	r3, [r7, #24]
 8014764:	799b      	ldrb	r3, [r3, #6]
 8014766:	b29b      	uxth	r3, r3
 8014768:	461a      	mov	r2, r3
 801476a:	0152      	lsls	r2, r2, #5
 801476c:	1ad2      	subs	r2, r2, r3
 801476e:	0092      	lsls	r2, r2, #2
 8014770:	4413      	add	r3, r2
 8014772:	00db      	lsls	r3, r3, #3
 8014774:	b29b      	uxth	r3, r3
 8014776:	e001      	b.n	801477c <dhcp_rebind+0x100>
 8014778:	f242 7310 	movw	r3, #10000	; 0x2710
 801477c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801477e:	89fb      	ldrh	r3, [r7, #14]
 8014780:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014784:	4a0a      	ldr	r2, [pc, #40]	; (80147b0 <dhcp_rebind+0x134>)
 8014786:	fb82 1203 	smull	r1, r2, r2, r3
 801478a:	1152      	asrs	r2, r2, #5
 801478c:	17db      	asrs	r3, r3, #31
 801478e:	1ad3      	subs	r3, r2, r3
 8014790:	b29a      	uxth	r2, r3
 8014792:	69bb      	ldr	r3, [r7, #24]
 8014794:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014796:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801479a:	4618      	mov	r0, r3
 801479c:	3720      	adds	r7, #32
 801479e:	46bd      	mov	sp, r7
 80147a0:	bd80      	pop	{r7, pc}
 80147a2:	bf00      	nop
 80147a4:	20000030 	.word	0x20000030
 80147a8:	20010de4 	.word	0x20010de4
 80147ac:	08026e40 	.word	0x08026e40
 80147b0:	10624dd3 	.word	0x10624dd3

080147b4 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80147b4:	b5b0      	push	{r4, r5, r7, lr}
 80147b6:	b08a      	sub	sp, #40	; 0x28
 80147b8:	af02      	add	r7, sp, #8
 80147ba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147c0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80147c2:	2103      	movs	r1, #3
 80147c4:	69b8      	ldr	r0, [r7, #24]
 80147c6:	f000 f945 	bl	8014a54 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80147ca:	f107 030c 	add.w	r3, r7, #12
 80147ce:	2203      	movs	r2, #3
 80147d0:	69b9      	ldr	r1, [r7, #24]
 80147d2:	6878      	ldr	r0, [r7, #4]
 80147d4:	f000 fdca 	bl	801536c <dhcp_create_msg>
 80147d8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80147da:	697b      	ldr	r3, [r7, #20]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d066      	beq.n	80148ae <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80147e0:	697b      	ldr	r3, [r7, #20]
 80147e2:	685b      	ldr	r3, [r3, #4]
 80147e4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80147e6:	89b8      	ldrh	r0, [r7, #12]
 80147e8:	693b      	ldr	r3, [r7, #16]
 80147ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80147ee:	2302      	movs	r3, #2
 80147f0:	2239      	movs	r2, #57	; 0x39
 80147f2:	f000 f949 	bl	8014a88 <dhcp_option>
 80147f6:	4603      	mov	r3, r0
 80147f8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80147fa:	89b8      	ldrh	r0, [r7, #12]
 80147fc:	693b      	ldr	r3, [r7, #16]
 80147fe:	33f0      	adds	r3, #240	; 0xf0
 8014800:	f44f 7210 	mov.w	r2, #576	; 0x240
 8014804:	4619      	mov	r1, r3
 8014806:	f000 f999 	bl	8014b3c <dhcp_option_short>
 801480a:	4603      	mov	r3, r0
 801480c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801480e:	89b8      	ldrh	r0, [r7, #12]
 8014810:	693b      	ldr	r3, [r7, #16]
 8014812:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014816:	2304      	movs	r3, #4
 8014818:	2232      	movs	r2, #50	; 0x32
 801481a:	f000 f935 	bl	8014a88 <dhcp_option>
 801481e:	4603      	mov	r3, r0
 8014820:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014822:	89bc      	ldrh	r4, [r7, #12]
 8014824:	693b      	ldr	r3, [r7, #16]
 8014826:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801482a:	69bb      	ldr	r3, [r7, #24]
 801482c:	69db      	ldr	r3, [r3, #28]
 801482e:	4618      	mov	r0, r3
 8014830:	f7f6 fa73 	bl	800ad1a <lwip_htonl>
 8014834:	4603      	mov	r3, r0
 8014836:	461a      	mov	r2, r3
 8014838:	4629      	mov	r1, r5
 801483a:	4620      	mov	r0, r4
 801483c:	f000 f9b0 	bl	8014ba0 <dhcp_option_long>
 8014840:	4603      	mov	r3, r0
 8014842:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014844:	89b8      	ldrh	r0, [r7, #12]
 8014846:	693b      	ldr	r3, [r7, #16]
 8014848:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801484c:	2303      	movs	r3, #3
 801484e:	2237      	movs	r2, #55	; 0x37
 8014850:	f000 f91a 	bl	8014a88 <dhcp_option>
 8014854:	4603      	mov	r3, r0
 8014856:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014858:	2300      	movs	r3, #0
 801485a:	77bb      	strb	r3, [r7, #30]
 801485c:	e00e      	b.n	801487c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801485e:	89b8      	ldrh	r0, [r7, #12]
 8014860:	693b      	ldr	r3, [r7, #16]
 8014862:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014866:	7fbb      	ldrb	r3, [r7, #30]
 8014868:	4a29      	ldr	r2, [pc, #164]	; (8014910 <dhcp_reboot+0x15c>)
 801486a:	5cd3      	ldrb	r3, [r2, r3]
 801486c:	461a      	mov	r2, r3
 801486e:	f000 f93f 	bl	8014af0 <dhcp_option_byte>
 8014872:	4603      	mov	r3, r0
 8014874:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014876:	7fbb      	ldrb	r3, [r7, #30]
 8014878:	3301      	adds	r3, #1
 801487a:	77bb      	strb	r3, [r7, #30]
 801487c:	7fbb      	ldrb	r3, [r7, #30]
 801487e:	2b02      	cmp	r3, #2
 8014880:	d9ed      	bls.n	801485e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014882:	89b8      	ldrh	r0, [r7, #12]
 8014884:	693b      	ldr	r3, [r7, #16]
 8014886:	33f0      	adds	r3, #240	; 0xf0
 8014888:	697a      	ldr	r2, [r7, #20]
 801488a:	4619      	mov	r1, r3
 801488c:	f000 fe44 	bl	8015518 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014890:	4b20      	ldr	r3, [pc, #128]	; (8014914 <dhcp_reboot+0x160>)
 8014892:	6818      	ldr	r0, [r3, #0]
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	9300      	str	r3, [sp, #0]
 8014898:	2343      	movs	r3, #67	; 0x43
 801489a:	4a1f      	ldr	r2, [pc, #124]	; (8014918 <dhcp_reboot+0x164>)
 801489c:	6979      	ldr	r1, [r7, #20]
 801489e:	f7fe fcf7 	bl	8013290 <udp_sendto_if>
 80148a2:	4603      	mov	r3, r0
 80148a4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80148a6:	6978      	ldr	r0, [r7, #20]
 80148a8:	f7f7 fe56 	bl	800c558 <pbuf_free>
 80148ac:	e001      	b.n	80148b2 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80148ae:	23ff      	movs	r3, #255	; 0xff
 80148b0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80148b2:	69bb      	ldr	r3, [r7, #24]
 80148b4:	799b      	ldrb	r3, [r3, #6]
 80148b6:	2bff      	cmp	r3, #255	; 0xff
 80148b8:	d005      	beq.n	80148c6 <dhcp_reboot+0x112>
    dhcp->tries++;
 80148ba:	69bb      	ldr	r3, [r7, #24]
 80148bc:	799b      	ldrb	r3, [r3, #6]
 80148be:	3301      	adds	r3, #1
 80148c0:	b2da      	uxtb	r2, r3
 80148c2:	69bb      	ldr	r3, [r7, #24]
 80148c4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80148c6:	69bb      	ldr	r3, [r7, #24]
 80148c8:	799b      	ldrb	r3, [r3, #6]
 80148ca:	2b09      	cmp	r3, #9
 80148cc:	d80a      	bhi.n	80148e4 <dhcp_reboot+0x130>
 80148ce:	69bb      	ldr	r3, [r7, #24]
 80148d0:	799b      	ldrb	r3, [r3, #6]
 80148d2:	b29b      	uxth	r3, r3
 80148d4:	461a      	mov	r2, r3
 80148d6:	0152      	lsls	r2, r2, #5
 80148d8:	1ad2      	subs	r2, r2, r3
 80148da:	0092      	lsls	r2, r2, #2
 80148dc:	4413      	add	r3, r2
 80148de:	00db      	lsls	r3, r3, #3
 80148e0:	b29b      	uxth	r3, r3
 80148e2:	e001      	b.n	80148e8 <dhcp_reboot+0x134>
 80148e4:	f242 7310 	movw	r3, #10000	; 0x2710
 80148e8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80148ea:	89fb      	ldrh	r3, [r7, #14]
 80148ec:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80148f0:	4a0a      	ldr	r2, [pc, #40]	; (801491c <dhcp_reboot+0x168>)
 80148f2:	fb82 1203 	smull	r1, r2, r2, r3
 80148f6:	1152      	asrs	r2, r2, #5
 80148f8:	17db      	asrs	r3, r3, #31
 80148fa:	1ad3      	subs	r3, r2, r3
 80148fc:	b29a      	uxth	r2, r3
 80148fe:	69bb      	ldr	r3, [r7, #24]
 8014900:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014902:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014906:	4618      	mov	r0, r3
 8014908:	3720      	adds	r7, #32
 801490a:	46bd      	mov	sp, r7
 801490c:	bdb0      	pop	{r4, r5, r7, pc}
 801490e:	bf00      	nop
 8014910:	20000030 	.word	0x20000030
 8014914:	20010de4 	.word	0x20010de4
 8014918:	08026e40 	.word	0x08026e40
 801491c:	10624dd3 	.word	0x10624dd3

08014920 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8014920:	b5b0      	push	{r4, r5, r7, lr}
 8014922:	b08a      	sub	sp, #40	; 0x28
 8014924:	af02      	add	r7, sp, #8
 8014926:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801492c:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801492e:	69fb      	ldr	r3, [r7, #28]
 8014930:	2b00      	cmp	r3, #0
 8014932:	f000 8084 	beq.w	8014a3e <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8014936:	69fb      	ldr	r3, [r7, #28]
 8014938:	795b      	ldrb	r3, [r3, #5]
 801493a:	2b00      	cmp	r3, #0
 801493c:	f000 8081 	beq.w	8014a42 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8014940:	69fb      	ldr	r3, [r7, #28]
 8014942:	699b      	ldr	r3, [r3, #24]
 8014944:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8014946:	69fb      	ldr	r3, [r7, #28]
 8014948:	2200      	movs	r2, #0
 801494a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801494c:	69fb      	ldr	r3, [r7, #28]
 801494e:	2200      	movs	r2, #0
 8014950:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014952:	69fb      	ldr	r3, [r7, #28]
 8014954:	2200      	movs	r2, #0
 8014956:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014958:	69fb      	ldr	r3, [r7, #28]
 801495a:	2200      	movs	r2, #0
 801495c:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801495e:	69fb      	ldr	r3, [r7, #28]
 8014960:	2200      	movs	r2, #0
 8014962:	631a      	str	r2, [r3, #48]	; 0x30
 8014964:	69fb      	ldr	r3, [r7, #28]
 8014966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014968:	69fb      	ldr	r3, [r7, #28]
 801496a:	62da      	str	r2, [r3, #44]	; 0x2c
 801496c:	69fb      	ldr	r3, [r7, #28]
 801496e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014970:	69fb      	ldr	r3, [r7, #28]
 8014972:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8014974:	69fb      	ldr	r3, [r7, #28]
 8014976:	2200      	movs	r2, #0
 8014978:	829a      	strh	r2, [r3, #20]
 801497a:	69fb      	ldr	r3, [r7, #28]
 801497c:	8a9a      	ldrh	r2, [r3, #20]
 801497e:	69fb      	ldr	r3, [r7, #28]
 8014980:	825a      	strh	r2, [r3, #18]
 8014982:	69fb      	ldr	r3, [r7, #28]
 8014984:	8a5a      	ldrh	r2, [r3, #18]
 8014986:	69fb      	ldr	r3, [r7, #28]
 8014988:	821a      	strh	r2, [r3, #16]
 801498a:	69fb      	ldr	r3, [r7, #28]
 801498c:	8a1a      	ldrh	r2, [r3, #16]
 801498e:	69fb      	ldr	r3, [r7, #28]
 8014990:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8014992:	6878      	ldr	r0, [r7, #4]
 8014994:	f000 fdee 	bl	8015574 <dhcp_supplied_address>
 8014998:	4603      	mov	r3, r0
 801499a:	2b00      	cmp	r3, #0
 801499c:	d03b      	beq.n	8014a16 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801499e:	f107 030e 	add.w	r3, r7, #14
 80149a2:	2207      	movs	r2, #7
 80149a4:	69f9      	ldr	r1, [r7, #28]
 80149a6:	6878      	ldr	r0, [r7, #4]
 80149a8:	f000 fce0 	bl	801536c <dhcp_create_msg>
 80149ac:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80149ae:	69bb      	ldr	r3, [r7, #24]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d030      	beq.n	8014a16 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80149b4:	69bb      	ldr	r3, [r7, #24]
 80149b6:	685b      	ldr	r3, [r3, #4]
 80149b8:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80149ba:	89f8      	ldrh	r0, [r7, #14]
 80149bc:	697b      	ldr	r3, [r7, #20]
 80149be:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80149c2:	2304      	movs	r3, #4
 80149c4:	2236      	movs	r2, #54	; 0x36
 80149c6:	f000 f85f 	bl	8014a88 <dhcp_option>
 80149ca:	4603      	mov	r3, r0
 80149cc:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80149ce:	89fc      	ldrh	r4, [r7, #14]
 80149d0:	697b      	ldr	r3, [r7, #20]
 80149d2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80149d6:	693b      	ldr	r3, [r7, #16]
 80149d8:	4618      	mov	r0, r3
 80149da:	f7f6 f99e 	bl	800ad1a <lwip_htonl>
 80149de:	4603      	mov	r3, r0
 80149e0:	461a      	mov	r2, r3
 80149e2:	4629      	mov	r1, r5
 80149e4:	4620      	mov	r0, r4
 80149e6:	f000 f8db 	bl	8014ba0 <dhcp_option_long>
 80149ea:	4603      	mov	r3, r0
 80149ec:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80149ee:	89f8      	ldrh	r0, [r7, #14]
 80149f0:	697b      	ldr	r3, [r7, #20]
 80149f2:	33f0      	adds	r3, #240	; 0xf0
 80149f4:	69ba      	ldr	r2, [r7, #24]
 80149f6:	4619      	mov	r1, r3
 80149f8:	f000 fd8e 	bl	8015518 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80149fc:	4b13      	ldr	r3, [pc, #76]	; (8014a4c <dhcp_release_and_stop+0x12c>)
 80149fe:	6818      	ldr	r0, [r3, #0]
 8014a00:	f107 0210 	add.w	r2, r7, #16
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	9300      	str	r3, [sp, #0]
 8014a08:	2343      	movs	r3, #67	; 0x43
 8014a0a:	69b9      	ldr	r1, [r7, #24]
 8014a0c:	f7fe fc40 	bl	8013290 <udp_sendto_if>
      pbuf_free(p_out);
 8014a10:	69b8      	ldr	r0, [r7, #24]
 8014a12:	f7f7 fda1 	bl	800c558 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014a16:	4b0e      	ldr	r3, [pc, #56]	; (8014a50 <dhcp_release_and_stop+0x130>)
 8014a18:	4a0d      	ldr	r2, [pc, #52]	; (8014a50 <dhcp_release_and_stop+0x130>)
 8014a1a:	490d      	ldr	r1, [pc, #52]	; (8014a50 <dhcp_release_and_stop+0x130>)
 8014a1c:	6878      	ldr	r0, [r7, #4]
 8014a1e:	f7f7 f88d 	bl	800bb3c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8014a22:	2100      	movs	r1, #0
 8014a24:	69f8      	ldr	r0, [r7, #28]
 8014a26:	f000 f815 	bl	8014a54 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8014a2a:	69fb      	ldr	r3, [r7, #28]
 8014a2c:	791b      	ldrb	r3, [r3, #4]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d008      	beq.n	8014a44 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014a32:	f7fe ff85 	bl	8013940 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8014a36:	69fb      	ldr	r3, [r7, #28]
 8014a38:	2200      	movs	r2, #0
 8014a3a:	711a      	strb	r2, [r3, #4]
 8014a3c:	e002      	b.n	8014a44 <dhcp_release_and_stop+0x124>
    return;
 8014a3e:	bf00      	nop
 8014a40:	e000      	b.n	8014a44 <dhcp_release_and_stop+0x124>
    return;
 8014a42:	bf00      	nop
  }
}
 8014a44:	3720      	adds	r7, #32
 8014a46:	46bd      	mov	sp, r7
 8014a48:	bdb0      	pop	{r4, r5, r7, pc}
 8014a4a:	bf00      	nop
 8014a4c:	20010de4 	.word	0x20010de4
 8014a50:	08026e3c 	.word	0x08026e3c

08014a54 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8014a54:	b480      	push	{r7}
 8014a56:	b083      	sub	sp, #12
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	6078      	str	r0, [r7, #4]
 8014a5c:	460b      	mov	r3, r1
 8014a5e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	795b      	ldrb	r3, [r3, #5]
 8014a64:	78fa      	ldrb	r2, [r7, #3]
 8014a66:	429a      	cmp	r2, r3
 8014a68:	d008      	beq.n	8014a7c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	78fa      	ldrb	r2, [r7, #3]
 8014a6e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	2200      	movs	r2, #0
 8014a74:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	2200      	movs	r2, #0
 8014a7a:	811a      	strh	r2, [r3, #8]
  }
}
 8014a7c:	bf00      	nop
 8014a7e:	370c      	adds	r7, #12
 8014a80:	46bd      	mov	sp, r7
 8014a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a86:	4770      	bx	lr

08014a88 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b082      	sub	sp, #8
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	6039      	str	r1, [r7, #0]
 8014a90:	4611      	mov	r1, r2
 8014a92:	461a      	mov	r2, r3
 8014a94:	4603      	mov	r3, r0
 8014a96:	80fb      	strh	r3, [r7, #6]
 8014a98:	460b      	mov	r3, r1
 8014a9a:	717b      	strb	r3, [r7, #5]
 8014a9c:	4613      	mov	r3, r2
 8014a9e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8014aa0:	88fa      	ldrh	r2, [r7, #6]
 8014aa2:	793b      	ldrb	r3, [r7, #4]
 8014aa4:	4413      	add	r3, r2
 8014aa6:	3302      	adds	r3, #2
 8014aa8:	2b44      	cmp	r3, #68	; 0x44
 8014aaa:	d906      	bls.n	8014aba <dhcp_option+0x32>
 8014aac:	4b0d      	ldr	r3, [pc, #52]	; (8014ae4 <dhcp_option+0x5c>)
 8014aae:	f240 529a 	movw	r2, #1434	; 0x59a
 8014ab2:	490d      	ldr	r1, [pc, #52]	; (8014ae8 <dhcp_option+0x60>)
 8014ab4:	480d      	ldr	r0, [pc, #52]	; (8014aec <dhcp_option+0x64>)
 8014ab6:	f003 fb3b 	bl	8018130 <iprintf>
  options[options_out_len++] = option_type;
 8014aba:	88fb      	ldrh	r3, [r7, #6]
 8014abc:	1c5a      	adds	r2, r3, #1
 8014abe:	80fa      	strh	r2, [r7, #6]
 8014ac0:	461a      	mov	r2, r3
 8014ac2:	683b      	ldr	r3, [r7, #0]
 8014ac4:	4413      	add	r3, r2
 8014ac6:	797a      	ldrb	r2, [r7, #5]
 8014ac8:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8014aca:	88fb      	ldrh	r3, [r7, #6]
 8014acc:	1c5a      	adds	r2, r3, #1
 8014ace:	80fa      	strh	r2, [r7, #6]
 8014ad0:	461a      	mov	r2, r3
 8014ad2:	683b      	ldr	r3, [r7, #0]
 8014ad4:	4413      	add	r3, r2
 8014ad6:	793a      	ldrb	r2, [r7, #4]
 8014ad8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014ada:	88fb      	ldrh	r3, [r7, #6]
}
 8014adc:	4618      	mov	r0, r3
 8014ade:	3708      	adds	r7, #8
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	bd80      	pop	{r7, pc}
 8014ae4:	0801c158 	.word	0x0801c158
 8014ae8:	0801c2ec 	.word	0x0801c2ec
 8014aec:	0801c1b8 	.word	0x0801c1b8

08014af0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b082      	sub	sp, #8
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	4603      	mov	r3, r0
 8014af8:	6039      	str	r1, [r7, #0]
 8014afa:	80fb      	strh	r3, [r7, #6]
 8014afc:	4613      	mov	r3, r2
 8014afe:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8014b00:	88fb      	ldrh	r3, [r7, #6]
 8014b02:	2b43      	cmp	r3, #67	; 0x43
 8014b04:	d906      	bls.n	8014b14 <dhcp_option_byte+0x24>
 8014b06:	4b0a      	ldr	r3, [pc, #40]	; (8014b30 <dhcp_option_byte+0x40>)
 8014b08:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8014b0c:	4909      	ldr	r1, [pc, #36]	; (8014b34 <dhcp_option_byte+0x44>)
 8014b0e:	480a      	ldr	r0, [pc, #40]	; (8014b38 <dhcp_option_byte+0x48>)
 8014b10:	f003 fb0e 	bl	8018130 <iprintf>
  options[options_out_len++] = value;
 8014b14:	88fb      	ldrh	r3, [r7, #6]
 8014b16:	1c5a      	adds	r2, r3, #1
 8014b18:	80fa      	strh	r2, [r7, #6]
 8014b1a:	461a      	mov	r2, r3
 8014b1c:	683b      	ldr	r3, [r7, #0]
 8014b1e:	4413      	add	r3, r2
 8014b20:	797a      	ldrb	r2, [r7, #5]
 8014b22:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014b24:	88fb      	ldrh	r3, [r7, #6]
}
 8014b26:	4618      	mov	r0, r3
 8014b28:	3708      	adds	r7, #8
 8014b2a:	46bd      	mov	sp, r7
 8014b2c:	bd80      	pop	{r7, pc}
 8014b2e:	bf00      	nop
 8014b30:	0801c158 	.word	0x0801c158
 8014b34:	0801c330 	.word	0x0801c330
 8014b38:	0801c1b8 	.word	0x0801c1b8

08014b3c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8014b3c:	b580      	push	{r7, lr}
 8014b3e:	b082      	sub	sp, #8
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	4603      	mov	r3, r0
 8014b44:	6039      	str	r1, [r7, #0]
 8014b46:	80fb      	strh	r3, [r7, #6]
 8014b48:	4613      	mov	r3, r2
 8014b4a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8014b4c:	88fb      	ldrh	r3, [r7, #6]
 8014b4e:	3302      	adds	r3, #2
 8014b50:	2b44      	cmp	r3, #68	; 0x44
 8014b52:	d906      	bls.n	8014b62 <dhcp_option_short+0x26>
 8014b54:	4b0f      	ldr	r3, [pc, #60]	; (8014b94 <dhcp_option_short+0x58>)
 8014b56:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8014b5a:	490f      	ldr	r1, [pc, #60]	; (8014b98 <dhcp_option_short+0x5c>)
 8014b5c:	480f      	ldr	r0, [pc, #60]	; (8014b9c <dhcp_option_short+0x60>)
 8014b5e:	f003 fae7 	bl	8018130 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8014b62:	88bb      	ldrh	r3, [r7, #4]
 8014b64:	0a1b      	lsrs	r3, r3, #8
 8014b66:	b29a      	uxth	r2, r3
 8014b68:	88fb      	ldrh	r3, [r7, #6]
 8014b6a:	1c59      	adds	r1, r3, #1
 8014b6c:	80f9      	strh	r1, [r7, #6]
 8014b6e:	4619      	mov	r1, r3
 8014b70:	683b      	ldr	r3, [r7, #0]
 8014b72:	440b      	add	r3, r1
 8014b74:	b2d2      	uxtb	r2, r2
 8014b76:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8014b78:	88fb      	ldrh	r3, [r7, #6]
 8014b7a:	1c5a      	adds	r2, r3, #1
 8014b7c:	80fa      	strh	r2, [r7, #6]
 8014b7e:	461a      	mov	r2, r3
 8014b80:	683b      	ldr	r3, [r7, #0]
 8014b82:	4413      	add	r3, r2
 8014b84:	88ba      	ldrh	r2, [r7, #4]
 8014b86:	b2d2      	uxtb	r2, r2
 8014b88:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014b8a:	88fb      	ldrh	r3, [r7, #6]
}
 8014b8c:	4618      	mov	r0, r3
 8014b8e:	3708      	adds	r7, #8
 8014b90:	46bd      	mov	sp, r7
 8014b92:	bd80      	pop	{r7, pc}
 8014b94:	0801c158 	.word	0x0801c158
 8014b98:	0801c368 	.word	0x0801c368
 8014b9c:	0801c1b8 	.word	0x0801c1b8

08014ba0 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b084      	sub	sp, #16
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	4603      	mov	r3, r0
 8014ba8:	60b9      	str	r1, [r7, #8]
 8014baa:	607a      	str	r2, [r7, #4]
 8014bac:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8014bae:	89fb      	ldrh	r3, [r7, #14]
 8014bb0:	3304      	adds	r3, #4
 8014bb2:	2b44      	cmp	r3, #68	; 0x44
 8014bb4:	d906      	bls.n	8014bc4 <dhcp_option_long+0x24>
 8014bb6:	4b19      	ldr	r3, [pc, #100]	; (8014c1c <dhcp_option_long+0x7c>)
 8014bb8:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8014bbc:	4918      	ldr	r1, [pc, #96]	; (8014c20 <dhcp_option_long+0x80>)
 8014bbe:	4819      	ldr	r0, [pc, #100]	; (8014c24 <dhcp_option_long+0x84>)
 8014bc0:	f003 fab6 	bl	8018130 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	0e1a      	lsrs	r2, r3, #24
 8014bc8:	89fb      	ldrh	r3, [r7, #14]
 8014bca:	1c59      	adds	r1, r3, #1
 8014bcc:	81f9      	strh	r1, [r7, #14]
 8014bce:	4619      	mov	r1, r3
 8014bd0:	68bb      	ldr	r3, [r7, #8]
 8014bd2:	440b      	add	r3, r1
 8014bd4:	b2d2      	uxtb	r2, r2
 8014bd6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	0c1a      	lsrs	r2, r3, #16
 8014bdc:	89fb      	ldrh	r3, [r7, #14]
 8014bde:	1c59      	adds	r1, r3, #1
 8014be0:	81f9      	strh	r1, [r7, #14]
 8014be2:	4619      	mov	r1, r3
 8014be4:	68bb      	ldr	r3, [r7, #8]
 8014be6:	440b      	add	r3, r1
 8014be8:	b2d2      	uxtb	r2, r2
 8014bea:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	0a1a      	lsrs	r2, r3, #8
 8014bf0:	89fb      	ldrh	r3, [r7, #14]
 8014bf2:	1c59      	adds	r1, r3, #1
 8014bf4:	81f9      	strh	r1, [r7, #14]
 8014bf6:	4619      	mov	r1, r3
 8014bf8:	68bb      	ldr	r3, [r7, #8]
 8014bfa:	440b      	add	r3, r1
 8014bfc:	b2d2      	uxtb	r2, r2
 8014bfe:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8014c00:	89fb      	ldrh	r3, [r7, #14]
 8014c02:	1c5a      	adds	r2, r3, #1
 8014c04:	81fa      	strh	r2, [r7, #14]
 8014c06:	461a      	mov	r2, r3
 8014c08:	68bb      	ldr	r3, [r7, #8]
 8014c0a:	4413      	add	r3, r2
 8014c0c:	687a      	ldr	r2, [r7, #4]
 8014c0e:	b2d2      	uxtb	r2, r2
 8014c10:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014c12:	89fb      	ldrh	r3, [r7, #14]
}
 8014c14:	4618      	mov	r0, r3
 8014c16:	3710      	adds	r7, #16
 8014c18:	46bd      	mov	sp, r7
 8014c1a:	bd80      	pop	{r7, pc}
 8014c1c:	0801c158 	.word	0x0801c158
 8014c20:	0801c3a4 	.word	0x0801c3a4
 8014c24:	0801c1b8 	.word	0x0801c1b8

08014c28 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8014c28:	b580      	push	{r7, lr}
 8014c2a:	b090      	sub	sp, #64	; 0x40
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	6078      	str	r0, [r7, #4]
 8014c30:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8014c32:	2300      	movs	r3, #0
 8014c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8014c36:	2300      	movs	r3, #0
 8014c38:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8014c3a:	2208      	movs	r2, #8
 8014c3c:	2100      	movs	r1, #0
 8014c3e:	48b5      	ldr	r0, [pc, #724]	; (8014f14 <dhcp_parse_reply+0x2ec>)
 8014c40:	f003 fadb 	bl	80181fa <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	895b      	ldrh	r3, [r3, #10]
 8014c48:	2b2b      	cmp	r3, #43	; 0x2b
 8014c4a:	d802      	bhi.n	8014c52 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8014c4c:	f06f 0301 	mvn.w	r3, #1
 8014c50:	e2a7      	b.n	80151a2 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	685b      	ldr	r3, [r3, #4]
 8014c56:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8014c58:	23f0      	movs	r3, #240	; 0xf0
 8014c5a:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	891b      	ldrh	r3, [r3, #8]
 8014c60:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014c66:	e00c      	b.n	8014c82 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8014c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c6a:	895b      	ldrh	r3, [r3, #10]
 8014c6c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014c6e:	1ad3      	subs	r3, r2, r3
 8014c70:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8014c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c74:	895b      	ldrh	r3, [r3, #10]
 8014c76:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8014c78:	1ad3      	subs	r3, r2, r3
 8014c7a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8014c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d004      	beq.n	8014c92 <dhcp_parse_reply+0x6a>
 8014c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c8a:	895b      	ldrh	r3, [r3, #10]
 8014c8c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014c8e:	429a      	cmp	r2, r3
 8014c90:	d2ea      	bcs.n	8014c68 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8014c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d102      	bne.n	8014c9e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8014c98:	f06f 0301 	mvn.w	r3, #1
 8014c9c:	e281      	b.n	80151a2 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8014c9e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014ca0:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8014ca2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014ca4:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8014ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ca8:	685b      	ldr	r3, [r3, #4]
 8014caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014cac:	e239      	b.n	8015122 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8014cae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014cb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014cb2:	4413      	add	r3, r2
 8014cb4:	781b      	ldrb	r3, [r3, #0]
 8014cb6:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8014cb8:	2300      	movs	r3, #0
 8014cba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8014cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8014cc2:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8014cc4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014cc6:	3302      	adds	r3, #2
 8014cc8:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8014cca:	8bfa      	ldrh	r2, [r7, #30]
 8014ccc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014cce:	429a      	cmp	r2, r3
 8014cd0:	d202      	bcs.n	8014cd8 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8014cd2:	f06f 0301 	mvn.w	r3, #1
 8014cd6:	e264      	b.n	80151a2 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8014cd8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014cda:	3301      	adds	r3, #1
 8014cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014cde:	8952      	ldrh	r2, [r2, #10]
 8014ce0:	4293      	cmp	r3, r2
 8014ce2:	da07      	bge.n	8014cf4 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8014ce4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014ce6:	3301      	adds	r3, #1
 8014ce8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014cea:	4413      	add	r3, r2
 8014cec:	781b      	ldrb	r3, [r3, #0]
 8014cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014cf2:	e00b      	b.n	8014d0c <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8014cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d004      	beq.n	8014d06 <dhcp_parse_reply+0xde>
 8014cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	685b      	ldr	r3, [r3, #4]
 8014d02:	781b      	ldrb	r3, [r3, #0]
 8014d04:	e000      	b.n	8014d08 <dhcp_parse_reply+0xe0>
 8014d06:	2300      	movs	r3, #0
 8014d08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8014d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8014d14:	7dfb      	ldrb	r3, [r7, #23]
 8014d16:	2b3b      	cmp	r3, #59	; 0x3b
 8014d18:	f200 812c 	bhi.w	8014f74 <dhcp_parse_reply+0x34c>
 8014d1c:	a201      	add	r2, pc, #4	; (adr r2, 8014d24 <dhcp_parse_reply+0xfc>)
 8014d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d22:	bf00      	nop
 8014d24:	08014e15 	.word	0x08014e15
 8014d28:	08014e25 	.word	0x08014e25
 8014d2c:	08014f75 	.word	0x08014f75
 8014d30:	08014e47 	.word	0x08014e47
 8014d34:	08014f75 	.word	0x08014f75
 8014d38:	08014f75 	.word	0x08014f75
 8014d3c:	08014f75 	.word	0x08014f75
 8014d40:	08014f75 	.word	0x08014f75
 8014d44:	08014f75 	.word	0x08014f75
 8014d48:	08014f75 	.word	0x08014f75
 8014d4c:	08014f75 	.word	0x08014f75
 8014d50:	08014f75 	.word	0x08014f75
 8014d54:	08014f75 	.word	0x08014f75
 8014d58:	08014f75 	.word	0x08014f75
 8014d5c:	08014f75 	.word	0x08014f75
 8014d60:	08014f75 	.word	0x08014f75
 8014d64:	08014f75 	.word	0x08014f75
 8014d68:	08014f75 	.word	0x08014f75
 8014d6c:	08014f75 	.word	0x08014f75
 8014d70:	08014f75 	.word	0x08014f75
 8014d74:	08014f75 	.word	0x08014f75
 8014d78:	08014f75 	.word	0x08014f75
 8014d7c:	08014f75 	.word	0x08014f75
 8014d80:	08014f75 	.word	0x08014f75
 8014d84:	08014f75 	.word	0x08014f75
 8014d88:	08014f75 	.word	0x08014f75
 8014d8c:	08014f75 	.word	0x08014f75
 8014d90:	08014f75 	.word	0x08014f75
 8014d94:	08014f75 	.word	0x08014f75
 8014d98:	08014f75 	.word	0x08014f75
 8014d9c:	08014f75 	.word	0x08014f75
 8014da0:	08014f75 	.word	0x08014f75
 8014da4:	08014f75 	.word	0x08014f75
 8014da8:	08014f75 	.word	0x08014f75
 8014dac:	08014f75 	.word	0x08014f75
 8014db0:	08014f75 	.word	0x08014f75
 8014db4:	08014f75 	.word	0x08014f75
 8014db8:	08014f75 	.word	0x08014f75
 8014dbc:	08014f75 	.word	0x08014f75
 8014dc0:	08014f75 	.word	0x08014f75
 8014dc4:	08014f75 	.word	0x08014f75
 8014dc8:	08014f75 	.word	0x08014f75
 8014dcc:	08014f75 	.word	0x08014f75
 8014dd0:	08014f75 	.word	0x08014f75
 8014dd4:	08014f75 	.word	0x08014f75
 8014dd8:	08014f75 	.word	0x08014f75
 8014ddc:	08014f75 	.word	0x08014f75
 8014de0:	08014f75 	.word	0x08014f75
 8014de4:	08014f75 	.word	0x08014f75
 8014de8:	08014f75 	.word	0x08014f75
 8014dec:	08014f75 	.word	0x08014f75
 8014df0:	08014e73 	.word	0x08014e73
 8014df4:	08014e95 	.word	0x08014e95
 8014df8:	08014ed1 	.word	0x08014ed1
 8014dfc:	08014ef3 	.word	0x08014ef3
 8014e00:	08014f75 	.word	0x08014f75
 8014e04:	08014f75 	.word	0x08014f75
 8014e08:	08014f75 	.word	0x08014f75
 8014e0c:	08014f31 	.word	0x08014f31
 8014e10:	08014f53 	.word	0x08014f53
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8014e14:	2300      	movs	r3, #0
 8014e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014e1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8014e22:	e0ab      	b.n	8014f7c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e28:	2b04      	cmp	r3, #4
 8014e2a:	d009      	beq.n	8014e40 <dhcp_parse_reply+0x218>
 8014e2c:	4b3a      	ldr	r3, [pc, #232]	; (8014f18 <dhcp_parse_reply+0x2f0>)
 8014e2e:	f240 622e 	movw	r2, #1582	; 0x62e
 8014e32:	493a      	ldr	r1, [pc, #232]	; (8014f1c <dhcp_parse_reply+0x2f4>)
 8014e34:	483a      	ldr	r0, [pc, #232]	; (8014f20 <dhcp_parse_reply+0x2f8>)
 8014e36:	f003 f97b 	bl	8018130 <iprintf>
 8014e3a:	f06f 0305 	mvn.w	r3, #5
 8014e3e:	e1b0      	b.n	80151a2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8014e40:	2306      	movs	r3, #6
 8014e42:	623b      	str	r3, [r7, #32]
        break;
 8014e44:	e09a      	b.n	8014f7c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8014e46:	2304      	movs	r3, #4
 8014e48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8014e4c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014e50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014e54:	429a      	cmp	r2, r3
 8014e56:	d209      	bcs.n	8014e6c <dhcp_parse_reply+0x244>
 8014e58:	4b2f      	ldr	r3, [pc, #188]	; (8014f18 <dhcp_parse_reply+0x2f0>)
 8014e5a:	f240 6233 	movw	r2, #1587	; 0x633
 8014e5e:	4931      	ldr	r1, [pc, #196]	; (8014f24 <dhcp_parse_reply+0x2fc>)
 8014e60:	482f      	ldr	r0, [pc, #188]	; (8014f20 <dhcp_parse_reply+0x2f8>)
 8014e62:	f003 f965 	bl	8018130 <iprintf>
 8014e66:	f06f 0305 	mvn.w	r3, #5
 8014e6a:	e19a      	b.n	80151a2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8014e6c:	2307      	movs	r3, #7
 8014e6e:	623b      	str	r3, [r7, #32]
        break;
 8014e70:	e084      	b.n	8014f7c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014e72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e76:	2b04      	cmp	r3, #4
 8014e78:	d009      	beq.n	8014e8e <dhcp_parse_reply+0x266>
 8014e7a:	4b27      	ldr	r3, [pc, #156]	; (8014f18 <dhcp_parse_reply+0x2f0>)
 8014e7c:	f240 6241 	movw	r2, #1601	; 0x641
 8014e80:	4926      	ldr	r1, [pc, #152]	; (8014f1c <dhcp_parse_reply+0x2f4>)
 8014e82:	4827      	ldr	r0, [pc, #156]	; (8014f20 <dhcp_parse_reply+0x2f8>)
 8014e84:	f003 f954 	bl	8018130 <iprintf>
 8014e88:	f06f 0305 	mvn.w	r3, #5
 8014e8c:	e189      	b.n	80151a2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8014e8e:	2303      	movs	r3, #3
 8014e90:	623b      	str	r3, [r7, #32]
        break;
 8014e92:	e073      	b.n	8014f7c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014e94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e98:	2b01      	cmp	r3, #1
 8014e9a:	d009      	beq.n	8014eb0 <dhcp_parse_reply+0x288>
 8014e9c:	4b1e      	ldr	r3, [pc, #120]	; (8014f18 <dhcp_parse_reply+0x2f0>)
 8014e9e:	f240 624f 	movw	r2, #1615	; 0x64f
 8014ea2:	4921      	ldr	r1, [pc, #132]	; (8014f28 <dhcp_parse_reply+0x300>)
 8014ea4:	481e      	ldr	r0, [pc, #120]	; (8014f20 <dhcp_parse_reply+0x2f8>)
 8014ea6:	f003 f943 	bl	8018130 <iprintf>
 8014eaa:	f06f 0305 	mvn.w	r3, #5
 8014eae:	e178      	b.n	80151a2 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8014eb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014eb2:	2bf0      	cmp	r3, #240	; 0xf0
 8014eb4:	d009      	beq.n	8014eca <dhcp_parse_reply+0x2a2>
 8014eb6:	4b18      	ldr	r3, [pc, #96]	; (8014f18 <dhcp_parse_reply+0x2f0>)
 8014eb8:	f240 6251 	movw	r2, #1617	; 0x651
 8014ebc:	491b      	ldr	r1, [pc, #108]	; (8014f2c <dhcp_parse_reply+0x304>)
 8014ebe:	4818      	ldr	r0, [pc, #96]	; (8014f20 <dhcp_parse_reply+0x2f8>)
 8014ec0:	f003 f936 	bl	8018130 <iprintf>
 8014ec4:	f06f 0305 	mvn.w	r3, #5
 8014ec8:	e16b      	b.n	80151a2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8014eca:	2300      	movs	r3, #0
 8014ecc:	623b      	str	r3, [r7, #32]
        break;
 8014ece:	e055      	b.n	8014f7c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ed4:	2b01      	cmp	r3, #1
 8014ed6:	d009      	beq.n	8014eec <dhcp_parse_reply+0x2c4>
 8014ed8:	4b0f      	ldr	r3, [pc, #60]	; (8014f18 <dhcp_parse_reply+0x2f0>)
 8014eda:	f240 6255 	movw	r2, #1621	; 0x655
 8014ede:	4912      	ldr	r1, [pc, #72]	; (8014f28 <dhcp_parse_reply+0x300>)
 8014ee0:	480f      	ldr	r0, [pc, #60]	; (8014f20 <dhcp_parse_reply+0x2f8>)
 8014ee2:	f003 f925 	bl	8018130 <iprintf>
 8014ee6:	f06f 0305 	mvn.w	r3, #5
 8014eea:	e15a      	b.n	80151a2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8014eec:	2301      	movs	r3, #1
 8014eee:	623b      	str	r3, [r7, #32]
        break;
 8014ef0:	e044      	b.n	8014f7c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ef6:	2b04      	cmp	r3, #4
 8014ef8:	d009      	beq.n	8014f0e <dhcp_parse_reply+0x2e6>
 8014efa:	4b07      	ldr	r3, [pc, #28]	; (8014f18 <dhcp_parse_reply+0x2f0>)
 8014efc:	f240 6259 	movw	r2, #1625	; 0x659
 8014f00:	4906      	ldr	r1, [pc, #24]	; (8014f1c <dhcp_parse_reply+0x2f4>)
 8014f02:	4807      	ldr	r0, [pc, #28]	; (8014f20 <dhcp_parse_reply+0x2f8>)
 8014f04:	f003 f914 	bl	8018130 <iprintf>
 8014f08:	f06f 0305 	mvn.w	r3, #5
 8014f0c:	e149      	b.n	80151a2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8014f0e:	2302      	movs	r3, #2
 8014f10:	623b      	str	r3, [r7, #32]
        break;
 8014f12:	e033      	b.n	8014f7c <dhcp_parse_reply+0x354>
 8014f14:	20010ddc 	.word	0x20010ddc
 8014f18:	0801c158 	.word	0x0801c158
 8014f1c:	0801c3e0 	.word	0x0801c3e0
 8014f20:	0801c1b8 	.word	0x0801c1b8
 8014f24:	0801c3ec 	.word	0x0801c3ec
 8014f28:	0801c400 	.word	0x0801c400
 8014f2c:	0801c40c 	.word	0x0801c40c
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f34:	2b04      	cmp	r3, #4
 8014f36:	d009      	beq.n	8014f4c <dhcp_parse_reply+0x324>
 8014f38:	4b9c      	ldr	r3, [pc, #624]	; (80151ac <dhcp_parse_reply+0x584>)
 8014f3a:	f240 625d 	movw	r2, #1629	; 0x65d
 8014f3e:	499c      	ldr	r1, [pc, #624]	; (80151b0 <dhcp_parse_reply+0x588>)
 8014f40:	489c      	ldr	r0, [pc, #624]	; (80151b4 <dhcp_parse_reply+0x58c>)
 8014f42:	f003 f8f5 	bl	8018130 <iprintf>
 8014f46:	f06f 0305 	mvn.w	r3, #5
 8014f4a:	e12a      	b.n	80151a2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8014f4c:	2304      	movs	r3, #4
 8014f4e:	623b      	str	r3, [r7, #32]
        break;
 8014f50:	e014      	b.n	8014f7c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014f52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f56:	2b04      	cmp	r3, #4
 8014f58:	d009      	beq.n	8014f6e <dhcp_parse_reply+0x346>
 8014f5a:	4b94      	ldr	r3, [pc, #592]	; (80151ac <dhcp_parse_reply+0x584>)
 8014f5c:	f240 6261 	movw	r2, #1633	; 0x661
 8014f60:	4993      	ldr	r1, [pc, #588]	; (80151b0 <dhcp_parse_reply+0x588>)
 8014f62:	4894      	ldr	r0, [pc, #592]	; (80151b4 <dhcp_parse_reply+0x58c>)
 8014f64:	f003 f8e4 	bl	8018130 <iprintf>
 8014f68:	f06f 0305 	mvn.w	r3, #5
 8014f6c:	e119      	b.n	80151a2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8014f6e:	2305      	movs	r3, #5
 8014f70:	623b      	str	r3, [r7, #32]
        break;
 8014f72:	e003      	b.n	8014f7c <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8014f74:	2300      	movs	r3, #0
 8014f76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8014f7a:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8014f7c:	7dfb      	ldrb	r3, [r7, #23]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d103      	bne.n	8014f8a <dhcp_parse_reply+0x362>
      offset++;
 8014f82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014f84:	3301      	adds	r3, #1
 8014f86:	877b      	strh	r3, [r7, #58]	; 0x3a
 8014f88:	e0a1      	b.n	80150ce <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8014f8a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f90:	4413      	add	r3, r2
 8014f92:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8014f96:	4293      	cmp	r3, r2
 8014f98:	dd02      	ble.n	8014fa0 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8014f9a:	f06f 0301 	mvn.w	r3, #1
 8014f9e:	e100      	b.n	80151a2 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8014fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014fa4:	b29a      	uxth	r2, r3
 8014fa6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014fa8:	4413      	add	r3, r2
 8014faa:	b29b      	uxth	r3, r3
 8014fac:	3302      	adds	r3, #2
 8014fae:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8014fb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	f000 808a 	beq.w	80150ce <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8014fba:	2300      	movs	r3, #0
 8014fbc:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8014fbe:	6a3b      	ldr	r3, [r7, #32]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	db02      	blt.n	8014fca <dhcp_parse_reply+0x3a2>
 8014fc4:	6a3b      	ldr	r3, [r7, #32]
 8014fc6:	2b07      	cmp	r3, #7
 8014fc8:	dd06      	ble.n	8014fd8 <dhcp_parse_reply+0x3b0>
 8014fca:	4b78      	ldr	r3, [pc, #480]	; (80151ac <dhcp_parse_reply+0x584>)
 8014fcc:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8014fd0:	4979      	ldr	r1, [pc, #484]	; (80151b8 <dhcp_parse_reply+0x590>)
 8014fd2:	4878      	ldr	r0, [pc, #480]	; (80151b4 <dhcp_parse_reply+0x58c>)
 8014fd4:	f003 f8ac 	bl	8018130 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8014fd8:	4a78      	ldr	r2, [pc, #480]	; (80151bc <dhcp_parse_reply+0x594>)
 8014fda:	6a3b      	ldr	r3, [r7, #32]
 8014fdc:	4413      	add	r3, r2
 8014fde:	781b      	ldrb	r3, [r3, #0]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d174      	bne.n	80150ce <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8014fe4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014fe8:	2b04      	cmp	r3, #4
 8014fea:	bf28      	it	cs
 8014fec:	2304      	movcs	r3, #4
 8014fee:	b2db      	uxtb	r3, r3
 8014ff0:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8014ff2:	8bfb      	ldrh	r3, [r7, #30]
 8014ff4:	8aba      	ldrh	r2, [r7, #20]
 8014ff6:	f107 0108 	add.w	r1, r7, #8
 8014ffa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014ffc:	f7f7 fcb2 	bl	800c964 <pbuf_copy_partial>
 8015000:	4603      	mov	r3, r0
 8015002:	461a      	mov	r2, r3
 8015004:	8abb      	ldrh	r3, [r7, #20]
 8015006:	4293      	cmp	r3, r2
 8015008:	d002      	beq.n	8015010 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801500a:	f06f 0301 	mvn.w	r3, #1
 801500e:	e0c8      	b.n	80151a2 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8015010:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015014:	2b04      	cmp	r3, #4
 8015016:	d933      	bls.n	8015080 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8015018:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801501c:	f003 0303 	and.w	r3, r3, #3
 8015020:	b2db      	uxtb	r3, r3
 8015022:	2b00      	cmp	r3, #0
 8015024:	d009      	beq.n	801503a <dhcp_parse_reply+0x412>
 8015026:	4b61      	ldr	r3, [pc, #388]	; (80151ac <dhcp_parse_reply+0x584>)
 8015028:	f240 6281 	movw	r2, #1665	; 0x681
 801502c:	4964      	ldr	r1, [pc, #400]	; (80151c0 <dhcp_parse_reply+0x598>)
 801502e:	4861      	ldr	r0, [pc, #388]	; (80151b4 <dhcp_parse_reply+0x58c>)
 8015030:	f003 f87e 	bl	8018130 <iprintf>
 8015034:	f06f 0305 	mvn.w	r3, #5
 8015038:	e0b3      	b.n	80151a2 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 801503a:	4a60      	ldr	r2, [pc, #384]	; (80151bc <dhcp_parse_reply+0x594>)
 801503c:	6a3b      	ldr	r3, [r7, #32]
 801503e:	4413      	add	r3, r2
 8015040:	2201      	movs	r2, #1
 8015042:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8015044:	68bb      	ldr	r3, [r7, #8]
 8015046:	4618      	mov	r0, r3
 8015048:	f7f5 fe67 	bl	800ad1a <lwip_htonl>
 801504c:	4602      	mov	r2, r0
 801504e:	495d      	ldr	r1, [pc, #372]	; (80151c4 <dhcp_parse_reply+0x59c>)
 8015050:	6a3b      	ldr	r3, [r7, #32]
 8015052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8015056:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801505a:	3b04      	subs	r3, #4
 801505c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8015060:	8bfb      	ldrh	r3, [r7, #30]
 8015062:	3304      	adds	r3, #4
 8015064:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8015066:	8a7a      	ldrh	r2, [r7, #18]
 8015068:	8bfb      	ldrh	r3, [r7, #30]
 801506a:	429a      	cmp	r2, r3
 801506c:	d202      	bcs.n	8015074 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801506e:	f06f 0301 	mvn.w	r3, #1
 8015072:	e096      	b.n	80151a2 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8015074:	8a7b      	ldrh	r3, [r7, #18]
 8015076:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8015078:	6a3b      	ldr	r3, [r7, #32]
 801507a:	3301      	adds	r3, #1
 801507c:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801507e:	e79e      	b.n	8014fbe <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8015080:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015084:	2b04      	cmp	r3, #4
 8015086:	d106      	bne.n	8015096 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8015088:	68bb      	ldr	r3, [r7, #8]
 801508a:	4618      	mov	r0, r3
 801508c:	f7f5 fe45 	bl	800ad1a <lwip_htonl>
 8015090:	4603      	mov	r3, r0
 8015092:	60bb      	str	r3, [r7, #8]
 8015094:	e011      	b.n	80150ba <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8015096:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801509a:	2b01      	cmp	r3, #1
 801509c:	d009      	beq.n	80150b2 <dhcp_parse_reply+0x48a>
 801509e:	4b43      	ldr	r3, [pc, #268]	; (80151ac <dhcp_parse_reply+0x584>)
 80150a0:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80150a4:	4948      	ldr	r1, [pc, #288]	; (80151c8 <dhcp_parse_reply+0x5a0>)
 80150a6:	4843      	ldr	r0, [pc, #268]	; (80151b4 <dhcp_parse_reply+0x58c>)
 80150a8:	f003 f842 	bl	8018130 <iprintf>
 80150ac:	f06f 0305 	mvn.w	r3, #5
 80150b0:	e077      	b.n	80151a2 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 80150b2:	f107 0308 	add.w	r3, r7, #8
 80150b6:	781b      	ldrb	r3, [r3, #0]
 80150b8:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80150ba:	4a40      	ldr	r2, [pc, #256]	; (80151bc <dhcp_parse_reply+0x594>)
 80150bc:	6a3b      	ldr	r3, [r7, #32]
 80150be:	4413      	add	r3, r2
 80150c0:	2201      	movs	r2, #1
 80150c2:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80150c4:	68ba      	ldr	r2, [r7, #8]
 80150c6:	493f      	ldr	r1, [pc, #252]	; (80151c4 <dhcp_parse_reply+0x59c>)
 80150c8:	6a3b      	ldr	r3, [r7, #32]
 80150ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80150ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150d0:	895b      	ldrh	r3, [r3, #10]
 80150d2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80150d4:	429a      	cmp	r2, r3
 80150d6:	d324      	bcc.n	8015122 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 80150d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150da:	895b      	ldrh	r3, [r3, #10]
 80150dc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80150de:	1ad3      	subs	r3, r2, r3
 80150e0:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80150e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150e4:	895b      	ldrh	r3, [r3, #10]
 80150e6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80150e8:	1ad3      	subs	r3, r2, r3
 80150ea:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80150ec:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80150ee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80150f0:	429a      	cmp	r2, r3
 80150f2:	d213      	bcs.n	801511c <dhcp_parse_reply+0x4f4>
        q = q->next;
 80150f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80150fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d109      	bne.n	8015114 <dhcp_parse_reply+0x4ec>
 8015100:	4b2a      	ldr	r3, [pc, #168]	; (80151ac <dhcp_parse_reply+0x584>)
 8015102:	f240 629d 	movw	r2, #1693	; 0x69d
 8015106:	4931      	ldr	r1, [pc, #196]	; (80151cc <dhcp_parse_reply+0x5a4>)
 8015108:	482a      	ldr	r0, [pc, #168]	; (80151b4 <dhcp_parse_reply+0x58c>)
 801510a:	f003 f811 	bl	8018130 <iprintf>
 801510e:	f06f 0305 	mvn.w	r3, #5
 8015112:	e046      	b.n	80151a2 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8015114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015116:	685b      	ldr	r3, [r3, #4]
 8015118:	63fb      	str	r3, [r7, #60]	; 0x3c
 801511a:	e002      	b.n	8015122 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801511c:	f06f 0301 	mvn.w	r3, #1
 8015120:	e03f      	b.n	80151a2 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015124:	2b00      	cmp	r3, #0
 8015126:	d00a      	beq.n	801513e <dhcp_parse_reply+0x516>
 8015128:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801512a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801512c:	429a      	cmp	r2, r3
 801512e:	d206      	bcs.n	801513e <dhcp_parse_reply+0x516>
 8015130:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015132:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015134:	4413      	add	r3, r2
 8015136:	781b      	ldrb	r3, [r3, #0]
 8015138:	2bff      	cmp	r3, #255	; 0xff
 801513a:	f47f adb8 	bne.w	8014cae <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801513e:	4b1f      	ldr	r3, [pc, #124]	; (80151bc <dhcp_parse_reply+0x594>)
 8015140:	781b      	ldrb	r3, [r3, #0]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d018      	beq.n	8015178 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015146:	4b1f      	ldr	r3, [pc, #124]	; (80151c4 <dhcp_parse_reply+0x59c>)
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801514c:	4b1b      	ldr	r3, [pc, #108]	; (80151bc <dhcp_parse_reply+0x594>)
 801514e:	2200      	movs	r2, #0
 8015150:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	2b01      	cmp	r3, #1
 8015156:	d102      	bne.n	801515e <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8015158:	2301      	movs	r3, #1
 801515a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801515c:	e00c      	b.n	8015178 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	2b02      	cmp	r3, #2
 8015162:	d102      	bne.n	801516a <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8015164:	2301      	movs	r3, #1
 8015166:	62bb      	str	r3, [r7, #40]	; 0x28
 8015168:	e006      	b.n	8015178 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	2b03      	cmp	r3, #3
 801516e:	d103      	bne.n	8015178 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8015170:	2301      	movs	r3, #1
 8015172:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8015174:	2301      	movs	r3, #1
 8015176:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8015178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801517a:	2b00      	cmp	r3, #0
 801517c:	d006      	beq.n	801518c <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801517e:	2300      	movs	r3, #0
 8015180:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8015182:	236c      	movs	r3, #108	; 0x6c
 8015184:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8015186:	23ec      	movs	r3, #236	; 0xec
 8015188:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801518a:	e56a      	b.n	8014c62 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801518c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801518e:	2b00      	cmp	r3, #0
 8015190:	d006      	beq.n	80151a0 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8015192:	2300      	movs	r3, #0
 8015194:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8015196:	232c      	movs	r3, #44	; 0x2c
 8015198:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801519a:	236c      	movs	r3, #108	; 0x6c
 801519c:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801519e:	e560      	b.n	8014c62 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80151a0:	2300      	movs	r3, #0
}
 80151a2:	4618      	mov	r0, r3
 80151a4:	3740      	adds	r7, #64	; 0x40
 80151a6:	46bd      	mov	sp, r7
 80151a8:	bd80      	pop	{r7, pc}
 80151aa:	bf00      	nop
 80151ac:	0801c158 	.word	0x0801c158
 80151b0:	0801c3e0 	.word	0x0801c3e0
 80151b4:	0801c1b8 	.word	0x0801c1b8
 80151b8:	0801c424 	.word	0x0801c424
 80151bc:	20010ddc 	.word	0x20010ddc
 80151c0:	0801c438 	.word	0x0801c438
 80151c4:	20010dbc 	.word	0x20010dbc
 80151c8:	0801c450 	.word	0x0801c450
 80151cc:	0801c464 	.word	0x0801c464

080151d0 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80151d0:	b580      	push	{r7, lr}
 80151d2:	b08a      	sub	sp, #40	; 0x28
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	60f8      	str	r0, [r7, #12]
 80151d8:	60b9      	str	r1, [r7, #8]
 80151da:	607a      	str	r2, [r7, #4]
 80151dc:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80151de:	4b60      	ldr	r3, [pc, #384]	; (8015360 <dhcp_recv+0x190>)
 80151e0:	685b      	ldr	r3, [r3, #4]
 80151e2:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80151e4:	6a3b      	ldr	r3, [r7, #32]
 80151e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151e8:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	685b      	ldr	r3, [r3, #4]
 80151ee:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80151f0:	69fb      	ldr	r3, [r7, #28]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	f000 809d 	beq.w	8015332 <dhcp_recv+0x162>
 80151f8:	69fb      	ldr	r3, [r7, #28]
 80151fa:	791b      	ldrb	r3, [r3, #4]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	f000 8098 	beq.w	8015332 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	895b      	ldrh	r3, [r3, #10]
 8015206:	2b2b      	cmp	r3, #43	; 0x2b
 8015208:	f240 8095 	bls.w	8015336 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801520c:	69bb      	ldr	r3, [r7, #24]
 801520e:	781b      	ldrb	r3, [r3, #0]
 8015210:	2b02      	cmp	r3, #2
 8015212:	f040 8092 	bne.w	801533a <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015216:	2300      	movs	r3, #0
 8015218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801521c:	e012      	b.n	8015244 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801521e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015222:	6a3a      	ldr	r2, [r7, #32]
 8015224:	4413      	add	r3, r2
 8015226:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801522a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801522e:	69b9      	ldr	r1, [r7, #24]
 8015230:	440b      	add	r3, r1
 8015232:	7f1b      	ldrb	r3, [r3, #28]
 8015234:	429a      	cmp	r2, r3
 8015236:	f040 8082 	bne.w	801533e <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801523a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801523e:	3301      	adds	r3, #1
 8015240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015244:	6a3b      	ldr	r3, [r7, #32]
 8015246:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801524a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801524e:	429a      	cmp	r2, r3
 8015250:	d203      	bcs.n	801525a <dhcp_recv+0x8a>
 8015252:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015256:	2b05      	cmp	r3, #5
 8015258:	d9e1      	bls.n	801521e <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801525a:	69bb      	ldr	r3, [r7, #24]
 801525c:	685b      	ldr	r3, [r3, #4]
 801525e:	4618      	mov	r0, r3
 8015260:	f7f5 fd5b 	bl	800ad1a <lwip_htonl>
 8015264:	4602      	mov	r2, r0
 8015266:	69fb      	ldr	r3, [r7, #28]
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	429a      	cmp	r2, r3
 801526c:	d169      	bne.n	8015342 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801526e:	69f9      	ldr	r1, [r7, #28]
 8015270:	6878      	ldr	r0, [r7, #4]
 8015272:	f7ff fcd9 	bl	8014c28 <dhcp_parse_reply>
 8015276:	4603      	mov	r3, r0
 8015278:	2b00      	cmp	r3, #0
 801527a:	d164      	bne.n	8015346 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801527c:	4b39      	ldr	r3, [pc, #228]	; (8015364 <dhcp_recv+0x194>)
 801527e:	785b      	ldrb	r3, [r3, #1]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d062      	beq.n	801534a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	685b      	ldr	r3, [r3, #4]
 8015288:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801528a:	4b37      	ldr	r3, [pc, #220]	; (8015368 <dhcp_recv+0x198>)
 801528c:	685b      	ldr	r3, [r3, #4]
 801528e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8015290:	7cfb      	ldrb	r3, [r7, #19]
 8015292:	2b05      	cmp	r3, #5
 8015294:	d12a      	bne.n	80152ec <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015296:	69fb      	ldr	r3, [r7, #28]
 8015298:	795b      	ldrb	r3, [r3, #5]
 801529a:	2b01      	cmp	r3, #1
 801529c:	d112      	bne.n	80152c4 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801529e:	6979      	ldr	r1, [r7, #20]
 80152a0:	6a38      	ldr	r0, [r7, #32]
 80152a2:	f7fe fe17 	bl	8013ed4 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80152a6:	6a3b      	ldr	r3, [r7, #32]
 80152a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80152ac:	f003 0308 	and.w	r3, r3, #8
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d003      	beq.n	80152bc <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80152b4:	6a38      	ldr	r0, [r7, #32]
 80152b6:	f7fe fb87 	bl	80139c8 <dhcp_check>
 80152ba:	e049      	b.n	8015350 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80152bc:	6a38      	ldr	r0, [r7, #32]
 80152be:	f7ff f867 	bl	8014390 <dhcp_bind>
 80152c2:	e045      	b.n	8015350 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80152c4:	69fb      	ldr	r3, [r7, #28]
 80152c6:	795b      	ldrb	r3, [r3, #5]
 80152c8:	2b03      	cmp	r3, #3
 80152ca:	d007      	beq.n	80152dc <dhcp_recv+0x10c>
 80152cc:	69fb      	ldr	r3, [r7, #28]
 80152ce:	795b      	ldrb	r3, [r3, #5]
 80152d0:	2b04      	cmp	r3, #4
 80152d2:	d003      	beq.n	80152dc <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80152d4:	69fb      	ldr	r3, [r7, #28]
 80152d6:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80152d8:	2b05      	cmp	r3, #5
 80152da:	d139      	bne.n	8015350 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80152dc:	6979      	ldr	r1, [r7, #20]
 80152de:	6a38      	ldr	r0, [r7, #32]
 80152e0:	f7fe fdf8 	bl	8013ed4 <dhcp_handle_ack>
      dhcp_bind(netif);
 80152e4:	6a38      	ldr	r0, [r7, #32]
 80152e6:	f7ff f853 	bl	8014390 <dhcp_bind>
 80152ea:	e031      	b.n	8015350 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80152ec:	7cfb      	ldrb	r3, [r7, #19]
 80152ee:	2b06      	cmp	r3, #6
 80152f0:	d113      	bne.n	801531a <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80152f2:	69fb      	ldr	r3, [r7, #28]
 80152f4:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80152f6:	2b03      	cmp	r3, #3
 80152f8:	d00b      	beq.n	8015312 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80152fa:	69fb      	ldr	r3, [r7, #28]
 80152fc:	795b      	ldrb	r3, [r3, #5]
 80152fe:	2b01      	cmp	r3, #1
 8015300:	d007      	beq.n	8015312 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015302:	69fb      	ldr	r3, [r7, #28]
 8015304:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015306:	2b04      	cmp	r3, #4
 8015308:	d003      	beq.n	8015312 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801530a:	69fb      	ldr	r3, [r7, #28]
 801530c:	795b      	ldrb	r3, [r3, #5]
 801530e:	2b05      	cmp	r3, #5
 8015310:	d103      	bne.n	801531a <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8015312:	6a38      	ldr	r0, [r7, #32]
 8015314:	f7fe fb3e 	bl	8013994 <dhcp_handle_nak>
 8015318:	e01a      	b.n	8015350 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801531a:	7cfb      	ldrb	r3, [r7, #19]
 801531c:	2b02      	cmp	r3, #2
 801531e:	d116      	bne.n	801534e <dhcp_recv+0x17e>
 8015320:	69fb      	ldr	r3, [r7, #28]
 8015322:	795b      	ldrb	r3, [r3, #5]
 8015324:	2b06      	cmp	r3, #6
 8015326:	d112      	bne.n	801534e <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8015328:	6979      	ldr	r1, [r7, #20]
 801532a:	6a38      	ldr	r0, [r7, #32]
 801532c:	f7fe fb80 	bl	8013a30 <dhcp_handle_offer>
 8015330:	e00e      	b.n	8015350 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015332:	bf00      	nop
 8015334:	e00c      	b.n	8015350 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015336:	bf00      	nop
 8015338:	e00a      	b.n	8015350 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801533a:	bf00      	nop
 801533c:	e008      	b.n	8015350 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801533e:	bf00      	nop
 8015340:	e006      	b.n	8015350 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015342:	bf00      	nop
 8015344:	e004      	b.n	8015350 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015346:	bf00      	nop
 8015348:	e002      	b.n	8015350 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801534a:	bf00      	nop
 801534c:	e000      	b.n	8015350 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801534e:	bf00      	nop
  pbuf_free(p);
 8015350:	6878      	ldr	r0, [r7, #4]
 8015352:	f7f7 f901 	bl	800c558 <pbuf_free>
}
 8015356:	bf00      	nop
 8015358:	3728      	adds	r7, #40	; 0x28
 801535a:	46bd      	mov	sp, r7
 801535c:	bd80      	pop	{r7, pc}
 801535e:	bf00      	nop
 8015360:	2000d5e8 	.word	0x2000d5e8
 8015364:	20010ddc 	.word	0x20010ddc
 8015368:	20010dbc 	.word	0x20010dbc

0801536c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801536c:	b580      	push	{r7, lr}
 801536e:	b088      	sub	sp, #32
 8015370:	af00      	add	r7, sp, #0
 8015372:	60f8      	str	r0, [r7, #12]
 8015374:	60b9      	str	r1, [r7, #8]
 8015376:	603b      	str	r3, [r7, #0]
 8015378:	4613      	mov	r3, r2
 801537a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	2b00      	cmp	r3, #0
 8015380:	d108      	bne.n	8015394 <dhcp_create_msg+0x28>
 8015382:	4b5f      	ldr	r3, [pc, #380]	; (8015500 <dhcp_create_msg+0x194>)
 8015384:	f240 7269 	movw	r2, #1897	; 0x769
 8015388:	495e      	ldr	r1, [pc, #376]	; (8015504 <dhcp_create_msg+0x198>)
 801538a:	485f      	ldr	r0, [pc, #380]	; (8015508 <dhcp_create_msg+0x19c>)
 801538c:	f002 fed0 	bl	8018130 <iprintf>
 8015390:	2300      	movs	r3, #0
 8015392:	e0b1      	b.n	80154f8 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8015394:	68bb      	ldr	r3, [r7, #8]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d108      	bne.n	80153ac <dhcp_create_msg+0x40>
 801539a:	4b59      	ldr	r3, [pc, #356]	; (8015500 <dhcp_create_msg+0x194>)
 801539c:	f240 726a 	movw	r2, #1898	; 0x76a
 80153a0:	495a      	ldr	r1, [pc, #360]	; (801550c <dhcp_create_msg+0x1a0>)
 80153a2:	4859      	ldr	r0, [pc, #356]	; (8015508 <dhcp_create_msg+0x19c>)
 80153a4:	f002 fec4 	bl	8018130 <iprintf>
 80153a8:	2300      	movs	r3, #0
 80153aa:	e0a5      	b.n	80154f8 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80153ac:	f44f 7220 	mov.w	r2, #640	; 0x280
 80153b0:	f44f 719a 	mov.w	r1, #308	; 0x134
 80153b4:	2036      	movs	r0, #54	; 0x36
 80153b6:	f7f6 fdeb 	bl	800bf90 <pbuf_alloc>
 80153ba:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80153bc:	69bb      	ldr	r3, [r7, #24]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d101      	bne.n	80153c6 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80153c2:	2300      	movs	r3, #0
 80153c4:	e098      	b.n	80154f8 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80153c6:	69bb      	ldr	r3, [r7, #24]
 80153c8:	895b      	ldrh	r3, [r3, #10]
 80153ca:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80153ce:	d206      	bcs.n	80153de <dhcp_create_msg+0x72>
 80153d0:	4b4b      	ldr	r3, [pc, #300]	; (8015500 <dhcp_create_msg+0x194>)
 80153d2:	f240 7271 	movw	r2, #1905	; 0x771
 80153d6:	494e      	ldr	r1, [pc, #312]	; (8015510 <dhcp_create_msg+0x1a4>)
 80153d8:	484b      	ldr	r0, [pc, #300]	; (8015508 <dhcp_create_msg+0x19c>)
 80153da:	f002 fea9 	bl	8018130 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80153de:	79fb      	ldrb	r3, [r7, #7]
 80153e0:	2b03      	cmp	r3, #3
 80153e2:	d103      	bne.n	80153ec <dhcp_create_msg+0x80>
 80153e4:	68bb      	ldr	r3, [r7, #8]
 80153e6:	795b      	ldrb	r3, [r3, #5]
 80153e8:	2b03      	cmp	r3, #3
 80153ea:	d10d      	bne.n	8015408 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80153ec:	68bb      	ldr	r3, [r7, #8]
 80153ee:	799b      	ldrb	r3, [r3, #6]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d105      	bne.n	8015400 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80153f4:	f002 fdae 	bl	8017f54 <rand>
 80153f8:	4603      	mov	r3, r0
 80153fa:	461a      	mov	r2, r3
 80153fc:	4b45      	ldr	r3, [pc, #276]	; (8015514 <dhcp_create_msg+0x1a8>)
 80153fe:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8015400:	4b44      	ldr	r3, [pc, #272]	; (8015514 <dhcp_create_msg+0x1a8>)
 8015402:	681a      	ldr	r2, [r3, #0]
 8015404:	68bb      	ldr	r3, [r7, #8]
 8015406:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8015408:	69bb      	ldr	r3, [r7, #24]
 801540a:	685b      	ldr	r3, [r3, #4]
 801540c:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801540e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8015412:	2100      	movs	r1, #0
 8015414:	6978      	ldr	r0, [r7, #20]
 8015416:	f002 fef0 	bl	80181fa <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801541a:	697b      	ldr	r3, [r7, #20]
 801541c:	2201      	movs	r2, #1
 801541e:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8015420:	697b      	ldr	r3, [r7, #20]
 8015422:	2201      	movs	r2, #1
 8015424:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801542c:	697b      	ldr	r3, [r7, #20]
 801542e:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8015430:	68bb      	ldr	r3, [r7, #8]
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	4618      	mov	r0, r3
 8015436:	f7f5 fc70 	bl	800ad1a <lwip_htonl>
 801543a:	4602      	mov	r2, r0
 801543c:	697b      	ldr	r3, [r7, #20]
 801543e:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8015440:	79fb      	ldrb	r3, [r7, #7]
 8015442:	2b08      	cmp	r3, #8
 8015444:	d010      	beq.n	8015468 <dhcp_create_msg+0xfc>
 8015446:	79fb      	ldrb	r3, [r7, #7]
 8015448:	2b04      	cmp	r3, #4
 801544a:	d00d      	beq.n	8015468 <dhcp_create_msg+0xfc>
 801544c:	79fb      	ldrb	r3, [r7, #7]
 801544e:	2b07      	cmp	r3, #7
 8015450:	d00a      	beq.n	8015468 <dhcp_create_msg+0xfc>
 8015452:	79fb      	ldrb	r3, [r7, #7]
 8015454:	2b03      	cmp	r3, #3
 8015456:	d10c      	bne.n	8015472 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015458:	68bb      	ldr	r3, [r7, #8]
 801545a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801545c:	2b05      	cmp	r3, #5
 801545e:	d003      	beq.n	8015468 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015460:	68bb      	ldr	r3, [r7, #8]
 8015462:	795b      	ldrb	r3, [r3, #5]
 8015464:	2b04      	cmp	r3, #4
 8015466:	d104      	bne.n	8015472 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	3304      	adds	r3, #4
 801546c:	681a      	ldr	r2, [r3, #0]
 801546e:	697b      	ldr	r3, [r7, #20]
 8015470:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015472:	2300      	movs	r3, #0
 8015474:	83fb      	strh	r3, [r7, #30]
 8015476:	e00c      	b.n	8015492 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8015478:	8bfa      	ldrh	r2, [r7, #30]
 801547a:	8bfb      	ldrh	r3, [r7, #30]
 801547c:	68f9      	ldr	r1, [r7, #12]
 801547e:	440a      	add	r2, r1
 8015480:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8015484:	697a      	ldr	r2, [r7, #20]
 8015486:	4413      	add	r3, r2
 8015488:	460a      	mov	r2, r1
 801548a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801548c:	8bfb      	ldrh	r3, [r7, #30]
 801548e:	3301      	adds	r3, #1
 8015490:	83fb      	strh	r3, [r7, #30]
 8015492:	8bfb      	ldrh	r3, [r7, #30]
 8015494:	2b05      	cmp	r3, #5
 8015496:	d9ef      	bls.n	8015478 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8015498:	697b      	ldr	r3, [r7, #20]
 801549a:	2200      	movs	r2, #0
 801549c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80154a0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80154a4:	2200      	movs	r2, #0
 80154a6:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80154aa:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80154ae:	2200      	movs	r2, #0
 80154b0:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80154b4:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80154b8:	2200      	movs	r2, #0
 80154ba:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80154be:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80154c2:	697b      	ldr	r3, [r7, #20]
 80154c4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80154c8:	2301      	movs	r3, #1
 80154ca:	2235      	movs	r2, #53	; 0x35
 80154cc:	2000      	movs	r0, #0
 80154ce:	f7ff fadb 	bl	8014a88 <dhcp_option>
 80154d2:	4603      	mov	r3, r0
 80154d4:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80154d6:	697b      	ldr	r3, [r7, #20]
 80154d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80154dc:	79fa      	ldrb	r2, [r7, #7]
 80154de:	8a7b      	ldrh	r3, [r7, #18]
 80154e0:	4618      	mov	r0, r3
 80154e2:	f7ff fb05 	bl	8014af0 <dhcp_option_byte>
 80154e6:	4603      	mov	r3, r0
 80154e8:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80154ea:	683b      	ldr	r3, [r7, #0]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d002      	beq.n	80154f6 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80154f0:	683b      	ldr	r3, [r7, #0]
 80154f2:	8a7a      	ldrh	r2, [r7, #18]
 80154f4:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80154f6:	69bb      	ldr	r3, [r7, #24]
}
 80154f8:	4618      	mov	r0, r3
 80154fa:	3720      	adds	r7, #32
 80154fc:	46bd      	mov	sp, r7
 80154fe:	bd80      	pop	{r7, pc}
 8015500:	0801c158 	.word	0x0801c158
 8015504:	0801c478 	.word	0x0801c478
 8015508:	0801c1b8 	.word	0x0801c1b8
 801550c:	0801c498 	.word	0x0801c498
 8015510:	0801c4b8 	.word	0x0801c4b8
 8015514:	20010dec 	.word	0x20010dec

08015518 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8015518:	b580      	push	{r7, lr}
 801551a:	b084      	sub	sp, #16
 801551c:	af00      	add	r7, sp, #0
 801551e:	4603      	mov	r3, r0
 8015520:	60b9      	str	r1, [r7, #8]
 8015522:	607a      	str	r2, [r7, #4]
 8015524:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8015526:	89fb      	ldrh	r3, [r7, #14]
 8015528:	1c5a      	adds	r2, r3, #1
 801552a:	81fa      	strh	r2, [r7, #14]
 801552c:	461a      	mov	r2, r3
 801552e:	68bb      	ldr	r3, [r7, #8]
 8015530:	4413      	add	r3, r2
 8015532:	22ff      	movs	r2, #255	; 0xff
 8015534:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015536:	e007      	b.n	8015548 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8015538:	89fb      	ldrh	r3, [r7, #14]
 801553a:	1c5a      	adds	r2, r3, #1
 801553c:	81fa      	strh	r2, [r7, #14]
 801553e:	461a      	mov	r2, r3
 8015540:	68bb      	ldr	r3, [r7, #8]
 8015542:	4413      	add	r3, r2
 8015544:	2200      	movs	r2, #0
 8015546:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015548:	89fb      	ldrh	r3, [r7, #14]
 801554a:	2b43      	cmp	r3, #67	; 0x43
 801554c:	d904      	bls.n	8015558 <dhcp_option_trailer+0x40>
 801554e:	89fb      	ldrh	r3, [r7, #14]
 8015550:	f003 0303 	and.w	r3, r3, #3
 8015554:	2b00      	cmp	r3, #0
 8015556:	d002      	beq.n	801555e <dhcp_option_trailer+0x46>
 8015558:	89fb      	ldrh	r3, [r7, #14]
 801555a:	2b43      	cmp	r3, #67	; 0x43
 801555c:	d9ec      	bls.n	8015538 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801555e:	89fb      	ldrh	r3, [r7, #14]
 8015560:	33f0      	adds	r3, #240	; 0xf0
 8015562:	b29b      	uxth	r3, r3
 8015564:	4619      	mov	r1, r3
 8015566:	6878      	ldr	r0, [r7, #4]
 8015568:	f7f6 fe70 	bl	800c24c <pbuf_realloc>
}
 801556c:	bf00      	nop
 801556e:	3710      	adds	r7, #16
 8015570:	46bd      	mov	sp, r7
 8015572:	bd80      	pop	{r7, pc}

08015574 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8015574:	b480      	push	{r7}
 8015576:	b085      	sub	sp, #20
 8015578:	af00      	add	r7, sp, #0
 801557a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	2b00      	cmp	r3, #0
 8015580:	d017      	beq.n	80155b2 <dhcp_supplied_address+0x3e>
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015586:	2b00      	cmp	r3, #0
 8015588:	d013      	beq.n	80155b2 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801558e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	795b      	ldrb	r3, [r3, #5]
 8015594:	2b0a      	cmp	r3, #10
 8015596:	d007      	beq.n	80155a8 <dhcp_supplied_address+0x34>
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	795b      	ldrb	r3, [r3, #5]
 801559c:	2b05      	cmp	r3, #5
 801559e:	d003      	beq.n	80155a8 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80155a4:	2b04      	cmp	r3, #4
 80155a6:	d101      	bne.n	80155ac <dhcp_supplied_address+0x38>
 80155a8:	2301      	movs	r3, #1
 80155aa:	e000      	b.n	80155ae <dhcp_supplied_address+0x3a>
 80155ac:	2300      	movs	r3, #0
 80155ae:	b2db      	uxtb	r3, r3
 80155b0:	e000      	b.n	80155b4 <dhcp_supplied_address+0x40>
  }
  return 0;
 80155b2:	2300      	movs	r3, #0
}
 80155b4:	4618      	mov	r0, r3
 80155b6:	3714      	adds	r7, #20
 80155b8:	46bd      	mov	sp, r7
 80155ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155be:	4770      	bx	lr

080155c0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80155c0:	b580      	push	{r7, lr}
 80155c2:	b082      	sub	sp, #8
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80155c8:	4915      	ldr	r1, [pc, #84]	; (8015620 <etharp_free_entry+0x60>)
 80155ca:	687a      	ldr	r2, [r7, #4]
 80155cc:	4613      	mov	r3, r2
 80155ce:	005b      	lsls	r3, r3, #1
 80155d0:	4413      	add	r3, r2
 80155d2:	00db      	lsls	r3, r3, #3
 80155d4:	440b      	add	r3, r1
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d013      	beq.n	8015604 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80155dc:	4910      	ldr	r1, [pc, #64]	; (8015620 <etharp_free_entry+0x60>)
 80155de:	687a      	ldr	r2, [r7, #4]
 80155e0:	4613      	mov	r3, r2
 80155e2:	005b      	lsls	r3, r3, #1
 80155e4:	4413      	add	r3, r2
 80155e6:	00db      	lsls	r3, r3, #3
 80155e8:	440b      	add	r3, r1
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	4618      	mov	r0, r3
 80155ee:	f7f6 ffb3 	bl	800c558 <pbuf_free>
    arp_table[i].q = NULL;
 80155f2:	490b      	ldr	r1, [pc, #44]	; (8015620 <etharp_free_entry+0x60>)
 80155f4:	687a      	ldr	r2, [r7, #4]
 80155f6:	4613      	mov	r3, r2
 80155f8:	005b      	lsls	r3, r3, #1
 80155fa:	4413      	add	r3, r2
 80155fc:	00db      	lsls	r3, r3, #3
 80155fe:	440b      	add	r3, r1
 8015600:	2200      	movs	r2, #0
 8015602:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015604:	4906      	ldr	r1, [pc, #24]	; (8015620 <etharp_free_entry+0x60>)
 8015606:	687a      	ldr	r2, [r7, #4]
 8015608:	4613      	mov	r3, r2
 801560a:	005b      	lsls	r3, r3, #1
 801560c:	4413      	add	r3, r2
 801560e:	00db      	lsls	r3, r3, #3
 8015610:	440b      	add	r3, r1
 8015612:	3314      	adds	r3, #20
 8015614:	2200      	movs	r2, #0
 8015616:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015618:	bf00      	nop
 801561a:	3708      	adds	r7, #8
 801561c:	46bd      	mov	sp, r7
 801561e:	bd80      	pop	{r7, pc}
 8015620:	20010df0 	.word	0x20010df0

08015624 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015624:	b580      	push	{r7, lr}
 8015626:	b082      	sub	sp, #8
 8015628:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801562a:	2300      	movs	r3, #0
 801562c:	607b      	str	r3, [r7, #4]
 801562e:	e096      	b.n	801575e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015630:	494f      	ldr	r1, [pc, #316]	; (8015770 <etharp_tmr+0x14c>)
 8015632:	687a      	ldr	r2, [r7, #4]
 8015634:	4613      	mov	r3, r2
 8015636:	005b      	lsls	r3, r3, #1
 8015638:	4413      	add	r3, r2
 801563a:	00db      	lsls	r3, r3, #3
 801563c:	440b      	add	r3, r1
 801563e:	3314      	adds	r3, #20
 8015640:	781b      	ldrb	r3, [r3, #0]
 8015642:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015644:	78fb      	ldrb	r3, [r7, #3]
 8015646:	2b00      	cmp	r3, #0
 8015648:	f000 8086 	beq.w	8015758 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801564c:	4948      	ldr	r1, [pc, #288]	; (8015770 <etharp_tmr+0x14c>)
 801564e:	687a      	ldr	r2, [r7, #4]
 8015650:	4613      	mov	r3, r2
 8015652:	005b      	lsls	r3, r3, #1
 8015654:	4413      	add	r3, r2
 8015656:	00db      	lsls	r3, r3, #3
 8015658:	440b      	add	r3, r1
 801565a:	3312      	adds	r3, #18
 801565c:	881b      	ldrh	r3, [r3, #0]
 801565e:	3301      	adds	r3, #1
 8015660:	b298      	uxth	r0, r3
 8015662:	4943      	ldr	r1, [pc, #268]	; (8015770 <etharp_tmr+0x14c>)
 8015664:	687a      	ldr	r2, [r7, #4]
 8015666:	4613      	mov	r3, r2
 8015668:	005b      	lsls	r3, r3, #1
 801566a:	4413      	add	r3, r2
 801566c:	00db      	lsls	r3, r3, #3
 801566e:	440b      	add	r3, r1
 8015670:	3312      	adds	r3, #18
 8015672:	4602      	mov	r2, r0
 8015674:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015676:	493e      	ldr	r1, [pc, #248]	; (8015770 <etharp_tmr+0x14c>)
 8015678:	687a      	ldr	r2, [r7, #4]
 801567a:	4613      	mov	r3, r2
 801567c:	005b      	lsls	r3, r3, #1
 801567e:	4413      	add	r3, r2
 8015680:	00db      	lsls	r3, r3, #3
 8015682:	440b      	add	r3, r1
 8015684:	3312      	adds	r3, #18
 8015686:	881b      	ldrh	r3, [r3, #0]
 8015688:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801568c:	d215      	bcs.n	80156ba <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801568e:	4938      	ldr	r1, [pc, #224]	; (8015770 <etharp_tmr+0x14c>)
 8015690:	687a      	ldr	r2, [r7, #4]
 8015692:	4613      	mov	r3, r2
 8015694:	005b      	lsls	r3, r3, #1
 8015696:	4413      	add	r3, r2
 8015698:	00db      	lsls	r3, r3, #3
 801569a:	440b      	add	r3, r1
 801569c:	3314      	adds	r3, #20
 801569e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80156a0:	2b01      	cmp	r3, #1
 80156a2:	d10e      	bne.n	80156c2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80156a4:	4932      	ldr	r1, [pc, #200]	; (8015770 <etharp_tmr+0x14c>)
 80156a6:	687a      	ldr	r2, [r7, #4]
 80156a8:	4613      	mov	r3, r2
 80156aa:	005b      	lsls	r3, r3, #1
 80156ac:	4413      	add	r3, r2
 80156ae:	00db      	lsls	r3, r3, #3
 80156b0:	440b      	add	r3, r1
 80156b2:	3312      	adds	r3, #18
 80156b4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80156b6:	2b04      	cmp	r3, #4
 80156b8:	d903      	bls.n	80156c2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80156ba:	6878      	ldr	r0, [r7, #4]
 80156bc:	f7ff ff80 	bl	80155c0 <etharp_free_entry>
 80156c0:	e04a      	b.n	8015758 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80156c2:	492b      	ldr	r1, [pc, #172]	; (8015770 <etharp_tmr+0x14c>)
 80156c4:	687a      	ldr	r2, [r7, #4]
 80156c6:	4613      	mov	r3, r2
 80156c8:	005b      	lsls	r3, r3, #1
 80156ca:	4413      	add	r3, r2
 80156cc:	00db      	lsls	r3, r3, #3
 80156ce:	440b      	add	r3, r1
 80156d0:	3314      	adds	r3, #20
 80156d2:	781b      	ldrb	r3, [r3, #0]
 80156d4:	2b03      	cmp	r3, #3
 80156d6:	d10a      	bne.n	80156ee <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80156d8:	4925      	ldr	r1, [pc, #148]	; (8015770 <etharp_tmr+0x14c>)
 80156da:	687a      	ldr	r2, [r7, #4]
 80156dc:	4613      	mov	r3, r2
 80156de:	005b      	lsls	r3, r3, #1
 80156e0:	4413      	add	r3, r2
 80156e2:	00db      	lsls	r3, r3, #3
 80156e4:	440b      	add	r3, r1
 80156e6:	3314      	adds	r3, #20
 80156e8:	2204      	movs	r2, #4
 80156ea:	701a      	strb	r2, [r3, #0]
 80156ec:	e034      	b.n	8015758 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80156ee:	4920      	ldr	r1, [pc, #128]	; (8015770 <etharp_tmr+0x14c>)
 80156f0:	687a      	ldr	r2, [r7, #4]
 80156f2:	4613      	mov	r3, r2
 80156f4:	005b      	lsls	r3, r3, #1
 80156f6:	4413      	add	r3, r2
 80156f8:	00db      	lsls	r3, r3, #3
 80156fa:	440b      	add	r3, r1
 80156fc:	3314      	adds	r3, #20
 80156fe:	781b      	ldrb	r3, [r3, #0]
 8015700:	2b04      	cmp	r3, #4
 8015702:	d10a      	bne.n	801571a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015704:	491a      	ldr	r1, [pc, #104]	; (8015770 <etharp_tmr+0x14c>)
 8015706:	687a      	ldr	r2, [r7, #4]
 8015708:	4613      	mov	r3, r2
 801570a:	005b      	lsls	r3, r3, #1
 801570c:	4413      	add	r3, r2
 801570e:	00db      	lsls	r3, r3, #3
 8015710:	440b      	add	r3, r1
 8015712:	3314      	adds	r3, #20
 8015714:	2202      	movs	r2, #2
 8015716:	701a      	strb	r2, [r3, #0]
 8015718:	e01e      	b.n	8015758 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801571a:	4915      	ldr	r1, [pc, #84]	; (8015770 <etharp_tmr+0x14c>)
 801571c:	687a      	ldr	r2, [r7, #4]
 801571e:	4613      	mov	r3, r2
 8015720:	005b      	lsls	r3, r3, #1
 8015722:	4413      	add	r3, r2
 8015724:	00db      	lsls	r3, r3, #3
 8015726:	440b      	add	r3, r1
 8015728:	3314      	adds	r3, #20
 801572a:	781b      	ldrb	r3, [r3, #0]
 801572c:	2b01      	cmp	r3, #1
 801572e:	d113      	bne.n	8015758 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015730:	490f      	ldr	r1, [pc, #60]	; (8015770 <etharp_tmr+0x14c>)
 8015732:	687a      	ldr	r2, [r7, #4]
 8015734:	4613      	mov	r3, r2
 8015736:	005b      	lsls	r3, r3, #1
 8015738:	4413      	add	r3, r2
 801573a:	00db      	lsls	r3, r3, #3
 801573c:	440b      	add	r3, r1
 801573e:	3308      	adds	r3, #8
 8015740:	6818      	ldr	r0, [r3, #0]
 8015742:	687a      	ldr	r2, [r7, #4]
 8015744:	4613      	mov	r3, r2
 8015746:	005b      	lsls	r3, r3, #1
 8015748:	4413      	add	r3, r2
 801574a:	00db      	lsls	r3, r3, #3
 801574c:	4a08      	ldr	r2, [pc, #32]	; (8015770 <etharp_tmr+0x14c>)
 801574e:	4413      	add	r3, r2
 8015750:	3304      	adds	r3, #4
 8015752:	4619      	mov	r1, r3
 8015754:	f000 fe72 	bl	801643c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	3301      	adds	r3, #1
 801575c:	607b      	str	r3, [r7, #4]
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	2b09      	cmp	r3, #9
 8015762:	f77f af65 	ble.w	8015630 <etharp_tmr+0xc>
      }
    }
  }
}
 8015766:	bf00      	nop
 8015768:	bf00      	nop
 801576a:	3708      	adds	r7, #8
 801576c:	46bd      	mov	sp, r7
 801576e:	bd80      	pop	{r7, pc}
 8015770:	20010df0 	.word	0x20010df0

08015774 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015774:	b580      	push	{r7, lr}
 8015776:	b08a      	sub	sp, #40	; 0x28
 8015778:	af00      	add	r7, sp, #0
 801577a:	60f8      	str	r0, [r7, #12]
 801577c:	460b      	mov	r3, r1
 801577e:	607a      	str	r2, [r7, #4]
 8015780:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015782:	230a      	movs	r3, #10
 8015784:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015786:	230a      	movs	r3, #10
 8015788:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801578a:	230a      	movs	r3, #10
 801578c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801578e:	2300      	movs	r3, #0
 8015790:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015792:	230a      	movs	r3, #10
 8015794:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015796:	2300      	movs	r3, #0
 8015798:	83bb      	strh	r3, [r7, #28]
 801579a:	2300      	movs	r3, #0
 801579c:	837b      	strh	r3, [r7, #26]
 801579e:	2300      	movs	r3, #0
 80157a0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80157a2:	2300      	movs	r3, #0
 80157a4:	843b      	strh	r3, [r7, #32]
 80157a6:	e0ae      	b.n	8015906 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80157a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80157ac:	49a6      	ldr	r1, [pc, #664]	; (8015a48 <etharp_find_entry+0x2d4>)
 80157ae:	4613      	mov	r3, r2
 80157b0:	005b      	lsls	r3, r3, #1
 80157b2:	4413      	add	r3, r2
 80157b4:	00db      	lsls	r3, r3, #3
 80157b6:	440b      	add	r3, r1
 80157b8:	3314      	adds	r3, #20
 80157ba:	781b      	ldrb	r3, [r3, #0]
 80157bc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80157be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80157c2:	2b0a      	cmp	r3, #10
 80157c4:	d105      	bne.n	80157d2 <etharp_find_entry+0x5e>
 80157c6:	7dfb      	ldrb	r3, [r7, #23]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d102      	bne.n	80157d2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80157cc:	8c3b      	ldrh	r3, [r7, #32]
 80157ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80157d0:	e095      	b.n	80158fe <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80157d2:	7dfb      	ldrb	r3, [r7, #23]
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	f000 8092 	beq.w	80158fe <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80157da:	7dfb      	ldrb	r3, [r7, #23]
 80157dc:	2b01      	cmp	r3, #1
 80157de:	d009      	beq.n	80157f4 <etharp_find_entry+0x80>
 80157e0:	7dfb      	ldrb	r3, [r7, #23]
 80157e2:	2b01      	cmp	r3, #1
 80157e4:	d806      	bhi.n	80157f4 <etharp_find_entry+0x80>
 80157e6:	4b99      	ldr	r3, [pc, #612]	; (8015a4c <etharp_find_entry+0x2d8>)
 80157e8:	f240 1223 	movw	r2, #291	; 0x123
 80157ec:	4998      	ldr	r1, [pc, #608]	; (8015a50 <etharp_find_entry+0x2dc>)
 80157ee:	4899      	ldr	r0, [pc, #612]	; (8015a54 <etharp_find_entry+0x2e0>)
 80157f0:	f002 fc9e 	bl	8018130 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d020      	beq.n	801583c <etharp_find_entry+0xc8>
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	6819      	ldr	r1, [r3, #0]
 80157fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015802:	4891      	ldr	r0, [pc, #580]	; (8015a48 <etharp_find_entry+0x2d4>)
 8015804:	4613      	mov	r3, r2
 8015806:	005b      	lsls	r3, r3, #1
 8015808:	4413      	add	r3, r2
 801580a:	00db      	lsls	r3, r3, #3
 801580c:	4403      	add	r3, r0
 801580e:	3304      	adds	r3, #4
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	4299      	cmp	r1, r3
 8015814:	d112      	bne.n	801583c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	2b00      	cmp	r3, #0
 801581a:	d00c      	beq.n	8015836 <etharp_find_entry+0xc2>
 801581c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015820:	4989      	ldr	r1, [pc, #548]	; (8015a48 <etharp_find_entry+0x2d4>)
 8015822:	4613      	mov	r3, r2
 8015824:	005b      	lsls	r3, r3, #1
 8015826:	4413      	add	r3, r2
 8015828:	00db      	lsls	r3, r3, #3
 801582a:	440b      	add	r3, r1
 801582c:	3308      	adds	r3, #8
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	687a      	ldr	r2, [r7, #4]
 8015832:	429a      	cmp	r2, r3
 8015834:	d102      	bne.n	801583c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015836:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801583a:	e100      	b.n	8015a3e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801583c:	7dfb      	ldrb	r3, [r7, #23]
 801583e:	2b01      	cmp	r3, #1
 8015840:	d140      	bne.n	80158c4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015842:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015846:	4980      	ldr	r1, [pc, #512]	; (8015a48 <etharp_find_entry+0x2d4>)
 8015848:	4613      	mov	r3, r2
 801584a:	005b      	lsls	r3, r3, #1
 801584c:	4413      	add	r3, r2
 801584e:	00db      	lsls	r3, r3, #3
 8015850:	440b      	add	r3, r1
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	2b00      	cmp	r3, #0
 8015856:	d01a      	beq.n	801588e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015858:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801585c:	497a      	ldr	r1, [pc, #488]	; (8015a48 <etharp_find_entry+0x2d4>)
 801585e:	4613      	mov	r3, r2
 8015860:	005b      	lsls	r3, r3, #1
 8015862:	4413      	add	r3, r2
 8015864:	00db      	lsls	r3, r3, #3
 8015866:	440b      	add	r3, r1
 8015868:	3312      	adds	r3, #18
 801586a:	881b      	ldrh	r3, [r3, #0]
 801586c:	8bba      	ldrh	r2, [r7, #28]
 801586e:	429a      	cmp	r2, r3
 8015870:	d845      	bhi.n	80158fe <etharp_find_entry+0x18a>
            old_queue = i;
 8015872:	8c3b      	ldrh	r3, [r7, #32]
 8015874:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015876:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801587a:	4973      	ldr	r1, [pc, #460]	; (8015a48 <etharp_find_entry+0x2d4>)
 801587c:	4613      	mov	r3, r2
 801587e:	005b      	lsls	r3, r3, #1
 8015880:	4413      	add	r3, r2
 8015882:	00db      	lsls	r3, r3, #3
 8015884:	440b      	add	r3, r1
 8015886:	3312      	adds	r3, #18
 8015888:	881b      	ldrh	r3, [r3, #0]
 801588a:	83bb      	strh	r3, [r7, #28]
 801588c:	e037      	b.n	80158fe <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801588e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015892:	496d      	ldr	r1, [pc, #436]	; (8015a48 <etharp_find_entry+0x2d4>)
 8015894:	4613      	mov	r3, r2
 8015896:	005b      	lsls	r3, r3, #1
 8015898:	4413      	add	r3, r2
 801589a:	00db      	lsls	r3, r3, #3
 801589c:	440b      	add	r3, r1
 801589e:	3312      	adds	r3, #18
 80158a0:	881b      	ldrh	r3, [r3, #0]
 80158a2:	8b7a      	ldrh	r2, [r7, #26]
 80158a4:	429a      	cmp	r2, r3
 80158a6:	d82a      	bhi.n	80158fe <etharp_find_entry+0x18a>
            old_pending = i;
 80158a8:	8c3b      	ldrh	r3, [r7, #32]
 80158aa:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80158ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80158b0:	4965      	ldr	r1, [pc, #404]	; (8015a48 <etharp_find_entry+0x2d4>)
 80158b2:	4613      	mov	r3, r2
 80158b4:	005b      	lsls	r3, r3, #1
 80158b6:	4413      	add	r3, r2
 80158b8:	00db      	lsls	r3, r3, #3
 80158ba:	440b      	add	r3, r1
 80158bc:	3312      	adds	r3, #18
 80158be:	881b      	ldrh	r3, [r3, #0]
 80158c0:	837b      	strh	r3, [r7, #26]
 80158c2:	e01c      	b.n	80158fe <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80158c4:	7dfb      	ldrb	r3, [r7, #23]
 80158c6:	2b01      	cmp	r3, #1
 80158c8:	d919      	bls.n	80158fe <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80158ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80158ce:	495e      	ldr	r1, [pc, #376]	; (8015a48 <etharp_find_entry+0x2d4>)
 80158d0:	4613      	mov	r3, r2
 80158d2:	005b      	lsls	r3, r3, #1
 80158d4:	4413      	add	r3, r2
 80158d6:	00db      	lsls	r3, r3, #3
 80158d8:	440b      	add	r3, r1
 80158da:	3312      	adds	r3, #18
 80158dc:	881b      	ldrh	r3, [r3, #0]
 80158de:	8b3a      	ldrh	r2, [r7, #24]
 80158e0:	429a      	cmp	r2, r3
 80158e2:	d80c      	bhi.n	80158fe <etharp_find_entry+0x18a>
            old_stable = i;
 80158e4:	8c3b      	ldrh	r3, [r7, #32]
 80158e6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80158e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80158ec:	4956      	ldr	r1, [pc, #344]	; (8015a48 <etharp_find_entry+0x2d4>)
 80158ee:	4613      	mov	r3, r2
 80158f0:	005b      	lsls	r3, r3, #1
 80158f2:	4413      	add	r3, r2
 80158f4:	00db      	lsls	r3, r3, #3
 80158f6:	440b      	add	r3, r1
 80158f8:	3312      	adds	r3, #18
 80158fa:	881b      	ldrh	r3, [r3, #0]
 80158fc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80158fe:	8c3b      	ldrh	r3, [r7, #32]
 8015900:	3301      	adds	r3, #1
 8015902:	b29b      	uxth	r3, r3
 8015904:	843b      	strh	r3, [r7, #32]
 8015906:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801590a:	2b09      	cmp	r3, #9
 801590c:	f77f af4c 	ble.w	80157a8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015910:	7afb      	ldrb	r3, [r7, #11]
 8015912:	f003 0302 	and.w	r3, r3, #2
 8015916:	2b00      	cmp	r3, #0
 8015918:	d108      	bne.n	801592c <etharp_find_entry+0x1b8>
 801591a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801591e:	2b0a      	cmp	r3, #10
 8015920:	d107      	bne.n	8015932 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015922:	7afb      	ldrb	r3, [r7, #11]
 8015924:	f003 0301 	and.w	r3, r3, #1
 8015928:	2b00      	cmp	r3, #0
 801592a:	d102      	bne.n	8015932 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801592c:	f04f 33ff 	mov.w	r3, #4294967295
 8015930:	e085      	b.n	8015a3e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015932:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015936:	2b09      	cmp	r3, #9
 8015938:	dc02      	bgt.n	8015940 <etharp_find_entry+0x1cc>
    i = empty;
 801593a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801593c:	843b      	strh	r3, [r7, #32]
 801593e:	e039      	b.n	80159b4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015940:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015944:	2b09      	cmp	r3, #9
 8015946:	dc14      	bgt.n	8015972 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015948:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801594a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801594c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015950:	493d      	ldr	r1, [pc, #244]	; (8015a48 <etharp_find_entry+0x2d4>)
 8015952:	4613      	mov	r3, r2
 8015954:	005b      	lsls	r3, r3, #1
 8015956:	4413      	add	r3, r2
 8015958:	00db      	lsls	r3, r3, #3
 801595a:	440b      	add	r3, r1
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d018      	beq.n	8015994 <etharp_find_entry+0x220>
 8015962:	4b3a      	ldr	r3, [pc, #232]	; (8015a4c <etharp_find_entry+0x2d8>)
 8015964:	f240 126d 	movw	r2, #365	; 0x16d
 8015968:	493b      	ldr	r1, [pc, #236]	; (8015a58 <etharp_find_entry+0x2e4>)
 801596a:	483a      	ldr	r0, [pc, #232]	; (8015a54 <etharp_find_entry+0x2e0>)
 801596c:	f002 fbe0 	bl	8018130 <iprintf>
 8015970:	e010      	b.n	8015994 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015972:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015976:	2b09      	cmp	r3, #9
 8015978:	dc02      	bgt.n	8015980 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801597a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801597c:	843b      	strh	r3, [r7, #32]
 801597e:	e009      	b.n	8015994 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015980:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015984:	2b09      	cmp	r3, #9
 8015986:	dc02      	bgt.n	801598e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015988:	8bfb      	ldrh	r3, [r7, #30]
 801598a:	843b      	strh	r3, [r7, #32]
 801598c:	e002      	b.n	8015994 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801598e:	f04f 33ff 	mov.w	r3, #4294967295
 8015992:	e054      	b.n	8015a3e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015994:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015998:	2b09      	cmp	r3, #9
 801599a:	dd06      	ble.n	80159aa <etharp_find_entry+0x236>
 801599c:	4b2b      	ldr	r3, [pc, #172]	; (8015a4c <etharp_find_entry+0x2d8>)
 801599e:	f240 127f 	movw	r2, #383	; 0x17f
 80159a2:	492e      	ldr	r1, [pc, #184]	; (8015a5c <etharp_find_entry+0x2e8>)
 80159a4:	482b      	ldr	r0, [pc, #172]	; (8015a54 <etharp_find_entry+0x2e0>)
 80159a6:	f002 fbc3 	bl	8018130 <iprintf>
    etharp_free_entry(i);
 80159aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80159ae:	4618      	mov	r0, r3
 80159b0:	f7ff fe06 	bl	80155c0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80159b4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80159b8:	2b09      	cmp	r3, #9
 80159ba:	dd06      	ble.n	80159ca <etharp_find_entry+0x256>
 80159bc:	4b23      	ldr	r3, [pc, #140]	; (8015a4c <etharp_find_entry+0x2d8>)
 80159be:	f240 1283 	movw	r2, #387	; 0x183
 80159c2:	4926      	ldr	r1, [pc, #152]	; (8015a5c <etharp_find_entry+0x2e8>)
 80159c4:	4823      	ldr	r0, [pc, #140]	; (8015a54 <etharp_find_entry+0x2e0>)
 80159c6:	f002 fbb3 	bl	8018130 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80159ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80159ce:	491e      	ldr	r1, [pc, #120]	; (8015a48 <etharp_find_entry+0x2d4>)
 80159d0:	4613      	mov	r3, r2
 80159d2:	005b      	lsls	r3, r3, #1
 80159d4:	4413      	add	r3, r2
 80159d6:	00db      	lsls	r3, r3, #3
 80159d8:	440b      	add	r3, r1
 80159da:	3314      	adds	r3, #20
 80159dc:	781b      	ldrb	r3, [r3, #0]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d006      	beq.n	80159f0 <etharp_find_entry+0x27c>
 80159e2:	4b1a      	ldr	r3, [pc, #104]	; (8015a4c <etharp_find_entry+0x2d8>)
 80159e4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80159e8:	491d      	ldr	r1, [pc, #116]	; (8015a60 <etharp_find_entry+0x2ec>)
 80159ea:	481a      	ldr	r0, [pc, #104]	; (8015a54 <etharp_find_entry+0x2e0>)
 80159ec:	f002 fba0 	bl	8018130 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d00b      	beq.n	8015a0e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80159f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	6819      	ldr	r1, [r3, #0]
 80159fe:	4812      	ldr	r0, [pc, #72]	; (8015a48 <etharp_find_entry+0x2d4>)
 8015a00:	4613      	mov	r3, r2
 8015a02:	005b      	lsls	r3, r3, #1
 8015a04:	4413      	add	r3, r2
 8015a06:	00db      	lsls	r3, r3, #3
 8015a08:	4403      	add	r3, r0
 8015a0a:	3304      	adds	r3, #4
 8015a0c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015a0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a12:	490d      	ldr	r1, [pc, #52]	; (8015a48 <etharp_find_entry+0x2d4>)
 8015a14:	4613      	mov	r3, r2
 8015a16:	005b      	lsls	r3, r3, #1
 8015a18:	4413      	add	r3, r2
 8015a1a:	00db      	lsls	r3, r3, #3
 8015a1c:	440b      	add	r3, r1
 8015a1e:	3312      	adds	r3, #18
 8015a20:	2200      	movs	r2, #0
 8015a22:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015a24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a28:	4907      	ldr	r1, [pc, #28]	; (8015a48 <etharp_find_entry+0x2d4>)
 8015a2a:	4613      	mov	r3, r2
 8015a2c:	005b      	lsls	r3, r3, #1
 8015a2e:	4413      	add	r3, r2
 8015a30:	00db      	lsls	r3, r3, #3
 8015a32:	440b      	add	r3, r1
 8015a34:	3308      	adds	r3, #8
 8015a36:	687a      	ldr	r2, [r7, #4]
 8015a38:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015a3a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015a3e:	4618      	mov	r0, r3
 8015a40:	3728      	adds	r7, #40	; 0x28
 8015a42:	46bd      	mov	sp, r7
 8015a44:	bd80      	pop	{r7, pc}
 8015a46:	bf00      	nop
 8015a48:	20010df0 	.word	0x20010df0
 8015a4c:	0801c4f8 	.word	0x0801c4f8
 8015a50:	0801c530 	.word	0x0801c530
 8015a54:	0801c570 	.word	0x0801c570
 8015a58:	0801c598 	.word	0x0801c598
 8015a5c:	0801c5b0 	.word	0x0801c5b0
 8015a60:	0801c5c4 	.word	0x0801c5c4

08015a64 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b088      	sub	sp, #32
 8015a68:	af02      	add	r7, sp, #8
 8015a6a:	60f8      	str	r0, [r7, #12]
 8015a6c:	60b9      	str	r1, [r7, #8]
 8015a6e:	607a      	str	r2, [r7, #4]
 8015a70:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015a78:	2b06      	cmp	r3, #6
 8015a7a:	d006      	beq.n	8015a8a <etharp_update_arp_entry+0x26>
 8015a7c:	4b48      	ldr	r3, [pc, #288]	; (8015ba0 <etharp_update_arp_entry+0x13c>)
 8015a7e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015a82:	4948      	ldr	r1, [pc, #288]	; (8015ba4 <etharp_update_arp_entry+0x140>)
 8015a84:	4848      	ldr	r0, [pc, #288]	; (8015ba8 <etharp_update_arp_entry+0x144>)
 8015a86:	f002 fb53 	bl	8018130 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015a8a:	68bb      	ldr	r3, [r7, #8]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d012      	beq.n	8015ab6 <etharp_update_arp_entry+0x52>
 8015a90:	68bb      	ldr	r3, [r7, #8]
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d00e      	beq.n	8015ab6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015a98:	68bb      	ldr	r3, [r7, #8]
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	68f9      	ldr	r1, [r7, #12]
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	f001 f920 	bl	8016ce4 <ip4_addr_isbroadcast_u32>
 8015aa4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d105      	bne.n	8015ab6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015aaa:	68bb      	ldr	r3, [r7, #8]
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015ab2:	2be0      	cmp	r3, #224	; 0xe0
 8015ab4:	d102      	bne.n	8015abc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015ab6:	f06f 030f 	mvn.w	r3, #15
 8015aba:	e06c      	b.n	8015b96 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015abc:	78fb      	ldrb	r3, [r7, #3]
 8015abe:	68fa      	ldr	r2, [r7, #12]
 8015ac0:	4619      	mov	r1, r3
 8015ac2:	68b8      	ldr	r0, [r7, #8]
 8015ac4:	f7ff fe56 	bl	8015774 <etharp_find_entry>
 8015ac8:	4603      	mov	r3, r0
 8015aca:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015acc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	da02      	bge.n	8015ada <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015ad4:	8afb      	ldrh	r3, [r7, #22]
 8015ad6:	b25b      	sxtb	r3, r3
 8015ad8:	e05d      	b.n	8015b96 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015ada:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015ade:	4933      	ldr	r1, [pc, #204]	; (8015bac <etharp_update_arp_entry+0x148>)
 8015ae0:	4613      	mov	r3, r2
 8015ae2:	005b      	lsls	r3, r3, #1
 8015ae4:	4413      	add	r3, r2
 8015ae6:	00db      	lsls	r3, r3, #3
 8015ae8:	440b      	add	r3, r1
 8015aea:	3314      	adds	r3, #20
 8015aec:	2202      	movs	r2, #2
 8015aee:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015af0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015af4:	492d      	ldr	r1, [pc, #180]	; (8015bac <etharp_update_arp_entry+0x148>)
 8015af6:	4613      	mov	r3, r2
 8015af8:	005b      	lsls	r3, r3, #1
 8015afa:	4413      	add	r3, r2
 8015afc:	00db      	lsls	r3, r3, #3
 8015afe:	440b      	add	r3, r1
 8015b00:	3308      	adds	r3, #8
 8015b02:	68fa      	ldr	r2, [r7, #12]
 8015b04:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015b06:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015b0a:	4613      	mov	r3, r2
 8015b0c:	005b      	lsls	r3, r3, #1
 8015b0e:	4413      	add	r3, r2
 8015b10:	00db      	lsls	r3, r3, #3
 8015b12:	3308      	adds	r3, #8
 8015b14:	4a25      	ldr	r2, [pc, #148]	; (8015bac <etharp_update_arp_entry+0x148>)
 8015b16:	4413      	add	r3, r2
 8015b18:	3304      	adds	r3, #4
 8015b1a:	2206      	movs	r2, #6
 8015b1c:	6879      	ldr	r1, [r7, #4]
 8015b1e:	4618      	mov	r0, r3
 8015b20:	f002 fc54 	bl	80183cc <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015b24:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015b28:	4920      	ldr	r1, [pc, #128]	; (8015bac <etharp_update_arp_entry+0x148>)
 8015b2a:	4613      	mov	r3, r2
 8015b2c:	005b      	lsls	r3, r3, #1
 8015b2e:	4413      	add	r3, r2
 8015b30:	00db      	lsls	r3, r3, #3
 8015b32:	440b      	add	r3, r1
 8015b34:	3312      	adds	r3, #18
 8015b36:	2200      	movs	r2, #0
 8015b38:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015b3a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015b3e:	491b      	ldr	r1, [pc, #108]	; (8015bac <etharp_update_arp_entry+0x148>)
 8015b40:	4613      	mov	r3, r2
 8015b42:	005b      	lsls	r3, r3, #1
 8015b44:	4413      	add	r3, r2
 8015b46:	00db      	lsls	r3, r3, #3
 8015b48:	440b      	add	r3, r1
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d021      	beq.n	8015b94 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015b50:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015b54:	4915      	ldr	r1, [pc, #84]	; (8015bac <etharp_update_arp_entry+0x148>)
 8015b56:	4613      	mov	r3, r2
 8015b58:	005b      	lsls	r3, r3, #1
 8015b5a:	4413      	add	r3, r2
 8015b5c:	00db      	lsls	r3, r3, #3
 8015b5e:	440b      	add	r3, r1
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015b64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015b68:	4910      	ldr	r1, [pc, #64]	; (8015bac <etharp_update_arp_entry+0x148>)
 8015b6a:	4613      	mov	r3, r2
 8015b6c:	005b      	lsls	r3, r3, #1
 8015b6e:	4413      	add	r3, r2
 8015b70:	00db      	lsls	r3, r3, #3
 8015b72:	440b      	add	r3, r1
 8015b74:	2200      	movs	r2, #0
 8015b76:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8015b7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015b82:	9300      	str	r3, [sp, #0]
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	6939      	ldr	r1, [r7, #16]
 8015b88:	68f8      	ldr	r0, [r7, #12]
 8015b8a:	f001 ffb9 	bl	8017b00 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015b8e:	6938      	ldr	r0, [r7, #16]
 8015b90:	f7f6 fce2 	bl	800c558 <pbuf_free>
  }
  return ERR_OK;
 8015b94:	2300      	movs	r3, #0
}
 8015b96:	4618      	mov	r0, r3
 8015b98:	3718      	adds	r7, #24
 8015b9a:	46bd      	mov	sp, r7
 8015b9c:	bd80      	pop	{r7, pc}
 8015b9e:	bf00      	nop
 8015ba0:	0801c4f8 	.word	0x0801c4f8
 8015ba4:	0801c5f0 	.word	0x0801c5f0
 8015ba8:	0801c570 	.word	0x0801c570
 8015bac:	20010df0 	.word	0x20010df0

08015bb0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015bb0:	b580      	push	{r7, lr}
 8015bb2:	b084      	sub	sp, #16
 8015bb4:	af00      	add	r7, sp, #0
 8015bb6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015bb8:	2300      	movs	r3, #0
 8015bba:	60fb      	str	r3, [r7, #12]
 8015bbc:	e01e      	b.n	8015bfc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015bbe:	4913      	ldr	r1, [pc, #76]	; (8015c0c <etharp_cleanup_netif+0x5c>)
 8015bc0:	68fa      	ldr	r2, [r7, #12]
 8015bc2:	4613      	mov	r3, r2
 8015bc4:	005b      	lsls	r3, r3, #1
 8015bc6:	4413      	add	r3, r2
 8015bc8:	00db      	lsls	r3, r3, #3
 8015bca:	440b      	add	r3, r1
 8015bcc:	3314      	adds	r3, #20
 8015bce:	781b      	ldrb	r3, [r3, #0]
 8015bd0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015bd2:	7afb      	ldrb	r3, [r7, #11]
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d00e      	beq.n	8015bf6 <etharp_cleanup_netif+0x46>
 8015bd8:	490c      	ldr	r1, [pc, #48]	; (8015c0c <etharp_cleanup_netif+0x5c>)
 8015bda:	68fa      	ldr	r2, [r7, #12]
 8015bdc:	4613      	mov	r3, r2
 8015bde:	005b      	lsls	r3, r3, #1
 8015be0:	4413      	add	r3, r2
 8015be2:	00db      	lsls	r3, r3, #3
 8015be4:	440b      	add	r3, r1
 8015be6:	3308      	adds	r3, #8
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	687a      	ldr	r2, [r7, #4]
 8015bec:	429a      	cmp	r2, r3
 8015bee:	d102      	bne.n	8015bf6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015bf0:	68f8      	ldr	r0, [r7, #12]
 8015bf2:	f7ff fce5 	bl	80155c0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	3301      	adds	r3, #1
 8015bfa:	60fb      	str	r3, [r7, #12]
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	2b09      	cmp	r3, #9
 8015c00:	dddd      	ble.n	8015bbe <etharp_cleanup_netif+0xe>
    }
  }
}
 8015c02:	bf00      	nop
 8015c04:	bf00      	nop
 8015c06:	3710      	adds	r7, #16
 8015c08:	46bd      	mov	sp, r7
 8015c0a:	bd80      	pop	{r7, pc}
 8015c0c:	20010df0 	.word	0x20010df0

08015c10 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015c10:	b5b0      	push	{r4, r5, r7, lr}
 8015c12:	b08a      	sub	sp, #40	; 0x28
 8015c14:	af04      	add	r7, sp, #16
 8015c16:	6078      	str	r0, [r7, #4]
 8015c18:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015c1a:	683b      	ldr	r3, [r7, #0]
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d107      	bne.n	8015c30 <etharp_input+0x20>
 8015c20:	4b3f      	ldr	r3, [pc, #252]	; (8015d20 <etharp_input+0x110>)
 8015c22:	f240 228a 	movw	r2, #650	; 0x28a
 8015c26:	493f      	ldr	r1, [pc, #252]	; (8015d24 <etharp_input+0x114>)
 8015c28:	483f      	ldr	r0, [pc, #252]	; (8015d28 <etharp_input+0x118>)
 8015c2a:	f002 fa81 	bl	8018130 <iprintf>
 8015c2e:	e074      	b.n	8015d1a <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	685b      	ldr	r3, [r3, #4]
 8015c34:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015c36:	693b      	ldr	r3, [r7, #16]
 8015c38:	881b      	ldrh	r3, [r3, #0]
 8015c3a:	b29b      	uxth	r3, r3
 8015c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015c40:	d10c      	bne.n	8015c5c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015c42:	693b      	ldr	r3, [r7, #16]
 8015c44:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015c46:	2b06      	cmp	r3, #6
 8015c48:	d108      	bne.n	8015c5c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015c4a:	693b      	ldr	r3, [r7, #16]
 8015c4c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015c4e:	2b04      	cmp	r3, #4
 8015c50:	d104      	bne.n	8015c5c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015c52:	693b      	ldr	r3, [r7, #16]
 8015c54:	885b      	ldrh	r3, [r3, #2]
 8015c56:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015c58:	2b08      	cmp	r3, #8
 8015c5a:	d003      	beq.n	8015c64 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015c5c:	6878      	ldr	r0, [r7, #4]
 8015c5e:	f7f6 fc7b 	bl	800c558 <pbuf_free>
    return;
 8015c62:	e05a      	b.n	8015d1a <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015c64:	693b      	ldr	r3, [r7, #16]
 8015c66:	330e      	adds	r3, #14
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015c6c:	693b      	ldr	r3, [r7, #16]
 8015c6e:	3318      	adds	r3, #24
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015c74:	683b      	ldr	r3, [r7, #0]
 8015c76:	3304      	adds	r3, #4
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d102      	bne.n	8015c84 <etharp_input+0x74>
    for_us = 0;
 8015c7e:	2300      	movs	r3, #0
 8015c80:	75fb      	strb	r3, [r7, #23]
 8015c82:	e009      	b.n	8015c98 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015c84:	68ba      	ldr	r2, [r7, #8]
 8015c86:	683b      	ldr	r3, [r7, #0]
 8015c88:	3304      	adds	r3, #4
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	429a      	cmp	r2, r3
 8015c8e:	bf0c      	ite	eq
 8015c90:	2301      	moveq	r3, #1
 8015c92:	2300      	movne	r3, #0
 8015c94:	b2db      	uxtb	r3, r3
 8015c96:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015c98:	693b      	ldr	r3, [r7, #16]
 8015c9a:	f103 0208 	add.w	r2, r3, #8
 8015c9e:	7dfb      	ldrb	r3, [r7, #23]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d001      	beq.n	8015ca8 <etharp_input+0x98>
 8015ca4:	2301      	movs	r3, #1
 8015ca6:	e000      	b.n	8015caa <etharp_input+0x9a>
 8015ca8:	2302      	movs	r3, #2
 8015caa:	f107 010c 	add.w	r1, r7, #12
 8015cae:	6838      	ldr	r0, [r7, #0]
 8015cb0:	f7ff fed8 	bl	8015a64 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015cb4:	693b      	ldr	r3, [r7, #16]
 8015cb6:	88db      	ldrh	r3, [r3, #6]
 8015cb8:	b29b      	uxth	r3, r3
 8015cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015cbe:	d003      	beq.n	8015cc8 <etharp_input+0xb8>
 8015cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015cc4:	d01e      	beq.n	8015d04 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015cc6:	e025      	b.n	8015d14 <etharp_input+0x104>
      if (for_us) {
 8015cc8:	7dfb      	ldrb	r3, [r7, #23]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d021      	beq.n	8015d12 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015cce:	683b      	ldr	r3, [r7, #0]
 8015cd0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8015cd4:	693b      	ldr	r3, [r7, #16]
 8015cd6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015cda:	683b      	ldr	r3, [r7, #0]
 8015cdc:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8015ce0:	683b      	ldr	r3, [r7, #0]
 8015ce2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015ce4:	693a      	ldr	r2, [r7, #16]
 8015ce6:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015ce8:	2102      	movs	r1, #2
 8015cea:	9103      	str	r1, [sp, #12]
 8015cec:	f107 010c 	add.w	r1, r7, #12
 8015cf0:	9102      	str	r1, [sp, #8]
 8015cf2:	9201      	str	r2, [sp, #4]
 8015cf4:	9300      	str	r3, [sp, #0]
 8015cf6:	462b      	mov	r3, r5
 8015cf8:	4622      	mov	r2, r4
 8015cfa:	4601      	mov	r1, r0
 8015cfc:	6838      	ldr	r0, [r7, #0]
 8015cfe:	f000 faef 	bl	80162e0 <etharp_raw>
      break;
 8015d02:	e006      	b.n	8015d12 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8015d04:	f107 030c 	add.w	r3, r7, #12
 8015d08:	4619      	mov	r1, r3
 8015d0a:	6838      	ldr	r0, [r7, #0]
 8015d0c:	f7fe f9fc 	bl	8014108 <dhcp_arp_reply>
      break;
 8015d10:	e000      	b.n	8015d14 <etharp_input+0x104>
      break;
 8015d12:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015d14:	6878      	ldr	r0, [r7, #4]
 8015d16:	f7f6 fc1f 	bl	800c558 <pbuf_free>
}
 8015d1a:	3718      	adds	r7, #24
 8015d1c:	46bd      	mov	sp, r7
 8015d1e:	bdb0      	pop	{r4, r5, r7, pc}
 8015d20:	0801c4f8 	.word	0x0801c4f8
 8015d24:	0801c648 	.word	0x0801c648
 8015d28:	0801c570 	.word	0x0801c570

08015d2c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	b086      	sub	sp, #24
 8015d30:	af02      	add	r7, sp, #8
 8015d32:	60f8      	str	r0, [r7, #12]
 8015d34:	60b9      	str	r1, [r7, #8]
 8015d36:	4613      	mov	r3, r2
 8015d38:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015d3a:	79fa      	ldrb	r2, [r7, #7]
 8015d3c:	4944      	ldr	r1, [pc, #272]	; (8015e50 <etharp_output_to_arp_index+0x124>)
 8015d3e:	4613      	mov	r3, r2
 8015d40:	005b      	lsls	r3, r3, #1
 8015d42:	4413      	add	r3, r2
 8015d44:	00db      	lsls	r3, r3, #3
 8015d46:	440b      	add	r3, r1
 8015d48:	3314      	adds	r3, #20
 8015d4a:	781b      	ldrb	r3, [r3, #0]
 8015d4c:	2b01      	cmp	r3, #1
 8015d4e:	d806      	bhi.n	8015d5e <etharp_output_to_arp_index+0x32>
 8015d50:	4b40      	ldr	r3, [pc, #256]	; (8015e54 <etharp_output_to_arp_index+0x128>)
 8015d52:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015d56:	4940      	ldr	r1, [pc, #256]	; (8015e58 <etharp_output_to_arp_index+0x12c>)
 8015d58:	4840      	ldr	r0, [pc, #256]	; (8015e5c <etharp_output_to_arp_index+0x130>)
 8015d5a:	f002 f9e9 	bl	8018130 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015d5e:	79fa      	ldrb	r2, [r7, #7]
 8015d60:	493b      	ldr	r1, [pc, #236]	; (8015e50 <etharp_output_to_arp_index+0x124>)
 8015d62:	4613      	mov	r3, r2
 8015d64:	005b      	lsls	r3, r3, #1
 8015d66:	4413      	add	r3, r2
 8015d68:	00db      	lsls	r3, r3, #3
 8015d6a:	440b      	add	r3, r1
 8015d6c:	3314      	adds	r3, #20
 8015d6e:	781b      	ldrb	r3, [r3, #0]
 8015d70:	2b02      	cmp	r3, #2
 8015d72:	d153      	bne.n	8015e1c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015d74:	79fa      	ldrb	r2, [r7, #7]
 8015d76:	4936      	ldr	r1, [pc, #216]	; (8015e50 <etharp_output_to_arp_index+0x124>)
 8015d78:	4613      	mov	r3, r2
 8015d7a:	005b      	lsls	r3, r3, #1
 8015d7c:	4413      	add	r3, r2
 8015d7e:	00db      	lsls	r3, r3, #3
 8015d80:	440b      	add	r3, r1
 8015d82:	3312      	adds	r3, #18
 8015d84:	881b      	ldrh	r3, [r3, #0]
 8015d86:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015d8a:	d919      	bls.n	8015dc0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015d8c:	79fa      	ldrb	r2, [r7, #7]
 8015d8e:	4613      	mov	r3, r2
 8015d90:	005b      	lsls	r3, r3, #1
 8015d92:	4413      	add	r3, r2
 8015d94:	00db      	lsls	r3, r3, #3
 8015d96:	4a2e      	ldr	r2, [pc, #184]	; (8015e50 <etharp_output_to_arp_index+0x124>)
 8015d98:	4413      	add	r3, r2
 8015d9a:	3304      	adds	r3, #4
 8015d9c:	4619      	mov	r1, r3
 8015d9e:	68f8      	ldr	r0, [r7, #12]
 8015da0:	f000 fb4c 	bl	801643c <etharp_request>
 8015da4:	4603      	mov	r3, r0
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d138      	bne.n	8015e1c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015daa:	79fa      	ldrb	r2, [r7, #7]
 8015dac:	4928      	ldr	r1, [pc, #160]	; (8015e50 <etharp_output_to_arp_index+0x124>)
 8015dae:	4613      	mov	r3, r2
 8015db0:	005b      	lsls	r3, r3, #1
 8015db2:	4413      	add	r3, r2
 8015db4:	00db      	lsls	r3, r3, #3
 8015db6:	440b      	add	r3, r1
 8015db8:	3314      	adds	r3, #20
 8015dba:	2203      	movs	r2, #3
 8015dbc:	701a      	strb	r2, [r3, #0]
 8015dbe:	e02d      	b.n	8015e1c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015dc0:	79fa      	ldrb	r2, [r7, #7]
 8015dc2:	4923      	ldr	r1, [pc, #140]	; (8015e50 <etharp_output_to_arp_index+0x124>)
 8015dc4:	4613      	mov	r3, r2
 8015dc6:	005b      	lsls	r3, r3, #1
 8015dc8:	4413      	add	r3, r2
 8015dca:	00db      	lsls	r3, r3, #3
 8015dcc:	440b      	add	r3, r1
 8015dce:	3312      	adds	r3, #18
 8015dd0:	881b      	ldrh	r3, [r3, #0]
 8015dd2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015dd6:	d321      	bcc.n	8015e1c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015dd8:	79fa      	ldrb	r2, [r7, #7]
 8015dda:	4613      	mov	r3, r2
 8015ddc:	005b      	lsls	r3, r3, #1
 8015dde:	4413      	add	r3, r2
 8015de0:	00db      	lsls	r3, r3, #3
 8015de2:	4a1b      	ldr	r2, [pc, #108]	; (8015e50 <etharp_output_to_arp_index+0x124>)
 8015de4:	4413      	add	r3, r2
 8015de6:	1d19      	adds	r1, r3, #4
 8015de8:	79fa      	ldrb	r2, [r7, #7]
 8015dea:	4613      	mov	r3, r2
 8015dec:	005b      	lsls	r3, r3, #1
 8015dee:	4413      	add	r3, r2
 8015df0:	00db      	lsls	r3, r3, #3
 8015df2:	3308      	adds	r3, #8
 8015df4:	4a16      	ldr	r2, [pc, #88]	; (8015e50 <etharp_output_to_arp_index+0x124>)
 8015df6:	4413      	add	r3, r2
 8015df8:	3304      	adds	r3, #4
 8015dfa:	461a      	mov	r2, r3
 8015dfc:	68f8      	ldr	r0, [r7, #12]
 8015dfe:	f000 fafb 	bl	80163f8 <etharp_request_dst>
 8015e02:	4603      	mov	r3, r0
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d109      	bne.n	8015e1c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015e08:	79fa      	ldrb	r2, [r7, #7]
 8015e0a:	4911      	ldr	r1, [pc, #68]	; (8015e50 <etharp_output_to_arp_index+0x124>)
 8015e0c:	4613      	mov	r3, r2
 8015e0e:	005b      	lsls	r3, r3, #1
 8015e10:	4413      	add	r3, r2
 8015e12:	00db      	lsls	r3, r3, #3
 8015e14:	440b      	add	r3, r1
 8015e16:	3314      	adds	r3, #20
 8015e18:	2203      	movs	r2, #3
 8015e1a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8015e22:	79fa      	ldrb	r2, [r7, #7]
 8015e24:	4613      	mov	r3, r2
 8015e26:	005b      	lsls	r3, r3, #1
 8015e28:	4413      	add	r3, r2
 8015e2a:	00db      	lsls	r3, r3, #3
 8015e2c:	3308      	adds	r3, #8
 8015e2e:	4a08      	ldr	r2, [pc, #32]	; (8015e50 <etharp_output_to_arp_index+0x124>)
 8015e30:	4413      	add	r3, r2
 8015e32:	3304      	adds	r3, #4
 8015e34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015e38:	9200      	str	r2, [sp, #0]
 8015e3a:	460a      	mov	r2, r1
 8015e3c:	68b9      	ldr	r1, [r7, #8]
 8015e3e:	68f8      	ldr	r0, [r7, #12]
 8015e40:	f001 fe5e 	bl	8017b00 <ethernet_output>
 8015e44:	4603      	mov	r3, r0
}
 8015e46:	4618      	mov	r0, r3
 8015e48:	3710      	adds	r7, #16
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	bd80      	pop	{r7, pc}
 8015e4e:	bf00      	nop
 8015e50:	20010df0 	.word	0x20010df0
 8015e54:	0801c4f8 	.word	0x0801c4f8
 8015e58:	0801c668 	.word	0x0801c668
 8015e5c:	0801c570 	.word	0x0801c570

08015e60 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015e60:	b580      	push	{r7, lr}
 8015e62:	b08a      	sub	sp, #40	; 0x28
 8015e64:	af02      	add	r7, sp, #8
 8015e66:	60f8      	str	r0, [r7, #12]
 8015e68:	60b9      	str	r1, [r7, #8]
 8015e6a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015e70:	68fb      	ldr	r3, [r7, #12]
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d106      	bne.n	8015e84 <etharp_output+0x24>
 8015e76:	4b73      	ldr	r3, [pc, #460]	; (8016044 <etharp_output+0x1e4>)
 8015e78:	f240 321e 	movw	r2, #798	; 0x31e
 8015e7c:	4972      	ldr	r1, [pc, #456]	; (8016048 <etharp_output+0x1e8>)
 8015e7e:	4873      	ldr	r0, [pc, #460]	; (801604c <etharp_output+0x1ec>)
 8015e80:	f002 f956 	bl	8018130 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015e84:	68bb      	ldr	r3, [r7, #8]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d106      	bne.n	8015e98 <etharp_output+0x38>
 8015e8a:	4b6e      	ldr	r3, [pc, #440]	; (8016044 <etharp_output+0x1e4>)
 8015e8c:	f240 321f 	movw	r2, #799	; 0x31f
 8015e90:	496f      	ldr	r1, [pc, #444]	; (8016050 <etharp_output+0x1f0>)
 8015e92:	486e      	ldr	r0, [pc, #440]	; (801604c <etharp_output+0x1ec>)
 8015e94:	f002 f94c 	bl	8018130 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d106      	bne.n	8015eac <etharp_output+0x4c>
 8015e9e:	4b69      	ldr	r3, [pc, #420]	; (8016044 <etharp_output+0x1e4>)
 8015ea0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015ea4:	496b      	ldr	r1, [pc, #428]	; (8016054 <etharp_output+0x1f4>)
 8015ea6:	4869      	ldr	r0, [pc, #420]	; (801604c <etharp_output+0x1ec>)
 8015ea8:	f002 f942 	bl	8018130 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	68f9      	ldr	r1, [r7, #12]
 8015eb2:	4618      	mov	r0, r3
 8015eb4:	f000 ff16 	bl	8016ce4 <ip4_addr_isbroadcast_u32>
 8015eb8:	4603      	mov	r3, r0
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d002      	beq.n	8015ec4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015ebe:	4b66      	ldr	r3, [pc, #408]	; (8016058 <etharp_output+0x1f8>)
 8015ec0:	61fb      	str	r3, [r7, #28]
 8015ec2:	e0af      	b.n	8016024 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015ecc:	2be0      	cmp	r3, #224	; 0xe0
 8015ece:	d118      	bne.n	8015f02 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015ed0:	2301      	movs	r3, #1
 8015ed2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015ed4:	2300      	movs	r3, #0
 8015ed6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015ed8:	235e      	movs	r3, #94	; 0x5e
 8015eda:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	3301      	adds	r3, #1
 8015ee0:	781b      	ldrb	r3, [r3, #0]
 8015ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015ee6:	b2db      	uxtb	r3, r3
 8015ee8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	3302      	adds	r3, #2
 8015eee:	781b      	ldrb	r3, [r3, #0]
 8015ef0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	3303      	adds	r3, #3
 8015ef6:	781b      	ldrb	r3, [r3, #0]
 8015ef8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015efa:	f107 0310 	add.w	r3, r7, #16
 8015efe:	61fb      	str	r3, [r7, #28]
 8015f00:	e090      	b.n	8016024 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	681a      	ldr	r2, [r3, #0]
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	3304      	adds	r3, #4
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	405a      	eors	r2, r3
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	3308      	adds	r3, #8
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	4013      	ands	r3, r2
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d012      	beq.n	8015f40 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015f20:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015f24:	4293      	cmp	r3, r2
 8015f26:	d00b      	beq.n	8015f40 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	330c      	adds	r3, #12
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d003      	beq.n	8015f3a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	330c      	adds	r3, #12
 8015f36:	61bb      	str	r3, [r7, #24]
 8015f38:	e002      	b.n	8015f40 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015f3a:	f06f 0303 	mvn.w	r3, #3
 8015f3e:	e07d      	b.n	801603c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015f40:	4b46      	ldr	r3, [pc, #280]	; (801605c <etharp_output+0x1fc>)
 8015f42:	781b      	ldrb	r3, [r3, #0]
 8015f44:	4619      	mov	r1, r3
 8015f46:	4a46      	ldr	r2, [pc, #280]	; (8016060 <etharp_output+0x200>)
 8015f48:	460b      	mov	r3, r1
 8015f4a:	005b      	lsls	r3, r3, #1
 8015f4c:	440b      	add	r3, r1
 8015f4e:	00db      	lsls	r3, r3, #3
 8015f50:	4413      	add	r3, r2
 8015f52:	3314      	adds	r3, #20
 8015f54:	781b      	ldrb	r3, [r3, #0]
 8015f56:	2b01      	cmp	r3, #1
 8015f58:	d925      	bls.n	8015fa6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015f5a:	4b40      	ldr	r3, [pc, #256]	; (801605c <etharp_output+0x1fc>)
 8015f5c:	781b      	ldrb	r3, [r3, #0]
 8015f5e:	4619      	mov	r1, r3
 8015f60:	4a3f      	ldr	r2, [pc, #252]	; (8016060 <etharp_output+0x200>)
 8015f62:	460b      	mov	r3, r1
 8015f64:	005b      	lsls	r3, r3, #1
 8015f66:	440b      	add	r3, r1
 8015f68:	00db      	lsls	r3, r3, #3
 8015f6a:	4413      	add	r3, r2
 8015f6c:	3308      	adds	r3, #8
 8015f6e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015f70:	68fa      	ldr	r2, [r7, #12]
 8015f72:	429a      	cmp	r2, r3
 8015f74:	d117      	bne.n	8015fa6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015f76:	69bb      	ldr	r3, [r7, #24]
 8015f78:	681a      	ldr	r2, [r3, #0]
 8015f7a:	4b38      	ldr	r3, [pc, #224]	; (801605c <etharp_output+0x1fc>)
 8015f7c:	781b      	ldrb	r3, [r3, #0]
 8015f7e:	4618      	mov	r0, r3
 8015f80:	4937      	ldr	r1, [pc, #220]	; (8016060 <etharp_output+0x200>)
 8015f82:	4603      	mov	r3, r0
 8015f84:	005b      	lsls	r3, r3, #1
 8015f86:	4403      	add	r3, r0
 8015f88:	00db      	lsls	r3, r3, #3
 8015f8a:	440b      	add	r3, r1
 8015f8c:	3304      	adds	r3, #4
 8015f8e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015f90:	429a      	cmp	r2, r3
 8015f92:	d108      	bne.n	8015fa6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015f94:	4b31      	ldr	r3, [pc, #196]	; (801605c <etharp_output+0x1fc>)
 8015f96:	781b      	ldrb	r3, [r3, #0]
 8015f98:	461a      	mov	r2, r3
 8015f9a:	68b9      	ldr	r1, [r7, #8]
 8015f9c:	68f8      	ldr	r0, [r7, #12]
 8015f9e:	f7ff fec5 	bl	8015d2c <etharp_output_to_arp_index>
 8015fa2:	4603      	mov	r3, r0
 8015fa4:	e04a      	b.n	801603c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015fa6:	2300      	movs	r3, #0
 8015fa8:	75fb      	strb	r3, [r7, #23]
 8015faa:	e031      	b.n	8016010 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015fac:	7dfa      	ldrb	r2, [r7, #23]
 8015fae:	492c      	ldr	r1, [pc, #176]	; (8016060 <etharp_output+0x200>)
 8015fb0:	4613      	mov	r3, r2
 8015fb2:	005b      	lsls	r3, r3, #1
 8015fb4:	4413      	add	r3, r2
 8015fb6:	00db      	lsls	r3, r3, #3
 8015fb8:	440b      	add	r3, r1
 8015fba:	3314      	adds	r3, #20
 8015fbc:	781b      	ldrb	r3, [r3, #0]
 8015fbe:	2b01      	cmp	r3, #1
 8015fc0:	d923      	bls.n	801600a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015fc2:	7dfa      	ldrb	r2, [r7, #23]
 8015fc4:	4926      	ldr	r1, [pc, #152]	; (8016060 <etharp_output+0x200>)
 8015fc6:	4613      	mov	r3, r2
 8015fc8:	005b      	lsls	r3, r3, #1
 8015fca:	4413      	add	r3, r2
 8015fcc:	00db      	lsls	r3, r3, #3
 8015fce:	440b      	add	r3, r1
 8015fd0:	3308      	adds	r3, #8
 8015fd2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015fd4:	68fa      	ldr	r2, [r7, #12]
 8015fd6:	429a      	cmp	r2, r3
 8015fd8:	d117      	bne.n	801600a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015fda:	69bb      	ldr	r3, [r7, #24]
 8015fdc:	6819      	ldr	r1, [r3, #0]
 8015fde:	7dfa      	ldrb	r2, [r7, #23]
 8015fe0:	481f      	ldr	r0, [pc, #124]	; (8016060 <etharp_output+0x200>)
 8015fe2:	4613      	mov	r3, r2
 8015fe4:	005b      	lsls	r3, r3, #1
 8015fe6:	4413      	add	r3, r2
 8015fe8:	00db      	lsls	r3, r3, #3
 8015fea:	4403      	add	r3, r0
 8015fec:	3304      	adds	r3, #4
 8015fee:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015ff0:	4299      	cmp	r1, r3
 8015ff2:	d10a      	bne.n	801600a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015ff4:	4a19      	ldr	r2, [pc, #100]	; (801605c <etharp_output+0x1fc>)
 8015ff6:	7dfb      	ldrb	r3, [r7, #23]
 8015ff8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015ffa:	7dfb      	ldrb	r3, [r7, #23]
 8015ffc:	461a      	mov	r2, r3
 8015ffe:	68b9      	ldr	r1, [r7, #8]
 8016000:	68f8      	ldr	r0, [r7, #12]
 8016002:	f7ff fe93 	bl	8015d2c <etharp_output_to_arp_index>
 8016006:	4603      	mov	r3, r0
 8016008:	e018      	b.n	801603c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801600a:	7dfb      	ldrb	r3, [r7, #23]
 801600c:	3301      	adds	r3, #1
 801600e:	75fb      	strb	r3, [r7, #23]
 8016010:	7dfb      	ldrb	r3, [r7, #23]
 8016012:	2b09      	cmp	r3, #9
 8016014:	d9ca      	bls.n	8015fac <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016016:	68ba      	ldr	r2, [r7, #8]
 8016018:	69b9      	ldr	r1, [r7, #24]
 801601a:	68f8      	ldr	r0, [r7, #12]
 801601c:	f000 f822 	bl	8016064 <etharp_query>
 8016020:	4603      	mov	r3, r0
 8016022:	e00b      	b.n	801603c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801602a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801602e:	9300      	str	r3, [sp, #0]
 8016030:	69fb      	ldr	r3, [r7, #28]
 8016032:	68b9      	ldr	r1, [r7, #8]
 8016034:	68f8      	ldr	r0, [r7, #12]
 8016036:	f001 fd63 	bl	8017b00 <ethernet_output>
 801603a:	4603      	mov	r3, r0
}
 801603c:	4618      	mov	r0, r3
 801603e:	3720      	adds	r7, #32
 8016040:	46bd      	mov	sp, r7
 8016042:	bd80      	pop	{r7, pc}
 8016044:	0801c4f8 	.word	0x0801c4f8
 8016048:	0801c648 	.word	0x0801c648
 801604c:	0801c570 	.word	0x0801c570
 8016050:	0801c698 	.word	0x0801c698
 8016054:	0801c638 	.word	0x0801c638
 8016058:	08026e44 	.word	0x08026e44
 801605c:	20010ee0 	.word	0x20010ee0
 8016060:	20010df0 	.word	0x20010df0

08016064 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016064:	b580      	push	{r7, lr}
 8016066:	b08c      	sub	sp, #48	; 0x30
 8016068:	af02      	add	r7, sp, #8
 801606a:	60f8      	str	r0, [r7, #12]
 801606c:	60b9      	str	r1, [r7, #8]
 801606e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	332a      	adds	r3, #42	; 0x2a
 8016074:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016076:	23ff      	movs	r3, #255	; 0xff
 8016078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801607c:	2300      	movs	r3, #0
 801607e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016080:	68bb      	ldr	r3, [r7, #8]
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	68f9      	ldr	r1, [r7, #12]
 8016086:	4618      	mov	r0, r3
 8016088:	f000 fe2c 	bl	8016ce4 <ip4_addr_isbroadcast_u32>
 801608c:	4603      	mov	r3, r0
 801608e:	2b00      	cmp	r3, #0
 8016090:	d10c      	bne.n	80160ac <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016092:	68bb      	ldr	r3, [r7, #8]
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801609a:	2be0      	cmp	r3, #224	; 0xe0
 801609c:	d006      	beq.n	80160ac <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801609e:	68bb      	ldr	r3, [r7, #8]
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d003      	beq.n	80160ac <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80160a4:	68bb      	ldr	r3, [r7, #8]
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d102      	bne.n	80160b2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80160ac:	f06f 030f 	mvn.w	r3, #15
 80160b0:	e101      	b.n	80162b6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80160b2:	68fa      	ldr	r2, [r7, #12]
 80160b4:	2101      	movs	r1, #1
 80160b6:	68b8      	ldr	r0, [r7, #8]
 80160b8:	f7ff fb5c 	bl	8015774 <etharp_find_entry>
 80160bc:	4603      	mov	r3, r0
 80160be:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80160c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	da02      	bge.n	80160ce <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80160c8:	8a7b      	ldrh	r3, [r7, #18]
 80160ca:	b25b      	sxtb	r3, r3
 80160cc:	e0f3      	b.n	80162b6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80160ce:	8a7b      	ldrh	r3, [r7, #18]
 80160d0:	2b7e      	cmp	r3, #126	; 0x7e
 80160d2:	d906      	bls.n	80160e2 <etharp_query+0x7e>
 80160d4:	4b7a      	ldr	r3, [pc, #488]	; (80162c0 <etharp_query+0x25c>)
 80160d6:	f240 32c1 	movw	r2, #961	; 0x3c1
 80160da:	497a      	ldr	r1, [pc, #488]	; (80162c4 <etharp_query+0x260>)
 80160dc:	487a      	ldr	r0, [pc, #488]	; (80162c8 <etharp_query+0x264>)
 80160de:	f002 f827 	bl	8018130 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80160e2:	8a7b      	ldrh	r3, [r7, #18]
 80160e4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80160e6:	7c7a      	ldrb	r2, [r7, #17]
 80160e8:	4978      	ldr	r1, [pc, #480]	; (80162cc <etharp_query+0x268>)
 80160ea:	4613      	mov	r3, r2
 80160ec:	005b      	lsls	r3, r3, #1
 80160ee:	4413      	add	r3, r2
 80160f0:	00db      	lsls	r3, r3, #3
 80160f2:	440b      	add	r3, r1
 80160f4:	3314      	adds	r3, #20
 80160f6:	781b      	ldrb	r3, [r3, #0]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d115      	bne.n	8016128 <etharp_query+0xc4>
    is_new_entry = 1;
 80160fc:	2301      	movs	r3, #1
 80160fe:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016100:	7c7a      	ldrb	r2, [r7, #17]
 8016102:	4972      	ldr	r1, [pc, #456]	; (80162cc <etharp_query+0x268>)
 8016104:	4613      	mov	r3, r2
 8016106:	005b      	lsls	r3, r3, #1
 8016108:	4413      	add	r3, r2
 801610a:	00db      	lsls	r3, r3, #3
 801610c:	440b      	add	r3, r1
 801610e:	3314      	adds	r3, #20
 8016110:	2201      	movs	r2, #1
 8016112:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016114:	7c7a      	ldrb	r2, [r7, #17]
 8016116:	496d      	ldr	r1, [pc, #436]	; (80162cc <etharp_query+0x268>)
 8016118:	4613      	mov	r3, r2
 801611a:	005b      	lsls	r3, r3, #1
 801611c:	4413      	add	r3, r2
 801611e:	00db      	lsls	r3, r3, #3
 8016120:	440b      	add	r3, r1
 8016122:	3308      	adds	r3, #8
 8016124:	68fa      	ldr	r2, [r7, #12]
 8016126:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016128:	7c7a      	ldrb	r2, [r7, #17]
 801612a:	4968      	ldr	r1, [pc, #416]	; (80162cc <etharp_query+0x268>)
 801612c:	4613      	mov	r3, r2
 801612e:	005b      	lsls	r3, r3, #1
 8016130:	4413      	add	r3, r2
 8016132:	00db      	lsls	r3, r3, #3
 8016134:	440b      	add	r3, r1
 8016136:	3314      	adds	r3, #20
 8016138:	781b      	ldrb	r3, [r3, #0]
 801613a:	2b01      	cmp	r3, #1
 801613c:	d011      	beq.n	8016162 <etharp_query+0xfe>
 801613e:	7c7a      	ldrb	r2, [r7, #17]
 8016140:	4962      	ldr	r1, [pc, #392]	; (80162cc <etharp_query+0x268>)
 8016142:	4613      	mov	r3, r2
 8016144:	005b      	lsls	r3, r3, #1
 8016146:	4413      	add	r3, r2
 8016148:	00db      	lsls	r3, r3, #3
 801614a:	440b      	add	r3, r1
 801614c:	3314      	adds	r3, #20
 801614e:	781b      	ldrb	r3, [r3, #0]
 8016150:	2b01      	cmp	r3, #1
 8016152:	d806      	bhi.n	8016162 <etharp_query+0xfe>
 8016154:	4b5a      	ldr	r3, [pc, #360]	; (80162c0 <etharp_query+0x25c>)
 8016156:	f240 32cd 	movw	r2, #973	; 0x3cd
 801615a:	495d      	ldr	r1, [pc, #372]	; (80162d0 <etharp_query+0x26c>)
 801615c:	485a      	ldr	r0, [pc, #360]	; (80162c8 <etharp_query+0x264>)
 801615e:	f001 ffe7 	bl	8018130 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016162:	6a3b      	ldr	r3, [r7, #32]
 8016164:	2b00      	cmp	r3, #0
 8016166:	d102      	bne.n	801616e <etharp_query+0x10a>
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	2b00      	cmp	r3, #0
 801616c:	d10c      	bne.n	8016188 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801616e:	68b9      	ldr	r1, [r7, #8]
 8016170:	68f8      	ldr	r0, [r7, #12]
 8016172:	f000 f963 	bl	801643c <etharp_request>
 8016176:	4603      	mov	r3, r0
 8016178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d102      	bne.n	8016188 <etharp_query+0x124>
      return result;
 8016182:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016186:	e096      	b.n	80162b6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	2b00      	cmp	r3, #0
 801618c:	d106      	bne.n	801619c <etharp_query+0x138>
 801618e:	4b4c      	ldr	r3, [pc, #304]	; (80162c0 <etharp_query+0x25c>)
 8016190:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016194:	494f      	ldr	r1, [pc, #316]	; (80162d4 <etharp_query+0x270>)
 8016196:	484c      	ldr	r0, [pc, #304]	; (80162c8 <etharp_query+0x264>)
 8016198:	f001 ffca 	bl	8018130 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801619c:	7c7a      	ldrb	r2, [r7, #17]
 801619e:	494b      	ldr	r1, [pc, #300]	; (80162cc <etharp_query+0x268>)
 80161a0:	4613      	mov	r3, r2
 80161a2:	005b      	lsls	r3, r3, #1
 80161a4:	4413      	add	r3, r2
 80161a6:	00db      	lsls	r3, r3, #3
 80161a8:	440b      	add	r3, r1
 80161aa:	3314      	adds	r3, #20
 80161ac:	781b      	ldrb	r3, [r3, #0]
 80161ae:	2b01      	cmp	r3, #1
 80161b0:	d917      	bls.n	80161e2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80161b2:	4a49      	ldr	r2, [pc, #292]	; (80162d8 <etharp_query+0x274>)
 80161b4:	7c7b      	ldrb	r3, [r7, #17]
 80161b6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80161b8:	7c7a      	ldrb	r2, [r7, #17]
 80161ba:	4613      	mov	r3, r2
 80161bc:	005b      	lsls	r3, r3, #1
 80161be:	4413      	add	r3, r2
 80161c0:	00db      	lsls	r3, r3, #3
 80161c2:	3308      	adds	r3, #8
 80161c4:	4a41      	ldr	r2, [pc, #260]	; (80162cc <etharp_query+0x268>)
 80161c6:	4413      	add	r3, r2
 80161c8:	3304      	adds	r3, #4
 80161ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80161ce:	9200      	str	r2, [sp, #0]
 80161d0:	697a      	ldr	r2, [r7, #20]
 80161d2:	6879      	ldr	r1, [r7, #4]
 80161d4:	68f8      	ldr	r0, [r7, #12]
 80161d6:	f001 fc93 	bl	8017b00 <ethernet_output>
 80161da:	4603      	mov	r3, r0
 80161dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80161e0:	e067      	b.n	80162b2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80161e2:	7c7a      	ldrb	r2, [r7, #17]
 80161e4:	4939      	ldr	r1, [pc, #228]	; (80162cc <etharp_query+0x268>)
 80161e6:	4613      	mov	r3, r2
 80161e8:	005b      	lsls	r3, r3, #1
 80161ea:	4413      	add	r3, r2
 80161ec:	00db      	lsls	r3, r3, #3
 80161ee:	440b      	add	r3, r1
 80161f0:	3314      	adds	r3, #20
 80161f2:	781b      	ldrb	r3, [r3, #0]
 80161f4:	2b01      	cmp	r3, #1
 80161f6:	d15c      	bne.n	80162b2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80161f8:	2300      	movs	r3, #0
 80161fa:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016200:	e01c      	b.n	801623c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016202:	69fb      	ldr	r3, [r7, #28]
 8016204:	895a      	ldrh	r2, [r3, #10]
 8016206:	69fb      	ldr	r3, [r7, #28]
 8016208:	891b      	ldrh	r3, [r3, #8]
 801620a:	429a      	cmp	r2, r3
 801620c:	d10a      	bne.n	8016224 <etharp_query+0x1c0>
 801620e:	69fb      	ldr	r3, [r7, #28]
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	2b00      	cmp	r3, #0
 8016214:	d006      	beq.n	8016224 <etharp_query+0x1c0>
 8016216:	4b2a      	ldr	r3, [pc, #168]	; (80162c0 <etharp_query+0x25c>)
 8016218:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801621c:	492f      	ldr	r1, [pc, #188]	; (80162dc <etharp_query+0x278>)
 801621e:	482a      	ldr	r0, [pc, #168]	; (80162c8 <etharp_query+0x264>)
 8016220:	f001 ff86 	bl	8018130 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016224:	69fb      	ldr	r3, [r7, #28]
 8016226:	7b1b      	ldrb	r3, [r3, #12]
 8016228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801622c:	2b00      	cmp	r3, #0
 801622e:	d002      	beq.n	8016236 <etharp_query+0x1d2>
        copy_needed = 1;
 8016230:	2301      	movs	r3, #1
 8016232:	61bb      	str	r3, [r7, #24]
        break;
 8016234:	e005      	b.n	8016242 <etharp_query+0x1de>
      }
      p = p->next;
 8016236:	69fb      	ldr	r3, [r7, #28]
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801623c:	69fb      	ldr	r3, [r7, #28]
 801623e:	2b00      	cmp	r3, #0
 8016240:	d1df      	bne.n	8016202 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016242:	69bb      	ldr	r3, [r7, #24]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d007      	beq.n	8016258 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016248:	687a      	ldr	r2, [r7, #4]
 801624a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801624e:	200e      	movs	r0, #14
 8016250:	f7f6 fbfa 	bl	800ca48 <pbuf_clone>
 8016254:	61f8      	str	r0, [r7, #28]
 8016256:	e004      	b.n	8016262 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801625c:	69f8      	ldr	r0, [r7, #28]
 801625e:	f7f6 fa21 	bl	800c6a4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016262:	69fb      	ldr	r3, [r7, #28]
 8016264:	2b00      	cmp	r3, #0
 8016266:	d021      	beq.n	80162ac <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016268:	7c7a      	ldrb	r2, [r7, #17]
 801626a:	4918      	ldr	r1, [pc, #96]	; (80162cc <etharp_query+0x268>)
 801626c:	4613      	mov	r3, r2
 801626e:	005b      	lsls	r3, r3, #1
 8016270:	4413      	add	r3, r2
 8016272:	00db      	lsls	r3, r3, #3
 8016274:	440b      	add	r3, r1
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	2b00      	cmp	r3, #0
 801627a:	d00a      	beq.n	8016292 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801627c:	7c7a      	ldrb	r2, [r7, #17]
 801627e:	4913      	ldr	r1, [pc, #76]	; (80162cc <etharp_query+0x268>)
 8016280:	4613      	mov	r3, r2
 8016282:	005b      	lsls	r3, r3, #1
 8016284:	4413      	add	r3, r2
 8016286:	00db      	lsls	r3, r3, #3
 8016288:	440b      	add	r3, r1
 801628a:	681b      	ldr	r3, [r3, #0]
 801628c:	4618      	mov	r0, r3
 801628e:	f7f6 f963 	bl	800c558 <pbuf_free>
      }
      arp_table[i].q = p;
 8016292:	7c7a      	ldrb	r2, [r7, #17]
 8016294:	490d      	ldr	r1, [pc, #52]	; (80162cc <etharp_query+0x268>)
 8016296:	4613      	mov	r3, r2
 8016298:	005b      	lsls	r3, r3, #1
 801629a:	4413      	add	r3, r2
 801629c:	00db      	lsls	r3, r3, #3
 801629e:	440b      	add	r3, r1
 80162a0:	69fa      	ldr	r2, [r7, #28]
 80162a2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80162a4:	2300      	movs	r3, #0
 80162a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80162aa:	e002      	b.n	80162b2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80162ac:	23ff      	movs	r3, #255	; 0xff
 80162ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80162b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80162b6:	4618      	mov	r0, r3
 80162b8:	3728      	adds	r7, #40	; 0x28
 80162ba:	46bd      	mov	sp, r7
 80162bc:	bd80      	pop	{r7, pc}
 80162be:	bf00      	nop
 80162c0:	0801c4f8 	.word	0x0801c4f8
 80162c4:	0801c6a4 	.word	0x0801c6a4
 80162c8:	0801c570 	.word	0x0801c570
 80162cc:	20010df0 	.word	0x20010df0
 80162d0:	0801c6b4 	.word	0x0801c6b4
 80162d4:	0801c698 	.word	0x0801c698
 80162d8:	20010ee0 	.word	0x20010ee0
 80162dc:	0801c6dc 	.word	0x0801c6dc

080162e0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80162e0:	b580      	push	{r7, lr}
 80162e2:	b08a      	sub	sp, #40	; 0x28
 80162e4:	af02      	add	r7, sp, #8
 80162e6:	60f8      	str	r0, [r7, #12]
 80162e8:	60b9      	str	r1, [r7, #8]
 80162ea:	607a      	str	r2, [r7, #4]
 80162ec:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80162ee:	2300      	movs	r3, #0
 80162f0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d106      	bne.n	8016306 <etharp_raw+0x26>
 80162f8:	4b3a      	ldr	r3, [pc, #232]	; (80163e4 <etharp_raw+0x104>)
 80162fa:	f240 4257 	movw	r2, #1111	; 0x457
 80162fe:	493a      	ldr	r1, [pc, #232]	; (80163e8 <etharp_raw+0x108>)
 8016300:	483a      	ldr	r0, [pc, #232]	; (80163ec <etharp_raw+0x10c>)
 8016302:	f001 ff15 	bl	8018130 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016306:	f44f 7220 	mov.w	r2, #640	; 0x280
 801630a:	211c      	movs	r1, #28
 801630c:	200e      	movs	r0, #14
 801630e:	f7f5 fe3f 	bl	800bf90 <pbuf_alloc>
 8016312:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016314:	69bb      	ldr	r3, [r7, #24]
 8016316:	2b00      	cmp	r3, #0
 8016318:	d102      	bne.n	8016320 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801631a:	f04f 33ff 	mov.w	r3, #4294967295
 801631e:	e05d      	b.n	80163dc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016320:	69bb      	ldr	r3, [r7, #24]
 8016322:	895b      	ldrh	r3, [r3, #10]
 8016324:	2b1b      	cmp	r3, #27
 8016326:	d806      	bhi.n	8016336 <etharp_raw+0x56>
 8016328:	4b2e      	ldr	r3, [pc, #184]	; (80163e4 <etharp_raw+0x104>)
 801632a:	f240 4262 	movw	r2, #1122	; 0x462
 801632e:	4930      	ldr	r1, [pc, #192]	; (80163f0 <etharp_raw+0x110>)
 8016330:	482e      	ldr	r0, [pc, #184]	; (80163ec <etharp_raw+0x10c>)
 8016332:	f001 fefd 	bl	8018130 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016336:	69bb      	ldr	r3, [r7, #24]
 8016338:	685b      	ldr	r3, [r3, #4]
 801633a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801633c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801633e:	4618      	mov	r0, r3
 8016340:	f7f4 fcd6 	bl	800acf0 <lwip_htons>
 8016344:	4603      	mov	r3, r0
 8016346:	461a      	mov	r2, r3
 8016348:	697b      	ldr	r3, [r7, #20]
 801634a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016352:	2b06      	cmp	r3, #6
 8016354:	d006      	beq.n	8016364 <etharp_raw+0x84>
 8016356:	4b23      	ldr	r3, [pc, #140]	; (80163e4 <etharp_raw+0x104>)
 8016358:	f240 4269 	movw	r2, #1129	; 0x469
 801635c:	4925      	ldr	r1, [pc, #148]	; (80163f4 <etharp_raw+0x114>)
 801635e:	4823      	ldr	r0, [pc, #140]	; (80163ec <etharp_raw+0x10c>)
 8016360:	f001 fee6 	bl	8018130 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016364:	697b      	ldr	r3, [r7, #20]
 8016366:	3308      	adds	r3, #8
 8016368:	2206      	movs	r2, #6
 801636a:	6839      	ldr	r1, [r7, #0]
 801636c:	4618      	mov	r0, r3
 801636e:	f002 f82d 	bl	80183cc <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016372:	697b      	ldr	r3, [r7, #20]
 8016374:	3312      	adds	r3, #18
 8016376:	2206      	movs	r2, #6
 8016378:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801637a:	4618      	mov	r0, r3
 801637c:	f002 f826 	bl	80183cc <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016380:	697b      	ldr	r3, [r7, #20]
 8016382:	330e      	adds	r3, #14
 8016384:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016386:	6812      	ldr	r2, [r2, #0]
 8016388:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801638a:	697b      	ldr	r3, [r7, #20]
 801638c:	3318      	adds	r3, #24
 801638e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016390:	6812      	ldr	r2, [r2, #0]
 8016392:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016394:	697b      	ldr	r3, [r7, #20]
 8016396:	2200      	movs	r2, #0
 8016398:	701a      	strb	r2, [r3, #0]
 801639a:	2200      	movs	r2, #0
 801639c:	f042 0201 	orr.w	r2, r2, #1
 80163a0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80163a2:	697b      	ldr	r3, [r7, #20]
 80163a4:	2200      	movs	r2, #0
 80163a6:	f042 0208 	orr.w	r2, r2, #8
 80163aa:	709a      	strb	r2, [r3, #2]
 80163ac:	2200      	movs	r2, #0
 80163ae:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80163b0:	697b      	ldr	r3, [r7, #20]
 80163b2:	2206      	movs	r2, #6
 80163b4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80163b6:	697b      	ldr	r3, [r7, #20]
 80163b8:	2204      	movs	r2, #4
 80163ba:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80163bc:	f640 0306 	movw	r3, #2054	; 0x806
 80163c0:	9300      	str	r3, [sp, #0]
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	68ba      	ldr	r2, [r7, #8]
 80163c6:	69b9      	ldr	r1, [r7, #24]
 80163c8:	68f8      	ldr	r0, [r7, #12]
 80163ca:	f001 fb99 	bl	8017b00 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80163ce:	69b8      	ldr	r0, [r7, #24]
 80163d0:	f7f6 f8c2 	bl	800c558 <pbuf_free>
  p = NULL;
 80163d4:	2300      	movs	r3, #0
 80163d6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80163d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80163dc:	4618      	mov	r0, r3
 80163de:	3720      	adds	r7, #32
 80163e0:	46bd      	mov	sp, r7
 80163e2:	bd80      	pop	{r7, pc}
 80163e4:	0801c4f8 	.word	0x0801c4f8
 80163e8:	0801c648 	.word	0x0801c648
 80163ec:	0801c570 	.word	0x0801c570
 80163f0:	0801c6f8 	.word	0x0801c6f8
 80163f4:	0801c72c 	.word	0x0801c72c

080163f8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80163f8:	b580      	push	{r7, lr}
 80163fa:	b088      	sub	sp, #32
 80163fc:	af04      	add	r7, sp, #16
 80163fe:	60f8      	str	r0, [r7, #12]
 8016400:	60b9      	str	r1, [r7, #8]
 8016402:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016414:	2201      	movs	r2, #1
 8016416:	9203      	str	r2, [sp, #12]
 8016418:	68ba      	ldr	r2, [r7, #8]
 801641a:	9202      	str	r2, [sp, #8]
 801641c:	4a06      	ldr	r2, [pc, #24]	; (8016438 <etharp_request_dst+0x40>)
 801641e:	9201      	str	r2, [sp, #4]
 8016420:	9300      	str	r3, [sp, #0]
 8016422:	4603      	mov	r3, r0
 8016424:	687a      	ldr	r2, [r7, #4]
 8016426:	68f8      	ldr	r0, [r7, #12]
 8016428:	f7ff ff5a 	bl	80162e0 <etharp_raw>
 801642c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801642e:	4618      	mov	r0, r3
 8016430:	3710      	adds	r7, #16
 8016432:	46bd      	mov	sp, r7
 8016434:	bd80      	pop	{r7, pc}
 8016436:	bf00      	nop
 8016438:	08026e4c 	.word	0x08026e4c

0801643c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801643c:	b580      	push	{r7, lr}
 801643e:	b082      	sub	sp, #8
 8016440:	af00      	add	r7, sp, #0
 8016442:	6078      	str	r0, [r7, #4]
 8016444:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016446:	4a05      	ldr	r2, [pc, #20]	; (801645c <etharp_request+0x20>)
 8016448:	6839      	ldr	r1, [r7, #0]
 801644a:	6878      	ldr	r0, [r7, #4]
 801644c:	f7ff ffd4 	bl	80163f8 <etharp_request_dst>
 8016450:	4603      	mov	r3, r0
}
 8016452:	4618      	mov	r0, r3
 8016454:	3708      	adds	r7, #8
 8016456:	46bd      	mov	sp, r7
 8016458:	bd80      	pop	{r7, pc}
 801645a:	bf00      	nop
 801645c:	08026e44 	.word	0x08026e44

08016460 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016460:	b580      	push	{r7, lr}
 8016462:	b08e      	sub	sp, #56	; 0x38
 8016464:	af04      	add	r7, sp, #16
 8016466:	6078      	str	r0, [r7, #4]
 8016468:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801646a:	4b79      	ldr	r3, [pc, #484]	; (8016650 <icmp_input+0x1f0>)
 801646c:	689b      	ldr	r3, [r3, #8]
 801646e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016472:	781b      	ldrb	r3, [r3, #0]
 8016474:	f003 030f 	and.w	r3, r3, #15
 8016478:	b2db      	uxtb	r3, r3
 801647a:	009b      	lsls	r3, r3, #2
 801647c:	b2db      	uxtb	r3, r3
 801647e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016480:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016482:	2b13      	cmp	r3, #19
 8016484:	f240 80cd 	bls.w	8016622 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	895b      	ldrh	r3, [r3, #10]
 801648c:	2b03      	cmp	r3, #3
 801648e:	f240 80ca 	bls.w	8016626 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	685b      	ldr	r3, [r3, #4]
 8016496:	781b      	ldrb	r3, [r3, #0]
 8016498:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801649c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	f000 80b7 	beq.w	8016614 <icmp_input+0x1b4>
 80164a6:	2b08      	cmp	r3, #8
 80164a8:	f040 80b7 	bne.w	801661a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80164ac:	4b69      	ldr	r3, [pc, #420]	; (8016654 <icmp_input+0x1f4>)
 80164ae:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80164b0:	4b67      	ldr	r3, [pc, #412]	; (8016650 <icmp_input+0x1f0>)
 80164b2:	695b      	ldr	r3, [r3, #20]
 80164b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80164b8:	2be0      	cmp	r3, #224	; 0xe0
 80164ba:	f000 80bb 	beq.w	8016634 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80164be:	4b64      	ldr	r3, [pc, #400]	; (8016650 <icmp_input+0x1f0>)
 80164c0:	695b      	ldr	r3, [r3, #20]
 80164c2:	4a63      	ldr	r2, [pc, #396]	; (8016650 <icmp_input+0x1f0>)
 80164c4:	6812      	ldr	r2, [r2, #0]
 80164c6:	4611      	mov	r1, r2
 80164c8:	4618      	mov	r0, r3
 80164ca:	f000 fc0b 	bl	8016ce4 <ip4_addr_isbroadcast_u32>
 80164ce:	4603      	mov	r3, r0
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	f040 80b1 	bne.w	8016638 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	891b      	ldrh	r3, [r3, #8]
 80164da:	2b07      	cmp	r3, #7
 80164dc:	f240 80a5 	bls.w	801662a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80164e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80164e2:	330e      	adds	r3, #14
 80164e4:	4619      	mov	r1, r3
 80164e6:	6878      	ldr	r0, [r7, #4]
 80164e8:	f7f5 ffa0 	bl	800c42c <pbuf_add_header>
 80164ec:	4603      	mov	r3, r0
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d04b      	beq.n	801658a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	891a      	ldrh	r2, [r3, #8]
 80164f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80164f8:	4413      	add	r3, r2
 80164fa:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	891b      	ldrh	r3, [r3, #8]
 8016500:	8b7a      	ldrh	r2, [r7, #26]
 8016502:	429a      	cmp	r2, r3
 8016504:	f0c0 809a 	bcc.w	801663c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016508:	8b7b      	ldrh	r3, [r7, #26]
 801650a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801650e:	4619      	mov	r1, r3
 8016510:	200e      	movs	r0, #14
 8016512:	f7f5 fd3d 	bl	800bf90 <pbuf_alloc>
 8016516:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016518:	697b      	ldr	r3, [r7, #20]
 801651a:	2b00      	cmp	r3, #0
 801651c:	f000 8090 	beq.w	8016640 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016520:	697b      	ldr	r3, [r7, #20]
 8016522:	895b      	ldrh	r3, [r3, #10]
 8016524:	461a      	mov	r2, r3
 8016526:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016528:	3308      	adds	r3, #8
 801652a:	429a      	cmp	r2, r3
 801652c:	d203      	bcs.n	8016536 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801652e:	6978      	ldr	r0, [r7, #20]
 8016530:	f7f6 f812 	bl	800c558 <pbuf_free>
          goto icmperr;
 8016534:	e085      	b.n	8016642 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8016536:	697b      	ldr	r3, [r7, #20]
 8016538:	685b      	ldr	r3, [r3, #4]
 801653a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801653c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801653e:	4618      	mov	r0, r3
 8016540:	f001 ff44 	bl	80183cc <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016544:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016546:	4619      	mov	r1, r3
 8016548:	6978      	ldr	r0, [r7, #20]
 801654a:	f7f5 ff7f 	bl	800c44c <pbuf_remove_header>
 801654e:	4603      	mov	r3, r0
 8016550:	2b00      	cmp	r3, #0
 8016552:	d009      	beq.n	8016568 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016554:	4b40      	ldr	r3, [pc, #256]	; (8016658 <icmp_input+0x1f8>)
 8016556:	22b6      	movs	r2, #182	; 0xb6
 8016558:	4940      	ldr	r1, [pc, #256]	; (801665c <icmp_input+0x1fc>)
 801655a:	4841      	ldr	r0, [pc, #260]	; (8016660 <icmp_input+0x200>)
 801655c:	f001 fde8 	bl	8018130 <iprintf>
          pbuf_free(r);
 8016560:	6978      	ldr	r0, [r7, #20]
 8016562:	f7f5 fff9 	bl	800c558 <pbuf_free>
          goto icmperr;
 8016566:	e06c      	b.n	8016642 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016568:	6879      	ldr	r1, [r7, #4]
 801656a:	6978      	ldr	r0, [r7, #20]
 801656c:	f7f6 f928 	bl	800c7c0 <pbuf_copy>
 8016570:	4603      	mov	r3, r0
 8016572:	2b00      	cmp	r3, #0
 8016574:	d003      	beq.n	801657e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016576:	6978      	ldr	r0, [r7, #20]
 8016578:	f7f5 ffee 	bl	800c558 <pbuf_free>
          goto icmperr;
 801657c:	e061      	b.n	8016642 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801657e:	6878      	ldr	r0, [r7, #4]
 8016580:	f7f5 ffea 	bl	800c558 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016584:	697b      	ldr	r3, [r7, #20]
 8016586:	607b      	str	r3, [r7, #4]
 8016588:	e00f      	b.n	80165aa <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801658a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801658c:	330e      	adds	r3, #14
 801658e:	4619      	mov	r1, r3
 8016590:	6878      	ldr	r0, [r7, #4]
 8016592:	f7f5 ff5b 	bl	800c44c <pbuf_remove_header>
 8016596:	4603      	mov	r3, r0
 8016598:	2b00      	cmp	r3, #0
 801659a:	d006      	beq.n	80165aa <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801659c:	4b2e      	ldr	r3, [pc, #184]	; (8016658 <icmp_input+0x1f8>)
 801659e:	22c7      	movs	r2, #199	; 0xc7
 80165a0:	4930      	ldr	r1, [pc, #192]	; (8016664 <icmp_input+0x204>)
 80165a2:	482f      	ldr	r0, [pc, #188]	; (8016660 <icmp_input+0x200>)
 80165a4:	f001 fdc4 	bl	8018130 <iprintf>
          goto icmperr;
 80165a8:	e04b      	b.n	8016642 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	685b      	ldr	r3, [r3, #4]
 80165ae:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80165b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80165b2:	4619      	mov	r1, r3
 80165b4:	6878      	ldr	r0, [r7, #4]
 80165b6:	f7f5 ff39 	bl	800c42c <pbuf_add_header>
 80165ba:	4603      	mov	r3, r0
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d12b      	bne.n	8016618 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	685b      	ldr	r3, [r3, #4]
 80165c4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80165c6:	69fb      	ldr	r3, [r7, #28]
 80165c8:	681a      	ldr	r2, [r3, #0]
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80165ce:	4b20      	ldr	r3, [pc, #128]	; (8016650 <icmp_input+0x1f0>)
 80165d0:	691a      	ldr	r2, [r3, #16]
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80165d6:	693b      	ldr	r3, [r7, #16]
 80165d8:	2200      	movs	r2, #0
 80165da:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80165dc:	693b      	ldr	r3, [r7, #16]
 80165de:	2200      	movs	r2, #0
 80165e0:	709a      	strb	r2, [r3, #2]
 80165e2:	2200      	movs	r2, #0
 80165e4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80165e6:	68fb      	ldr	r3, [r7, #12]
 80165e8:	22ff      	movs	r2, #255	; 0xff
 80165ea:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	2200      	movs	r2, #0
 80165f0:	729a      	strb	r2, [r3, #10]
 80165f2:	2200      	movs	r2, #0
 80165f4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80165f6:	683b      	ldr	r3, [r7, #0]
 80165f8:	9302      	str	r3, [sp, #8]
 80165fa:	2301      	movs	r3, #1
 80165fc:	9301      	str	r3, [sp, #4]
 80165fe:	2300      	movs	r3, #0
 8016600:	9300      	str	r3, [sp, #0]
 8016602:	23ff      	movs	r3, #255	; 0xff
 8016604:	2200      	movs	r2, #0
 8016606:	69f9      	ldr	r1, [r7, #28]
 8016608:	6878      	ldr	r0, [r7, #4]
 801660a:	f000 fa93 	bl	8016b34 <ip4_output_if>
 801660e:	4603      	mov	r3, r0
 8016610:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8016612:	e001      	b.n	8016618 <icmp_input+0x1b8>
      break;
 8016614:	bf00      	nop
 8016616:	e000      	b.n	801661a <icmp_input+0x1ba>
      break;
 8016618:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801661a:	6878      	ldr	r0, [r7, #4]
 801661c:	f7f5 ff9c 	bl	800c558 <pbuf_free>
  return;
 8016620:	e013      	b.n	801664a <icmp_input+0x1ea>
    goto lenerr;
 8016622:	bf00      	nop
 8016624:	e002      	b.n	801662c <icmp_input+0x1cc>
    goto lenerr;
 8016626:	bf00      	nop
 8016628:	e000      	b.n	801662c <icmp_input+0x1cc>
        goto lenerr;
 801662a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801662c:	6878      	ldr	r0, [r7, #4]
 801662e:	f7f5 ff93 	bl	800c558 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016632:	e00a      	b.n	801664a <icmp_input+0x1ea>
        goto icmperr;
 8016634:	bf00      	nop
 8016636:	e004      	b.n	8016642 <icmp_input+0x1e2>
        goto icmperr;
 8016638:	bf00      	nop
 801663a:	e002      	b.n	8016642 <icmp_input+0x1e2>
          goto icmperr;
 801663c:	bf00      	nop
 801663e:	e000      	b.n	8016642 <icmp_input+0x1e2>
          goto icmperr;
 8016640:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016642:	6878      	ldr	r0, [r7, #4]
 8016644:	f7f5 ff88 	bl	800c558 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016648:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801664a:	3728      	adds	r7, #40	; 0x28
 801664c:	46bd      	mov	sp, r7
 801664e:	bd80      	pop	{r7, pc}
 8016650:	2000d5e8 	.word	0x2000d5e8
 8016654:	2000d5fc 	.word	0x2000d5fc
 8016658:	0801c770 	.word	0x0801c770
 801665c:	0801c7a8 	.word	0x0801c7a8
 8016660:	0801c7e0 	.word	0x0801c7e0
 8016664:	0801c808 	.word	0x0801c808

08016668 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016668:	b580      	push	{r7, lr}
 801666a:	b082      	sub	sp, #8
 801666c:	af00      	add	r7, sp, #0
 801666e:	6078      	str	r0, [r7, #4]
 8016670:	460b      	mov	r3, r1
 8016672:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016674:	78fb      	ldrb	r3, [r7, #3]
 8016676:	461a      	mov	r2, r3
 8016678:	2103      	movs	r1, #3
 801667a:	6878      	ldr	r0, [r7, #4]
 801667c:	f000 f814 	bl	80166a8 <icmp_send_response>
}
 8016680:	bf00      	nop
 8016682:	3708      	adds	r7, #8
 8016684:	46bd      	mov	sp, r7
 8016686:	bd80      	pop	{r7, pc}

08016688 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016688:	b580      	push	{r7, lr}
 801668a:	b082      	sub	sp, #8
 801668c:	af00      	add	r7, sp, #0
 801668e:	6078      	str	r0, [r7, #4]
 8016690:	460b      	mov	r3, r1
 8016692:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016694:	78fb      	ldrb	r3, [r7, #3]
 8016696:	461a      	mov	r2, r3
 8016698:	210b      	movs	r1, #11
 801669a:	6878      	ldr	r0, [r7, #4]
 801669c:	f000 f804 	bl	80166a8 <icmp_send_response>
}
 80166a0:	bf00      	nop
 80166a2:	3708      	adds	r7, #8
 80166a4:	46bd      	mov	sp, r7
 80166a6:	bd80      	pop	{r7, pc}

080166a8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80166a8:	b580      	push	{r7, lr}
 80166aa:	b08c      	sub	sp, #48	; 0x30
 80166ac:	af04      	add	r7, sp, #16
 80166ae:	6078      	str	r0, [r7, #4]
 80166b0:	460b      	mov	r3, r1
 80166b2:	70fb      	strb	r3, [r7, #3]
 80166b4:	4613      	mov	r3, r2
 80166b6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80166b8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80166bc:	2124      	movs	r1, #36	; 0x24
 80166be:	2022      	movs	r0, #34	; 0x22
 80166c0:	f7f5 fc66 	bl	800bf90 <pbuf_alloc>
 80166c4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80166c6:	69fb      	ldr	r3, [r7, #28]
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d04c      	beq.n	8016766 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80166cc:	69fb      	ldr	r3, [r7, #28]
 80166ce:	895b      	ldrh	r3, [r3, #10]
 80166d0:	2b23      	cmp	r3, #35	; 0x23
 80166d2:	d806      	bhi.n	80166e2 <icmp_send_response+0x3a>
 80166d4:	4b26      	ldr	r3, [pc, #152]	; (8016770 <icmp_send_response+0xc8>)
 80166d6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80166da:	4926      	ldr	r1, [pc, #152]	; (8016774 <icmp_send_response+0xcc>)
 80166dc:	4826      	ldr	r0, [pc, #152]	; (8016778 <icmp_send_response+0xd0>)
 80166de:	f001 fd27 	bl	8018130 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	685b      	ldr	r3, [r3, #4]
 80166e6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80166e8:	69fb      	ldr	r3, [r7, #28]
 80166ea:	685b      	ldr	r3, [r3, #4]
 80166ec:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80166ee:	697b      	ldr	r3, [r7, #20]
 80166f0:	78fa      	ldrb	r2, [r7, #3]
 80166f2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80166f4:	697b      	ldr	r3, [r7, #20]
 80166f6:	78ba      	ldrb	r2, [r7, #2]
 80166f8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80166fa:	697b      	ldr	r3, [r7, #20]
 80166fc:	2200      	movs	r2, #0
 80166fe:	711a      	strb	r2, [r3, #4]
 8016700:	2200      	movs	r2, #0
 8016702:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016704:	697b      	ldr	r3, [r7, #20]
 8016706:	2200      	movs	r2, #0
 8016708:	719a      	strb	r2, [r3, #6]
 801670a:	2200      	movs	r2, #0
 801670c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801670e:	69fb      	ldr	r3, [r7, #28]
 8016710:	685b      	ldr	r3, [r3, #4]
 8016712:	f103 0008 	add.w	r0, r3, #8
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	685b      	ldr	r3, [r3, #4]
 801671a:	221c      	movs	r2, #28
 801671c:	4619      	mov	r1, r3
 801671e:	f001 fe55 	bl	80183cc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016722:	69bb      	ldr	r3, [r7, #24]
 8016724:	68db      	ldr	r3, [r3, #12]
 8016726:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016728:	f107 030c 	add.w	r3, r7, #12
 801672c:	4618      	mov	r0, r3
 801672e:	f000 f825 	bl	801677c <ip4_route>
 8016732:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016734:	693b      	ldr	r3, [r7, #16]
 8016736:	2b00      	cmp	r3, #0
 8016738:	d011      	beq.n	801675e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801673a:	697b      	ldr	r3, [r7, #20]
 801673c:	2200      	movs	r2, #0
 801673e:	709a      	strb	r2, [r3, #2]
 8016740:	2200      	movs	r2, #0
 8016742:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016744:	f107 020c 	add.w	r2, r7, #12
 8016748:	693b      	ldr	r3, [r7, #16]
 801674a:	9302      	str	r3, [sp, #8]
 801674c:	2301      	movs	r3, #1
 801674e:	9301      	str	r3, [sp, #4]
 8016750:	2300      	movs	r3, #0
 8016752:	9300      	str	r3, [sp, #0]
 8016754:	23ff      	movs	r3, #255	; 0xff
 8016756:	2100      	movs	r1, #0
 8016758:	69f8      	ldr	r0, [r7, #28]
 801675a:	f000 f9eb 	bl	8016b34 <ip4_output_if>
  }
  pbuf_free(q);
 801675e:	69f8      	ldr	r0, [r7, #28]
 8016760:	f7f5 fefa 	bl	800c558 <pbuf_free>
 8016764:	e000      	b.n	8016768 <icmp_send_response+0xc0>
    return;
 8016766:	bf00      	nop
}
 8016768:	3720      	adds	r7, #32
 801676a:	46bd      	mov	sp, r7
 801676c:	bd80      	pop	{r7, pc}
 801676e:	bf00      	nop
 8016770:	0801c770 	.word	0x0801c770
 8016774:	0801c83c 	.word	0x0801c83c
 8016778:	0801c7e0 	.word	0x0801c7e0

0801677c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801677c:	b480      	push	{r7}
 801677e:	b085      	sub	sp, #20
 8016780:	af00      	add	r7, sp, #0
 8016782:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016784:	4b33      	ldr	r3, [pc, #204]	; (8016854 <ip4_route+0xd8>)
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	60fb      	str	r3, [r7, #12]
 801678a:	e036      	b.n	80167fa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016792:	f003 0301 	and.w	r3, r3, #1
 8016796:	b2db      	uxtb	r3, r3
 8016798:	2b00      	cmp	r3, #0
 801679a:	d02b      	beq.n	80167f4 <ip4_route+0x78>
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80167a2:	089b      	lsrs	r3, r3, #2
 80167a4:	f003 0301 	and.w	r3, r3, #1
 80167a8:	b2db      	uxtb	r3, r3
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d022      	beq.n	80167f4 <ip4_route+0x78>
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	3304      	adds	r3, #4
 80167b2:	681b      	ldr	r3, [r3, #0]
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d01d      	beq.n	80167f4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	681a      	ldr	r2, [r3, #0]
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	3304      	adds	r3, #4
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	405a      	eors	r2, r3
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	3308      	adds	r3, #8
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	4013      	ands	r3, r2
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d101      	bne.n	80167d4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	e038      	b.n	8016846 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80167da:	f003 0302 	and.w	r3, r3, #2
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d108      	bne.n	80167f4 <ip4_route+0x78>
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	681a      	ldr	r2, [r3, #0]
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	330c      	adds	r3, #12
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	429a      	cmp	r2, r3
 80167ee:	d101      	bne.n	80167f4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	e028      	b.n	8016846 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	60fb      	str	r3, [r7, #12]
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d1c5      	bne.n	801678c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016800:	4b15      	ldr	r3, [pc, #84]	; (8016858 <ip4_route+0xdc>)
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	2b00      	cmp	r3, #0
 8016806:	d01a      	beq.n	801683e <ip4_route+0xc2>
 8016808:	4b13      	ldr	r3, [pc, #76]	; (8016858 <ip4_route+0xdc>)
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016810:	f003 0301 	and.w	r3, r3, #1
 8016814:	2b00      	cmp	r3, #0
 8016816:	d012      	beq.n	801683e <ip4_route+0xc2>
 8016818:	4b0f      	ldr	r3, [pc, #60]	; (8016858 <ip4_route+0xdc>)
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016820:	f003 0304 	and.w	r3, r3, #4
 8016824:	2b00      	cmp	r3, #0
 8016826:	d00a      	beq.n	801683e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016828:	4b0b      	ldr	r3, [pc, #44]	; (8016858 <ip4_route+0xdc>)
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	3304      	adds	r3, #4
 801682e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016830:	2b00      	cmp	r3, #0
 8016832:	d004      	beq.n	801683e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	b2db      	uxtb	r3, r3
 801683a:	2b7f      	cmp	r3, #127	; 0x7f
 801683c:	d101      	bne.n	8016842 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801683e:	2300      	movs	r3, #0
 8016840:	e001      	b.n	8016846 <ip4_route+0xca>
  }

  return netif_default;
 8016842:	4b05      	ldr	r3, [pc, #20]	; (8016858 <ip4_route+0xdc>)
 8016844:	681b      	ldr	r3, [r3, #0]
}
 8016846:	4618      	mov	r0, r3
 8016848:	3714      	adds	r7, #20
 801684a:	46bd      	mov	sp, r7
 801684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016850:	4770      	bx	lr
 8016852:	bf00      	nop
 8016854:	20010d50 	.word	0x20010d50
 8016858:	20010d54 	.word	0x20010d54

0801685c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801685c:	b580      	push	{r7, lr}
 801685e:	b082      	sub	sp, #8
 8016860:	af00      	add	r7, sp, #0
 8016862:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801686a:	f003 0301 	and.w	r3, r3, #1
 801686e:	b2db      	uxtb	r3, r3
 8016870:	2b00      	cmp	r3, #0
 8016872:	d016      	beq.n	80168a2 <ip4_input_accept+0x46>
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	3304      	adds	r3, #4
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	2b00      	cmp	r3, #0
 801687c:	d011      	beq.n	80168a2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801687e:	4b0b      	ldr	r3, [pc, #44]	; (80168ac <ip4_input_accept+0x50>)
 8016880:	695a      	ldr	r2, [r3, #20]
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	3304      	adds	r3, #4
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	429a      	cmp	r2, r3
 801688a:	d008      	beq.n	801689e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801688c:	4b07      	ldr	r3, [pc, #28]	; (80168ac <ip4_input_accept+0x50>)
 801688e:	695b      	ldr	r3, [r3, #20]
 8016890:	6879      	ldr	r1, [r7, #4]
 8016892:	4618      	mov	r0, r3
 8016894:	f000 fa26 	bl	8016ce4 <ip4_addr_isbroadcast_u32>
 8016898:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801689a:	2b00      	cmp	r3, #0
 801689c:	d001      	beq.n	80168a2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801689e:	2301      	movs	r3, #1
 80168a0:	e000      	b.n	80168a4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80168a2:	2300      	movs	r3, #0
}
 80168a4:	4618      	mov	r0, r3
 80168a6:	3708      	adds	r7, #8
 80168a8:	46bd      	mov	sp, r7
 80168aa:	bd80      	pop	{r7, pc}
 80168ac:	2000d5e8 	.word	0x2000d5e8

080168b0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b088      	sub	sp, #32
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	6078      	str	r0, [r7, #4]
 80168b8:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80168ba:	2301      	movs	r3, #1
 80168bc:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	685b      	ldr	r3, [r3, #4]
 80168c2:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80168c4:	69fb      	ldr	r3, [r7, #28]
 80168c6:	781b      	ldrb	r3, [r3, #0]
 80168c8:	091b      	lsrs	r3, r3, #4
 80168ca:	b2db      	uxtb	r3, r3
 80168cc:	2b04      	cmp	r3, #4
 80168ce:	d004      	beq.n	80168da <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80168d0:	6878      	ldr	r0, [r7, #4]
 80168d2:	f7f5 fe41 	bl	800c558 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80168d6:	2300      	movs	r3, #0
 80168d8:	e123      	b.n	8016b22 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80168da:	69fb      	ldr	r3, [r7, #28]
 80168dc:	781b      	ldrb	r3, [r3, #0]
 80168de:	f003 030f 	and.w	r3, r3, #15
 80168e2:	b2db      	uxtb	r3, r3
 80168e4:	009b      	lsls	r3, r3, #2
 80168e6:	b2db      	uxtb	r3, r3
 80168e8:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80168ea:	69fb      	ldr	r3, [r7, #28]
 80168ec:	885b      	ldrh	r3, [r3, #2]
 80168ee:	b29b      	uxth	r3, r3
 80168f0:	4618      	mov	r0, r3
 80168f2:	f7f4 f9fd 	bl	800acf0 <lwip_htons>
 80168f6:	4603      	mov	r3, r0
 80168f8:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	891b      	ldrh	r3, [r3, #8]
 80168fe:	8a3a      	ldrh	r2, [r7, #16]
 8016900:	429a      	cmp	r2, r3
 8016902:	d204      	bcs.n	801690e <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8016904:	8a3b      	ldrh	r3, [r7, #16]
 8016906:	4619      	mov	r1, r3
 8016908:	6878      	ldr	r0, [r7, #4]
 801690a:	f7f5 fc9f 	bl	800c24c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	895b      	ldrh	r3, [r3, #10]
 8016912:	8a7a      	ldrh	r2, [r7, #18]
 8016914:	429a      	cmp	r2, r3
 8016916:	d807      	bhi.n	8016928 <ip4_input+0x78>
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	891b      	ldrh	r3, [r3, #8]
 801691c:	8a3a      	ldrh	r2, [r7, #16]
 801691e:	429a      	cmp	r2, r3
 8016920:	d802      	bhi.n	8016928 <ip4_input+0x78>
 8016922:	8a7b      	ldrh	r3, [r7, #18]
 8016924:	2b13      	cmp	r3, #19
 8016926:	d804      	bhi.n	8016932 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016928:	6878      	ldr	r0, [r7, #4]
 801692a:	f7f5 fe15 	bl	800c558 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801692e:	2300      	movs	r3, #0
 8016930:	e0f7      	b.n	8016b22 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016932:	69fb      	ldr	r3, [r7, #28]
 8016934:	691b      	ldr	r3, [r3, #16]
 8016936:	4a7d      	ldr	r2, [pc, #500]	; (8016b2c <ip4_input+0x27c>)
 8016938:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801693a:	69fb      	ldr	r3, [r7, #28]
 801693c:	68db      	ldr	r3, [r3, #12]
 801693e:	4a7b      	ldr	r2, [pc, #492]	; (8016b2c <ip4_input+0x27c>)
 8016940:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016942:	4b7a      	ldr	r3, [pc, #488]	; (8016b2c <ip4_input+0x27c>)
 8016944:	695b      	ldr	r3, [r3, #20]
 8016946:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801694a:	2be0      	cmp	r3, #224	; 0xe0
 801694c:	d112      	bne.n	8016974 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801694e:	683b      	ldr	r3, [r7, #0]
 8016950:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016954:	f003 0301 	and.w	r3, r3, #1
 8016958:	b2db      	uxtb	r3, r3
 801695a:	2b00      	cmp	r3, #0
 801695c:	d007      	beq.n	801696e <ip4_input+0xbe>
 801695e:	683b      	ldr	r3, [r7, #0]
 8016960:	3304      	adds	r3, #4
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	2b00      	cmp	r3, #0
 8016966:	d002      	beq.n	801696e <ip4_input+0xbe>
      netif = inp;
 8016968:	683b      	ldr	r3, [r7, #0]
 801696a:	61bb      	str	r3, [r7, #24]
 801696c:	e02a      	b.n	80169c4 <ip4_input+0x114>
    } else {
      netif = NULL;
 801696e:	2300      	movs	r3, #0
 8016970:	61bb      	str	r3, [r7, #24]
 8016972:	e027      	b.n	80169c4 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016974:	6838      	ldr	r0, [r7, #0]
 8016976:	f7ff ff71 	bl	801685c <ip4_input_accept>
 801697a:	4603      	mov	r3, r0
 801697c:	2b00      	cmp	r3, #0
 801697e:	d002      	beq.n	8016986 <ip4_input+0xd6>
      netif = inp;
 8016980:	683b      	ldr	r3, [r7, #0]
 8016982:	61bb      	str	r3, [r7, #24]
 8016984:	e01e      	b.n	80169c4 <ip4_input+0x114>
    } else {
      netif = NULL;
 8016986:	2300      	movs	r3, #0
 8016988:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801698a:	4b68      	ldr	r3, [pc, #416]	; (8016b2c <ip4_input+0x27c>)
 801698c:	695b      	ldr	r3, [r3, #20]
 801698e:	b2db      	uxtb	r3, r3
 8016990:	2b7f      	cmp	r3, #127	; 0x7f
 8016992:	d017      	beq.n	80169c4 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016994:	4b66      	ldr	r3, [pc, #408]	; (8016b30 <ip4_input+0x280>)
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	61bb      	str	r3, [r7, #24]
 801699a:	e00e      	b.n	80169ba <ip4_input+0x10a>
          if (netif == inp) {
 801699c:	69ba      	ldr	r2, [r7, #24]
 801699e:	683b      	ldr	r3, [r7, #0]
 80169a0:	429a      	cmp	r2, r3
 80169a2:	d006      	beq.n	80169b2 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80169a4:	69b8      	ldr	r0, [r7, #24]
 80169a6:	f7ff ff59 	bl	801685c <ip4_input_accept>
 80169aa:	4603      	mov	r3, r0
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d108      	bne.n	80169c2 <ip4_input+0x112>
 80169b0:	e000      	b.n	80169b4 <ip4_input+0x104>
            continue;
 80169b2:	bf00      	nop
        NETIF_FOREACH(netif) {
 80169b4:	69bb      	ldr	r3, [r7, #24]
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	61bb      	str	r3, [r7, #24]
 80169ba:	69bb      	ldr	r3, [r7, #24]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d1ed      	bne.n	801699c <ip4_input+0xec>
 80169c0:	e000      	b.n	80169c4 <ip4_input+0x114>
            break;
 80169c2:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80169c4:	69bb      	ldr	r3, [r7, #24]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d111      	bne.n	80169ee <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80169ca:	69fb      	ldr	r3, [r7, #28]
 80169cc:	7a5b      	ldrb	r3, [r3, #9]
 80169ce:	2b11      	cmp	r3, #17
 80169d0:	d10d      	bne.n	80169ee <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80169d2:	8a7b      	ldrh	r3, [r7, #18]
 80169d4:	69fa      	ldr	r2, [r7, #28]
 80169d6:	4413      	add	r3, r2
 80169d8:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	885b      	ldrh	r3, [r3, #2]
 80169de:	b29b      	uxth	r3, r3
 80169e0:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80169e4:	d103      	bne.n	80169ee <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80169e6:	683b      	ldr	r3, [r7, #0]
 80169e8:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80169ea:	2300      	movs	r3, #0
 80169ec:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80169ee:	697b      	ldr	r3, [r7, #20]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d017      	beq.n	8016a24 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80169f4:	4b4d      	ldr	r3, [pc, #308]	; (8016b2c <ip4_input+0x27c>)
 80169f6:	691b      	ldr	r3, [r3, #16]
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d013      	beq.n	8016a24 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80169fc:	4b4b      	ldr	r3, [pc, #300]	; (8016b2c <ip4_input+0x27c>)
 80169fe:	691b      	ldr	r3, [r3, #16]
 8016a00:	6839      	ldr	r1, [r7, #0]
 8016a02:	4618      	mov	r0, r3
 8016a04:	f000 f96e 	bl	8016ce4 <ip4_addr_isbroadcast_u32>
 8016a08:	4603      	mov	r3, r0
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d105      	bne.n	8016a1a <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016a0e:	4b47      	ldr	r3, [pc, #284]	; (8016b2c <ip4_input+0x27c>)
 8016a10:	691b      	ldr	r3, [r3, #16]
 8016a12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016a16:	2be0      	cmp	r3, #224	; 0xe0
 8016a18:	d104      	bne.n	8016a24 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016a1a:	6878      	ldr	r0, [r7, #4]
 8016a1c:	f7f5 fd9c 	bl	800c558 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016a20:	2300      	movs	r3, #0
 8016a22:	e07e      	b.n	8016b22 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016a24:	69bb      	ldr	r3, [r7, #24]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d104      	bne.n	8016a34 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016a2a:	6878      	ldr	r0, [r7, #4]
 8016a2c:	f7f5 fd94 	bl	800c558 <pbuf_free>
    return ERR_OK;
 8016a30:	2300      	movs	r3, #0
 8016a32:	e076      	b.n	8016b22 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016a34:	69fb      	ldr	r3, [r7, #28]
 8016a36:	88db      	ldrh	r3, [r3, #6]
 8016a38:	b29b      	uxth	r3, r3
 8016a3a:	461a      	mov	r2, r3
 8016a3c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016a40:	4013      	ands	r3, r2
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d00b      	beq.n	8016a5e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016a46:	6878      	ldr	r0, [r7, #4]
 8016a48:	f000 fc92 	bl	8017370 <ip4_reass>
 8016a4c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d101      	bne.n	8016a58 <ip4_input+0x1a8>
      return ERR_OK;
 8016a54:	2300      	movs	r3, #0
 8016a56:	e064      	b.n	8016b22 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	685b      	ldr	r3, [r3, #4]
 8016a5c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016a5e:	4a33      	ldr	r2, [pc, #204]	; (8016b2c <ip4_input+0x27c>)
 8016a60:	69bb      	ldr	r3, [r7, #24]
 8016a62:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016a64:	4a31      	ldr	r2, [pc, #196]	; (8016b2c <ip4_input+0x27c>)
 8016a66:	683b      	ldr	r3, [r7, #0]
 8016a68:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016a6a:	4a30      	ldr	r2, [pc, #192]	; (8016b2c <ip4_input+0x27c>)
 8016a6c:	69fb      	ldr	r3, [r7, #28]
 8016a6e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016a70:	69fb      	ldr	r3, [r7, #28]
 8016a72:	781b      	ldrb	r3, [r3, #0]
 8016a74:	f003 030f 	and.w	r3, r3, #15
 8016a78:	b2db      	uxtb	r3, r3
 8016a7a:	009b      	lsls	r3, r3, #2
 8016a7c:	b2db      	uxtb	r3, r3
 8016a7e:	b29a      	uxth	r2, r3
 8016a80:	4b2a      	ldr	r3, [pc, #168]	; (8016b2c <ip4_input+0x27c>)
 8016a82:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016a84:	8a7b      	ldrh	r3, [r7, #18]
 8016a86:	4619      	mov	r1, r3
 8016a88:	6878      	ldr	r0, [r7, #4]
 8016a8a:	f7f5 fcdf 	bl	800c44c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016a8e:	69fb      	ldr	r3, [r7, #28]
 8016a90:	7a5b      	ldrb	r3, [r3, #9]
 8016a92:	2b11      	cmp	r3, #17
 8016a94:	d006      	beq.n	8016aa4 <ip4_input+0x1f4>
 8016a96:	2b11      	cmp	r3, #17
 8016a98:	dc13      	bgt.n	8016ac2 <ip4_input+0x212>
 8016a9a:	2b01      	cmp	r3, #1
 8016a9c:	d00c      	beq.n	8016ab8 <ip4_input+0x208>
 8016a9e:	2b06      	cmp	r3, #6
 8016aa0:	d005      	beq.n	8016aae <ip4_input+0x1fe>
 8016aa2:	e00e      	b.n	8016ac2 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016aa4:	6839      	ldr	r1, [r7, #0]
 8016aa6:	6878      	ldr	r0, [r7, #4]
 8016aa8:	f7fc fade 	bl	8013068 <udp_input>
        break;
 8016aac:	e026      	b.n	8016afc <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016aae:	6839      	ldr	r1, [r7, #0]
 8016ab0:	6878      	ldr	r0, [r7, #4]
 8016ab2:	f7f7 fe97 	bl	800e7e4 <tcp_input>
        break;
 8016ab6:	e021      	b.n	8016afc <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016ab8:	6839      	ldr	r1, [r7, #0]
 8016aba:	6878      	ldr	r0, [r7, #4]
 8016abc:	f7ff fcd0 	bl	8016460 <icmp_input>
        break;
 8016ac0:	e01c      	b.n	8016afc <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016ac2:	4b1a      	ldr	r3, [pc, #104]	; (8016b2c <ip4_input+0x27c>)
 8016ac4:	695b      	ldr	r3, [r3, #20]
 8016ac6:	69b9      	ldr	r1, [r7, #24]
 8016ac8:	4618      	mov	r0, r3
 8016aca:	f000 f90b 	bl	8016ce4 <ip4_addr_isbroadcast_u32>
 8016ace:	4603      	mov	r3, r0
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d10f      	bne.n	8016af4 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016ad4:	4b15      	ldr	r3, [pc, #84]	; (8016b2c <ip4_input+0x27c>)
 8016ad6:	695b      	ldr	r3, [r3, #20]
 8016ad8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016adc:	2be0      	cmp	r3, #224	; 0xe0
 8016ade:	d009      	beq.n	8016af4 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016ae0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016ae4:	4619      	mov	r1, r3
 8016ae6:	6878      	ldr	r0, [r7, #4]
 8016ae8:	f7f5 fd23 	bl	800c532 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016aec:	2102      	movs	r1, #2
 8016aee:	6878      	ldr	r0, [r7, #4]
 8016af0:	f7ff fdba 	bl	8016668 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016af4:	6878      	ldr	r0, [r7, #4]
 8016af6:	f7f5 fd2f 	bl	800c558 <pbuf_free>
        break;
 8016afa:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016afc:	4b0b      	ldr	r3, [pc, #44]	; (8016b2c <ip4_input+0x27c>)
 8016afe:	2200      	movs	r2, #0
 8016b00:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016b02:	4b0a      	ldr	r3, [pc, #40]	; (8016b2c <ip4_input+0x27c>)
 8016b04:	2200      	movs	r2, #0
 8016b06:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016b08:	4b08      	ldr	r3, [pc, #32]	; (8016b2c <ip4_input+0x27c>)
 8016b0a:	2200      	movs	r2, #0
 8016b0c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016b0e:	4b07      	ldr	r3, [pc, #28]	; (8016b2c <ip4_input+0x27c>)
 8016b10:	2200      	movs	r2, #0
 8016b12:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016b14:	4b05      	ldr	r3, [pc, #20]	; (8016b2c <ip4_input+0x27c>)
 8016b16:	2200      	movs	r2, #0
 8016b18:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016b1a:	4b04      	ldr	r3, [pc, #16]	; (8016b2c <ip4_input+0x27c>)
 8016b1c:	2200      	movs	r2, #0
 8016b1e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016b20:	2300      	movs	r3, #0
}
 8016b22:	4618      	mov	r0, r3
 8016b24:	3720      	adds	r7, #32
 8016b26:	46bd      	mov	sp, r7
 8016b28:	bd80      	pop	{r7, pc}
 8016b2a:	bf00      	nop
 8016b2c:	2000d5e8 	.word	0x2000d5e8
 8016b30:	20010d50 	.word	0x20010d50

08016b34 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016b34:	b580      	push	{r7, lr}
 8016b36:	b08a      	sub	sp, #40	; 0x28
 8016b38:	af04      	add	r7, sp, #16
 8016b3a:	60f8      	str	r0, [r7, #12]
 8016b3c:	60b9      	str	r1, [r7, #8]
 8016b3e:	607a      	str	r2, [r7, #4]
 8016b40:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016b42:	68bb      	ldr	r3, [r7, #8]
 8016b44:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d009      	beq.n	8016b60 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016b4c:	68bb      	ldr	r3, [r7, #8]
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d003      	beq.n	8016b5a <ip4_output_if+0x26>
 8016b52:	68bb      	ldr	r3, [r7, #8]
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d102      	bne.n	8016b60 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b5c:	3304      	adds	r3, #4
 8016b5e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016b60:	78fa      	ldrb	r2, [r7, #3]
 8016b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b64:	9302      	str	r3, [sp, #8]
 8016b66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016b6a:	9301      	str	r3, [sp, #4]
 8016b6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016b70:	9300      	str	r3, [sp, #0]
 8016b72:	4613      	mov	r3, r2
 8016b74:	687a      	ldr	r2, [r7, #4]
 8016b76:	6979      	ldr	r1, [r7, #20]
 8016b78:	68f8      	ldr	r0, [r7, #12]
 8016b7a:	f000 f805 	bl	8016b88 <ip4_output_if_src>
 8016b7e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016b80:	4618      	mov	r0, r3
 8016b82:	3718      	adds	r7, #24
 8016b84:	46bd      	mov	sp, r7
 8016b86:	bd80      	pop	{r7, pc}

08016b88 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016b88:	b580      	push	{r7, lr}
 8016b8a:	b088      	sub	sp, #32
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	60f8      	str	r0, [r7, #12]
 8016b90:	60b9      	str	r1, [r7, #8]
 8016b92:	607a      	str	r2, [r7, #4]
 8016b94:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	7b9b      	ldrb	r3, [r3, #14]
 8016b9a:	2b01      	cmp	r3, #1
 8016b9c:	d006      	beq.n	8016bac <ip4_output_if_src+0x24>
 8016b9e:	4b4b      	ldr	r3, [pc, #300]	; (8016ccc <ip4_output_if_src+0x144>)
 8016ba0:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016ba4:	494a      	ldr	r1, [pc, #296]	; (8016cd0 <ip4_output_if_src+0x148>)
 8016ba6:	484b      	ldr	r0, [pc, #300]	; (8016cd4 <ip4_output_if_src+0x14c>)
 8016ba8:	f001 fac2 	bl	8018130 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d060      	beq.n	8016c74 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016bb2:	2314      	movs	r3, #20
 8016bb4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016bb6:	2114      	movs	r1, #20
 8016bb8:	68f8      	ldr	r0, [r7, #12]
 8016bba:	f7f5 fc37 	bl	800c42c <pbuf_add_header>
 8016bbe:	4603      	mov	r3, r0
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d002      	beq.n	8016bca <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016bc4:	f06f 0301 	mvn.w	r3, #1
 8016bc8:	e07c      	b.n	8016cc4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016bca:	68fb      	ldr	r3, [r7, #12]
 8016bcc:	685b      	ldr	r3, [r3, #4]
 8016bce:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	895b      	ldrh	r3, [r3, #10]
 8016bd4:	2b13      	cmp	r3, #19
 8016bd6:	d806      	bhi.n	8016be6 <ip4_output_if_src+0x5e>
 8016bd8:	4b3c      	ldr	r3, [pc, #240]	; (8016ccc <ip4_output_if_src+0x144>)
 8016bda:	f44f 7262 	mov.w	r2, #904	; 0x388
 8016bde:	493e      	ldr	r1, [pc, #248]	; (8016cd8 <ip4_output_if_src+0x150>)
 8016be0:	483c      	ldr	r0, [pc, #240]	; (8016cd4 <ip4_output_if_src+0x14c>)
 8016be2:	f001 faa5 	bl	8018130 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016be6:	69fb      	ldr	r3, [r7, #28]
 8016be8:	78fa      	ldrb	r2, [r7, #3]
 8016bea:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016bec:	69fb      	ldr	r3, [r7, #28]
 8016bee:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016bf2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	681a      	ldr	r2, [r3, #0]
 8016bf8:	69fb      	ldr	r3, [r7, #28]
 8016bfa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016bfc:	8b7b      	ldrh	r3, [r7, #26]
 8016bfe:	089b      	lsrs	r3, r3, #2
 8016c00:	b29b      	uxth	r3, r3
 8016c02:	b2db      	uxtb	r3, r3
 8016c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c08:	b2da      	uxtb	r2, r3
 8016c0a:	69fb      	ldr	r3, [r7, #28]
 8016c0c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016c0e:	69fb      	ldr	r3, [r7, #28]
 8016c10:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016c14:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	891b      	ldrh	r3, [r3, #8]
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	f7f4 f868 	bl	800acf0 <lwip_htons>
 8016c20:	4603      	mov	r3, r0
 8016c22:	461a      	mov	r2, r3
 8016c24:	69fb      	ldr	r3, [r7, #28]
 8016c26:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016c28:	69fb      	ldr	r3, [r7, #28]
 8016c2a:	2200      	movs	r2, #0
 8016c2c:	719a      	strb	r2, [r3, #6]
 8016c2e:	2200      	movs	r2, #0
 8016c30:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016c32:	4b2a      	ldr	r3, [pc, #168]	; (8016cdc <ip4_output_if_src+0x154>)
 8016c34:	881b      	ldrh	r3, [r3, #0]
 8016c36:	4618      	mov	r0, r3
 8016c38:	f7f4 f85a 	bl	800acf0 <lwip_htons>
 8016c3c:	4603      	mov	r3, r0
 8016c3e:	461a      	mov	r2, r3
 8016c40:	69fb      	ldr	r3, [r7, #28]
 8016c42:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016c44:	4b25      	ldr	r3, [pc, #148]	; (8016cdc <ip4_output_if_src+0x154>)
 8016c46:	881b      	ldrh	r3, [r3, #0]
 8016c48:	3301      	adds	r3, #1
 8016c4a:	b29a      	uxth	r2, r3
 8016c4c:	4b23      	ldr	r3, [pc, #140]	; (8016cdc <ip4_output_if_src+0x154>)
 8016c4e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016c50:	68bb      	ldr	r3, [r7, #8]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d104      	bne.n	8016c60 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016c56:	4b22      	ldr	r3, [pc, #136]	; (8016ce0 <ip4_output_if_src+0x158>)
 8016c58:	681a      	ldr	r2, [r3, #0]
 8016c5a:	69fb      	ldr	r3, [r7, #28]
 8016c5c:	60da      	str	r2, [r3, #12]
 8016c5e:	e003      	b.n	8016c68 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016c60:	68bb      	ldr	r3, [r7, #8]
 8016c62:	681a      	ldr	r2, [r3, #0]
 8016c64:	69fb      	ldr	r3, [r7, #28]
 8016c66:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016c68:	69fb      	ldr	r3, [r7, #28]
 8016c6a:	2200      	movs	r2, #0
 8016c6c:	729a      	strb	r2, [r3, #10]
 8016c6e:	2200      	movs	r2, #0
 8016c70:	72da      	strb	r2, [r3, #11]
 8016c72:	e00f      	b.n	8016c94 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	895b      	ldrh	r3, [r3, #10]
 8016c78:	2b13      	cmp	r3, #19
 8016c7a:	d802      	bhi.n	8016c82 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016c7c:	f06f 0301 	mvn.w	r3, #1
 8016c80:	e020      	b.n	8016cc4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	685b      	ldr	r3, [r3, #4]
 8016c86:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016c88:	69fb      	ldr	r3, [r7, #28]
 8016c8a:	691b      	ldr	r3, [r3, #16]
 8016c8c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016c8e:	f107 0314 	add.w	r3, r7, #20
 8016c92:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d00c      	beq.n	8016cb6 <ip4_output_if_src+0x12e>
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	891a      	ldrh	r2, [r3, #8]
 8016ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016ca4:	429a      	cmp	r2, r3
 8016ca6:	d906      	bls.n	8016cb6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016ca8:	687a      	ldr	r2, [r7, #4]
 8016caa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016cac:	68f8      	ldr	r0, [r7, #12]
 8016cae:	f000 fd53 	bl	8017758 <ip4_frag>
 8016cb2:	4603      	mov	r3, r0
 8016cb4:	e006      	b.n	8016cc4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cb8:	695b      	ldr	r3, [r3, #20]
 8016cba:	687a      	ldr	r2, [r7, #4]
 8016cbc:	68f9      	ldr	r1, [r7, #12]
 8016cbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016cc0:	4798      	blx	r3
 8016cc2:	4603      	mov	r3, r0
}
 8016cc4:	4618      	mov	r0, r3
 8016cc6:	3720      	adds	r7, #32
 8016cc8:	46bd      	mov	sp, r7
 8016cca:	bd80      	pop	{r7, pc}
 8016ccc:	0801c868 	.word	0x0801c868
 8016cd0:	0801c89c 	.word	0x0801c89c
 8016cd4:	0801c8a8 	.word	0x0801c8a8
 8016cd8:	0801c8d0 	.word	0x0801c8d0
 8016cdc:	20010ee2 	.word	0x20010ee2
 8016ce0:	08026e3c 	.word	0x08026e3c

08016ce4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016ce4:	b480      	push	{r7}
 8016ce6:	b085      	sub	sp, #20
 8016ce8:	af00      	add	r7, sp, #0
 8016cea:	6078      	str	r0, [r7, #4]
 8016cec:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016cf8:	d002      	beq.n	8016d00 <ip4_addr_isbroadcast_u32+0x1c>
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d101      	bne.n	8016d04 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016d00:	2301      	movs	r3, #1
 8016d02:	e02a      	b.n	8016d5a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016d04:	683b      	ldr	r3, [r7, #0]
 8016d06:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016d0a:	f003 0302 	and.w	r3, r3, #2
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d101      	bne.n	8016d16 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016d12:	2300      	movs	r3, #0
 8016d14:	e021      	b.n	8016d5a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016d16:	683b      	ldr	r3, [r7, #0]
 8016d18:	3304      	adds	r3, #4
 8016d1a:	681b      	ldr	r3, [r3, #0]
 8016d1c:	687a      	ldr	r2, [r7, #4]
 8016d1e:	429a      	cmp	r2, r3
 8016d20:	d101      	bne.n	8016d26 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016d22:	2300      	movs	r3, #0
 8016d24:	e019      	b.n	8016d5a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016d26:	68fa      	ldr	r2, [r7, #12]
 8016d28:	683b      	ldr	r3, [r7, #0]
 8016d2a:	3304      	adds	r3, #4
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	405a      	eors	r2, r3
 8016d30:	683b      	ldr	r3, [r7, #0]
 8016d32:	3308      	adds	r3, #8
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	4013      	ands	r3, r2
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d10d      	bne.n	8016d58 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016d3c:	683b      	ldr	r3, [r7, #0]
 8016d3e:	3308      	adds	r3, #8
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	43da      	mvns	r2, r3
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016d48:	683b      	ldr	r3, [r7, #0]
 8016d4a:	3308      	adds	r3, #8
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016d50:	429a      	cmp	r2, r3
 8016d52:	d101      	bne.n	8016d58 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016d54:	2301      	movs	r3, #1
 8016d56:	e000      	b.n	8016d5a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016d58:	2300      	movs	r3, #0
  }
}
 8016d5a:	4618      	mov	r0, r3
 8016d5c:	3714      	adds	r7, #20
 8016d5e:	46bd      	mov	sp, r7
 8016d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d64:	4770      	bx	lr
	...

08016d68 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016d68:	b580      	push	{r7, lr}
 8016d6a:	b084      	sub	sp, #16
 8016d6c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016d6e:	2300      	movs	r3, #0
 8016d70:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016d72:	4b12      	ldr	r3, [pc, #72]	; (8016dbc <ip_reass_tmr+0x54>)
 8016d74:	681b      	ldr	r3, [r3, #0]
 8016d76:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016d78:	e018      	b.n	8016dac <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016d7a:	68fb      	ldr	r3, [r7, #12]
 8016d7c:	7fdb      	ldrb	r3, [r3, #31]
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d00b      	beq.n	8016d9a <ip_reass_tmr+0x32>
      r->timer--;
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	7fdb      	ldrb	r3, [r3, #31]
 8016d86:	3b01      	subs	r3, #1
 8016d88:	b2da      	uxtb	r2, r3
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	60fb      	str	r3, [r7, #12]
 8016d98:	e008      	b.n	8016dac <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016da4:	68b9      	ldr	r1, [r7, #8]
 8016da6:	6878      	ldr	r0, [r7, #4]
 8016da8:	f000 f80a 	bl	8016dc0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d1e3      	bne.n	8016d7a <ip_reass_tmr+0x12>
    }
  }
}
 8016db2:	bf00      	nop
 8016db4:	bf00      	nop
 8016db6:	3710      	adds	r7, #16
 8016db8:	46bd      	mov	sp, r7
 8016dba:	bd80      	pop	{r7, pc}
 8016dbc:	20010ee4 	.word	0x20010ee4

08016dc0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016dc0:	b580      	push	{r7, lr}
 8016dc2:	b088      	sub	sp, #32
 8016dc4:	af00      	add	r7, sp, #0
 8016dc6:	6078      	str	r0, [r7, #4]
 8016dc8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016dca:	2300      	movs	r3, #0
 8016dcc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016dce:	683a      	ldr	r2, [r7, #0]
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	429a      	cmp	r2, r3
 8016dd4:	d105      	bne.n	8016de2 <ip_reass_free_complete_datagram+0x22>
 8016dd6:	4b45      	ldr	r3, [pc, #276]	; (8016eec <ip_reass_free_complete_datagram+0x12c>)
 8016dd8:	22ab      	movs	r2, #171	; 0xab
 8016dda:	4945      	ldr	r1, [pc, #276]	; (8016ef0 <ip_reass_free_complete_datagram+0x130>)
 8016ddc:	4845      	ldr	r0, [pc, #276]	; (8016ef4 <ip_reass_free_complete_datagram+0x134>)
 8016dde:	f001 f9a7 	bl	8018130 <iprintf>
  if (prev != NULL) {
 8016de2:	683b      	ldr	r3, [r7, #0]
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d00a      	beq.n	8016dfe <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016de8:	683b      	ldr	r3, [r7, #0]
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	687a      	ldr	r2, [r7, #4]
 8016dee:	429a      	cmp	r2, r3
 8016df0:	d005      	beq.n	8016dfe <ip_reass_free_complete_datagram+0x3e>
 8016df2:	4b3e      	ldr	r3, [pc, #248]	; (8016eec <ip_reass_free_complete_datagram+0x12c>)
 8016df4:	22ad      	movs	r2, #173	; 0xad
 8016df6:	4940      	ldr	r1, [pc, #256]	; (8016ef8 <ip_reass_free_complete_datagram+0x138>)
 8016df8:	483e      	ldr	r0, [pc, #248]	; (8016ef4 <ip_reass_free_complete_datagram+0x134>)
 8016dfa:	f001 f999 	bl	8018130 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	685b      	ldr	r3, [r3, #4]
 8016e02:	685b      	ldr	r3, [r3, #4]
 8016e04:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016e06:	697b      	ldr	r3, [r7, #20]
 8016e08:	889b      	ldrh	r3, [r3, #4]
 8016e0a:	b29b      	uxth	r3, r3
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d12a      	bne.n	8016e66 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	685b      	ldr	r3, [r3, #4]
 8016e14:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016e16:	697b      	ldr	r3, [r7, #20]
 8016e18:	681a      	ldr	r2, [r3, #0]
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016e1e:	69bb      	ldr	r3, [r7, #24]
 8016e20:	6858      	ldr	r0, [r3, #4]
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	3308      	adds	r3, #8
 8016e26:	2214      	movs	r2, #20
 8016e28:	4619      	mov	r1, r3
 8016e2a:	f001 facf 	bl	80183cc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016e2e:	2101      	movs	r1, #1
 8016e30:	69b8      	ldr	r0, [r7, #24]
 8016e32:	f7ff fc29 	bl	8016688 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016e36:	69b8      	ldr	r0, [r7, #24]
 8016e38:	f7f5 fc1c 	bl	800c674 <pbuf_clen>
 8016e3c:	4603      	mov	r3, r0
 8016e3e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016e40:	8bfa      	ldrh	r2, [r7, #30]
 8016e42:	8a7b      	ldrh	r3, [r7, #18]
 8016e44:	4413      	add	r3, r2
 8016e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016e4a:	db05      	blt.n	8016e58 <ip_reass_free_complete_datagram+0x98>
 8016e4c:	4b27      	ldr	r3, [pc, #156]	; (8016eec <ip_reass_free_complete_datagram+0x12c>)
 8016e4e:	22bc      	movs	r2, #188	; 0xbc
 8016e50:	492a      	ldr	r1, [pc, #168]	; (8016efc <ip_reass_free_complete_datagram+0x13c>)
 8016e52:	4828      	ldr	r0, [pc, #160]	; (8016ef4 <ip_reass_free_complete_datagram+0x134>)
 8016e54:	f001 f96c 	bl	8018130 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016e58:	8bfa      	ldrh	r2, [r7, #30]
 8016e5a:	8a7b      	ldrh	r3, [r7, #18]
 8016e5c:	4413      	add	r3, r2
 8016e5e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016e60:	69b8      	ldr	r0, [r7, #24]
 8016e62:	f7f5 fb79 	bl	800c558 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	685b      	ldr	r3, [r3, #4]
 8016e6a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016e6c:	e01f      	b.n	8016eae <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016e6e:	69bb      	ldr	r3, [r7, #24]
 8016e70:	685b      	ldr	r3, [r3, #4]
 8016e72:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016e74:	69bb      	ldr	r3, [r7, #24]
 8016e76:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016e78:	697b      	ldr	r3, [r7, #20]
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016e7e:	68f8      	ldr	r0, [r7, #12]
 8016e80:	f7f5 fbf8 	bl	800c674 <pbuf_clen>
 8016e84:	4603      	mov	r3, r0
 8016e86:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016e88:	8bfa      	ldrh	r2, [r7, #30]
 8016e8a:	8a7b      	ldrh	r3, [r7, #18]
 8016e8c:	4413      	add	r3, r2
 8016e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016e92:	db05      	blt.n	8016ea0 <ip_reass_free_complete_datagram+0xe0>
 8016e94:	4b15      	ldr	r3, [pc, #84]	; (8016eec <ip_reass_free_complete_datagram+0x12c>)
 8016e96:	22cc      	movs	r2, #204	; 0xcc
 8016e98:	4918      	ldr	r1, [pc, #96]	; (8016efc <ip_reass_free_complete_datagram+0x13c>)
 8016e9a:	4816      	ldr	r0, [pc, #88]	; (8016ef4 <ip_reass_free_complete_datagram+0x134>)
 8016e9c:	f001 f948 	bl	8018130 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016ea0:	8bfa      	ldrh	r2, [r7, #30]
 8016ea2:	8a7b      	ldrh	r3, [r7, #18]
 8016ea4:	4413      	add	r3, r2
 8016ea6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016ea8:	68f8      	ldr	r0, [r7, #12]
 8016eaa:	f7f5 fb55 	bl	800c558 <pbuf_free>
  while (p != NULL) {
 8016eae:	69bb      	ldr	r3, [r7, #24]
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d1dc      	bne.n	8016e6e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016eb4:	6839      	ldr	r1, [r7, #0]
 8016eb6:	6878      	ldr	r0, [r7, #4]
 8016eb8:	f000 f8c2 	bl	8017040 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016ebc:	4b10      	ldr	r3, [pc, #64]	; (8016f00 <ip_reass_free_complete_datagram+0x140>)
 8016ebe:	881b      	ldrh	r3, [r3, #0]
 8016ec0:	8bfa      	ldrh	r2, [r7, #30]
 8016ec2:	429a      	cmp	r2, r3
 8016ec4:	d905      	bls.n	8016ed2 <ip_reass_free_complete_datagram+0x112>
 8016ec6:	4b09      	ldr	r3, [pc, #36]	; (8016eec <ip_reass_free_complete_datagram+0x12c>)
 8016ec8:	22d2      	movs	r2, #210	; 0xd2
 8016eca:	490e      	ldr	r1, [pc, #56]	; (8016f04 <ip_reass_free_complete_datagram+0x144>)
 8016ecc:	4809      	ldr	r0, [pc, #36]	; (8016ef4 <ip_reass_free_complete_datagram+0x134>)
 8016ece:	f001 f92f 	bl	8018130 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016ed2:	4b0b      	ldr	r3, [pc, #44]	; (8016f00 <ip_reass_free_complete_datagram+0x140>)
 8016ed4:	881a      	ldrh	r2, [r3, #0]
 8016ed6:	8bfb      	ldrh	r3, [r7, #30]
 8016ed8:	1ad3      	subs	r3, r2, r3
 8016eda:	b29a      	uxth	r2, r3
 8016edc:	4b08      	ldr	r3, [pc, #32]	; (8016f00 <ip_reass_free_complete_datagram+0x140>)
 8016ede:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016ee0:	8bfb      	ldrh	r3, [r7, #30]
}
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	3720      	adds	r7, #32
 8016ee6:	46bd      	mov	sp, r7
 8016ee8:	bd80      	pop	{r7, pc}
 8016eea:	bf00      	nop
 8016eec:	0801c900 	.word	0x0801c900
 8016ef0:	0801c93c 	.word	0x0801c93c
 8016ef4:	0801c948 	.word	0x0801c948
 8016ef8:	0801c970 	.word	0x0801c970
 8016efc:	0801c984 	.word	0x0801c984
 8016f00:	20010ee8 	.word	0x20010ee8
 8016f04:	0801c9a4 	.word	0x0801c9a4

08016f08 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016f08:	b580      	push	{r7, lr}
 8016f0a:	b08a      	sub	sp, #40	; 0x28
 8016f0c:	af00      	add	r7, sp, #0
 8016f0e:	6078      	str	r0, [r7, #4]
 8016f10:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016f12:	2300      	movs	r3, #0
 8016f14:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016f16:	2300      	movs	r3, #0
 8016f18:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016f1a:	2300      	movs	r3, #0
 8016f1c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016f1e:	2300      	movs	r3, #0
 8016f20:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016f22:	2300      	movs	r3, #0
 8016f24:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016f26:	4b28      	ldr	r3, [pc, #160]	; (8016fc8 <ip_reass_remove_oldest_datagram+0xc0>)
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016f2c:	e030      	b.n	8016f90 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f30:	695a      	ldr	r2, [r3, #20]
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	68db      	ldr	r3, [r3, #12]
 8016f36:	429a      	cmp	r2, r3
 8016f38:	d10c      	bne.n	8016f54 <ip_reass_remove_oldest_datagram+0x4c>
 8016f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f3c:	699a      	ldr	r2, [r3, #24]
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	691b      	ldr	r3, [r3, #16]
 8016f42:	429a      	cmp	r2, r3
 8016f44:	d106      	bne.n	8016f54 <ip_reass_remove_oldest_datagram+0x4c>
 8016f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f48:	899a      	ldrh	r2, [r3, #12]
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	889b      	ldrh	r3, [r3, #4]
 8016f4e:	b29b      	uxth	r3, r3
 8016f50:	429a      	cmp	r2, r3
 8016f52:	d014      	beq.n	8016f7e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016f54:	693b      	ldr	r3, [r7, #16]
 8016f56:	3301      	adds	r3, #1
 8016f58:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016f5a:	6a3b      	ldr	r3, [r7, #32]
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d104      	bne.n	8016f6a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f62:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016f64:	69fb      	ldr	r3, [r7, #28]
 8016f66:	61bb      	str	r3, [r7, #24]
 8016f68:	e009      	b.n	8016f7e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f6c:	7fda      	ldrb	r2, [r3, #31]
 8016f6e:	6a3b      	ldr	r3, [r7, #32]
 8016f70:	7fdb      	ldrb	r3, [r3, #31]
 8016f72:	429a      	cmp	r2, r3
 8016f74:	d803      	bhi.n	8016f7e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f78:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016f7a:	69fb      	ldr	r3, [r7, #28]
 8016f7c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d001      	beq.n	8016f8a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f88:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d1cb      	bne.n	8016f2e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016f96:	6a3b      	ldr	r3, [r7, #32]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d008      	beq.n	8016fae <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016f9c:	69b9      	ldr	r1, [r7, #24]
 8016f9e:	6a38      	ldr	r0, [r7, #32]
 8016fa0:	f7ff ff0e 	bl	8016dc0 <ip_reass_free_complete_datagram>
 8016fa4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016fa6:	697a      	ldr	r2, [r7, #20]
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	4413      	add	r3, r2
 8016fac:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016fae:	697a      	ldr	r2, [r7, #20]
 8016fb0:	683b      	ldr	r3, [r7, #0]
 8016fb2:	429a      	cmp	r2, r3
 8016fb4:	da02      	bge.n	8016fbc <ip_reass_remove_oldest_datagram+0xb4>
 8016fb6:	693b      	ldr	r3, [r7, #16]
 8016fb8:	2b01      	cmp	r3, #1
 8016fba:	dcac      	bgt.n	8016f16 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016fbc:	697b      	ldr	r3, [r7, #20]
}
 8016fbe:	4618      	mov	r0, r3
 8016fc0:	3728      	adds	r7, #40	; 0x28
 8016fc2:	46bd      	mov	sp, r7
 8016fc4:	bd80      	pop	{r7, pc}
 8016fc6:	bf00      	nop
 8016fc8:	20010ee4 	.word	0x20010ee4

08016fcc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016fcc:	b580      	push	{r7, lr}
 8016fce:	b084      	sub	sp, #16
 8016fd0:	af00      	add	r7, sp, #0
 8016fd2:	6078      	str	r0, [r7, #4]
 8016fd4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016fd6:	2004      	movs	r0, #4
 8016fd8:	f7f4 fb98 	bl	800b70c <memp_malloc>
 8016fdc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d110      	bne.n	8017006 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016fe4:	6839      	ldr	r1, [r7, #0]
 8016fe6:	6878      	ldr	r0, [r7, #4]
 8016fe8:	f7ff ff8e 	bl	8016f08 <ip_reass_remove_oldest_datagram>
 8016fec:	4602      	mov	r2, r0
 8016fee:	683b      	ldr	r3, [r7, #0]
 8016ff0:	4293      	cmp	r3, r2
 8016ff2:	dc03      	bgt.n	8016ffc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016ff4:	2004      	movs	r0, #4
 8016ff6:	f7f4 fb89 	bl	800b70c <memp_malloc>
 8016ffa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d101      	bne.n	8017006 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017002:	2300      	movs	r3, #0
 8017004:	e016      	b.n	8017034 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017006:	2220      	movs	r2, #32
 8017008:	2100      	movs	r1, #0
 801700a:	68f8      	ldr	r0, [r7, #12]
 801700c:	f001 f8f5 	bl	80181fa <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	220f      	movs	r2, #15
 8017014:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017016:	4b09      	ldr	r3, [pc, #36]	; (801703c <ip_reass_enqueue_new_datagram+0x70>)
 8017018:	681a      	ldr	r2, [r3, #0]
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801701e:	4a07      	ldr	r2, [pc, #28]	; (801703c <ip_reass_enqueue_new_datagram+0x70>)
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017024:	68fb      	ldr	r3, [r7, #12]
 8017026:	3308      	adds	r3, #8
 8017028:	2214      	movs	r2, #20
 801702a:	6879      	ldr	r1, [r7, #4]
 801702c:	4618      	mov	r0, r3
 801702e:	f001 f9cd 	bl	80183cc <memcpy>
  return ipr;
 8017032:	68fb      	ldr	r3, [r7, #12]
}
 8017034:	4618      	mov	r0, r3
 8017036:	3710      	adds	r7, #16
 8017038:	46bd      	mov	sp, r7
 801703a:	bd80      	pop	{r7, pc}
 801703c:	20010ee4 	.word	0x20010ee4

08017040 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017040:	b580      	push	{r7, lr}
 8017042:	b082      	sub	sp, #8
 8017044:	af00      	add	r7, sp, #0
 8017046:	6078      	str	r0, [r7, #4]
 8017048:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801704a:	4b10      	ldr	r3, [pc, #64]	; (801708c <ip_reass_dequeue_datagram+0x4c>)
 801704c:	681b      	ldr	r3, [r3, #0]
 801704e:	687a      	ldr	r2, [r7, #4]
 8017050:	429a      	cmp	r2, r3
 8017052:	d104      	bne.n	801705e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	4a0c      	ldr	r2, [pc, #48]	; (801708c <ip_reass_dequeue_datagram+0x4c>)
 801705a:	6013      	str	r3, [r2, #0]
 801705c:	e00d      	b.n	801707a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801705e:	683b      	ldr	r3, [r7, #0]
 8017060:	2b00      	cmp	r3, #0
 8017062:	d106      	bne.n	8017072 <ip_reass_dequeue_datagram+0x32>
 8017064:	4b0a      	ldr	r3, [pc, #40]	; (8017090 <ip_reass_dequeue_datagram+0x50>)
 8017066:	f240 1245 	movw	r2, #325	; 0x145
 801706a:	490a      	ldr	r1, [pc, #40]	; (8017094 <ip_reass_dequeue_datagram+0x54>)
 801706c:	480a      	ldr	r0, [pc, #40]	; (8017098 <ip_reass_dequeue_datagram+0x58>)
 801706e:	f001 f85f 	bl	8018130 <iprintf>
    prev->next = ipr->next;
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	681a      	ldr	r2, [r3, #0]
 8017076:	683b      	ldr	r3, [r7, #0]
 8017078:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801707a:	6879      	ldr	r1, [r7, #4]
 801707c:	2004      	movs	r0, #4
 801707e:	f7f4 fbbb 	bl	800b7f8 <memp_free>
}
 8017082:	bf00      	nop
 8017084:	3708      	adds	r7, #8
 8017086:	46bd      	mov	sp, r7
 8017088:	bd80      	pop	{r7, pc}
 801708a:	bf00      	nop
 801708c:	20010ee4 	.word	0x20010ee4
 8017090:	0801c900 	.word	0x0801c900
 8017094:	0801c9c8 	.word	0x0801c9c8
 8017098:	0801c948 	.word	0x0801c948

0801709c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801709c:	b580      	push	{r7, lr}
 801709e:	b08c      	sub	sp, #48	; 0x30
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	60f8      	str	r0, [r7, #12]
 80170a4:	60b9      	str	r1, [r7, #8]
 80170a6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80170a8:	2300      	movs	r3, #0
 80170aa:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80170ac:	2301      	movs	r3, #1
 80170ae:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80170b0:	68bb      	ldr	r3, [r7, #8]
 80170b2:	685b      	ldr	r3, [r3, #4]
 80170b4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80170b6:	69fb      	ldr	r3, [r7, #28]
 80170b8:	885b      	ldrh	r3, [r3, #2]
 80170ba:	b29b      	uxth	r3, r3
 80170bc:	4618      	mov	r0, r3
 80170be:	f7f3 fe17 	bl	800acf0 <lwip_htons>
 80170c2:	4603      	mov	r3, r0
 80170c4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80170c6:	69fb      	ldr	r3, [r7, #28]
 80170c8:	781b      	ldrb	r3, [r3, #0]
 80170ca:	f003 030f 	and.w	r3, r3, #15
 80170ce:	b2db      	uxtb	r3, r3
 80170d0:	009b      	lsls	r3, r3, #2
 80170d2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80170d4:	7e7b      	ldrb	r3, [r7, #25]
 80170d6:	b29b      	uxth	r3, r3
 80170d8:	8b7a      	ldrh	r2, [r7, #26]
 80170da:	429a      	cmp	r2, r3
 80170dc:	d202      	bcs.n	80170e4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80170de:	f04f 33ff 	mov.w	r3, #4294967295
 80170e2:	e135      	b.n	8017350 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80170e4:	7e7b      	ldrb	r3, [r7, #25]
 80170e6:	b29b      	uxth	r3, r3
 80170e8:	8b7a      	ldrh	r2, [r7, #26]
 80170ea:	1ad3      	subs	r3, r2, r3
 80170ec:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80170ee:	69fb      	ldr	r3, [r7, #28]
 80170f0:	88db      	ldrh	r3, [r3, #6]
 80170f2:	b29b      	uxth	r3, r3
 80170f4:	4618      	mov	r0, r3
 80170f6:	f7f3 fdfb 	bl	800acf0 <lwip_htons>
 80170fa:	4603      	mov	r3, r0
 80170fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017100:	b29b      	uxth	r3, r3
 8017102:	00db      	lsls	r3, r3, #3
 8017104:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017106:	68bb      	ldr	r3, [r7, #8]
 8017108:	685b      	ldr	r3, [r3, #4]
 801710a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801710c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801710e:	2200      	movs	r2, #0
 8017110:	701a      	strb	r2, [r3, #0]
 8017112:	2200      	movs	r2, #0
 8017114:	705a      	strb	r2, [r3, #1]
 8017116:	2200      	movs	r2, #0
 8017118:	709a      	strb	r2, [r3, #2]
 801711a:	2200      	movs	r2, #0
 801711c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801711e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017120:	8afa      	ldrh	r2, [r7, #22]
 8017122:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017124:	8afa      	ldrh	r2, [r7, #22]
 8017126:	8b7b      	ldrh	r3, [r7, #26]
 8017128:	4413      	add	r3, r2
 801712a:	b29a      	uxth	r2, r3
 801712c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801712e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017132:	88db      	ldrh	r3, [r3, #6]
 8017134:	b29b      	uxth	r3, r3
 8017136:	8afa      	ldrh	r2, [r7, #22]
 8017138:	429a      	cmp	r2, r3
 801713a:	d902      	bls.n	8017142 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801713c:	f04f 33ff 	mov.w	r3, #4294967295
 8017140:	e106      	b.n	8017350 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017142:	68fb      	ldr	r3, [r7, #12]
 8017144:	685b      	ldr	r3, [r3, #4]
 8017146:	627b      	str	r3, [r7, #36]	; 0x24
 8017148:	e068      	b.n	801721c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801714a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801714c:	685b      	ldr	r3, [r3, #4]
 801714e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017152:	889b      	ldrh	r3, [r3, #4]
 8017154:	b29a      	uxth	r2, r3
 8017156:	693b      	ldr	r3, [r7, #16]
 8017158:	889b      	ldrh	r3, [r3, #4]
 801715a:	b29b      	uxth	r3, r3
 801715c:	429a      	cmp	r2, r3
 801715e:	d235      	bcs.n	80171cc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017164:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017168:	2b00      	cmp	r3, #0
 801716a:	d020      	beq.n	80171ae <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801716c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801716e:	889b      	ldrh	r3, [r3, #4]
 8017170:	b29a      	uxth	r2, r3
 8017172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017174:	88db      	ldrh	r3, [r3, #6]
 8017176:	b29b      	uxth	r3, r3
 8017178:	429a      	cmp	r2, r3
 801717a:	d307      	bcc.n	801718c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801717c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801717e:	88db      	ldrh	r3, [r3, #6]
 8017180:	b29a      	uxth	r2, r3
 8017182:	693b      	ldr	r3, [r7, #16]
 8017184:	889b      	ldrh	r3, [r3, #4]
 8017186:	b29b      	uxth	r3, r3
 8017188:	429a      	cmp	r2, r3
 801718a:	d902      	bls.n	8017192 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801718c:	f04f 33ff 	mov.w	r3, #4294967295
 8017190:	e0de      	b.n	8017350 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017194:	68ba      	ldr	r2, [r7, #8]
 8017196:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801719a:	88db      	ldrh	r3, [r3, #6]
 801719c:	b29a      	uxth	r2, r3
 801719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171a0:	889b      	ldrh	r3, [r3, #4]
 80171a2:	b29b      	uxth	r3, r3
 80171a4:	429a      	cmp	r2, r3
 80171a6:	d03d      	beq.n	8017224 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80171a8:	2300      	movs	r3, #0
 80171aa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80171ac:	e03a      	b.n	8017224 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80171ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171b0:	88db      	ldrh	r3, [r3, #6]
 80171b2:	b29a      	uxth	r2, r3
 80171b4:	693b      	ldr	r3, [r7, #16]
 80171b6:	889b      	ldrh	r3, [r3, #4]
 80171b8:	b29b      	uxth	r3, r3
 80171ba:	429a      	cmp	r2, r3
 80171bc:	d902      	bls.n	80171c4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80171be:	f04f 33ff 	mov.w	r3, #4294967295
 80171c2:	e0c5      	b.n	8017350 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	68ba      	ldr	r2, [r7, #8]
 80171c8:	605a      	str	r2, [r3, #4]
      break;
 80171ca:	e02b      	b.n	8017224 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80171cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ce:	889b      	ldrh	r3, [r3, #4]
 80171d0:	b29a      	uxth	r2, r3
 80171d2:	693b      	ldr	r3, [r7, #16]
 80171d4:	889b      	ldrh	r3, [r3, #4]
 80171d6:	b29b      	uxth	r3, r3
 80171d8:	429a      	cmp	r2, r3
 80171da:	d102      	bne.n	80171e2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80171dc:	f04f 33ff 	mov.w	r3, #4294967295
 80171e0:	e0b6      	b.n	8017350 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80171e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171e4:	889b      	ldrh	r3, [r3, #4]
 80171e6:	b29a      	uxth	r2, r3
 80171e8:	693b      	ldr	r3, [r7, #16]
 80171ea:	88db      	ldrh	r3, [r3, #6]
 80171ec:	b29b      	uxth	r3, r3
 80171ee:	429a      	cmp	r2, r3
 80171f0:	d202      	bcs.n	80171f8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80171f2:	f04f 33ff 	mov.w	r3, #4294967295
 80171f6:	e0ab      	b.n	8017350 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80171f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d009      	beq.n	8017212 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80171fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017200:	88db      	ldrh	r3, [r3, #6]
 8017202:	b29a      	uxth	r2, r3
 8017204:	693b      	ldr	r3, [r7, #16]
 8017206:	889b      	ldrh	r3, [r3, #4]
 8017208:	b29b      	uxth	r3, r3
 801720a:	429a      	cmp	r2, r3
 801720c:	d001      	beq.n	8017212 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801720e:	2300      	movs	r3, #0
 8017210:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017212:	693b      	ldr	r3, [r7, #16]
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017218:	693b      	ldr	r3, [r7, #16]
 801721a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801721e:	2b00      	cmp	r3, #0
 8017220:	d193      	bne.n	801714a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017222:	e000      	b.n	8017226 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017224:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017228:	2b00      	cmp	r3, #0
 801722a:	d12d      	bne.n	8017288 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801722c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801722e:	2b00      	cmp	r3, #0
 8017230:	d01c      	beq.n	801726c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017234:	88db      	ldrh	r3, [r3, #6]
 8017236:	b29a      	uxth	r2, r3
 8017238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801723a:	889b      	ldrh	r3, [r3, #4]
 801723c:	b29b      	uxth	r3, r3
 801723e:	429a      	cmp	r2, r3
 8017240:	d906      	bls.n	8017250 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017242:	4b45      	ldr	r3, [pc, #276]	; (8017358 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017244:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017248:	4944      	ldr	r1, [pc, #272]	; (801735c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801724a:	4845      	ldr	r0, [pc, #276]	; (8017360 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801724c:	f000 ff70 	bl	8018130 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017252:	68ba      	ldr	r2, [r7, #8]
 8017254:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017258:	88db      	ldrh	r3, [r3, #6]
 801725a:	b29a      	uxth	r2, r3
 801725c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801725e:	889b      	ldrh	r3, [r3, #4]
 8017260:	b29b      	uxth	r3, r3
 8017262:	429a      	cmp	r2, r3
 8017264:	d010      	beq.n	8017288 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017266:	2300      	movs	r3, #0
 8017268:	623b      	str	r3, [r7, #32]
 801726a:	e00d      	b.n	8017288 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801726c:	68fb      	ldr	r3, [r7, #12]
 801726e:	685b      	ldr	r3, [r3, #4]
 8017270:	2b00      	cmp	r3, #0
 8017272:	d006      	beq.n	8017282 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017274:	4b38      	ldr	r3, [pc, #224]	; (8017358 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017276:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801727a:	493a      	ldr	r1, [pc, #232]	; (8017364 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801727c:	4838      	ldr	r0, [pc, #224]	; (8017360 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801727e:	f000 ff57 	bl	8018130 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017282:	68fb      	ldr	r3, [r7, #12]
 8017284:	68ba      	ldr	r2, [r7, #8]
 8017286:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	2b00      	cmp	r3, #0
 801728c:	d105      	bne.n	801729a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	7f9b      	ldrb	r3, [r3, #30]
 8017292:	f003 0301 	and.w	r3, r3, #1
 8017296:	2b00      	cmp	r3, #0
 8017298:	d059      	beq.n	801734e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801729a:	6a3b      	ldr	r3, [r7, #32]
 801729c:	2b00      	cmp	r3, #0
 801729e:	d04f      	beq.n	8017340 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	685b      	ldr	r3, [r3, #4]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d006      	beq.n	80172b6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80172a8:	68fb      	ldr	r3, [r7, #12]
 80172aa:	685b      	ldr	r3, [r3, #4]
 80172ac:	685b      	ldr	r3, [r3, #4]
 80172ae:	889b      	ldrh	r3, [r3, #4]
 80172b0:	b29b      	uxth	r3, r3
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d002      	beq.n	80172bc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80172b6:	2300      	movs	r3, #0
 80172b8:	623b      	str	r3, [r7, #32]
 80172ba:	e041      	b.n	8017340 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80172bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172be:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80172c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80172c6:	e012      	b.n	80172ee <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80172c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172ca:	685b      	ldr	r3, [r3, #4]
 80172cc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80172ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172d0:	88db      	ldrh	r3, [r3, #6]
 80172d2:	b29a      	uxth	r2, r3
 80172d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172d6:	889b      	ldrh	r3, [r3, #4]
 80172d8:	b29b      	uxth	r3, r3
 80172da:	429a      	cmp	r2, r3
 80172dc:	d002      	beq.n	80172e4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80172de:	2300      	movs	r3, #0
 80172e0:	623b      	str	r3, [r7, #32]
            break;
 80172e2:	e007      	b.n	80172f4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80172e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172e6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80172e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172ea:	681b      	ldr	r3, [r3, #0]
 80172ec:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80172ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d1e9      	bne.n	80172c8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80172f4:	6a3b      	ldr	r3, [r7, #32]
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d022      	beq.n	8017340 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80172fa:	68fb      	ldr	r3, [r7, #12]
 80172fc:	685b      	ldr	r3, [r3, #4]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d106      	bne.n	8017310 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017302:	4b15      	ldr	r3, [pc, #84]	; (8017358 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017304:	f240 12df 	movw	r2, #479	; 0x1df
 8017308:	4917      	ldr	r1, [pc, #92]	; (8017368 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801730a:	4815      	ldr	r0, [pc, #84]	; (8017360 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801730c:	f000 ff10 	bl	8018130 <iprintf>
          LWIP_ASSERT("sanity check",
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	685b      	ldr	r3, [r3, #4]
 8017314:	685b      	ldr	r3, [r3, #4]
 8017316:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017318:	429a      	cmp	r2, r3
 801731a:	d106      	bne.n	801732a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801731c:	4b0e      	ldr	r3, [pc, #56]	; (8017358 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801731e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017322:	4911      	ldr	r1, [pc, #68]	; (8017368 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017324:	480e      	ldr	r0, [pc, #56]	; (8017360 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017326:	f000 ff03 	bl	8018130 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801732a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	2b00      	cmp	r3, #0
 8017330:	d006      	beq.n	8017340 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017332:	4b09      	ldr	r3, [pc, #36]	; (8017358 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017334:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8017338:	490c      	ldr	r1, [pc, #48]	; (801736c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801733a:	4809      	ldr	r0, [pc, #36]	; (8017360 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801733c:	f000 fef8 	bl	8018130 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017340:	6a3b      	ldr	r3, [r7, #32]
 8017342:	2b00      	cmp	r3, #0
 8017344:	bf14      	ite	ne
 8017346:	2301      	movne	r3, #1
 8017348:	2300      	moveq	r3, #0
 801734a:	b2db      	uxtb	r3, r3
 801734c:	e000      	b.n	8017350 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801734e:	2300      	movs	r3, #0
}
 8017350:	4618      	mov	r0, r3
 8017352:	3730      	adds	r7, #48	; 0x30
 8017354:	46bd      	mov	sp, r7
 8017356:	bd80      	pop	{r7, pc}
 8017358:	0801c900 	.word	0x0801c900
 801735c:	0801c9e4 	.word	0x0801c9e4
 8017360:	0801c948 	.word	0x0801c948
 8017364:	0801ca04 	.word	0x0801ca04
 8017368:	0801ca3c 	.word	0x0801ca3c
 801736c:	0801ca4c 	.word	0x0801ca4c

08017370 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017370:	b580      	push	{r7, lr}
 8017372:	b08e      	sub	sp, #56	; 0x38
 8017374:	af00      	add	r7, sp, #0
 8017376:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	685b      	ldr	r3, [r3, #4]
 801737c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801737e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017380:	781b      	ldrb	r3, [r3, #0]
 8017382:	f003 030f 	and.w	r3, r3, #15
 8017386:	b2db      	uxtb	r3, r3
 8017388:	009b      	lsls	r3, r3, #2
 801738a:	b2db      	uxtb	r3, r3
 801738c:	2b14      	cmp	r3, #20
 801738e:	f040 8171 	bne.w	8017674 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017394:	88db      	ldrh	r3, [r3, #6]
 8017396:	b29b      	uxth	r3, r3
 8017398:	4618      	mov	r0, r3
 801739a:	f7f3 fca9 	bl	800acf0 <lwip_htons>
 801739e:	4603      	mov	r3, r0
 80173a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80173a4:	b29b      	uxth	r3, r3
 80173a6:	00db      	lsls	r3, r3, #3
 80173a8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80173aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173ac:	885b      	ldrh	r3, [r3, #2]
 80173ae:	b29b      	uxth	r3, r3
 80173b0:	4618      	mov	r0, r3
 80173b2:	f7f3 fc9d 	bl	800acf0 <lwip_htons>
 80173b6:	4603      	mov	r3, r0
 80173b8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80173ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173bc:	781b      	ldrb	r3, [r3, #0]
 80173be:	f003 030f 	and.w	r3, r3, #15
 80173c2:	b2db      	uxtb	r3, r3
 80173c4:	009b      	lsls	r3, r3, #2
 80173c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80173ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80173ce:	b29b      	uxth	r3, r3
 80173d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80173d2:	429a      	cmp	r2, r3
 80173d4:	f0c0 8150 	bcc.w	8017678 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80173d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80173dc:	b29b      	uxth	r3, r3
 80173de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80173e0:	1ad3      	subs	r3, r2, r3
 80173e2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80173e4:	6878      	ldr	r0, [r7, #4]
 80173e6:	f7f5 f945 	bl	800c674 <pbuf_clen>
 80173ea:	4603      	mov	r3, r0
 80173ec:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80173ee:	4b8c      	ldr	r3, [pc, #560]	; (8017620 <ip4_reass+0x2b0>)
 80173f0:	881b      	ldrh	r3, [r3, #0]
 80173f2:	461a      	mov	r2, r3
 80173f4:	8c3b      	ldrh	r3, [r7, #32]
 80173f6:	4413      	add	r3, r2
 80173f8:	2b0a      	cmp	r3, #10
 80173fa:	dd10      	ble.n	801741e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80173fc:	8c3b      	ldrh	r3, [r7, #32]
 80173fe:	4619      	mov	r1, r3
 8017400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017402:	f7ff fd81 	bl	8016f08 <ip_reass_remove_oldest_datagram>
 8017406:	4603      	mov	r3, r0
 8017408:	2b00      	cmp	r3, #0
 801740a:	f000 8137 	beq.w	801767c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801740e:	4b84      	ldr	r3, [pc, #528]	; (8017620 <ip4_reass+0x2b0>)
 8017410:	881b      	ldrh	r3, [r3, #0]
 8017412:	461a      	mov	r2, r3
 8017414:	8c3b      	ldrh	r3, [r7, #32]
 8017416:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017418:	2b0a      	cmp	r3, #10
 801741a:	f300 812f 	bgt.w	801767c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801741e:	4b81      	ldr	r3, [pc, #516]	; (8017624 <ip4_reass+0x2b4>)
 8017420:	681b      	ldr	r3, [r3, #0]
 8017422:	633b      	str	r3, [r7, #48]	; 0x30
 8017424:	e015      	b.n	8017452 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017428:	695a      	ldr	r2, [r3, #20]
 801742a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801742c:	68db      	ldr	r3, [r3, #12]
 801742e:	429a      	cmp	r2, r3
 8017430:	d10c      	bne.n	801744c <ip4_reass+0xdc>
 8017432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017434:	699a      	ldr	r2, [r3, #24]
 8017436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017438:	691b      	ldr	r3, [r3, #16]
 801743a:	429a      	cmp	r2, r3
 801743c:	d106      	bne.n	801744c <ip4_reass+0xdc>
 801743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017440:	899a      	ldrh	r2, [r3, #12]
 8017442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017444:	889b      	ldrh	r3, [r3, #4]
 8017446:	b29b      	uxth	r3, r3
 8017448:	429a      	cmp	r2, r3
 801744a:	d006      	beq.n	801745a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801744c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	633b      	str	r3, [r7, #48]	; 0x30
 8017452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017454:	2b00      	cmp	r3, #0
 8017456:	d1e6      	bne.n	8017426 <ip4_reass+0xb6>
 8017458:	e000      	b.n	801745c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801745a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801745c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801745e:	2b00      	cmp	r3, #0
 8017460:	d109      	bne.n	8017476 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017462:	8c3b      	ldrh	r3, [r7, #32]
 8017464:	4619      	mov	r1, r3
 8017466:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017468:	f7ff fdb0 	bl	8016fcc <ip_reass_enqueue_new_datagram>
 801746c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017470:	2b00      	cmp	r3, #0
 8017472:	d11c      	bne.n	80174ae <ip4_reass+0x13e>
      goto nullreturn;
 8017474:	e105      	b.n	8017682 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017478:	88db      	ldrh	r3, [r3, #6]
 801747a:	b29b      	uxth	r3, r3
 801747c:	4618      	mov	r0, r3
 801747e:	f7f3 fc37 	bl	800acf0 <lwip_htons>
 8017482:	4603      	mov	r3, r0
 8017484:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017488:	2b00      	cmp	r3, #0
 801748a:	d110      	bne.n	80174ae <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801748c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801748e:	89db      	ldrh	r3, [r3, #14]
 8017490:	4618      	mov	r0, r3
 8017492:	f7f3 fc2d 	bl	800acf0 <lwip_htons>
 8017496:	4603      	mov	r3, r0
 8017498:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801749c:	2b00      	cmp	r3, #0
 801749e:	d006      	beq.n	80174ae <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80174a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174a2:	3308      	adds	r3, #8
 80174a4:	2214      	movs	r2, #20
 80174a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80174a8:	4618      	mov	r0, r3
 80174aa:	f000 ff8f 	bl	80183cc <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80174ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174b0:	88db      	ldrh	r3, [r3, #6]
 80174b2:	b29b      	uxth	r3, r3
 80174b4:	f003 0320 	and.w	r3, r3, #32
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	bf0c      	ite	eq
 80174bc:	2301      	moveq	r3, #1
 80174be:	2300      	movne	r3, #0
 80174c0:	b2db      	uxtb	r3, r3
 80174c2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80174c4:	69fb      	ldr	r3, [r7, #28]
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d00e      	beq.n	80174e8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80174ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80174cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80174ce:	4413      	add	r3, r2
 80174d0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80174d2:	8b7a      	ldrh	r2, [r7, #26]
 80174d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80174d6:	429a      	cmp	r2, r3
 80174d8:	f0c0 80a0 	bcc.w	801761c <ip4_reass+0x2ac>
 80174dc:	8b7b      	ldrh	r3, [r7, #26]
 80174de:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80174e2:	4293      	cmp	r3, r2
 80174e4:	f200 809a 	bhi.w	801761c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80174e8:	69fa      	ldr	r2, [r7, #28]
 80174ea:	6879      	ldr	r1, [r7, #4]
 80174ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80174ee:	f7ff fdd5 	bl	801709c <ip_reass_chain_frag_into_datagram_and_validate>
 80174f2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80174f4:	697b      	ldr	r3, [r7, #20]
 80174f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80174fa:	f000 809b 	beq.w	8017634 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80174fe:	4b48      	ldr	r3, [pc, #288]	; (8017620 <ip4_reass+0x2b0>)
 8017500:	881a      	ldrh	r2, [r3, #0]
 8017502:	8c3b      	ldrh	r3, [r7, #32]
 8017504:	4413      	add	r3, r2
 8017506:	b29a      	uxth	r2, r3
 8017508:	4b45      	ldr	r3, [pc, #276]	; (8017620 <ip4_reass+0x2b0>)
 801750a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801750c:	69fb      	ldr	r3, [r7, #28]
 801750e:	2b00      	cmp	r3, #0
 8017510:	d00d      	beq.n	801752e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017512:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017514:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017516:	4413      	add	r3, r2
 8017518:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801751a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801751c:	8a7a      	ldrh	r2, [r7, #18]
 801751e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017522:	7f9b      	ldrb	r3, [r3, #30]
 8017524:	f043 0301 	orr.w	r3, r3, #1
 8017528:	b2da      	uxtb	r2, r3
 801752a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801752c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801752e:	697b      	ldr	r3, [r7, #20]
 8017530:	2b01      	cmp	r3, #1
 8017532:	d171      	bne.n	8017618 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017536:	8b9b      	ldrh	r3, [r3, #28]
 8017538:	3314      	adds	r3, #20
 801753a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801753c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801753e:	685b      	ldr	r3, [r3, #4]
 8017540:	685b      	ldr	r3, [r3, #4]
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017548:	685b      	ldr	r3, [r3, #4]
 801754a:	685b      	ldr	r3, [r3, #4]
 801754c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801754e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017550:	3308      	adds	r3, #8
 8017552:	2214      	movs	r2, #20
 8017554:	4619      	mov	r1, r3
 8017556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017558:	f000 ff38 	bl	80183cc <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801755c:	8a3b      	ldrh	r3, [r7, #16]
 801755e:	4618      	mov	r0, r3
 8017560:	f7f3 fbc6 	bl	800acf0 <lwip_htons>
 8017564:	4603      	mov	r3, r0
 8017566:	461a      	mov	r2, r3
 8017568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801756a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801756c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801756e:	2200      	movs	r2, #0
 8017570:	719a      	strb	r2, [r3, #6]
 8017572:	2200      	movs	r2, #0
 8017574:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017578:	2200      	movs	r2, #0
 801757a:	729a      	strb	r2, [r3, #10]
 801757c:	2200      	movs	r2, #0
 801757e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017582:	685b      	ldr	r3, [r3, #4]
 8017584:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017586:	e00d      	b.n	80175a4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801758a:	685b      	ldr	r3, [r3, #4]
 801758c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801758e:	2114      	movs	r1, #20
 8017590:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017592:	f7f4 ff5b 	bl	800c44c <pbuf_remove_header>
      pbuf_cat(p, r);
 8017596:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017598:	6878      	ldr	r0, [r7, #4]
 801759a:	f7f5 f8ab 	bl	800c6f4 <pbuf_cat>
      r = iprh->next_pbuf;
 801759e:	68fb      	ldr	r3, [r7, #12]
 80175a0:	681b      	ldr	r3, [r3, #0]
 80175a2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80175a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d1ee      	bne.n	8017588 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80175aa:	4b1e      	ldr	r3, [pc, #120]	; (8017624 <ip4_reass+0x2b4>)
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80175b0:	429a      	cmp	r2, r3
 80175b2:	d102      	bne.n	80175ba <ip4_reass+0x24a>
      ipr_prev = NULL;
 80175b4:	2300      	movs	r3, #0
 80175b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80175b8:	e010      	b.n	80175dc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80175ba:	4b1a      	ldr	r3, [pc, #104]	; (8017624 <ip4_reass+0x2b4>)
 80175bc:	681b      	ldr	r3, [r3, #0]
 80175be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80175c0:	e007      	b.n	80175d2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80175c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175c4:	681b      	ldr	r3, [r3, #0]
 80175c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80175c8:	429a      	cmp	r2, r3
 80175ca:	d006      	beq.n	80175da <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80175cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175ce:	681b      	ldr	r3, [r3, #0]
 80175d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80175d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d1f4      	bne.n	80175c2 <ip4_reass+0x252>
 80175d8:	e000      	b.n	80175dc <ip4_reass+0x26c>
          break;
 80175da:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80175dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80175de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80175e0:	f7ff fd2e 	bl	8017040 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80175e4:	6878      	ldr	r0, [r7, #4]
 80175e6:	f7f5 f845 	bl	800c674 <pbuf_clen>
 80175ea:	4603      	mov	r3, r0
 80175ec:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80175ee:	4b0c      	ldr	r3, [pc, #48]	; (8017620 <ip4_reass+0x2b0>)
 80175f0:	881b      	ldrh	r3, [r3, #0]
 80175f2:	8c3a      	ldrh	r2, [r7, #32]
 80175f4:	429a      	cmp	r2, r3
 80175f6:	d906      	bls.n	8017606 <ip4_reass+0x296>
 80175f8:	4b0b      	ldr	r3, [pc, #44]	; (8017628 <ip4_reass+0x2b8>)
 80175fa:	f240 229b 	movw	r2, #667	; 0x29b
 80175fe:	490b      	ldr	r1, [pc, #44]	; (801762c <ip4_reass+0x2bc>)
 8017600:	480b      	ldr	r0, [pc, #44]	; (8017630 <ip4_reass+0x2c0>)
 8017602:	f000 fd95 	bl	8018130 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017606:	4b06      	ldr	r3, [pc, #24]	; (8017620 <ip4_reass+0x2b0>)
 8017608:	881a      	ldrh	r2, [r3, #0]
 801760a:	8c3b      	ldrh	r3, [r7, #32]
 801760c:	1ad3      	subs	r3, r2, r3
 801760e:	b29a      	uxth	r2, r3
 8017610:	4b03      	ldr	r3, [pc, #12]	; (8017620 <ip4_reass+0x2b0>)
 8017612:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	e038      	b.n	801768a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017618:	2300      	movs	r3, #0
 801761a:	e036      	b.n	801768a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801761c:	bf00      	nop
 801761e:	e00a      	b.n	8017636 <ip4_reass+0x2c6>
 8017620:	20010ee8 	.word	0x20010ee8
 8017624:	20010ee4 	.word	0x20010ee4
 8017628:	0801c900 	.word	0x0801c900
 801762c:	0801ca70 	.word	0x0801ca70
 8017630:	0801c948 	.word	0x0801c948
    goto nullreturn_ipr;
 8017634:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8017636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017638:	2b00      	cmp	r3, #0
 801763a:	d106      	bne.n	801764a <ip4_reass+0x2da>
 801763c:	4b15      	ldr	r3, [pc, #84]	; (8017694 <ip4_reass+0x324>)
 801763e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8017642:	4915      	ldr	r1, [pc, #84]	; (8017698 <ip4_reass+0x328>)
 8017644:	4815      	ldr	r0, [pc, #84]	; (801769c <ip4_reass+0x32c>)
 8017646:	f000 fd73 	bl	8018130 <iprintf>
  if (ipr->p == NULL) {
 801764a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801764c:	685b      	ldr	r3, [r3, #4]
 801764e:	2b00      	cmp	r3, #0
 8017650:	d116      	bne.n	8017680 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8017652:	4b13      	ldr	r3, [pc, #76]	; (80176a0 <ip4_reass+0x330>)
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017658:	429a      	cmp	r2, r3
 801765a:	d006      	beq.n	801766a <ip4_reass+0x2fa>
 801765c:	4b0d      	ldr	r3, [pc, #52]	; (8017694 <ip4_reass+0x324>)
 801765e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017662:	4910      	ldr	r1, [pc, #64]	; (80176a4 <ip4_reass+0x334>)
 8017664:	480d      	ldr	r0, [pc, #52]	; (801769c <ip4_reass+0x32c>)
 8017666:	f000 fd63 	bl	8018130 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801766a:	2100      	movs	r1, #0
 801766c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801766e:	f7ff fce7 	bl	8017040 <ip_reass_dequeue_datagram>
 8017672:	e006      	b.n	8017682 <ip4_reass+0x312>
    goto nullreturn;
 8017674:	bf00      	nop
 8017676:	e004      	b.n	8017682 <ip4_reass+0x312>
    goto nullreturn;
 8017678:	bf00      	nop
 801767a:	e002      	b.n	8017682 <ip4_reass+0x312>
      goto nullreturn;
 801767c:	bf00      	nop
 801767e:	e000      	b.n	8017682 <ip4_reass+0x312>
  }

nullreturn:
 8017680:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017682:	6878      	ldr	r0, [r7, #4]
 8017684:	f7f4 ff68 	bl	800c558 <pbuf_free>
  return NULL;
 8017688:	2300      	movs	r3, #0
}
 801768a:	4618      	mov	r0, r3
 801768c:	3738      	adds	r7, #56	; 0x38
 801768e:	46bd      	mov	sp, r7
 8017690:	bd80      	pop	{r7, pc}
 8017692:	bf00      	nop
 8017694:	0801c900 	.word	0x0801c900
 8017698:	0801ca8c 	.word	0x0801ca8c
 801769c:	0801c948 	.word	0x0801c948
 80176a0:	20010ee4 	.word	0x20010ee4
 80176a4:	0801ca98 	.word	0x0801ca98

080176a8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80176a8:	b580      	push	{r7, lr}
 80176aa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80176ac:	2005      	movs	r0, #5
 80176ae:	f7f4 f82d 	bl	800b70c <memp_malloc>
 80176b2:	4603      	mov	r3, r0
}
 80176b4:	4618      	mov	r0, r3
 80176b6:	bd80      	pop	{r7, pc}

080176b8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80176b8:	b580      	push	{r7, lr}
 80176ba:	b082      	sub	sp, #8
 80176bc:	af00      	add	r7, sp, #0
 80176be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d106      	bne.n	80176d4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80176c6:	4b07      	ldr	r3, [pc, #28]	; (80176e4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80176c8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80176cc:	4906      	ldr	r1, [pc, #24]	; (80176e8 <ip_frag_free_pbuf_custom_ref+0x30>)
 80176ce:	4807      	ldr	r0, [pc, #28]	; (80176ec <ip_frag_free_pbuf_custom_ref+0x34>)
 80176d0:	f000 fd2e 	bl	8018130 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80176d4:	6879      	ldr	r1, [r7, #4]
 80176d6:	2005      	movs	r0, #5
 80176d8:	f7f4 f88e 	bl	800b7f8 <memp_free>
}
 80176dc:	bf00      	nop
 80176de:	3708      	adds	r7, #8
 80176e0:	46bd      	mov	sp, r7
 80176e2:	bd80      	pop	{r7, pc}
 80176e4:	0801c900 	.word	0x0801c900
 80176e8:	0801cab8 	.word	0x0801cab8
 80176ec:	0801c948 	.word	0x0801c948

080176f0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80176f0:	b580      	push	{r7, lr}
 80176f2:	b084      	sub	sp, #16
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d106      	bne.n	8017710 <ipfrag_free_pbuf_custom+0x20>
 8017702:	4b11      	ldr	r3, [pc, #68]	; (8017748 <ipfrag_free_pbuf_custom+0x58>)
 8017704:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017708:	4910      	ldr	r1, [pc, #64]	; (801774c <ipfrag_free_pbuf_custom+0x5c>)
 801770a:	4811      	ldr	r0, [pc, #68]	; (8017750 <ipfrag_free_pbuf_custom+0x60>)
 801770c:	f000 fd10 	bl	8018130 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017710:	68fa      	ldr	r2, [r7, #12]
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	429a      	cmp	r2, r3
 8017716:	d006      	beq.n	8017726 <ipfrag_free_pbuf_custom+0x36>
 8017718:	4b0b      	ldr	r3, [pc, #44]	; (8017748 <ipfrag_free_pbuf_custom+0x58>)
 801771a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801771e:	490d      	ldr	r1, [pc, #52]	; (8017754 <ipfrag_free_pbuf_custom+0x64>)
 8017720:	480b      	ldr	r0, [pc, #44]	; (8017750 <ipfrag_free_pbuf_custom+0x60>)
 8017722:	f000 fd05 	bl	8018130 <iprintf>
  if (pcr->original != NULL) {
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	695b      	ldr	r3, [r3, #20]
 801772a:	2b00      	cmp	r3, #0
 801772c:	d004      	beq.n	8017738 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	695b      	ldr	r3, [r3, #20]
 8017732:	4618      	mov	r0, r3
 8017734:	f7f4 ff10 	bl	800c558 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017738:	68f8      	ldr	r0, [r7, #12]
 801773a:	f7ff ffbd 	bl	80176b8 <ip_frag_free_pbuf_custom_ref>
}
 801773e:	bf00      	nop
 8017740:	3710      	adds	r7, #16
 8017742:	46bd      	mov	sp, r7
 8017744:	bd80      	pop	{r7, pc}
 8017746:	bf00      	nop
 8017748:	0801c900 	.word	0x0801c900
 801774c:	0801cac4 	.word	0x0801cac4
 8017750:	0801c948 	.word	0x0801c948
 8017754:	0801cad0 	.word	0x0801cad0

08017758 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017758:	b580      	push	{r7, lr}
 801775a:	b094      	sub	sp, #80	; 0x50
 801775c:	af02      	add	r7, sp, #8
 801775e:	60f8      	str	r0, [r7, #12]
 8017760:	60b9      	str	r1, [r7, #8]
 8017762:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017764:	2300      	movs	r3, #0
 8017766:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801776a:	68bb      	ldr	r3, [r7, #8]
 801776c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801776e:	3b14      	subs	r3, #20
 8017770:	2b00      	cmp	r3, #0
 8017772:	da00      	bge.n	8017776 <ip4_frag+0x1e>
 8017774:	3307      	adds	r3, #7
 8017776:	10db      	asrs	r3, r3, #3
 8017778:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801777a:	2314      	movs	r3, #20
 801777c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801777e:	68fb      	ldr	r3, [r7, #12]
 8017780:	685b      	ldr	r3, [r3, #4]
 8017782:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017786:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801778a:	781b      	ldrb	r3, [r3, #0]
 801778c:	f003 030f 	and.w	r3, r3, #15
 8017790:	b2db      	uxtb	r3, r3
 8017792:	009b      	lsls	r3, r3, #2
 8017794:	b2db      	uxtb	r3, r3
 8017796:	2b14      	cmp	r3, #20
 8017798:	d002      	beq.n	80177a0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801779a:	f06f 0305 	mvn.w	r3, #5
 801779e:	e110      	b.n	80179c2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	895b      	ldrh	r3, [r3, #10]
 80177a4:	2b13      	cmp	r3, #19
 80177a6:	d809      	bhi.n	80177bc <ip4_frag+0x64>
 80177a8:	4b88      	ldr	r3, [pc, #544]	; (80179cc <ip4_frag+0x274>)
 80177aa:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80177ae:	4988      	ldr	r1, [pc, #544]	; (80179d0 <ip4_frag+0x278>)
 80177b0:	4888      	ldr	r0, [pc, #544]	; (80179d4 <ip4_frag+0x27c>)
 80177b2:	f000 fcbd 	bl	8018130 <iprintf>
 80177b6:	f06f 0305 	mvn.w	r3, #5
 80177ba:	e102      	b.n	80179c2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80177bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177be:	88db      	ldrh	r3, [r3, #6]
 80177c0:	b29b      	uxth	r3, r3
 80177c2:	4618      	mov	r0, r3
 80177c4:	f7f3 fa94 	bl	800acf0 <lwip_htons>
 80177c8:	4603      	mov	r3, r0
 80177ca:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80177cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80177ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80177d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80177d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80177d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80177dc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80177de:	68fb      	ldr	r3, [r7, #12]
 80177e0:	891b      	ldrh	r3, [r3, #8]
 80177e2:	3b14      	subs	r3, #20
 80177e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80177e8:	e0e1      	b.n	80179ae <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80177ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80177ec:	00db      	lsls	r3, r3, #3
 80177ee:	b29b      	uxth	r3, r3
 80177f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80177f4:	4293      	cmp	r3, r2
 80177f6:	bf28      	it	cs
 80177f8:	4613      	movcs	r3, r2
 80177fa:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80177fc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017800:	2114      	movs	r1, #20
 8017802:	200e      	movs	r0, #14
 8017804:	f7f4 fbc4 	bl	800bf90 <pbuf_alloc>
 8017808:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801780c:	2b00      	cmp	r3, #0
 801780e:	f000 80d5 	beq.w	80179bc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017814:	895b      	ldrh	r3, [r3, #10]
 8017816:	2b13      	cmp	r3, #19
 8017818:	d806      	bhi.n	8017828 <ip4_frag+0xd0>
 801781a:	4b6c      	ldr	r3, [pc, #432]	; (80179cc <ip4_frag+0x274>)
 801781c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017820:	496d      	ldr	r1, [pc, #436]	; (80179d8 <ip4_frag+0x280>)
 8017822:	486c      	ldr	r0, [pc, #432]	; (80179d4 <ip4_frag+0x27c>)
 8017824:	f000 fc84 	bl	8018130 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801782a:	685b      	ldr	r3, [r3, #4]
 801782c:	2214      	movs	r2, #20
 801782e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017830:	4618      	mov	r0, r3
 8017832:	f000 fdcb 	bl	80183cc <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017838:	685b      	ldr	r3, [r3, #4]
 801783a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801783c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801783e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017842:	e064      	b.n	801790e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017844:	68fb      	ldr	r3, [r7, #12]
 8017846:	895a      	ldrh	r2, [r3, #10]
 8017848:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801784a:	1ad3      	subs	r3, r2, r3
 801784c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801784e:	68fb      	ldr	r3, [r7, #12]
 8017850:	895b      	ldrh	r3, [r3, #10]
 8017852:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017854:	429a      	cmp	r2, r3
 8017856:	d906      	bls.n	8017866 <ip4_frag+0x10e>
 8017858:	4b5c      	ldr	r3, [pc, #368]	; (80179cc <ip4_frag+0x274>)
 801785a:	f240 322d 	movw	r2, #813	; 0x32d
 801785e:	495f      	ldr	r1, [pc, #380]	; (80179dc <ip4_frag+0x284>)
 8017860:	485c      	ldr	r0, [pc, #368]	; (80179d4 <ip4_frag+0x27c>)
 8017862:	f000 fc65 	bl	8018130 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017866:	8bfa      	ldrh	r2, [r7, #30]
 8017868:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801786c:	4293      	cmp	r3, r2
 801786e:	bf28      	it	cs
 8017870:	4613      	movcs	r3, r2
 8017872:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017876:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801787a:	2b00      	cmp	r3, #0
 801787c:	d105      	bne.n	801788a <ip4_frag+0x132>
        poff = 0;
 801787e:	2300      	movs	r3, #0
 8017880:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017882:	68fb      	ldr	r3, [r7, #12]
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	60fb      	str	r3, [r7, #12]
        continue;
 8017888:	e041      	b.n	801790e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801788a:	f7ff ff0d 	bl	80176a8 <ip_frag_alloc_pbuf_custom_ref>
 801788e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017890:	69bb      	ldr	r3, [r7, #24]
 8017892:	2b00      	cmp	r3, #0
 8017894:	d103      	bne.n	801789e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017896:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017898:	f7f4 fe5e 	bl	800c558 <pbuf_free>
        goto memerr;
 801789c:	e08f      	b.n	80179be <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801789e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80178a0:	68fb      	ldr	r3, [r7, #12]
 80178a2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80178a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80178a6:	4413      	add	r3, r2
 80178a8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80178ac:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80178b0:	9201      	str	r2, [sp, #4]
 80178b2:	9300      	str	r3, [sp, #0]
 80178b4:	4603      	mov	r3, r0
 80178b6:	2241      	movs	r2, #65	; 0x41
 80178b8:	2000      	movs	r0, #0
 80178ba:	f7f4 fc93 	bl	800c1e4 <pbuf_alloced_custom>
 80178be:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80178c0:	697b      	ldr	r3, [r7, #20]
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d106      	bne.n	80178d4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80178c6:	69b8      	ldr	r0, [r7, #24]
 80178c8:	f7ff fef6 	bl	80176b8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80178cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80178ce:	f7f4 fe43 	bl	800c558 <pbuf_free>
        goto memerr;
 80178d2:	e074      	b.n	80179be <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80178d4:	68f8      	ldr	r0, [r7, #12]
 80178d6:	f7f4 fee5 	bl	800c6a4 <pbuf_ref>
      pcr->original = p;
 80178da:	69bb      	ldr	r3, [r7, #24]
 80178dc:	68fa      	ldr	r2, [r7, #12]
 80178de:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80178e0:	69bb      	ldr	r3, [r7, #24]
 80178e2:	4a3f      	ldr	r2, [pc, #252]	; (80179e0 <ip4_frag+0x288>)
 80178e4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80178e6:	6979      	ldr	r1, [r7, #20]
 80178e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80178ea:	f7f4 ff03 	bl	800c6f4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80178ee:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80178f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80178f6:	1ad3      	subs	r3, r2, r3
 80178f8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80178fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017900:	2b00      	cmp	r3, #0
 8017902:	d004      	beq.n	801790e <ip4_frag+0x1b6>
        poff = 0;
 8017904:	2300      	movs	r3, #0
 8017906:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801790e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017912:	2b00      	cmp	r3, #0
 8017914:	d196      	bne.n	8017844 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017916:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017918:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801791c:	4413      	add	r3, r2
 801791e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017920:	68bb      	ldr	r3, [r7, #8]
 8017922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017924:	f1a3 0213 	sub.w	r2, r3, #19
 8017928:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801792c:	429a      	cmp	r2, r3
 801792e:	bfcc      	ite	gt
 8017930:	2301      	movgt	r3, #1
 8017932:	2300      	movle	r3, #0
 8017934:	b2db      	uxtb	r3, r3
 8017936:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017938:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801793c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017940:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017942:	6a3b      	ldr	r3, [r7, #32]
 8017944:	2b00      	cmp	r3, #0
 8017946:	d002      	beq.n	801794e <ip4_frag+0x1f6>
 8017948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801794a:	2b00      	cmp	r3, #0
 801794c:	d003      	beq.n	8017956 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801794e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017950:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017954:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017956:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017958:	4618      	mov	r0, r3
 801795a:	f7f3 f9c9 	bl	800acf0 <lwip_htons>
 801795e:	4603      	mov	r3, r0
 8017960:	461a      	mov	r2, r3
 8017962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017964:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017966:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017968:	3314      	adds	r3, #20
 801796a:	b29b      	uxth	r3, r3
 801796c:	4618      	mov	r0, r3
 801796e:	f7f3 f9bf 	bl	800acf0 <lwip_htons>
 8017972:	4603      	mov	r3, r0
 8017974:	461a      	mov	r2, r3
 8017976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017978:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801797a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801797c:	2200      	movs	r2, #0
 801797e:	729a      	strb	r2, [r3, #10]
 8017980:	2200      	movs	r2, #0
 8017982:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017984:	68bb      	ldr	r3, [r7, #8]
 8017986:	695b      	ldr	r3, [r3, #20]
 8017988:	687a      	ldr	r2, [r7, #4]
 801798a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801798c:	68b8      	ldr	r0, [r7, #8]
 801798e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017990:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017992:	f7f4 fde1 	bl	800c558 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017996:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801799a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801799c:	1ad3      	subs	r3, r2, r3
 801799e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80179a2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80179a6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80179a8:	4413      	add	r3, r2
 80179aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80179ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	f47f af19 	bne.w	80177ea <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80179b8:	2300      	movs	r3, #0
 80179ba:	e002      	b.n	80179c2 <ip4_frag+0x26a>
      goto memerr;
 80179bc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80179be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80179c2:	4618      	mov	r0, r3
 80179c4:	3748      	adds	r7, #72	; 0x48
 80179c6:	46bd      	mov	sp, r7
 80179c8:	bd80      	pop	{r7, pc}
 80179ca:	bf00      	nop
 80179cc:	0801c900 	.word	0x0801c900
 80179d0:	0801cadc 	.word	0x0801cadc
 80179d4:	0801c948 	.word	0x0801c948
 80179d8:	0801caf8 	.word	0x0801caf8
 80179dc:	0801cb18 	.word	0x0801cb18
 80179e0:	080176f1 	.word	0x080176f1

080179e4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80179e4:	b580      	push	{r7, lr}
 80179e6:	b086      	sub	sp, #24
 80179e8:	af00      	add	r7, sp, #0
 80179ea:	6078      	str	r0, [r7, #4]
 80179ec:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80179ee:	230e      	movs	r3, #14
 80179f0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	895b      	ldrh	r3, [r3, #10]
 80179f6:	2b0e      	cmp	r3, #14
 80179f8:	d96e      	bls.n	8017ad8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	7bdb      	ldrb	r3, [r3, #15]
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d106      	bne.n	8017a10 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017a02:	683b      	ldr	r3, [r7, #0]
 8017a04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017a08:	3301      	adds	r3, #1
 8017a0a:	b2da      	uxtb	r2, r3
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	685b      	ldr	r3, [r3, #4]
 8017a14:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017a16:	693b      	ldr	r3, [r7, #16]
 8017a18:	7b1a      	ldrb	r2, [r3, #12]
 8017a1a:	7b5b      	ldrb	r3, [r3, #13]
 8017a1c:	021b      	lsls	r3, r3, #8
 8017a1e:	4313      	orrs	r3, r2
 8017a20:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017a22:	693b      	ldr	r3, [r7, #16]
 8017a24:	781b      	ldrb	r3, [r3, #0]
 8017a26:	f003 0301 	and.w	r3, r3, #1
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d023      	beq.n	8017a76 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017a2e:	693b      	ldr	r3, [r7, #16]
 8017a30:	781b      	ldrb	r3, [r3, #0]
 8017a32:	2b01      	cmp	r3, #1
 8017a34:	d10f      	bne.n	8017a56 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017a36:	693b      	ldr	r3, [r7, #16]
 8017a38:	785b      	ldrb	r3, [r3, #1]
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d11b      	bne.n	8017a76 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017a3e:	693b      	ldr	r3, [r7, #16]
 8017a40:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017a42:	2b5e      	cmp	r3, #94	; 0x5e
 8017a44:	d117      	bne.n	8017a76 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	7b5b      	ldrb	r3, [r3, #13]
 8017a4a:	f043 0310 	orr.w	r3, r3, #16
 8017a4e:	b2da      	uxtb	r2, r3
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	735a      	strb	r2, [r3, #13]
 8017a54:	e00f      	b.n	8017a76 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017a56:	693b      	ldr	r3, [r7, #16]
 8017a58:	2206      	movs	r2, #6
 8017a5a:	4928      	ldr	r1, [pc, #160]	; (8017afc <ethernet_input+0x118>)
 8017a5c:	4618      	mov	r0, r3
 8017a5e:	f000 fbbc 	bl	80181da <memcmp>
 8017a62:	4603      	mov	r3, r0
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d106      	bne.n	8017a76 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	7b5b      	ldrb	r3, [r3, #13]
 8017a6c:	f043 0308 	orr.w	r3, r3, #8
 8017a70:	b2da      	uxtb	r2, r3
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017a76:	89fb      	ldrh	r3, [r7, #14]
 8017a78:	2b08      	cmp	r3, #8
 8017a7a:	d003      	beq.n	8017a84 <ethernet_input+0xa0>
 8017a7c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017a80:	d014      	beq.n	8017aac <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017a82:	e032      	b.n	8017aea <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017a84:	683b      	ldr	r3, [r7, #0]
 8017a86:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017a8a:	f003 0308 	and.w	r3, r3, #8
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d024      	beq.n	8017adc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017a92:	8afb      	ldrh	r3, [r7, #22]
 8017a94:	4619      	mov	r1, r3
 8017a96:	6878      	ldr	r0, [r7, #4]
 8017a98:	f7f4 fcd8 	bl	800c44c <pbuf_remove_header>
 8017a9c:	4603      	mov	r3, r0
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d11e      	bne.n	8017ae0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017aa2:	6839      	ldr	r1, [r7, #0]
 8017aa4:	6878      	ldr	r0, [r7, #4]
 8017aa6:	f7fe ff03 	bl	80168b0 <ip4_input>
      break;
 8017aaa:	e013      	b.n	8017ad4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017aac:	683b      	ldr	r3, [r7, #0]
 8017aae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017ab2:	f003 0308 	and.w	r3, r3, #8
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d014      	beq.n	8017ae4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017aba:	8afb      	ldrh	r3, [r7, #22]
 8017abc:	4619      	mov	r1, r3
 8017abe:	6878      	ldr	r0, [r7, #4]
 8017ac0:	f7f4 fcc4 	bl	800c44c <pbuf_remove_header>
 8017ac4:	4603      	mov	r3, r0
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d10e      	bne.n	8017ae8 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017aca:	6839      	ldr	r1, [r7, #0]
 8017acc:	6878      	ldr	r0, [r7, #4]
 8017ace:	f7fe f89f 	bl	8015c10 <etharp_input>
      break;
 8017ad2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017ad4:	2300      	movs	r3, #0
 8017ad6:	e00c      	b.n	8017af2 <ethernet_input+0x10e>
    goto free_and_return;
 8017ad8:	bf00      	nop
 8017ada:	e006      	b.n	8017aea <ethernet_input+0x106>
        goto free_and_return;
 8017adc:	bf00      	nop
 8017ade:	e004      	b.n	8017aea <ethernet_input+0x106>
        goto free_and_return;
 8017ae0:	bf00      	nop
 8017ae2:	e002      	b.n	8017aea <ethernet_input+0x106>
        goto free_and_return;
 8017ae4:	bf00      	nop
 8017ae6:	e000      	b.n	8017aea <ethernet_input+0x106>
        goto free_and_return;
 8017ae8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017aea:	6878      	ldr	r0, [r7, #4]
 8017aec:	f7f4 fd34 	bl	800c558 <pbuf_free>
  return ERR_OK;
 8017af0:	2300      	movs	r3, #0
}
 8017af2:	4618      	mov	r0, r3
 8017af4:	3718      	adds	r7, #24
 8017af6:	46bd      	mov	sp, r7
 8017af8:	bd80      	pop	{r7, pc}
 8017afa:	bf00      	nop
 8017afc:	08026e44 	.word	0x08026e44

08017b00 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017b00:	b580      	push	{r7, lr}
 8017b02:	b086      	sub	sp, #24
 8017b04:	af00      	add	r7, sp, #0
 8017b06:	60f8      	str	r0, [r7, #12]
 8017b08:	60b9      	str	r1, [r7, #8]
 8017b0a:	607a      	str	r2, [r7, #4]
 8017b0c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017b0e:	8c3b      	ldrh	r3, [r7, #32]
 8017b10:	4618      	mov	r0, r3
 8017b12:	f7f3 f8ed 	bl	800acf0 <lwip_htons>
 8017b16:	4603      	mov	r3, r0
 8017b18:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017b1a:	210e      	movs	r1, #14
 8017b1c:	68b8      	ldr	r0, [r7, #8]
 8017b1e:	f7f4 fc85 	bl	800c42c <pbuf_add_header>
 8017b22:	4603      	mov	r3, r0
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d125      	bne.n	8017b74 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017b28:	68bb      	ldr	r3, [r7, #8]
 8017b2a:	685b      	ldr	r3, [r3, #4]
 8017b2c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017b2e:	693b      	ldr	r3, [r7, #16]
 8017b30:	8afa      	ldrh	r2, [r7, #22]
 8017b32:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017b34:	693b      	ldr	r3, [r7, #16]
 8017b36:	2206      	movs	r2, #6
 8017b38:	6839      	ldr	r1, [r7, #0]
 8017b3a:	4618      	mov	r0, r3
 8017b3c:	f000 fc46 	bl	80183cc <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017b40:	693b      	ldr	r3, [r7, #16]
 8017b42:	3306      	adds	r3, #6
 8017b44:	2206      	movs	r2, #6
 8017b46:	6879      	ldr	r1, [r7, #4]
 8017b48:	4618      	mov	r0, r3
 8017b4a:	f000 fc3f 	bl	80183cc <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017b54:	2b06      	cmp	r3, #6
 8017b56:	d006      	beq.n	8017b66 <ethernet_output+0x66>
 8017b58:	4b0a      	ldr	r3, [pc, #40]	; (8017b84 <ethernet_output+0x84>)
 8017b5a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8017b5e:	490a      	ldr	r1, [pc, #40]	; (8017b88 <ethernet_output+0x88>)
 8017b60:	480a      	ldr	r0, [pc, #40]	; (8017b8c <ethernet_output+0x8c>)
 8017b62:	f000 fae5 	bl	8018130 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017b66:	68fb      	ldr	r3, [r7, #12]
 8017b68:	699b      	ldr	r3, [r3, #24]
 8017b6a:	68b9      	ldr	r1, [r7, #8]
 8017b6c:	68f8      	ldr	r0, [r7, #12]
 8017b6e:	4798      	blx	r3
 8017b70:	4603      	mov	r3, r0
 8017b72:	e002      	b.n	8017b7a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017b74:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017b76:	f06f 0301 	mvn.w	r3, #1
}
 8017b7a:	4618      	mov	r0, r3
 8017b7c:	3718      	adds	r7, #24
 8017b7e:	46bd      	mov	sp, r7
 8017b80:	bd80      	pop	{r7, pc}
 8017b82:	bf00      	nop
 8017b84:	0801cb28 	.word	0x0801cb28
 8017b88:	0801cb60 	.word	0x0801cb60
 8017b8c:	0801cb94 	.word	0x0801cb94

08017b90 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017b90:	b580      	push	{r7, lr}
 8017b92:	b086      	sub	sp, #24
 8017b94:	af00      	add	r7, sp, #0
 8017b96:	6078      	str	r0, [r7, #4]
 8017b98:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8017b9a:	683b      	ldr	r3, [r7, #0]
 8017b9c:	60bb      	str	r3, [r7, #8]
 8017b9e:	2304      	movs	r3, #4
 8017ba0:	60fb      	str	r3, [r7, #12]
 8017ba2:	2300      	movs	r3, #0
 8017ba4:	613b      	str	r3, [r7, #16]
 8017ba6:	2300      	movs	r3, #0
 8017ba8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8017baa:	f107 0308 	add.w	r3, r7, #8
 8017bae:	2100      	movs	r1, #0
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	f7ed f97e 	bl	8004eb2 <osMessageCreate>
 8017bb6:	4602      	mov	r2, r0
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	681b      	ldr	r3, [r3, #0]
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	d102      	bne.n	8017bca <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8017bc8:	e000      	b.n	8017bcc <sys_mbox_new+0x3c>

  return ERR_OK;
 8017bca:	2300      	movs	r3, #0
}
 8017bcc:	4618      	mov	r0, r3
 8017bce:	3718      	adds	r7, #24
 8017bd0:	46bd      	mov	sp, r7
 8017bd2:	bd80      	pop	{r7, pc}

08017bd4 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8017bd4:	b580      	push	{r7, lr}
 8017bd6:	b082      	sub	sp, #8
 8017bd8:	af00      	add	r7, sp, #0
 8017bda:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	4618      	mov	r0, r3
 8017be2:	f7ed fa43 	bl	800506c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	4618      	mov	r0, r3
 8017bec:	f7ed fa54 	bl	8005098 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8017bf0:	bf00      	nop
 8017bf2:	3708      	adds	r7, #8
 8017bf4:	46bd      	mov	sp, r7
 8017bf6:	bd80      	pop	{r7, pc}

08017bf8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017bf8:	b580      	push	{r7, lr}
 8017bfa:	b084      	sub	sp, #16
 8017bfc:	af00      	add	r7, sp, #0
 8017bfe:	6078      	str	r0, [r7, #4]
 8017c00:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	681b      	ldr	r3, [r3, #0]
 8017c06:	6839      	ldr	r1, [r7, #0]
 8017c08:	2200      	movs	r2, #0
 8017c0a:	4618      	mov	r0, r3
 8017c0c:	f7ed f97a 	bl	8004f04 <osMessagePut>
 8017c10:	4603      	mov	r3, r0
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d102      	bne.n	8017c1c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8017c16:	2300      	movs	r3, #0
 8017c18:	73fb      	strb	r3, [r7, #15]
 8017c1a:	e001      	b.n	8017c20 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017c1c:	23ff      	movs	r3, #255	; 0xff
 8017c1e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017c24:	4618      	mov	r0, r3
 8017c26:	3710      	adds	r7, #16
 8017c28:	46bd      	mov	sp, r7
 8017c2a:	bd80      	pop	{r7, pc}

08017c2c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017c2c:	b580      	push	{r7, lr}
 8017c2e:	b08c      	sub	sp, #48	; 0x30
 8017c30:	af00      	add	r7, sp, #0
 8017c32:	61f8      	str	r0, [r7, #28]
 8017c34:	61b9      	str	r1, [r7, #24]
 8017c36:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8017c38:	f7ec ff66 	bl	8004b08 <osKernelSysTick>
 8017c3c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017c3e:	697b      	ldr	r3, [r7, #20]
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d017      	beq.n	8017c74 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8017c44:	69fb      	ldr	r3, [r7, #28]
 8017c46:	6819      	ldr	r1, [r3, #0]
 8017c48:	f107 0320 	add.w	r3, r7, #32
 8017c4c:	697a      	ldr	r2, [r7, #20]
 8017c4e:	4618      	mov	r0, r3
 8017c50:	f7ed f998 	bl	8004f84 <osMessageGet>

    if(event.status == osEventMessage)
 8017c54:	6a3b      	ldr	r3, [r7, #32]
 8017c56:	2b10      	cmp	r3, #16
 8017c58:	d109      	bne.n	8017c6e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8017c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c5c:	461a      	mov	r2, r3
 8017c5e:	69bb      	ldr	r3, [r7, #24]
 8017c60:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8017c62:	f7ec ff51 	bl	8004b08 <osKernelSysTick>
 8017c66:	4602      	mov	r2, r0
 8017c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c6a:	1ad3      	subs	r3, r2, r3
 8017c6c:	e019      	b.n	8017ca2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8017c72:	e016      	b.n	8017ca2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8017c74:	69fb      	ldr	r3, [r7, #28]
 8017c76:	6819      	ldr	r1, [r3, #0]
 8017c78:	463b      	mov	r3, r7
 8017c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8017c7e:	4618      	mov	r0, r3
 8017c80:	f7ed f980 	bl	8004f84 <osMessageGet>
 8017c84:	f107 0320 	add.w	r3, r7, #32
 8017c88:	463a      	mov	r2, r7
 8017c8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8017c8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c92:	461a      	mov	r2, r3
 8017c94:	69bb      	ldr	r3, [r7, #24]
 8017c96:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8017c98:	f7ec ff36 	bl	8004b08 <osKernelSysTick>
 8017c9c:	4602      	mov	r2, r0
 8017c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ca0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	3730      	adds	r7, #48	; 0x30
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	bd80      	pop	{r7, pc}

08017caa <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8017caa:	b580      	push	{r7, lr}
 8017cac:	b086      	sub	sp, #24
 8017cae:	af00      	add	r7, sp, #0
 8017cb0:	6078      	str	r0, [r7, #4]
 8017cb2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	6819      	ldr	r1, [r3, #0]
 8017cb8:	f107 030c 	add.w	r3, r7, #12
 8017cbc:	2200      	movs	r2, #0
 8017cbe:	4618      	mov	r0, r3
 8017cc0:	f7ed f960 	bl	8004f84 <osMessageGet>

  if(event.status == osEventMessage)
 8017cc4:	68fb      	ldr	r3, [r7, #12]
 8017cc6:	2b10      	cmp	r3, #16
 8017cc8:	d105      	bne.n	8017cd6 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8017cca:	693b      	ldr	r3, [r7, #16]
 8017ccc:	461a      	mov	r2, r3
 8017cce:	683b      	ldr	r3, [r7, #0]
 8017cd0:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8017cd2:	2300      	movs	r3, #0
 8017cd4:	e001      	b.n	8017cda <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8017cd6:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8017cda:	4618      	mov	r0, r3
 8017cdc:	3718      	adds	r7, #24
 8017cde:	46bd      	mov	sp, r7
 8017ce0:	bd80      	pop	{r7, pc}

08017ce2 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017ce2:	b480      	push	{r7}
 8017ce4:	b083      	sub	sp, #12
 8017ce6:	af00      	add	r7, sp, #0
 8017ce8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d101      	bne.n	8017cf6 <sys_mbox_valid+0x14>
    return 0;
 8017cf2:	2300      	movs	r3, #0
 8017cf4:	e000      	b.n	8017cf8 <sys_mbox_valid+0x16>
  else
    return 1;
 8017cf6:	2301      	movs	r3, #1
}
 8017cf8:	4618      	mov	r0, r3
 8017cfa:	370c      	adds	r7, #12
 8017cfc:	46bd      	mov	sp, r7
 8017cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d02:	4770      	bx	lr

08017d04 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8017d04:	b480      	push	{r7}
 8017d06:	b083      	sub	sp, #12
 8017d08:	af00      	add	r7, sp, #0
 8017d0a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	2200      	movs	r2, #0
 8017d10:	601a      	str	r2, [r3, #0]
}
 8017d12:	bf00      	nop
 8017d14:	370c      	adds	r7, #12
 8017d16:	46bd      	mov	sp, r7
 8017d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d1c:	4770      	bx	lr

08017d1e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8017d1e:	b580      	push	{r7, lr}
 8017d20:	b084      	sub	sp, #16
 8017d22:	af00      	add	r7, sp, #0
 8017d24:	6078      	str	r0, [r7, #4]
 8017d26:	460b      	mov	r3, r1
 8017d28:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8017d2a:	2300      	movs	r3, #0
 8017d2c:	60bb      	str	r3, [r7, #8]
 8017d2e:	2300      	movs	r3, #0
 8017d30:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8017d32:	f107 0308 	add.w	r3, r7, #8
 8017d36:	2101      	movs	r1, #1
 8017d38:	4618      	mov	r0, r3
 8017d3a:	f7ec fff1 	bl	8004d20 <osSemaphoreCreate>
 8017d3e:	4602      	mov	r2, r0
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	681b      	ldr	r3, [r3, #0]
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d102      	bne.n	8017d52 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8017d50:	e009      	b.n	8017d66 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8017d52:	78fb      	ldrb	r3, [r7, #3]
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d105      	bne.n	8017d64 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	681b      	ldr	r3, [r3, #0]
 8017d5c:	2100      	movs	r1, #0
 8017d5e:	4618      	mov	r0, r3
 8017d60:	f7ed f810 	bl	8004d84 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8017d64:	2300      	movs	r3, #0
}
 8017d66:	4618      	mov	r0, r3
 8017d68:	3710      	adds	r7, #16
 8017d6a:	46bd      	mov	sp, r7
 8017d6c:	bd80      	pop	{r7, pc}

08017d6e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8017d6e:	b580      	push	{r7, lr}
 8017d70:	b084      	sub	sp, #16
 8017d72:	af00      	add	r7, sp, #0
 8017d74:	6078      	str	r0, [r7, #4]
 8017d76:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8017d78:	f7ec fec6 	bl	8004b08 <osKernelSysTick>
 8017d7c:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017d7e:	683b      	ldr	r3, [r7, #0]
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d011      	beq.n	8017da8 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	681b      	ldr	r3, [r3, #0]
 8017d88:	6839      	ldr	r1, [r7, #0]
 8017d8a:	4618      	mov	r0, r3
 8017d8c:	f7ec fffa 	bl	8004d84 <osSemaphoreWait>
 8017d90:	4603      	mov	r3, r0
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d105      	bne.n	8017da2 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8017d96:	f7ec feb7 	bl	8004b08 <osKernelSysTick>
 8017d9a:	4602      	mov	r2, r0
 8017d9c:	68fb      	ldr	r3, [r7, #12]
 8017d9e:	1ad3      	subs	r3, r2, r3
 8017da0:	e012      	b.n	8017dc8 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017da2:	f04f 33ff 	mov.w	r3, #4294967295
 8017da6:	e00f      	b.n	8017dc8 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8017da8:	bf00      	nop
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	f04f 31ff 	mov.w	r1, #4294967295
 8017db2:	4618      	mov	r0, r3
 8017db4:	f7ec ffe6 	bl	8004d84 <osSemaphoreWait>
 8017db8:	4603      	mov	r3, r0
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	d1f5      	bne.n	8017daa <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8017dbe:	f7ec fea3 	bl	8004b08 <osKernelSysTick>
 8017dc2:	4602      	mov	r2, r0
 8017dc4:	68fb      	ldr	r3, [r7, #12]
 8017dc6:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017dc8:	4618      	mov	r0, r3
 8017dca:	3710      	adds	r7, #16
 8017dcc:	46bd      	mov	sp, r7
 8017dce:	bd80      	pop	{r7, pc}

08017dd0 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8017dd0:	b580      	push	{r7, lr}
 8017dd2:	b082      	sub	sp, #8
 8017dd4:	af00      	add	r7, sp, #0
 8017dd6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	681b      	ldr	r3, [r3, #0]
 8017ddc:	4618      	mov	r0, r3
 8017dde:	f7ed f81f 	bl	8004e20 <osSemaphoreRelease>
}
 8017de2:	bf00      	nop
 8017de4:	3708      	adds	r7, #8
 8017de6:	46bd      	mov	sp, r7
 8017de8:	bd80      	pop	{r7, pc}

08017dea <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8017dea:	b580      	push	{r7, lr}
 8017dec:	b082      	sub	sp, #8
 8017dee:	af00      	add	r7, sp, #0
 8017df0:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	681b      	ldr	r3, [r3, #0]
 8017df6:	4618      	mov	r0, r3
 8017df8:	f7ed f848 	bl	8004e8c <osSemaphoreDelete>
}
 8017dfc:	bf00      	nop
 8017dfe:	3708      	adds	r7, #8
 8017e00:	46bd      	mov	sp, r7
 8017e02:	bd80      	pop	{r7, pc}

08017e04 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8017e04:	b480      	push	{r7}
 8017e06:	b083      	sub	sp, #12
 8017e08:	af00      	add	r7, sp, #0
 8017e0a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d101      	bne.n	8017e18 <sys_sem_valid+0x14>
    return 0;
 8017e14:	2300      	movs	r3, #0
 8017e16:	e000      	b.n	8017e1a <sys_sem_valid+0x16>
  else
    return 1;
 8017e18:	2301      	movs	r3, #1
}
 8017e1a:	4618      	mov	r0, r3
 8017e1c:	370c      	adds	r7, #12
 8017e1e:	46bd      	mov	sp, r7
 8017e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e24:	4770      	bx	lr

08017e26 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8017e26:	b480      	push	{r7}
 8017e28:	b083      	sub	sp, #12
 8017e2a:	af00      	add	r7, sp, #0
 8017e2c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	2200      	movs	r2, #0
 8017e32:	601a      	str	r2, [r3, #0]
}
 8017e34:	bf00      	nop
 8017e36:	370c      	adds	r7, #12
 8017e38:	46bd      	mov	sp, r7
 8017e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e3e:	4770      	bx	lr

08017e40 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017e40:	b580      	push	{r7, lr}
 8017e42:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8017e44:	4803      	ldr	r0, [pc, #12]	; (8017e54 <sys_init+0x14>)
 8017e46:	f7ec fecf 	bl	8004be8 <osMutexCreate>
 8017e4a:	4603      	mov	r3, r0
 8017e4c:	4a02      	ldr	r2, [pc, #8]	; (8017e58 <sys_init+0x18>)
 8017e4e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8017e50:	bf00      	nop
 8017e52:	bd80      	pop	{r7, pc}
 8017e54:	08026e54 	.word	0x08026e54
 8017e58:	20010eec 	.word	0x20010eec

08017e5c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017e5c:	b580      	push	{r7, lr}
 8017e5e:	b084      	sub	sp, #16
 8017e60:	af00      	add	r7, sp, #0
 8017e62:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8017e64:	2300      	movs	r3, #0
 8017e66:	60bb      	str	r3, [r7, #8]
 8017e68:	2300      	movs	r3, #0
 8017e6a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8017e6c:	f107 0308 	add.w	r3, r7, #8
 8017e70:	4618      	mov	r0, r3
 8017e72:	f7ec feb9 	bl	8004be8 <osMutexCreate>
 8017e76:	4602      	mov	r2, r0
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	681b      	ldr	r3, [r3, #0]
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d102      	bne.n	8017e8a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017e84:	f04f 33ff 	mov.w	r3, #4294967295
 8017e88:	e000      	b.n	8017e8c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017e8a:	2300      	movs	r3, #0
}
 8017e8c:	4618      	mov	r0, r3
 8017e8e:	3710      	adds	r7, #16
 8017e90:	46bd      	mov	sp, r7
 8017e92:	bd80      	pop	{r7, pc}

08017e94 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017e94:	b580      	push	{r7, lr}
 8017e96:	b082      	sub	sp, #8
 8017e98:	af00      	add	r7, sp, #0
 8017e9a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	681b      	ldr	r3, [r3, #0]
 8017ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	f7ec feb7 	bl	8004c18 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8017eaa:	bf00      	nop
 8017eac:	3708      	adds	r7, #8
 8017eae:	46bd      	mov	sp, r7
 8017eb0:	bd80      	pop	{r7, pc}

08017eb2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017eb2:	b580      	push	{r7, lr}
 8017eb4:	b082      	sub	sp, #8
 8017eb6:	af00      	add	r7, sp, #0
 8017eb8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	4618      	mov	r0, r3
 8017ec0:	f7ec fef8 	bl	8004cb4 <osMutexRelease>
}
 8017ec4:	bf00      	nop
 8017ec6:	3708      	adds	r7, #8
 8017ec8:	46bd      	mov	sp, r7
 8017eca:	bd80      	pop	{r7, pc}

08017ecc <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017ecc:	b580      	push	{r7, lr}
 8017ece:	b08c      	sub	sp, #48	; 0x30
 8017ed0:	af00      	add	r7, sp, #0
 8017ed2:	60f8      	str	r0, [r7, #12]
 8017ed4:	60b9      	str	r1, [r7, #8]
 8017ed6:	607a      	str	r2, [r7, #4]
 8017ed8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8017eda:	f107 0314 	add.w	r3, r7, #20
 8017ede:	2200      	movs	r2, #0
 8017ee0:	601a      	str	r2, [r3, #0]
 8017ee2:	605a      	str	r2, [r3, #4]
 8017ee4:	609a      	str	r2, [r3, #8]
 8017ee6:	60da      	str	r2, [r3, #12]
 8017ee8:	611a      	str	r2, [r3, #16]
 8017eea:	615a      	str	r2, [r3, #20]
 8017eec:	619a      	str	r2, [r3, #24]
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	617b      	str	r3, [r7, #20]
 8017ef2:	68bb      	ldr	r3, [r7, #8]
 8017ef4:	61bb      	str	r3, [r7, #24]
 8017ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ef8:	b21b      	sxth	r3, r3
 8017efa:	83bb      	strh	r3, [r7, #28]
 8017efc:	683b      	ldr	r3, [r7, #0]
 8017efe:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8017f00:	f107 0314 	add.w	r3, r7, #20
 8017f04:	6879      	ldr	r1, [r7, #4]
 8017f06:	4618      	mov	r0, r3
 8017f08:	f7ec fe0e 	bl	8004b28 <osThreadCreate>
 8017f0c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8017f0e:	4618      	mov	r0, r3
 8017f10:	3730      	adds	r7, #48	; 0x30
 8017f12:	46bd      	mov	sp, r7
 8017f14:	bd80      	pop	{r7, pc}
	...

08017f18 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017f18:	b580      	push	{r7, lr}
 8017f1a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8017f1c:	4b04      	ldr	r3, [pc, #16]	; (8017f30 <sys_arch_protect+0x18>)
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	f04f 31ff 	mov.w	r1, #4294967295
 8017f24:	4618      	mov	r0, r3
 8017f26:	f7ec fe77 	bl	8004c18 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8017f2a:	2301      	movs	r3, #1
}
 8017f2c:	4618      	mov	r0, r3
 8017f2e:	bd80      	pop	{r7, pc}
 8017f30:	20010eec 	.word	0x20010eec

08017f34 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017f34:	b580      	push	{r7, lr}
 8017f36:	b082      	sub	sp, #8
 8017f38:	af00      	add	r7, sp, #0
 8017f3a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017f3c:	4b04      	ldr	r3, [pc, #16]	; (8017f50 <sys_arch_unprotect+0x1c>)
 8017f3e:	681b      	ldr	r3, [r3, #0]
 8017f40:	4618      	mov	r0, r3
 8017f42:	f7ec feb7 	bl	8004cb4 <osMutexRelease>
}
 8017f46:	bf00      	nop
 8017f48:	3708      	adds	r7, #8
 8017f4a:	46bd      	mov	sp, r7
 8017f4c:	bd80      	pop	{r7, pc}
 8017f4e:	bf00      	nop
 8017f50:	20010eec 	.word	0x20010eec

08017f54 <rand>:
 8017f54:	4b16      	ldr	r3, [pc, #88]	; (8017fb0 <rand+0x5c>)
 8017f56:	b510      	push	{r4, lr}
 8017f58:	681c      	ldr	r4, [r3, #0]
 8017f5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017f5c:	b9b3      	cbnz	r3, 8017f8c <rand+0x38>
 8017f5e:	2018      	movs	r0, #24
 8017f60:	f000 faac 	bl	80184bc <malloc>
 8017f64:	4602      	mov	r2, r0
 8017f66:	6320      	str	r0, [r4, #48]	; 0x30
 8017f68:	b920      	cbnz	r0, 8017f74 <rand+0x20>
 8017f6a:	4b12      	ldr	r3, [pc, #72]	; (8017fb4 <rand+0x60>)
 8017f6c:	4812      	ldr	r0, [pc, #72]	; (8017fb8 <rand+0x64>)
 8017f6e:	2152      	movs	r1, #82	; 0x52
 8017f70:	f000 fa3a 	bl	80183e8 <__assert_func>
 8017f74:	4911      	ldr	r1, [pc, #68]	; (8017fbc <rand+0x68>)
 8017f76:	4b12      	ldr	r3, [pc, #72]	; (8017fc0 <rand+0x6c>)
 8017f78:	e9c0 1300 	strd	r1, r3, [r0]
 8017f7c:	4b11      	ldr	r3, [pc, #68]	; (8017fc4 <rand+0x70>)
 8017f7e:	6083      	str	r3, [r0, #8]
 8017f80:	230b      	movs	r3, #11
 8017f82:	8183      	strh	r3, [r0, #12]
 8017f84:	2100      	movs	r1, #0
 8017f86:	2001      	movs	r0, #1
 8017f88:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017f8c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017f8e:	480e      	ldr	r0, [pc, #56]	; (8017fc8 <rand+0x74>)
 8017f90:	690b      	ldr	r3, [r1, #16]
 8017f92:	694c      	ldr	r4, [r1, #20]
 8017f94:	4a0d      	ldr	r2, [pc, #52]	; (8017fcc <rand+0x78>)
 8017f96:	4358      	muls	r0, r3
 8017f98:	fb02 0004 	mla	r0, r2, r4, r0
 8017f9c:	fba3 3202 	umull	r3, r2, r3, r2
 8017fa0:	3301      	adds	r3, #1
 8017fa2:	eb40 0002 	adc.w	r0, r0, r2
 8017fa6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017faa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017fae:	bd10      	pop	{r4, pc}
 8017fb0:	2000008c 	.word	0x2000008c
 8017fb4:	08026e5c 	.word	0x08026e5c
 8017fb8:	08026e73 	.word	0x08026e73
 8017fbc:	abcd330e 	.word	0xabcd330e
 8017fc0:	e66d1234 	.word	0xe66d1234
 8017fc4:	0005deec 	.word	0x0005deec
 8017fc8:	5851f42d 	.word	0x5851f42d
 8017fcc:	4c957f2d 	.word	0x4c957f2d

08017fd0 <std>:
 8017fd0:	2300      	movs	r3, #0
 8017fd2:	b510      	push	{r4, lr}
 8017fd4:	4604      	mov	r4, r0
 8017fd6:	e9c0 3300 	strd	r3, r3, [r0]
 8017fda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017fde:	6083      	str	r3, [r0, #8]
 8017fe0:	8181      	strh	r1, [r0, #12]
 8017fe2:	6643      	str	r3, [r0, #100]	; 0x64
 8017fe4:	81c2      	strh	r2, [r0, #14]
 8017fe6:	6183      	str	r3, [r0, #24]
 8017fe8:	4619      	mov	r1, r3
 8017fea:	2208      	movs	r2, #8
 8017fec:	305c      	adds	r0, #92	; 0x5c
 8017fee:	f000 f904 	bl	80181fa <memset>
 8017ff2:	4b05      	ldr	r3, [pc, #20]	; (8018008 <std+0x38>)
 8017ff4:	6263      	str	r3, [r4, #36]	; 0x24
 8017ff6:	4b05      	ldr	r3, [pc, #20]	; (801800c <std+0x3c>)
 8017ff8:	62a3      	str	r3, [r4, #40]	; 0x28
 8017ffa:	4b05      	ldr	r3, [pc, #20]	; (8018010 <std+0x40>)
 8017ffc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017ffe:	4b05      	ldr	r3, [pc, #20]	; (8018014 <std+0x44>)
 8018000:	6224      	str	r4, [r4, #32]
 8018002:	6323      	str	r3, [r4, #48]	; 0x30
 8018004:	bd10      	pop	{r4, pc}
 8018006:	bf00      	nop
 8018008:	08018155 	.word	0x08018155
 801800c:	08018177 	.word	0x08018177
 8018010:	080181af 	.word	0x080181af
 8018014:	080181d3 	.word	0x080181d3

08018018 <stdio_exit_handler>:
 8018018:	4a02      	ldr	r2, [pc, #8]	; (8018024 <stdio_exit_handler+0xc>)
 801801a:	4903      	ldr	r1, [pc, #12]	; (8018028 <stdio_exit_handler+0x10>)
 801801c:	4803      	ldr	r0, [pc, #12]	; (801802c <stdio_exit_handler+0x14>)
 801801e:	f000 b869 	b.w	80180f4 <_fwalk_sglue>
 8018022:	bf00      	nop
 8018024:	20000034 	.word	0x20000034
 8018028:	08018cd9 	.word	0x08018cd9
 801802c:	20000040 	.word	0x20000040

08018030 <cleanup_stdio>:
 8018030:	6841      	ldr	r1, [r0, #4]
 8018032:	4b0c      	ldr	r3, [pc, #48]	; (8018064 <cleanup_stdio+0x34>)
 8018034:	4299      	cmp	r1, r3
 8018036:	b510      	push	{r4, lr}
 8018038:	4604      	mov	r4, r0
 801803a:	d001      	beq.n	8018040 <cleanup_stdio+0x10>
 801803c:	f000 fe4c 	bl	8018cd8 <_fflush_r>
 8018040:	68a1      	ldr	r1, [r4, #8]
 8018042:	4b09      	ldr	r3, [pc, #36]	; (8018068 <cleanup_stdio+0x38>)
 8018044:	4299      	cmp	r1, r3
 8018046:	d002      	beq.n	801804e <cleanup_stdio+0x1e>
 8018048:	4620      	mov	r0, r4
 801804a:	f000 fe45 	bl	8018cd8 <_fflush_r>
 801804e:	68e1      	ldr	r1, [r4, #12]
 8018050:	4b06      	ldr	r3, [pc, #24]	; (801806c <cleanup_stdio+0x3c>)
 8018052:	4299      	cmp	r1, r3
 8018054:	d004      	beq.n	8018060 <cleanup_stdio+0x30>
 8018056:	4620      	mov	r0, r4
 8018058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801805c:	f000 be3c 	b.w	8018cd8 <_fflush_r>
 8018060:	bd10      	pop	{r4, pc}
 8018062:	bf00      	nop
 8018064:	20010ef0 	.word	0x20010ef0
 8018068:	20010f58 	.word	0x20010f58
 801806c:	20010fc0 	.word	0x20010fc0

08018070 <global_stdio_init.part.0>:
 8018070:	b510      	push	{r4, lr}
 8018072:	4b0b      	ldr	r3, [pc, #44]	; (80180a0 <global_stdio_init.part.0+0x30>)
 8018074:	4c0b      	ldr	r4, [pc, #44]	; (80180a4 <global_stdio_init.part.0+0x34>)
 8018076:	4a0c      	ldr	r2, [pc, #48]	; (80180a8 <global_stdio_init.part.0+0x38>)
 8018078:	601a      	str	r2, [r3, #0]
 801807a:	4620      	mov	r0, r4
 801807c:	2200      	movs	r2, #0
 801807e:	2104      	movs	r1, #4
 8018080:	f7ff ffa6 	bl	8017fd0 <std>
 8018084:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018088:	2201      	movs	r2, #1
 801808a:	2109      	movs	r1, #9
 801808c:	f7ff ffa0 	bl	8017fd0 <std>
 8018090:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8018094:	2202      	movs	r2, #2
 8018096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801809a:	2112      	movs	r1, #18
 801809c:	f7ff bf98 	b.w	8017fd0 <std>
 80180a0:	20011028 	.word	0x20011028
 80180a4:	20010ef0 	.word	0x20010ef0
 80180a8:	08018019 	.word	0x08018019

080180ac <__sfp_lock_acquire>:
 80180ac:	4801      	ldr	r0, [pc, #4]	; (80180b4 <__sfp_lock_acquire+0x8>)
 80180ae:	f000 b98b 	b.w	80183c8 <__retarget_lock_acquire_recursive>
 80180b2:	bf00      	nop
 80180b4:	20011031 	.word	0x20011031

080180b8 <__sfp_lock_release>:
 80180b8:	4801      	ldr	r0, [pc, #4]	; (80180c0 <__sfp_lock_release+0x8>)
 80180ba:	f000 b986 	b.w	80183ca <__retarget_lock_release_recursive>
 80180be:	bf00      	nop
 80180c0:	20011031 	.word	0x20011031

080180c4 <__sinit>:
 80180c4:	b510      	push	{r4, lr}
 80180c6:	4604      	mov	r4, r0
 80180c8:	f7ff fff0 	bl	80180ac <__sfp_lock_acquire>
 80180cc:	6a23      	ldr	r3, [r4, #32]
 80180ce:	b11b      	cbz	r3, 80180d8 <__sinit+0x14>
 80180d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80180d4:	f7ff bff0 	b.w	80180b8 <__sfp_lock_release>
 80180d8:	4b04      	ldr	r3, [pc, #16]	; (80180ec <__sinit+0x28>)
 80180da:	6223      	str	r3, [r4, #32]
 80180dc:	4b04      	ldr	r3, [pc, #16]	; (80180f0 <__sinit+0x2c>)
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d1f5      	bne.n	80180d0 <__sinit+0xc>
 80180e4:	f7ff ffc4 	bl	8018070 <global_stdio_init.part.0>
 80180e8:	e7f2      	b.n	80180d0 <__sinit+0xc>
 80180ea:	bf00      	nop
 80180ec:	08018031 	.word	0x08018031
 80180f0:	20011028 	.word	0x20011028

080180f4 <_fwalk_sglue>:
 80180f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80180f8:	4607      	mov	r7, r0
 80180fa:	4688      	mov	r8, r1
 80180fc:	4614      	mov	r4, r2
 80180fe:	2600      	movs	r6, #0
 8018100:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018104:	f1b9 0901 	subs.w	r9, r9, #1
 8018108:	d505      	bpl.n	8018116 <_fwalk_sglue+0x22>
 801810a:	6824      	ldr	r4, [r4, #0]
 801810c:	2c00      	cmp	r4, #0
 801810e:	d1f7      	bne.n	8018100 <_fwalk_sglue+0xc>
 8018110:	4630      	mov	r0, r6
 8018112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018116:	89ab      	ldrh	r3, [r5, #12]
 8018118:	2b01      	cmp	r3, #1
 801811a:	d907      	bls.n	801812c <_fwalk_sglue+0x38>
 801811c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018120:	3301      	adds	r3, #1
 8018122:	d003      	beq.n	801812c <_fwalk_sglue+0x38>
 8018124:	4629      	mov	r1, r5
 8018126:	4638      	mov	r0, r7
 8018128:	47c0      	blx	r8
 801812a:	4306      	orrs	r6, r0
 801812c:	3568      	adds	r5, #104	; 0x68
 801812e:	e7e9      	b.n	8018104 <_fwalk_sglue+0x10>

08018130 <iprintf>:
 8018130:	b40f      	push	{r0, r1, r2, r3}
 8018132:	b507      	push	{r0, r1, r2, lr}
 8018134:	4906      	ldr	r1, [pc, #24]	; (8018150 <iprintf+0x20>)
 8018136:	ab04      	add	r3, sp, #16
 8018138:	6808      	ldr	r0, [r1, #0]
 801813a:	f853 2b04 	ldr.w	r2, [r3], #4
 801813e:	6881      	ldr	r1, [r0, #8]
 8018140:	9301      	str	r3, [sp, #4]
 8018142:	f000 fa99 	bl	8018678 <_vfiprintf_r>
 8018146:	b003      	add	sp, #12
 8018148:	f85d eb04 	ldr.w	lr, [sp], #4
 801814c:	b004      	add	sp, #16
 801814e:	4770      	bx	lr
 8018150:	2000008c 	.word	0x2000008c

08018154 <__sread>:
 8018154:	b510      	push	{r4, lr}
 8018156:	460c      	mov	r4, r1
 8018158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801815c:	f000 f8ec 	bl	8018338 <_read_r>
 8018160:	2800      	cmp	r0, #0
 8018162:	bfab      	itete	ge
 8018164:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018166:	89a3      	ldrhlt	r3, [r4, #12]
 8018168:	181b      	addge	r3, r3, r0
 801816a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801816e:	bfac      	ite	ge
 8018170:	6563      	strge	r3, [r4, #84]	; 0x54
 8018172:	81a3      	strhlt	r3, [r4, #12]
 8018174:	bd10      	pop	{r4, pc}

08018176 <__swrite>:
 8018176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801817a:	461f      	mov	r7, r3
 801817c:	898b      	ldrh	r3, [r1, #12]
 801817e:	05db      	lsls	r3, r3, #23
 8018180:	4605      	mov	r5, r0
 8018182:	460c      	mov	r4, r1
 8018184:	4616      	mov	r6, r2
 8018186:	d505      	bpl.n	8018194 <__swrite+0x1e>
 8018188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801818c:	2302      	movs	r3, #2
 801818e:	2200      	movs	r2, #0
 8018190:	f000 f8c0 	bl	8018314 <_lseek_r>
 8018194:	89a3      	ldrh	r3, [r4, #12]
 8018196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801819a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801819e:	81a3      	strh	r3, [r4, #12]
 80181a0:	4632      	mov	r2, r6
 80181a2:	463b      	mov	r3, r7
 80181a4:	4628      	mov	r0, r5
 80181a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80181aa:	f000 b8d7 	b.w	801835c <_write_r>

080181ae <__sseek>:
 80181ae:	b510      	push	{r4, lr}
 80181b0:	460c      	mov	r4, r1
 80181b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181b6:	f000 f8ad 	bl	8018314 <_lseek_r>
 80181ba:	1c43      	adds	r3, r0, #1
 80181bc:	89a3      	ldrh	r3, [r4, #12]
 80181be:	bf15      	itete	ne
 80181c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80181c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80181c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80181ca:	81a3      	strheq	r3, [r4, #12]
 80181cc:	bf18      	it	ne
 80181ce:	81a3      	strhne	r3, [r4, #12]
 80181d0:	bd10      	pop	{r4, pc}

080181d2 <__sclose>:
 80181d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181d6:	f000 b837 	b.w	8018248 <_close_r>

080181da <memcmp>:
 80181da:	b510      	push	{r4, lr}
 80181dc:	3901      	subs	r1, #1
 80181de:	4402      	add	r2, r0
 80181e0:	4290      	cmp	r0, r2
 80181e2:	d101      	bne.n	80181e8 <memcmp+0xe>
 80181e4:	2000      	movs	r0, #0
 80181e6:	e005      	b.n	80181f4 <memcmp+0x1a>
 80181e8:	7803      	ldrb	r3, [r0, #0]
 80181ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80181ee:	42a3      	cmp	r3, r4
 80181f0:	d001      	beq.n	80181f6 <memcmp+0x1c>
 80181f2:	1b18      	subs	r0, r3, r4
 80181f4:	bd10      	pop	{r4, pc}
 80181f6:	3001      	adds	r0, #1
 80181f8:	e7f2      	b.n	80181e0 <memcmp+0x6>

080181fa <memset>:
 80181fa:	4402      	add	r2, r0
 80181fc:	4603      	mov	r3, r0
 80181fe:	4293      	cmp	r3, r2
 8018200:	d100      	bne.n	8018204 <memset+0xa>
 8018202:	4770      	bx	lr
 8018204:	f803 1b01 	strb.w	r1, [r3], #1
 8018208:	e7f9      	b.n	80181fe <memset+0x4>

0801820a <strchr>:
 801820a:	b2c9      	uxtb	r1, r1
 801820c:	4603      	mov	r3, r0
 801820e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018212:	b11a      	cbz	r2, 801821c <strchr+0x12>
 8018214:	428a      	cmp	r2, r1
 8018216:	d1f9      	bne.n	801820c <strchr+0x2>
 8018218:	4618      	mov	r0, r3
 801821a:	4770      	bx	lr
 801821c:	2900      	cmp	r1, #0
 801821e:	bf18      	it	ne
 8018220:	2300      	movne	r3, #0
 8018222:	e7f9      	b.n	8018218 <strchr+0xe>

08018224 <strncmp>:
 8018224:	b510      	push	{r4, lr}
 8018226:	b16a      	cbz	r2, 8018244 <strncmp+0x20>
 8018228:	3901      	subs	r1, #1
 801822a:	1884      	adds	r4, r0, r2
 801822c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018230:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018234:	429a      	cmp	r2, r3
 8018236:	d103      	bne.n	8018240 <strncmp+0x1c>
 8018238:	42a0      	cmp	r0, r4
 801823a:	d001      	beq.n	8018240 <strncmp+0x1c>
 801823c:	2a00      	cmp	r2, #0
 801823e:	d1f5      	bne.n	801822c <strncmp+0x8>
 8018240:	1ad0      	subs	r0, r2, r3
 8018242:	bd10      	pop	{r4, pc}
 8018244:	4610      	mov	r0, r2
 8018246:	e7fc      	b.n	8018242 <strncmp+0x1e>

08018248 <_close_r>:
 8018248:	b538      	push	{r3, r4, r5, lr}
 801824a:	4d06      	ldr	r5, [pc, #24]	; (8018264 <_close_r+0x1c>)
 801824c:	2300      	movs	r3, #0
 801824e:	4604      	mov	r4, r0
 8018250:	4608      	mov	r0, r1
 8018252:	602b      	str	r3, [r5, #0]
 8018254:	f7e8 fcef 	bl	8000c36 <_close>
 8018258:	1c43      	adds	r3, r0, #1
 801825a:	d102      	bne.n	8018262 <_close_r+0x1a>
 801825c:	682b      	ldr	r3, [r5, #0]
 801825e:	b103      	cbz	r3, 8018262 <_close_r+0x1a>
 8018260:	6023      	str	r3, [r4, #0]
 8018262:	bd38      	pop	{r3, r4, r5, pc}
 8018264:	2001102c 	.word	0x2001102c

08018268 <_reclaim_reent>:
 8018268:	4b29      	ldr	r3, [pc, #164]	; (8018310 <_reclaim_reent+0xa8>)
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	4283      	cmp	r3, r0
 801826e:	b570      	push	{r4, r5, r6, lr}
 8018270:	4604      	mov	r4, r0
 8018272:	d04b      	beq.n	801830c <_reclaim_reent+0xa4>
 8018274:	69c3      	ldr	r3, [r0, #28]
 8018276:	b143      	cbz	r3, 801828a <_reclaim_reent+0x22>
 8018278:	68db      	ldr	r3, [r3, #12]
 801827a:	2b00      	cmp	r3, #0
 801827c:	d144      	bne.n	8018308 <_reclaim_reent+0xa0>
 801827e:	69e3      	ldr	r3, [r4, #28]
 8018280:	6819      	ldr	r1, [r3, #0]
 8018282:	b111      	cbz	r1, 801828a <_reclaim_reent+0x22>
 8018284:	4620      	mov	r0, r4
 8018286:	f000 f8cd 	bl	8018424 <_free_r>
 801828a:	6961      	ldr	r1, [r4, #20]
 801828c:	b111      	cbz	r1, 8018294 <_reclaim_reent+0x2c>
 801828e:	4620      	mov	r0, r4
 8018290:	f000 f8c8 	bl	8018424 <_free_r>
 8018294:	69e1      	ldr	r1, [r4, #28]
 8018296:	b111      	cbz	r1, 801829e <_reclaim_reent+0x36>
 8018298:	4620      	mov	r0, r4
 801829a:	f000 f8c3 	bl	8018424 <_free_r>
 801829e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80182a0:	b111      	cbz	r1, 80182a8 <_reclaim_reent+0x40>
 80182a2:	4620      	mov	r0, r4
 80182a4:	f000 f8be 	bl	8018424 <_free_r>
 80182a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80182aa:	b111      	cbz	r1, 80182b2 <_reclaim_reent+0x4a>
 80182ac:	4620      	mov	r0, r4
 80182ae:	f000 f8b9 	bl	8018424 <_free_r>
 80182b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80182b4:	b111      	cbz	r1, 80182bc <_reclaim_reent+0x54>
 80182b6:	4620      	mov	r0, r4
 80182b8:	f000 f8b4 	bl	8018424 <_free_r>
 80182bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80182be:	b111      	cbz	r1, 80182c6 <_reclaim_reent+0x5e>
 80182c0:	4620      	mov	r0, r4
 80182c2:	f000 f8af 	bl	8018424 <_free_r>
 80182c6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80182c8:	b111      	cbz	r1, 80182d0 <_reclaim_reent+0x68>
 80182ca:	4620      	mov	r0, r4
 80182cc:	f000 f8aa 	bl	8018424 <_free_r>
 80182d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80182d2:	b111      	cbz	r1, 80182da <_reclaim_reent+0x72>
 80182d4:	4620      	mov	r0, r4
 80182d6:	f000 f8a5 	bl	8018424 <_free_r>
 80182da:	6a23      	ldr	r3, [r4, #32]
 80182dc:	b1b3      	cbz	r3, 801830c <_reclaim_reent+0xa4>
 80182de:	4620      	mov	r0, r4
 80182e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80182e4:	4718      	bx	r3
 80182e6:	5949      	ldr	r1, [r1, r5]
 80182e8:	b941      	cbnz	r1, 80182fc <_reclaim_reent+0x94>
 80182ea:	3504      	adds	r5, #4
 80182ec:	69e3      	ldr	r3, [r4, #28]
 80182ee:	2d80      	cmp	r5, #128	; 0x80
 80182f0:	68d9      	ldr	r1, [r3, #12]
 80182f2:	d1f8      	bne.n	80182e6 <_reclaim_reent+0x7e>
 80182f4:	4620      	mov	r0, r4
 80182f6:	f000 f895 	bl	8018424 <_free_r>
 80182fa:	e7c0      	b.n	801827e <_reclaim_reent+0x16>
 80182fc:	680e      	ldr	r6, [r1, #0]
 80182fe:	4620      	mov	r0, r4
 8018300:	f000 f890 	bl	8018424 <_free_r>
 8018304:	4631      	mov	r1, r6
 8018306:	e7ef      	b.n	80182e8 <_reclaim_reent+0x80>
 8018308:	2500      	movs	r5, #0
 801830a:	e7ef      	b.n	80182ec <_reclaim_reent+0x84>
 801830c:	bd70      	pop	{r4, r5, r6, pc}
 801830e:	bf00      	nop
 8018310:	2000008c 	.word	0x2000008c

08018314 <_lseek_r>:
 8018314:	b538      	push	{r3, r4, r5, lr}
 8018316:	4d07      	ldr	r5, [pc, #28]	; (8018334 <_lseek_r+0x20>)
 8018318:	4604      	mov	r4, r0
 801831a:	4608      	mov	r0, r1
 801831c:	4611      	mov	r1, r2
 801831e:	2200      	movs	r2, #0
 8018320:	602a      	str	r2, [r5, #0]
 8018322:	461a      	mov	r2, r3
 8018324:	f7e8 fcae 	bl	8000c84 <_lseek>
 8018328:	1c43      	adds	r3, r0, #1
 801832a:	d102      	bne.n	8018332 <_lseek_r+0x1e>
 801832c:	682b      	ldr	r3, [r5, #0]
 801832e:	b103      	cbz	r3, 8018332 <_lseek_r+0x1e>
 8018330:	6023      	str	r3, [r4, #0]
 8018332:	bd38      	pop	{r3, r4, r5, pc}
 8018334:	2001102c 	.word	0x2001102c

08018338 <_read_r>:
 8018338:	b538      	push	{r3, r4, r5, lr}
 801833a:	4d07      	ldr	r5, [pc, #28]	; (8018358 <_read_r+0x20>)
 801833c:	4604      	mov	r4, r0
 801833e:	4608      	mov	r0, r1
 8018340:	4611      	mov	r1, r2
 8018342:	2200      	movs	r2, #0
 8018344:	602a      	str	r2, [r5, #0]
 8018346:	461a      	mov	r2, r3
 8018348:	f7e8 fc3c 	bl	8000bc4 <_read>
 801834c:	1c43      	adds	r3, r0, #1
 801834e:	d102      	bne.n	8018356 <_read_r+0x1e>
 8018350:	682b      	ldr	r3, [r5, #0]
 8018352:	b103      	cbz	r3, 8018356 <_read_r+0x1e>
 8018354:	6023      	str	r3, [r4, #0]
 8018356:	bd38      	pop	{r3, r4, r5, pc}
 8018358:	2001102c 	.word	0x2001102c

0801835c <_write_r>:
 801835c:	b538      	push	{r3, r4, r5, lr}
 801835e:	4d07      	ldr	r5, [pc, #28]	; (801837c <_write_r+0x20>)
 8018360:	4604      	mov	r4, r0
 8018362:	4608      	mov	r0, r1
 8018364:	4611      	mov	r1, r2
 8018366:	2200      	movs	r2, #0
 8018368:	602a      	str	r2, [r5, #0]
 801836a:	461a      	mov	r2, r3
 801836c:	f7e8 fc47 	bl	8000bfe <_write>
 8018370:	1c43      	adds	r3, r0, #1
 8018372:	d102      	bne.n	801837a <_write_r+0x1e>
 8018374:	682b      	ldr	r3, [r5, #0]
 8018376:	b103      	cbz	r3, 801837a <_write_r+0x1e>
 8018378:	6023      	str	r3, [r4, #0]
 801837a:	bd38      	pop	{r3, r4, r5, pc}
 801837c:	2001102c 	.word	0x2001102c

08018380 <__libc_init_array>:
 8018380:	b570      	push	{r4, r5, r6, lr}
 8018382:	4d0d      	ldr	r5, [pc, #52]	; (80183b8 <__libc_init_array+0x38>)
 8018384:	4c0d      	ldr	r4, [pc, #52]	; (80183bc <__libc_init_array+0x3c>)
 8018386:	1b64      	subs	r4, r4, r5
 8018388:	10a4      	asrs	r4, r4, #2
 801838a:	2600      	movs	r6, #0
 801838c:	42a6      	cmp	r6, r4
 801838e:	d109      	bne.n	80183a4 <__libc_init_array+0x24>
 8018390:	4d0b      	ldr	r5, [pc, #44]	; (80183c0 <__libc_init_array+0x40>)
 8018392:	4c0c      	ldr	r4, [pc, #48]	; (80183c4 <__libc_init_array+0x44>)
 8018394:	f000 fe50 	bl	8019038 <_init>
 8018398:	1b64      	subs	r4, r4, r5
 801839a:	10a4      	asrs	r4, r4, #2
 801839c:	2600      	movs	r6, #0
 801839e:	42a6      	cmp	r6, r4
 80183a0:	d105      	bne.n	80183ae <__libc_init_array+0x2e>
 80183a2:	bd70      	pop	{r4, r5, r6, pc}
 80183a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80183a8:	4798      	blx	r3
 80183aa:	3601      	adds	r6, #1
 80183ac:	e7ee      	b.n	801838c <__libc_init_array+0xc>
 80183ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80183b2:	4798      	blx	r3
 80183b4:	3601      	adds	r6, #1
 80183b6:	e7f2      	b.n	801839e <__libc_init_array+0x1e>
 80183b8:	08026f44 	.word	0x08026f44
 80183bc:	08026f44 	.word	0x08026f44
 80183c0:	08026f44 	.word	0x08026f44
 80183c4:	08026f48 	.word	0x08026f48

080183c8 <__retarget_lock_acquire_recursive>:
 80183c8:	4770      	bx	lr

080183ca <__retarget_lock_release_recursive>:
 80183ca:	4770      	bx	lr

080183cc <memcpy>:
 80183cc:	440a      	add	r2, r1
 80183ce:	4291      	cmp	r1, r2
 80183d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80183d4:	d100      	bne.n	80183d8 <memcpy+0xc>
 80183d6:	4770      	bx	lr
 80183d8:	b510      	push	{r4, lr}
 80183da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80183de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80183e2:	4291      	cmp	r1, r2
 80183e4:	d1f9      	bne.n	80183da <memcpy+0xe>
 80183e6:	bd10      	pop	{r4, pc}

080183e8 <__assert_func>:
 80183e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80183ea:	4614      	mov	r4, r2
 80183ec:	461a      	mov	r2, r3
 80183ee:	4b09      	ldr	r3, [pc, #36]	; (8018414 <__assert_func+0x2c>)
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	4605      	mov	r5, r0
 80183f4:	68d8      	ldr	r0, [r3, #12]
 80183f6:	b14c      	cbz	r4, 801840c <__assert_func+0x24>
 80183f8:	4b07      	ldr	r3, [pc, #28]	; (8018418 <__assert_func+0x30>)
 80183fa:	9100      	str	r1, [sp, #0]
 80183fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018400:	4906      	ldr	r1, [pc, #24]	; (801841c <__assert_func+0x34>)
 8018402:	462b      	mov	r3, r5
 8018404:	f000 fc90 	bl	8018d28 <fiprintf>
 8018408:	f000 fd46 	bl	8018e98 <abort>
 801840c:	4b04      	ldr	r3, [pc, #16]	; (8018420 <__assert_func+0x38>)
 801840e:	461c      	mov	r4, r3
 8018410:	e7f3      	b.n	80183fa <__assert_func+0x12>
 8018412:	bf00      	nop
 8018414:	2000008c 	.word	0x2000008c
 8018418:	08026ecb 	.word	0x08026ecb
 801841c:	08026ed8 	.word	0x08026ed8
 8018420:	08026f06 	.word	0x08026f06

08018424 <_free_r>:
 8018424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018426:	2900      	cmp	r1, #0
 8018428:	d044      	beq.n	80184b4 <_free_r+0x90>
 801842a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801842e:	9001      	str	r0, [sp, #4]
 8018430:	2b00      	cmp	r3, #0
 8018432:	f1a1 0404 	sub.w	r4, r1, #4
 8018436:	bfb8      	it	lt
 8018438:	18e4      	addlt	r4, r4, r3
 801843a:	f000 f8e7 	bl	801860c <__malloc_lock>
 801843e:	4a1e      	ldr	r2, [pc, #120]	; (80184b8 <_free_r+0x94>)
 8018440:	9801      	ldr	r0, [sp, #4]
 8018442:	6813      	ldr	r3, [r2, #0]
 8018444:	b933      	cbnz	r3, 8018454 <_free_r+0x30>
 8018446:	6063      	str	r3, [r4, #4]
 8018448:	6014      	str	r4, [r2, #0]
 801844a:	b003      	add	sp, #12
 801844c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018450:	f000 b8e2 	b.w	8018618 <__malloc_unlock>
 8018454:	42a3      	cmp	r3, r4
 8018456:	d908      	bls.n	801846a <_free_r+0x46>
 8018458:	6825      	ldr	r5, [r4, #0]
 801845a:	1961      	adds	r1, r4, r5
 801845c:	428b      	cmp	r3, r1
 801845e:	bf01      	itttt	eq
 8018460:	6819      	ldreq	r1, [r3, #0]
 8018462:	685b      	ldreq	r3, [r3, #4]
 8018464:	1949      	addeq	r1, r1, r5
 8018466:	6021      	streq	r1, [r4, #0]
 8018468:	e7ed      	b.n	8018446 <_free_r+0x22>
 801846a:	461a      	mov	r2, r3
 801846c:	685b      	ldr	r3, [r3, #4]
 801846e:	b10b      	cbz	r3, 8018474 <_free_r+0x50>
 8018470:	42a3      	cmp	r3, r4
 8018472:	d9fa      	bls.n	801846a <_free_r+0x46>
 8018474:	6811      	ldr	r1, [r2, #0]
 8018476:	1855      	adds	r5, r2, r1
 8018478:	42a5      	cmp	r5, r4
 801847a:	d10b      	bne.n	8018494 <_free_r+0x70>
 801847c:	6824      	ldr	r4, [r4, #0]
 801847e:	4421      	add	r1, r4
 8018480:	1854      	adds	r4, r2, r1
 8018482:	42a3      	cmp	r3, r4
 8018484:	6011      	str	r1, [r2, #0]
 8018486:	d1e0      	bne.n	801844a <_free_r+0x26>
 8018488:	681c      	ldr	r4, [r3, #0]
 801848a:	685b      	ldr	r3, [r3, #4]
 801848c:	6053      	str	r3, [r2, #4]
 801848e:	440c      	add	r4, r1
 8018490:	6014      	str	r4, [r2, #0]
 8018492:	e7da      	b.n	801844a <_free_r+0x26>
 8018494:	d902      	bls.n	801849c <_free_r+0x78>
 8018496:	230c      	movs	r3, #12
 8018498:	6003      	str	r3, [r0, #0]
 801849a:	e7d6      	b.n	801844a <_free_r+0x26>
 801849c:	6825      	ldr	r5, [r4, #0]
 801849e:	1961      	adds	r1, r4, r5
 80184a0:	428b      	cmp	r3, r1
 80184a2:	bf04      	itt	eq
 80184a4:	6819      	ldreq	r1, [r3, #0]
 80184a6:	685b      	ldreq	r3, [r3, #4]
 80184a8:	6063      	str	r3, [r4, #4]
 80184aa:	bf04      	itt	eq
 80184ac:	1949      	addeq	r1, r1, r5
 80184ae:	6021      	streq	r1, [r4, #0]
 80184b0:	6054      	str	r4, [r2, #4]
 80184b2:	e7ca      	b.n	801844a <_free_r+0x26>
 80184b4:	b003      	add	sp, #12
 80184b6:	bd30      	pop	{r4, r5, pc}
 80184b8:	20011034 	.word	0x20011034

080184bc <malloc>:
 80184bc:	4b02      	ldr	r3, [pc, #8]	; (80184c8 <malloc+0xc>)
 80184be:	4601      	mov	r1, r0
 80184c0:	6818      	ldr	r0, [r3, #0]
 80184c2:	f000 b823 	b.w	801850c <_malloc_r>
 80184c6:	bf00      	nop
 80184c8:	2000008c 	.word	0x2000008c

080184cc <sbrk_aligned>:
 80184cc:	b570      	push	{r4, r5, r6, lr}
 80184ce:	4e0e      	ldr	r6, [pc, #56]	; (8018508 <sbrk_aligned+0x3c>)
 80184d0:	460c      	mov	r4, r1
 80184d2:	6831      	ldr	r1, [r6, #0]
 80184d4:	4605      	mov	r5, r0
 80184d6:	b911      	cbnz	r1, 80184de <sbrk_aligned+0x12>
 80184d8:	f000 fcce 	bl	8018e78 <_sbrk_r>
 80184dc:	6030      	str	r0, [r6, #0]
 80184de:	4621      	mov	r1, r4
 80184e0:	4628      	mov	r0, r5
 80184e2:	f000 fcc9 	bl	8018e78 <_sbrk_r>
 80184e6:	1c43      	adds	r3, r0, #1
 80184e8:	d00a      	beq.n	8018500 <sbrk_aligned+0x34>
 80184ea:	1cc4      	adds	r4, r0, #3
 80184ec:	f024 0403 	bic.w	r4, r4, #3
 80184f0:	42a0      	cmp	r0, r4
 80184f2:	d007      	beq.n	8018504 <sbrk_aligned+0x38>
 80184f4:	1a21      	subs	r1, r4, r0
 80184f6:	4628      	mov	r0, r5
 80184f8:	f000 fcbe 	bl	8018e78 <_sbrk_r>
 80184fc:	3001      	adds	r0, #1
 80184fe:	d101      	bne.n	8018504 <sbrk_aligned+0x38>
 8018500:	f04f 34ff 	mov.w	r4, #4294967295
 8018504:	4620      	mov	r0, r4
 8018506:	bd70      	pop	{r4, r5, r6, pc}
 8018508:	20011038 	.word	0x20011038

0801850c <_malloc_r>:
 801850c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018510:	1ccd      	adds	r5, r1, #3
 8018512:	f025 0503 	bic.w	r5, r5, #3
 8018516:	3508      	adds	r5, #8
 8018518:	2d0c      	cmp	r5, #12
 801851a:	bf38      	it	cc
 801851c:	250c      	movcc	r5, #12
 801851e:	2d00      	cmp	r5, #0
 8018520:	4607      	mov	r7, r0
 8018522:	db01      	blt.n	8018528 <_malloc_r+0x1c>
 8018524:	42a9      	cmp	r1, r5
 8018526:	d905      	bls.n	8018534 <_malloc_r+0x28>
 8018528:	230c      	movs	r3, #12
 801852a:	603b      	str	r3, [r7, #0]
 801852c:	2600      	movs	r6, #0
 801852e:	4630      	mov	r0, r6
 8018530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018534:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8018608 <_malloc_r+0xfc>
 8018538:	f000 f868 	bl	801860c <__malloc_lock>
 801853c:	f8d8 3000 	ldr.w	r3, [r8]
 8018540:	461c      	mov	r4, r3
 8018542:	bb5c      	cbnz	r4, 801859c <_malloc_r+0x90>
 8018544:	4629      	mov	r1, r5
 8018546:	4638      	mov	r0, r7
 8018548:	f7ff ffc0 	bl	80184cc <sbrk_aligned>
 801854c:	1c43      	adds	r3, r0, #1
 801854e:	4604      	mov	r4, r0
 8018550:	d155      	bne.n	80185fe <_malloc_r+0xf2>
 8018552:	f8d8 4000 	ldr.w	r4, [r8]
 8018556:	4626      	mov	r6, r4
 8018558:	2e00      	cmp	r6, #0
 801855a:	d145      	bne.n	80185e8 <_malloc_r+0xdc>
 801855c:	2c00      	cmp	r4, #0
 801855e:	d048      	beq.n	80185f2 <_malloc_r+0xe6>
 8018560:	6823      	ldr	r3, [r4, #0]
 8018562:	4631      	mov	r1, r6
 8018564:	4638      	mov	r0, r7
 8018566:	eb04 0903 	add.w	r9, r4, r3
 801856a:	f000 fc85 	bl	8018e78 <_sbrk_r>
 801856e:	4581      	cmp	r9, r0
 8018570:	d13f      	bne.n	80185f2 <_malloc_r+0xe6>
 8018572:	6821      	ldr	r1, [r4, #0]
 8018574:	1a6d      	subs	r5, r5, r1
 8018576:	4629      	mov	r1, r5
 8018578:	4638      	mov	r0, r7
 801857a:	f7ff ffa7 	bl	80184cc <sbrk_aligned>
 801857e:	3001      	adds	r0, #1
 8018580:	d037      	beq.n	80185f2 <_malloc_r+0xe6>
 8018582:	6823      	ldr	r3, [r4, #0]
 8018584:	442b      	add	r3, r5
 8018586:	6023      	str	r3, [r4, #0]
 8018588:	f8d8 3000 	ldr.w	r3, [r8]
 801858c:	2b00      	cmp	r3, #0
 801858e:	d038      	beq.n	8018602 <_malloc_r+0xf6>
 8018590:	685a      	ldr	r2, [r3, #4]
 8018592:	42a2      	cmp	r2, r4
 8018594:	d12b      	bne.n	80185ee <_malloc_r+0xe2>
 8018596:	2200      	movs	r2, #0
 8018598:	605a      	str	r2, [r3, #4]
 801859a:	e00f      	b.n	80185bc <_malloc_r+0xb0>
 801859c:	6822      	ldr	r2, [r4, #0]
 801859e:	1b52      	subs	r2, r2, r5
 80185a0:	d41f      	bmi.n	80185e2 <_malloc_r+0xd6>
 80185a2:	2a0b      	cmp	r2, #11
 80185a4:	d917      	bls.n	80185d6 <_malloc_r+0xca>
 80185a6:	1961      	adds	r1, r4, r5
 80185a8:	42a3      	cmp	r3, r4
 80185aa:	6025      	str	r5, [r4, #0]
 80185ac:	bf18      	it	ne
 80185ae:	6059      	strne	r1, [r3, #4]
 80185b0:	6863      	ldr	r3, [r4, #4]
 80185b2:	bf08      	it	eq
 80185b4:	f8c8 1000 	streq.w	r1, [r8]
 80185b8:	5162      	str	r2, [r4, r5]
 80185ba:	604b      	str	r3, [r1, #4]
 80185bc:	4638      	mov	r0, r7
 80185be:	f104 060b 	add.w	r6, r4, #11
 80185c2:	f000 f829 	bl	8018618 <__malloc_unlock>
 80185c6:	f026 0607 	bic.w	r6, r6, #7
 80185ca:	1d23      	adds	r3, r4, #4
 80185cc:	1af2      	subs	r2, r6, r3
 80185ce:	d0ae      	beq.n	801852e <_malloc_r+0x22>
 80185d0:	1b9b      	subs	r3, r3, r6
 80185d2:	50a3      	str	r3, [r4, r2]
 80185d4:	e7ab      	b.n	801852e <_malloc_r+0x22>
 80185d6:	42a3      	cmp	r3, r4
 80185d8:	6862      	ldr	r2, [r4, #4]
 80185da:	d1dd      	bne.n	8018598 <_malloc_r+0x8c>
 80185dc:	f8c8 2000 	str.w	r2, [r8]
 80185e0:	e7ec      	b.n	80185bc <_malloc_r+0xb0>
 80185e2:	4623      	mov	r3, r4
 80185e4:	6864      	ldr	r4, [r4, #4]
 80185e6:	e7ac      	b.n	8018542 <_malloc_r+0x36>
 80185e8:	4634      	mov	r4, r6
 80185ea:	6876      	ldr	r6, [r6, #4]
 80185ec:	e7b4      	b.n	8018558 <_malloc_r+0x4c>
 80185ee:	4613      	mov	r3, r2
 80185f0:	e7cc      	b.n	801858c <_malloc_r+0x80>
 80185f2:	230c      	movs	r3, #12
 80185f4:	603b      	str	r3, [r7, #0]
 80185f6:	4638      	mov	r0, r7
 80185f8:	f000 f80e 	bl	8018618 <__malloc_unlock>
 80185fc:	e797      	b.n	801852e <_malloc_r+0x22>
 80185fe:	6025      	str	r5, [r4, #0]
 8018600:	e7dc      	b.n	80185bc <_malloc_r+0xb0>
 8018602:	605b      	str	r3, [r3, #4]
 8018604:	deff      	udf	#255	; 0xff
 8018606:	bf00      	nop
 8018608:	20011034 	.word	0x20011034

0801860c <__malloc_lock>:
 801860c:	4801      	ldr	r0, [pc, #4]	; (8018614 <__malloc_lock+0x8>)
 801860e:	f7ff bedb 	b.w	80183c8 <__retarget_lock_acquire_recursive>
 8018612:	bf00      	nop
 8018614:	20011030 	.word	0x20011030

08018618 <__malloc_unlock>:
 8018618:	4801      	ldr	r0, [pc, #4]	; (8018620 <__malloc_unlock+0x8>)
 801861a:	f7ff bed6 	b.w	80183ca <__retarget_lock_release_recursive>
 801861e:	bf00      	nop
 8018620:	20011030 	.word	0x20011030

08018624 <__sfputc_r>:
 8018624:	6893      	ldr	r3, [r2, #8]
 8018626:	3b01      	subs	r3, #1
 8018628:	2b00      	cmp	r3, #0
 801862a:	b410      	push	{r4}
 801862c:	6093      	str	r3, [r2, #8]
 801862e:	da08      	bge.n	8018642 <__sfputc_r+0x1e>
 8018630:	6994      	ldr	r4, [r2, #24]
 8018632:	42a3      	cmp	r3, r4
 8018634:	db01      	blt.n	801863a <__sfputc_r+0x16>
 8018636:	290a      	cmp	r1, #10
 8018638:	d103      	bne.n	8018642 <__sfputc_r+0x1e>
 801863a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801863e:	f000 bb85 	b.w	8018d4c <__swbuf_r>
 8018642:	6813      	ldr	r3, [r2, #0]
 8018644:	1c58      	adds	r0, r3, #1
 8018646:	6010      	str	r0, [r2, #0]
 8018648:	7019      	strb	r1, [r3, #0]
 801864a:	4608      	mov	r0, r1
 801864c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018650:	4770      	bx	lr

08018652 <__sfputs_r>:
 8018652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018654:	4606      	mov	r6, r0
 8018656:	460f      	mov	r7, r1
 8018658:	4614      	mov	r4, r2
 801865a:	18d5      	adds	r5, r2, r3
 801865c:	42ac      	cmp	r4, r5
 801865e:	d101      	bne.n	8018664 <__sfputs_r+0x12>
 8018660:	2000      	movs	r0, #0
 8018662:	e007      	b.n	8018674 <__sfputs_r+0x22>
 8018664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018668:	463a      	mov	r2, r7
 801866a:	4630      	mov	r0, r6
 801866c:	f7ff ffda 	bl	8018624 <__sfputc_r>
 8018670:	1c43      	adds	r3, r0, #1
 8018672:	d1f3      	bne.n	801865c <__sfputs_r+0xa>
 8018674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018678 <_vfiprintf_r>:
 8018678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801867c:	460d      	mov	r5, r1
 801867e:	b09d      	sub	sp, #116	; 0x74
 8018680:	4614      	mov	r4, r2
 8018682:	4698      	mov	r8, r3
 8018684:	4606      	mov	r6, r0
 8018686:	b118      	cbz	r0, 8018690 <_vfiprintf_r+0x18>
 8018688:	6a03      	ldr	r3, [r0, #32]
 801868a:	b90b      	cbnz	r3, 8018690 <_vfiprintf_r+0x18>
 801868c:	f7ff fd1a 	bl	80180c4 <__sinit>
 8018690:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018692:	07d9      	lsls	r1, r3, #31
 8018694:	d405      	bmi.n	80186a2 <_vfiprintf_r+0x2a>
 8018696:	89ab      	ldrh	r3, [r5, #12]
 8018698:	059a      	lsls	r2, r3, #22
 801869a:	d402      	bmi.n	80186a2 <_vfiprintf_r+0x2a>
 801869c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801869e:	f7ff fe93 	bl	80183c8 <__retarget_lock_acquire_recursive>
 80186a2:	89ab      	ldrh	r3, [r5, #12]
 80186a4:	071b      	lsls	r3, r3, #28
 80186a6:	d501      	bpl.n	80186ac <_vfiprintf_r+0x34>
 80186a8:	692b      	ldr	r3, [r5, #16]
 80186aa:	b99b      	cbnz	r3, 80186d4 <_vfiprintf_r+0x5c>
 80186ac:	4629      	mov	r1, r5
 80186ae:	4630      	mov	r0, r6
 80186b0:	f000 fb8a 	bl	8018dc8 <__swsetup_r>
 80186b4:	b170      	cbz	r0, 80186d4 <_vfiprintf_r+0x5c>
 80186b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80186b8:	07dc      	lsls	r4, r3, #31
 80186ba:	d504      	bpl.n	80186c6 <_vfiprintf_r+0x4e>
 80186bc:	f04f 30ff 	mov.w	r0, #4294967295
 80186c0:	b01d      	add	sp, #116	; 0x74
 80186c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186c6:	89ab      	ldrh	r3, [r5, #12]
 80186c8:	0598      	lsls	r0, r3, #22
 80186ca:	d4f7      	bmi.n	80186bc <_vfiprintf_r+0x44>
 80186cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80186ce:	f7ff fe7c 	bl	80183ca <__retarget_lock_release_recursive>
 80186d2:	e7f3      	b.n	80186bc <_vfiprintf_r+0x44>
 80186d4:	2300      	movs	r3, #0
 80186d6:	9309      	str	r3, [sp, #36]	; 0x24
 80186d8:	2320      	movs	r3, #32
 80186da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80186de:	f8cd 800c 	str.w	r8, [sp, #12]
 80186e2:	2330      	movs	r3, #48	; 0x30
 80186e4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8018898 <_vfiprintf_r+0x220>
 80186e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80186ec:	f04f 0901 	mov.w	r9, #1
 80186f0:	4623      	mov	r3, r4
 80186f2:	469a      	mov	sl, r3
 80186f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80186f8:	b10a      	cbz	r2, 80186fe <_vfiprintf_r+0x86>
 80186fa:	2a25      	cmp	r2, #37	; 0x25
 80186fc:	d1f9      	bne.n	80186f2 <_vfiprintf_r+0x7a>
 80186fe:	ebba 0b04 	subs.w	fp, sl, r4
 8018702:	d00b      	beq.n	801871c <_vfiprintf_r+0xa4>
 8018704:	465b      	mov	r3, fp
 8018706:	4622      	mov	r2, r4
 8018708:	4629      	mov	r1, r5
 801870a:	4630      	mov	r0, r6
 801870c:	f7ff ffa1 	bl	8018652 <__sfputs_r>
 8018710:	3001      	adds	r0, #1
 8018712:	f000 80a9 	beq.w	8018868 <_vfiprintf_r+0x1f0>
 8018716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018718:	445a      	add	r2, fp
 801871a:	9209      	str	r2, [sp, #36]	; 0x24
 801871c:	f89a 3000 	ldrb.w	r3, [sl]
 8018720:	2b00      	cmp	r3, #0
 8018722:	f000 80a1 	beq.w	8018868 <_vfiprintf_r+0x1f0>
 8018726:	2300      	movs	r3, #0
 8018728:	f04f 32ff 	mov.w	r2, #4294967295
 801872c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018730:	f10a 0a01 	add.w	sl, sl, #1
 8018734:	9304      	str	r3, [sp, #16]
 8018736:	9307      	str	r3, [sp, #28]
 8018738:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801873c:	931a      	str	r3, [sp, #104]	; 0x68
 801873e:	4654      	mov	r4, sl
 8018740:	2205      	movs	r2, #5
 8018742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018746:	4854      	ldr	r0, [pc, #336]	; (8018898 <_vfiprintf_r+0x220>)
 8018748:	f7e7 fd6a 	bl	8000220 <memchr>
 801874c:	9a04      	ldr	r2, [sp, #16]
 801874e:	b9d8      	cbnz	r0, 8018788 <_vfiprintf_r+0x110>
 8018750:	06d1      	lsls	r1, r2, #27
 8018752:	bf44      	itt	mi
 8018754:	2320      	movmi	r3, #32
 8018756:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801875a:	0713      	lsls	r3, r2, #28
 801875c:	bf44      	itt	mi
 801875e:	232b      	movmi	r3, #43	; 0x2b
 8018760:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018764:	f89a 3000 	ldrb.w	r3, [sl]
 8018768:	2b2a      	cmp	r3, #42	; 0x2a
 801876a:	d015      	beq.n	8018798 <_vfiprintf_r+0x120>
 801876c:	9a07      	ldr	r2, [sp, #28]
 801876e:	4654      	mov	r4, sl
 8018770:	2000      	movs	r0, #0
 8018772:	f04f 0c0a 	mov.w	ip, #10
 8018776:	4621      	mov	r1, r4
 8018778:	f811 3b01 	ldrb.w	r3, [r1], #1
 801877c:	3b30      	subs	r3, #48	; 0x30
 801877e:	2b09      	cmp	r3, #9
 8018780:	d94d      	bls.n	801881e <_vfiprintf_r+0x1a6>
 8018782:	b1b0      	cbz	r0, 80187b2 <_vfiprintf_r+0x13a>
 8018784:	9207      	str	r2, [sp, #28]
 8018786:	e014      	b.n	80187b2 <_vfiprintf_r+0x13a>
 8018788:	eba0 0308 	sub.w	r3, r0, r8
 801878c:	fa09 f303 	lsl.w	r3, r9, r3
 8018790:	4313      	orrs	r3, r2
 8018792:	9304      	str	r3, [sp, #16]
 8018794:	46a2      	mov	sl, r4
 8018796:	e7d2      	b.n	801873e <_vfiprintf_r+0xc6>
 8018798:	9b03      	ldr	r3, [sp, #12]
 801879a:	1d19      	adds	r1, r3, #4
 801879c:	681b      	ldr	r3, [r3, #0]
 801879e:	9103      	str	r1, [sp, #12]
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	bfbb      	ittet	lt
 80187a4:	425b      	neglt	r3, r3
 80187a6:	f042 0202 	orrlt.w	r2, r2, #2
 80187aa:	9307      	strge	r3, [sp, #28]
 80187ac:	9307      	strlt	r3, [sp, #28]
 80187ae:	bfb8      	it	lt
 80187b0:	9204      	strlt	r2, [sp, #16]
 80187b2:	7823      	ldrb	r3, [r4, #0]
 80187b4:	2b2e      	cmp	r3, #46	; 0x2e
 80187b6:	d10c      	bne.n	80187d2 <_vfiprintf_r+0x15a>
 80187b8:	7863      	ldrb	r3, [r4, #1]
 80187ba:	2b2a      	cmp	r3, #42	; 0x2a
 80187bc:	d134      	bne.n	8018828 <_vfiprintf_r+0x1b0>
 80187be:	9b03      	ldr	r3, [sp, #12]
 80187c0:	1d1a      	adds	r2, r3, #4
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	9203      	str	r2, [sp, #12]
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	bfb8      	it	lt
 80187ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80187ce:	3402      	adds	r4, #2
 80187d0:	9305      	str	r3, [sp, #20]
 80187d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80188a8 <_vfiprintf_r+0x230>
 80187d6:	7821      	ldrb	r1, [r4, #0]
 80187d8:	2203      	movs	r2, #3
 80187da:	4650      	mov	r0, sl
 80187dc:	f7e7 fd20 	bl	8000220 <memchr>
 80187e0:	b138      	cbz	r0, 80187f2 <_vfiprintf_r+0x17a>
 80187e2:	9b04      	ldr	r3, [sp, #16]
 80187e4:	eba0 000a 	sub.w	r0, r0, sl
 80187e8:	2240      	movs	r2, #64	; 0x40
 80187ea:	4082      	lsls	r2, r0
 80187ec:	4313      	orrs	r3, r2
 80187ee:	3401      	adds	r4, #1
 80187f0:	9304      	str	r3, [sp, #16]
 80187f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80187f6:	4829      	ldr	r0, [pc, #164]	; (801889c <_vfiprintf_r+0x224>)
 80187f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80187fc:	2206      	movs	r2, #6
 80187fe:	f7e7 fd0f 	bl	8000220 <memchr>
 8018802:	2800      	cmp	r0, #0
 8018804:	d03f      	beq.n	8018886 <_vfiprintf_r+0x20e>
 8018806:	4b26      	ldr	r3, [pc, #152]	; (80188a0 <_vfiprintf_r+0x228>)
 8018808:	bb1b      	cbnz	r3, 8018852 <_vfiprintf_r+0x1da>
 801880a:	9b03      	ldr	r3, [sp, #12]
 801880c:	3307      	adds	r3, #7
 801880e:	f023 0307 	bic.w	r3, r3, #7
 8018812:	3308      	adds	r3, #8
 8018814:	9303      	str	r3, [sp, #12]
 8018816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018818:	443b      	add	r3, r7
 801881a:	9309      	str	r3, [sp, #36]	; 0x24
 801881c:	e768      	b.n	80186f0 <_vfiprintf_r+0x78>
 801881e:	fb0c 3202 	mla	r2, ip, r2, r3
 8018822:	460c      	mov	r4, r1
 8018824:	2001      	movs	r0, #1
 8018826:	e7a6      	b.n	8018776 <_vfiprintf_r+0xfe>
 8018828:	2300      	movs	r3, #0
 801882a:	3401      	adds	r4, #1
 801882c:	9305      	str	r3, [sp, #20]
 801882e:	4619      	mov	r1, r3
 8018830:	f04f 0c0a 	mov.w	ip, #10
 8018834:	4620      	mov	r0, r4
 8018836:	f810 2b01 	ldrb.w	r2, [r0], #1
 801883a:	3a30      	subs	r2, #48	; 0x30
 801883c:	2a09      	cmp	r2, #9
 801883e:	d903      	bls.n	8018848 <_vfiprintf_r+0x1d0>
 8018840:	2b00      	cmp	r3, #0
 8018842:	d0c6      	beq.n	80187d2 <_vfiprintf_r+0x15a>
 8018844:	9105      	str	r1, [sp, #20]
 8018846:	e7c4      	b.n	80187d2 <_vfiprintf_r+0x15a>
 8018848:	fb0c 2101 	mla	r1, ip, r1, r2
 801884c:	4604      	mov	r4, r0
 801884e:	2301      	movs	r3, #1
 8018850:	e7f0      	b.n	8018834 <_vfiprintf_r+0x1bc>
 8018852:	ab03      	add	r3, sp, #12
 8018854:	9300      	str	r3, [sp, #0]
 8018856:	462a      	mov	r2, r5
 8018858:	4b12      	ldr	r3, [pc, #72]	; (80188a4 <_vfiprintf_r+0x22c>)
 801885a:	a904      	add	r1, sp, #16
 801885c:	4630      	mov	r0, r6
 801885e:	f3af 8000 	nop.w
 8018862:	4607      	mov	r7, r0
 8018864:	1c78      	adds	r0, r7, #1
 8018866:	d1d6      	bne.n	8018816 <_vfiprintf_r+0x19e>
 8018868:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801886a:	07d9      	lsls	r1, r3, #31
 801886c:	d405      	bmi.n	801887a <_vfiprintf_r+0x202>
 801886e:	89ab      	ldrh	r3, [r5, #12]
 8018870:	059a      	lsls	r2, r3, #22
 8018872:	d402      	bmi.n	801887a <_vfiprintf_r+0x202>
 8018874:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018876:	f7ff fda8 	bl	80183ca <__retarget_lock_release_recursive>
 801887a:	89ab      	ldrh	r3, [r5, #12]
 801887c:	065b      	lsls	r3, r3, #25
 801887e:	f53f af1d 	bmi.w	80186bc <_vfiprintf_r+0x44>
 8018882:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018884:	e71c      	b.n	80186c0 <_vfiprintf_r+0x48>
 8018886:	ab03      	add	r3, sp, #12
 8018888:	9300      	str	r3, [sp, #0]
 801888a:	462a      	mov	r2, r5
 801888c:	4b05      	ldr	r3, [pc, #20]	; (80188a4 <_vfiprintf_r+0x22c>)
 801888e:	a904      	add	r1, sp, #16
 8018890:	4630      	mov	r0, r6
 8018892:	f000 f879 	bl	8018988 <_printf_i>
 8018896:	e7e4      	b.n	8018862 <_vfiprintf_r+0x1ea>
 8018898:	08026f07 	.word	0x08026f07
 801889c:	08026f11 	.word	0x08026f11
 80188a0:	00000000 	.word	0x00000000
 80188a4:	08018653 	.word	0x08018653
 80188a8:	08026f0d 	.word	0x08026f0d

080188ac <_printf_common>:
 80188ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80188b0:	4616      	mov	r6, r2
 80188b2:	4699      	mov	r9, r3
 80188b4:	688a      	ldr	r2, [r1, #8]
 80188b6:	690b      	ldr	r3, [r1, #16]
 80188b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80188bc:	4293      	cmp	r3, r2
 80188be:	bfb8      	it	lt
 80188c0:	4613      	movlt	r3, r2
 80188c2:	6033      	str	r3, [r6, #0]
 80188c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80188c8:	4607      	mov	r7, r0
 80188ca:	460c      	mov	r4, r1
 80188cc:	b10a      	cbz	r2, 80188d2 <_printf_common+0x26>
 80188ce:	3301      	adds	r3, #1
 80188d0:	6033      	str	r3, [r6, #0]
 80188d2:	6823      	ldr	r3, [r4, #0]
 80188d4:	0699      	lsls	r1, r3, #26
 80188d6:	bf42      	ittt	mi
 80188d8:	6833      	ldrmi	r3, [r6, #0]
 80188da:	3302      	addmi	r3, #2
 80188dc:	6033      	strmi	r3, [r6, #0]
 80188de:	6825      	ldr	r5, [r4, #0]
 80188e0:	f015 0506 	ands.w	r5, r5, #6
 80188e4:	d106      	bne.n	80188f4 <_printf_common+0x48>
 80188e6:	f104 0a19 	add.w	sl, r4, #25
 80188ea:	68e3      	ldr	r3, [r4, #12]
 80188ec:	6832      	ldr	r2, [r6, #0]
 80188ee:	1a9b      	subs	r3, r3, r2
 80188f0:	42ab      	cmp	r3, r5
 80188f2:	dc26      	bgt.n	8018942 <_printf_common+0x96>
 80188f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80188f8:	1e13      	subs	r3, r2, #0
 80188fa:	6822      	ldr	r2, [r4, #0]
 80188fc:	bf18      	it	ne
 80188fe:	2301      	movne	r3, #1
 8018900:	0692      	lsls	r2, r2, #26
 8018902:	d42b      	bmi.n	801895c <_printf_common+0xb0>
 8018904:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018908:	4649      	mov	r1, r9
 801890a:	4638      	mov	r0, r7
 801890c:	47c0      	blx	r8
 801890e:	3001      	adds	r0, #1
 8018910:	d01e      	beq.n	8018950 <_printf_common+0xa4>
 8018912:	6823      	ldr	r3, [r4, #0]
 8018914:	6922      	ldr	r2, [r4, #16]
 8018916:	f003 0306 	and.w	r3, r3, #6
 801891a:	2b04      	cmp	r3, #4
 801891c:	bf02      	ittt	eq
 801891e:	68e5      	ldreq	r5, [r4, #12]
 8018920:	6833      	ldreq	r3, [r6, #0]
 8018922:	1aed      	subeq	r5, r5, r3
 8018924:	68a3      	ldr	r3, [r4, #8]
 8018926:	bf0c      	ite	eq
 8018928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801892c:	2500      	movne	r5, #0
 801892e:	4293      	cmp	r3, r2
 8018930:	bfc4      	itt	gt
 8018932:	1a9b      	subgt	r3, r3, r2
 8018934:	18ed      	addgt	r5, r5, r3
 8018936:	2600      	movs	r6, #0
 8018938:	341a      	adds	r4, #26
 801893a:	42b5      	cmp	r5, r6
 801893c:	d11a      	bne.n	8018974 <_printf_common+0xc8>
 801893e:	2000      	movs	r0, #0
 8018940:	e008      	b.n	8018954 <_printf_common+0xa8>
 8018942:	2301      	movs	r3, #1
 8018944:	4652      	mov	r2, sl
 8018946:	4649      	mov	r1, r9
 8018948:	4638      	mov	r0, r7
 801894a:	47c0      	blx	r8
 801894c:	3001      	adds	r0, #1
 801894e:	d103      	bne.n	8018958 <_printf_common+0xac>
 8018950:	f04f 30ff 	mov.w	r0, #4294967295
 8018954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018958:	3501      	adds	r5, #1
 801895a:	e7c6      	b.n	80188ea <_printf_common+0x3e>
 801895c:	18e1      	adds	r1, r4, r3
 801895e:	1c5a      	adds	r2, r3, #1
 8018960:	2030      	movs	r0, #48	; 0x30
 8018962:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018966:	4422      	add	r2, r4
 8018968:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801896c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018970:	3302      	adds	r3, #2
 8018972:	e7c7      	b.n	8018904 <_printf_common+0x58>
 8018974:	2301      	movs	r3, #1
 8018976:	4622      	mov	r2, r4
 8018978:	4649      	mov	r1, r9
 801897a:	4638      	mov	r0, r7
 801897c:	47c0      	blx	r8
 801897e:	3001      	adds	r0, #1
 8018980:	d0e6      	beq.n	8018950 <_printf_common+0xa4>
 8018982:	3601      	adds	r6, #1
 8018984:	e7d9      	b.n	801893a <_printf_common+0x8e>
	...

08018988 <_printf_i>:
 8018988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801898c:	7e0f      	ldrb	r7, [r1, #24]
 801898e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018990:	2f78      	cmp	r7, #120	; 0x78
 8018992:	4691      	mov	r9, r2
 8018994:	4680      	mov	r8, r0
 8018996:	460c      	mov	r4, r1
 8018998:	469a      	mov	sl, r3
 801899a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801899e:	d807      	bhi.n	80189b0 <_printf_i+0x28>
 80189a0:	2f62      	cmp	r7, #98	; 0x62
 80189a2:	d80a      	bhi.n	80189ba <_printf_i+0x32>
 80189a4:	2f00      	cmp	r7, #0
 80189a6:	f000 80d4 	beq.w	8018b52 <_printf_i+0x1ca>
 80189aa:	2f58      	cmp	r7, #88	; 0x58
 80189ac:	f000 80c0 	beq.w	8018b30 <_printf_i+0x1a8>
 80189b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80189b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80189b8:	e03a      	b.n	8018a30 <_printf_i+0xa8>
 80189ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80189be:	2b15      	cmp	r3, #21
 80189c0:	d8f6      	bhi.n	80189b0 <_printf_i+0x28>
 80189c2:	a101      	add	r1, pc, #4	; (adr r1, 80189c8 <_printf_i+0x40>)
 80189c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80189c8:	08018a21 	.word	0x08018a21
 80189cc:	08018a35 	.word	0x08018a35
 80189d0:	080189b1 	.word	0x080189b1
 80189d4:	080189b1 	.word	0x080189b1
 80189d8:	080189b1 	.word	0x080189b1
 80189dc:	080189b1 	.word	0x080189b1
 80189e0:	08018a35 	.word	0x08018a35
 80189e4:	080189b1 	.word	0x080189b1
 80189e8:	080189b1 	.word	0x080189b1
 80189ec:	080189b1 	.word	0x080189b1
 80189f0:	080189b1 	.word	0x080189b1
 80189f4:	08018b39 	.word	0x08018b39
 80189f8:	08018a61 	.word	0x08018a61
 80189fc:	08018af3 	.word	0x08018af3
 8018a00:	080189b1 	.word	0x080189b1
 8018a04:	080189b1 	.word	0x080189b1
 8018a08:	08018b5b 	.word	0x08018b5b
 8018a0c:	080189b1 	.word	0x080189b1
 8018a10:	08018a61 	.word	0x08018a61
 8018a14:	080189b1 	.word	0x080189b1
 8018a18:	080189b1 	.word	0x080189b1
 8018a1c:	08018afb 	.word	0x08018afb
 8018a20:	682b      	ldr	r3, [r5, #0]
 8018a22:	1d1a      	adds	r2, r3, #4
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	602a      	str	r2, [r5, #0]
 8018a28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018a2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018a30:	2301      	movs	r3, #1
 8018a32:	e09f      	b.n	8018b74 <_printf_i+0x1ec>
 8018a34:	6820      	ldr	r0, [r4, #0]
 8018a36:	682b      	ldr	r3, [r5, #0]
 8018a38:	0607      	lsls	r7, r0, #24
 8018a3a:	f103 0104 	add.w	r1, r3, #4
 8018a3e:	6029      	str	r1, [r5, #0]
 8018a40:	d501      	bpl.n	8018a46 <_printf_i+0xbe>
 8018a42:	681e      	ldr	r6, [r3, #0]
 8018a44:	e003      	b.n	8018a4e <_printf_i+0xc6>
 8018a46:	0646      	lsls	r6, r0, #25
 8018a48:	d5fb      	bpl.n	8018a42 <_printf_i+0xba>
 8018a4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018a4e:	2e00      	cmp	r6, #0
 8018a50:	da03      	bge.n	8018a5a <_printf_i+0xd2>
 8018a52:	232d      	movs	r3, #45	; 0x2d
 8018a54:	4276      	negs	r6, r6
 8018a56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018a5a:	485a      	ldr	r0, [pc, #360]	; (8018bc4 <_printf_i+0x23c>)
 8018a5c:	230a      	movs	r3, #10
 8018a5e:	e012      	b.n	8018a86 <_printf_i+0xfe>
 8018a60:	682b      	ldr	r3, [r5, #0]
 8018a62:	6820      	ldr	r0, [r4, #0]
 8018a64:	1d19      	adds	r1, r3, #4
 8018a66:	6029      	str	r1, [r5, #0]
 8018a68:	0605      	lsls	r5, r0, #24
 8018a6a:	d501      	bpl.n	8018a70 <_printf_i+0xe8>
 8018a6c:	681e      	ldr	r6, [r3, #0]
 8018a6e:	e002      	b.n	8018a76 <_printf_i+0xee>
 8018a70:	0641      	lsls	r1, r0, #25
 8018a72:	d5fb      	bpl.n	8018a6c <_printf_i+0xe4>
 8018a74:	881e      	ldrh	r6, [r3, #0]
 8018a76:	4853      	ldr	r0, [pc, #332]	; (8018bc4 <_printf_i+0x23c>)
 8018a78:	2f6f      	cmp	r7, #111	; 0x6f
 8018a7a:	bf0c      	ite	eq
 8018a7c:	2308      	moveq	r3, #8
 8018a7e:	230a      	movne	r3, #10
 8018a80:	2100      	movs	r1, #0
 8018a82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018a86:	6865      	ldr	r5, [r4, #4]
 8018a88:	60a5      	str	r5, [r4, #8]
 8018a8a:	2d00      	cmp	r5, #0
 8018a8c:	bfa2      	ittt	ge
 8018a8e:	6821      	ldrge	r1, [r4, #0]
 8018a90:	f021 0104 	bicge.w	r1, r1, #4
 8018a94:	6021      	strge	r1, [r4, #0]
 8018a96:	b90e      	cbnz	r6, 8018a9c <_printf_i+0x114>
 8018a98:	2d00      	cmp	r5, #0
 8018a9a:	d04b      	beq.n	8018b34 <_printf_i+0x1ac>
 8018a9c:	4615      	mov	r5, r2
 8018a9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8018aa2:	fb03 6711 	mls	r7, r3, r1, r6
 8018aa6:	5dc7      	ldrb	r7, [r0, r7]
 8018aa8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018aac:	4637      	mov	r7, r6
 8018aae:	42bb      	cmp	r3, r7
 8018ab0:	460e      	mov	r6, r1
 8018ab2:	d9f4      	bls.n	8018a9e <_printf_i+0x116>
 8018ab4:	2b08      	cmp	r3, #8
 8018ab6:	d10b      	bne.n	8018ad0 <_printf_i+0x148>
 8018ab8:	6823      	ldr	r3, [r4, #0]
 8018aba:	07de      	lsls	r6, r3, #31
 8018abc:	d508      	bpl.n	8018ad0 <_printf_i+0x148>
 8018abe:	6923      	ldr	r3, [r4, #16]
 8018ac0:	6861      	ldr	r1, [r4, #4]
 8018ac2:	4299      	cmp	r1, r3
 8018ac4:	bfde      	ittt	le
 8018ac6:	2330      	movle	r3, #48	; 0x30
 8018ac8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018acc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018ad0:	1b52      	subs	r2, r2, r5
 8018ad2:	6122      	str	r2, [r4, #16]
 8018ad4:	f8cd a000 	str.w	sl, [sp]
 8018ad8:	464b      	mov	r3, r9
 8018ada:	aa03      	add	r2, sp, #12
 8018adc:	4621      	mov	r1, r4
 8018ade:	4640      	mov	r0, r8
 8018ae0:	f7ff fee4 	bl	80188ac <_printf_common>
 8018ae4:	3001      	adds	r0, #1
 8018ae6:	d14a      	bne.n	8018b7e <_printf_i+0x1f6>
 8018ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8018aec:	b004      	add	sp, #16
 8018aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018af2:	6823      	ldr	r3, [r4, #0]
 8018af4:	f043 0320 	orr.w	r3, r3, #32
 8018af8:	6023      	str	r3, [r4, #0]
 8018afa:	4833      	ldr	r0, [pc, #204]	; (8018bc8 <_printf_i+0x240>)
 8018afc:	2778      	movs	r7, #120	; 0x78
 8018afe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018b02:	6823      	ldr	r3, [r4, #0]
 8018b04:	6829      	ldr	r1, [r5, #0]
 8018b06:	061f      	lsls	r7, r3, #24
 8018b08:	f851 6b04 	ldr.w	r6, [r1], #4
 8018b0c:	d402      	bmi.n	8018b14 <_printf_i+0x18c>
 8018b0e:	065f      	lsls	r7, r3, #25
 8018b10:	bf48      	it	mi
 8018b12:	b2b6      	uxthmi	r6, r6
 8018b14:	07df      	lsls	r7, r3, #31
 8018b16:	bf48      	it	mi
 8018b18:	f043 0320 	orrmi.w	r3, r3, #32
 8018b1c:	6029      	str	r1, [r5, #0]
 8018b1e:	bf48      	it	mi
 8018b20:	6023      	strmi	r3, [r4, #0]
 8018b22:	b91e      	cbnz	r6, 8018b2c <_printf_i+0x1a4>
 8018b24:	6823      	ldr	r3, [r4, #0]
 8018b26:	f023 0320 	bic.w	r3, r3, #32
 8018b2a:	6023      	str	r3, [r4, #0]
 8018b2c:	2310      	movs	r3, #16
 8018b2e:	e7a7      	b.n	8018a80 <_printf_i+0xf8>
 8018b30:	4824      	ldr	r0, [pc, #144]	; (8018bc4 <_printf_i+0x23c>)
 8018b32:	e7e4      	b.n	8018afe <_printf_i+0x176>
 8018b34:	4615      	mov	r5, r2
 8018b36:	e7bd      	b.n	8018ab4 <_printf_i+0x12c>
 8018b38:	682b      	ldr	r3, [r5, #0]
 8018b3a:	6826      	ldr	r6, [r4, #0]
 8018b3c:	6961      	ldr	r1, [r4, #20]
 8018b3e:	1d18      	adds	r0, r3, #4
 8018b40:	6028      	str	r0, [r5, #0]
 8018b42:	0635      	lsls	r5, r6, #24
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	d501      	bpl.n	8018b4c <_printf_i+0x1c4>
 8018b48:	6019      	str	r1, [r3, #0]
 8018b4a:	e002      	b.n	8018b52 <_printf_i+0x1ca>
 8018b4c:	0670      	lsls	r0, r6, #25
 8018b4e:	d5fb      	bpl.n	8018b48 <_printf_i+0x1c0>
 8018b50:	8019      	strh	r1, [r3, #0]
 8018b52:	2300      	movs	r3, #0
 8018b54:	6123      	str	r3, [r4, #16]
 8018b56:	4615      	mov	r5, r2
 8018b58:	e7bc      	b.n	8018ad4 <_printf_i+0x14c>
 8018b5a:	682b      	ldr	r3, [r5, #0]
 8018b5c:	1d1a      	adds	r2, r3, #4
 8018b5e:	602a      	str	r2, [r5, #0]
 8018b60:	681d      	ldr	r5, [r3, #0]
 8018b62:	6862      	ldr	r2, [r4, #4]
 8018b64:	2100      	movs	r1, #0
 8018b66:	4628      	mov	r0, r5
 8018b68:	f7e7 fb5a 	bl	8000220 <memchr>
 8018b6c:	b108      	cbz	r0, 8018b72 <_printf_i+0x1ea>
 8018b6e:	1b40      	subs	r0, r0, r5
 8018b70:	6060      	str	r0, [r4, #4]
 8018b72:	6863      	ldr	r3, [r4, #4]
 8018b74:	6123      	str	r3, [r4, #16]
 8018b76:	2300      	movs	r3, #0
 8018b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018b7c:	e7aa      	b.n	8018ad4 <_printf_i+0x14c>
 8018b7e:	6923      	ldr	r3, [r4, #16]
 8018b80:	462a      	mov	r2, r5
 8018b82:	4649      	mov	r1, r9
 8018b84:	4640      	mov	r0, r8
 8018b86:	47d0      	blx	sl
 8018b88:	3001      	adds	r0, #1
 8018b8a:	d0ad      	beq.n	8018ae8 <_printf_i+0x160>
 8018b8c:	6823      	ldr	r3, [r4, #0]
 8018b8e:	079b      	lsls	r3, r3, #30
 8018b90:	d413      	bmi.n	8018bba <_printf_i+0x232>
 8018b92:	68e0      	ldr	r0, [r4, #12]
 8018b94:	9b03      	ldr	r3, [sp, #12]
 8018b96:	4298      	cmp	r0, r3
 8018b98:	bfb8      	it	lt
 8018b9a:	4618      	movlt	r0, r3
 8018b9c:	e7a6      	b.n	8018aec <_printf_i+0x164>
 8018b9e:	2301      	movs	r3, #1
 8018ba0:	4632      	mov	r2, r6
 8018ba2:	4649      	mov	r1, r9
 8018ba4:	4640      	mov	r0, r8
 8018ba6:	47d0      	blx	sl
 8018ba8:	3001      	adds	r0, #1
 8018baa:	d09d      	beq.n	8018ae8 <_printf_i+0x160>
 8018bac:	3501      	adds	r5, #1
 8018bae:	68e3      	ldr	r3, [r4, #12]
 8018bb0:	9903      	ldr	r1, [sp, #12]
 8018bb2:	1a5b      	subs	r3, r3, r1
 8018bb4:	42ab      	cmp	r3, r5
 8018bb6:	dcf2      	bgt.n	8018b9e <_printf_i+0x216>
 8018bb8:	e7eb      	b.n	8018b92 <_printf_i+0x20a>
 8018bba:	2500      	movs	r5, #0
 8018bbc:	f104 0619 	add.w	r6, r4, #25
 8018bc0:	e7f5      	b.n	8018bae <_printf_i+0x226>
 8018bc2:	bf00      	nop
 8018bc4:	08026f18 	.word	0x08026f18
 8018bc8:	08026f29 	.word	0x08026f29

08018bcc <__sflush_r>:
 8018bcc:	898a      	ldrh	r2, [r1, #12]
 8018bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bd2:	4605      	mov	r5, r0
 8018bd4:	0710      	lsls	r0, r2, #28
 8018bd6:	460c      	mov	r4, r1
 8018bd8:	d458      	bmi.n	8018c8c <__sflush_r+0xc0>
 8018bda:	684b      	ldr	r3, [r1, #4]
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	dc05      	bgt.n	8018bec <__sflush_r+0x20>
 8018be0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	dc02      	bgt.n	8018bec <__sflush_r+0x20>
 8018be6:	2000      	movs	r0, #0
 8018be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018bec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018bee:	2e00      	cmp	r6, #0
 8018bf0:	d0f9      	beq.n	8018be6 <__sflush_r+0x1a>
 8018bf2:	2300      	movs	r3, #0
 8018bf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018bf8:	682f      	ldr	r7, [r5, #0]
 8018bfa:	6a21      	ldr	r1, [r4, #32]
 8018bfc:	602b      	str	r3, [r5, #0]
 8018bfe:	d032      	beq.n	8018c66 <__sflush_r+0x9a>
 8018c00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018c02:	89a3      	ldrh	r3, [r4, #12]
 8018c04:	075a      	lsls	r2, r3, #29
 8018c06:	d505      	bpl.n	8018c14 <__sflush_r+0x48>
 8018c08:	6863      	ldr	r3, [r4, #4]
 8018c0a:	1ac0      	subs	r0, r0, r3
 8018c0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018c0e:	b10b      	cbz	r3, 8018c14 <__sflush_r+0x48>
 8018c10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018c12:	1ac0      	subs	r0, r0, r3
 8018c14:	2300      	movs	r3, #0
 8018c16:	4602      	mov	r2, r0
 8018c18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018c1a:	6a21      	ldr	r1, [r4, #32]
 8018c1c:	4628      	mov	r0, r5
 8018c1e:	47b0      	blx	r6
 8018c20:	1c43      	adds	r3, r0, #1
 8018c22:	89a3      	ldrh	r3, [r4, #12]
 8018c24:	d106      	bne.n	8018c34 <__sflush_r+0x68>
 8018c26:	6829      	ldr	r1, [r5, #0]
 8018c28:	291d      	cmp	r1, #29
 8018c2a:	d82b      	bhi.n	8018c84 <__sflush_r+0xb8>
 8018c2c:	4a29      	ldr	r2, [pc, #164]	; (8018cd4 <__sflush_r+0x108>)
 8018c2e:	410a      	asrs	r2, r1
 8018c30:	07d6      	lsls	r6, r2, #31
 8018c32:	d427      	bmi.n	8018c84 <__sflush_r+0xb8>
 8018c34:	2200      	movs	r2, #0
 8018c36:	6062      	str	r2, [r4, #4]
 8018c38:	04d9      	lsls	r1, r3, #19
 8018c3a:	6922      	ldr	r2, [r4, #16]
 8018c3c:	6022      	str	r2, [r4, #0]
 8018c3e:	d504      	bpl.n	8018c4a <__sflush_r+0x7e>
 8018c40:	1c42      	adds	r2, r0, #1
 8018c42:	d101      	bne.n	8018c48 <__sflush_r+0x7c>
 8018c44:	682b      	ldr	r3, [r5, #0]
 8018c46:	b903      	cbnz	r3, 8018c4a <__sflush_r+0x7e>
 8018c48:	6560      	str	r0, [r4, #84]	; 0x54
 8018c4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018c4c:	602f      	str	r7, [r5, #0]
 8018c4e:	2900      	cmp	r1, #0
 8018c50:	d0c9      	beq.n	8018be6 <__sflush_r+0x1a>
 8018c52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018c56:	4299      	cmp	r1, r3
 8018c58:	d002      	beq.n	8018c60 <__sflush_r+0x94>
 8018c5a:	4628      	mov	r0, r5
 8018c5c:	f7ff fbe2 	bl	8018424 <_free_r>
 8018c60:	2000      	movs	r0, #0
 8018c62:	6360      	str	r0, [r4, #52]	; 0x34
 8018c64:	e7c0      	b.n	8018be8 <__sflush_r+0x1c>
 8018c66:	2301      	movs	r3, #1
 8018c68:	4628      	mov	r0, r5
 8018c6a:	47b0      	blx	r6
 8018c6c:	1c41      	adds	r1, r0, #1
 8018c6e:	d1c8      	bne.n	8018c02 <__sflush_r+0x36>
 8018c70:	682b      	ldr	r3, [r5, #0]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d0c5      	beq.n	8018c02 <__sflush_r+0x36>
 8018c76:	2b1d      	cmp	r3, #29
 8018c78:	d001      	beq.n	8018c7e <__sflush_r+0xb2>
 8018c7a:	2b16      	cmp	r3, #22
 8018c7c:	d101      	bne.n	8018c82 <__sflush_r+0xb6>
 8018c7e:	602f      	str	r7, [r5, #0]
 8018c80:	e7b1      	b.n	8018be6 <__sflush_r+0x1a>
 8018c82:	89a3      	ldrh	r3, [r4, #12]
 8018c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018c88:	81a3      	strh	r3, [r4, #12]
 8018c8a:	e7ad      	b.n	8018be8 <__sflush_r+0x1c>
 8018c8c:	690f      	ldr	r7, [r1, #16]
 8018c8e:	2f00      	cmp	r7, #0
 8018c90:	d0a9      	beq.n	8018be6 <__sflush_r+0x1a>
 8018c92:	0793      	lsls	r3, r2, #30
 8018c94:	680e      	ldr	r6, [r1, #0]
 8018c96:	bf08      	it	eq
 8018c98:	694b      	ldreq	r3, [r1, #20]
 8018c9a:	600f      	str	r7, [r1, #0]
 8018c9c:	bf18      	it	ne
 8018c9e:	2300      	movne	r3, #0
 8018ca0:	eba6 0807 	sub.w	r8, r6, r7
 8018ca4:	608b      	str	r3, [r1, #8]
 8018ca6:	f1b8 0f00 	cmp.w	r8, #0
 8018caa:	dd9c      	ble.n	8018be6 <__sflush_r+0x1a>
 8018cac:	6a21      	ldr	r1, [r4, #32]
 8018cae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018cb0:	4643      	mov	r3, r8
 8018cb2:	463a      	mov	r2, r7
 8018cb4:	4628      	mov	r0, r5
 8018cb6:	47b0      	blx	r6
 8018cb8:	2800      	cmp	r0, #0
 8018cba:	dc06      	bgt.n	8018cca <__sflush_r+0xfe>
 8018cbc:	89a3      	ldrh	r3, [r4, #12]
 8018cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018cc2:	81a3      	strh	r3, [r4, #12]
 8018cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8018cc8:	e78e      	b.n	8018be8 <__sflush_r+0x1c>
 8018cca:	4407      	add	r7, r0
 8018ccc:	eba8 0800 	sub.w	r8, r8, r0
 8018cd0:	e7e9      	b.n	8018ca6 <__sflush_r+0xda>
 8018cd2:	bf00      	nop
 8018cd4:	dfbffffe 	.word	0xdfbffffe

08018cd8 <_fflush_r>:
 8018cd8:	b538      	push	{r3, r4, r5, lr}
 8018cda:	690b      	ldr	r3, [r1, #16]
 8018cdc:	4605      	mov	r5, r0
 8018cde:	460c      	mov	r4, r1
 8018ce0:	b913      	cbnz	r3, 8018ce8 <_fflush_r+0x10>
 8018ce2:	2500      	movs	r5, #0
 8018ce4:	4628      	mov	r0, r5
 8018ce6:	bd38      	pop	{r3, r4, r5, pc}
 8018ce8:	b118      	cbz	r0, 8018cf2 <_fflush_r+0x1a>
 8018cea:	6a03      	ldr	r3, [r0, #32]
 8018cec:	b90b      	cbnz	r3, 8018cf2 <_fflush_r+0x1a>
 8018cee:	f7ff f9e9 	bl	80180c4 <__sinit>
 8018cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018cf6:	2b00      	cmp	r3, #0
 8018cf8:	d0f3      	beq.n	8018ce2 <_fflush_r+0xa>
 8018cfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018cfc:	07d0      	lsls	r0, r2, #31
 8018cfe:	d404      	bmi.n	8018d0a <_fflush_r+0x32>
 8018d00:	0599      	lsls	r1, r3, #22
 8018d02:	d402      	bmi.n	8018d0a <_fflush_r+0x32>
 8018d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018d06:	f7ff fb5f 	bl	80183c8 <__retarget_lock_acquire_recursive>
 8018d0a:	4628      	mov	r0, r5
 8018d0c:	4621      	mov	r1, r4
 8018d0e:	f7ff ff5d 	bl	8018bcc <__sflush_r>
 8018d12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018d14:	07da      	lsls	r2, r3, #31
 8018d16:	4605      	mov	r5, r0
 8018d18:	d4e4      	bmi.n	8018ce4 <_fflush_r+0xc>
 8018d1a:	89a3      	ldrh	r3, [r4, #12]
 8018d1c:	059b      	lsls	r3, r3, #22
 8018d1e:	d4e1      	bmi.n	8018ce4 <_fflush_r+0xc>
 8018d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018d22:	f7ff fb52 	bl	80183ca <__retarget_lock_release_recursive>
 8018d26:	e7dd      	b.n	8018ce4 <_fflush_r+0xc>

08018d28 <fiprintf>:
 8018d28:	b40e      	push	{r1, r2, r3}
 8018d2a:	b503      	push	{r0, r1, lr}
 8018d2c:	4601      	mov	r1, r0
 8018d2e:	ab03      	add	r3, sp, #12
 8018d30:	4805      	ldr	r0, [pc, #20]	; (8018d48 <fiprintf+0x20>)
 8018d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d36:	6800      	ldr	r0, [r0, #0]
 8018d38:	9301      	str	r3, [sp, #4]
 8018d3a:	f7ff fc9d 	bl	8018678 <_vfiprintf_r>
 8018d3e:	b002      	add	sp, #8
 8018d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8018d44:	b003      	add	sp, #12
 8018d46:	4770      	bx	lr
 8018d48:	2000008c 	.word	0x2000008c

08018d4c <__swbuf_r>:
 8018d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d4e:	460e      	mov	r6, r1
 8018d50:	4614      	mov	r4, r2
 8018d52:	4605      	mov	r5, r0
 8018d54:	b118      	cbz	r0, 8018d5e <__swbuf_r+0x12>
 8018d56:	6a03      	ldr	r3, [r0, #32]
 8018d58:	b90b      	cbnz	r3, 8018d5e <__swbuf_r+0x12>
 8018d5a:	f7ff f9b3 	bl	80180c4 <__sinit>
 8018d5e:	69a3      	ldr	r3, [r4, #24]
 8018d60:	60a3      	str	r3, [r4, #8]
 8018d62:	89a3      	ldrh	r3, [r4, #12]
 8018d64:	071a      	lsls	r2, r3, #28
 8018d66:	d525      	bpl.n	8018db4 <__swbuf_r+0x68>
 8018d68:	6923      	ldr	r3, [r4, #16]
 8018d6a:	b31b      	cbz	r3, 8018db4 <__swbuf_r+0x68>
 8018d6c:	6823      	ldr	r3, [r4, #0]
 8018d6e:	6922      	ldr	r2, [r4, #16]
 8018d70:	1a98      	subs	r0, r3, r2
 8018d72:	6963      	ldr	r3, [r4, #20]
 8018d74:	b2f6      	uxtb	r6, r6
 8018d76:	4283      	cmp	r3, r0
 8018d78:	4637      	mov	r7, r6
 8018d7a:	dc04      	bgt.n	8018d86 <__swbuf_r+0x3a>
 8018d7c:	4621      	mov	r1, r4
 8018d7e:	4628      	mov	r0, r5
 8018d80:	f7ff ffaa 	bl	8018cd8 <_fflush_r>
 8018d84:	b9e0      	cbnz	r0, 8018dc0 <__swbuf_r+0x74>
 8018d86:	68a3      	ldr	r3, [r4, #8]
 8018d88:	3b01      	subs	r3, #1
 8018d8a:	60a3      	str	r3, [r4, #8]
 8018d8c:	6823      	ldr	r3, [r4, #0]
 8018d8e:	1c5a      	adds	r2, r3, #1
 8018d90:	6022      	str	r2, [r4, #0]
 8018d92:	701e      	strb	r6, [r3, #0]
 8018d94:	6962      	ldr	r2, [r4, #20]
 8018d96:	1c43      	adds	r3, r0, #1
 8018d98:	429a      	cmp	r2, r3
 8018d9a:	d004      	beq.n	8018da6 <__swbuf_r+0x5a>
 8018d9c:	89a3      	ldrh	r3, [r4, #12]
 8018d9e:	07db      	lsls	r3, r3, #31
 8018da0:	d506      	bpl.n	8018db0 <__swbuf_r+0x64>
 8018da2:	2e0a      	cmp	r6, #10
 8018da4:	d104      	bne.n	8018db0 <__swbuf_r+0x64>
 8018da6:	4621      	mov	r1, r4
 8018da8:	4628      	mov	r0, r5
 8018daa:	f7ff ff95 	bl	8018cd8 <_fflush_r>
 8018dae:	b938      	cbnz	r0, 8018dc0 <__swbuf_r+0x74>
 8018db0:	4638      	mov	r0, r7
 8018db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018db4:	4621      	mov	r1, r4
 8018db6:	4628      	mov	r0, r5
 8018db8:	f000 f806 	bl	8018dc8 <__swsetup_r>
 8018dbc:	2800      	cmp	r0, #0
 8018dbe:	d0d5      	beq.n	8018d6c <__swbuf_r+0x20>
 8018dc0:	f04f 37ff 	mov.w	r7, #4294967295
 8018dc4:	e7f4      	b.n	8018db0 <__swbuf_r+0x64>
	...

08018dc8 <__swsetup_r>:
 8018dc8:	b538      	push	{r3, r4, r5, lr}
 8018dca:	4b2a      	ldr	r3, [pc, #168]	; (8018e74 <__swsetup_r+0xac>)
 8018dcc:	4605      	mov	r5, r0
 8018dce:	6818      	ldr	r0, [r3, #0]
 8018dd0:	460c      	mov	r4, r1
 8018dd2:	b118      	cbz	r0, 8018ddc <__swsetup_r+0x14>
 8018dd4:	6a03      	ldr	r3, [r0, #32]
 8018dd6:	b90b      	cbnz	r3, 8018ddc <__swsetup_r+0x14>
 8018dd8:	f7ff f974 	bl	80180c4 <__sinit>
 8018ddc:	89a3      	ldrh	r3, [r4, #12]
 8018dde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018de2:	0718      	lsls	r0, r3, #28
 8018de4:	d422      	bmi.n	8018e2c <__swsetup_r+0x64>
 8018de6:	06d9      	lsls	r1, r3, #27
 8018de8:	d407      	bmi.n	8018dfa <__swsetup_r+0x32>
 8018dea:	2309      	movs	r3, #9
 8018dec:	602b      	str	r3, [r5, #0]
 8018dee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018df2:	81a3      	strh	r3, [r4, #12]
 8018df4:	f04f 30ff 	mov.w	r0, #4294967295
 8018df8:	e034      	b.n	8018e64 <__swsetup_r+0x9c>
 8018dfa:	0758      	lsls	r0, r3, #29
 8018dfc:	d512      	bpl.n	8018e24 <__swsetup_r+0x5c>
 8018dfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018e00:	b141      	cbz	r1, 8018e14 <__swsetup_r+0x4c>
 8018e02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018e06:	4299      	cmp	r1, r3
 8018e08:	d002      	beq.n	8018e10 <__swsetup_r+0x48>
 8018e0a:	4628      	mov	r0, r5
 8018e0c:	f7ff fb0a 	bl	8018424 <_free_r>
 8018e10:	2300      	movs	r3, #0
 8018e12:	6363      	str	r3, [r4, #52]	; 0x34
 8018e14:	89a3      	ldrh	r3, [r4, #12]
 8018e16:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018e1a:	81a3      	strh	r3, [r4, #12]
 8018e1c:	2300      	movs	r3, #0
 8018e1e:	6063      	str	r3, [r4, #4]
 8018e20:	6923      	ldr	r3, [r4, #16]
 8018e22:	6023      	str	r3, [r4, #0]
 8018e24:	89a3      	ldrh	r3, [r4, #12]
 8018e26:	f043 0308 	orr.w	r3, r3, #8
 8018e2a:	81a3      	strh	r3, [r4, #12]
 8018e2c:	6923      	ldr	r3, [r4, #16]
 8018e2e:	b94b      	cbnz	r3, 8018e44 <__swsetup_r+0x7c>
 8018e30:	89a3      	ldrh	r3, [r4, #12]
 8018e32:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018e36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018e3a:	d003      	beq.n	8018e44 <__swsetup_r+0x7c>
 8018e3c:	4621      	mov	r1, r4
 8018e3e:	4628      	mov	r0, r5
 8018e40:	f000 f857 	bl	8018ef2 <__smakebuf_r>
 8018e44:	89a0      	ldrh	r0, [r4, #12]
 8018e46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018e4a:	f010 0301 	ands.w	r3, r0, #1
 8018e4e:	d00a      	beq.n	8018e66 <__swsetup_r+0x9e>
 8018e50:	2300      	movs	r3, #0
 8018e52:	60a3      	str	r3, [r4, #8]
 8018e54:	6963      	ldr	r3, [r4, #20]
 8018e56:	425b      	negs	r3, r3
 8018e58:	61a3      	str	r3, [r4, #24]
 8018e5a:	6923      	ldr	r3, [r4, #16]
 8018e5c:	b943      	cbnz	r3, 8018e70 <__swsetup_r+0xa8>
 8018e5e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018e62:	d1c4      	bne.n	8018dee <__swsetup_r+0x26>
 8018e64:	bd38      	pop	{r3, r4, r5, pc}
 8018e66:	0781      	lsls	r1, r0, #30
 8018e68:	bf58      	it	pl
 8018e6a:	6963      	ldrpl	r3, [r4, #20]
 8018e6c:	60a3      	str	r3, [r4, #8]
 8018e6e:	e7f4      	b.n	8018e5a <__swsetup_r+0x92>
 8018e70:	2000      	movs	r0, #0
 8018e72:	e7f7      	b.n	8018e64 <__swsetup_r+0x9c>
 8018e74:	2000008c 	.word	0x2000008c

08018e78 <_sbrk_r>:
 8018e78:	b538      	push	{r3, r4, r5, lr}
 8018e7a:	4d06      	ldr	r5, [pc, #24]	; (8018e94 <_sbrk_r+0x1c>)
 8018e7c:	2300      	movs	r3, #0
 8018e7e:	4604      	mov	r4, r0
 8018e80:	4608      	mov	r0, r1
 8018e82:	602b      	str	r3, [r5, #0]
 8018e84:	f7e7 ff0c 	bl	8000ca0 <_sbrk>
 8018e88:	1c43      	adds	r3, r0, #1
 8018e8a:	d102      	bne.n	8018e92 <_sbrk_r+0x1a>
 8018e8c:	682b      	ldr	r3, [r5, #0]
 8018e8e:	b103      	cbz	r3, 8018e92 <_sbrk_r+0x1a>
 8018e90:	6023      	str	r3, [r4, #0]
 8018e92:	bd38      	pop	{r3, r4, r5, pc}
 8018e94:	2001102c 	.word	0x2001102c

08018e98 <abort>:
 8018e98:	b508      	push	{r3, lr}
 8018e9a:	2006      	movs	r0, #6
 8018e9c:	f000 f88e 	bl	8018fbc <raise>
 8018ea0:	2001      	movs	r0, #1
 8018ea2:	f7e7 fe85 	bl	8000bb0 <_exit>

08018ea6 <__swhatbuf_r>:
 8018ea6:	b570      	push	{r4, r5, r6, lr}
 8018ea8:	460c      	mov	r4, r1
 8018eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018eae:	2900      	cmp	r1, #0
 8018eb0:	b096      	sub	sp, #88	; 0x58
 8018eb2:	4615      	mov	r5, r2
 8018eb4:	461e      	mov	r6, r3
 8018eb6:	da0d      	bge.n	8018ed4 <__swhatbuf_r+0x2e>
 8018eb8:	89a3      	ldrh	r3, [r4, #12]
 8018eba:	f013 0f80 	tst.w	r3, #128	; 0x80
 8018ebe:	f04f 0100 	mov.w	r1, #0
 8018ec2:	bf0c      	ite	eq
 8018ec4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8018ec8:	2340      	movne	r3, #64	; 0x40
 8018eca:	2000      	movs	r0, #0
 8018ecc:	6031      	str	r1, [r6, #0]
 8018ece:	602b      	str	r3, [r5, #0]
 8018ed0:	b016      	add	sp, #88	; 0x58
 8018ed2:	bd70      	pop	{r4, r5, r6, pc}
 8018ed4:	466a      	mov	r2, sp
 8018ed6:	f000 f879 	bl	8018fcc <_fstat_r>
 8018eda:	2800      	cmp	r0, #0
 8018edc:	dbec      	blt.n	8018eb8 <__swhatbuf_r+0x12>
 8018ede:	9901      	ldr	r1, [sp, #4]
 8018ee0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8018ee4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8018ee8:	4259      	negs	r1, r3
 8018eea:	4159      	adcs	r1, r3
 8018eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018ef0:	e7eb      	b.n	8018eca <__swhatbuf_r+0x24>

08018ef2 <__smakebuf_r>:
 8018ef2:	898b      	ldrh	r3, [r1, #12]
 8018ef4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018ef6:	079d      	lsls	r5, r3, #30
 8018ef8:	4606      	mov	r6, r0
 8018efa:	460c      	mov	r4, r1
 8018efc:	d507      	bpl.n	8018f0e <__smakebuf_r+0x1c>
 8018efe:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018f02:	6023      	str	r3, [r4, #0]
 8018f04:	6123      	str	r3, [r4, #16]
 8018f06:	2301      	movs	r3, #1
 8018f08:	6163      	str	r3, [r4, #20]
 8018f0a:	b002      	add	sp, #8
 8018f0c:	bd70      	pop	{r4, r5, r6, pc}
 8018f0e:	ab01      	add	r3, sp, #4
 8018f10:	466a      	mov	r2, sp
 8018f12:	f7ff ffc8 	bl	8018ea6 <__swhatbuf_r>
 8018f16:	9900      	ldr	r1, [sp, #0]
 8018f18:	4605      	mov	r5, r0
 8018f1a:	4630      	mov	r0, r6
 8018f1c:	f7ff faf6 	bl	801850c <_malloc_r>
 8018f20:	b948      	cbnz	r0, 8018f36 <__smakebuf_r+0x44>
 8018f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f26:	059a      	lsls	r2, r3, #22
 8018f28:	d4ef      	bmi.n	8018f0a <__smakebuf_r+0x18>
 8018f2a:	f023 0303 	bic.w	r3, r3, #3
 8018f2e:	f043 0302 	orr.w	r3, r3, #2
 8018f32:	81a3      	strh	r3, [r4, #12]
 8018f34:	e7e3      	b.n	8018efe <__smakebuf_r+0xc>
 8018f36:	89a3      	ldrh	r3, [r4, #12]
 8018f38:	6020      	str	r0, [r4, #0]
 8018f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018f3e:	81a3      	strh	r3, [r4, #12]
 8018f40:	9b00      	ldr	r3, [sp, #0]
 8018f42:	6163      	str	r3, [r4, #20]
 8018f44:	9b01      	ldr	r3, [sp, #4]
 8018f46:	6120      	str	r0, [r4, #16]
 8018f48:	b15b      	cbz	r3, 8018f62 <__smakebuf_r+0x70>
 8018f4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018f4e:	4630      	mov	r0, r6
 8018f50:	f000 f84e 	bl	8018ff0 <_isatty_r>
 8018f54:	b128      	cbz	r0, 8018f62 <__smakebuf_r+0x70>
 8018f56:	89a3      	ldrh	r3, [r4, #12]
 8018f58:	f023 0303 	bic.w	r3, r3, #3
 8018f5c:	f043 0301 	orr.w	r3, r3, #1
 8018f60:	81a3      	strh	r3, [r4, #12]
 8018f62:	89a3      	ldrh	r3, [r4, #12]
 8018f64:	431d      	orrs	r5, r3
 8018f66:	81a5      	strh	r5, [r4, #12]
 8018f68:	e7cf      	b.n	8018f0a <__smakebuf_r+0x18>

08018f6a <_raise_r>:
 8018f6a:	291f      	cmp	r1, #31
 8018f6c:	b538      	push	{r3, r4, r5, lr}
 8018f6e:	4604      	mov	r4, r0
 8018f70:	460d      	mov	r5, r1
 8018f72:	d904      	bls.n	8018f7e <_raise_r+0x14>
 8018f74:	2316      	movs	r3, #22
 8018f76:	6003      	str	r3, [r0, #0]
 8018f78:	f04f 30ff 	mov.w	r0, #4294967295
 8018f7c:	bd38      	pop	{r3, r4, r5, pc}
 8018f7e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8018f80:	b112      	cbz	r2, 8018f88 <_raise_r+0x1e>
 8018f82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018f86:	b94b      	cbnz	r3, 8018f9c <_raise_r+0x32>
 8018f88:	4620      	mov	r0, r4
 8018f8a:	f000 f853 	bl	8019034 <_getpid_r>
 8018f8e:	462a      	mov	r2, r5
 8018f90:	4601      	mov	r1, r0
 8018f92:	4620      	mov	r0, r4
 8018f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018f98:	f000 b83a 	b.w	8019010 <_kill_r>
 8018f9c:	2b01      	cmp	r3, #1
 8018f9e:	d00a      	beq.n	8018fb6 <_raise_r+0x4c>
 8018fa0:	1c59      	adds	r1, r3, #1
 8018fa2:	d103      	bne.n	8018fac <_raise_r+0x42>
 8018fa4:	2316      	movs	r3, #22
 8018fa6:	6003      	str	r3, [r0, #0]
 8018fa8:	2001      	movs	r0, #1
 8018faa:	e7e7      	b.n	8018f7c <_raise_r+0x12>
 8018fac:	2400      	movs	r4, #0
 8018fae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018fb2:	4628      	mov	r0, r5
 8018fb4:	4798      	blx	r3
 8018fb6:	2000      	movs	r0, #0
 8018fb8:	e7e0      	b.n	8018f7c <_raise_r+0x12>
	...

08018fbc <raise>:
 8018fbc:	4b02      	ldr	r3, [pc, #8]	; (8018fc8 <raise+0xc>)
 8018fbe:	4601      	mov	r1, r0
 8018fc0:	6818      	ldr	r0, [r3, #0]
 8018fc2:	f7ff bfd2 	b.w	8018f6a <_raise_r>
 8018fc6:	bf00      	nop
 8018fc8:	2000008c 	.word	0x2000008c

08018fcc <_fstat_r>:
 8018fcc:	b538      	push	{r3, r4, r5, lr}
 8018fce:	4d07      	ldr	r5, [pc, #28]	; (8018fec <_fstat_r+0x20>)
 8018fd0:	2300      	movs	r3, #0
 8018fd2:	4604      	mov	r4, r0
 8018fd4:	4608      	mov	r0, r1
 8018fd6:	4611      	mov	r1, r2
 8018fd8:	602b      	str	r3, [r5, #0]
 8018fda:	f7e7 fe38 	bl	8000c4e <_fstat>
 8018fde:	1c43      	adds	r3, r0, #1
 8018fe0:	d102      	bne.n	8018fe8 <_fstat_r+0x1c>
 8018fe2:	682b      	ldr	r3, [r5, #0]
 8018fe4:	b103      	cbz	r3, 8018fe8 <_fstat_r+0x1c>
 8018fe6:	6023      	str	r3, [r4, #0]
 8018fe8:	bd38      	pop	{r3, r4, r5, pc}
 8018fea:	bf00      	nop
 8018fec:	2001102c 	.word	0x2001102c

08018ff0 <_isatty_r>:
 8018ff0:	b538      	push	{r3, r4, r5, lr}
 8018ff2:	4d06      	ldr	r5, [pc, #24]	; (801900c <_isatty_r+0x1c>)
 8018ff4:	2300      	movs	r3, #0
 8018ff6:	4604      	mov	r4, r0
 8018ff8:	4608      	mov	r0, r1
 8018ffa:	602b      	str	r3, [r5, #0]
 8018ffc:	f7e7 fe37 	bl	8000c6e <_isatty>
 8019000:	1c43      	adds	r3, r0, #1
 8019002:	d102      	bne.n	801900a <_isatty_r+0x1a>
 8019004:	682b      	ldr	r3, [r5, #0]
 8019006:	b103      	cbz	r3, 801900a <_isatty_r+0x1a>
 8019008:	6023      	str	r3, [r4, #0]
 801900a:	bd38      	pop	{r3, r4, r5, pc}
 801900c:	2001102c 	.word	0x2001102c

08019010 <_kill_r>:
 8019010:	b538      	push	{r3, r4, r5, lr}
 8019012:	4d07      	ldr	r5, [pc, #28]	; (8019030 <_kill_r+0x20>)
 8019014:	2300      	movs	r3, #0
 8019016:	4604      	mov	r4, r0
 8019018:	4608      	mov	r0, r1
 801901a:	4611      	mov	r1, r2
 801901c:	602b      	str	r3, [r5, #0]
 801901e:	f7e7 fdb5 	bl	8000b8c <_kill>
 8019022:	1c43      	adds	r3, r0, #1
 8019024:	d102      	bne.n	801902c <_kill_r+0x1c>
 8019026:	682b      	ldr	r3, [r5, #0]
 8019028:	b103      	cbz	r3, 801902c <_kill_r+0x1c>
 801902a:	6023      	str	r3, [r4, #0]
 801902c:	bd38      	pop	{r3, r4, r5, pc}
 801902e:	bf00      	nop
 8019030:	2001102c 	.word	0x2001102c

08019034 <_getpid_r>:
 8019034:	f7e7 bda2 	b.w	8000b7c <_getpid>

08019038 <_init>:
 8019038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801903a:	bf00      	nop
 801903c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801903e:	bc08      	pop	{r3}
 8019040:	469e      	mov	lr, r3
 8019042:	4770      	bx	lr

08019044 <_fini>:
 8019044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019046:	bf00      	nop
 8019048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801904a:	bc08      	pop	{r3}
 801904c:	469e      	mov	lr, r3
 801904e:	4770      	bx	lr
