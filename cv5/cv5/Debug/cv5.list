
cv5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000357c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800363c  0800363c  0001363c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036b8  080036b8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080036b8  080036b8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036b8  080036b8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036b8  080036b8  000136b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036bc  080036bc  000136bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080036c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20000068  08003728  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  08003728  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007f9b  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001759  00000000  00000000  0002806e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f8  00000000  00000000  000297c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000550  00000000  00000000  00029ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001031c  00000000  00000000  0002a410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000094f2  00000000  00000000  0003a72c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005e806  00000000  00000000  00043c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ebc  00000000  00000000  000a2424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000a42e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003624 	.word	0x08003624

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08003624 	.word	0x08003624

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <uart_process_command>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uart_process_command(char *cmd)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	printf("prijato: '%s'\n", cmd);
 800023c:	687a      	ldr	r2, [r7, #4]
 800023e:	4b04      	ldr	r3, [pc, #16]	; (8000250 <uart_process_command+0x1c>)
 8000240:	0011      	movs	r1, r2
 8000242:	0018      	movs	r0, r3
 8000244:	f002 fb4a 	bl	80028dc <iprintf>
}
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	46bd      	mov	sp, r7
 800024c:	b002      	add	sp, #8
 800024e:	bd80      	pop	{r7, pc}
 8000250:	0800363c 	.word	0x0800363c

08000254 <_write>:

int _write(int file, char const *buf, int n)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	607a      	str	r2, [r7, #4]
 /* stdout redirection to UART2 */
 HAL_UART_Transmit(&huart2, (uint8_t*)(buf), n, HAL_MAX_DELAY);
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	b29a      	uxth	r2, r3
 8000264:	2301      	movs	r3, #1
 8000266:	425b      	negs	r3, r3
 8000268:	68b9      	ldr	r1, [r7, #8]
 800026a:	4804      	ldr	r0, [pc, #16]	; (800027c <_write+0x28>)
 800026c:	f001 fc3c 	bl	8001ae8 <HAL_UART_Transmit>
 return n;
 8000270:	687b      	ldr	r3, [r7, #4]
}
 8000272:	0018      	movs	r0, r3
 8000274:	46bd      	mov	sp, r7
 8000276:	b004      	add	sp, #16
 8000278:	bd80      	pop	{r7, pc}
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	200000c8 	.word	0x200000c8

08000280 <uart_byte_available>:

static void uart_byte_available(uint8_t c)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	0002      	movs	r2, r0
 8000288:	1dfb      	adds	r3, r7, #7
 800028a:	701a      	strb	r2, [r3, #0]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];
	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 126) data[cnt++] = c;
 800028c:	4b19      	ldr	r3, [pc, #100]	; (80002f4 <uart_byte_available+0x74>)
 800028e:	881b      	ldrh	r3, [r3, #0]
 8000290:	2bff      	cmp	r3, #255	; 0xff
 8000292:	d812      	bhi.n	80002ba <uart_byte_available+0x3a>
 8000294:	1dfb      	adds	r3, r7, #7
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	2b1f      	cmp	r3, #31
 800029a:	d90e      	bls.n	80002ba <uart_byte_available+0x3a>
 800029c:	1dfb      	adds	r3, r7, #7
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	2b7e      	cmp	r3, #126	; 0x7e
 80002a2:	d80a      	bhi.n	80002ba <uart_byte_available+0x3a>
 80002a4:	4b13      	ldr	r3, [pc, #76]	; (80002f4 <uart_byte_available+0x74>)
 80002a6:	881b      	ldrh	r3, [r3, #0]
 80002a8:	1c5a      	adds	r2, r3, #1
 80002aa:	b291      	uxth	r1, r2
 80002ac:	4a11      	ldr	r2, [pc, #68]	; (80002f4 <uart_byte_available+0x74>)
 80002ae:	8011      	strh	r1, [r2, #0]
 80002b0:	0019      	movs	r1, r3
 80002b2:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <uart_byte_available+0x78>)
 80002b4:	1dfa      	adds	r2, r7, #7
 80002b6:	7812      	ldrb	r2, [r2, #0]
 80002b8:	545a      	strb	r2, [r3, r1]
	if ((c == '\n' || c == '\r') && cnt > 0) {
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b0a      	cmp	r3, #10
 80002c0:	d003      	beq.n	80002ca <uart_byte_available+0x4a>
 80002c2:	1dfb      	adds	r3, r7, #7
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	2b0d      	cmp	r3, #13
 80002c8:	d110      	bne.n	80002ec <uart_byte_available+0x6c>
 80002ca:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <uart_byte_available+0x74>)
 80002cc:	881b      	ldrh	r3, [r3, #0]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d00c      	beq.n	80002ec <uart_byte_available+0x6c>
		data[cnt] = '\0';
 80002d2:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <uart_byte_available+0x74>)
 80002d4:	881b      	ldrh	r3, [r3, #0]
 80002d6:	001a      	movs	r2, r3
 80002d8:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <uart_byte_available+0x78>)
 80002da:	2100      	movs	r1, #0
 80002dc:	5499      	strb	r1, [r3, r2]
		uart_process_command(data);
 80002de:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <uart_byte_available+0x78>)
 80002e0:	0018      	movs	r0, r3
 80002e2:	f7ff ffa7 	bl	8000234 <uart_process_command>
		cnt = 0;
 80002e6:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <uart_byte_available+0x74>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	801a      	strh	r2, [r3, #0]
	}
}
 80002ec:	46c0      	nop			; (mov r8, r8)
 80002ee:	46bd      	mov	sp, r7
 80002f0:	b002      	add	sp, #8
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	20000190 	.word	0x20000190
 80002f8:	20000194 	.word	0x20000194

080002fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000302:	f000 fac9 	bl	8000898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000306:	f000 f83b 	bl	8000380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800030a:	f000 f8d1 	bl	80004b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800030e:	f000 f8b1 	bl	8000474 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000312:	f000 f87f 	bl	8000414 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_DMA(&huart2, uart_rx_buf, RX_BUFFER_LEN);
 8000316:	4916      	ldr	r1, [pc, #88]	; (8000370 <main+0x74>)
 8000318:	4b16      	ldr	r3, [pc, #88]	; (8000374 <main+0x78>)
 800031a:	2240      	movs	r2, #64	; 0x40
 800031c:	0018      	movs	r0, r3
 800031e:	f001 fc8c 	bl	8001c3a <HAL_UART_Receive_DMA>
  while (1)
  {
	  while (uart_rx_read_ptr != uart_rx_write_ptr) {
 8000322:	e019      	b.n	8000358 <main+0x5c>
		  uint8_t b = uart_rx_buf[uart_rx_read_ptr];
 8000324:	4b14      	ldr	r3, [pc, #80]	; (8000378 <main+0x7c>)
 8000326:	881b      	ldrh	r3, [r3, #0]
 8000328:	b29b      	uxth	r3, r3
 800032a:	0019      	movs	r1, r3
 800032c:	1dfb      	adds	r3, r7, #7
 800032e:	4a10      	ldr	r2, [pc, #64]	; (8000370 <main+0x74>)
 8000330:	5c52      	ldrb	r2, [r2, r1]
 8000332:	701a      	strb	r2, [r3, #0]
		  if (++uart_rx_read_ptr >= RX_BUFFER_LEN) uart_rx_read_ptr = 0; // increase read pointer
 8000334:	4b10      	ldr	r3, [pc, #64]	; (8000378 <main+0x7c>)
 8000336:	881b      	ldrh	r3, [r3, #0]
 8000338:	b29b      	uxth	r3, r3
 800033a:	3301      	adds	r3, #1
 800033c:	b29b      	uxth	r3, r3
 800033e:	4a0e      	ldr	r2, [pc, #56]	; (8000378 <main+0x7c>)
 8000340:	1c19      	adds	r1, r3, #0
 8000342:	8011      	strh	r1, [r2, #0]
 8000344:	2b3f      	cmp	r3, #63	; 0x3f
 8000346:	d902      	bls.n	800034e <main+0x52>
 8000348:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <main+0x7c>)
 800034a:	2200      	movs	r2, #0
 800034c:	801a      	strh	r2, [r3, #0]
		  uart_byte_available(b); // process every received byte with the RX state machine
 800034e:	1dfb      	adds	r3, r7, #7
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	0018      	movs	r0, r3
 8000354:	f7ff ff94 	bl	8000280 <uart_byte_available>
	  while (uart_rx_read_ptr != uart_rx_write_ptr) {
 8000358:	4b07      	ldr	r3, [pc, #28]	; (8000378 <main+0x7c>)
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	b29b      	uxth	r3, r3
 800035e:	0019      	movs	r1, r3
 8000360:	4b06      	ldr	r3, [pc, #24]	; (800037c <main+0x80>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	685b      	ldr	r3, [r3, #4]
 8000366:	2240      	movs	r2, #64	; 0x40
 8000368:	1ad3      	subs	r3, r2, r3
 800036a:	4299      	cmp	r1, r3
 800036c:	d1da      	bne.n	8000324 <main+0x28>
 800036e:	e7f3      	b.n	8000358 <main+0x5c>
 8000370:	20000084 	.word	0x20000084
 8000374:	200000c8 	.word	0x200000c8
 8000378:	200000c4 	.word	0x200000c4
 800037c:	2000014c 	.word	0x2000014c

08000380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000380:	b590      	push	{r4, r7, lr}
 8000382:	b091      	sub	sp, #68	; 0x44
 8000384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000386:	2410      	movs	r4, #16
 8000388:	193b      	adds	r3, r7, r4
 800038a:	0018      	movs	r0, r3
 800038c:	2330      	movs	r3, #48	; 0x30
 800038e:	001a      	movs	r2, r3
 8000390:	2100      	movs	r1, #0
 8000392:	f002 faff 	bl	8002994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000396:	003b      	movs	r3, r7
 8000398:	0018      	movs	r0, r3
 800039a:	2310      	movs	r3, #16
 800039c:	001a      	movs	r2, r3
 800039e:	2100      	movs	r1, #0
 80003a0:	f002 faf8 	bl	8002994 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a4:	0021      	movs	r1, r4
 80003a6:	187b      	adds	r3, r7, r1
 80003a8:	2202      	movs	r2, #2
 80003aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ac:	187b      	adds	r3, r7, r1
 80003ae:	2201      	movs	r2, #1
 80003b0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003b2:	187b      	adds	r3, r7, r1
 80003b4:	2210      	movs	r2, #16
 80003b6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b8:	187b      	adds	r3, r7, r1
 80003ba:	2202      	movs	r2, #2
 80003bc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003be:	187b      	adds	r3, r7, r1
 80003c0:	2200      	movs	r2, #0
 80003c2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	22a0      	movs	r2, #160	; 0xa0
 80003c8:	0392      	lsls	r2, r2, #14
 80003ca:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003cc:	187b      	adds	r3, r7, r1
 80003ce:	2200      	movs	r2, #0
 80003d0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d2:	187b      	adds	r3, r7, r1
 80003d4:	0018      	movs	r0, r3
 80003d6:	f000 fec7 	bl	8001168 <HAL_RCC_OscConfig>
 80003da:	1e03      	subs	r3, r0, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80003de:	f000 f8d1 	bl	8000584 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e2:	003b      	movs	r3, r7
 80003e4:	2207      	movs	r2, #7
 80003e6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e8:	003b      	movs	r3, r7
 80003ea:	2202      	movs	r2, #2
 80003ec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ee:	003b      	movs	r3, r7
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003f4:	003b      	movs	r3, r7
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003fa:	003b      	movs	r3, r7
 80003fc:	2101      	movs	r1, #1
 80003fe:	0018      	movs	r0, r3
 8000400:	f001 f9cc 	bl	800179c <HAL_RCC_ClockConfig>
 8000404:	1e03      	subs	r3, r0, #0
 8000406:	d001      	beq.n	800040c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000408:	f000 f8bc 	bl	8000584 <Error_Handler>
  }
}
 800040c:	46c0      	nop			; (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	b011      	add	sp, #68	; 0x44
 8000412:	bd90      	pop	{r4, r7, pc}

08000414 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000418:	4b14      	ldr	r3, [pc, #80]	; (800046c <MX_USART2_UART_Init+0x58>)
 800041a:	4a15      	ldr	r2, [pc, #84]	; (8000470 <MX_USART2_UART_Init+0x5c>)
 800041c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800041e:	4b13      	ldr	r3, [pc, #76]	; (800046c <MX_USART2_UART_Init+0x58>)
 8000420:	2296      	movs	r2, #150	; 0x96
 8000422:	0212      	lsls	r2, r2, #8
 8000424:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000426:	4b11      	ldr	r3, [pc, #68]	; (800046c <MX_USART2_UART_Init+0x58>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <MX_USART2_UART_Init+0x58>)
 800042e:	2200      	movs	r2, #0
 8000430:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000432:	4b0e      	ldr	r3, [pc, #56]	; (800046c <MX_USART2_UART_Init+0x58>)
 8000434:	2200      	movs	r2, #0
 8000436:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <MX_USART2_UART_Init+0x58>)
 800043a:	220c      	movs	r2, #12
 800043c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800043e:	4b0b      	ldr	r3, [pc, #44]	; (800046c <MX_USART2_UART_Init+0x58>)
 8000440:	2200      	movs	r2, #0
 8000442:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000444:	4b09      	ldr	r3, [pc, #36]	; (800046c <MX_USART2_UART_Init+0x58>)
 8000446:	2200      	movs	r2, #0
 8000448:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800044a:	4b08      	ldr	r3, [pc, #32]	; (800046c <MX_USART2_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <MX_USART2_UART_Init+0x58>)
 8000452:	2200      	movs	r2, #0
 8000454:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000456:	4b05      	ldr	r3, [pc, #20]	; (800046c <MX_USART2_UART_Init+0x58>)
 8000458:	0018      	movs	r0, r3
 800045a:	f001 faf1 	bl	8001a40 <HAL_UART_Init>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d001      	beq.n	8000466 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000462:	f000 f88f 	bl	8000584 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	200000c8 	.word	0x200000c8
 8000470:	40004400 	.word	0x40004400

08000474 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800047a:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <MX_DMA_Init+0x38>)
 800047c:	695a      	ldr	r2, [r3, #20]
 800047e:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <MX_DMA_Init+0x38>)
 8000480:	2101      	movs	r1, #1
 8000482:	430a      	orrs	r2, r1
 8000484:	615a      	str	r2, [r3, #20]
 8000486:	4b09      	ldr	r3, [pc, #36]	; (80004ac <MX_DMA_Init+0x38>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	2201      	movs	r2, #1
 800048c:	4013      	ands	r3, r2
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000492:	2200      	movs	r2, #0
 8000494:	2100      	movs	r1, #0
 8000496:	200b      	movs	r0, #11
 8000498:	f000 fb0e 	bl	8000ab8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 800049c:	200b      	movs	r0, #11
 800049e:	f000 fb20 	bl	8000ae2 <HAL_NVIC_EnableIRQ>

}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	b002      	add	sp, #8
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	40021000 	.word	0x40021000

080004b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b0:	b590      	push	{r4, r7, lr}
 80004b2:	b089      	sub	sp, #36	; 0x24
 80004b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b6:	240c      	movs	r4, #12
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	0018      	movs	r0, r3
 80004bc:	2314      	movs	r3, #20
 80004be:	001a      	movs	r2, r3
 80004c0:	2100      	movs	r1, #0
 80004c2:	f002 fa67 	bl	8002994 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c6:	4b2d      	ldr	r3, [pc, #180]	; (800057c <MX_GPIO_Init+0xcc>)
 80004c8:	695a      	ldr	r2, [r3, #20]
 80004ca:	4b2c      	ldr	r3, [pc, #176]	; (800057c <MX_GPIO_Init+0xcc>)
 80004cc:	2180      	movs	r1, #128	; 0x80
 80004ce:	0309      	lsls	r1, r1, #12
 80004d0:	430a      	orrs	r2, r1
 80004d2:	615a      	str	r2, [r3, #20]
 80004d4:	4b29      	ldr	r3, [pc, #164]	; (800057c <MX_GPIO_Init+0xcc>)
 80004d6:	695a      	ldr	r2, [r3, #20]
 80004d8:	2380      	movs	r3, #128	; 0x80
 80004da:	031b      	lsls	r3, r3, #12
 80004dc:	4013      	ands	r3, r2
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004e2:	4b26      	ldr	r3, [pc, #152]	; (800057c <MX_GPIO_Init+0xcc>)
 80004e4:	695a      	ldr	r2, [r3, #20]
 80004e6:	4b25      	ldr	r3, [pc, #148]	; (800057c <MX_GPIO_Init+0xcc>)
 80004e8:	2180      	movs	r1, #128	; 0x80
 80004ea:	03c9      	lsls	r1, r1, #15
 80004ec:	430a      	orrs	r2, r1
 80004ee:	615a      	str	r2, [r3, #20]
 80004f0:	4b22      	ldr	r3, [pc, #136]	; (800057c <MX_GPIO_Init+0xcc>)
 80004f2:	695a      	ldr	r2, [r3, #20]
 80004f4:	2380      	movs	r3, #128	; 0x80
 80004f6:	03db      	lsls	r3, r3, #15
 80004f8:	4013      	ands	r3, r2
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fe:	4b1f      	ldr	r3, [pc, #124]	; (800057c <MX_GPIO_Init+0xcc>)
 8000500:	695a      	ldr	r2, [r3, #20]
 8000502:	4b1e      	ldr	r3, [pc, #120]	; (800057c <MX_GPIO_Init+0xcc>)
 8000504:	2180      	movs	r1, #128	; 0x80
 8000506:	0289      	lsls	r1, r1, #10
 8000508:	430a      	orrs	r2, r1
 800050a:	615a      	str	r2, [r3, #20]
 800050c:	4b1b      	ldr	r3, [pc, #108]	; (800057c <MX_GPIO_Init+0xcc>)
 800050e:	695a      	ldr	r2, [r3, #20]
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	029b      	lsls	r3, r3, #10
 8000514:	4013      	ands	r3, r2
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800051a:	2390      	movs	r3, #144	; 0x90
 800051c:	05db      	lsls	r3, r3, #23
 800051e:	2200      	movs	r2, #0
 8000520:	2120      	movs	r1, #32
 8000522:	0018      	movs	r0, r3
 8000524:	f000 fe02 	bl	800112c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000528:	193b      	adds	r3, r7, r4
 800052a:	2280      	movs	r2, #128	; 0x80
 800052c:	0192      	lsls	r2, r2, #6
 800052e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000530:	193b      	adds	r3, r7, r4
 8000532:	2284      	movs	r2, #132	; 0x84
 8000534:	0392      	lsls	r2, r2, #14
 8000536:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000538:	193b      	adds	r3, r7, r4
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800053e:	193b      	adds	r3, r7, r4
 8000540:	4a0f      	ldr	r2, [pc, #60]	; (8000580 <MX_GPIO_Init+0xd0>)
 8000542:	0019      	movs	r1, r3
 8000544:	0010      	movs	r0, r2
 8000546:	f000 fc81 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800054a:	0021      	movs	r1, r4
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2220      	movs	r2, #32
 8000550:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2201      	movs	r2, #1
 8000556:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000564:	187a      	adds	r2, r7, r1
 8000566:	2390      	movs	r3, #144	; 0x90
 8000568:	05db      	lsls	r3, r3, #23
 800056a:	0011      	movs	r1, r2
 800056c:	0018      	movs	r0, r3
 800056e:	f000 fc6d 	bl	8000e4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	b009      	add	sp, #36	; 0x24
 8000578:	bd90      	pop	{r4, r7, pc}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	40021000 	.word	0x40021000
 8000580:	48000800 	.word	0x48000800

08000584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000588:	b672      	cpsid	i
}
 800058a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800058c:	e7fe      	b.n	800058c <Error_Handler+0x8>
	...

08000590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <HAL_MspInit+0x44>)
 8000598:	699a      	ldr	r2, [r3, #24]
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <HAL_MspInit+0x44>)
 800059c:	2101      	movs	r1, #1
 800059e:	430a      	orrs	r2, r1
 80005a0:	619a      	str	r2, [r3, #24]
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <HAL_MspInit+0x44>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	2201      	movs	r2, #1
 80005a8:	4013      	ands	r3, r2
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <HAL_MspInit+0x44>)
 80005b0:	69da      	ldr	r2, [r3, #28]
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <HAL_MspInit+0x44>)
 80005b4:	2180      	movs	r1, #128	; 0x80
 80005b6:	0549      	lsls	r1, r1, #21
 80005b8:	430a      	orrs	r2, r1
 80005ba:	61da      	str	r2, [r3, #28]
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <HAL_MspInit+0x44>)
 80005be:	69da      	ldr	r2, [r3, #28]
 80005c0:	2380      	movs	r3, #128	; 0x80
 80005c2:	055b      	lsls	r3, r3, #21
 80005c4:	4013      	ands	r3, r2
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b002      	add	sp, #8
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	40021000 	.word	0x40021000

080005d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b08b      	sub	sp, #44	; 0x2c
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	2414      	movs	r4, #20
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	0018      	movs	r0, r3
 80005e6:	2314      	movs	r3, #20
 80005e8:	001a      	movs	r2, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	f002 f9d2 	bl	8002994 <memset>
  if(huart->Instance==USART2)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a3a      	ldr	r2, [pc, #232]	; (80006e0 <HAL_UART_MspInit+0x108>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d16e      	bne.n	80006d8 <HAL_UART_MspInit+0x100>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005fa:	4b3a      	ldr	r3, [pc, #232]	; (80006e4 <HAL_UART_MspInit+0x10c>)
 80005fc:	69da      	ldr	r2, [r3, #28]
 80005fe:	4b39      	ldr	r3, [pc, #228]	; (80006e4 <HAL_UART_MspInit+0x10c>)
 8000600:	2180      	movs	r1, #128	; 0x80
 8000602:	0289      	lsls	r1, r1, #10
 8000604:	430a      	orrs	r2, r1
 8000606:	61da      	str	r2, [r3, #28]
 8000608:	4b36      	ldr	r3, [pc, #216]	; (80006e4 <HAL_UART_MspInit+0x10c>)
 800060a:	69da      	ldr	r2, [r3, #28]
 800060c:	2380      	movs	r3, #128	; 0x80
 800060e:	029b      	lsls	r3, r3, #10
 8000610:	4013      	ands	r3, r2
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	4b33      	ldr	r3, [pc, #204]	; (80006e4 <HAL_UART_MspInit+0x10c>)
 8000618:	695a      	ldr	r2, [r3, #20]
 800061a:	4b32      	ldr	r3, [pc, #200]	; (80006e4 <HAL_UART_MspInit+0x10c>)
 800061c:	2180      	movs	r1, #128	; 0x80
 800061e:	0289      	lsls	r1, r1, #10
 8000620:	430a      	orrs	r2, r1
 8000622:	615a      	str	r2, [r3, #20]
 8000624:	4b2f      	ldr	r3, [pc, #188]	; (80006e4 <HAL_UART_MspInit+0x10c>)
 8000626:	695a      	ldr	r2, [r3, #20]
 8000628:	2380      	movs	r3, #128	; 0x80
 800062a:	029b      	lsls	r3, r3, #10
 800062c:	4013      	ands	r3, r2
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000632:	193b      	adds	r3, r7, r4
 8000634:	2204      	movs	r2, #4
 8000636:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000638:	193b      	adds	r3, r7, r4
 800063a:	2202      	movs	r2, #2
 800063c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	193b      	adds	r3, r7, r4
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000644:	193b      	adds	r3, r7, r4
 8000646:	2203      	movs	r2, #3
 8000648:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800064a:	193b      	adds	r3, r7, r4
 800064c:	2201      	movs	r2, #1
 800064e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	193a      	adds	r2, r7, r4
 8000652:	2390      	movs	r3, #144	; 0x90
 8000654:	05db      	lsls	r3, r3, #23
 8000656:	0011      	movs	r1, r2
 8000658:	0018      	movs	r0, r3
 800065a:	f000 fbf7 	bl	8000e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART_RX_Pin;
 800065e:	0021      	movs	r1, r4
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2208      	movs	r2, #8
 8000664:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2202      	movs	r2, #2
 800066a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2201      	movs	r2, #1
 800067c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 800067e:	187a      	adds	r2, r7, r1
 8000680:	2390      	movs	r3, #144	; 0x90
 8000682:	05db      	lsls	r3, r3, #23
 8000684:	0011      	movs	r1, r2
 8000686:	0018      	movs	r0, r3
 8000688:	f000 fbe0 	bl	8000e4c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 800068c:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <HAL_UART_MspInit+0x110>)
 800068e:	4a17      	ldr	r2, [pc, #92]	; (80006ec <HAL_UART_MspInit+0x114>)
 8000690:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <HAL_UART_MspInit+0x110>)
 8000694:	2200      	movs	r2, #0
 8000696:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <HAL_UART_MspInit+0x110>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <HAL_UART_MspInit+0x110>)
 80006a0:	2280      	movs	r2, #128	; 0x80
 80006a2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006a4:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <HAL_UART_MspInit+0x110>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <HAL_UART_MspInit+0x110>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80006b0:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <HAL_UART_MspInit+0x110>)
 80006b2:	2220      	movs	r2, #32
 80006b4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <HAL_UART_MspInit+0x110>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <HAL_UART_MspInit+0x110>)
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 fa2c 	bl	8000b1c <HAL_DMA_Init>
 80006c4:	1e03      	subs	r3, r0, #0
 80006c6:	d001      	beq.n	80006cc <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 80006c8:	f7ff ff5c 	bl	8000584 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <HAL_UART_MspInit+0x110>)
 80006d0:	671a      	str	r2, [r3, #112]	; 0x70
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <HAL_UART_MspInit+0x110>)
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	b00b      	add	sp, #44	; 0x2c
 80006de:	bd90      	pop	{r4, r7, pc}
 80006e0:	40004400 	.word	0x40004400
 80006e4:	40021000 	.word	0x40021000
 80006e8:	2000014c 	.word	0x2000014c
 80006ec:	40020058 	.word	0x40020058

080006f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <NMI_Handler+0x4>

080006f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <HardFault_Handler+0x4>

080006fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000714:	f000 f908 	bl	8000928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000724:	4b03      	ldr	r3, [pc, #12]	; (8000734 <DMA1_Channel4_5_IRQHandler+0x14>)
 8000726:	0018      	movs	r0, r3
 8000728:	f000 faa6 	bl	8000c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	2000014c 	.word	0x2000014c

08000738 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	e00a      	b.n	8000760 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800074a:	e000      	b.n	800074e <_read+0x16>
 800074c:	bf00      	nop
 800074e:	0001      	movs	r1, r0
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	1c5a      	adds	r2, r3, #1
 8000754:	60ba      	str	r2, [r7, #8]
 8000756:	b2ca      	uxtb	r2, r1
 8000758:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	3301      	adds	r3, #1
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	697a      	ldr	r2, [r7, #20]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	429a      	cmp	r2, r3
 8000766:	dbf0      	blt.n	800074a <_read+0x12>
  }

  return len;
 8000768:	687b      	ldr	r3, [r7, #4]
}
 800076a:	0018      	movs	r0, r3
 800076c:	46bd      	mov	sp, r7
 800076e:	b006      	add	sp, #24
 8000770:	bd80      	pop	{r7, pc}

08000772 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	b082      	sub	sp, #8
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800077a:	2301      	movs	r3, #1
 800077c:	425b      	negs	r3, r3
}
 800077e:	0018      	movs	r0, r3
 8000780:	46bd      	mov	sp, r7
 8000782:	b002      	add	sp, #8
 8000784:	bd80      	pop	{r7, pc}

08000786 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
 800078e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	2280      	movs	r2, #128	; 0x80
 8000794:	0192      	lsls	r2, r2, #6
 8000796:	605a      	str	r2, [r3, #4]
  return 0;
 8000798:	2300      	movs	r3, #0
}
 800079a:	0018      	movs	r0, r3
 800079c:	46bd      	mov	sp, r7
 800079e:	b002      	add	sp, #8
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <_isatty>:

int _isatty(int file)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007aa:	2301      	movs	r3, #1
}
 80007ac:	0018      	movs	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b002      	add	sp, #8
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	0018      	movs	r0, r3
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b004      	add	sp, #16
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007d4:	4a14      	ldr	r2, [pc, #80]	; (8000828 <_sbrk+0x5c>)
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <_sbrk+0x60>)
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007e0:	4b13      	ldr	r3, [pc, #76]	; (8000830 <_sbrk+0x64>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d102      	bne.n	80007ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <_sbrk+0x64>)
 80007ea:	4a12      	ldr	r2, [pc, #72]	; (8000834 <_sbrk+0x68>)
 80007ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <_sbrk+0x64>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	18d3      	adds	r3, r2, r3
 80007f6:	693a      	ldr	r2, [r7, #16]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d207      	bcs.n	800080c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007fc:	f002 f920 	bl	8002a40 <__errno>
 8000800:	0003      	movs	r3, r0
 8000802:	220c      	movs	r2, #12
 8000804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000806:	2301      	movs	r3, #1
 8000808:	425b      	negs	r3, r3
 800080a:	e009      	b.n	8000820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <_sbrk+0x64>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000812:	4b07      	ldr	r3, [pc, #28]	; (8000830 <_sbrk+0x64>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	18d2      	adds	r2, r2, r3
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <_sbrk+0x64>)
 800081c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800081e:	68fb      	ldr	r3, [r7, #12]
}
 8000820:	0018      	movs	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	b006      	add	sp, #24
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20002000 	.word	0x20002000
 800082c:	00000400 	.word	0x00000400
 8000830:	20000294 	.word	0x20000294
 8000834:	200003e8 	.word	0x200003e8

08000838 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000844:	480d      	ldr	r0, [pc, #52]	; (800087c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000846:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000848:	480d      	ldr	r0, [pc, #52]	; (8000880 <LoopForever+0x6>)
  ldr r1, =_edata
 800084a:	490e      	ldr	r1, [pc, #56]	; (8000884 <LoopForever+0xa>)
  ldr r2, =_sidata
 800084c:	4a0e      	ldr	r2, [pc, #56]	; (8000888 <LoopForever+0xe>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000850:	e002      	b.n	8000858 <LoopCopyDataInit>

08000852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000856:	3304      	adds	r3, #4

08000858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800085c:	d3f9      	bcc.n	8000852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085e:	4a0b      	ldr	r2, [pc, #44]	; (800088c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000860:	4c0b      	ldr	r4, [pc, #44]	; (8000890 <LoopForever+0x16>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000864:	e001      	b.n	800086a <LoopFillZerobss>

08000866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000868:	3204      	adds	r2, #4

0800086a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800086c:	d3fb      	bcc.n	8000866 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800086e:	f7ff ffe3 	bl	8000838 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000872:	f002 f8eb 	bl	8002a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000876:	f7ff fd41 	bl	80002fc <main>

0800087a <LoopForever>:

LoopForever:
    b LoopForever
 800087a:	e7fe      	b.n	800087a <LoopForever>
  ldr   r0, =_estack
 800087c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000884:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000888:	080036c0 	.word	0x080036c0
  ldr r2, =_sbss
 800088c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000890:	200003e8 	.word	0x200003e8

08000894 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000894:	e7fe      	b.n	8000894 <ADC1_IRQHandler>
	...

08000898 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <HAL_Init+0x24>)
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_Init+0x24>)
 80008a2:	2110      	movs	r1, #16
 80008a4:	430a      	orrs	r2, r1
 80008a6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008a8:	2000      	movs	r0, #0
 80008aa:	f000 f809 	bl	80008c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ae:	f7ff fe6f 	bl	8000590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b2:	2300      	movs	r3, #0
}
 80008b4:	0018      	movs	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	40022000 	.word	0x40022000

080008c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <HAL_InitTick+0x5c>)
 80008ca:	681c      	ldr	r4, [r3, #0]
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <HAL_InitTick+0x60>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	0019      	movs	r1, r3
 80008d2:	23fa      	movs	r3, #250	; 0xfa
 80008d4:	0098      	lsls	r0, r3, #2
 80008d6:	f7ff fc21 	bl	800011c <__udivsi3>
 80008da:	0003      	movs	r3, r0
 80008dc:	0019      	movs	r1, r3
 80008de:	0020      	movs	r0, r4
 80008e0:	f7ff fc1c 	bl	800011c <__udivsi3>
 80008e4:	0003      	movs	r3, r0
 80008e6:	0018      	movs	r0, r3
 80008e8:	f000 f90b 	bl	8000b02 <HAL_SYSTICK_Config>
 80008ec:	1e03      	subs	r3, r0, #0
 80008ee:	d001      	beq.n	80008f4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008f0:	2301      	movs	r3, #1
 80008f2:	e00f      	b.n	8000914 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b03      	cmp	r3, #3
 80008f8:	d80b      	bhi.n	8000912 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008fa:	6879      	ldr	r1, [r7, #4]
 80008fc:	2301      	movs	r3, #1
 80008fe:	425b      	negs	r3, r3
 8000900:	2200      	movs	r2, #0
 8000902:	0018      	movs	r0, r3
 8000904:	f000 f8d8 	bl	8000ab8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_InitTick+0x64>)
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800090e:	2300      	movs	r3, #0
 8000910:	e000      	b.n	8000914 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
}
 8000914:	0018      	movs	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	b003      	add	sp, #12
 800091a:	bd90      	pop	{r4, r7, pc}
 800091c:	20000000 	.word	0x20000000
 8000920:	20000008 	.word	0x20000008
 8000924:	20000004 	.word	0x20000004

08000928 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <HAL_IncTick+0x1c>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	001a      	movs	r2, r3
 8000932:	4b05      	ldr	r3, [pc, #20]	; (8000948 <HAL_IncTick+0x20>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	18d2      	adds	r2, r2, r3
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <HAL_IncTick+0x20>)
 800093a:	601a      	str	r2, [r3, #0]
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	20000008 	.word	0x20000008
 8000948:	20000298 	.word	0x20000298

0800094c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  return uwTick;
 8000950:	4b02      	ldr	r3, [pc, #8]	; (800095c <HAL_GetTick+0x10>)
 8000952:	681b      	ldr	r3, [r3, #0]
}
 8000954:	0018      	movs	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	20000298 	.word	0x20000298

08000960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	0002      	movs	r2, r0
 8000968:	1dfb      	adds	r3, r7, #7
 800096a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800096c:	1dfb      	adds	r3, r7, #7
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b7f      	cmp	r3, #127	; 0x7f
 8000972:	d809      	bhi.n	8000988 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000974:	1dfb      	adds	r3, r7, #7
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	001a      	movs	r2, r3
 800097a:	231f      	movs	r3, #31
 800097c:	401a      	ands	r2, r3
 800097e:	4b04      	ldr	r3, [pc, #16]	; (8000990 <__NVIC_EnableIRQ+0x30>)
 8000980:	2101      	movs	r1, #1
 8000982:	4091      	lsls	r1, r2
 8000984:	000a      	movs	r2, r1
 8000986:	601a      	str	r2, [r3, #0]
  }
}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b002      	add	sp, #8
 800098e:	bd80      	pop	{r7, pc}
 8000990:	e000e100 	.word	0xe000e100

08000994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	0002      	movs	r2, r0
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009a2:	1dfb      	adds	r3, r7, #7
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b7f      	cmp	r3, #127	; 0x7f
 80009a8:	d828      	bhi.n	80009fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009aa:	4a2f      	ldr	r2, [pc, #188]	; (8000a68 <__NVIC_SetPriority+0xd4>)
 80009ac:	1dfb      	adds	r3, r7, #7
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b25b      	sxtb	r3, r3
 80009b2:	089b      	lsrs	r3, r3, #2
 80009b4:	33c0      	adds	r3, #192	; 0xc0
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	589b      	ldr	r3, [r3, r2]
 80009ba:	1dfa      	adds	r2, r7, #7
 80009bc:	7812      	ldrb	r2, [r2, #0]
 80009be:	0011      	movs	r1, r2
 80009c0:	2203      	movs	r2, #3
 80009c2:	400a      	ands	r2, r1
 80009c4:	00d2      	lsls	r2, r2, #3
 80009c6:	21ff      	movs	r1, #255	; 0xff
 80009c8:	4091      	lsls	r1, r2
 80009ca:	000a      	movs	r2, r1
 80009cc:	43d2      	mvns	r2, r2
 80009ce:	401a      	ands	r2, r3
 80009d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	019b      	lsls	r3, r3, #6
 80009d6:	22ff      	movs	r2, #255	; 0xff
 80009d8:	401a      	ands	r2, r3
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	0018      	movs	r0, r3
 80009e0:	2303      	movs	r3, #3
 80009e2:	4003      	ands	r3, r0
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e8:	481f      	ldr	r0, [pc, #124]	; (8000a68 <__NVIC_SetPriority+0xd4>)
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	b25b      	sxtb	r3, r3
 80009f0:	089b      	lsrs	r3, r3, #2
 80009f2:	430a      	orrs	r2, r1
 80009f4:	33c0      	adds	r3, #192	; 0xc0
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009fa:	e031      	b.n	8000a60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009fc:	4a1b      	ldr	r2, [pc, #108]	; (8000a6c <__NVIC_SetPriority+0xd8>)
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	0019      	movs	r1, r3
 8000a04:	230f      	movs	r3, #15
 8000a06:	400b      	ands	r3, r1
 8000a08:	3b08      	subs	r3, #8
 8000a0a:	089b      	lsrs	r3, r3, #2
 8000a0c:	3306      	adds	r3, #6
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	18d3      	adds	r3, r2, r3
 8000a12:	3304      	adds	r3, #4
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	1dfa      	adds	r2, r7, #7
 8000a18:	7812      	ldrb	r2, [r2, #0]
 8000a1a:	0011      	movs	r1, r2
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	400a      	ands	r2, r1
 8000a20:	00d2      	lsls	r2, r2, #3
 8000a22:	21ff      	movs	r1, #255	; 0xff
 8000a24:	4091      	lsls	r1, r2
 8000a26:	000a      	movs	r2, r1
 8000a28:	43d2      	mvns	r2, r2
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	019b      	lsls	r3, r3, #6
 8000a32:	22ff      	movs	r2, #255	; 0xff
 8000a34:	401a      	ands	r2, r3
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	4003      	ands	r3, r0
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a44:	4809      	ldr	r0, [pc, #36]	; (8000a6c <__NVIC_SetPriority+0xd8>)
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	001c      	movs	r4, r3
 8000a4c:	230f      	movs	r3, #15
 8000a4e:	4023      	ands	r3, r4
 8000a50:	3b08      	subs	r3, #8
 8000a52:	089b      	lsrs	r3, r3, #2
 8000a54:	430a      	orrs	r2, r1
 8000a56:	3306      	adds	r3, #6
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	18c3      	adds	r3, r0, r3
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	601a      	str	r2, [r3, #0]
}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b003      	add	sp, #12
 8000a66:	bd90      	pop	{r4, r7, pc}
 8000a68:	e000e100 	.word	0xe000e100
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	1e5a      	subs	r2, r3, #1
 8000a7c:	2380      	movs	r3, #128	; 0x80
 8000a7e:	045b      	lsls	r3, r3, #17
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d301      	bcc.n	8000a88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a84:	2301      	movs	r3, #1
 8000a86:	e010      	b.n	8000aaa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <SysTick_Config+0x44>)
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	3a01      	subs	r2, #1
 8000a8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a90:	2301      	movs	r3, #1
 8000a92:	425b      	negs	r3, r3
 8000a94:	2103      	movs	r1, #3
 8000a96:	0018      	movs	r0, r3
 8000a98:	f7ff ff7c 	bl	8000994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <SysTick_Config+0x44>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aa2:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <SysTick_Config+0x44>)
 8000aa4:	2207      	movs	r2, #7
 8000aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	0018      	movs	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b002      	add	sp, #8
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	e000e010 	.word	0xe000e010

08000ab8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
 8000ac2:	210f      	movs	r1, #15
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	1c02      	adds	r2, r0, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	b25b      	sxtb	r3, r3
 8000ad2:	0011      	movs	r1, r2
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f7ff ff5d 	bl	8000994 <__NVIC_SetPriority>
}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b004      	add	sp, #16
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	0002      	movs	r2, r0
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	b25b      	sxtb	r3, r3
 8000af4:	0018      	movs	r0, r3
 8000af6:	f7ff ff33 	bl	8000960 <__NVIC_EnableIRQ>
}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b002      	add	sp, #8
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f7ff ffaf 	bl	8000a70 <SysTick_Config>
 8000b12:	0003      	movs	r3, r0
}
 8000b14:	0018      	movs	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b002      	add	sp, #8
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d101      	bne.n	8000b32 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e036      	b.n	8000ba0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2221      	movs	r2, #33	; 0x21
 8000b36:	2102      	movs	r1, #2
 8000b38:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	4a18      	ldr	r2, [pc, #96]	; (8000ba8 <HAL_DMA_Init+0x8c>)
 8000b46:	4013      	ands	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	695b      	ldr	r3, [r3, #20]
 8000b64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	69db      	ldr	r3, [r3, #28]
 8000b70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	0018      	movs	r0, r3
 8000b84:	f000 f946 	bl	8000e14 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2221      	movs	r2, #33	; 0x21
 8000b92:	2101      	movs	r1, #1
 8000b94:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2220      	movs	r2, #32
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000b9e:	2300      	movs	r3, #0
}  
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b004      	add	sp, #16
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	ffffc00f 	.word	0xffffc00f

08000bac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
 8000bb8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000bba:	2317      	movs	r3, #23
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2220      	movs	r2, #32
 8000bc6:	5c9b      	ldrb	r3, [r3, r2]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d101      	bne.n	8000bd0 <HAL_DMA_Start_IT+0x24>
 8000bcc:	2302      	movs	r3, #2
 8000bce:	e04f      	b.n	8000c70 <HAL_DMA_Start_IT+0xc4>
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	2220      	movs	r2, #32
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	2221      	movs	r2, #33	; 0x21
 8000bdc:	5c9b      	ldrb	r3, [r3, r2]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d13a      	bne.n	8000c5a <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2221      	movs	r2, #33	; 0x21
 8000be8:	2102      	movs	r1, #2
 8000bea:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	438a      	bics	r2, r1
 8000c00:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	68b9      	ldr	r1, [r7, #8]
 8000c08:	68f8      	ldr	r0, [r7, #12]
 8000c0a:	f000 f8d7 	bl	8000dbc <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d008      	beq.n	8000c28 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	210e      	movs	r1, #14
 8000c22:	430a      	orrs	r2, r1
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	e00f      	b.n	8000c48 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	210a      	movs	r1, #10
 8000c34:	430a      	orrs	r2, r1
 8000c36:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2104      	movs	r1, #4
 8000c44:	438a      	bics	r2, r1
 8000c46:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2101      	movs	r1, #1
 8000c54:	430a      	orrs	r2, r1
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	e007      	b.n	8000c6a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	2220      	movs	r2, #32
 8000c5e:	2100      	movs	r1, #0
 8000c60:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000c62:	2317      	movs	r3, #23
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	2202      	movs	r2, #2
 8000c68:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000c6a:	2317      	movs	r3, #23
 8000c6c:	18fb      	adds	r3, r7, r3
 8000c6e:	781b      	ldrb	r3, [r3, #0]
} 
 8000c70:	0018      	movs	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b006      	add	sp, #24
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	2204      	movs	r2, #4
 8000c96:	409a      	lsls	r2, r3
 8000c98:	0013      	movs	r3, r2
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	d024      	beq.n	8000cea <HAL_DMA_IRQHandler+0x72>
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	2204      	movs	r2, #4
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	d020      	beq.n	8000cea <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2220      	movs	r2, #32
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	d107      	bne.n	8000cc4 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2104      	movs	r1, #4
 8000cc0:	438a      	bics	r2, r1
 8000cc2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ccc:	2104      	movs	r1, #4
 8000cce:	4091      	lsls	r1, r2
 8000cd0:	000a      	movs	r2, r1
 8000cd2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d100      	bne.n	8000cde <HAL_DMA_IRQHandler+0x66>
 8000cdc:	e06a      	b.n	8000db4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	0010      	movs	r0, r2
 8000ce6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000ce8:	e064      	b.n	8000db4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	2202      	movs	r2, #2
 8000cf0:	409a      	lsls	r2, r3
 8000cf2:	0013      	movs	r3, r2
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	d02b      	beq.n	8000d52 <HAL_DMA_IRQHandler+0xda>
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	4013      	ands	r3, r2
 8000d00:	d027      	beq.n	8000d52 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2220      	movs	r2, #32
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	d10b      	bne.n	8000d26 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	210a      	movs	r1, #10
 8000d1a:	438a      	bics	r2, r1
 8000d1c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2221      	movs	r2, #33	; 0x21
 8000d22:	2101      	movs	r1, #1
 8000d24:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d2e:	2102      	movs	r1, #2
 8000d30:	4091      	lsls	r1, r2
 8000d32:	000a      	movs	r2, r1
 8000d34:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2220      	movs	r2, #32
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d036      	beq.n	8000db4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	0010      	movs	r0, r2
 8000d4e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000d50:	e030      	b.n	8000db4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	2208      	movs	r2, #8
 8000d58:	409a      	lsls	r2, r3
 8000d5a:	0013      	movs	r3, r2
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	d028      	beq.n	8000db4 <HAL_DMA_IRQHandler+0x13c>
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	2208      	movs	r2, #8
 8000d66:	4013      	ands	r3, r2
 8000d68:	d024      	beq.n	8000db4 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	210e      	movs	r1, #14
 8000d76:	438a      	bics	r2, r1
 8000d78:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d82:	2101      	movs	r1, #1
 8000d84:	4091      	lsls	r1, r2
 8000d86:	000a      	movs	r2, r1
 8000d88:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2221      	movs	r2, #33	; 0x21
 8000d94:	2101      	movs	r1, #1
 8000d96:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2220      	movs	r2, #32
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d005      	beq.n	8000db4 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	0010      	movs	r0, r2
 8000db0:	4798      	blx	r3
    }
   }
}  
 8000db2:	e7ff      	b.n	8000db4 <HAL_DMA_IRQHandler+0x13c>
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b004      	add	sp, #16
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	4091      	lsls	r1, r2
 8000dd6:	000a      	movs	r2, r1
 8000dd8:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	683a      	ldr	r2, [r7, #0]
 8000de0:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b10      	cmp	r3, #16
 8000de8:	d108      	bne.n	8000dfc <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000dfa:	e007      	b.n	8000e0c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	68ba      	ldr	r2, [r7, #8]
 8000e02:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	60da      	str	r2, [r3, #12]
}
 8000e0c:	46c0      	nop			; (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b004      	add	sp, #16
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <DMA_CalcBaseAndBitshift+0x30>)
 8000e22:	4694      	mov	ip, r2
 8000e24:	4463      	add	r3, ip
 8000e26:	2114      	movs	r1, #20
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f7ff f977 	bl	800011c <__udivsi3>
 8000e2e:	0003      	movs	r3, r0
 8000e30:	009a      	lsls	r2, r3, #2
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a03      	ldr	r2, [pc, #12]	; (8000e48 <DMA_CalcBaseAndBitshift+0x34>)
 8000e3a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000e3c:	46c0      	nop			; (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b002      	add	sp, #8
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	bffdfff8 	.word	0xbffdfff8
 8000e48:	40020000 	.word	0x40020000

08000e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5a:	e14f      	b.n	80010fc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2101      	movs	r1, #1
 8000e62:	697a      	ldr	r2, [r7, #20]
 8000e64:	4091      	lsls	r1, r2
 8000e66:	000a      	movs	r2, r1
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d100      	bne.n	8000e74 <HAL_GPIO_Init+0x28>
 8000e72:	e140      	b.n	80010f6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	2203      	movs	r2, #3
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d005      	beq.n	8000e8c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2203      	movs	r2, #3
 8000e86:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d130      	bne.n	8000eee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	2203      	movs	r2, #3
 8000e98:	409a      	lsls	r2, r3
 8000e9a:	0013      	movs	r3, r2
 8000e9c:	43da      	mvns	r2, r3
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	68da      	ldr	r2, [r3, #12]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	409a      	lsls	r2, r3
 8000eae:	0013      	movs	r3, r2
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	409a      	lsls	r2, r3
 8000ec8:	0013      	movs	r3, r2
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	091b      	lsrs	r3, r3, #4
 8000ed8:	2201      	movs	r2, #1
 8000eda:	401a      	ands	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	409a      	lsls	r2, r3
 8000ee0:	0013      	movs	r3, r2
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d017      	beq.n	8000f2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	2203      	movs	r2, #3
 8000f06:	409a      	lsls	r2, r3
 8000f08:	0013      	movs	r3, r2
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	689a      	ldr	r2, [r3, #8]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	409a      	lsls	r2, r3
 8000f1c:	0013      	movs	r3, r2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2203      	movs	r2, #3
 8000f30:	4013      	ands	r3, r2
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d123      	bne.n	8000f7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	08da      	lsrs	r2, r3, #3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3208      	adds	r2, #8
 8000f3e:	0092      	lsls	r2, r2, #2
 8000f40:	58d3      	ldr	r3, [r2, r3]
 8000f42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	2207      	movs	r2, #7
 8000f48:	4013      	ands	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	220f      	movs	r2, #15
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	0013      	movs	r3, r2
 8000f52:	43da      	mvns	r2, r3
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	691a      	ldr	r2, [r3, #16]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	2107      	movs	r1, #7
 8000f62:	400b      	ands	r3, r1
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	409a      	lsls	r2, r3
 8000f68:	0013      	movs	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	08da      	lsrs	r2, r3, #3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3208      	adds	r2, #8
 8000f78:	0092      	lsls	r2, r2, #2
 8000f7a:	6939      	ldr	r1, [r7, #16]
 8000f7c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	2203      	movs	r2, #3
 8000f8a:	409a      	lsls	r2, r3
 8000f8c:	0013      	movs	r3, r2
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	401a      	ands	r2, r3
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	0013      	movs	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	23c0      	movs	r3, #192	; 0xc0
 8000fb8:	029b      	lsls	r3, r3, #10
 8000fba:	4013      	ands	r3, r2
 8000fbc:	d100      	bne.n	8000fc0 <HAL_GPIO_Init+0x174>
 8000fbe:	e09a      	b.n	80010f6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc0:	4b54      	ldr	r3, [pc, #336]	; (8001114 <HAL_GPIO_Init+0x2c8>)
 8000fc2:	699a      	ldr	r2, [r3, #24]
 8000fc4:	4b53      	ldr	r3, [pc, #332]	; (8001114 <HAL_GPIO_Init+0x2c8>)
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	619a      	str	r2, [r3, #24]
 8000fcc:	4b51      	ldr	r3, [pc, #324]	; (8001114 <HAL_GPIO_Init+0x2c8>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fd8:	4a4f      	ldr	r2, [pc, #316]	; (8001118 <HAL_GPIO_Init+0x2cc>)
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	3302      	adds	r3, #2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	589b      	ldr	r3, [r3, r2]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	2203      	movs	r2, #3
 8000fea:	4013      	ands	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	220f      	movs	r2, #15
 8000ff0:	409a      	lsls	r2, r3
 8000ff2:	0013      	movs	r3, r2
 8000ff4:	43da      	mvns	r2, r3
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	2390      	movs	r3, #144	; 0x90
 8001000:	05db      	lsls	r3, r3, #23
 8001002:	429a      	cmp	r2, r3
 8001004:	d013      	beq.n	800102e <HAL_GPIO_Init+0x1e2>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a44      	ldr	r2, [pc, #272]	; (800111c <HAL_GPIO_Init+0x2d0>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d00d      	beq.n	800102a <HAL_GPIO_Init+0x1de>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a43      	ldr	r2, [pc, #268]	; (8001120 <HAL_GPIO_Init+0x2d4>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d007      	beq.n	8001026 <HAL_GPIO_Init+0x1da>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a42      	ldr	r2, [pc, #264]	; (8001124 <HAL_GPIO_Init+0x2d8>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d101      	bne.n	8001022 <HAL_GPIO_Init+0x1d6>
 800101e:	2303      	movs	r3, #3
 8001020:	e006      	b.n	8001030 <HAL_GPIO_Init+0x1e4>
 8001022:	2305      	movs	r3, #5
 8001024:	e004      	b.n	8001030 <HAL_GPIO_Init+0x1e4>
 8001026:	2302      	movs	r3, #2
 8001028:	e002      	b.n	8001030 <HAL_GPIO_Init+0x1e4>
 800102a:	2301      	movs	r3, #1
 800102c:	e000      	b.n	8001030 <HAL_GPIO_Init+0x1e4>
 800102e:	2300      	movs	r3, #0
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	2103      	movs	r1, #3
 8001034:	400a      	ands	r2, r1
 8001036:	0092      	lsls	r2, r2, #2
 8001038:	4093      	lsls	r3, r2
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001040:	4935      	ldr	r1, [pc, #212]	; (8001118 <HAL_GPIO_Init+0x2cc>)
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	089b      	lsrs	r3, r3, #2
 8001046:	3302      	adds	r3, #2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800104e:	4b36      	ldr	r3, [pc, #216]	; (8001128 <HAL_GPIO_Init+0x2dc>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	43da      	mvns	r2, r3
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4013      	ands	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	2380      	movs	r3, #128	; 0x80
 8001064:	025b      	lsls	r3, r3, #9
 8001066:	4013      	ands	r3, r2
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4313      	orrs	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001072:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <HAL_GPIO_Init+0x2dc>)
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001078:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <HAL_GPIO_Init+0x2dc>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	43da      	mvns	r2, r3
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	029b      	lsls	r3, r3, #10
 8001090:	4013      	ands	r3, r2
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800109c:	4b22      	ldr	r3, [pc, #136]	; (8001128 <HAL_GPIO_Init+0x2dc>)
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010a2:	4b21      	ldr	r3, [pc, #132]	; (8001128 <HAL_GPIO_Init+0x2dc>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	43da      	mvns	r2, r3
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	035b      	lsls	r3, r3, #13
 80010ba:	4013      	ands	r3, r2
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_GPIO_Init+0x2dc>)
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80010cc:	4b16      	ldr	r3, [pc, #88]	; (8001128 <HAL_GPIO_Init+0x2dc>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	43da      	mvns	r2, r3
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	039b      	lsls	r3, r3, #14
 80010e4:	4013      	ands	r3, r2
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010f0:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <HAL_GPIO_Init+0x2dc>)
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	3301      	adds	r3, #1
 80010fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	40da      	lsrs	r2, r3
 8001104:	1e13      	subs	r3, r2, #0
 8001106:	d000      	beq.n	800110a <HAL_GPIO_Init+0x2be>
 8001108:	e6a8      	b.n	8000e5c <HAL_GPIO_Init+0x10>
  } 
}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	46c0      	nop			; (mov r8, r8)
 800110e:	46bd      	mov	sp, r7
 8001110:	b006      	add	sp, #24
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40021000 	.word	0x40021000
 8001118:	40010000 	.word	0x40010000
 800111c:	48000400 	.word	0x48000400
 8001120:	48000800 	.word	0x48000800
 8001124:	48000c00 	.word	0x48000c00
 8001128:	40010400 	.word	0x40010400

0800112c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	0008      	movs	r0, r1
 8001136:	0011      	movs	r1, r2
 8001138:	1cbb      	adds	r3, r7, #2
 800113a:	1c02      	adds	r2, r0, #0
 800113c:	801a      	strh	r2, [r3, #0]
 800113e:	1c7b      	adds	r3, r7, #1
 8001140:	1c0a      	adds	r2, r1, #0
 8001142:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001144:	1c7b      	adds	r3, r7, #1
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d004      	beq.n	8001156 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800114c:	1cbb      	adds	r3, r7, #2
 800114e:	881a      	ldrh	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001154:	e003      	b.n	800115e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001156:	1cbb      	adds	r3, r7, #2
 8001158:	881a      	ldrh	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	46bd      	mov	sp, r7
 8001162:	b002      	add	sp, #8
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e301      	b.n	800177e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2201      	movs	r2, #1
 8001180:	4013      	ands	r3, r2
 8001182:	d100      	bne.n	8001186 <HAL_RCC_OscConfig+0x1e>
 8001184:	e08d      	b.n	80012a2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001186:	4bc3      	ldr	r3, [pc, #780]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	220c      	movs	r2, #12
 800118c:	4013      	ands	r3, r2
 800118e:	2b04      	cmp	r3, #4
 8001190:	d00e      	beq.n	80011b0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001192:	4bc0      	ldr	r3, [pc, #768]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	220c      	movs	r2, #12
 8001198:	4013      	ands	r3, r2
 800119a:	2b08      	cmp	r3, #8
 800119c:	d116      	bne.n	80011cc <HAL_RCC_OscConfig+0x64>
 800119e:	4bbd      	ldr	r3, [pc, #756]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	2380      	movs	r3, #128	; 0x80
 80011a4:	025b      	lsls	r3, r3, #9
 80011a6:	401a      	ands	r2, r3
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	025b      	lsls	r3, r3, #9
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d10d      	bne.n	80011cc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b0:	4bb8      	ldr	r3, [pc, #736]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	029b      	lsls	r3, r3, #10
 80011b8:	4013      	ands	r3, r2
 80011ba:	d100      	bne.n	80011be <HAL_RCC_OscConfig+0x56>
 80011bc:	e070      	b.n	80012a0 <HAL_RCC_OscConfig+0x138>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d000      	beq.n	80011c8 <HAL_RCC_OscConfig+0x60>
 80011c6:	e06b      	b.n	80012a0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e2d8      	b.n	800177e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d107      	bne.n	80011e4 <HAL_RCC_OscConfig+0x7c>
 80011d4:	4baf      	ldr	r3, [pc, #700]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4bae      	ldr	r3, [pc, #696]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80011da:	2180      	movs	r1, #128	; 0x80
 80011dc:	0249      	lsls	r1, r1, #9
 80011de:	430a      	orrs	r2, r1
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	e02f      	b.n	8001244 <HAL_RCC_OscConfig+0xdc>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10c      	bne.n	8001206 <HAL_RCC_OscConfig+0x9e>
 80011ec:	4ba9      	ldr	r3, [pc, #676]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4ba8      	ldr	r3, [pc, #672]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80011f2:	49a9      	ldr	r1, [pc, #676]	; (8001498 <HAL_RCC_OscConfig+0x330>)
 80011f4:	400a      	ands	r2, r1
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	4ba6      	ldr	r3, [pc, #664]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4ba5      	ldr	r3, [pc, #660]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80011fe:	49a7      	ldr	r1, [pc, #668]	; (800149c <HAL_RCC_OscConfig+0x334>)
 8001200:	400a      	ands	r2, r1
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	e01e      	b.n	8001244 <HAL_RCC_OscConfig+0xdc>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b05      	cmp	r3, #5
 800120c:	d10e      	bne.n	800122c <HAL_RCC_OscConfig+0xc4>
 800120e:	4ba1      	ldr	r3, [pc, #644]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4ba0      	ldr	r3, [pc, #640]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001214:	2180      	movs	r1, #128	; 0x80
 8001216:	02c9      	lsls	r1, r1, #11
 8001218:	430a      	orrs	r2, r1
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	4b9d      	ldr	r3, [pc, #628]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b9c      	ldr	r3, [pc, #624]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001222:	2180      	movs	r1, #128	; 0x80
 8001224:	0249      	lsls	r1, r1, #9
 8001226:	430a      	orrs	r2, r1
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	e00b      	b.n	8001244 <HAL_RCC_OscConfig+0xdc>
 800122c:	4b99      	ldr	r3, [pc, #612]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b98      	ldr	r3, [pc, #608]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001232:	4999      	ldr	r1, [pc, #612]	; (8001498 <HAL_RCC_OscConfig+0x330>)
 8001234:	400a      	ands	r2, r1
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	4b96      	ldr	r3, [pc, #600]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b95      	ldr	r3, [pc, #596]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 800123e:	4997      	ldr	r1, [pc, #604]	; (800149c <HAL_RCC_OscConfig+0x334>)
 8001240:	400a      	ands	r2, r1
 8001242:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d014      	beq.n	8001276 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7ff fb7e 	bl	800094c <HAL_GetTick>
 8001250:	0003      	movs	r3, r0
 8001252:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001256:	f7ff fb79 	bl	800094c <HAL_GetTick>
 800125a:	0002      	movs	r2, r0
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b64      	cmp	r3, #100	; 0x64
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e28a      	b.n	800177e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001268:	4b8a      	ldr	r3, [pc, #552]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	029b      	lsls	r3, r3, #10
 8001270:	4013      	ands	r3, r2
 8001272:	d0f0      	beq.n	8001256 <HAL_RCC_OscConfig+0xee>
 8001274:	e015      	b.n	80012a2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001276:	f7ff fb69 	bl	800094c <HAL_GetTick>
 800127a:	0003      	movs	r3, r0
 800127c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001280:	f7ff fb64 	bl	800094c <HAL_GetTick>
 8001284:	0002      	movs	r2, r0
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b64      	cmp	r3, #100	; 0x64
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e275      	b.n	800177e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001292:	4b80      	ldr	r3, [pc, #512]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	029b      	lsls	r3, r3, #10
 800129a:	4013      	ands	r3, r2
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0x118>
 800129e:	e000      	b.n	80012a2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2202      	movs	r2, #2
 80012a8:	4013      	ands	r3, r2
 80012aa:	d100      	bne.n	80012ae <HAL_RCC_OscConfig+0x146>
 80012ac:	e069      	b.n	8001382 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012ae:	4b79      	ldr	r3, [pc, #484]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	220c      	movs	r2, #12
 80012b4:	4013      	ands	r3, r2
 80012b6:	d00b      	beq.n	80012d0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012b8:	4b76      	ldr	r3, [pc, #472]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	220c      	movs	r2, #12
 80012be:	4013      	ands	r3, r2
 80012c0:	2b08      	cmp	r3, #8
 80012c2:	d11c      	bne.n	80012fe <HAL_RCC_OscConfig+0x196>
 80012c4:	4b73      	ldr	r3, [pc, #460]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	2380      	movs	r3, #128	; 0x80
 80012ca:	025b      	lsls	r3, r3, #9
 80012cc:	4013      	ands	r3, r2
 80012ce:	d116      	bne.n	80012fe <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d0:	4b70      	ldr	r3, [pc, #448]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2202      	movs	r2, #2
 80012d6:	4013      	ands	r3, r2
 80012d8:	d005      	beq.n	80012e6 <HAL_RCC_OscConfig+0x17e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d001      	beq.n	80012e6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e24b      	b.n	800177e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e6:	4b6b      	ldr	r3, [pc, #428]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	22f8      	movs	r2, #248	; 0xf8
 80012ec:	4393      	bics	r3, r2
 80012ee:	0019      	movs	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	00da      	lsls	r2, r3, #3
 80012f6:	4b67      	ldr	r3, [pc, #412]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80012f8:	430a      	orrs	r2, r1
 80012fa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fc:	e041      	b.n	8001382 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d024      	beq.n	8001350 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001306:	4b63      	ldr	r3, [pc, #396]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4b62      	ldr	r3, [pc, #392]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 800130c:	2101      	movs	r1, #1
 800130e:	430a      	orrs	r2, r1
 8001310:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001312:	f7ff fb1b 	bl	800094c <HAL_GetTick>
 8001316:	0003      	movs	r3, r0
 8001318:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800131c:	f7ff fb16 	bl	800094c <HAL_GetTick>
 8001320:	0002      	movs	r2, r0
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e227      	b.n	800177e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132e:	4b59      	ldr	r3, [pc, #356]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2202      	movs	r2, #2
 8001334:	4013      	ands	r3, r2
 8001336:	d0f1      	beq.n	800131c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001338:	4b56      	ldr	r3, [pc, #344]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	22f8      	movs	r2, #248	; 0xf8
 800133e:	4393      	bics	r3, r2
 8001340:	0019      	movs	r1, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	00da      	lsls	r2, r3, #3
 8001348:	4b52      	ldr	r3, [pc, #328]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 800134a:	430a      	orrs	r2, r1
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	e018      	b.n	8001382 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001350:	4b50      	ldr	r3, [pc, #320]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b4f      	ldr	r3, [pc, #316]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001356:	2101      	movs	r1, #1
 8001358:	438a      	bics	r2, r1
 800135a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff faf6 	bl	800094c <HAL_GetTick>
 8001360:	0003      	movs	r3, r0
 8001362:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001366:	f7ff faf1 	bl	800094c <HAL_GetTick>
 800136a:	0002      	movs	r2, r0
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e202      	b.n	800177e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001378:	4b46      	ldr	r3, [pc, #280]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2202      	movs	r2, #2
 800137e:	4013      	ands	r3, r2
 8001380:	d1f1      	bne.n	8001366 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2208      	movs	r2, #8
 8001388:	4013      	ands	r3, r2
 800138a:	d036      	beq.n	80013fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69db      	ldr	r3, [r3, #28]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d019      	beq.n	80013c8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001394:	4b3f      	ldr	r3, [pc, #252]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001396:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001398:	4b3e      	ldr	r3, [pc, #248]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 800139a:	2101      	movs	r1, #1
 800139c:	430a      	orrs	r2, r1
 800139e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a0:	f7ff fad4 	bl	800094c <HAL_GetTick>
 80013a4:	0003      	movs	r3, r0
 80013a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013aa:	f7ff facf 	bl	800094c <HAL_GetTick>
 80013ae:	0002      	movs	r2, r0
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e1e0      	b.n	800177e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013bc:	4b35      	ldr	r3, [pc, #212]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80013be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c0:	2202      	movs	r2, #2
 80013c2:	4013      	ands	r3, r2
 80013c4:	d0f1      	beq.n	80013aa <HAL_RCC_OscConfig+0x242>
 80013c6:	e018      	b.n	80013fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c8:	4b32      	ldr	r3, [pc, #200]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80013ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013cc:	4b31      	ldr	r3, [pc, #196]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80013ce:	2101      	movs	r1, #1
 80013d0:	438a      	bics	r2, r1
 80013d2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d4:	f7ff faba 	bl	800094c <HAL_GetTick>
 80013d8:	0003      	movs	r3, r0
 80013da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013de:	f7ff fab5 	bl	800094c <HAL_GetTick>
 80013e2:	0002      	movs	r2, r0
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e1c6      	b.n	800177e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f0:	4b28      	ldr	r3, [pc, #160]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	2202      	movs	r2, #2
 80013f6:	4013      	ands	r3, r2
 80013f8:	d1f1      	bne.n	80013de <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2204      	movs	r2, #4
 8001400:	4013      	ands	r3, r2
 8001402:	d100      	bne.n	8001406 <HAL_RCC_OscConfig+0x29e>
 8001404:	e0b4      	b.n	8001570 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001406:	201f      	movs	r0, #31
 8001408:	183b      	adds	r3, r7, r0
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800140e:	4b21      	ldr	r3, [pc, #132]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001410:	69da      	ldr	r2, [r3, #28]
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	055b      	lsls	r3, r3, #21
 8001416:	4013      	ands	r3, r2
 8001418:	d110      	bne.n	800143c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800141a:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 800141c:	69da      	ldr	r2, [r3, #28]
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001420:	2180      	movs	r1, #128	; 0x80
 8001422:	0549      	lsls	r1, r1, #21
 8001424:	430a      	orrs	r2, r1
 8001426:	61da      	str	r2, [r3, #28]
 8001428:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 800142a:	69da      	ldr	r2, [r3, #28]
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	055b      	lsls	r3, r3, #21
 8001430:	4013      	ands	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001436:	183b      	adds	r3, r7, r0
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143c:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	4013      	ands	r3, r2
 8001446:	d11a      	bne.n	800147e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001448:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 800144e:	2180      	movs	r1, #128	; 0x80
 8001450:	0049      	lsls	r1, r1, #1
 8001452:	430a      	orrs	r2, r1
 8001454:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001456:	f7ff fa79 	bl	800094c <HAL_GetTick>
 800145a:	0003      	movs	r3, r0
 800145c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001460:	f7ff fa74 	bl	800094c <HAL_GetTick>
 8001464:	0002      	movs	r2, r0
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b64      	cmp	r3, #100	; 0x64
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e185      	b.n	800177e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4013      	ands	r3, r2
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d10e      	bne.n	80014a4 <HAL_RCC_OscConfig+0x33c>
 8001486:	4b03      	ldr	r3, [pc, #12]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001488:	6a1a      	ldr	r2, [r3, #32]
 800148a:	4b02      	ldr	r3, [pc, #8]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 800148c:	2101      	movs	r1, #1
 800148e:	430a      	orrs	r2, r1
 8001490:	621a      	str	r2, [r3, #32]
 8001492:	e035      	b.n	8001500 <HAL_RCC_OscConfig+0x398>
 8001494:	40021000 	.word	0x40021000
 8001498:	fffeffff 	.word	0xfffeffff
 800149c:	fffbffff 	.word	0xfffbffff
 80014a0:	40007000 	.word	0x40007000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10c      	bne.n	80014c6 <HAL_RCC_OscConfig+0x35e>
 80014ac:	4bb6      	ldr	r3, [pc, #728]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80014ae:	6a1a      	ldr	r2, [r3, #32]
 80014b0:	4bb5      	ldr	r3, [pc, #724]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80014b2:	2101      	movs	r1, #1
 80014b4:	438a      	bics	r2, r1
 80014b6:	621a      	str	r2, [r3, #32]
 80014b8:	4bb3      	ldr	r3, [pc, #716]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80014ba:	6a1a      	ldr	r2, [r3, #32]
 80014bc:	4bb2      	ldr	r3, [pc, #712]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80014be:	2104      	movs	r1, #4
 80014c0:	438a      	bics	r2, r1
 80014c2:	621a      	str	r2, [r3, #32]
 80014c4:	e01c      	b.n	8001500 <HAL_RCC_OscConfig+0x398>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	d10c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x380>
 80014ce:	4bae      	ldr	r3, [pc, #696]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80014d0:	6a1a      	ldr	r2, [r3, #32]
 80014d2:	4bad      	ldr	r3, [pc, #692]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80014d4:	2104      	movs	r1, #4
 80014d6:	430a      	orrs	r2, r1
 80014d8:	621a      	str	r2, [r3, #32]
 80014da:	4bab      	ldr	r3, [pc, #684]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80014dc:	6a1a      	ldr	r2, [r3, #32]
 80014de:	4baa      	ldr	r3, [pc, #680]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80014e0:	2101      	movs	r1, #1
 80014e2:	430a      	orrs	r2, r1
 80014e4:	621a      	str	r2, [r3, #32]
 80014e6:	e00b      	b.n	8001500 <HAL_RCC_OscConfig+0x398>
 80014e8:	4ba7      	ldr	r3, [pc, #668]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80014ea:	6a1a      	ldr	r2, [r3, #32]
 80014ec:	4ba6      	ldr	r3, [pc, #664]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80014ee:	2101      	movs	r1, #1
 80014f0:	438a      	bics	r2, r1
 80014f2:	621a      	str	r2, [r3, #32]
 80014f4:	4ba4      	ldr	r3, [pc, #656]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80014f6:	6a1a      	ldr	r2, [r3, #32]
 80014f8:	4ba3      	ldr	r3, [pc, #652]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80014fa:	2104      	movs	r1, #4
 80014fc:	438a      	bics	r2, r1
 80014fe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d014      	beq.n	8001532 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001508:	f7ff fa20 	bl	800094c <HAL_GetTick>
 800150c:	0003      	movs	r3, r0
 800150e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001510:	e009      	b.n	8001526 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001512:	f7ff fa1b 	bl	800094c <HAL_GetTick>
 8001516:	0002      	movs	r2, r0
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	4a9b      	ldr	r2, [pc, #620]	; (800178c <HAL_RCC_OscConfig+0x624>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e12b      	b.n	800177e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001526:	4b98      	ldr	r3, [pc, #608]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	2202      	movs	r2, #2
 800152c:	4013      	ands	r3, r2
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x3aa>
 8001530:	e013      	b.n	800155a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001532:	f7ff fa0b 	bl	800094c <HAL_GetTick>
 8001536:	0003      	movs	r3, r0
 8001538:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800153a:	e009      	b.n	8001550 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800153c:	f7ff fa06 	bl	800094c <HAL_GetTick>
 8001540:	0002      	movs	r2, r0
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	4a91      	ldr	r2, [pc, #580]	; (800178c <HAL_RCC_OscConfig+0x624>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e116      	b.n	800177e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001550:	4b8d      	ldr	r3, [pc, #564]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	2202      	movs	r2, #2
 8001556:	4013      	ands	r3, r2
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800155a:	231f      	movs	r3, #31
 800155c:	18fb      	adds	r3, r7, r3
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d105      	bne.n	8001570 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001564:	4b88      	ldr	r3, [pc, #544]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001566:	69da      	ldr	r2, [r3, #28]
 8001568:	4b87      	ldr	r3, [pc, #540]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 800156a:	4989      	ldr	r1, [pc, #548]	; (8001790 <HAL_RCC_OscConfig+0x628>)
 800156c:	400a      	ands	r2, r1
 800156e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2210      	movs	r2, #16
 8001576:	4013      	ands	r3, r2
 8001578:	d063      	beq.n	8001642 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d12a      	bne.n	80015d8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001582:	4b81      	ldr	r3, [pc, #516]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001586:	4b80      	ldr	r3, [pc, #512]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001588:	2104      	movs	r1, #4
 800158a:	430a      	orrs	r2, r1
 800158c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800158e:	4b7e      	ldr	r3, [pc, #504]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001592:	4b7d      	ldr	r3, [pc, #500]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001594:	2101      	movs	r1, #1
 8001596:	430a      	orrs	r2, r1
 8001598:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159a:	f7ff f9d7 	bl	800094c <HAL_GetTick>
 800159e:	0003      	movs	r3, r0
 80015a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015a4:	f7ff f9d2 	bl	800094c <HAL_GetTick>
 80015a8:	0002      	movs	r2, r0
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e0e3      	b.n	800177e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015b6:	4b74      	ldr	r3, [pc, #464]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80015b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ba:	2202      	movs	r2, #2
 80015bc:	4013      	ands	r3, r2
 80015be:	d0f1      	beq.n	80015a4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015c0:	4b71      	ldr	r3, [pc, #452]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80015c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c4:	22f8      	movs	r2, #248	; 0xf8
 80015c6:	4393      	bics	r3, r2
 80015c8:	0019      	movs	r1, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	00da      	lsls	r2, r3, #3
 80015d0:	4b6d      	ldr	r3, [pc, #436]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80015d2:	430a      	orrs	r2, r1
 80015d4:	635a      	str	r2, [r3, #52]	; 0x34
 80015d6:	e034      	b.n	8001642 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	3305      	adds	r3, #5
 80015de:	d111      	bne.n	8001604 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80015e0:	4b69      	ldr	r3, [pc, #420]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80015e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015e4:	4b68      	ldr	r3, [pc, #416]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80015e6:	2104      	movs	r1, #4
 80015e8:	438a      	bics	r2, r1
 80015ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015ec:	4b66      	ldr	r3, [pc, #408]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80015ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f0:	22f8      	movs	r2, #248	; 0xf8
 80015f2:	4393      	bics	r3, r2
 80015f4:	0019      	movs	r1, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	00da      	lsls	r2, r3, #3
 80015fc:	4b62      	ldr	r3, [pc, #392]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80015fe:	430a      	orrs	r2, r1
 8001600:	635a      	str	r2, [r3, #52]	; 0x34
 8001602:	e01e      	b.n	8001642 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001604:	4b60      	ldr	r3, [pc, #384]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001608:	4b5f      	ldr	r3, [pc, #380]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 800160a:	2104      	movs	r1, #4
 800160c:	430a      	orrs	r2, r1
 800160e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001610:	4b5d      	ldr	r3, [pc, #372]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001614:	4b5c      	ldr	r3, [pc, #368]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001616:	2101      	movs	r1, #1
 8001618:	438a      	bics	r2, r1
 800161a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161c:	f7ff f996 	bl	800094c <HAL_GetTick>
 8001620:	0003      	movs	r3, r0
 8001622:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001626:	f7ff f991 	bl	800094c <HAL_GetTick>
 800162a:	0002      	movs	r2, r0
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e0a2      	b.n	800177e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001638:	4b53      	ldr	r3, [pc, #332]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 800163a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800163c:	2202      	movs	r2, #2
 800163e:	4013      	ands	r3, r2
 8001640:	d1f1      	bne.n	8001626 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d100      	bne.n	800164c <HAL_RCC_OscConfig+0x4e4>
 800164a:	e097      	b.n	800177c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800164c:	4b4e      	ldr	r3, [pc, #312]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	220c      	movs	r2, #12
 8001652:	4013      	ands	r3, r2
 8001654:	2b08      	cmp	r3, #8
 8001656:	d100      	bne.n	800165a <HAL_RCC_OscConfig+0x4f2>
 8001658:	e06b      	b.n	8001732 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d14c      	bne.n	80016fc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001662:	4b49      	ldr	r3, [pc, #292]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	4b48      	ldr	r3, [pc, #288]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001668:	494a      	ldr	r1, [pc, #296]	; (8001794 <HAL_RCC_OscConfig+0x62c>)
 800166a:	400a      	ands	r2, r1
 800166c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166e:	f7ff f96d 	bl	800094c <HAL_GetTick>
 8001672:	0003      	movs	r3, r0
 8001674:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001678:	f7ff f968 	bl	800094c <HAL_GetTick>
 800167c:	0002      	movs	r2, r0
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e079      	b.n	800177e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800168a:	4b3f      	ldr	r3, [pc, #252]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	049b      	lsls	r3, r3, #18
 8001692:	4013      	ands	r3, r2
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001696:	4b3c      	ldr	r3, [pc, #240]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169a:	220f      	movs	r2, #15
 800169c:	4393      	bics	r3, r2
 800169e:	0019      	movs	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016a4:	4b38      	ldr	r3, [pc, #224]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80016a6:	430a      	orrs	r2, r1
 80016a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80016aa:	4b37      	ldr	r3, [pc, #220]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	4a3a      	ldr	r2, [pc, #232]	; (8001798 <HAL_RCC_OscConfig+0x630>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	0019      	movs	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	431a      	orrs	r2, r3
 80016be:	4b32      	ldr	r3, [pc, #200]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80016c0:	430a      	orrs	r2, r1
 80016c2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c4:	4b30      	ldr	r3, [pc, #192]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b2f      	ldr	r3, [pc, #188]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80016ca:	2180      	movs	r1, #128	; 0x80
 80016cc:	0449      	lsls	r1, r1, #17
 80016ce:	430a      	orrs	r2, r1
 80016d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d2:	f7ff f93b 	bl	800094c <HAL_GetTick>
 80016d6:	0003      	movs	r3, r0
 80016d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016dc:	f7ff f936 	bl	800094c <HAL_GetTick>
 80016e0:	0002      	movs	r2, r0
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e047      	b.n	800177e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016ee:	4b26      	ldr	r3, [pc, #152]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	049b      	lsls	r3, r3, #18
 80016f6:	4013      	ands	r3, r2
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x574>
 80016fa:	e03f      	b.n	800177c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fc:	4b22      	ldr	r3, [pc, #136]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b21      	ldr	r3, [pc, #132]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001702:	4924      	ldr	r1, [pc, #144]	; (8001794 <HAL_RCC_OscConfig+0x62c>)
 8001704:	400a      	ands	r2, r1
 8001706:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001708:	f7ff f920 	bl	800094c <HAL_GetTick>
 800170c:	0003      	movs	r3, r0
 800170e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001712:	f7ff f91b 	bl	800094c <HAL_GetTick>
 8001716:	0002      	movs	r2, r0
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e02c      	b.n	800177e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001724:	4b18      	ldr	r3, [pc, #96]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	049b      	lsls	r3, r3, #18
 800172c:	4013      	ands	r3, r2
 800172e:	d1f0      	bne.n	8001712 <HAL_RCC_OscConfig+0x5aa>
 8001730:	e024      	b.n	800177c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d101      	bne.n	800173e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e01f      	b.n	800177e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800173e:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001744:	4b10      	ldr	r3, [pc, #64]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	025b      	lsls	r3, r3, #9
 8001750:	401a      	ands	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001756:	429a      	cmp	r2, r3
 8001758:	d10e      	bne.n	8001778 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	220f      	movs	r2, #15
 800175e:	401a      	ands	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001764:	429a      	cmp	r2, r3
 8001766:	d107      	bne.n	8001778 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	23f0      	movs	r3, #240	; 0xf0
 800176c:	039b      	lsls	r3, r3, #14
 800176e:	401a      	ands	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e000      	b.n	800177e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	0018      	movs	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	b008      	add	sp, #32
 8001784:	bd80      	pop	{r7, pc}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	40021000 	.word	0x40021000
 800178c:	00001388 	.word	0x00001388
 8001790:	efffffff 	.word	0xefffffff
 8001794:	feffffff 	.word	0xfeffffff
 8001798:	ffc2ffff 	.word	0xffc2ffff

0800179c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0b3      	b.n	8001918 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017b0:	4b5b      	ldr	r3, [pc, #364]	; (8001920 <HAL_RCC_ClockConfig+0x184>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2201      	movs	r2, #1
 80017b6:	4013      	ands	r3, r2
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d911      	bls.n	80017e2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017be:	4b58      	ldr	r3, [pc, #352]	; (8001920 <HAL_RCC_ClockConfig+0x184>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2201      	movs	r2, #1
 80017c4:	4393      	bics	r3, r2
 80017c6:	0019      	movs	r1, r3
 80017c8:	4b55      	ldr	r3, [pc, #340]	; (8001920 <HAL_RCC_ClockConfig+0x184>)
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d0:	4b53      	ldr	r3, [pc, #332]	; (8001920 <HAL_RCC_ClockConfig+0x184>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2201      	movs	r2, #1
 80017d6:	4013      	ands	r3, r2
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d001      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e09a      	b.n	8001918 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2202      	movs	r2, #2
 80017e8:	4013      	ands	r3, r2
 80017ea:	d015      	beq.n	8001818 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2204      	movs	r2, #4
 80017f2:	4013      	ands	r3, r2
 80017f4:	d006      	beq.n	8001804 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017f6:	4b4b      	ldr	r3, [pc, #300]	; (8001924 <HAL_RCC_ClockConfig+0x188>)
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	4b4a      	ldr	r3, [pc, #296]	; (8001924 <HAL_RCC_ClockConfig+0x188>)
 80017fc:	21e0      	movs	r1, #224	; 0xe0
 80017fe:	00c9      	lsls	r1, r1, #3
 8001800:	430a      	orrs	r2, r1
 8001802:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001804:	4b47      	ldr	r3, [pc, #284]	; (8001924 <HAL_RCC_ClockConfig+0x188>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	22f0      	movs	r2, #240	; 0xf0
 800180a:	4393      	bics	r3, r2
 800180c:	0019      	movs	r1, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	4b44      	ldr	r3, [pc, #272]	; (8001924 <HAL_RCC_ClockConfig+0x188>)
 8001814:	430a      	orrs	r2, r1
 8001816:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2201      	movs	r2, #1
 800181e:	4013      	ands	r3, r2
 8001820:	d040      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	4b3e      	ldr	r3, [pc, #248]	; (8001924 <HAL_RCC_ClockConfig+0x188>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	029b      	lsls	r3, r3, #10
 8001832:	4013      	ands	r3, r2
 8001834:	d114      	bne.n	8001860 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e06e      	b.n	8001918 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001842:	4b38      	ldr	r3, [pc, #224]	; (8001924 <HAL_RCC_ClockConfig+0x188>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	2380      	movs	r3, #128	; 0x80
 8001848:	049b      	lsls	r3, r3, #18
 800184a:	4013      	ands	r3, r2
 800184c:	d108      	bne.n	8001860 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e062      	b.n	8001918 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001852:	4b34      	ldr	r3, [pc, #208]	; (8001924 <HAL_RCC_ClockConfig+0x188>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2202      	movs	r2, #2
 8001858:	4013      	ands	r3, r2
 800185a:	d101      	bne.n	8001860 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e05b      	b.n	8001918 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001860:	4b30      	ldr	r3, [pc, #192]	; (8001924 <HAL_RCC_ClockConfig+0x188>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2203      	movs	r2, #3
 8001866:	4393      	bics	r3, r2
 8001868:	0019      	movs	r1, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <HAL_RCC_ClockConfig+0x188>)
 8001870:	430a      	orrs	r2, r1
 8001872:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001874:	f7ff f86a 	bl	800094c <HAL_GetTick>
 8001878:	0003      	movs	r3, r0
 800187a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187c:	e009      	b.n	8001892 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187e:	f7ff f865 	bl	800094c <HAL_GetTick>
 8001882:	0002      	movs	r2, r0
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	4a27      	ldr	r2, [pc, #156]	; (8001928 <HAL_RCC_ClockConfig+0x18c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e042      	b.n	8001918 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001892:	4b24      	ldr	r3, [pc, #144]	; (8001924 <HAL_RCC_ClockConfig+0x188>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	220c      	movs	r2, #12
 8001898:	401a      	ands	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d1ec      	bne.n	800187e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018a4:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <HAL_RCC_ClockConfig+0x184>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2201      	movs	r2, #1
 80018aa:	4013      	ands	r3, r2
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d211      	bcs.n	80018d6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b2:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_RCC_ClockConfig+0x184>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2201      	movs	r2, #1
 80018b8:	4393      	bics	r3, r2
 80018ba:	0019      	movs	r1, r3
 80018bc:	4b18      	ldr	r3, [pc, #96]	; (8001920 <HAL_RCC_ClockConfig+0x184>)
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c4:	4b16      	ldr	r3, [pc, #88]	; (8001920 <HAL_RCC_ClockConfig+0x184>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2201      	movs	r2, #1
 80018ca:	4013      	ands	r3, r2
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d001      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e020      	b.n	8001918 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2204      	movs	r2, #4
 80018dc:	4013      	ands	r3, r2
 80018de:	d009      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018e0:	4b10      	ldr	r3, [pc, #64]	; (8001924 <HAL_RCC_ClockConfig+0x188>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	4a11      	ldr	r2, [pc, #68]	; (800192c <HAL_RCC_ClockConfig+0x190>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	0019      	movs	r1, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <HAL_RCC_ClockConfig+0x188>)
 80018f0:	430a      	orrs	r2, r1
 80018f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018f4:	f000 f820 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 80018f8:	0001      	movs	r1, r0
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <HAL_RCC_ClockConfig+0x188>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	091b      	lsrs	r3, r3, #4
 8001900:	220f      	movs	r2, #15
 8001902:	4013      	ands	r3, r2
 8001904:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <HAL_RCC_ClockConfig+0x194>)
 8001906:	5cd3      	ldrb	r3, [r2, r3]
 8001908:	000a      	movs	r2, r1
 800190a:	40da      	lsrs	r2, r3
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_RCC_ClockConfig+0x198>)
 800190e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001910:	2000      	movs	r0, #0
 8001912:	f7fe ffd5 	bl	80008c0 <HAL_InitTick>
  
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	b004      	add	sp, #16
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40022000 	.word	0x40022000
 8001924:	40021000 	.word	0x40021000
 8001928:	00001388 	.word	0x00001388
 800192c:	fffff8ff 	.word	0xfffff8ff
 8001930:	0800366c 	.word	0x0800366c
 8001934:	20000000 	.word	0x20000000

08001938 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b08f      	sub	sp, #60	; 0x3c
 800193c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800193e:	2314      	movs	r3, #20
 8001940:	18fb      	adds	r3, r7, r3
 8001942:	4a2b      	ldr	r2, [pc, #172]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001944:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001946:	c313      	stmia	r3!, {r0, r1, r4}
 8001948:	6812      	ldr	r2, [r2, #0]
 800194a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	4a29      	ldr	r2, [pc, #164]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001950:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001952:	c313      	stmia	r3!, {r0, r1, r4}
 8001954:	6812      	ldr	r2, [r2, #0]
 8001956:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800195c:	2300      	movs	r3, #0
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001960:	2300      	movs	r3, #0
 8001962:	637b      	str	r3, [r7, #52]	; 0x34
 8001964:	2300      	movs	r3, #0
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800196c:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001974:	220c      	movs	r2, #12
 8001976:	4013      	ands	r3, r2
 8001978:	2b04      	cmp	r3, #4
 800197a:	d002      	beq.n	8001982 <HAL_RCC_GetSysClockFreq+0x4a>
 800197c:	2b08      	cmp	r3, #8
 800197e:	d003      	beq.n	8001988 <HAL_RCC_GetSysClockFreq+0x50>
 8001980:	e02d      	b.n	80019de <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001982:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001984:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001986:	e02d      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800198a:	0c9b      	lsrs	r3, r3, #18
 800198c:	220f      	movs	r2, #15
 800198e:	4013      	ands	r3, r2
 8001990:	2214      	movs	r2, #20
 8001992:	18ba      	adds	r2, r7, r2
 8001994:	5cd3      	ldrb	r3, [r2, r3]
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001998:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	220f      	movs	r2, #15
 800199e:	4013      	ands	r3, r2
 80019a0:	1d3a      	adds	r2, r7, #4
 80019a2:	5cd3      	ldrb	r3, [r2, r3]
 80019a4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80019a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	025b      	lsls	r3, r3, #9
 80019ac:	4013      	ands	r3, r2
 80019ae:	d009      	beq.n	80019c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019b2:	4812      	ldr	r0, [pc, #72]	; (80019fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80019b4:	f7fe fbb2 	bl	800011c <__udivsi3>
 80019b8:	0003      	movs	r3, r0
 80019ba:	001a      	movs	r2, r3
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	4353      	muls	r3, r2
 80019c0:	637b      	str	r3, [r7, #52]	; 0x34
 80019c2:	e009      	b.n	80019d8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80019c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019c6:	000a      	movs	r2, r1
 80019c8:	0152      	lsls	r2, r2, #5
 80019ca:	1a52      	subs	r2, r2, r1
 80019cc:	0193      	lsls	r3, r2, #6
 80019ce:	1a9b      	subs	r3, r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	185b      	adds	r3, r3, r1
 80019d4:	021b      	lsls	r3, r3, #8
 80019d6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80019d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019dc:	e002      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80019e0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019e2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80019e6:	0018      	movs	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	b00f      	add	sp, #60	; 0x3c
 80019ec:	bd90      	pop	{r4, r7, pc}
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	0800364c 	.word	0x0800364c
 80019f4:	0800365c 	.word	0x0800365c
 80019f8:	40021000 	.word	0x40021000
 80019fc:	007a1200 	.word	0x007a1200

08001a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a04:	4b02      	ldr	r3, [pc, #8]	; (8001a10 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	0018      	movs	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	20000000 	.word	0x20000000

08001a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001a18:	f7ff fff2 	bl	8001a00 <HAL_RCC_GetHCLKFreq>
 8001a1c:	0001      	movs	r1, r0
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	0a1b      	lsrs	r3, r3, #8
 8001a24:	2207      	movs	r2, #7
 8001a26:	4013      	ands	r3, r2
 8001a28:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a2a:	5cd3      	ldrb	r3, [r2, r3]
 8001a2c:	40d9      	lsrs	r1, r3
 8001a2e:	000b      	movs	r3, r1
}    
 8001a30:	0018      	movs	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	0800367c 	.word	0x0800367c

08001a40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e044      	b.n	8001adc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d107      	bne.n	8001a6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2274      	movs	r2, #116	; 0x74
 8001a5e:	2100      	movs	r1, #0
 8001a60:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	0018      	movs	r0, r3
 8001a66:	f7fe fdb7 	bl	80005d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2224      	movs	r2, #36	; 0x24
 8001a6e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	438a      	bics	r2, r1
 8001a7e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	0018      	movs	r0, r3
 8001a84:	f000 f95e 	bl	8001d44 <UART_SetConfig>
 8001a88:	0003      	movs	r3, r0
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d101      	bne.n	8001a92 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e024      	b.n	8001adc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f000 fa91 	bl	8001fc4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	490d      	ldr	r1, [pc, #52]	; (8001ae4 <HAL_UART_Init+0xa4>)
 8001aae:	400a      	ands	r2, r1
 8001ab0:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2108      	movs	r1, #8
 8001abe:	438a      	bics	r2, r1
 8001ac0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2101      	movs	r1, #1
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f000 fb29 	bl	800212c <UART_CheckIdleState>
 8001ada:	0003      	movs	r3, r0
}
 8001adc:	0018      	movs	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b002      	add	sp, #8
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	fffff7ff 	.word	0xfffff7ff

08001ae8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	; 0x28
 8001aec:	af02      	add	r7, sp, #8
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	603b      	str	r3, [r7, #0]
 8001af4:	1dbb      	adds	r3, r7, #6
 8001af6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001afc:	2b20      	cmp	r3, #32
 8001afe:	d000      	beq.n	8001b02 <HAL_UART_Transmit+0x1a>
 8001b00:	e096      	b.n	8001c30 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_UART_Transmit+0x28>
 8001b08:	1dbb      	adds	r3, r7, #6
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e08e      	b.n	8001c32 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	015b      	lsls	r3, r3, #5
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d109      	bne.n	8001b34 <HAL_UART_Transmit+0x4c>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d105      	bne.n	8001b34 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d001      	beq.n	8001b34 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e07e      	b.n	8001c32 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2274      	movs	r2, #116	; 0x74
 8001b38:	5c9b      	ldrb	r3, [r3, r2]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_UART_Transmit+0x5a>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e077      	b.n	8001c32 <HAL_UART_Transmit+0x14a>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2274      	movs	r2, #116	; 0x74
 8001b46:	2101      	movs	r1, #1
 8001b48:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2280      	movs	r2, #128	; 0x80
 8001b4e:	2100      	movs	r1, #0
 8001b50:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2221      	movs	r2, #33	; 0x21
 8001b56:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b58:	f7fe fef8 	bl	800094c <HAL_GetTick>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	1dba      	adds	r2, r7, #6
 8001b64:	2150      	movs	r1, #80	; 0x50
 8001b66:	8812      	ldrh	r2, [r2, #0]
 8001b68:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1dba      	adds	r2, r7, #6
 8001b6e:	2152      	movs	r1, #82	; 0x52
 8001b70:	8812      	ldrh	r2, [r2, #0]
 8001b72:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	015b      	lsls	r3, r3, #5
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d108      	bne.n	8001b92 <HAL_UART_Transmit+0xaa>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d104      	bne.n	8001b92 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	61bb      	str	r3, [r7, #24]
 8001b90:	e003      	b.n	8001b9a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2274      	movs	r2, #116	; 0x74
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001ba2:	e02d      	b.n	8001c00 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	0013      	movs	r3, r2
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2180      	movs	r1, #128	; 0x80
 8001bb2:	f000 fb03 	bl	80021bc <UART_WaitOnFlagUntilTimeout>
 8001bb6:	1e03      	subs	r3, r0, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e039      	b.n	8001c32 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10b      	bne.n	8001bdc <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	881a      	ldrh	r2, [r3, #0]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	05d2      	lsls	r2, r2, #23
 8001bce:	0dd2      	lsrs	r2, r2, #23
 8001bd0:	b292      	uxth	r2, r2
 8001bd2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	61bb      	str	r3, [r7, #24]
 8001bda:	e008      	b.n	8001bee <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	781a      	ldrb	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	b292      	uxth	r2, r2
 8001be6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	3301      	adds	r3, #1
 8001bec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2252      	movs	r2, #82	; 0x52
 8001bf2:	5a9b      	ldrh	r3, [r3, r2]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b299      	uxth	r1, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2252      	movs	r2, #82	; 0x52
 8001bfe:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2252      	movs	r2, #82	; 0x52
 8001c04:	5a9b      	ldrh	r3, [r3, r2]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1cb      	bne.n	8001ba4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	0013      	movs	r3, r2
 8001c16:	2200      	movs	r2, #0
 8001c18:	2140      	movs	r1, #64	; 0x40
 8001c1a:	f000 facf 	bl	80021bc <UART_WaitOnFlagUntilTimeout>
 8001c1e:	1e03      	subs	r3, r0, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e005      	b.n	8001c32 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e000      	b.n	8001c32 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001c30:	2302      	movs	r3, #2
  }
}
 8001c32:	0018      	movs	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b008      	add	sp, #32
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b088      	sub	sp, #32
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	60f8      	str	r0, [r7, #12]
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	1dbb      	adds	r3, r7, #6
 8001c46:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c4c:	2b20      	cmp	r3, #32
 8001c4e:	d150      	bne.n	8001cf2 <HAL_UART_Receive_DMA+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_UART_Receive_DMA+0x24>
 8001c56:	1dbb      	adds	r3, r7, #6
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e048      	b.n	8001cf4 <HAL_UART_Receive_DMA+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	2380      	movs	r3, #128	; 0x80
 8001c68:	015b      	lsls	r3, r3, #5
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d109      	bne.n	8001c82 <HAL_UART_Receive_DMA+0x48>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d105      	bne.n	8001c82 <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d001      	beq.n	8001c82 <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e038      	b.n	8001cf4 <HAL_UART_Receive_DMA+0xba>
      }
    }

    __HAL_LOCK(huart);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2274      	movs	r2, #116	; 0x74
 8001c86:	5c9b      	ldrb	r3, [r3, r2]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_UART_Receive_DMA+0x56>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e031      	b.n	8001cf4 <HAL_UART_Receive_DMA+0xba>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2274      	movs	r2, #116	; 0x74
 8001c94:	2101      	movs	r1, #1
 8001c96:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	041b      	lsls	r3, r3, #16
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d019      	beq.n	8001ce0 <HAL_UART_Receive_DMA+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cac:	f3ef 8310 	mrs	r3, PRIMASK
 8001cb0:	613b      	str	r3, [r7, #16]
  return(result);
 8001cb2:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f383 8810 	msr	PRIMASK, r3
}
 8001cc0:	46c0      	nop			; (mov r8, r8)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2180      	movs	r1, #128	; 0x80
 8001cce:	04c9      	lsls	r1, r1, #19
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	f383 8810 	msr	PRIMASK, r3
}
 8001cde:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001ce0:	1dbb      	adds	r3, r7, #6
 8001ce2:	881a      	ldrh	r2, [r3, #0]
 8001ce4:	68b9      	ldr	r1, [r7, #8]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f000 fb2b 	bl	8002344 <UART_Start_Receive_DMA>
 8001cee:	0003      	movs	r3, r0
 8001cf0:	e000      	b.n	8001cf4 <HAL_UART_Receive_DMA+0xba>
  }
  else
  {
    return HAL_BUSY;
 8001cf2:	2302      	movs	r3, #2
  }
}
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b008      	add	sp, #32
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8001d04:	46c0      	nop			; (mov r8, r8)
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b002      	add	sp, #8
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8001d14:	46c0      	nop			; (mov r8, r8)
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b002      	add	sp, #8
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001d24:	46c0      	nop			; (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b002      	add	sp, #8
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	000a      	movs	r2, r1
 8001d36:	1cbb      	adds	r3, r7, #2
 8001d38:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b002      	add	sp, #8
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d4c:	231e      	movs	r3, #30
 8001d4e:	18fb      	adds	r3, r7, r3
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a8d      	ldr	r2, [pc, #564]	; (8001fa8 <UART_SetConfig+0x264>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	0019      	movs	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	4a88      	ldr	r2, [pc, #544]	; (8001fac <UART_SetConfig+0x268>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	0019      	movs	r1, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68da      	ldr	r2, [r3, #12]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4a7f      	ldr	r2, [pc, #508]	; (8001fb0 <UART_SetConfig+0x26c>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	0019      	movs	r1, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a7b      	ldr	r2, [pc, #492]	; (8001fb4 <UART_SetConfig+0x270>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d127      	bne.n	8001e1a <UART_SetConfig+0xd6>
 8001dca:	4b7b      	ldr	r3, [pc, #492]	; (8001fb8 <UART_SetConfig+0x274>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	2203      	movs	r2, #3
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d00d      	beq.n	8001df2 <UART_SetConfig+0xae>
 8001dd6:	d81b      	bhi.n	8001e10 <UART_SetConfig+0xcc>
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d014      	beq.n	8001e06 <UART_SetConfig+0xc2>
 8001ddc:	d818      	bhi.n	8001e10 <UART_SetConfig+0xcc>
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d002      	beq.n	8001de8 <UART_SetConfig+0xa4>
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d00a      	beq.n	8001dfc <UART_SetConfig+0xb8>
 8001de6:	e013      	b.n	8001e10 <UART_SetConfig+0xcc>
 8001de8:	231f      	movs	r3, #31
 8001dea:	18fb      	adds	r3, r7, r3
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
 8001df0:	e021      	b.n	8001e36 <UART_SetConfig+0xf2>
 8001df2:	231f      	movs	r3, #31
 8001df4:	18fb      	adds	r3, r7, r3
 8001df6:	2202      	movs	r2, #2
 8001df8:	701a      	strb	r2, [r3, #0]
 8001dfa:	e01c      	b.n	8001e36 <UART_SetConfig+0xf2>
 8001dfc:	231f      	movs	r3, #31
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	2204      	movs	r2, #4
 8001e02:	701a      	strb	r2, [r3, #0]
 8001e04:	e017      	b.n	8001e36 <UART_SetConfig+0xf2>
 8001e06:	231f      	movs	r3, #31
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	2208      	movs	r2, #8
 8001e0c:	701a      	strb	r2, [r3, #0]
 8001e0e:	e012      	b.n	8001e36 <UART_SetConfig+0xf2>
 8001e10:	231f      	movs	r3, #31
 8001e12:	18fb      	adds	r3, r7, r3
 8001e14:	2210      	movs	r2, #16
 8001e16:	701a      	strb	r2, [r3, #0]
 8001e18:	e00d      	b.n	8001e36 <UART_SetConfig+0xf2>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a67      	ldr	r2, [pc, #412]	; (8001fbc <UART_SetConfig+0x278>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d104      	bne.n	8001e2e <UART_SetConfig+0xea>
 8001e24:	231f      	movs	r3, #31
 8001e26:	18fb      	adds	r3, r7, r3
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
 8001e2c:	e003      	b.n	8001e36 <UART_SetConfig+0xf2>
 8001e2e:	231f      	movs	r3, #31
 8001e30:	18fb      	adds	r3, r7, r3
 8001e32:	2210      	movs	r2, #16
 8001e34:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69da      	ldr	r2, [r3, #28]
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	021b      	lsls	r3, r3, #8
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d15d      	bne.n	8001efe <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8001e42:	231f      	movs	r3, #31
 8001e44:	18fb      	adds	r3, r7, r3
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d015      	beq.n	8001e78 <UART_SetConfig+0x134>
 8001e4c:	dc18      	bgt.n	8001e80 <UART_SetConfig+0x13c>
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d00d      	beq.n	8001e6e <UART_SetConfig+0x12a>
 8001e52:	dc15      	bgt.n	8001e80 <UART_SetConfig+0x13c>
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <UART_SetConfig+0x11a>
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d005      	beq.n	8001e68 <UART_SetConfig+0x124>
 8001e5c:	e010      	b.n	8001e80 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e5e:	f7ff fdd9 	bl	8001a14 <HAL_RCC_GetPCLK1Freq>
 8001e62:	0003      	movs	r3, r0
 8001e64:	61bb      	str	r3, [r7, #24]
        break;
 8001e66:	e012      	b.n	8001e8e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001e68:	4b55      	ldr	r3, [pc, #340]	; (8001fc0 <UART_SetConfig+0x27c>)
 8001e6a:	61bb      	str	r3, [r7, #24]
        break;
 8001e6c:	e00f      	b.n	8001e8e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e6e:	f7ff fd63 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 8001e72:	0003      	movs	r3, r0
 8001e74:	61bb      	str	r3, [r7, #24]
        break;
 8001e76:	e00a      	b.n	8001e8e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	021b      	lsls	r3, r3, #8
 8001e7c:	61bb      	str	r3, [r7, #24]
        break;
 8001e7e:	e006      	b.n	8001e8e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001e84:	231e      	movs	r3, #30
 8001e86:	18fb      	adds	r3, r7, r3
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]
        break;
 8001e8c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d100      	bne.n	8001e96 <UART_SetConfig+0x152>
 8001e94:	e07b      	b.n	8001f8e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	005a      	lsls	r2, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	085b      	lsrs	r3, r3, #1
 8001ea0:	18d2      	adds	r2, r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	0019      	movs	r1, r3
 8001ea8:	0010      	movs	r0, r2
 8001eaa:	f7fe f937 	bl	800011c <__udivsi3>
 8001eae:	0003      	movs	r3, r0
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	2b0f      	cmp	r3, #15
 8001eb8:	d91c      	bls.n	8001ef4 <UART_SetConfig+0x1b0>
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	025b      	lsls	r3, r3, #9
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d217      	bcs.n	8001ef4 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	200e      	movs	r0, #14
 8001eca:	183b      	adds	r3, r7, r0
 8001ecc:	210f      	movs	r1, #15
 8001ece:	438a      	bics	r2, r1
 8001ed0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	085b      	lsrs	r3, r3, #1
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	2207      	movs	r2, #7
 8001eda:	4013      	ands	r3, r2
 8001edc:	b299      	uxth	r1, r3
 8001ede:	183b      	adds	r3, r7, r0
 8001ee0:	183a      	adds	r2, r7, r0
 8001ee2:	8812      	ldrh	r2, [r2, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	183a      	adds	r2, r7, r0
 8001eee:	8812      	ldrh	r2, [r2, #0]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	e04c      	b.n	8001f8e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8001ef4:	231e      	movs	r3, #30
 8001ef6:	18fb      	adds	r3, r7, r3
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]
 8001efc:	e047      	b.n	8001f8e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001efe:	231f      	movs	r3, #31
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d015      	beq.n	8001f34 <UART_SetConfig+0x1f0>
 8001f08:	dc18      	bgt.n	8001f3c <UART_SetConfig+0x1f8>
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d00d      	beq.n	8001f2a <UART_SetConfig+0x1e6>
 8001f0e:	dc15      	bgt.n	8001f3c <UART_SetConfig+0x1f8>
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d002      	beq.n	8001f1a <UART_SetConfig+0x1d6>
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d005      	beq.n	8001f24 <UART_SetConfig+0x1e0>
 8001f18:	e010      	b.n	8001f3c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f1a:	f7ff fd7b 	bl	8001a14 <HAL_RCC_GetPCLK1Freq>
 8001f1e:	0003      	movs	r3, r0
 8001f20:	61bb      	str	r3, [r7, #24]
        break;
 8001f22:	e012      	b.n	8001f4a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001f24:	4b26      	ldr	r3, [pc, #152]	; (8001fc0 <UART_SetConfig+0x27c>)
 8001f26:	61bb      	str	r3, [r7, #24]
        break;
 8001f28:	e00f      	b.n	8001f4a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f2a:	f7ff fd05 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 8001f2e:	0003      	movs	r3, r0
 8001f30:	61bb      	str	r3, [r7, #24]
        break;
 8001f32:	e00a      	b.n	8001f4a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	021b      	lsls	r3, r3, #8
 8001f38:	61bb      	str	r3, [r7, #24]
        break;
 8001f3a:	e006      	b.n	8001f4a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001f40:	231e      	movs	r3, #30
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	2201      	movs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]
        break;
 8001f48:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01e      	beq.n	8001f8e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	085a      	lsrs	r2, r3, #1
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	18d2      	adds	r2, r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	0019      	movs	r1, r3
 8001f60:	0010      	movs	r0, r2
 8001f62:	f7fe f8db 	bl	800011c <__udivsi3>
 8001f66:	0003      	movs	r3, r0
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	2b0f      	cmp	r3, #15
 8001f70:	d909      	bls.n	8001f86 <UART_SetConfig+0x242>
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	025b      	lsls	r3, r3, #9
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d204      	bcs.n	8001f86 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	60da      	str	r2, [r3, #12]
 8001f84:	e003      	b.n	8001f8e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8001f86:	231e      	movs	r3, #30
 8001f88:	18fb      	adds	r3, r7, r3
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001f9a:	231e      	movs	r3, #30
 8001f9c:	18fb      	adds	r3, r7, r3
 8001f9e:	781b      	ldrb	r3, [r3, #0]
}
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b008      	add	sp, #32
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	ffff69f3 	.word	0xffff69f3
 8001fac:	ffffcfff 	.word	0xffffcfff
 8001fb0:	fffff4ff 	.word	0xfffff4ff
 8001fb4:	40013800 	.word	0x40013800
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40004400 	.word	0x40004400
 8001fc0:	007a1200 	.word	0x007a1200

08001fc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d00b      	beq.n	8001fee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4a4a      	ldr	r2, [pc, #296]	; (8002108 <UART_AdvFeatureConfig+0x144>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d00b      	beq.n	8002010 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	4a43      	ldr	r2, [pc, #268]	; (800210c <UART_AdvFeatureConfig+0x148>)
 8002000:	4013      	ands	r3, r2
 8002002:	0019      	movs	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	2204      	movs	r2, #4
 8002016:	4013      	ands	r3, r2
 8002018:	d00b      	beq.n	8002032 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	4a3b      	ldr	r2, [pc, #236]	; (8002110 <UART_AdvFeatureConfig+0x14c>)
 8002022:	4013      	ands	r3, r2
 8002024:	0019      	movs	r1, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	2208      	movs	r2, #8
 8002038:	4013      	ands	r3, r2
 800203a:	d00b      	beq.n	8002054 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	4a34      	ldr	r2, [pc, #208]	; (8002114 <UART_AdvFeatureConfig+0x150>)
 8002044:	4013      	ands	r3, r2
 8002046:	0019      	movs	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	2210      	movs	r2, #16
 800205a:	4013      	ands	r3, r2
 800205c:	d00b      	beq.n	8002076 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4a2c      	ldr	r2, [pc, #176]	; (8002118 <UART_AdvFeatureConfig+0x154>)
 8002066:	4013      	ands	r3, r2
 8002068:	0019      	movs	r1, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	2220      	movs	r2, #32
 800207c:	4013      	ands	r3, r2
 800207e:	d00b      	beq.n	8002098 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	4a25      	ldr	r2, [pc, #148]	; (800211c <UART_AdvFeatureConfig+0x158>)
 8002088:	4013      	ands	r3, r2
 800208a:	0019      	movs	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	2240      	movs	r2, #64	; 0x40
 800209e:	4013      	ands	r3, r2
 80020a0:	d01d      	beq.n	80020de <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	4a1d      	ldr	r2, [pc, #116]	; (8002120 <UART_AdvFeatureConfig+0x15c>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	0019      	movs	r1, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	035b      	lsls	r3, r3, #13
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d10b      	bne.n	80020de <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	4a15      	ldr	r2, [pc, #84]	; (8002124 <UART_AdvFeatureConfig+0x160>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	0019      	movs	r1, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	2280      	movs	r2, #128	; 0x80
 80020e4:	4013      	ands	r3, r2
 80020e6:	d00b      	beq.n	8002100 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4a0e      	ldr	r2, [pc, #56]	; (8002128 <UART_AdvFeatureConfig+0x164>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	0019      	movs	r1, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	605a      	str	r2, [r3, #4]
  }
}
 8002100:	46c0      	nop			; (mov r8, r8)
 8002102:	46bd      	mov	sp, r7
 8002104:	b002      	add	sp, #8
 8002106:	bd80      	pop	{r7, pc}
 8002108:	fffdffff 	.word	0xfffdffff
 800210c:	fffeffff 	.word	0xfffeffff
 8002110:	fffbffff 	.word	0xfffbffff
 8002114:	ffff7fff 	.word	0xffff7fff
 8002118:	ffffefff 	.word	0xffffefff
 800211c:	ffffdfff 	.word	0xffffdfff
 8002120:	ffefffff 	.word	0xffefffff
 8002124:	ff9fffff 	.word	0xff9fffff
 8002128:	fff7ffff 	.word	0xfff7ffff

0800212c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af02      	add	r7, sp, #8
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2280      	movs	r2, #128	; 0x80
 8002138:	2100      	movs	r1, #0
 800213a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800213c:	f7fe fc06 	bl	800094c <HAL_GetTick>
 8002140:	0003      	movs	r3, r0
 8002142:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2208      	movs	r2, #8
 800214c:	4013      	ands	r3, r2
 800214e:	2b08      	cmp	r3, #8
 8002150:	d10c      	bne.n	800216c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2280      	movs	r2, #128	; 0x80
 8002156:	0391      	lsls	r1, r2, #14
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	4a17      	ldr	r2, [pc, #92]	; (80021b8 <UART_CheckIdleState+0x8c>)
 800215c:	9200      	str	r2, [sp, #0]
 800215e:	2200      	movs	r2, #0
 8002160:	f000 f82c 	bl	80021bc <UART_WaitOnFlagUntilTimeout>
 8002164:	1e03      	subs	r3, r0, #0
 8002166:	d001      	beq.n	800216c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e021      	b.n	80021b0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2204      	movs	r2, #4
 8002174:	4013      	ands	r3, r2
 8002176:	2b04      	cmp	r3, #4
 8002178:	d10c      	bne.n	8002194 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2280      	movs	r2, #128	; 0x80
 800217e:	03d1      	lsls	r1, r2, #15
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <UART_CheckIdleState+0x8c>)
 8002184:	9200      	str	r2, [sp, #0]
 8002186:	2200      	movs	r2, #0
 8002188:	f000 f818 	bl	80021bc <UART_WaitOnFlagUntilTimeout>
 800218c:	1e03      	subs	r3, r0, #0
 800218e:	d001      	beq.n	8002194 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e00d      	b.n	80021b0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2220      	movs	r2, #32
 8002198:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2220      	movs	r2, #32
 800219e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2274      	movs	r2, #116	; 0x74
 80021aa:	2100      	movs	r1, #0
 80021ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	0018      	movs	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b004      	add	sp, #16
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	01ffffff 	.word	0x01ffffff

080021bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b094      	sub	sp, #80	; 0x50
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	1dfb      	adds	r3, r7, #7
 80021ca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021cc:	e0a3      	b.n	8002316 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021d0:	3301      	adds	r3, #1
 80021d2:	d100      	bne.n	80021d6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80021d4:	e09f      	b.n	8002316 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021d6:	f7fe fbb9 	bl	800094c <HAL_GetTick>
 80021da:	0002      	movs	r2, r0
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d302      	bcc.n	80021ec <UART_WaitOnFlagUntilTimeout+0x30>
 80021e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d13d      	bne.n	8002268 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021ec:	f3ef 8310 	mrs	r3, PRIMASK
 80021f0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80021f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021f4:	647b      	str	r3, [r7, #68]	; 0x44
 80021f6:	2301      	movs	r3, #1
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fc:	f383 8810 	msr	PRIMASK, r3
}
 8002200:	46c0      	nop			; (mov r8, r8)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	494c      	ldr	r1, [pc, #304]	; (8002340 <UART_WaitOnFlagUntilTimeout+0x184>)
 800220e:	400a      	ands	r2, r1
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002214:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002218:	f383 8810 	msr	PRIMASK, r3
}
 800221c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800221e:	f3ef 8310 	mrs	r3, PRIMASK
 8002222:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002226:	643b      	str	r3, [r7, #64]	; 0x40
 8002228:	2301      	movs	r3, #1
 800222a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800222c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222e:	f383 8810 	msr	PRIMASK, r3
}
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2101      	movs	r1, #1
 8002240:	438a      	bics	r2, r1
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002246:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800224a:	f383 8810 	msr	PRIMASK, r3
}
 800224e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2220      	movs	r2, #32
 800225a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2274      	movs	r2, #116	; 0x74
 8002260:	2100      	movs	r1, #0
 8002262:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e067      	b.n	8002338 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2204      	movs	r2, #4
 8002270:	4013      	ands	r3, r2
 8002272:	d050      	beq.n	8002316 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	69da      	ldr	r2, [r3, #28]
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	401a      	ands	r2, r3
 8002280:	2380      	movs	r3, #128	; 0x80
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	429a      	cmp	r2, r3
 8002286:	d146      	bne.n	8002316 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2280      	movs	r2, #128	; 0x80
 800228e:	0112      	lsls	r2, r2, #4
 8002290:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002292:	f3ef 8310 	mrs	r3, PRIMASK
 8002296:	613b      	str	r3, [r7, #16]
  return(result);
 8002298:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800229a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800229c:	2301      	movs	r3, #1
 800229e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f383 8810 	msr	PRIMASK, r3
}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4923      	ldr	r1, [pc, #140]	; (8002340 <UART_WaitOnFlagUntilTimeout+0x184>)
 80022b4:	400a      	ands	r2, r1
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	f383 8810 	msr	PRIMASK, r3
}
 80022c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022c4:	f3ef 8310 	mrs	r3, PRIMASK
 80022c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80022ca:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80022ce:	2301      	movs	r3, #1
 80022d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	f383 8810 	msr	PRIMASK, r3
}
 80022d8:	46c0      	nop			; (mov r8, r8)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2101      	movs	r1, #1
 80022e6:	438a      	bics	r2, r1
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	f383 8810 	msr	PRIMASK, r3
}
 80022f4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2220      	movs	r2, #32
 80022fa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2220      	movs	r2, #32
 8002300:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2280      	movs	r2, #128	; 0x80
 8002306:	2120      	movs	r1, #32
 8002308:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2274      	movs	r2, #116	; 0x74
 800230e:	2100      	movs	r1, #0
 8002310:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e010      	b.n	8002338 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	4013      	ands	r3, r2
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	425a      	negs	r2, r3
 8002326:	4153      	adcs	r3, r2
 8002328:	b2db      	uxtb	r3, r3
 800232a:	001a      	movs	r2, r3
 800232c:	1dfb      	adds	r3, r7, #7
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d100      	bne.n	8002336 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002334:	e74b      	b.n	80021ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	0018      	movs	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	b014      	add	sp, #80	; 0x50
 800233e:	bd80      	pop	{r7, pc}
 8002340:	fffffe5f 	.word	0xfffffe5f

08002344 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b090      	sub	sp, #64	; 0x40
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	1dbb      	adds	r3, r7, #6
 8002350:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	1dba      	adds	r2, r7, #6
 800235c:	2158      	movs	r1, #88	; 0x58
 800235e:	8812      	ldrh	r2, [r2, #0]
 8002360:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2280      	movs	r2, #128	; 0x80
 8002366:	2100      	movs	r1, #0
 8002368:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2222      	movs	r2, #34	; 0x22
 800236e:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002374:	2b00      	cmp	r3, #0
 8002376:	d02b      	beq.n	80023d0 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237c:	4a3f      	ldr	r2, [pc, #252]	; (800247c <UART_Start_Receive_DMA+0x138>)
 800237e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002384:	4a3e      	ldr	r2, [pc, #248]	; (8002480 <UART_Start_Receive_DMA+0x13c>)
 8002386:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238c:	4a3d      	ldr	r2, [pc, #244]	; (8002484 <UART_Start_Receive_DMA+0x140>)
 800238e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002394:	2200      	movs	r2, #0
 8002396:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	3324      	adds	r3, #36	; 0x24
 80023a2:	0019      	movs	r1, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a8:	001a      	movs	r2, r3
 80023aa:	1dbb      	adds	r3, r7, #6
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	f7fe fbfd 	bl	8000bac <HAL_DMA_Start_IT>
 80023b2:	1e03      	subs	r3, r0, #0
 80023b4:	d00c      	beq.n	80023d0 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2280      	movs	r2, #128	; 0x80
 80023ba:	2110      	movs	r1, #16
 80023bc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2274      	movs	r2, #116	; 0x74
 80023c2:	2100      	movs	r1, #0
 80023c4:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2220      	movs	r2, #32
 80023ca:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e050      	b.n	8002472 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2274      	movs	r2, #116	; 0x74
 80023d4:	2100      	movs	r1, #0
 80023d6:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023d8:	f3ef 8310 	mrs	r3, PRIMASK
 80023dc:	613b      	str	r3, [r7, #16]
  return(result);
 80023de:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023e2:	2301      	movs	r3, #1
 80023e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f383 8810 	msr	PRIMASK, r3
}
 80023ec:	46c0      	nop			; (mov r8, r8)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2180      	movs	r1, #128	; 0x80
 80023fa:	0049      	lsls	r1, r1, #1
 80023fc:	430a      	orrs	r2, r1
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002402:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	f383 8810 	msr	PRIMASK, r3
}
 800240a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800240c:	f3ef 8310 	mrs	r3, PRIMASK
 8002410:	61fb      	str	r3, [r7, #28]
  return(result);
 8002412:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002414:	63bb      	str	r3, [r7, #56]	; 0x38
 8002416:	2301      	movs	r3, #1
 8002418:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	f383 8810 	msr	PRIMASK, r3
}
 8002420:	46c0      	nop			; (mov r8, r8)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2101      	movs	r1, #1
 800242e:	430a      	orrs	r2, r1
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	f383 8810 	msr	PRIMASK, r3
}
 800243c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800243e:	f3ef 8310 	mrs	r3, PRIMASK
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002444:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002446:	637b      	str	r3, [r7, #52]	; 0x34
 8002448:	2301      	movs	r3, #1
 800244a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800244c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244e:	f383 8810 	msr	PRIMASK, r3
}
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2140      	movs	r1, #64	; 0x40
 8002460:	430a      	orrs	r2, r1
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002466:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246a:	f383 8810 	msr	PRIMASK, r3
}
 800246e:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	0018      	movs	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	b010      	add	sp, #64	; 0x40
 8002478:	bd80      	pop	{r7, pc}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	08002595 	.word	0x08002595
 8002480:	080026b9 	.word	0x080026b9
 8002484:	080026f5 	.word	0x080026f5

08002488 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002490:	f3ef 8310 	mrs	r3, PRIMASK
 8002494:	60bb      	str	r3, [r7, #8]
  return(result);
 8002496:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	2301      	movs	r3, #1
 800249c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f383 8810 	msr	PRIMASK, r3
}
 80024a4:	46c0      	nop			; (mov r8, r8)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	21c0      	movs	r1, #192	; 0xc0
 80024b2:	438a      	bics	r2, r1
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	f383 8810 	msr	PRIMASK, r3
}
 80024c0:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2220      	movs	r2, #32
 80024c6:	679a      	str	r2, [r3, #120]	; 0x78
}
 80024c8:	46c0      	nop			; (mov r8, r8)
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b006      	add	sp, #24
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08e      	sub	sp, #56	; 0x38
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024d8:	f3ef 8310 	mrs	r3, PRIMASK
 80024dc:	617b      	str	r3, [r7, #20]
  return(result);
 80024de:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024e0:	637b      	str	r3, [r7, #52]	; 0x34
 80024e2:	2301      	movs	r3, #1
 80024e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	f383 8810 	msr	PRIMASK, r3
}
 80024ec:	46c0      	nop			; (mov r8, r8)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4925      	ldr	r1, [pc, #148]	; (8002590 <UART_EndRxTransfer+0xc0>)
 80024fa:	400a      	ands	r2, r1
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002500:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f383 8810 	msr	PRIMASK, r3
}
 8002508:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800250a:	f3ef 8310 	mrs	r3, PRIMASK
 800250e:	623b      	str	r3, [r7, #32]
  return(result);
 8002510:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002512:	633b      	str	r3, [r7, #48]	; 0x30
 8002514:	2301      	movs	r3, #1
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	f383 8810 	msr	PRIMASK, r3
}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2101      	movs	r1, #1
 800252c:	438a      	bics	r2, r1
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002532:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002536:	f383 8810 	msr	PRIMASK, r3
}
 800253a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002540:	2b01      	cmp	r3, #1
 8002542:	d118      	bne.n	8002576 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002544:	f3ef 8310 	mrs	r3, PRIMASK
 8002548:	60bb      	str	r3, [r7, #8]
  return(result);
 800254a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800254e:	2301      	movs	r3, #1
 8002550:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f383 8810 	msr	PRIMASK, r3
}
 8002558:	46c0      	nop			; (mov r8, r8)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2110      	movs	r1, #16
 8002566:	438a      	bics	r2, r1
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	f383 8810 	msr	PRIMASK, r3
}
 8002574:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2220      	movs	r2, #32
 800257a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002588:	46c0      	nop			; (mov r8, r8)
 800258a:	46bd      	mov	sp, r7
 800258c:	b00e      	add	sp, #56	; 0x38
 800258e:	bd80      	pop	{r7, pc}
 8002590:	fffffedf 	.word	0xfffffedf

08002594 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b094      	sub	sp, #80	; 0x50
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	2b20      	cmp	r3, #32
 80025a8:	d06e      	beq.n	8002688 <UART_DMAReceiveCplt+0xf4>
  {
    huart->RxXferCount = 0U;
 80025aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ac:	225a      	movs	r2, #90	; 0x5a
 80025ae:	2100      	movs	r1, #0
 80025b0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025b2:	f3ef 8310 	mrs	r3, PRIMASK
 80025b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80025b8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80025bc:	2301      	movs	r3, #1
 80025be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f383 8810 	msr	PRIMASK, r3
}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4938      	ldr	r1, [pc, #224]	; (80026b4 <UART_DMAReceiveCplt+0x120>)
 80025d4:	400a      	ands	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	f383 8810 	msr	PRIMASK, r3
}
 80025e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025e4:	f3ef 8310 	mrs	r3, PRIMASK
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ec:	647b      	str	r3, [r7, #68]	; 0x44
 80025ee:	2301      	movs	r3, #1
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f4:	f383 8810 	msr	PRIMASK, r3
}
 80025f8:	46c0      	nop			; (mov r8, r8)
 80025fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2101      	movs	r1, #1
 8002606:	438a      	bics	r2, r1
 8002608:	609a      	str	r2, [r3, #8]
 800260a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800260c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800260e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002610:	f383 8810 	msr	PRIMASK, r3
}
 8002614:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002616:	f3ef 8310 	mrs	r3, PRIMASK
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800261c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800261e:	643b      	str	r3, [r7, #64]	; 0x40
 8002620:	2301      	movs	r3, #1
 8002622:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002626:	f383 8810 	msr	PRIMASK, r3
}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2140      	movs	r1, #64	; 0x40
 8002638:	438a      	bics	r2, r1
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800263e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002642:	f383 8810 	msr	PRIMASK, r3
}
 8002646:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800264a:	2220      	movs	r2, #32
 800264c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800264e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002652:	2b01      	cmp	r3, #1
 8002654:	d118      	bne.n	8002688 <UART_DMAReceiveCplt+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002656:	f3ef 8310 	mrs	r3, PRIMASK
 800265a:	60fb      	str	r3, [r7, #12]
  return(result);
 800265c:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800265e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002660:	2301      	movs	r3, #1
 8002662:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	f383 8810 	msr	PRIMASK, r3
}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2110      	movs	r1, #16
 8002678:	438a      	bics	r2, r1
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800267e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f383 8810 	msr	PRIMASK, r3
}
 8002686:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800268a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800268c:	2b01      	cmp	r3, #1
 800268e:	d108      	bne.n	80026a2 <UART_DMAReceiveCplt+0x10e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002692:	2258      	movs	r2, #88	; 0x58
 8002694:	5a9a      	ldrh	r2, [r3, r2]
 8002696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002698:	0011      	movs	r1, r2
 800269a:	0018      	movs	r0, r3
 800269c:	f7ff fb46 	bl	8001d2c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80026a0:	e003      	b.n	80026aa <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 80026a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026a4:	0018      	movs	r0, r3
 80026a6:	f7ff fb29 	bl	8001cfc <HAL_UART_RxCpltCallback>
}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	46bd      	mov	sp, r7
 80026ae:	b014      	add	sp, #80	; 0x50
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	fffffeff 	.word	0xfffffeff

080026b8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d10a      	bne.n	80026e4 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2258      	movs	r2, #88	; 0x58
 80026d2:	5a9b      	ldrh	r3, [r3, r2]
 80026d4:	085b      	lsrs	r3, r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	0011      	movs	r1, r2
 80026dc:	0018      	movs	r0, r3
 80026de:	f7ff fb25 	bl	8001d2c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80026e2:	e003      	b.n	80026ec <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	0018      	movs	r0, r3
 80026e8:	f7ff fb10 	bl	8001d0c <HAL_UART_RxHalfCpltCallback>
}
 80026ec:	46c0      	nop			; (mov r8, r8)
 80026ee:	46bd      	mov	sp, r7
 80026f0:	b004      	add	sp, #16
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002706:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800270c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2280      	movs	r2, #128	; 0x80
 8002716:	4013      	ands	r3, r2
 8002718:	2b80      	cmp	r3, #128	; 0x80
 800271a:	d10a      	bne.n	8002732 <UART_DMAError+0x3e>
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	2b21      	cmp	r3, #33	; 0x21
 8002720:	d107      	bne.n	8002732 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2252      	movs	r2, #82	; 0x52
 8002726:	2100      	movs	r1, #0
 8002728:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	0018      	movs	r0, r3
 800272e:	f7ff feab 	bl	8002488 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2240      	movs	r2, #64	; 0x40
 800273a:	4013      	ands	r3, r2
 800273c:	2b40      	cmp	r3, #64	; 0x40
 800273e:	d10a      	bne.n	8002756 <UART_DMAError+0x62>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2b22      	cmp	r3, #34	; 0x22
 8002744:	d107      	bne.n	8002756 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	225a      	movs	r2, #90	; 0x5a
 800274a:	2100      	movs	r1, #0
 800274c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	0018      	movs	r0, r3
 8002752:	f7ff febd 	bl	80024d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2280      	movs	r2, #128	; 0x80
 800275a:	589b      	ldr	r3, [r3, r2]
 800275c:	2210      	movs	r2, #16
 800275e:	431a      	orrs	r2, r3
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	2180      	movs	r1, #128	; 0x80
 8002764:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	0018      	movs	r0, r3
 800276a:	f7ff fad7 	bl	8001d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	46bd      	mov	sp, r7
 8002772:	b006      	add	sp, #24
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <std>:
 8002778:	2300      	movs	r3, #0
 800277a:	b510      	push	{r4, lr}
 800277c:	0004      	movs	r4, r0
 800277e:	6003      	str	r3, [r0, #0]
 8002780:	6043      	str	r3, [r0, #4]
 8002782:	6083      	str	r3, [r0, #8]
 8002784:	8181      	strh	r1, [r0, #12]
 8002786:	6643      	str	r3, [r0, #100]	; 0x64
 8002788:	0019      	movs	r1, r3
 800278a:	81c2      	strh	r2, [r0, #14]
 800278c:	6103      	str	r3, [r0, #16]
 800278e:	6143      	str	r3, [r0, #20]
 8002790:	6183      	str	r3, [r0, #24]
 8002792:	2208      	movs	r2, #8
 8002794:	305c      	adds	r0, #92	; 0x5c
 8002796:	f000 f8fd 	bl	8002994 <memset>
 800279a:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <std+0x38>)
 800279c:	6224      	str	r4, [r4, #32]
 800279e:	6263      	str	r3, [r4, #36]	; 0x24
 80027a0:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <std+0x3c>)
 80027a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80027a4:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <std+0x40>)
 80027a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80027a8:	4b04      	ldr	r3, [pc, #16]	; (80027bc <std+0x44>)
 80027aa:	6323      	str	r3, [r4, #48]	; 0x30
 80027ac:	bd10      	pop	{r4, pc}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	080028fd 	.word	0x080028fd
 80027b4:	08002925 	.word	0x08002925
 80027b8:	0800295d 	.word	0x0800295d
 80027bc:	08002989 	.word	0x08002989

080027c0 <stdio_exit_handler>:
 80027c0:	b510      	push	{r4, lr}
 80027c2:	4a03      	ldr	r2, [pc, #12]	; (80027d0 <stdio_exit_handler+0x10>)
 80027c4:	4903      	ldr	r1, [pc, #12]	; (80027d4 <stdio_exit_handler+0x14>)
 80027c6:	4804      	ldr	r0, [pc, #16]	; (80027d8 <stdio_exit_handler+0x18>)
 80027c8:	f000 f86c 	bl	80028a4 <_fwalk_sglue>
 80027cc:	bd10      	pop	{r4, pc}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	2000000c 	.word	0x2000000c
 80027d4:	08003331 	.word	0x08003331
 80027d8:	20000018 	.word	0x20000018

080027dc <cleanup_stdio>:
 80027dc:	6841      	ldr	r1, [r0, #4]
 80027de:	4b0b      	ldr	r3, [pc, #44]	; (800280c <cleanup_stdio+0x30>)
 80027e0:	b510      	push	{r4, lr}
 80027e2:	0004      	movs	r4, r0
 80027e4:	4299      	cmp	r1, r3
 80027e6:	d001      	beq.n	80027ec <cleanup_stdio+0x10>
 80027e8:	f000 fda2 	bl	8003330 <_fflush_r>
 80027ec:	68a1      	ldr	r1, [r4, #8]
 80027ee:	4b08      	ldr	r3, [pc, #32]	; (8002810 <cleanup_stdio+0x34>)
 80027f0:	4299      	cmp	r1, r3
 80027f2:	d002      	beq.n	80027fa <cleanup_stdio+0x1e>
 80027f4:	0020      	movs	r0, r4
 80027f6:	f000 fd9b 	bl	8003330 <_fflush_r>
 80027fa:	68e1      	ldr	r1, [r4, #12]
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <cleanup_stdio+0x38>)
 80027fe:	4299      	cmp	r1, r3
 8002800:	d002      	beq.n	8002808 <cleanup_stdio+0x2c>
 8002802:	0020      	movs	r0, r4
 8002804:	f000 fd94 	bl	8003330 <_fflush_r>
 8002808:	bd10      	pop	{r4, pc}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	2000029c 	.word	0x2000029c
 8002810:	20000304 	.word	0x20000304
 8002814:	2000036c 	.word	0x2000036c

08002818 <global_stdio_init.part.0>:
 8002818:	b510      	push	{r4, lr}
 800281a:	4b09      	ldr	r3, [pc, #36]	; (8002840 <global_stdio_init.part.0+0x28>)
 800281c:	4a09      	ldr	r2, [pc, #36]	; (8002844 <global_stdio_init.part.0+0x2c>)
 800281e:	2104      	movs	r1, #4
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	4809      	ldr	r0, [pc, #36]	; (8002848 <global_stdio_init.part.0+0x30>)
 8002824:	2200      	movs	r2, #0
 8002826:	f7ff ffa7 	bl	8002778 <std>
 800282a:	2201      	movs	r2, #1
 800282c:	2109      	movs	r1, #9
 800282e:	4807      	ldr	r0, [pc, #28]	; (800284c <global_stdio_init.part.0+0x34>)
 8002830:	f7ff ffa2 	bl	8002778 <std>
 8002834:	2202      	movs	r2, #2
 8002836:	2112      	movs	r1, #18
 8002838:	4805      	ldr	r0, [pc, #20]	; (8002850 <global_stdio_init.part.0+0x38>)
 800283a:	f7ff ff9d 	bl	8002778 <std>
 800283e:	bd10      	pop	{r4, pc}
 8002840:	200003d4 	.word	0x200003d4
 8002844:	080027c1 	.word	0x080027c1
 8002848:	2000029c 	.word	0x2000029c
 800284c:	20000304 	.word	0x20000304
 8002850:	2000036c 	.word	0x2000036c

08002854 <__sfp_lock_acquire>:
 8002854:	b510      	push	{r4, lr}
 8002856:	4802      	ldr	r0, [pc, #8]	; (8002860 <__sfp_lock_acquire+0xc>)
 8002858:	f000 f91c 	bl	8002a94 <__retarget_lock_acquire_recursive>
 800285c:	bd10      	pop	{r4, pc}
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	200003dd 	.word	0x200003dd

08002864 <__sfp_lock_release>:
 8002864:	b510      	push	{r4, lr}
 8002866:	4802      	ldr	r0, [pc, #8]	; (8002870 <__sfp_lock_release+0xc>)
 8002868:	f000 f915 	bl	8002a96 <__retarget_lock_release_recursive>
 800286c:	bd10      	pop	{r4, pc}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	200003dd 	.word	0x200003dd

08002874 <__sinit>:
 8002874:	b510      	push	{r4, lr}
 8002876:	0004      	movs	r4, r0
 8002878:	f7ff ffec 	bl	8002854 <__sfp_lock_acquire>
 800287c:	6a23      	ldr	r3, [r4, #32]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d002      	beq.n	8002888 <__sinit+0x14>
 8002882:	f7ff ffef 	bl	8002864 <__sfp_lock_release>
 8002886:	bd10      	pop	{r4, pc}
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <__sinit+0x28>)
 800288a:	6223      	str	r3, [r4, #32]
 800288c:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <__sinit+0x2c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1f6      	bne.n	8002882 <__sinit+0xe>
 8002894:	f7ff ffc0 	bl	8002818 <global_stdio_init.part.0>
 8002898:	e7f3      	b.n	8002882 <__sinit+0xe>
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	080027dd 	.word	0x080027dd
 80028a0:	200003d4 	.word	0x200003d4

080028a4 <_fwalk_sglue>:
 80028a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028a6:	0014      	movs	r4, r2
 80028a8:	2600      	movs	r6, #0
 80028aa:	9000      	str	r0, [sp, #0]
 80028ac:	9101      	str	r1, [sp, #4]
 80028ae:	68a5      	ldr	r5, [r4, #8]
 80028b0:	6867      	ldr	r7, [r4, #4]
 80028b2:	3f01      	subs	r7, #1
 80028b4:	d504      	bpl.n	80028c0 <_fwalk_sglue+0x1c>
 80028b6:	6824      	ldr	r4, [r4, #0]
 80028b8:	2c00      	cmp	r4, #0
 80028ba:	d1f8      	bne.n	80028ae <_fwalk_sglue+0xa>
 80028bc:	0030      	movs	r0, r6
 80028be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80028c0:	89ab      	ldrh	r3, [r5, #12]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d908      	bls.n	80028d8 <_fwalk_sglue+0x34>
 80028c6:	220e      	movs	r2, #14
 80028c8:	5eab      	ldrsh	r3, [r5, r2]
 80028ca:	3301      	adds	r3, #1
 80028cc:	d004      	beq.n	80028d8 <_fwalk_sglue+0x34>
 80028ce:	0029      	movs	r1, r5
 80028d0:	9800      	ldr	r0, [sp, #0]
 80028d2:	9b01      	ldr	r3, [sp, #4]
 80028d4:	4798      	blx	r3
 80028d6:	4306      	orrs	r6, r0
 80028d8:	3568      	adds	r5, #104	; 0x68
 80028da:	e7ea      	b.n	80028b2 <_fwalk_sglue+0xe>

080028dc <iprintf>:
 80028dc:	b40f      	push	{r0, r1, r2, r3}
 80028de:	b507      	push	{r0, r1, r2, lr}
 80028e0:	4905      	ldr	r1, [pc, #20]	; (80028f8 <iprintf+0x1c>)
 80028e2:	ab04      	add	r3, sp, #16
 80028e4:	6808      	ldr	r0, [r1, #0]
 80028e6:	cb04      	ldmia	r3!, {r2}
 80028e8:	6881      	ldr	r1, [r0, #8]
 80028ea:	9301      	str	r3, [sp, #4]
 80028ec:	f000 f9fa 	bl	8002ce4 <_vfiprintf_r>
 80028f0:	b003      	add	sp, #12
 80028f2:	bc08      	pop	{r3}
 80028f4:	b004      	add	sp, #16
 80028f6:	4718      	bx	r3
 80028f8:	20000064 	.word	0x20000064

080028fc <__sread>:
 80028fc:	b570      	push	{r4, r5, r6, lr}
 80028fe:	000c      	movs	r4, r1
 8002900:	250e      	movs	r5, #14
 8002902:	5f49      	ldrsh	r1, [r1, r5]
 8002904:	f000 f874 	bl	80029f0 <_read_r>
 8002908:	2800      	cmp	r0, #0
 800290a:	db03      	blt.n	8002914 <__sread+0x18>
 800290c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800290e:	181b      	adds	r3, r3, r0
 8002910:	6563      	str	r3, [r4, #84]	; 0x54
 8002912:	bd70      	pop	{r4, r5, r6, pc}
 8002914:	89a3      	ldrh	r3, [r4, #12]
 8002916:	4a02      	ldr	r2, [pc, #8]	; (8002920 <__sread+0x24>)
 8002918:	4013      	ands	r3, r2
 800291a:	81a3      	strh	r3, [r4, #12]
 800291c:	e7f9      	b.n	8002912 <__sread+0x16>
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	ffffefff 	.word	0xffffefff

08002924 <__swrite>:
 8002924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002926:	001f      	movs	r7, r3
 8002928:	898b      	ldrh	r3, [r1, #12]
 800292a:	0005      	movs	r5, r0
 800292c:	000c      	movs	r4, r1
 800292e:	0016      	movs	r6, r2
 8002930:	05db      	lsls	r3, r3, #23
 8002932:	d505      	bpl.n	8002940 <__swrite+0x1c>
 8002934:	230e      	movs	r3, #14
 8002936:	5ec9      	ldrsh	r1, [r1, r3]
 8002938:	2200      	movs	r2, #0
 800293a:	2302      	movs	r3, #2
 800293c:	f000 f844 	bl	80029c8 <_lseek_r>
 8002940:	89a3      	ldrh	r3, [r4, #12]
 8002942:	4a05      	ldr	r2, [pc, #20]	; (8002958 <__swrite+0x34>)
 8002944:	0028      	movs	r0, r5
 8002946:	4013      	ands	r3, r2
 8002948:	81a3      	strh	r3, [r4, #12]
 800294a:	0032      	movs	r2, r6
 800294c:	230e      	movs	r3, #14
 800294e:	5ee1      	ldrsh	r1, [r4, r3]
 8002950:	003b      	movs	r3, r7
 8002952:	f000 f861 	bl	8002a18 <_write_r>
 8002956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002958:	ffffefff 	.word	0xffffefff

0800295c <__sseek>:
 800295c:	b570      	push	{r4, r5, r6, lr}
 800295e:	000c      	movs	r4, r1
 8002960:	250e      	movs	r5, #14
 8002962:	5f49      	ldrsh	r1, [r1, r5]
 8002964:	f000 f830 	bl	80029c8 <_lseek_r>
 8002968:	89a3      	ldrh	r3, [r4, #12]
 800296a:	1c42      	adds	r2, r0, #1
 800296c:	d103      	bne.n	8002976 <__sseek+0x1a>
 800296e:	4a05      	ldr	r2, [pc, #20]	; (8002984 <__sseek+0x28>)
 8002970:	4013      	ands	r3, r2
 8002972:	81a3      	strh	r3, [r4, #12]
 8002974:	bd70      	pop	{r4, r5, r6, pc}
 8002976:	2280      	movs	r2, #128	; 0x80
 8002978:	0152      	lsls	r2, r2, #5
 800297a:	4313      	orrs	r3, r2
 800297c:	81a3      	strh	r3, [r4, #12]
 800297e:	6560      	str	r0, [r4, #84]	; 0x54
 8002980:	e7f8      	b.n	8002974 <__sseek+0x18>
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	ffffefff 	.word	0xffffefff

08002988 <__sclose>:
 8002988:	b510      	push	{r4, lr}
 800298a:	230e      	movs	r3, #14
 800298c:	5ec9      	ldrsh	r1, [r1, r3]
 800298e:	f000 f809 	bl	80029a4 <_close_r>
 8002992:	bd10      	pop	{r4, pc}

08002994 <memset>:
 8002994:	0003      	movs	r3, r0
 8002996:	1882      	adds	r2, r0, r2
 8002998:	4293      	cmp	r3, r2
 800299a:	d100      	bne.n	800299e <memset+0xa>
 800299c:	4770      	bx	lr
 800299e:	7019      	strb	r1, [r3, #0]
 80029a0:	3301      	adds	r3, #1
 80029a2:	e7f9      	b.n	8002998 <memset+0x4>

080029a4 <_close_r>:
 80029a4:	2300      	movs	r3, #0
 80029a6:	b570      	push	{r4, r5, r6, lr}
 80029a8:	4d06      	ldr	r5, [pc, #24]	; (80029c4 <_close_r+0x20>)
 80029aa:	0004      	movs	r4, r0
 80029ac:	0008      	movs	r0, r1
 80029ae:	602b      	str	r3, [r5, #0]
 80029b0:	f7fd fedf 	bl	8000772 <_close>
 80029b4:	1c43      	adds	r3, r0, #1
 80029b6:	d103      	bne.n	80029c0 <_close_r+0x1c>
 80029b8:	682b      	ldr	r3, [r5, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d000      	beq.n	80029c0 <_close_r+0x1c>
 80029be:	6023      	str	r3, [r4, #0]
 80029c0:	bd70      	pop	{r4, r5, r6, pc}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	200003d8 	.word	0x200003d8

080029c8 <_lseek_r>:
 80029c8:	b570      	push	{r4, r5, r6, lr}
 80029ca:	0004      	movs	r4, r0
 80029cc:	0008      	movs	r0, r1
 80029ce:	0011      	movs	r1, r2
 80029d0:	001a      	movs	r2, r3
 80029d2:	2300      	movs	r3, #0
 80029d4:	4d05      	ldr	r5, [pc, #20]	; (80029ec <_lseek_r+0x24>)
 80029d6:	602b      	str	r3, [r5, #0]
 80029d8:	f7fd feec 	bl	80007b4 <_lseek>
 80029dc:	1c43      	adds	r3, r0, #1
 80029de:	d103      	bne.n	80029e8 <_lseek_r+0x20>
 80029e0:	682b      	ldr	r3, [r5, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d000      	beq.n	80029e8 <_lseek_r+0x20>
 80029e6:	6023      	str	r3, [r4, #0]
 80029e8:	bd70      	pop	{r4, r5, r6, pc}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	200003d8 	.word	0x200003d8

080029f0 <_read_r>:
 80029f0:	b570      	push	{r4, r5, r6, lr}
 80029f2:	0004      	movs	r4, r0
 80029f4:	0008      	movs	r0, r1
 80029f6:	0011      	movs	r1, r2
 80029f8:	001a      	movs	r2, r3
 80029fa:	2300      	movs	r3, #0
 80029fc:	4d05      	ldr	r5, [pc, #20]	; (8002a14 <_read_r+0x24>)
 80029fe:	602b      	str	r3, [r5, #0]
 8002a00:	f7fd fe9a 	bl	8000738 <_read>
 8002a04:	1c43      	adds	r3, r0, #1
 8002a06:	d103      	bne.n	8002a10 <_read_r+0x20>
 8002a08:	682b      	ldr	r3, [r5, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d000      	beq.n	8002a10 <_read_r+0x20>
 8002a0e:	6023      	str	r3, [r4, #0]
 8002a10:	bd70      	pop	{r4, r5, r6, pc}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	200003d8 	.word	0x200003d8

08002a18 <_write_r>:
 8002a18:	b570      	push	{r4, r5, r6, lr}
 8002a1a:	0004      	movs	r4, r0
 8002a1c:	0008      	movs	r0, r1
 8002a1e:	0011      	movs	r1, r2
 8002a20:	001a      	movs	r2, r3
 8002a22:	2300      	movs	r3, #0
 8002a24:	4d05      	ldr	r5, [pc, #20]	; (8002a3c <_write_r+0x24>)
 8002a26:	602b      	str	r3, [r5, #0]
 8002a28:	f7fd fc14 	bl	8000254 <_write>
 8002a2c:	1c43      	adds	r3, r0, #1
 8002a2e:	d103      	bne.n	8002a38 <_write_r+0x20>
 8002a30:	682b      	ldr	r3, [r5, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d000      	beq.n	8002a38 <_write_r+0x20>
 8002a36:	6023      	str	r3, [r4, #0]
 8002a38:	bd70      	pop	{r4, r5, r6, pc}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	200003d8 	.word	0x200003d8

08002a40 <__errno>:
 8002a40:	4b01      	ldr	r3, [pc, #4]	; (8002a48 <__errno+0x8>)
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	4770      	bx	lr
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	20000064 	.word	0x20000064

08002a4c <__libc_init_array>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	2600      	movs	r6, #0
 8002a50:	4c0c      	ldr	r4, [pc, #48]	; (8002a84 <__libc_init_array+0x38>)
 8002a52:	4d0d      	ldr	r5, [pc, #52]	; (8002a88 <__libc_init_array+0x3c>)
 8002a54:	1b64      	subs	r4, r4, r5
 8002a56:	10a4      	asrs	r4, r4, #2
 8002a58:	42a6      	cmp	r6, r4
 8002a5a:	d109      	bne.n	8002a70 <__libc_init_array+0x24>
 8002a5c:	2600      	movs	r6, #0
 8002a5e:	f000 fde1 	bl	8003624 <_init>
 8002a62:	4c0a      	ldr	r4, [pc, #40]	; (8002a8c <__libc_init_array+0x40>)
 8002a64:	4d0a      	ldr	r5, [pc, #40]	; (8002a90 <__libc_init_array+0x44>)
 8002a66:	1b64      	subs	r4, r4, r5
 8002a68:	10a4      	asrs	r4, r4, #2
 8002a6a:	42a6      	cmp	r6, r4
 8002a6c:	d105      	bne.n	8002a7a <__libc_init_array+0x2e>
 8002a6e:	bd70      	pop	{r4, r5, r6, pc}
 8002a70:	00b3      	lsls	r3, r6, #2
 8002a72:	58eb      	ldr	r3, [r5, r3]
 8002a74:	4798      	blx	r3
 8002a76:	3601      	adds	r6, #1
 8002a78:	e7ee      	b.n	8002a58 <__libc_init_array+0xc>
 8002a7a:	00b3      	lsls	r3, r6, #2
 8002a7c:	58eb      	ldr	r3, [r5, r3]
 8002a7e:	4798      	blx	r3
 8002a80:	3601      	adds	r6, #1
 8002a82:	e7f2      	b.n	8002a6a <__libc_init_array+0x1e>
 8002a84:	080036b8 	.word	0x080036b8
 8002a88:	080036b8 	.word	0x080036b8
 8002a8c:	080036bc 	.word	0x080036bc
 8002a90:	080036b8 	.word	0x080036b8

08002a94 <__retarget_lock_acquire_recursive>:
 8002a94:	4770      	bx	lr

08002a96 <__retarget_lock_release_recursive>:
 8002a96:	4770      	bx	lr

08002a98 <_free_r>:
 8002a98:	b570      	push	{r4, r5, r6, lr}
 8002a9a:	0005      	movs	r5, r0
 8002a9c:	2900      	cmp	r1, #0
 8002a9e:	d010      	beq.n	8002ac2 <_free_r+0x2a>
 8002aa0:	1f0c      	subs	r4, r1, #4
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	da00      	bge.n	8002aaa <_free_r+0x12>
 8002aa8:	18e4      	adds	r4, r4, r3
 8002aaa:	0028      	movs	r0, r5
 8002aac:	f000 f8e2 	bl	8002c74 <__malloc_lock>
 8002ab0:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <_free_r+0x90>)
 8002ab2:	6813      	ldr	r3, [r2, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d105      	bne.n	8002ac4 <_free_r+0x2c>
 8002ab8:	6063      	str	r3, [r4, #4]
 8002aba:	6014      	str	r4, [r2, #0]
 8002abc:	0028      	movs	r0, r5
 8002abe:	f000 f8e1 	bl	8002c84 <__malloc_unlock>
 8002ac2:	bd70      	pop	{r4, r5, r6, pc}
 8002ac4:	42a3      	cmp	r3, r4
 8002ac6:	d908      	bls.n	8002ada <_free_r+0x42>
 8002ac8:	6820      	ldr	r0, [r4, #0]
 8002aca:	1821      	adds	r1, r4, r0
 8002acc:	428b      	cmp	r3, r1
 8002ace:	d1f3      	bne.n	8002ab8 <_free_r+0x20>
 8002ad0:	6819      	ldr	r1, [r3, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	1809      	adds	r1, r1, r0
 8002ad6:	6021      	str	r1, [r4, #0]
 8002ad8:	e7ee      	b.n	8002ab8 <_free_r+0x20>
 8002ada:	001a      	movs	r2, r3
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <_free_r+0x4e>
 8002ae2:	42a3      	cmp	r3, r4
 8002ae4:	d9f9      	bls.n	8002ada <_free_r+0x42>
 8002ae6:	6811      	ldr	r1, [r2, #0]
 8002ae8:	1850      	adds	r0, r2, r1
 8002aea:	42a0      	cmp	r0, r4
 8002aec:	d10b      	bne.n	8002b06 <_free_r+0x6e>
 8002aee:	6820      	ldr	r0, [r4, #0]
 8002af0:	1809      	adds	r1, r1, r0
 8002af2:	1850      	adds	r0, r2, r1
 8002af4:	6011      	str	r1, [r2, #0]
 8002af6:	4283      	cmp	r3, r0
 8002af8:	d1e0      	bne.n	8002abc <_free_r+0x24>
 8002afa:	6818      	ldr	r0, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	1841      	adds	r1, r0, r1
 8002b00:	6011      	str	r1, [r2, #0]
 8002b02:	6053      	str	r3, [r2, #4]
 8002b04:	e7da      	b.n	8002abc <_free_r+0x24>
 8002b06:	42a0      	cmp	r0, r4
 8002b08:	d902      	bls.n	8002b10 <_free_r+0x78>
 8002b0a:	230c      	movs	r3, #12
 8002b0c:	602b      	str	r3, [r5, #0]
 8002b0e:	e7d5      	b.n	8002abc <_free_r+0x24>
 8002b10:	6820      	ldr	r0, [r4, #0]
 8002b12:	1821      	adds	r1, r4, r0
 8002b14:	428b      	cmp	r3, r1
 8002b16:	d103      	bne.n	8002b20 <_free_r+0x88>
 8002b18:	6819      	ldr	r1, [r3, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	1809      	adds	r1, r1, r0
 8002b1e:	6021      	str	r1, [r4, #0]
 8002b20:	6063      	str	r3, [r4, #4]
 8002b22:	6054      	str	r4, [r2, #4]
 8002b24:	e7ca      	b.n	8002abc <_free_r+0x24>
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	200003e0 	.word	0x200003e0

08002b2c <sbrk_aligned>:
 8002b2c:	b570      	push	{r4, r5, r6, lr}
 8002b2e:	4e0f      	ldr	r6, [pc, #60]	; (8002b6c <sbrk_aligned+0x40>)
 8002b30:	000d      	movs	r5, r1
 8002b32:	6831      	ldr	r1, [r6, #0]
 8002b34:	0004      	movs	r4, r0
 8002b36:	2900      	cmp	r1, #0
 8002b38:	d102      	bne.n	8002b40 <sbrk_aligned+0x14>
 8002b3a:	f000 fccb 	bl	80034d4 <_sbrk_r>
 8002b3e:	6030      	str	r0, [r6, #0]
 8002b40:	0029      	movs	r1, r5
 8002b42:	0020      	movs	r0, r4
 8002b44:	f000 fcc6 	bl	80034d4 <_sbrk_r>
 8002b48:	1c43      	adds	r3, r0, #1
 8002b4a:	d00a      	beq.n	8002b62 <sbrk_aligned+0x36>
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	1cc5      	adds	r5, r0, #3
 8002b50:	439d      	bics	r5, r3
 8002b52:	42a8      	cmp	r0, r5
 8002b54:	d007      	beq.n	8002b66 <sbrk_aligned+0x3a>
 8002b56:	1a29      	subs	r1, r5, r0
 8002b58:	0020      	movs	r0, r4
 8002b5a:	f000 fcbb 	bl	80034d4 <_sbrk_r>
 8002b5e:	3001      	adds	r0, #1
 8002b60:	d101      	bne.n	8002b66 <sbrk_aligned+0x3a>
 8002b62:	2501      	movs	r5, #1
 8002b64:	426d      	negs	r5, r5
 8002b66:	0028      	movs	r0, r5
 8002b68:	bd70      	pop	{r4, r5, r6, pc}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	200003e4 	.word	0x200003e4

08002b70 <_malloc_r>:
 8002b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b72:	2203      	movs	r2, #3
 8002b74:	1ccb      	adds	r3, r1, #3
 8002b76:	4393      	bics	r3, r2
 8002b78:	3308      	adds	r3, #8
 8002b7a:	0006      	movs	r6, r0
 8002b7c:	001f      	movs	r7, r3
 8002b7e:	2b0c      	cmp	r3, #12
 8002b80:	d238      	bcs.n	8002bf4 <_malloc_r+0x84>
 8002b82:	270c      	movs	r7, #12
 8002b84:	42b9      	cmp	r1, r7
 8002b86:	d837      	bhi.n	8002bf8 <_malloc_r+0x88>
 8002b88:	0030      	movs	r0, r6
 8002b8a:	f000 f873 	bl	8002c74 <__malloc_lock>
 8002b8e:	4b38      	ldr	r3, [pc, #224]	; (8002c70 <_malloc_r+0x100>)
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	001c      	movs	r4, r3
 8002b96:	2c00      	cmp	r4, #0
 8002b98:	d133      	bne.n	8002c02 <_malloc_r+0x92>
 8002b9a:	0039      	movs	r1, r7
 8002b9c:	0030      	movs	r0, r6
 8002b9e:	f7ff ffc5 	bl	8002b2c <sbrk_aligned>
 8002ba2:	0004      	movs	r4, r0
 8002ba4:	1c43      	adds	r3, r0, #1
 8002ba6:	d15e      	bne.n	8002c66 <_malloc_r+0xf6>
 8002ba8:	9b00      	ldr	r3, [sp, #0]
 8002baa:	681c      	ldr	r4, [r3, #0]
 8002bac:	0025      	movs	r5, r4
 8002bae:	2d00      	cmp	r5, #0
 8002bb0:	d14e      	bne.n	8002c50 <_malloc_r+0xe0>
 8002bb2:	2c00      	cmp	r4, #0
 8002bb4:	d051      	beq.n	8002c5a <_malloc_r+0xea>
 8002bb6:	6823      	ldr	r3, [r4, #0]
 8002bb8:	0029      	movs	r1, r5
 8002bba:	18e3      	adds	r3, r4, r3
 8002bbc:	0030      	movs	r0, r6
 8002bbe:	9301      	str	r3, [sp, #4]
 8002bc0:	f000 fc88 	bl	80034d4 <_sbrk_r>
 8002bc4:	9b01      	ldr	r3, [sp, #4]
 8002bc6:	4283      	cmp	r3, r0
 8002bc8:	d147      	bne.n	8002c5a <_malloc_r+0xea>
 8002bca:	6823      	ldr	r3, [r4, #0]
 8002bcc:	0030      	movs	r0, r6
 8002bce:	1aff      	subs	r7, r7, r3
 8002bd0:	0039      	movs	r1, r7
 8002bd2:	f7ff ffab 	bl	8002b2c <sbrk_aligned>
 8002bd6:	3001      	adds	r0, #1
 8002bd8:	d03f      	beq.n	8002c5a <_malloc_r+0xea>
 8002bda:	6823      	ldr	r3, [r4, #0]
 8002bdc:	19db      	adds	r3, r3, r7
 8002bde:	6023      	str	r3, [r4, #0]
 8002be0:	9b00      	ldr	r3, [sp, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d040      	beq.n	8002c6a <_malloc_r+0xfa>
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	42a2      	cmp	r2, r4
 8002bec:	d133      	bne.n	8002c56 <_malloc_r+0xe6>
 8002bee:	2200      	movs	r2, #0
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	e014      	b.n	8002c1e <_malloc_r+0xae>
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	dac5      	bge.n	8002b84 <_malloc_r+0x14>
 8002bf8:	230c      	movs	r3, #12
 8002bfa:	2500      	movs	r5, #0
 8002bfc:	6033      	str	r3, [r6, #0]
 8002bfe:	0028      	movs	r0, r5
 8002c00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002c02:	6821      	ldr	r1, [r4, #0]
 8002c04:	1bc9      	subs	r1, r1, r7
 8002c06:	d420      	bmi.n	8002c4a <_malloc_r+0xda>
 8002c08:	290b      	cmp	r1, #11
 8002c0a:	d918      	bls.n	8002c3e <_malloc_r+0xce>
 8002c0c:	19e2      	adds	r2, r4, r7
 8002c0e:	6027      	str	r7, [r4, #0]
 8002c10:	42a3      	cmp	r3, r4
 8002c12:	d112      	bne.n	8002c3a <_malloc_r+0xca>
 8002c14:	9b00      	ldr	r3, [sp, #0]
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	6863      	ldr	r3, [r4, #4]
 8002c1a:	6011      	str	r1, [r2, #0]
 8002c1c:	6053      	str	r3, [r2, #4]
 8002c1e:	0030      	movs	r0, r6
 8002c20:	0025      	movs	r5, r4
 8002c22:	f000 f82f 	bl	8002c84 <__malloc_unlock>
 8002c26:	2207      	movs	r2, #7
 8002c28:	350b      	adds	r5, #11
 8002c2a:	1d23      	adds	r3, r4, #4
 8002c2c:	4395      	bics	r5, r2
 8002c2e:	1aea      	subs	r2, r5, r3
 8002c30:	429d      	cmp	r5, r3
 8002c32:	d0e4      	beq.n	8002bfe <_malloc_r+0x8e>
 8002c34:	1b5b      	subs	r3, r3, r5
 8002c36:	50a3      	str	r3, [r4, r2]
 8002c38:	e7e1      	b.n	8002bfe <_malloc_r+0x8e>
 8002c3a:	605a      	str	r2, [r3, #4]
 8002c3c:	e7ec      	b.n	8002c18 <_malloc_r+0xa8>
 8002c3e:	6862      	ldr	r2, [r4, #4]
 8002c40:	42a3      	cmp	r3, r4
 8002c42:	d1d5      	bne.n	8002bf0 <_malloc_r+0x80>
 8002c44:	9b00      	ldr	r3, [sp, #0]
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	e7e9      	b.n	8002c1e <_malloc_r+0xae>
 8002c4a:	0023      	movs	r3, r4
 8002c4c:	6864      	ldr	r4, [r4, #4]
 8002c4e:	e7a2      	b.n	8002b96 <_malloc_r+0x26>
 8002c50:	002c      	movs	r4, r5
 8002c52:	686d      	ldr	r5, [r5, #4]
 8002c54:	e7ab      	b.n	8002bae <_malloc_r+0x3e>
 8002c56:	0013      	movs	r3, r2
 8002c58:	e7c4      	b.n	8002be4 <_malloc_r+0x74>
 8002c5a:	230c      	movs	r3, #12
 8002c5c:	0030      	movs	r0, r6
 8002c5e:	6033      	str	r3, [r6, #0]
 8002c60:	f000 f810 	bl	8002c84 <__malloc_unlock>
 8002c64:	e7cb      	b.n	8002bfe <_malloc_r+0x8e>
 8002c66:	6027      	str	r7, [r4, #0]
 8002c68:	e7d9      	b.n	8002c1e <_malloc_r+0xae>
 8002c6a:	605b      	str	r3, [r3, #4]
 8002c6c:	deff      	udf	#255	; 0xff
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	200003e0 	.word	0x200003e0

08002c74 <__malloc_lock>:
 8002c74:	b510      	push	{r4, lr}
 8002c76:	4802      	ldr	r0, [pc, #8]	; (8002c80 <__malloc_lock+0xc>)
 8002c78:	f7ff ff0c 	bl	8002a94 <__retarget_lock_acquire_recursive>
 8002c7c:	bd10      	pop	{r4, pc}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	200003dc 	.word	0x200003dc

08002c84 <__malloc_unlock>:
 8002c84:	b510      	push	{r4, lr}
 8002c86:	4802      	ldr	r0, [pc, #8]	; (8002c90 <__malloc_unlock+0xc>)
 8002c88:	f7ff ff05 	bl	8002a96 <__retarget_lock_release_recursive>
 8002c8c:	bd10      	pop	{r4, pc}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	200003dc 	.word	0x200003dc

08002c94 <__sfputc_r>:
 8002c94:	6893      	ldr	r3, [r2, #8]
 8002c96:	b510      	push	{r4, lr}
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	6093      	str	r3, [r2, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	da04      	bge.n	8002caa <__sfputc_r+0x16>
 8002ca0:	6994      	ldr	r4, [r2, #24]
 8002ca2:	42a3      	cmp	r3, r4
 8002ca4:	db07      	blt.n	8002cb6 <__sfputc_r+0x22>
 8002ca6:	290a      	cmp	r1, #10
 8002ca8:	d005      	beq.n	8002cb6 <__sfputc_r+0x22>
 8002caa:	6813      	ldr	r3, [r2, #0]
 8002cac:	1c58      	adds	r0, r3, #1
 8002cae:	6010      	str	r0, [r2, #0]
 8002cb0:	7019      	strb	r1, [r3, #0]
 8002cb2:	0008      	movs	r0, r1
 8002cb4:	bd10      	pop	{r4, pc}
 8002cb6:	f000 fb66 	bl	8003386 <__swbuf_r>
 8002cba:	0001      	movs	r1, r0
 8002cbc:	e7f9      	b.n	8002cb2 <__sfputc_r+0x1e>

08002cbe <__sfputs_r>:
 8002cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc0:	0006      	movs	r6, r0
 8002cc2:	000f      	movs	r7, r1
 8002cc4:	0014      	movs	r4, r2
 8002cc6:	18d5      	adds	r5, r2, r3
 8002cc8:	42ac      	cmp	r4, r5
 8002cca:	d101      	bne.n	8002cd0 <__sfputs_r+0x12>
 8002ccc:	2000      	movs	r0, #0
 8002cce:	e007      	b.n	8002ce0 <__sfputs_r+0x22>
 8002cd0:	7821      	ldrb	r1, [r4, #0]
 8002cd2:	003a      	movs	r2, r7
 8002cd4:	0030      	movs	r0, r6
 8002cd6:	f7ff ffdd 	bl	8002c94 <__sfputc_r>
 8002cda:	3401      	adds	r4, #1
 8002cdc:	1c43      	adds	r3, r0, #1
 8002cde:	d1f3      	bne.n	8002cc8 <__sfputs_r+0xa>
 8002ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ce4 <_vfiprintf_r>:
 8002ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ce6:	b0a1      	sub	sp, #132	; 0x84
 8002ce8:	000f      	movs	r7, r1
 8002cea:	0015      	movs	r5, r2
 8002cec:	001e      	movs	r6, r3
 8002cee:	9003      	str	r0, [sp, #12]
 8002cf0:	2800      	cmp	r0, #0
 8002cf2:	d004      	beq.n	8002cfe <_vfiprintf_r+0x1a>
 8002cf4:	6a03      	ldr	r3, [r0, #32]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <_vfiprintf_r+0x1a>
 8002cfa:	f7ff fdbb 	bl	8002874 <__sinit>
 8002cfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d00:	07db      	lsls	r3, r3, #31
 8002d02:	d405      	bmi.n	8002d10 <_vfiprintf_r+0x2c>
 8002d04:	89bb      	ldrh	r3, [r7, #12]
 8002d06:	059b      	lsls	r3, r3, #22
 8002d08:	d402      	bmi.n	8002d10 <_vfiprintf_r+0x2c>
 8002d0a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002d0c:	f7ff fec2 	bl	8002a94 <__retarget_lock_acquire_recursive>
 8002d10:	89bb      	ldrh	r3, [r7, #12]
 8002d12:	071b      	lsls	r3, r3, #28
 8002d14:	d502      	bpl.n	8002d1c <_vfiprintf_r+0x38>
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d113      	bne.n	8002d44 <_vfiprintf_r+0x60>
 8002d1c:	0039      	movs	r1, r7
 8002d1e:	9803      	ldr	r0, [sp, #12]
 8002d20:	f000 fb74 	bl	800340c <__swsetup_r>
 8002d24:	2800      	cmp	r0, #0
 8002d26:	d00d      	beq.n	8002d44 <_vfiprintf_r+0x60>
 8002d28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d2a:	07db      	lsls	r3, r3, #31
 8002d2c:	d503      	bpl.n	8002d36 <_vfiprintf_r+0x52>
 8002d2e:	2001      	movs	r0, #1
 8002d30:	4240      	negs	r0, r0
 8002d32:	b021      	add	sp, #132	; 0x84
 8002d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d36:	89bb      	ldrh	r3, [r7, #12]
 8002d38:	059b      	lsls	r3, r3, #22
 8002d3a:	d4f8      	bmi.n	8002d2e <_vfiprintf_r+0x4a>
 8002d3c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002d3e:	f7ff feaa 	bl	8002a96 <__retarget_lock_release_recursive>
 8002d42:	e7f4      	b.n	8002d2e <_vfiprintf_r+0x4a>
 8002d44:	2300      	movs	r3, #0
 8002d46:	ac08      	add	r4, sp, #32
 8002d48:	6163      	str	r3, [r4, #20]
 8002d4a:	3320      	adds	r3, #32
 8002d4c:	7663      	strb	r3, [r4, #25]
 8002d4e:	3310      	adds	r3, #16
 8002d50:	76a3      	strb	r3, [r4, #26]
 8002d52:	9607      	str	r6, [sp, #28]
 8002d54:	002e      	movs	r6, r5
 8002d56:	7833      	ldrb	r3, [r6, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <_vfiprintf_r+0x7c>
 8002d5c:	2b25      	cmp	r3, #37	; 0x25
 8002d5e:	d148      	bne.n	8002df2 <_vfiprintf_r+0x10e>
 8002d60:	1b73      	subs	r3, r6, r5
 8002d62:	9305      	str	r3, [sp, #20]
 8002d64:	42ae      	cmp	r6, r5
 8002d66:	d00b      	beq.n	8002d80 <_vfiprintf_r+0x9c>
 8002d68:	002a      	movs	r2, r5
 8002d6a:	0039      	movs	r1, r7
 8002d6c:	9803      	ldr	r0, [sp, #12]
 8002d6e:	f7ff ffa6 	bl	8002cbe <__sfputs_r>
 8002d72:	3001      	adds	r0, #1
 8002d74:	d100      	bne.n	8002d78 <_vfiprintf_r+0x94>
 8002d76:	e0af      	b.n	8002ed8 <_vfiprintf_r+0x1f4>
 8002d78:	6963      	ldr	r3, [r4, #20]
 8002d7a:	9a05      	ldr	r2, [sp, #20]
 8002d7c:	189b      	adds	r3, r3, r2
 8002d7e:	6163      	str	r3, [r4, #20]
 8002d80:	7833      	ldrb	r3, [r6, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d100      	bne.n	8002d88 <_vfiprintf_r+0xa4>
 8002d86:	e0a7      	b.n	8002ed8 <_vfiprintf_r+0x1f4>
 8002d88:	2201      	movs	r2, #1
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	4252      	negs	r2, r2
 8002d8e:	6062      	str	r2, [r4, #4]
 8002d90:	a904      	add	r1, sp, #16
 8002d92:	3254      	adds	r2, #84	; 0x54
 8002d94:	1852      	adds	r2, r2, r1
 8002d96:	1c75      	adds	r5, r6, #1
 8002d98:	6023      	str	r3, [r4, #0]
 8002d9a:	60e3      	str	r3, [r4, #12]
 8002d9c:	60a3      	str	r3, [r4, #8]
 8002d9e:	7013      	strb	r3, [r2, #0]
 8002da0:	65a3      	str	r3, [r4, #88]	; 0x58
 8002da2:	4b59      	ldr	r3, [pc, #356]	; (8002f08 <_vfiprintf_r+0x224>)
 8002da4:	2205      	movs	r2, #5
 8002da6:	0018      	movs	r0, r3
 8002da8:	7829      	ldrb	r1, [r5, #0]
 8002daa:	9305      	str	r3, [sp, #20]
 8002dac:	f000 fba4 	bl	80034f8 <memchr>
 8002db0:	1c6e      	adds	r6, r5, #1
 8002db2:	2800      	cmp	r0, #0
 8002db4:	d11f      	bne.n	8002df6 <_vfiprintf_r+0x112>
 8002db6:	6822      	ldr	r2, [r4, #0]
 8002db8:	06d3      	lsls	r3, r2, #27
 8002dba:	d504      	bpl.n	8002dc6 <_vfiprintf_r+0xe2>
 8002dbc:	2353      	movs	r3, #83	; 0x53
 8002dbe:	a904      	add	r1, sp, #16
 8002dc0:	185b      	adds	r3, r3, r1
 8002dc2:	2120      	movs	r1, #32
 8002dc4:	7019      	strb	r1, [r3, #0]
 8002dc6:	0713      	lsls	r3, r2, #28
 8002dc8:	d504      	bpl.n	8002dd4 <_vfiprintf_r+0xf0>
 8002dca:	2353      	movs	r3, #83	; 0x53
 8002dcc:	a904      	add	r1, sp, #16
 8002dce:	185b      	adds	r3, r3, r1
 8002dd0:	212b      	movs	r1, #43	; 0x2b
 8002dd2:	7019      	strb	r1, [r3, #0]
 8002dd4:	782b      	ldrb	r3, [r5, #0]
 8002dd6:	2b2a      	cmp	r3, #42	; 0x2a
 8002dd8:	d016      	beq.n	8002e08 <_vfiprintf_r+0x124>
 8002dda:	002e      	movs	r6, r5
 8002ddc:	2100      	movs	r1, #0
 8002dde:	200a      	movs	r0, #10
 8002de0:	68e3      	ldr	r3, [r4, #12]
 8002de2:	7832      	ldrb	r2, [r6, #0]
 8002de4:	1c75      	adds	r5, r6, #1
 8002de6:	3a30      	subs	r2, #48	; 0x30
 8002de8:	2a09      	cmp	r2, #9
 8002dea:	d94e      	bls.n	8002e8a <_vfiprintf_r+0x1a6>
 8002dec:	2900      	cmp	r1, #0
 8002dee:	d111      	bne.n	8002e14 <_vfiprintf_r+0x130>
 8002df0:	e017      	b.n	8002e22 <_vfiprintf_r+0x13e>
 8002df2:	3601      	adds	r6, #1
 8002df4:	e7af      	b.n	8002d56 <_vfiprintf_r+0x72>
 8002df6:	9b05      	ldr	r3, [sp, #20]
 8002df8:	6822      	ldr	r2, [r4, #0]
 8002dfa:	1ac0      	subs	r0, r0, r3
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	4083      	lsls	r3, r0
 8002e00:	4313      	orrs	r3, r2
 8002e02:	0035      	movs	r5, r6
 8002e04:	6023      	str	r3, [r4, #0]
 8002e06:	e7cc      	b.n	8002da2 <_vfiprintf_r+0xbe>
 8002e08:	9b07      	ldr	r3, [sp, #28]
 8002e0a:	1d19      	adds	r1, r3, #4
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	9107      	str	r1, [sp, #28]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	db01      	blt.n	8002e18 <_vfiprintf_r+0x134>
 8002e14:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e16:	e004      	b.n	8002e22 <_vfiprintf_r+0x13e>
 8002e18:	425b      	negs	r3, r3
 8002e1a:	60e3      	str	r3, [r4, #12]
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	6023      	str	r3, [r4, #0]
 8002e22:	7833      	ldrb	r3, [r6, #0]
 8002e24:	2b2e      	cmp	r3, #46	; 0x2e
 8002e26:	d10a      	bne.n	8002e3e <_vfiprintf_r+0x15a>
 8002e28:	7873      	ldrb	r3, [r6, #1]
 8002e2a:	2b2a      	cmp	r3, #42	; 0x2a
 8002e2c:	d135      	bne.n	8002e9a <_vfiprintf_r+0x1b6>
 8002e2e:	9b07      	ldr	r3, [sp, #28]
 8002e30:	3602      	adds	r6, #2
 8002e32:	1d1a      	adds	r2, r3, #4
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	9207      	str	r2, [sp, #28]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	db2b      	blt.n	8002e94 <_vfiprintf_r+0x1b0>
 8002e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8002e3e:	4d33      	ldr	r5, [pc, #204]	; (8002f0c <_vfiprintf_r+0x228>)
 8002e40:	2203      	movs	r2, #3
 8002e42:	0028      	movs	r0, r5
 8002e44:	7831      	ldrb	r1, [r6, #0]
 8002e46:	f000 fb57 	bl	80034f8 <memchr>
 8002e4a:	2800      	cmp	r0, #0
 8002e4c:	d006      	beq.n	8002e5c <_vfiprintf_r+0x178>
 8002e4e:	2340      	movs	r3, #64	; 0x40
 8002e50:	1b40      	subs	r0, r0, r5
 8002e52:	4083      	lsls	r3, r0
 8002e54:	6822      	ldr	r2, [r4, #0]
 8002e56:	3601      	adds	r6, #1
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	6023      	str	r3, [r4, #0]
 8002e5c:	7831      	ldrb	r1, [r6, #0]
 8002e5e:	2206      	movs	r2, #6
 8002e60:	482b      	ldr	r0, [pc, #172]	; (8002f10 <_vfiprintf_r+0x22c>)
 8002e62:	1c75      	adds	r5, r6, #1
 8002e64:	7621      	strb	r1, [r4, #24]
 8002e66:	f000 fb47 	bl	80034f8 <memchr>
 8002e6a:	2800      	cmp	r0, #0
 8002e6c:	d043      	beq.n	8002ef6 <_vfiprintf_r+0x212>
 8002e6e:	4b29      	ldr	r3, [pc, #164]	; (8002f14 <_vfiprintf_r+0x230>)
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d125      	bne.n	8002ec0 <_vfiprintf_r+0x1dc>
 8002e74:	2207      	movs	r2, #7
 8002e76:	9b07      	ldr	r3, [sp, #28]
 8002e78:	3307      	adds	r3, #7
 8002e7a:	4393      	bics	r3, r2
 8002e7c:	3308      	adds	r3, #8
 8002e7e:	9307      	str	r3, [sp, #28]
 8002e80:	6963      	ldr	r3, [r4, #20]
 8002e82:	9a04      	ldr	r2, [sp, #16]
 8002e84:	189b      	adds	r3, r3, r2
 8002e86:	6163      	str	r3, [r4, #20]
 8002e88:	e764      	b.n	8002d54 <_vfiprintf_r+0x70>
 8002e8a:	4343      	muls	r3, r0
 8002e8c:	002e      	movs	r6, r5
 8002e8e:	2101      	movs	r1, #1
 8002e90:	189b      	adds	r3, r3, r2
 8002e92:	e7a6      	b.n	8002de2 <_vfiprintf_r+0xfe>
 8002e94:	2301      	movs	r3, #1
 8002e96:	425b      	negs	r3, r3
 8002e98:	e7d0      	b.n	8002e3c <_vfiprintf_r+0x158>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	200a      	movs	r0, #10
 8002e9e:	001a      	movs	r2, r3
 8002ea0:	3601      	adds	r6, #1
 8002ea2:	6063      	str	r3, [r4, #4]
 8002ea4:	7831      	ldrb	r1, [r6, #0]
 8002ea6:	1c75      	adds	r5, r6, #1
 8002ea8:	3930      	subs	r1, #48	; 0x30
 8002eaa:	2909      	cmp	r1, #9
 8002eac:	d903      	bls.n	8002eb6 <_vfiprintf_r+0x1d2>
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0c5      	beq.n	8002e3e <_vfiprintf_r+0x15a>
 8002eb2:	9209      	str	r2, [sp, #36]	; 0x24
 8002eb4:	e7c3      	b.n	8002e3e <_vfiprintf_r+0x15a>
 8002eb6:	4342      	muls	r2, r0
 8002eb8:	002e      	movs	r6, r5
 8002eba:	2301      	movs	r3, #1
 8002ebc:	1852      	adds	r2, r2, r1
 8002ebe:	e7f1      	b.n	8002ea4 <_vfiprintf_r+0x1c0>
 8002ec0:	aa07      	add	r2, sp, #28
 8002ec2:	9200      	str	r2, [sp, #0]
 8002ec4:	0021      	movs	r1, r4
 8002ec6:	003a      	movs	r2, r7
 8002ec8:	4b13      	ldr	r3, [pc, #76]	; (8002f18 <_vfiprintf_r+0x234>)
 8002eca:	9803      	ldr	r0, [sp, #12]
 8002ecc:	e000      	b.n	8002ed0 <_vfiprintf_r+0x1ec>
 8002ece:	bf00      	nop
 8002ed0:	9004      	str	r0, [sp, #16]
 8002ed2:	9b04      	ldr	r3, [sp, #16]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	d1d3      	bne.n	8002e80 <_vfiprintf_r+0x19c>
 8002ed8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002eda:	07db      	lsls	r3, r3, #31
 8002edc:	d405      	bmi.n	8002eea <_vfiprintf_r+0x206>
 8002ede:	89bb      	ldrh	r3, [r7, #12]
 8002ee0:	059b      	lsls	r3, r3, #22
 8002ee2:	d402      	bmi.n	8002eea <_vfiprintf_r+0x206>
 8002ee4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002ee6:	f7ff fdd6 	bl	8002a96 <__retarget_lock_release_recursive>
 8002eea:	89bb      	ldrh	r3, [r7, #12]
 8002eec:	065b      	lsls	r3, r3, #25
 8002eee:	d500      	bpl.n	8002ef2 <_vfiprintf_r+0x20e>
 8002ef0:	e71d      	b.n	8002d2e <_vfiprintf_r+0x4a>
 8002ef2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002ef4:	e71d      	b.n	8002d32 <_vfiprintf_r+0x4e>
 8002ef6:	aa07      	add	r2, sp, #28
 8002ef8:	9200      	str	r2, [sp, #0]
 8002efa:	0021      	movs	r1, r4
 8002efc:	003a      	movs	r2, r7
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <_vfiprintf_r+0x234>)
 8002f00:	9803      	ldr	r0, [sp, #12]
 8002f02:	f000 f87b 	bl	8002ffc <_printf_i>
 8002f06:	e7e3      	b.n	8002ed0 <_vfiprintf_r+0x1ec>
 8002f08:	08003684 	.word	0x08003684
 8002f0c:	0800368a 	.word	0x0800368a
 8002f10:	0800368e 	.word	0x0800368e
 8002f14:	00000000 	.word	0x00000000
 8002f18:	08002cbf 	.word	0x08002cbf

08002f1c <_printf_common>:
 8002f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f1e:	0016      	movs	r6, r2
 8002f20:	9301      	str	r3, [sp, #4]
 8002f22:	688a      	ldr	r2, [r1, #8]
 8002f24:	690b      	ldr	r3, [r1, #16]
 8002f26:	000c      	movs	r4, r1
 8002f28:	9000      	str	r0, [sp, #0]
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	da00      	bge.n	8002f30 <_printf_common+0x14>
 8002f2e:	0013      	movs	r3, r2
 8002f30:	0022      	movs	r2, r4
 8002f32:	6033      	str	r3, [r6, #0]
 8002f34:	3243      	adds	r2, #67	; 0x43
 8002f36:	7812      	ldrb	r2, [r2, #0]
 8002f38:	2a00      	cmp	r2, #0
 8002f3a:	d001      	beq.n	8002f40 <_printf_common+0x24>
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	6033      	str	r3, [r6, #0]
 8002f40:	6823      	ldr	r3, [r4, #0]
 8002f42:	069b      	lsls	r3, r3, #26
 8002f44:	d502      	bpl.n	8002f4c <_printf_common+0x30>
 8002f46:	6833      	ldr	r3, [r6, #0]
 8002f48:	3302      	adds	r3, #2
 8002f4a:	6033      	str	r3, [r6, #0]
 8002f4c:	6822      	ldr	r2, [r4, #0]
 8002f4e:	2306      	movs	r3, #6
 8002f50:	0015      	movs	r5, r2
 8002f52:	401d      	ands	r5, r3
 8002f54:	421a      	tst	r2, r3
 8002f56:	d027      	beq.n	8002fa8 <_printf_common+0x8c>
 8002f58:	0023      	movs	r3, r4
 8002f5a:	3343      	adds	r3, #67	; 0x43
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	1e5a      	subs	r2, r3, #1
 8002f60:	4193      	sbcs	r3, r2
 8002f62:	6822      	ldr	r2, [r4, #0]
 8002f64:	0692      	lsls	r2, r2, #26
 8002f66:	d430      	bmi.n	8002fca <_printf_common+0xae>
 8002f68:	0022      	movs	r2, r4
 8002f6a:	9901      	ldr	r1, [sp, #4]
 8002f6c:	9800      	ldr	r0, [sp, #0]
 8002f6e:	9d08      	ldr	r5, [sp, #32]
 8002f70:	3243      	adds	r2, #67	; 0x43
 8002f72:	47a8      	blx	r5
 8002f74:	3001      	adds	r0, #1
 8002f76:	d025      	beq.n	8002fc4 <_printf_common+0xa8>
 8002f78:	2206      	movs	r2, #6
 8002f7a:	6823      	ldr	r3, [r4, #0]
 8002f7c:	2500      	movs	r5, #0
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d105      	bne.n	8002f90 <_printf_common+0x74>
 8002f84:	6833      	ldr	r3, [r6, #0]
 8002f86:	68e5      	ldr	r5, [r4, #12]
 8002f88:	1aed      	subs	r5, r5, r3
 8002f8a:	43eb      	mvns	r3, r5
 8002f8c:	17db      	asrs	r3, r3, #31
 8002f8e:	401d      	ands	r5, r3
 8002f90:	68a3      	ldr	r3, [r4, #8]
 8002f92:	6922      	ldr	r2, [r4, #16]
 8002f94:	4293      	cmp	r3, r2
 8002f96:	dd01      	ble.n	8002f9c <_printf_common+0x80>
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	18ed      	adds	r5, r5, r3
 8002f9c:	2600      	movs	r6, #0
 8002f9e:	42b5      	cmp	r5, r6
 8002fa0:	d120      	bne.n	8002fe4 <_printf_common+0xc8>
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	e010      	b.n	8002fc8 <_printf_common+0xac>
 8002fa6:	3501      	adds	r5, #1
 8002fa8:	68e3      	ldr	r3, [r4, #12]
 8002faa:	6832      	ldr	r2, [r6, #0]
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	42ab      	cmp	r3, r5
 8002fb0:	ddd2      	ble.n	8002f58 <_printf_common+0x3c>
 8002fb2:	0022      	movs	r2, r4
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	9901      	ldr	r1, [sp, #4]
 8002fb8:	9800      	ldr	r0, [sp, #0]
 8002fba:	9f08      	ldr	r7, [sp, #32]
 8002fbc:	3219      	adds	r2, #25
 8002fbe:	47b8      	blx	r7
 8002fc0:	3001      	adds	r0, #1
 8002fc2:	d1f0      	bne.n	8002fa6 <_printf_common+0x8a>
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	4240      	negs	r0, r0
 8002fc8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002fca:	2030      	movs	r0, #48	; 0x30
 8002fcc:	18e1      	adds	r1, r4, r3
 8002fce:	3143      	adds	r1, #67	; 0x43
 8002fd0:	7008      	strb	r0, [r1, #0]
 8002fd2:	0021      	movs	r1, r4
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	3145      	adds	r1, #69	; 0x45
 8002fd8:	7809      	ldrb	r1, [r1, #0]
 8002fda:	18a2      	adds	r2, r4, r2
 8002fdc:	3243      	adds	r2, #67	; 0x43
 8002fde:	3302      	adds	r3, #2
 8002fe0:	7011      	strb	r1, [r2, #0]
 8002fe2:	e7c1      	b.n	8002f68 <_printf_common+0x4c>
 8002fe4:	0022      	movs	r2, r4
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	9901      	ldr	r1, [sp, #4]
 8002fea:	9800      	ldr	r0, [sp, #0]
 8002fec:	9f08      	ldr	r7, [sp, #32]
 8002fee:	321a      	adds	r2, #26
 8002ff0:	47b8      	blx	r7
 8002ff2:	3001      	adds	r0, #1
 8002ff4:	d0e6      	beq.n	8002fc4 <_printf_common+0xa8>
 8002ff6:	3601      	adds	r6, #1
 8002ff8:	e7d1      	b.n	8002f9e <_printf_common+0x82>
	...

08002ffc <_printf_i>:
 8002ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ffe:	b08b      	sub	sp, #44	; 0x2c
 8003000:	9206      	str	r2, [sp, #24]
 8003002:	000a      	movs	r2, r1
 8003004:	3243      	adds	r2, #67	; 0x43
 8003006:	9307      	str	r3, [sp, #28]
 8003008:	9005      	str	r0, [sp, #20]
 800300a:	9204      	str	r2, [sp, #16]
 800300c:	7e0a      	ldrb	r2, [r1, #24]
 800300e:	000c      	movs	r4, r1
 8003010:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003012:	2a78      	cmp	r2, #120	; 0x78
 8003014:	d809      	bhi.n	800302a <_printf_i+0x2e>
 8003016:	2a62      	cmp	r2, #98	; 0x62
 8003018:	d80b      	bhi.n	8003032 <_printf_i+0x36>
 800301a:	2a00      	cmp	r2, #0
 800301c:	d100      	bne.n	8003020 <_printf_i+0x24>
 800301e:	e0be      	b.n	800319e <_printf_i+0x1a2>
 8003020:	497c      	ldr	r1, [pc, #496]	; (8003214 <_printf_i+0x218>)
 8003022:	9103      	str	r1, [sp, #12]
 8003024:	2a58      	cmp	r2, #88	; 0x58
 8003026:	d100      	bne.n	800302a <_printf_i+0x2e>
 8003028:	e093      	b.n	8003152 <_printf_i+0x156>
 800302a:	0026      	movs	r6, r4
 800302c:	3642      	adds	r6, #66	; 0x42
 800302e:	7032      	strb	r2, [r6, #0]
 8003030:	e022      	b.n	8003078 <_printf_i+0x7c>
 8003032:	0010      	movs	r0, r2
 8003034:	3863      	subs	r0, #99	; 0x63
 8003036:	2815      	cmp	r0, #21
 8003038:	d8f7      	bhi.n	800302a <_printf_i+0x2e>
 800303a:	f7fd f865 	bl	8000108 <__gnu_thumb1_case_shi>
 800303e:	0016      	.short	0x0016
 8003040:	fff6001f 	.word	0xfff6001f
 8003044:	fff6fff6 	.word	0xfff6fff6
 8003048:	001ffff6 	.word	0x001ffff6
 800304c:	fff6fff6 	.word	0xfff6fff6
 8003050:	fff6fff6 	.word	0xfff6fff6
 8003054:	003600a3 	.word	0x003600a3
 8003058:	fff60083 	.word	0xfff60083
 800305c:	00b4fff6 	.word	0x00b4fff6
 8003060:	0036fff6 	.word	0x0036fff6
 8003064:	fff6fff6 	.word	0xfff6fff6
 8003068:	0087      	.short	0x0087
 800306a:	0026      	movs	r6, r4
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	3642      	adds	r6, #66	; 0x42
 8003070:	1d11      	adds	r1, r2, #4
 8003072:	6019      	str	r1, [r3, #0]
 8003074:	6813      	ldr	r3, [r2, #0]
 8003076:	7033      	strb	r3, [r6, #0]
 8003078:	2301      	movs	r3, #1
 800307a:	e0a2      	b.n	80031c2 <_printf_i+0x1c6>
 800307c:	6818      	ldr	r0, [r3, #0]
 800307e:	6809      	ldr	r1, [r1, #0]
 8003080:	1d02      	adds	r2, r0, #4
 8003082:	060d      	lsls	r5, r1, #24
 8003084:	d50b      	bpl.n	800309e <_printf_i+0xa2>
 8003086:	6805      	ldr	r5, [r0, #0]
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	2d00      	cmp	r5, #0
 800308c:	da03      	bge.n	8003096 <_printf_i+0x9a>
 800308e:	232d      	movs	r3, #45	; 0x2d
 8003090:	9a04      	ldr	r2, [sp, #16]
 8003092:	426d      	negs	r5, r5
 8003094:	7013      	strb	r3, [r2, #0]
 8003096:	4b5f      	ldr	r3, [pc, #380]	; (8003214 <_printf_i+0x218>)
 8003098:	270a      	movs	r7, #10
 800309a:	9303      	str	r3, [sp, #12]
 800309c:	e01b      	b.n	80030d6 <_printf_i+0xda>
 800309e:	6805      	ldr	r5, [r0, #0]
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	0649      	lsls	r1, r1, #25
 80030a4:	d5f1      	bpl.n	800308a <_printf_i+0x8e>
 80030a6:	b22d      	sxth	r5, r5
 80030a8:	e7ef      	b.n	800308a <_printf_i+0x8e>
 80030aa:	680d      	ldr	r5, [r1, #0]
 80030ac:	6819      	ldr	r1, [r3, #0]
 80030ae:	1d08      	adds	r0, r1, #4
 80030b0:	6018      	str	r0, [r3, #0]
 80030b2:	062e      	lsls	r6, r5, #24
 80030b4:	d501      	bpl.n	80030ba <_printf_i+0xbe>
 80030b6:	680d      	ldr	r5, [r1, #0]
 80030b8:	e003      	b.n	80030c2 <_printf_i+0xc6>
 80030ba:	066d      	lsls	r5, r5, #25
 80030bc:	d5fb      	bpl.n	80030b6 <_printf_i+0xba>
 80030be:	680d      	ldr	r5, [r1, #0]
 80030c0:	b2ad      	uxth	r5, r5
 80030c2:	4b54      	ldr	r3, [pc, #336]	; (8003214 <_printf_i+0x218>)
 80030c4:	2708      	movs	r7, #8
 80030c6:	9303      	str	r3, [sp, #12]
 80030c8:	2a6f      	cmp	r2, #111	; 0x6f
 80030ca:	d000      	beq.n	80030ce <_printf_i+0xd2>
 80030cc:	3702      	adds	r7, #2
 80030ce:	0023      	movs	r3, r4
 80030d0:	2200      	movs	r2, #0
 80030d2:	3343      	adds	r3, #67	; 0x43
 80030d4:	701a      	strb	r2, [r3, #0]
 80030d6:	6863      	ldr	r3, [r4, #4]
 80030d8:	60a3      	str	r3, [r4, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	db03      	blt.n	80030e6 <_printf_i+0xea>
 80030de:	2104      	movs	r1, #4
 80030e0:	6822      	ldr	r2, [r4, #0]
 80030e2:	438a      	bics	r2, r1
 80030e4:	6022      	str	r2, [r4, #0]
 80030e6:	2d00      	cmp	r5, #0
 80030e8:	d102      	bne.n	80030f0 <_printf_i+0xf4>
 80030ea:	9e04      	ldr	r6, [sp, #16]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00c      	beq.n	800310a <_printf_i+0x10e>
 80030f0:	9e04      	ldr	r6, [sp, #16]
 80030f2:	0028      	movs	r0, r5
 80030f4:	0039      	movs	r1, r7
 80030f6:	f7fd f897 	bl	8000228 <__aeabi_uidivmod>
 80030fa:	9b03      	ldr	r3, [sp, #12]
 80030fc:	3e01      	subs	r6, #1
 80030fe:	5c5b      	ldrb	r3, [r3, r1]
 8003100:	7033      	strb	r3, [r6, #0]
 8003102:	002b      	movs	r3, r5
 8003104:	0005      	movs	r5, r0
 8003106:	429f      	cmp	r7, r3
 8003108:	d9f3      	bls.n	80030f2 <_printf_i+0xf6>
 800310a:	2f08      	cmp	r7, #8
 800310c:	d109      	bne.n	8003122 <_printf_i+0x126>
 800310e:	6823      	ldr	r3, [r4, #0]
 8003110:	07db      	lsls	r3, r3, #31
 8003112:	d506      	bpl.n	8003122 <_printf_i+0x126>
 8003114:	6862      	ldr	r2, [r4, #4]
 8003116:	6923      	ldr	r3, [r4, #16]
 8003118:	429a      	cmp	r2, r3
 800311a:	dc02      	bgt.n	8003122 <_printf_i+0x126>
 800311c:	2330      	movs	r3, #48	; 0x30
 800311e:	3e01      	subs	r6, #1
 8003120:	7033      	strb	r3, [r6, #0]
 8003122:	9b04      	ldr	r3, [sp, #16]
 8003124:	1b9b      	subs	r3, r3, r6
 8003126:	6123      	str	r3, [r4, #16]
 8003128:	9b07      	ldr	r3, [sp, #28]
 800312a:	0021      	movs	r1, r4
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	9805      	ldr	r0, [sp, #20]
 8003130:	9b06      	ldr	r3, [sp, #24]
 8003132:	aa09      	add	r2, sp, #36	; 0x24
 8003134:	f7ff fef2 	bl	8002f1c <_printf_common>
 8003138:	3001      	adds	r0, #1
 800313a:	d147      	bne.n	80031cc <_printf_i+0x1d0>
 800313c:	2001      	movs	r0, #1
 800313e:	4240      	negs	r0, r0
 8003140:	b00b      	add	sp, #44	; 0x2c
 8003142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003144:	2220      	movs	r2, #32
 8003146:	6809      	ldr	r1, [r1, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	6022      	str	r2, [r4, #0]
 800314c:	2278      	movs	r2, #120	; 0x78
 800314e:	4932      	ldr	r1, [pc, #200]	; (8003218 <_printf_i+0x21c>)
 8003150:	9103      	str	r1, [sp, #12]
 8003152:	0021      	movs	r1, r4
 8003154:	3145      	adds	r1, #69	; 0x45
 8003156:	700a      	strb	r2, [r1, #0]
 8003158:	6819      	ldr	r1, [r3, #0]
 800315a:	6822      	ldr	r2, [r4, #0]
 800315c:	c920      	ldmia	r1!, {r5}
 800315e:	0610      	lsls	r0, r2, #24
 8003160:	d402      	bmi.n	8003168 <_printf_i+0x16c>
 8003162:	0650      	lsls	r0, r2, #25
 8003164:	d500      	bpl.n	8003168 <_printf_i+0x16c>
 8003166:	b2ad      	uxth	r5, r5
 8003168:	6019      	str	r1, [r3, #0]
 800316a:	07d3      	lsls	r3, r2, #31
 800316c:	d502      	bpl.n	8003174 <_printf_i+0x178>
 800316e:	2320      	movs	r3, #32
 8003170:	4313      	orrs	r3, r2
 8003172:	6023      	str	r3, [r4, #0]
 8003174:	2710      	movs	r7, #16
 8003176:	2d00      	cmp	r5, #0
 8003178:	d1a9      	bne.n	80030ce <_printf_i+0xd2>
 800317a:	2220      	movs	r2, #32
 800317c:	6823      	ldr	r3, [r4, #0]
 800317e:	4393      	bics	r3, r2
 8003180:	6023      	str	r3, [r4, #0]
 8003182:	e7a4      	b.n	80030ce <_printf_i+0xd2>
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	680d      	ldr	r5, [r1, #0]
 8003188:	1d10      	adds	r0, r2, #4
 800318a:	6949      	ldr	r1, [r1, #20]
 800318c:	6018      	str	r0, [r3, #0]
 800318e:	6813      	ldr	r3, [r2, #0]
 8003190:	062e      	lsls	r6, r5, #24
 8003192:	d501      	bpl.n	8003198 <_printf_i+0x19c>
 8003194:	6019      	str	r1, [r3, #0]
 8003196:	e002      	b.n	800319e <_printf_i+0x1a2>
 8003198:	066d      	lsls	r5, r5, #25
 800319a:	d5fb      	bpl.n	8003194 <_printf_i+0x198>
 800319c:	8019      	strh	r1, [r3, #0]
 800319e:	2300      	movs	r3, #0
 80031a0:	9e04      	ldr	r6, [sp, #16]
 80031a2:	6123      	str	r3, [r4, #16]
 80031a4:	e7c0      	b.n	8003128 <_printf_i+0x12c>
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	1d11      	adds	r1, r2, #4
 80031aa:	6019      	str	r1, [r3, #0]
 80031ac:	6816      	ldr	r6, [r2, #0]
 80031ae:	2100      	movs	r1, #0
 80031b0:	0030      	movs	r0, r6
 80031b2:	6862      	ldr	r2, [r4, #4]
 80031b4:	f000 f9a0 	bl	80034f8 <memchr>
 80031b8:	2800      	cmp	r0, #0
 80031ba:	d001      	beq.n	80031c0 <_printf_i+0x1c4>
 80031bc:	1b80      	subs	r0, r0, r6
 80031be:	6060      	str	r0, [r4, #4]
 80031c0:	6863      	ldr	r3, [r4, #4]
 80031c2:	6123      	str	r3, [r4, #16]
 80031c4:	2300      	movs	r3, #0
 80031c6:	9a04      	ldr	r2, [sp, #16]
 80031c8:	7013      	strb	r3, [r2, #0]
 80031ca:	e7ad      	b.n	8003128 <_printf_i+0x12c>
 80031cc:	0032      	movs	r2, r6
 80031ce:	6923      	ldr	r3, [r4, #16]
 80031d0:	9906      	ldr	r1, [sp, #24]
 80031d2:	9805      	ldr	r0, [sp, #20]
 80031d4:	9d07      	ldr	r5, [sp, #28]
 80031d6:	47a8      	blx	r5
 80031d8:	3001      	adds	r0, #1
 80031da:	d0af      	beq.n	800313c <_printf_i+0x140>
 80031dc:	6823      	ldr	r3, [r4, #0]
 80031de:	079b      	lsls	r3, r3, #30
 80031e0:	d415      	bmi.n	800320e <_printf_i+0x212>
 80031e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031e4:	68e0      	ldr	r0, [r4, #12]
 80031e6:	4298      	cmp	r0, r3
 80031e8:	daaa      	bge.n	8003140 <_printf_i+0x144>
 80031ea:	0018      	movs	r0, r3
 80031ec:	e7a8      	b.n	8003140 <_printf_i+0x144>
 80031ee:	0022      	movs	r2, r4
 80031f0:	2301      	movs	r3, #1
 80031f2:	9906      	ldr	r1, [sp, #24]
 80031f4:	9805      	ldr	r0, [sp, #20]
 80031f6:	9e07      	ldr	r6, [sp, #28]
 80031f8:	3219      	adds	r2, #25
 80031fa:	47b0      	blx	r6
 80031fc:	3001      	adds	r0, #1
 80031fe:	d09d      	beq.n	800313c <_printf_i+0x140>
 8003200:	3501      	adds	r5, #1
 8003202:	68e3      	ldr	r3, [r4, #12]
 8003204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	42ab      	cmp	r3, r5
 800320a:	dcf0      	bgt.n	80031ee <_printf_i+0x1f2>
 800320c:	e7e9      	b.n	80031e2 <_printf_i+0x1e6>
 800320e:	2500      	movs	r5, #0
 8003210:	e7f7      	b.n	8003202 <_printf_i+0x206>
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	08003695 	.word	0x08003695
 8003218:	080036a6 	.word	0x080036a6

0800321c <__sflush_r>:
 800321c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800321e:	898b      	ldrh	r3, [r1, #12]
 8003220:	0005      	movs	r5, r0
 8003222:	000c      	movs	r4, r1
 8003224:	071a      	lsls	r2, r3, #28
 8003226:	d45c      	bmi.n	80032e2 <__sflush_r+0xc6>
 8003228:	684a      	ldr	r2, [r1, #4]
 800322a:	2a00      	cmp	r2, #0
 800322c:	dc04      	bgt.n	8003238 <__sflush_r+0x1c>
 800322e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003230:	2a00      	cmp	r2, #0
 8003232:	dc01      	bgt.n	8003238 <__sflush_r+0x1c>
 8003234:	2000      	movs	r0, #0
 8003236:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003238:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800323a:	2f00      	cmp	r7, #0
 800323c:	d0fa      	beq.n	8003234 <__sflush_r+0x18>
 800323e:	2200      	movs	r2, #0
 8003240:	2080      	movs	r0, #128	; 0x80
 8003242:	682e      	ldr	r6, [r5, #0]
 8003244:	602a      	str	r2, [r5, #0]
 8003246:	001a      	movs	r2, r3
 8003248:	0140      	lsls	r0, r0, #5
 800324a:	6a21      	ldr	r1, [r4, #32]
 800324c:	4002      	ands	r2, r0
 800324e:	4203      	tst	r3, r0
 8003250:	d034      	beq.n	80032bc <__sflush_r+0xa0>
 8003252:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003254:	89a3      	ldrh	r3, [r4, #12]
 8003256:	075b      	lsls	r3, r3, #29
 8003258:	d506      	bpl.n	8003268 <__sflush_r+0x4c>
 800325a:	6863      	ldr	r3, [r4, #4]
 800325c:	1ac0      	subs	r0, r0, r3
 800325e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <__sflush_r+0x4c>
 8003264:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003266:	1ac0      	subs	r0, r0, r3
 8003268:	0002      	movs	r2, r0
 800326a:	2300      	movs	r3, #0
 800326c:	0028      	movs	r0, r5
 800326e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003270:	6a21      	ldr	r1, [r4, #32]
 8003272:	47b8      	blx	r7
 8003274:	89a2      	ldrh	r2, [r4, #12]
 8003276:	1c43      	adds	r3, r0, #1
 8003278:	d106      	bne.n	8003288 <__sflush_r+0x6c>
 800327a:	6829      	ldr	r1, [r5, #0]
 800327c:	291d      	cmp	r1, #29
 800327e:	d82c      	bhi.n	80032da <__sflush_r+0xbe>
 8003280:	4b2a      	ldr	r3, [pc, #168]	; (800332c <__sflush_r+0x110>)
 8003282:	410b      	asrs	r3, r1
 8003284:	07db      	lsls	r3, r3, #31
 8003286:	d428      	bmi.n	80032da <__sflush_r+0xbe>
 8003288:	2300      	movs	r3, #0
 800328a:	6063      	str	r3, [r4, #4]
 800328c:	6923      	ldr	r3, [r4, #16]
 800328e:	6023      	str	r3, [r4, #0]
 8003290:	04d2      	lsls	r2, r2, #19
 8003292:	d505      	bpl.n	80032a0 <__sflush_r+0x84>
 8003294:	1c43      	adds	r3, r0, #1
 8003296:	d102      	bne.n	800329e <__sflush_r+0x82>
 8003298:	682b      	ldr	r3, [r5, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d100      	bne.n	80032a0 <__sflush_r+0x84>
 800329e:	6560      	str	r0, [r4, #84]	; 0x54
 80032a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032a2:	602e      	str	r6, [r5, #0]
 80032a4:	2900      	cmp	r1, #0
 80032a6:	d0c5      	beq.n	8003234 <__sflush_r+0x18>
 80032a8:	0023      	movs	r3, r4
 80032aa:	3344      	adds	r3, #68	; 0x44
 80032ac:	4299      	cmp	r1, r3
 80032ae:	d002      	beq.n	80032b6 <__sflush_r+0x9a>
 80032b0:	0028      	movs	r0, r5
 80032b2:	f7ff fbf1 	bl	8002a98 <_free_r>
 80032b6:	2000      	movs	r0, #0
 80032b8:	6360      	str	r0, [r4, #52]	; 0x34
 80032ba:	e7bc      	b.n	8003236 <__sflush_r+0x1a>
 80032bc:	2301      	movs	r3, #1
 80032be:	0028      	movs	r0, r5
 80032c0:	47b8      	blx	r7
 80032c2:	1c43      	adds	r3, r0, #1
 80032c4:	d1c6      	bne.n	8003254 <__sflush_r+0x38>
 80032c6:	682b      	ldr	r3, [r5, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0c3      	beq.n	8003254 <__sflush_r+0x38>
 80032cc:	2b1d      	cmp	r3, #29
 80032ce:	d001      	beq.n	80032d4 <__sflush_r+0xb8>
 80032d0:	2b16      	cmp	r3, #22
 80032d2:	d101      	bne.n	80032d8 <__sflush_r+0xbc>
 80032d4:	602e      	str	r6, [r5, #0]
 80032d6:	e7ad      	b.n	8003234 <__sflush_r+0x18>
 80032d8:	89a2      	ldrh	r2, [r4, #12]
 80032da:	2340      	movs	r3, #64	; 0x40
 80032dc:	4313      	orrs	r3, r2
 80032de:	81a3      	strh	r3, [r4, #12]
 80032e0:	e7a9      	b.n	8003236 <__sflush_r+0x1a>
 80032e2:	690e      	ldr	r6, [r1, #16]
 80032e4:	2e00      	cmp	r6, #0
 80032e6:	d0a5      	beq.n	8003234 <__sflush_r+0x18>
 80032e8:	680f      	ldr	r7, [r1, #0]
 80032ea:	600e      	str	r6, [r1, #0]
 80032ec:	1bba      	subs	r2, r7, r6
 80032ee:	9201      	str	r2, [sp, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	079b      	lsls	r3, r3, #30
 80032f4:	d100      	bne.n	80032f8 <__sflush_r+0xdc>
 80032f6:	694a      	ldr	r2, [r1, #20]
 80032f8:	60a2      	str	r2, [r4, #8]
 80032fa:	9b01      	ldr	r3, [sp, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	dd99      	ble.n	8003234 <__sflush_r+0x18>
 8003300:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003302:	0032      	movs	r2, r6
 8003304:	001f      	movs	r7, r3
 8003306:	0028      	movs	r0, r5
 8003308:	9b01      	ldr	r3, [sp, #4]
 800330a:	6a21      	ldr	r1, [r4, #32]
 800330c:	47b8      	blx	r7
 800330e:	2800      	cmp	r0, #0
 8003310:	dc06      	bgt.n	8003320 <__sflush_r+0x104>
 8003312:	2340      	movs	r3, #64	; 0x40
 8003314:	2001      	movs	r0, #1
 8003316:	89a2      	ldrh	r2, [r4, #12]
 8003318:	4240      	negs	r0, r0
 800331a:	4313      	orrs	r3, r2
 800331c:	81a3      	strh	r3, [r4, #12]
 800331e:	e78a      	b.n	8003236 <__sflush_r+0x1a>
 8003320:	9b01      	ldr	r3, [sp, #4]
 8003322:	1836      	adds	r6, r6, r0
 8003324:	1a1b      	subs	r3, r3, r0
 8003326:	9301      	str	r3, [sp, #4]
 8003328:	e7e7      	b.n	80032fa <__sflush_r+0xde>
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	dfbffffe 	.word	0xdfbffffe

08003330 <_fflush_r>:
 8003330:	690b      	ldr	r3, [r1, #16]
 8003332:	b570      	push	{r4, r5, r6, lr}
 8003334:	0005      	movs	r5, r0
 8003336:	000c      	movs	r4, r1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d102      	bne.n	8003342 <_fflush_r+0x12>
 800333c:	2500      	movs	r5, #0
 800333e:	0028      	movs	r0, r5
 8003340:	bd70      	pop	{r4, r5, r6, pc}
 8003342:	2800      	cmp	r0, #0
 8003344:	d004      	beq.n	8003350 <_fflush_r+0x20>
 8003346:	6a03      	ldr	r3, [r0, #32]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <_fflush_r+0x20>
 800334c:	f7ff fa92 	bl	8002874 <__sinit>
 8003350:	220c      	movs	r2, #12
 8003352:	5ea3      	ldrsh	r3, [r4, r2]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f1      	beq.n	800333c <_fflush_r+0xc>
 8003358:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800335a:	07d2      	lsls	r2, r2, #31
 800335c:	d404      	bmi.n	8003368 <_fflush_r+0x38>
 800335e:	059b      	lsls	r3, r3, #22
 8003360:	d402      	bmi.n	8003368 <_fflush_r+0x38>
 8003362:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003364:	f7ff fb96 	bl	8002a94 <__retarget_lock_acquire_recursive>
 8003368:	0028      	movs	r0, r5
 800336a:	0021      	movs	r1, r4
 800336c:	f7ff ff56 	bl	800321c <__sflush_r>
 8003370:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003372:	0005      	movs	r5, r0
 8003374:	07db      	lsls	r3, r3, #31
 8003376:	d4e2      	bmi.n	800333e <_fflush_r+0xe>
 8003378:	89a3      	ldrh	r3, [r4, #12]
 800337a:	059b      	lsls	r3, r3, #22
 800337c:	d4df      	bmi.n	800333e <_fflush_r+0xe>
 800337e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003380:	f7ff fb89 	bl	8002a96 <__retarget_lock_release_recursive>
 8003384:	e7db      	b.n	800333e <_fflush_r+0xe>

08003386 <__swbuf_r>:
 8003386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003388:	0006      	movs	r6, r0
 800338a:	000d      	movs	r5, r1
 800338c:	0014      	movs	r4, r2
 800338e:	2800      	cmp	r0, #0
 8003390:	d004      	beq.n	800339c <__swbuf_r+0x16>
 8003392:	6a03      	ldr	r3, [r0, #32]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <__swbuf_r+0x16>
 8003398:	f7ff fa6c 	bl	8002874 <__sinit>
 800339c:	69a3      	ldr	r3, [r4, #24]
 800339e:	60a3      	str	r3, [r4, #8]
 80033a0:	89a3      	ldrh	r3, [r4, #12]
 80033a2:	071b      	lsls	r3, r3, #28
 80033a4:	d528      	bpl.n	80033f8 <__swbuf_r+0x72>
 80033a6:	6923      	ldr	r3, [r4, #16]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d025      	beq.n	80033f8 <__swbuf_r+0x72>
 80033ac:	6923      	ldr	r3, [r4, #16]
 80033ae:	6820      	ldr	r0, [r4, #0]
 80033b0:	b2ef      	uxtb	r7, r5
 80033b2:	1ac0      	subs	r0, r0, r3
 80033b4:	6963      	ldr	r3, [r4, #20]
 80033b6:	b2ed      	uxtb	r5, r5
 80033b8:	4283      	cmp	r3, r0
 80033ba:	dc05      	bgt.n	80033c8 <__swbuf_r+0x42>
 80033bc:	0021      	movs	r1, r4
 80033be:	0030      	movs	r0, r6
 80033c0:	f7ff ffb6 	bl	8003330 <_fflush_r>
 80033c4:	2800      	cmp	r0, #0
 80033c6:	d11d      	bne.n	8003404 <__swbuf_r+0x7e>
 80033c8:	68a3      	ldr	r3, [r4, #8]
 80033ca:	3001      	adds	r0, #1
 80033cc:	3b01      	subs	r3, #1
 80033ce:	60a3      	str	r3, [r4, #8]
 80033d0:	6823      	ldr	r3, [r4, #0]
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	6022      	str	r2, [r4, #0]
 80033d6:	701f      	strb	r7, [r3, #0]
 80033d8:	6963      	ldr	r3, [r4, #20]
 80033da:	4283      	cmp	r3, r0
 80033dc:	d004      	beq.n	80033e8 <__swbuf_r+0x62>
 80033de:	89a3      	ldrh	r3, [r4, #12]
 80033e0:	07db      	lsls	r3, r3, #31
 80033e2:	d507      	bpl.n	80033f4 <__swbuf_r+0x6e>
 80033e4:	2d0a      	cmp	r5, #10
 80033e6:	d105      	bne.n	80033f4 <__swbuf_r+0x6e>
 80033e8:	0021      	movs	r1, r4
 80033ea:	0030      	movs	r0, r6
 80033ec:	f7ff ffa0 	bl	8003330 <_fflush_r>
 80033f0:	2800      	cmp	r0, #0
 80033f2:	d107      	bne.n	8003404 <__swbuf_r+0x7e>
 80033f4:	0028      	movs	r0, r5
 80033f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033f8:	0021      	movs	r1, r4
 80033fa:	0030      	movs	r0, r6
 80033fc:	f000 f806 	bl	800340c <__swsetup_r>
 8003400:	2800      	cmp	r0, #0
 8003402:	d0d3      	beq.n	80033ac <__swbuf_r+0x26>
 8003404:	2501      	movs	r5, #1
 8003406:	426d      	negs	r5, r5
 8003408:	e7f4      	b.n	80033f4 <__swbuf_r+0x6e>
	...

0800340c <__swsetup_r>:
 800340c:	4b30      	ldr	r3, [pc, #192]	; (80034d0 <__swsetup_r+0xc4>)
 800340e:	b570      	push	{r4, r5, r6, lr}
 8003410:	0005      	movs	r5, r0
 8003412:	6818      	ldr	r0, [r3, #0]
 8003414:	000c      	movs	r4, r1
 8003416:	2800      	cmp	r0, #0
 8003418:	d004      	beq.n	8003424 <__swsetup_r+0x18>
 800341a:	6a03      	ldr	r3, [r0, #32]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <__swsetup_r+0x18>
 8003420:	f7ff fa28 	bl	8002874 <__sinit>
 8003424:	230c      	movs	r3, #12
 8003426:	5ee2      	ldrsh	r2, [r4, r3]
 8003428:	b293      	uxth	r3, r2
 800342a:	0711      	lsls	r1, r2, #28
 800342c:	d423      	bmi.n	8003476 <__swsetup_r+0x6a>
 800342e:	06d9      	lsls	r1, r3, #27
 8003430:	d407      	bmi.n	8003442 <__swsetup_r+0x36>
 8003432:	2309      	movs	r3, #9
 8003434:	2001      	movs	r0, #1
 8003436:	602b      	str	r3, [r5, #0]
 8003438:	3337      	adds	r3, #55	; 0x37
 800343a:	4313      	orrs	r3, r2
 800343c:	81a3      	strh	r3, [r4, #12]
 800343e:	4240      	negs	r0, r0
 8003440:	bd70      	pop	{r4, r5, r6, pc}
 8003442:	075b      	lsls	r3, r3, #29
 8003444:	d513      	bpl.n	800346e <__swsetup_r+0x62>
 8003446:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003448:	2900      	cmp	r1, #0
 800344a:	d008      	beq.n	800345e <__swsetup_r+0x52>
 800344c:	0023      	movs	r3, r4
 800344e:	3344      	adds	r3, #68	; 0x44
 8003450:	4299      	cmp	r1, r3
 8003452:	d002      	beq.n	800345a <__swsetup_r+0x4e>
 8003454:	0028      	movs	r0, r5
 8003456:	f7ff fb1f 	bl	8002a98 <_free_r>
 800345a:	2300      	movs	r3, #0
 800345c:	6363      	str	r3, [r4, #52]	; 0x34
 800345e:	2224      	movs	r2, #36	; 0x24
 8003460:	89a3      	ldrh	r3, [r4, #12]
 8003462:	4393      	bics	r3, r2
 8003464:	81a3      	strh	r3, [r4, #12]
 8003466:	2300      	movs	r3, #0
 8003468:	6063      	str	r3, [r4, #4]
 800346a:	6923      	ldr	r3, [r4, #16]
 800346c:	6023      	str	r3, [r4, #0]
 800346e:	2308      	movs	r3, #8
 8003470:	89a2      	ldrh	r2, [r4, #12]
 8003472:	4313      	orrs	r3, r2
 8003474:	81a3      	strh	r3, [r4, #12]
 8003476:	6923      	ldr	r3, [r4, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10b      	bne.n	8003494 <__swsetup_r+0x88>
 800347c:	21a0      	movs	r1, #160	; 0xa0
 800347e:	2280      	movs	r2, #128	; 0x80
 8003480:	89a3      	ldrh	r3, [r4, #12]
 8003482:	0089      	lsls	r1, r1, #2
 8003484:	0092      	lsls	r2, r2, #2
 8003486:	400b      	ands	r3, r1
 8003488:	4293      	cmp	r3, r2
 800348a:	d003      	beq.n	8003494 <__swsetup_r+0x88>
 800348c:	0021      	movs	r1, r4
 800348e:	0028      	movs	r0, r5
 8003490:	f000 f866 	bl	8003560 <__smakebuf_r>
 8003494:	220c      	movs	r2, #12
 8003496:	5ea3      	ldrsh	r3, [r4, r2]
 8003498:	2001      	movs	r0, #1
 800349a:	001a      	movs	r2, r3
 800349c:	b299      	uxth	r1, r3
 800349e:	4002      	ands	r2, r0
 80034a0:	4203      	tst	r3, r0
 80034a2:	d00f      	beq.n	80034c4 <__swsetup_r+0xb8>
 80034a4:	2200      	movs	r2, #0
 80034a6:	60a2      	str	r2, [r4, #8]
 80034a8:	6962      	ldr	r2, [r4, #20]
 80034aa:	4252      	negs	r2, r2
 80034ac:	61a2      	str	r2, [r4, #24]
 80034ae:	2000      	movs	r0, #0
 80034b0:	6922      	ldr	r2, [r4, #16]
 80034b2:	4282      	cmp	r2, r0
 80034b4:	d1c4      	bne.n	8003440 <__swsetup_r+0x34>
 80034b6:	0609      	lsls	r1, r1, #24
 80034b8:	d5c2      	bpl.n	8003440 <__swsetup_r+0x34>
 80034ba:	2240      	movs	r2, #64	; 0x40
 80034bc:	4313      	orrs	r3, r2
 80034be:	81a3      	strh	r3, [r4, #12]
 80034c0:	3801      	subs	r0, #1
 80034c2:	e7bd      	b.n	8003440 <__swsetup_r+0x34>
 80034c4:	0788      	lsls	r0, r1, #30
 80034c6:	d400      	bmi.n	80034ca <__swsetup_r+0xbe>
 80034c8:	6962      	ldr	r2, [r4, #20]
 80034ca:	60a2      	str	r2, [r4, #8]
 80034cc:	e7ef      	b.n	80034ae <__swsetup_r+0xa2>
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	20000064 	.word	0x20000064

080034d4 <_sbrk_r>:
 80034d4:	2300      	movs	r3, #0
 80034d6:	b570      	push	{r4, r5, r6, lr}
 80034d8:	4d06      	ldr	r5, [pc, #24]	; (80034f4 <_sbrk_r+0x20>)
 80034da:	0004      	movs	r4, r0
 80034dc:	0008      	movs	r0, r1
 80034de:	602b      	str	r3, [r5, #0]
 80034e0:	f7fd f974 	bl	80007cc <_sbrk>
 80034e4:	1c43      	adds	r3, r0, #1
 80034e6:	d103      	bne.n	80034f0 <_sbrk_r+0x1c>
 80034e8:	682b      	ldr	r3, [r5, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d000      	beq.n	80034f0 <_sbrk_r+0x1c>
 80034ee:	6023      	str	r3, [r4, #0]
 80034f0:	bd70      	pop	{r4, r5, r6, pc}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	200003d8 	.word	0x200003d8

080034f8 <memchr>:
 80034f8:	b2c9      	uxtb	r1, r1
 80034fa:	1882      	adds	r2, r0, r2
 80034fc:	4290      	cmp	r0, r2
 80034fe:	d101      	bne.n	8003504 <memchr+0xc>
 8003500:	2000      	movs	r0, #0
 8003502:	4770      	bx	lr
 8003504:	7803      	ldrb	r3, [r0, #0]
 8003506:	428b      	cmp	r3, r1
 8003508:	d0fb      	beq.n	8003502 <memchr+0xa>
 800350a:	3001      	adds	r0, #1
 800350c:	e7f6      	b.n	80034fc <memchr+0x4>
	...

08003510 <__swhatbuf_r>:
 8003510:	b570      	push	{r4, r5, r6, lr}
 8003512:	000e      	movs	r6, r1
 8003514:	001d      	movs	r5, r3
 8003516:	230e      	movs	r3, #14
 8003518:	5ec9      	ldrsh	r1, [r1, r3]
 800351a:	0014      	movs	r4, r2
 800351c:	b096      	sub	sp, #88	; 0x58
 800351e:	2900      	cmp	r1, #0
 8003520:	da0c      	bge.n	800353c <__swhatbuf_r+0x2c>
 8003522:	89b2      	ldrh	r2, [r6, #12]
 8003524:	2380      	movs	r3, #128	; 0x80
 8003526:	0011      	movs	r1, r2
 8003528:	4019      	ands	r1, r3
 800352a:	421a      	tst	r2, r3
 800352c:	d013      	beq.n	8003556 <__swhatbuf_r+0x46>
 800352e:	2100      	movs	r1, #0
 8003530:	3b40      	subs	r3, #64	; 0x40
 8003532:	2000      	movs	r0, #0
 8003534:	6029      	str	r1, [r5, #0]
 8003536:	6023      	str	r3, [r4, #0]
 8003538:	b016      	add	sp, #88	; 0x58
 800353a:	bd70      	pop	{r4, r5, r6, pc}
 800353c:	466a      	mov	r2, sp
 800353e:	f000 f84d 	bl	80035dc <_fstat_r>
 8003542:	2800      	cmp	r0, #0
 8003544:	dbed      	blt.n	8003522 <__swhatbuf_r+0x12>
 8003546:	23f0      	movs	r3, #240	; 0xf0
 8003548:	9901      	ldr	r1, [sp, #4]
 800354a:	021b      	lsls	r3, r3, #8
 800354c:	4019      	ands	r1, r3
 800354e:	4b03      	ldr	r3, [pc, #12]	; (800355c <__swhatbuf_r+0x4c>)
 8003550:	18c9      	adds	r1, r1, r3
 8003552:	424b      	negs	r3, r1
 8003554:	4159      	adcs	r1, r3
 8003556:	2380      	movs	r3, #128	; 0x80
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	e7ea      	b.n	8003532 <__swhatbuf_r+0x22>
 800355c:	ffffe000 	.word	0xffffe000

08003560 <__smakebuf_r>:
 8003560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003562:	2602      	movs	r6, #2
 8003564:	898b      	ldrh	r3, [r1, #12]
 8003566:	0005      	movs	r5, r0
 8003568:	000c      	movs	r4, r1
 800356a:	4233      	tst	r3, r6
 800356c:	d006      	beq.n	800357c <__smakebuf_r+0x1c>
 800356e:	0023      	movs	r3, r4
 8003570:	3347      	adds	r3, #71	; 0x47
 8003572:	6023      	str	r3, [r4, #0]
 8003574:	6123      	str	r3, [r4, #16]
 8003576:	2301      	movs	r3, #1
 8003578:	6163      	str	r3, [r4, #20]
 800357a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800357c:	466a      	mov	r2, sp
 800357e:	ab01      	add	r3, sp, #4
 8003580:	f7ff ffc6 	bl	8003510 <__swhatbuf_r>
 8003584:	9900      	ldr	r1, [sp, #0]
 8003586:	0007      	movs	r7, r0
 8003588:	0028      	movs	r0, r5
 800358a:	f7ff faf1 	bl	8002b70 <_malloc_r>
 800358e:	2800      	cmp	r0, #0
 8003590:	d108      	bne.n	80035a4 <__smakebuf_r+0x44>
 8003592:	220c      	movs	r2, #12
 8003594:	5ea3      	ldrsh	r3, [r4, r2]
 8003596:	059a      	lsls	r2, r3, #22
 8003598:	d4ef      	bmi.n	800357a <__smakebuf_r+0x1a>
 800359a:	2203      	movs	r2, #3
 800359c:	4393      	bics	r3, r2
 800359e:	431e      	orrs	r6, r3
 80035a0:	81a6      	strh	r6, [r4, #12]
 80035a2:	e7e4      	b.n	800356e <__smakebuf_r+0xe>
 80035a4:	2380      	movs	r3, #128	; 0x80
 80035a6:	89a2      	ldrh	r2, [r4, #12]
 80035a8:	6020      	str	r0, [r4, #0]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	81a3      	strh	r3, [r4, #12]
 80035ae:	9b00      	ldr	r3, [sp, #0]
 80035b0:	6120      	str	r0, [r4, #16]
 80035b2:	6163      	str	r3, [r4, #20]
 80035b4:	9b01      	ldr	r3, [sp, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00c      	beq.n	80035d4 <__smakebuf_r+0x74>
 80035ba:	0028      	movs	r0, r5
 80035bc:	230e      	movs	r3, #14
 80035be:	5ee1      	ldrsh	r1, [r4, r3]
 80035c0:	f000 f81e 	bl	8003600 <_isatty_r>
 80035c4:	2800      	cmp	r0, #0
 80035c6:	d005      	beq.n	80035d4 <__smakebuf_r+0x74>
 80035c8:	2303      	movs	r3, #3
 80035ca:	89a2      	ldrh	r2, [r4, #12]
 80035cc:	439a      	bics	r2, r3
 80035ce:	3b02      	subs	r3, #2
 80035d0:	4313      	orrs	r3, r2
 80035d2:	81a3      	strh	r3, [r4, #12]
 80035d4:	89a3      	ldrh	r3, [r4, #12]
 80035d6:	433b      	orrs	r3, r7
 80035d8:	81a3      	strh	r3, [r4, #12]
 80035da:	e7ce      	b.n	800357a <__smakebuf_r+0x1a>

080035dc <_fstat_r>:
 80035dc:	2300      	movs	r3, #0
 80035de:	b570      	push	{r4, r5, r6, lr}
 80035e0:	4d06      	ldr	r5, [pc, #24]	; (80035fc <_fstat_r+0x20>)
 80035e2:	0004      	movs	r4, r0
 80035e4:	0008      	movs	r0, r1
 80035e6:	0011      	movs	r1, r2
 80035e8:	602b      	str	r3, [r5, #0]
 80035ea:	f7fd f8cc 	bl	8000786 <_fstat>
 80035ee:	1c43      	adds	r3, r0, #1
 80035f0:	d103      	bne.n	80035fa <_fstat_r+0x1e>
 80035f2:	682b      	ldr	r3, [r5, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d000      	beq.n	80035fa <_fstat_r+0x1e>
 80035f8:	6023      	str	r3, [r4, #0]
 80035fa:	bd70      	pop	{r4, r5, r6, pc}
 80035fc:	200003d8 	.word	0x200003d8

08003600 <_isatty_r>:
 8003600:	2300      	movs	r3, #0
 8003602:	b570      	push	{r4, r5, r6, lr}
 8003604:	4d06      	ldr	r5, [pc, #24]	; (8003620 <_isatty_r+0x20>)
 8003606:	0004      	movs	r4, r0
 8003608:	0008      	movs	r0, r1
 800360a:	602b      	str	r3, [r5, #0]
 800360c:	f7fd f8c9 	bl	80007a2 <_isatty>
 8003610:	1c43      	adds	r3, r0, #1
 8003612:	d103      	bne.n	800361c <_isatty_r+0x1c>
 8003614:	682b      	ldr	r3, [r5, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d000      	beq.n	800361c <_isatty_r+0x1c>
 800361a:	6023      	str	r3, [r4, #0]
 800361c:	bd70      	pop	{r4, r5, r6, pc}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	200003d8 	.word	0x200003d8

08003624 <_init>:
 8003624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800362a:	bc08      	pop	{r3}
 800362c:	469e      	mov	lr, r3
 800362e:	4770      	bx	lr

08003630 <_fini>:
 8003630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003636:	bc08      	pop	{r3}
 8003638:	469e      	mov	lr, r3
 800363a:	4770      	bx	lr
